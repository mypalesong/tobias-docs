"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2311],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var o=r(6540);const t={},s=o.createContext(t);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},8853:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"apscheduler/executors","title":"5. Executors","description":"Executor\ub294 APScheduler\uc5d0\uc11c Job\uc744 \uc2e4\uc81c\ub85c \uc2e4\ud589\ud558\ub294 \ucef4\ud3ec\ub10c\ud2b8\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c Executor \ud0c0\uc785\uacfc \uadf8 \ud65c\uc6a9\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/apscheduler/executors.md","sourceDirName":"apscheduler","slug":"/apscheduler/executors","permalink":"/tobias-docs/comp-2/docs/apscheduler/executors","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/apscheduler/executors.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"apschedulerSidebar","previous":{"title":"4. Job \uad00\ub9ac","permalink":"/tobias-docs/comp-2/docs/apscheduler/jobs"},"next":{"title":"6. Job Stores","permalink":"/tobias-docs/comp-2/docs/apscheduler/job-stores"}}');var t=r(4848),s=r(8453);const a={sidebar_position:6},i="5. Executors",c={},d=[{value:"Executor \uac1c\uc694",id:"executor-\uac1c\uc694",level:2},{value:"ThreadPoolExecutor",id:"threadpoolexecutor",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"Worker \uc218 \ub3d9\uc801 \uc870\uc815",id:"worker-\uc218-\ub3d9\uc801-\uc870\uc815",level:3},{value:"\uc2a4\ub808\ub4dc \uc548\uc804\uc131",id:"\uc2a4\ub808\ub4dc-\uc548\uc804\uc131",level:3},{value:"\uc2a4\ub808\ub4dc \ub85c\uceec \uc800\uc7a5\uc18c",id:"\uc2a4\ub808\ub4dc-\ub85c\uceec-\uc800\uc7a5\uc18c",level:3},{value:"Connection Pool \uad00\ub9ac",id:"connection-pool-\uad00\ub9ac",level:3},{value:"ProcessPoolExecutor",id:"processpoolexecutor",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",level:3},{value:"\uc2a4\ub808\ub4dc\uc640 \ud504\ub85c\uc138\uc2a4 \ud63c\ud569 \uc0ac\uc6a9",id:"\uc2a4\ub808\ub4dc\uc640-\ud504\ub85c\uc138\uc2a4-\ud63c\ud569-\uc0ac\uc6a9",level:3},{value:"\ud504\ub85c\uc138\uc2a4 \uac04 \ub370\uc774\ud130 \uacf5\uc720",id:"\ud504\ub85c\uc138\uc2a4-\uac04-\ub370\uc774\ud130-\uacf5\uc720",level:3},{value:"\ud504\ub85c\uc138\uc2a4 \ud480 \ucd5c\uc801\ud654",id:"\ud504\ub85c\uc138\uc2a4-\ud480-\ucd5c\uc801\ud654",level:3},{value:"AsyncIOExecutor",id:"asyncioexecutor",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-2",level:3},{value:"\ube44\ub3d9\uae30 HTTP \uc694\uccad",id:"\ube44\ub3d9\uae30-http-\uc694\uccad",level:3},{value:"\ube44\ub3d9\uae30 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5",id:"\ube44\ub3d9\uae30-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc791\uc5c5",level:3},{value:"\ube44\ub3d9\uae30 Task \ud050",id:"\ube44\ub3d9\uae30-task-\ud050",level:3},{value:"\ucee4\uc2a4\ud140 Executor",id:"\ucee4\uc2a4\ud140-executor",level:2},{value:"\uae30\ubcf8 \ucee4\uc2a4\ud140 Executor",id:"\uae30\ubcf8-\ucee4\uc2a4\ud140-executor",level:3},{value:"\uc6b0\uc120\uc21c\uc704 \uae30\ubc18 Executor",id:"\uc6b0\uc120\uc21c\uc704-\uae30\ubc18-executor",level:3},{value:"\uc7ac\uc2dc\ub3c4 \uae30\ub2a5\uc774 \uc788\ub294 Executor",id:"\uc7ac\uc2dc\ub3c4-\uae30\ub2a5\uc774-\uc788\ub294-executor",level:3},{value:"\ub9ac\uc18c\uc2a4 \uc81c\ud55c Executor",id:"\ub9ac\uc18c\uc2a4-\uc81c\ud55c-executor",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"5-executors",children:"5. Executors"})}),"\n",(0,t.jsx)(n.p,{children:"Executor\ub294 APScheduler\uc5d0\uc11c Job\uc744 \uc2e4\uc81c\ub85c \uc2e4\ud589\ud558\ub294 \ucef4\ud3ec\ub10c\ud2b8\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c Executor \ud0c0\uc785\uacfc \uadf8 \ud65c\uc6a9\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"executor-\uac1c\uc694",children:"Executor \uac1c\uc694"}),"\n",(0,t.jsx)(n.p,{children:"APScheduler\ub294 \uc5ec\ub7ec \uc885\ub958\uc758 Executor\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ThreadPoolExecutor"}),": \uc2a4\ub808\ub4dc \ud480\uc744 \uc0ac\uc6a9\ud558\uc5ec Job \uc2e4\ud589 (\uae30\ubcf8\uac12)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ProcessPoolExecutor"}),": \ud504\ub85c\uc138\uc2a4 \ud480\uc744 \uc0ac\uc6a9\ud558\uc5ec CPU \uc9d1\uc57d\uc801 \uc791\uc5c5 \uc2e4\ud589"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AsyncIOExecutor"}),": asyncio \uc774\ubca4\ud2b8 \ub8e8\ud504\uc5d0\uc11c \ube44\ub3d9\uae30 \uc791\uc5c5 \uc2e4\ud589"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GeventExecutor"}),": gevent\ub97c \uc0ac\uc6a9\ud55c \uc2e4\ud589"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TornadoExecutor"}),": Tornado IOLoop\uc5d0\uc11c \uc2e4\ud589"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TwistedExecutor"}),": Twisted reactor\uc5d0\uc11c \uc2e4\ud589"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \uc0c1\uc704 3\uac00\uc9c0 Executor\ub97c \uc911\uc810\uc801\uc73c\ub85c \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"threadpoolexecutor",children:"ThreadPoolExecutor"}),"\n",(0,t.jsx)(n.p,{children:"ThreadPoolExecutor\ub294 \uc2a4\ub808\ub4dc \ud480\uc744 \uc0ac\uc6a9\ud558\uc5ec Job\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nfrom datetime import datetime\nimport time\nimport threading\n\ndef io_bound_job(job_id):\n    """I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5"""\n    thread_id = threading.current_thread().name\n    print(f"[{datetime.now():%H:%M:%S}] Job {job_id} \uc2dc\uc791 (\uc2a4\ub808\ub4dc: {thread_id})")\n    time.sleep(2)  # I/O \uc2dc\ubbac\ub808\uc774\uc158\n    print(f"[{datetime.now():%H:%M:%S}] Job {job_id} \uc644\ub8cc (\uc2a4\ub808\ub4dc: {thread_id})")\n\n# ThreadPoolExecutor \uc124\uc815\nexecutors = {\n    \'default\': ThreadPoolExecutor(max_workers=5)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# \uc5ec\ub7ec Job \ucd94\uac00\nfor i in range(10):\n    scheduler.add_job(\n        io_bound_job,\n        \'interval\',\n        seconds=1,\n        args=[i],\n        id=f\'job_{i}\'\n    )\n\nscheduler.start()\n\ntry:\n    time.sleep(15)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"worker-\uc218-\ub3d9\uc801-\uc870\uc815",children:"Worker \uc218 \ub3d9\uc801 \uc870\uc815"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nfrom concurrent.futures import ThreadPoolExecutor as ConcurrentThreadPool\nfrom datetime import datetime\nimport time\nimport threading\n\nclass DynamicThreadPoolExecutor:\n    """\ub3d9\uc801\uc73c\ub85c \uc6cc\ucee4 \uc218\ub97c \uc870\uc815\ud558\ub294 Executor"""\n\n    def __init__(self, min_workers=2, max_workers=10):\n        self.min_workers = min_workers\n        self.max_workers = max_workers\n        self.current_workers = min_workers\n        self.executor = ConcurrentThreadPool(max_workers=self.current_workers)\n        self.active_jobs = 0\n        self.lock = threading.Lock()\n\n    def submit(self, fn, *args, **kwargs):\n        """\uc791\uc5c5 \uc81c\ucd9c"""\n        with self.lock:\n            self.active_jobs += 1\n            self._adjust_workers()\n\n        future = self.executor.submit(self._wrapped_fn, fn, args, kwargs)\n        return future\n\n    def _wrapped_fn(self, fn, args, kwargs):\n        """\uc791\uc5c5 \ub798\ud37c"""\n        try:\n            return fn(*args, **kwargs)\n        finally:\n            with self.lock:\n                self.active_jobs -= 1\n                self._adjust_workers()\n\n    def _adjust_workers(self):\n        """\uc6cc\ucee4 \uc218 \uc870\uc815"""\n        # \ud65c\uc131 \uc791\uc5c5\uc774 \ub9ce\uc73c\uba74 \uc6cc\ucee4 \uc99d\uac00\n        if self.active_jobs > self.current_workers * 0.8:\n            new_workers = min(self.current_workers + 2, self.max_workers)\n            if new_workers != self.current_workers:\n                print(f"\uc6cc\ucee4 \uc218 \uc99d\uac00: {self.current_workers} -> {new_workers}")\n                self.current_workers = new_workers\n                self.executor._max_workers = new_workers\n\n        # \ud65c\uc131 \uc791\uc5c5\uc774 \uc801\uc73c\uba74 \uc6cc\ucee4 \uac10\uc18c\n        elif self.active_jobs < self.current_workers * 0.3:\n            new_workers = max(self.current_workers - 1, self.min_workers)\n            if new_workers != self.current_workers:\n                print(f"\uc6cc\ucee4 \uc218 \uac10\uc18c: {self.current_workers} -> {new_workers}")\n                self.current_workers = new_workers\n\n# \uc0ac\uc6a9 \uc608\uc81c\ub294 \ud45c\uc900 ThreadPoolExecutor\ub85c \ub300\uccb4\nexecutors = {\n    \'default\': ThreadPoolExecutor(max_workers=10)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\ndef task(n):\n    thread_name = threading.current_thread().name\n    print(f"\uc791\uc5c5 {n} (\uc2a4\ub808\ub4dc: {thread_name})")\n    time.sleep(1)\n\nfor i in range(20):\n    scheduler.add_job(task, \'date\', args=[i])\n\nscheduler.start()\ntime.sleep(10)\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc2a4\ub808\ub4dc-\uc548\uc804\uc131",children:"\uc2a4\ub808\ub4dc \uc548\uc804\uc131"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nimport threading\nimport time\n\nclass ThreadSafeCounter:\n    """\uc2a4\ub808\ub4dc \uc548\uc804\ud55c \uce74\uc6b4\ud130"""\n\n    def __init__(self):\n        self.count = 0\n        self.lock = threading.Lock()\n\n    def increment(self):\n        """\uce74\uc6b4\ud130 \uc99d\uac00"""\n        with self.lock:\n            self.count += 1\n            print(f"\uce74\uc6b4\ud130: {self.count} (\uc2a4\ub808\ub4dc: {threading.current_thread().name})")\n\n    def get_count(self):\n        """\ud604\uc7ac \uce74\uc6b4\ud130 \uac12"""\n        with self.lock:\n            return self.count\n\n# \uacf5\uc720 \uc790\uc6d0\ncounter = ThreadSafeCounter()\n\nexecutors = {\n    \'default\': ThreadPoolExecutor(max_workers=5)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\ndef increment_task():\n    """\uce74\uc6b4\ud130 \uc99d\uac00 \uc791\uc5c5"""\n    counter.increment()\n    time.sleep(0.1)\n\n# \uc5ec\ub7ec Job\uc774 \ub3d9\uc2dc\uc5d0 \uacf5\uc720 \uc790\uc6d0\uc5d0 \uc811\uadfc\nfor i in range(10):\n    scheduler.add_job(increment_task, \'date\')\n\nscheduler.start()\n\ntime.sleep(5)\n\nprint(f"\\n\ucd5c\uc885 \uce74\uc6b4\ud130 \uac12: {counter.get_count()}")\n\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc2a4\ub808\ub4dc-\ub85c\uceec-\uc800\uc7a5\uc18c",children:"\uc2a4\ub808\ub4dc \ub85c\uceec \uc800\uc7a5\uc18c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nimport threading\nimport time\n\n# \uc2a4\ub808\ub4dc \ub85c\uceec \uc800\uc7a5\uc18c\nthread_local = threading.local()\n\ndef init_thread_context():\n    """\uc2a4\ub808\ub4dc\ubcc4 \ucee8\ud14d\uc2a4\ud2b8 \ucd08\uae30\ud654"""\n    if not hasattr(thread_local, \'initialized\'):\n        thread_local.initialized = True\n        thread_local.thread_id = threading.current_thread().name\n        thread_local.request_count = 0\n        print(f"\uc2a4\ub808\ub4dc {thread_local.thread_id} \ucd08\uae30\ud654\ub428")\n\ndef thread_aware_job(job_name):\n    """\uc2a4\ub808\ub4dc \uc778\uc2dd \uc791\uc5c5"""\n    init_thread_context()\n\n    thread_local.request_count += 1\n    print(f"[{job_name}] \uc2a4\ub808\ub4dc: {thread_local.thread_id}, "\n          f"\uc694\uccad \uc218: {thread_local.request_count}")\n    time.sleep(1)\n\nexecutors = {\n    \'default\': ThreadPoolExecutor(max_workers=3)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# \uc5ec\ub7ec Job \ucd94\uac00\nfor i in range(10):\n    scheduler.add_job(\n        thread_aware_job,\n        \'date\',\n        args=[f\'Job-{i}\']\n    )\n\nscheduler.start()\n\ntime.sleep(10)\n\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"connection-pool-\uad00\ub9ac",children:"Connection Pool \uad00\ub9ac"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nimport threading\nimport time\nfrom queue import Queue\n\nclass ConnectionPool:\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud480 \uc2dc\ubbac\ub808\uc774\uc158"""\n\n    def __init__(self, max_connections=5):\n        self.max_connections = max_connections\n        self.pool = Queue(maxsize=max_connections)\n        self.lock = threading.Lock()\n\n        # \uc5f0\uacb0 \ucd08\uae30\ud654\n        for i in range(max_connections):\n            self.pool.put(f"Connection-{i}")\n\n    def get_connection(self):\n        """\uc5f0\uacb0 \uac00\uc838\uc624\uae30"""\n        conn = self.pool.get()\n        print(f"\uc5f0\uacb0 \ud68d\ub4dd: {conn} (\uc2a4\ub808\ub4dc: {threading.current_thread().name})")\n        return conn\n\n    def release_connection(self, conn):\n        """\uc5f0\uacb0 \ubc18\ud658"""\n        print(f"\uc5f0\uacb0 \ubc18\ud658: {conn} (\uc2a4\ub808\ub4dc: {threading.current_thread().name})")\n        self.pool.put(conn)\n\n# \uc804\uc5ed \uc5f0\uacb0 \ud480\ndb_pool = ConnectionPool(max_connections=3)\n\ndef database_job(query):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5"""\n    # \uc5f0\uacb0 \ud68d\ub4dd\n    conn = db_pool.get_connection()\n\n    try:\n        # \ucffc\ub9ac \uc2e4\ud589 \uc2dc\ubbac\ub808\uc774\uc158\n        print(f"\ucffc\ub9ac \uc2e4\ud589: {query}")\n        time.sleep(2)\n        print(f"\ucffc\ub9ac \uc644\ub8cc: {query}")\n    finally:\n        # \uc5f0\uacb0 \ubc18\ud658\n        db_pool.release_connection(conn)\n\nexecutors = {\n    \'default\': ThreadPoolExecutor(max_workers=5)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# \uc5ec\ub7ec \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 \uc2a4\ucf00\uc904\nqueries = [\n    "SELECT * FROM users",\n    "SELECT * FROM orders",\n    "SELECT * FROM products",\n    "UPDATE inventory",\n    "DELETE old_logs"\n]\n\nfor query in queries:\n    scheduler.add_job(database_job, \'date\', args=[query])\n\nscheduler.start()\n\ntime.sleep(10)\n\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"processpoolexecutor",children:"ProcessPoolExecutor"}),"\n",(0,t.jsx)(n.p,{children:"ProcessPoolExecutor\ub294 \ud504\ub85c\uc138\uc2a4 \ud480\uc744 \uc0ac\uc6a9\ud558\uc5ec Job\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ProcessPoolExecutor\nimport os\nimport time\n\ndef cpu_intensive_job(n):\n    """CPU \uc9d1\uc57d\uc801 \uc791\uc5c5"""\n    pid = os.getpid()\n    print(f"\ud504\ub85c\uc138\uc2a4 {pid}\uc5d0\uc11c \uc791\uc5c5 {n} \uc2dc\uc791")\n\n    # CPU \uc9d1\uc57d\uc801 \uacc4\uc0b0\n    result = 0\n    for i in range(10**7):\n        result += i ** 2\n\n    print(f"\ud504\ub85c\uc138\uc2a4 {pid}\uc5d0\uc11c \uc791\uc5c5 {n} \uc644\ub8cc: {result % 1000}")\n    return result\n\n# ProcessPoolExecutor \uc124\uc815\nexecutors = {\n    \'default\': ProcessPoolExecutor(max_workers=4)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# CPU \uc9d1\uc57d\uc801 \uc791\uc5c5 \ucd94\uac00\nfor i in range(8):\n    scheduler.add_job(\n        cpu_intensive_job,\n        \'date\',\n        args=[i],\n        id=f\'cpu_job_{i}\',\n        executor=\'default\'\n    )\n\nscheduler.start()\n\nprint(f"\uba54\uc778 \ud504\ub85c\uc138\uc2a4 PID: {os.getpid()}")\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc2a4\ub808\ub4dc\uc640-\ud504\ub85c\uc138\uc2a4-\ud63c\ud569-\uc0ac\uc6a9",children:"\uc2a4\ub808\ub4dc\uc640 \ud504\ub85c\uc138\uc2a4 \ud63c\ud569 \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor\nimport time\nimport os\n\ndef io_bound_task(name):\n    """I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5 (\uc2a4\ub808\ub4dc \uc0ac\uc6a9)"""\n    print(f"[I/O] {name} \uc2dc\uc791 (PID: {os.getpid()})")\n    time.sleep(2)\n    print(f"[I/O] {name} \uc644\ub8cc")\n\ndef cpu_bound_task(name):\n    """CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5 (\ud504\ub85c\uc138\uc2a4 \uc0ac\uc6a9)"""\n    print(f"[CPU] {name} \uc2dc\uc791 (PID: {os.getpid()})")\n    result = sum(i**2 for i in range(10**7))\n    print(f"[CPU] {name} \uc644\ub8cc (\uacb0\uacfc: {result % 1000})")\n\n# \uc5ec\ub7ec Executor \uc124\uc815\nexecutors = {\n    \'thread_pool\': ThreadPoolExecutor(max_workers=5),\n    \'process_pool\': ProcessPoolExecutor(max_workers=3)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# I/O \uc791\uc5c5\uc740 \uc2a4\ub808\ub4dc \ud480\uc5d0\uc11c\nfor i in range(3):\n    scheduler.add_job(\n        io_bound_task,\n        \'date\',\n        args=[f\'IO-Task-{i}\'],\n        executor=\'thread_pool\'\n    )\n\n# CPU \uc791\uc5c5\uc740 \ud504\ub85c\uc138\uc2a4 \ud480\uc5d0\uc11c\nfor i in range(3):\n    scheduler.add_job(\n        cpu_bound_task,\n        \'date\',\n        args=[f\'CPU-Task-{i}\'],\n        executor=\'process_pool\'\n    )\n\nscheduler.start()\n\nprint(f"\uba54\uc778 \ud504\ub85c\uc138\uc2a4: {os.getpid()}")\n\ntry:\n    time.sleep(20)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ud504\ub85c\uc138\uc2a4-\uac04-\ub370\uc774\ud130-\uacf5\uc720",children:"\ud504\ub85c\uc138\uc2a4 \uac04 \ub370\uc774\ud130 \uacf5\uc720"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ProcessPoolExecutor\nfrom multiprocessing import Manager\nimport os\nimport time\n\n# \ud504\ub85c\uc138\uc2a4 \uac04 \uacf5\uc720 \ub370\uc774\ud130\nmanager = Manager()\nshared_dict = manager.dict()\nshared_list = manager.list()\n\ndef process_job(job_id, shared_dict, shared_list):\n    """\ud504\ub85c\uc138\uc2a4 \uc791\uc5c5"""\n    pid = os.getpid()\n\n    # \uacf5\uc720 \ub515\uc154\ub108\ub9ac\uc5d0 \ub370\uc774\ud130 \uc800\uc7a5\n    shared_dict[job_id] = {\n        \'pid\': pid,\n        \'timestamp\': time.time()\n    }\n\n    # \uacf5\uc720 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n    shared_list.append(f"Job {job_id} by PID {pid}")\n\n    print(f"Job {job_id} \uc2e4\ud589 (PID: {pid})")\n    time.sleep(1)\n\nexecutors = {\n    \'default\': ProcessPoolExecutor(max_workers=3)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# \uc5ec\ub7ec Job \ucd94\uac00\nfor i in range(5):\n    scheduler.add_job(\n        process_job,\n        \'date\',\n        args=[i, shared_dict, shared_list]\n    )\n\nscheduler.start()\n\ntime.sleep(10)\n\n# \uacb0\uacfc \ud655\uc778\nprint("\\n\uacf5\uc720 \ub515\uc154\ub108\ub9ac:")\nfor key, value in shared_dict.items():\n    print(f"  {key}: {value}")\n\nprint("\\n\uacf5\uc720 \ub9ac\uc2a4\ud2b8:")\nfor item in shared_list:\n    print(f"  - {item}")\n\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ud504\ub85c\uc138\uc2a4-\ud480-\ucd5c\uc801\ud654",children:"\ud504\ub85c\uc138\uc2a4 \ud480 \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ProcessPoolExecutor\nimport multiprocessing\nimport os\nimport time\n\ndef optimized_cpu_task(data_size):\n    """\ucd5c\uc801\ud654\ub41c CPU \uc791\uc5c5"""\n    pid = os.getpid()\n    print(f"\ud504\ub85c\uc138\uc2a4 {pid}\uc5d0\uc11c \ub370\uc774\ud130 \ud06c\uae30 {data_size} \ucc98\ub9ac \uc2dc\uc791")\n\n    # CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\n    data = list(range(data_size))\n    result = sum(x**2 for x in data)\n\n    print(f"\ud504\ub85c\uc138\uc2a4 {pid} \uc644\ub8cc: {result % 10000}")\n    return result\n\n# CPU \ucf54\uc5b4 \uc218\uc5d0 \ub9de\ucdb0 \uc6cc\ucee4 \uc124\uc815\ncpu_count = multiprocessing.cpu_count()\nprint(f"CPU \ucf54\uc5b4 \uc218: {cpu_count}")\n\nexecutors = {\n    \'default\': ProcessPoolExecutor(max_workers=cpu_count)\n}\n\njob_defaults = {\n    \'coalesce\': False,\n    \'max_instances\': 1\n}\n\nscheduler = BackgroundScheduler(\n    executors=executors,\n    job_defaults=job_defaults\n)\n\n# \ub2e4\uc591\ud55c \ud06c\uae30\uc758 \uc791\uc5c5 \ucd94\uac00\ndata_sizes = [10**6, 10**6, 10**7, 10**7, 10**6]\n\nfor i, size in enumerate(data_sizes):\n    scheduler.add_job(\n        optimized_cpu_task,\n        \'date\',\n        args=[size],\n        id=f\'task_{i}\'\n    )\n\nscheduler.start()\n\nprint(f"\uba54\uc778 \ud504\ub85c\uc138\uc2a4: {os.getpid()}")\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"asyncioexecutor",children:"AsyncIOExecutor"}),"\n",(0,t.jsx)(n.p,{children:"AsyncIOExecutor\ub294 asyncio \uc774\ubca4\ud2b8 \ub8e8\ud504\uc5d0\uc11c \ube44\ub3d9\uae30 \uc791\uc5c5\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-2",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.executors.asyncio import AsyncIOExecutor\nfrom datetime import datetime\n\nasync def async_job(name):\n    """\ube44\ub3d9\uae30 \uc791\uc5c5"""\n    print(f"[{datetime.now():%H:%M:%S}] {name} \uc2dc\uc791")\n    await asyncio.sleep(2)\n    print(f"[{datetime.now():%H:%M:%S}] {name} \uc644\ub8cc")\n\nasync def main():\n    # AsyncIOExecutor \uc124\uc815\n    executors = {\n        \'default\': AsyncIOExecutor()\n    }\n\n    scheduler = AsyncIOScheduler(executors=executors)\n\n    # \uc5ec\ub7ec \ube44\ub3d9\uae30 Job \ucd94\uac00\n    for i in range(5):\n        scheduler.add_job(\n            async_job,\n            \'interval\',\n            seconds=3,\n            args=[f\'Job-{i}\'],\n            id=f\'async_job_{i}\'\n        )\n\n    scheduler.start()\n\n    print("\ube44\ub3d9\uae30 \uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589 \uc911...")\n\n    try:\n        await asyncio.sleep(20)\n    except asyncio.CancelledError:\n        pass\n    finally:\n        scheduler.shutdown()\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ube44\ub3d9\uae30-http-\uc694\uccad",children:"\ube44\ub3d9\uae30 HTTP \uc694\uccad"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom datetime import datetime\n\nasync def fetch_url(url, session):\n    """\ube44\ub3d9\uae30 URL \uac00\uc838\uc624\uae30"""\n    try:\n        async with session.get(url, timeout=10) as response:\n            data = await response.text()\n            print(f"[{datetime.now():%H:%M:%S}] {url}: {response.status} ({len(data)} bytes)")\n            return data\n    except Exception as e:\n        print(f"[{datetime.now():%H:%M:%S}] {url} \uc624\ub958: {e}")\n        return None\n\nasync def fetch_multiple_urls(urls):\n    """\uc5ec\ub7ec URL \ub3d9\uc2dc \uac00\uc838\uc624\uae30"""\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_url(url, session) for url in urls]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        return results\n\nasync def scheduled_fetch():\n    """\uc2a4\ucf00\uc904\ub41c URL \uc218\uc9d1 \uc791\uc5c5"""\n    urls = [\n        \'https://httpbin.org/delay/1\',\n        \'https://httpbin.org/delay/2\',\n        \'https://httpbin.org/delay/1\',\n    ]\n\n    print(f"\\n[{datetime.now():%H:%M:%S}] URL \uc218\uc9d1 \uc2dc\uc791")\n    results = await fetch_multiple_urls(urls)\n    print(f"[{datetime.now():%H:%M:%S}] \uc218\uc9d1 \uc644\ub8cc: {len([r for r in results if r])}\uac1c \uc131\uacf5")\n\nasync def main():\n    scheduler = AsyncIOScheduler()\n\n    # 10\ucd08\ub9c8\ub2e4 URL \uc218\uc9d1\n    scheduler.add_job(\n        scheduled_fetch,\n        \'interval\',\n        seconds=10,\n        id=\'url_fetch\'\n    )\n\n    scheduler.start()\n\n    print("\ube44\ub3d9\uae30 URL \uc218\uc9d1 \uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589 \uc911...")\n\n    try:\n        await asyncio.sleep(35)\n    except asyncio.CancelledError:\n        pass\n    finally:\n        scheduler.shutdown()\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ube44\ub3d9\uae30-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc791\uc5c5",children:"\ube44\ub3d9\uae30 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom datetime import datetime\n\n# \ube44\ub3d9\uae30 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucee4\ub125\uc158 \ud480 \uc2dc\ubbac\ub808\uc774\uc158\nclass AsyncDBPool:\n    """\ube44\ub3d9\uae30 DB \ucee4\ub125\uc158 \ud480"""\n\n    def __init__(self, max_connections=5):\n        self.max_connections = max_connections\n        self.semaphore = asyncio.Semaphore(max_connections)\n\n    async def execute(self, query):\n        """\ucffc\ub9ac \uc2e4\ud589"""\n        async with self.semaphore:\n            print(f"[{datetime.now():%H:%M:%S}] \ucffc\ub9ac \uc2e4\ud589: {query}")\n            await asyncio.sleep(1)  # DB \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n            print(f"[{datetime.now():%H:%M:%S}] \ucffc\ub9ac \uc644\ub8cc: {query}")\n            return f"Result of {query}"\n\n# \uc804\uc5ed DB \ud480\ndb_pool = AsyncDBPool(max_connections=3)\n\nasync def async_db_job(query):\n    """\ube44\ub3d9\uae30 DB \uc791\uc5c5"""\n    result = await db_pool.execute(query)\n    return result\n\nasync def batch_db_job():\n    """\ubc30\uce58 DB \uc791\uc5c5"""\n    queries = [\n        "SELECT * FROM users",\n        "SELECT * FROM orders",\n        "UPDATE inventory",\n        "SELECT * FROM products"\n    ]\n\n    print(f"\\n[{datetime.now():%H:%M:%S}] \ubc30\uce58 \uc791\uc5c5 \uc2dc\uc791")\n    tasks = [async_db_job(query) for query in queries]\n    results = await asyncio.gather(*tasks)\n    print(f"[{datetime.now():%H:%M:%S}] \ubc30\uce58 \uc791\uc5c5 \uc644\ub8cc: {len(results)}\uac1c \ucffc\ub9ac")\n\nasync def main():\n    scheduler = AsyncIOScheduler()\n\n    # \uc8fc\uae30\uc801 \ubc30\uce58 \uc791\uc5c5\n    scheduler.add_job(\n        batch_db_job,\n        \'interval\',\n        seconds=15,\n        id=\'batch_db\'\n    )\n\n    scheduler.start()\n\n    print("\ube44\ub3d9\uae30 DB \uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589 \uc911...")\n\n    try:\n        await asyncio.sleep(40)\n    except asyncio.CancelledError:\n        pass\n    finally:\n        scheduler.shutdown()\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ube44\ub3d9\uae30-task-\ud050",children:"\ube44\ub3d9\uae30 Task \ud050"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom datetime import datetime\nfrom collections import deque\n\nclass AsyncTaskQueue:\n    """\ube44\ub3d9\uae30 Task \ud050"""\n\n    def __init__(self):\n        self.queue = deque()\n        self.processing = False\n\n    async def add_task(self, task_func, *args, **kwargs):\n        """Task \ucd94\uac00"""\n        self.queue.append((task_func, args, kwargs))\n        print(f"Task \ucd94\uac00\ub428 (\ud050 \ud06c\uae30: {len(self.queue)})")\n\n    async def process_queue(self):\n        """\ud050 \ucc98\ub9ac"""\n        if self.processing:\n            print("\uc774\ubbf8 \ucc98\ub9ac \uc911...")\n            return\n\n        self.processing = True\n        print(f"\\n[{datetime.now():%H:%M:%S}] \ud050 \ucc98\ub9ac \uc2dc\uc791 (\ud06c\uae30: {len(self.queue)})")\n\n        while self.queue:\n            task_func, args, kwargs = self.queue.popleft()\n\n            try:\n                await task_func(*args, **kwargs)\n            except Exception as e:\n                print(f"Task \uc624\ub958: {e}")\n\n        print(f"[{datetime.now():%H:%M:%S}] \ud050 \ucc98\ub9ac \uc644\ub8cc")\n        self.processing = False\n\n# \uc804\uc5ed \ud050\ntask_queue = AsyncTaskQueue()\n\nasync def sample_task(task_id):\n    """\uc0d8\ud50c Task"""\n    print(f"  Task {task_id} \uc2e4\ud589 \uc911...")\n    await asyncio.sleep(1)\n    print(f"  Task {task_id} \uc644\ub8cc")\n\nasync def add_tasks():\n    """Task \ucd94\uac00"""\n    for i in range(5):\n        await task_queue.add_task(sample_task, i)\n\nasync def main():\n    scheduler = AsyncIOScheduler()\n\n    # 5\ucd08\ub9c8\ub2e4 Task \ucd94\uac00\n    scheduler.add_job(add_tasks, \'interval\', seconds=5, id=\'add_tasks\')\n\n    # 10\ucd08\ub9c8\ub2e4 \ud050 \ucc98\ub9ac\n    scheduler.add_job(task_queue.process_queue, \'interval\', seconds=10, id=\'process_queue\')\n\n    scheduler.start()\n\n    print("\ube44\ub3d9\uae30 Task \ud050 \uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589 \uc911...")\n\n    try:\n        await asyncio.sleep(30)\n    except asyncio.CancelledError:\n        pass\n    finally:\n        scheduler.shutdown()\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\ucee4\uc2a4\ud140-executor",children:"\ucee4\uc2a4\ud140 Executor"}),"\n",(0,t.jsx)(n.p,{children:"\ud2b9\ubcc4\ud55c \uc694\uad6c\uc0ac\ud56d\uc774 \uc788\uc744 \ub54c \ucee4\uc2a4\ud140 Executor\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\ucee4\uc2a4\ud140-executor",children:"\uae30\ubcf8 \ucee4\uc2a4\ud140 Executor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.base import BaseExecutor\nfrom concurrent.futures import ThreadPoolExecutor\nimport time\nfrom datetime import datetime\n\nclass LoggingExecutor(BaseExecutor):\n    """\ub85c\uae45 \uae30\ub2a5\uc774 \ucd94\uac00\ub41c Executor"""\n\n    def __init__(self, max_workers=10):\n        super().__init__()\n        self.executor = ThreadPoolExecutor(max_workers=max_workers)\n\n    def start(self, scheduler, alias):\n        """Executor \uc2dc\uc791"""\n        super().start(scheduler, alias)\n        print(f"LoggingExecutor \'{alias}\' \uc2dc\uc791\ub428 (\uc6cc\ucee4: {self.executor._max_workers})")\n\n    def shutdown(self, wait=True):\n        """Executor \uc885\ub8cc"""\n        print(f"LoggingExecutor \uc885\ub8cc \uc911... (wait={wait})")\n        self.executor.shutdown(wait=wait)\n\n    def _do_submit_job(self, job, run_times):\n        """Job \uc81c\ucd9c"""\n        def wrapped_job():\n            print(f"[{datetime.now():%H:%M:%S}] Job {job.id} \uc2dc\uc791")\n            start_time = time.time()\n\n            try:\n                return job.func(*job.args, **job.kwargs)\n            finally:\n                duration = time.time() - start_time\n                print(f"[{datetime.now():%H:%M:%S}] Job {job.id} \uc644\ub8cc (\uc18c\uc694: {duration:.2f}\ucd08)")\n\n        future = self.executor.submit(wrapped_job)\n        return future\n\n# \uc0ac\uc6a9 \uc608\uc81c\nexecutors = {\n    \'default\': LoggingExecutor(max_workers=5)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\ndef sample_job(n):\n    print(f"  \uc791\uc5c5 {n} \uc2e4\ud589 \uc911")\n    time.sleep(1)\n\nfor i in range(3):\n    scheduler.add_job(sample_job, \'date\', args=[i])\n\nscheduler.start()\n\ntime.sleep(10)\n\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc6b0\uc120\uc21c\uc704-\uae30\ubc18-executor",children:"\uc6b0\uc120\uc21c\uc704 \uae30\ubc18 Executor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.base import BaseExecutor\nfrom concurrent.futures import ThreadPoolExecutor\nfrom queue import PriorityQueue\nimport threading\nimport time\n\nclass PriorityExecutor(BaseExecutor):\n    \"\"\"\uc6b0\uc120\uc21c\uc704 \uae30\ubc18 Executor\"\"\"\n\n    def __init__(self, max_workers=5):\n        super().__init__()\n        self.max_workers = max_workers\n        self.queue = PriorityQueue()\n        self.workers = []\n        self.shutdown_flag = False\n\n    def start(self, scheduler, alias):\n        \"\"\"Executor \uc2dc\uc791\"\"\"\n        super().start(scheduler, alias)\n\n        # \uc6cc\ucee4 \uc2a4\ub808\ub4dc \uc2dc\uc791\n        for i in range(self.max_workers):\n            worker = threading.Thread(target=self._worker, name=f'Worker-{i}')\n            worker.daemon = True\n            worker.start()\n            self.workers.append(worker)\n\n        print(f\"PriorityExecutor \uc2dc\uc791\ub428 (\uc6cc\ucee4: {self.max_workers})\")\n\n    def shutdown(self, wait=True):\n        \"\"\"Executor \uc885\ub8cc\"\"\"\n        self.shutdown_flag = True\n\n        # \uc6cc\ucee4\ub4e4\uc5d0\uac8c \uc885\ub8cc \uc2e0\ud638\n        for _ in self.workers:\n            self.queue.put((0, None))\n\n        if wait:\n            for worker in self.workers:\n                worker.join()\n\n    def _worker(self):\n        \"\"\"\uc6cc\ucee4 \uc2a4\ub808\ub4dc\"\"\"\n        while not self.shutdown_flag:\n            try:\n                priority, job_info = self.queue.get(timeout=1)\n\n                if job_info is None:  # \uc885\ub8cc \uc2e0\ud638\n                    break\n\n                job, run_times = job_info\n                print(f\"[\uc6b0\uc120\uc21c\uc704 {priority}] Job {job.id} \uc2e4\ud589\")\n\n                try:\n                    job.func(*job.args, **job.kwargs)\n                except Exception as e:\n                    print(f\"Job {job.id} \uc624\ub958: {e}\")\n\n            except Exception:\n                continue\n\n    def _do_submit_job(self, job, run_times):\n        \"\"\"Job \uc81c\ucd9c (\uc6b0\uc120\uc21c\uc704 \ucd94\ucd9c)\"\"\"\n        # Job\uc758 kwargs\uc5d0\uc11c priority \ucd94\ucd9c (\uc5c6\uc73c\uba74 5)\n        priority = job.kwargs.pop('priority', 5)\n\n        # \uc6b0\uc120\uc21c\uc704\uac00 \ub0ae\uc744\uc218\ub85d \uba3c\uc800 \uc2e4\ud589 (1\uc774 \uac00\uc7a5 \ub192\uc740 \uc6b0\uc120\uc21c\uc704)\n        self.queue.put((priority, (job, run_times)))\n\n        # Future \uac1d\uccb4 \ubc18\ud658 (\uac04\ub2e8\ud55c \uad6c\ud604)\n        from concurrent.futures import Future\n        future = Future()\n        future.set_result(None)\n        return future\n\n# \uc0ac\uc6a9 \uc608\uc81c\nexecutors = {\n    'priority': PriorityExecutor(max_workers=3)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\ndef task(name, priority):\n    print(f\"  \uc791\uc5c5 {name} \uc2e4\ud589 (\uc6b0\uc120\uc21c\uc704: {priority})\")\n    time.sleep(1)\n\n# \ub2e4\uc591\ud55c \uc6b0\uc120\uc21c\uc704\uc758 Job \ucd94\uac00\nscheduler.add_job(task, 'date', args=['Low', 9], kwargs={'priority': 9}, executor='priority')\nscheduler.add_job(task, 'date', args=['High', 1], kwargs={'priority': 1}, executor='priority')\nscheduler.add_job(task, 'date', args=['Medium', 5], kwargs={'priority': 5}, executor='priority')\nscheduler.add_job(task, 'date', args=['Critical', 0], kwargs={'priority': 0}, executor='priority')\n\nscheduler.start()\n\ntime.sleep(10)\n\nscheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc7ac\uc2dc\ub3c4-\uae30\ub2a5\uc774-\uc788\ub294-executor",children:"\uc7ac\uc2dc\ub3c4 \uae30\ub2a5\uc774 \uc788\ub294 Executor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nimport time\nimport random\nfrom datetime import datetime\n\nclass RetryWrapper:\n    """\uc7ac\uc2dc\ub3c4 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ub798\ud37c"""\n\n    def __init__(self, func, max_retries=3, retry_delay=1):\n        self.func = func\n        self.max_retries = max_retries\n        self.retry_delay = retry_delay\n\n    def __call__(self, *args, **kwargs):\n        """\uc7ac\uc2dc\ub3c4 \ub85c\uc9c1"""\n        for attempt in range(self.max_retries):\n            try:\n                print(f"[{datetime.now():%H:%M:%S}] \uc2dc\ub3c4 {attempt + 1}/{self.max_retries}")\n                result = self.func(*args, **kwargs)\n                print(f"[{datetime.now():%H:%M:%S}] \uc131\uacf5!")\n                return result\n            except Exception as e:\n                print(f"[{datetime.now():%H:%M:%S}] \uc2e4\ud328: {e}")\n\n                if attempt < self.max_retries - 1:\n                    print(f"  {self.retry_delay}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4...")\n                    time.sleep(self.retry_delay)\n                else:\n                    print(f"  \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc")\n                    raise\n\ndef unreliable_task(name):\n    """\ubd88\uc548\uc815\ud55c \uc791\uc5c5 (70% \ud655\ub960\ub85c \uc2e4\ud328)"""\n    if random.random() < 0.7:\n        raise Exception(f"{name}: \uc784\uc758 \uc624\ub958 \ubc1c\uc0dd")\n\n    print(f"  {name} \uc791\uc5c5 \uc644\ub8cc")\n    return f"{name} \uacb0\uacfc"\n\n# Retry Wrapper \uc801\uc6a9\nexecutors = {\n    \'default\': ThreadPoolExecutor(max_workers=3)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# RetryWrapper\ub85c \uac10\uc2f8\uc11c \ucd94\uac00\nwrapped_task = RetryWrapper(unreliable_task, max_retries=3, retry_delay=1)\n\nfor i in range(3):\n    scheduler.add_job(\n        wrapped_task,\n        \'date\',\n        args=[f\'Task-{i}\'],\n        id=f\'retry_task_{i}\'\n    )\n\nscheduler.start()\n\ntime.sleep(15)\n\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ub9ac\uc18c\uc2a4-\uc81c\ud55c-executor",children:"\ub9ac\uc18c\uc2a4 \uc81c\ud55c Executor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.base import BaseExecutor\nfrom concurrent.futures import ThreadPoolExecutor\nimport time\nimport threading\nfrom datetime import datetime\n\nclass ResourceLimitedExecutor(BaseExecutor):\n    """\ub9ac\uc18c\uc2a4 \uc81c\ud55c\uc774 \uc788\ub294 Executor"""\n\n    def __init__(self, max_workers=5, max_memory_mb=100):\n        super().__init__()\n        self.executor = ThreadPoolExecutor(max_workers=max_workers)\n        self.max_memory_mb = max_memory_mb\n        self.current_memory = 0\n        self.lock = threading.Lock()\n\n    def _do_submit_job(self, job, run_times):\n        """Job \uc81c\ucd9c (\ub9ac\uc18c\uc2a4 \ud655\uc778)"""\n        # Job\uc758 \uc608\uc0c1 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 (kwargs\uc5d0\uc11c \ucd94\ucd9c)\n        memory_required = job.kwargs.pop(\'memory_mb\', 10)\n\n        def wrapped_job():\n            # \uba54\ubaa8\ub9ac \ud560\ub2f9\n            with self.lock:\n                while self.current_memory + memory_required > self.max_memory_mb:\n                    print(f"[{datetime.now():%H:%M:%S}] "\n                          f"\uba54\ubaa8\ub9ac \ubd80\uc871, \ub300\uae30 \uc911... "\n                          f"(\ud604\uc7ac: {self.current_memory}MB, \ud544\uc694: {memory_required}MB)")\n                    time.sleep(1)\n\n                self.current_memory += memory_required\n                print(f"[{datetime.now():%H:%M:%S}] "\n                      f"Job {job.id} \uc2dc\uc791 (\uba54\ubaa8\ub9ac: {self.current_memory}MB)")\n\n            try:\n                return job.func(*job.args, **job.kwargs)\n            finally:\n                # \uba54\ubaa8\ub9ac \ud574\uc81c\n                with self.lock:\n                    self.current_memory -= memory_required\n                    print(f"[{datetime.now():%H:%M:%S}] "\n                          f"Job {job.id} \uc644\ub8cc (\uba54\ubaa8\ub9ac: {self.current_memory}MB)")\n\n        return self.executor.submit(wrapped_job)\n\n    def shutdown(self, wait=True):\n        """Executor \uc885\ub8cc"""\n        self.executor.shutdown(wait=wait)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nexecutors = {\n    \'resource_limited\': ResourceLimitedExecutor(max_workers=5, max_memory_mb=50)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\ndef memory_intensive_task(name, size):\n    print(f"  {name} \uc791\uc5c5 \uc2e4\ud589 (\ud06c\uae30: {size}MB)")\n    time.sleep(2)\n    print(f"  {name} \uc644\ub8cc")\n\n# \ub2e4\uc591\ud55c \uba54\ubaa8\ub9ac \uc694\uad6c\uc0ac\ud56d\uc758 Job\ntasks = [\n    (\'Task-A\', 30),\n    (\'Task-B\', 20),\n    (\'Task-C\', 15),\n    (\'Task-D\', 25),\n]\n\nfor name, memory in tasks:\n    scheduler.add_job(\n        memory_intensive_task,\n        \'date\',\n        args=[name, memory],\n        kwargs={\'memory_mb\': memory},\n        executor=\'resource_limited\'\n    )\n\nscheduler.start()\n\ntime.sleep(20)\n\nscheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\uc758 \ub2e4\uc591\ud55c Executor \ud0c0\uc785\uacfc \ucee4\uc2a4\ud140 Executor \uc791\uc131 \ubc29\ubc95\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 Job Store\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);