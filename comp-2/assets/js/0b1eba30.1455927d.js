"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3349],{2791:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"python/practical/apis","title":"2. REST API \uac1c\ubc1c","description":"REST API\ub294 \ud604\ub300 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Python\uc758 FastAPI \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 REST API\ub97c \uac1c\ubc1c\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/python/practical/apis.md","sourceDirName":"python/practical","slug":"/python/practical/apis","permalink":"/tobias-docs/comp-2/docs/python/practical/apis","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/practical/apis.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"pythonSidebar","previous":{"title":"1. \uc6f9 \uc2a4\ud06c\ub798\ud551","permalink":"/tobias-docs/comp-2/docs/python/practical/web-scraping"},"next":{"title":"3. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9","permalink":"/tobias-docs/comp-2/docs/python/practical/database"}}');var i=t(4848),o=t(8453);const r={sidebar_position:2},a="2. REST API \uac1c\ubc1c",d={},l=[{value:"2.1 REST API \uae30\ubcf8 \uc6d0\uce59",id:"21-rest-api-\uae30\ubcf8-\uc6d0\uce59",level:2},{value:"HTTP \uba54\uc11c\ub4dc",id:"http-\uba54\uc11c\ub4dc",level:3},{value:"HTTP \uc0c1\ud0dc \ucf54\ub4dc",id:"http-\uc0c1\ud0dc-\ucf54\ub4dc",level:3},{value:"REST \uc124\uacc4 \uaddc\uce59",id:"rest-\uc124\uacc4-\uaddc\uce59",level:3},{value:"2.2 FastAPI \uc2dc\uc791\ud558\uae30",id:"22-fastapi-\uc2dc\uc791\ud558\uae30",level:2},{value:"\uc124\uce58 \ubc0f \uae30\ubcf8 \uc124\uc815",id:"\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc124\uc815",level:3},{value:"\uccab \ubc88\uc9f8 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158",id:"\uccab-\ubc88\uc9f8-fastapi-\uc560\ud50c\ub9ac\ucf00\uc774\uc158",level:3},{value:"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218",id:"\uacbd\ub85c-\ub9e4\uac1c\ubcc0\uc218\uc640-\ucffc\ub9ac-\ub9e4\uac1c\ubcc0\uc218",level:3},{value:"2.3 Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud55c \ub370\uc774\ud130 \uac80\uc99d",id:"23-pydantic-\ubaa8\ub378\uc744-\uc0ac\uc6a9\ud55c-\ub370\uc774\ud130-\uac80\uc99d",level:2},{value:"\uae30\ubcf8 \ubaa8\ub378 \uc815\uc758",id:"\uae30\ubcf8-\ubaa8\ub378-\uc815\uc758",level:3},{value:"\ubaa8\ub378 \uc0ac\uc6a9\ud558\uae30",id:"\ubaa8\ub378-\uc0ac\uc6a9\ud558\uae30",level:3},{value:"2.4 CRUD \uc791\uc5c5 \uad6c\ud604",id:"24-crud-\uc791\uc5c5-\uad6c\ud604",level:2},{value:"\uc644\uc804\ud55c CRUD \uc608\uc81c",id:"\uc644\uc804\ud55c-crud-\uc608\uc81c",level:3},{value:"2.5 \uc778\uc99d (Authentication)",id:"25-\uc778\uc99d-authentication",level:2},{value:"JWT \ud1a0\ud070 \uae30\ubc18 \uc778\uc99d",id:"jwt-\ud1a0\ud070-\uae30\ubc18-\uc778\uc99d",level:3},{value:"API \ud0a4 \uc778\uc99d",id:"api-\ud0a4-\uc778\uc99d",level:3},{value:"2.6 \uc5d0\ub7ec \ucc98\ub9ac \ubc0f HTTP \uc608\uc678",id:"26-\uc5d0\ub7ec-\ucc98\ub9ac-\ubc0f-http-\uc608\uc678",level:2},{value:"\ucee4\uc2a4\ud140 \uc608\uc678 \ucc98\ub9ac",id:"\ucee4\uc2a4\ud140-\uc608\uc678-\ucc98\ub9ac",level:3},{value:"\uad6c\uc870\ud654\ub41c \uc5d0\ub7ec \uc751\ub2f5",id:"\uad6c\uc870\ud654\ub41c-\uc5d0\ub7ec-\uc751\ub2f5",level:3},{value:"2.7 CORS \uc124\uc815",id:"27-cors-\uc124\uc815",level:2},{value:"2.8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9 (SQLAlchemy)",id:"28-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\ub3d9-sqlalchemy",level:2},{value:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815",id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc124\uc815",level:3},{value:"\ubaa8\ub378 \uc815\uc758",id:"\ubaa8\ub378-\uc815\uc758",level:3},{value:"Pydantic \uc2a4\ud0a4\ub9c8",id:"pydantic-\uc2a4\ud0a4\ub9c8",level:3},{value:"CRUD \uc791\uc5c5",id:"crud-\uc791\uc5c5",level:3},{value:"API \uc5d4\ub4dc\ud3ec\uc778\ud2b8",id:"api-\uc5d4\ub4dc\ud3ec\uc778\ud2b8",level:3},{value:"2.9 API \uc790\ub3d9 \ubb38\uc11c\ud654",id:"29-api-\uc790\ub3d9-\ubb38\uc11c\ud654",level:2},{value:"2.10 API \ud14c\uc2a4\ud2b8",id:"210-api-\ud14c\uc2a4\ud2b8",level:2},{value:"pytest\uc640 TestClient \uc0ac\uc6a9",id:"pytest\uc640-testclient-\uc0ac\uc6a9",level:3},{value:"2.11 \ubc30\ud3ec",id:"211-\ubc30\ud3ec",level:2},{value:"\ud658\uacbd \uc124\uc815 \uad00\ub9ac",id:"\ud658\uacbd-\uc124\uc815-\uad00\ub9ac",level:3},{value:"Docker\ub97c \uc0ac\uc6a9\ud55c \ubc30\ud3ec",id:"docker\ub97c-\uc0ac\uc6a9\ud55c-\ubc30\ud3ec",level:3},{value:"\ud504\ub85c\ub355\uc158 \uc124\uc815",id:"\ud504\ub85c\ub355\uc158-\uc124\uc815",level:3},{value:"2.12 \uc2e4\uc804 \uc608\uc81c",id:"212-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\uc608\uc81c 1: Todo API (\uc644\uc804\ud55c \ubc84\uc804)",id:"\uc608\uc81c-1-todo-api-\uc644\uc804\ud55c-\ubc84\uc804",level:3},{value:"\uc608\uc81c 2: \uc0c1\ud488 \uce74\ud0c8\ub85c\uadf8 API",id:"\uc608\uc81c-2-\uc0c1\ud488-\uce74\ud0c8\ub85c\uadf8-api",level:3},{value:"2.13 \ubaa8\ubc94 \uc0ac\ub840",id:"213-\ubaa8\ubc94-\uc0ac\ub840",level:2},{value:"API \ubc84\uc800\ub2dd",id:"api-\ubc84\uc800\ub2dd",level:3},{value:"\ud398\uc774\uc9c0\ub124\uc774\uc158",id:"\ud398\uc774\uc9c0\ub124\uc774\uc158",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"\uc751\ub2f5 \uce90\uc2f1",id:"\uc751\ub2f5-\uce90\uc2f1",level:3},{value:"2.14 \uccb4\ud06c\ub9ac\uc2a4\ud2b8 \ubc0f \ud301",id:"214-\uccb4\ud06c\ub9ac\uc2a4\ud2b8-\ubc0f-\ud301",level:2},{value:"REST API \uac1c\ubc1c \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"rest-api-\uac1c\ubc1c-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"\uc131\ub2a5 \ucd5c\uc801\ud654 \ud301",id:"\uc131\ub2a5-\ucd5c\uc801\ud654-\ud301",level:3},{value:"\ubcf4\uc548 \ud301",id:"\ubcf4\uc548-\ud301",level:3},{value:"2.15 \uc5f0\uc2b5 \ubb38\uc81c",id:"215-\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\uc5f0\uc2b5 1: \uac04\ub2e8\ud55c \uba54\ubaa8 API \ub9cc\ub4e4\uae30",id:"\uc5f0\uc2b5-1-\uac04\ub2e8\ud55c-\uba54\ubaa8-api-\ub9cc\ub4e4\uae30",level:3},{value:"\uc5f0\uc2b5 2: \uc0ac\uc6a9\uc790 \uc778\uc99d\uc774 \uc788\ub294 \ube14\ub85c\uadf8 API",id:"\uc5f0\uc2b5-2-\uc0ac\uc6a9\uc790-\uc778\uc99d\uc774-\uc788\ub294-\ube14\ub85c\uadf8-api",level:3},{value:"\uc5f0\uc2b5 3: \ud30c\uc77c \uc5c5\ub85c\ub4dc API",id:"\uc5f0\uc2b5-3-\ud30c\uc77c-\uc5c5\ub85c\ub4dc-api",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2-rest-api-\uac1c\ubc1c",children:"2. REST API \uac1c\ubc1c"})}),"\n",(0,i.jsx)(n.p,{children:"REST API\ub294 \ud604\ub300 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Python\uc758 FastAPI \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc2e4\ubb34\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 REST API\ub97c \uac1c\ubc1c\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.h2,{id:"21-rest-api-\uae30\ubcf8-\uc6d0\uce59",children:"2.1 REST API \uae30\ubcf8 \uc6d0\uce59"}),"\n",(0,i.jsx)(n.h3,{id:"http-\uba54\uc11c\ub4dc",children:"HTTP \uba54\uc11c\ub4dc"}),"\n",(0,i.jsx)(n.p,{children:"REST API\ub294 HTTP \uba54\uc11c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9ac\uc18c\uc2a4\uc5d0 \ub300\ud55c \uc791\uc5c5\uc744 \uc815\uc758\ud569\ub2c8\ub2e4."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"\uba54\uc11c\ub4dc"}),(0,i.jsx)(n.th,{children:"\uc6a9\ub3c4"}),(0,i.jsx)(n.th,{children:"\uc608\uc2dc"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GET"}),(0,i.jsx)(n.td,{children:"\ub9ac\uc18c\uc2a4 \uc870\ud68c"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"GET /users"})," - \uc0ac\uc6a9\uc790 \ubaa9\ub85d \uc870\ud68c"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"POST"}),(0,i.jsx)(n.td,{children:"\ub9ac\uc18c\uc2a4 \uc0dd\uc131"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"POST /users"})," - \uc0c8 \uc0ac\uc6a9\uc790 \uc0dd\uc131"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"PUT"}),(0,i.jsx)(n.td,{children:"\ub9ac\uc18c\uc2a4 \uc804\uccb4 \uc218\uc815"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"PUT /users/1"})," - \uc0ac\uc6a9\uc790 1 \uc804\uccb4 \uc218\uc815"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"PATCH"}),(0,i.jsx)(n.td,{children:"\ub9ac\uc18c\uc2a4 \ubd80\ubd84 \uc218\uc815"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"PATCH /users/1"})," - \uc0ac\uc6a9\uc790 1 \ubd80\ubd84 \uc218\uc815"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"\ub9ac\uc18c\uc2a4 \uc0ad\uc81c"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"DELETE /users/1"})," - \uc0ac\uc6a9\uc790 1 \uc0ad\uc81c"]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"http-\uc0c1\ud0dc-\ucf54\ub4dc",children:"HTTP \uc0c1\ud0dc \ucf54\ub4dc"}),"\n",(0,i.jsx)(n.p,{children:"\uc801\uc808\ud55c HTTP \uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \uc8fc\uc694 \uc0c1\ud0dc \ucf54\ub4dc\n200  # OK - \uc131\uacf5\n201  # Created - \uc0dd\uc131 \uc131\uacf5\n204  # No Content - \uc0ad\uc81c \uc131\uacf5 (\uc751\ub2f5 \ubcf8\ubb38 \uc5c6\uc74c)\n400  # Bad Request - \uc798\ubabb\ub41c \uc694\uccad\n401  # Unauthorized - \uc778\uc99d \ud544\uc694\n403  # Forbidden - \uad8c\ud55c \uc5c6\uc74c\n404  # Not Found - \ub9ac\uc18c\uc2a4 \uc5c6\uc74c\n422  # Unprocessable Entity - \uc720\ud6a8\uc131 \uac80\uc99d \uc2e4\ud328\n500  # Internal Server Error - \uc11c\ubc84 \uc624\ub958\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rest-\uc124\uacc4-\uaddc\uce59",children:"REST \uc124\uacc4 \uaddc\uce59"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \uc88b\uc740 \uc608\nGET    /api/v1/users           # \uc0ac\uc6a9\uc790 \ubaa9\ub85d\nGET    /api/v1/users/123       # \ud2b9\uc815 \uc0ac\uc6a9\uc790\nPOST   /api/v1/users           # \uc0ac\uc6a9\uc790 \uc0dd\uc131\nPUT    /api/v1/users/123       # \uc0ac\uc6a9\uc790 \uc218\uc815\nDELETE /api/v1/users/123       # \uc0ac\uc6a9\uc790 \uc0ad\uc81c\nGET    /api/v1/users/123/posts # \uc0ac\uc6a9\uc790\uc758 \uac8c\uc2dc\uae00\n\n# \ub098\uc05c \uc608\nGET    /api/v1/getUsers        # \ub3d9\uc0ac \uc0ac\uc6a9 X\nPOST   /api/v1/user            # \ub2e8\uc218\ud615 X\nGET    /api/v1/users?delete=1  # GET\uc73c\ub85c \uc0ad\uc81c X\n"})}),"\n",(0,i.jsx)(n.h2,{id:"22-fastapi-\uc2dc\uc791\ud558\uae30",children:"2.2 FastAPI \uc2dc\uc791\ud558\uae30"}),"\n",(0,i.jsx)(n.h3,{id:"\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc124\uc815",children:"\uc124\uce58 \ubc0f \uae30\ubcf8 \uc124\uc815"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# FastAPI \ubc0f ASGI \uc11c\ubc84 \uc124\uce58\npip install fastapi\npip install "uvicorn[standard]"\n\n# \ucd94\uac00 \ud328\ud0a4\uc9c0\npip install pydantic\npip install python-multipart  # \ud30c\uc77c \uc5c5\ub85c\ub4dc\uc6a9\npip install python-jose[cryptography]  # JWT\uc6a9\npip install passlib[bcrypt]  # \ube44\ubc00\ubc88\ud638 \ud574\uc2f1\uc6a9\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\uccab-\ubc88\uc9f8-fastapi-\uc560\ud50c\ub9ac\ucf00\uc774\uc158",children:"\uccab \ubc88\uc9f8 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# main.py\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    title="\ub098\uc758 API",\n    description="FastAPI\ub97c \uc0ac\uc6a9\ud55c REST API",\n    version="1.0.0"\n)\n\n@app.get("/")\ndef read_root():\n    return {"message": "Hello World"}\n\n@app.get("/items/{item_id}")\ndef read_item(item_id: int, q: str = None):\n    return {"item_id": item_id, "q": q}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# \uc11c\ubc84 \uc2e4\ud589\nuvicorn main:app --reload\n\n# \uc790\ub3d9 \uc0dd\uc131\ub41c \ubb38\uc11c \ud655\uc778\n# http://localhost:8000/docs (Swagger UI)\n# http://localhost:8000/redoc (ReDoc)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["FastAPI\ub294 \uc790\ub3d9\uc73c\ub85c \ub300\ud654\ud615 API \ubb38\uc11c\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. ",(0,i.jsx)(n.code,{children:"/docs"}),"\uc5d0\uc11c Swagger UI\ub97c, ",(0,i.jsx)(n.code,{children:"/redoc"}),"\uc5d0\uc11c ReDoc\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]})}),"\n",(0,i.jsx)(n.h3,{id:"\uacbd\ub85c-\ub9e4\uac1c\ubcc0\uc218\uc640-\ucffc\ub9ac-\ub9e4\uac1c\ubcc0\uc218",children:"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from typing import Optional\nfrom fastapi import FastAPI, Query, Path\n\napp = FastAPI()\n\n# \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\n@app.get("/users/{user_id}")\ndef get_user(\n    user_id: int = Path(..., title="\uc0ac\uc6a9\uc790 ID", ge=1)\n):\n    return {"user_id": user_id}\n\n# \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\n@app.get("/items/")\ndef list_items(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(10, ge=1, le=100),\n    search: Optional[str] = Query(None, min_length=3, max_length=50)\n):\n    return {\n        "skip": skip,\n        "limit": limit,\n        "search": search\n    }\n\n# \ud63c\ud569 \uc0ac\uc6a9\n@app.get("/products/{category}")\ndef get_products(\n    category: str = Path(..., min_length=1),\n    min_price: float = Query(0, ge=0),\n    max_price: float = Query(1000000, ge=0),\n    in_stock: bool = Query(True)\n):\n    return {\n        "category": category,\n        "min_price": min_price,\n        "max_price": max_price,\n        "in_stock": in_stock\n    }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"23-pydantic-\ubaa8\ub378\uc744-\uc0ac\uc6a9\ud55c-\ub370\uc774\ud130-\uac80\uc99d",children:"2.3 Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud55c \ub370\uc774\ud130 \uac80\uc99d"}),"\n",(0,i.jsx)(n.h3,{id:"\uae30\ubcf8-\ubaa8\ub378-\uc815\uc758",children:"\uae30\ubcf8 \ubaa8\ub378 \uc815\uc758"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pydantic import BaseModel, Field, EmailStr, validator\nfrom typing import Optional, List\nfrom datetime import datetime\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str = Field(..., min_length=3, max_length=50)\n    full_name: Optional[str] = None\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8)\n\n    @validator('password')\n    def validate_password(cls, v):\n        if not any(char.isdigit() for char in v):\n            raise ValueError('\ube44\ubc00\ubc88\ud638\ub294 \ucd5c\uc18c \ud558\ub098\uc758 \uc22b\uc790\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4')\n        if not any(char.isupper() for char in v):\n            raise ValueError('\ube44\ubc00\ubc88\ud638\ub294 \ucd5c\uc18c \ud558\ub098\uc758 \ub300\ubb38\uc790\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4')\n        return v\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    full_name: Optional[str] = None\n\nclass User(UserBase):\n    id: int\n    is_active: bool = True\n    created_at: datetime\n\n    class Config:\n        from_attributes = True  # ORM \ubaa8\ub4dc \ud65c\uc131\ud654\n\nclass UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    username: str\n    full_name: Optional[str]\n    is_active: bool\n\n    class Config:\n        from_attributes = True\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\ubaa8\ub378-\uc0ac\uc6a9\ud558\uae30",children:"\ubaa8\ub378 \uc0ac\uc6a9\ud558\uae30"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, HTTPException, status\n\napp = FastAPI()\n\n# \uc784\uc2dc \ub370\uc774\ud130\ubca0\uc774\uc2a4\nfake_users_db = []\nuser_id_counter = 1\n\n@app.post("/users/", response_model=UserResponse, status_code=status.HTTP_201_CREATED)\ndef create_user(user: UserCreate):\n    global user_id_counter\n\n    # \uc911\ubcf5 \ud655\uc778\n    if any(u["email"] == user.email for u in fake_users_db):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail="\uc774\ubbf8 \ub4f1\ub85d\ub41c \uc774\uba54\uc77c\uc785\ub2c8\ub2e4"\n        )\n\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    user_dict = user.dict()\n    user_dict["id"] = user_id_counter\n    user_dict["is_active"] = True\n    user_dict["created_at"] = datetime.now()\n    user_dict.pop("password")  # \ube44\ubc00\ubc88\ud638\ub294 \uc800\uc7a5\ud558\uc9c0 \uc54a\uc74c (\uc608\uc2dc)\n\n    fake_users_db.append(user_dict)\n    user_id_counter += 1\n\n    return user_dict\n\n@app.get("/users/{user_id}", response_model=UserResponse)\ndef get_user(user_id: int):\n    user = next((u for u in fake_users_db if u["id"] == user_id), None)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4"\n        )\n    return user\n\n@app.get("/users/", response_model=List[UserResponse])\ndef list_users(skip: int = 0, limit: int = 10):\n    return fake_users_db[skip : skip + limit]\n\n@app.patch("/users/{user_id}", response_model=UserResponse)\ndef update_user(user_id: int, user_update: UserUpdate):\n    user = next((u for u in fake_users_db if u["id"] == user_id), None)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4"\n        )\n\n    update_data = user_update.dict(exclude_unset=True)\n    for field, value in update_data.items():\n        user[field] = value\n\n    return user\n\n@app.delete("/users/{user_id}", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_user(user_id: int):\n    global fake_users_db\n    fake_users_db = [u for u in fake_users_db if u["id"] != user_id]\n    return None\n'})}),"\n",(0,i.jsx)(n.h2,{id:"24-crud-\uc791\uc5c5-\uad6c\ud604",children:"2.4 CRUD \uc791\uc5c5 \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"\uc644\uc804\ud55c-crud-\uc608\uc81c",children:"\uc644\uc804\ud55c CRUD \uc608\uc81c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# models.py\nfrom pydantic import BaseModel, Field\nfrom typing import Optional\nfrom datetime import datetime\n\nclass TodoBase(BaseModel):\n    title: str = Field(..., min_length=1, max_length=100)\n    description: Optional[str] = None\n    completed: bool = False\n\nclass TodoCreate(TodoBase):\n    pass\n\nclass TodoUpdate(BaseModel):\n    title: Optional[str] = Field(None, min_length=1, max_length=100)\n    description: Optional[str] = None\n    completed: Optional[bool] = None\n\nclass Todo(TodoBase):\n    id: int\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n\n    class Config:\n        from_attributes = True\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# crud.py\nfrom typing import List, Optional\nfrom datetime import datetime\n\n# \uac04\ub2e8\ud55c in-memory \ub370\uc774\ud130\ubca0\uc774\uc2a4\ntodos_db = []\ntodo_id_counter = 1\n\nclass TodoCRUD:\n    @staticmethod\n    def create(todo_data: TodoCreate) -> Todo:\n        global todo_id_counter\n        todo_dict = todo_data.dict()\n        todo_dict["id"] = todo_id_counter\n        todo_dict["created_at"] = datetime.now()\n        todo_dict["updated_at"] = None\n\n        todos_db.append(todo_dict)\n        todo_id_counter += 1\n        return todo_dict\n\n    @staticmethod\n    def get(todo_id: int) -> Optional[dict]:\n        return next((t for t in todos_db if t["id"] == todo_id), None)\n\n    @staticmethod\n    def get_all(skip: int = 0, limit: int = 100) -> List[dict]:\n        return todos_db[skip : skip + limit]\n\n    @staticmethod\n    def update(todo_id: int, todo_update: TodoUpdate) -> Optional[dict]:\n        todo = TodoCRUD.get(todo_id)\n        if not todo:\n            return None\n\n        update_data = todo_update.dict(exclude_unset=True)\n        for field, value in update_data.items():\n            todo[field] = value\n        todo["updated_at"] = datetime.now()\n\n        return todo\n\n    @staticmethod\n    def delete(todo_id: int) -> bool:\n        global todos_db\n        initial_length = len(todos_db)\n        todos_db = [t for t in todos_db if t["id"] != todo_id]\n        return len(todos_db) < initial_length\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# main.py\nfrom fastapi import FastAPI, HTTPException, status\nfrom typing import List\n\napp = FastAPI(title="Todo API")\n\n@app.post("/todos/", response_model=Todo, status_code=status.HTTP_201_CREATED)\ndef create_todo(todo: TodoCreate):\n    """\uc0c8\ub85c\uc6b4 \ud560 \uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4."""\n    return TodoCRUD.create(todo)\n\n@app.get("/todos/", response_model=List[Todo])\ndef list_todos(skip: int = 0, limit: int = 100):\n    """\ud560 \uc77c \ubaa9\ub85d\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4."""\n    return TodoCRUD.get_all(skip, limit)\n\n@app.get("/todos/{todo_id}", response_model=Todo)\ndef get_todo(todo_id: int):\n    """\ud2b9\uc815 \ud560 \uc77c\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4."""\n    todo = TodoCRUD.get(todo_id)\n    if not todo:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f"ID {todo_id}\uc5d0 \ud574\ub2f9\ud558\ub294 \ud560 \uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4"\n        )\n    return todo\n\n@app.patch("/todos/{todo_id}", response_model=Todo)\ndef update_todo(todo_id: int, todo_update: TodoUpdate):\n    """\ud560 \uc77c\uc744 \uc218\uc815\ud569\ub2c8\ub2e4."""\n    todo = TodoCRUD.update(todo_id, todo_update)\n    if not todo:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f"ID {todo_id}\uc5d0 \ud574\ub2f9\ud558\ub294 \ud560 \uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4"\n        )\n    return todo\n\n@app.delete("/todos/{todo_id}", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_todo(todo_id: int):\n    """\ud560 \uc77c\uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4."""\n    if not TodoCRUD.delete(todo_id):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f"ID {todo_id}\uc5d0 \ud574\ub2f9\ud558\ub294 \ud560 \uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4"\n        )\n'})}),"\n",(0,i.jsx)(n.h2,{id:"25-\uc778\uc99d-authentication",children:"2.5 \uc778\uc99d (Authentication)"}),"\n",(0,i.jsx)(n.h3,{id:"jwt-\ud1a0\ud070-\uae30\ubc18-\uc778\uc99d",children:"JWT \ud1a0\ud070 \uae30\ubc18 \uc778\uc99d"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# auth.py\nfrom datetime import datetime, timedelta\nfrom typing import Optional\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\n# \uc124\uc815\nSECRET_KEY = "your-secret-key-keep-it-secret"  # \uc2e4\uc81c\ub85c\ub294 \ud658\uacbd\ubcc0\uc218\ub85c \uad00\ub9ac\nALGORITHM = "HS256"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")\n\n# \ubaa8\ub378\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\nclass User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None\n\nclass UserInDB(User):\n    hashed_password: str\n\n# \uc784\uc2dc \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ubca0\uc774\uc2a4\nfake_users_db = {\n    "johndoe": {\n        "username": "johndoe",\n        "full_name": "John Doe",\n        "email": "johndoe@example.com",\n        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",  # secret\n        "disabled": False,\n    }\n}\n\n# \ube44\ubc00\ubc88\ud638 \uad00\ub828 \ud568\uc218\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n# JWT \ud1a0\ud070 \uc0dd\uc131\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({"exp": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n# \ud604\uc7ac \uc0ac\uc6a9\uc790 \uac00\uc838\uc624\uae30\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail="\uc778\uc99d \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4",\n        headers={"WWW-Authenticate": "Bearer"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get("sub")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail="\ube44\ud65c\uc131\ud654\ub41c \uc0ac\uc6a9\uc790\uc785\ub2c8\ub2e4")\n    return current_user\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# main.py\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\n\napp = FastAPI()\n\n@app.post("/token", response_model=Token)\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail="\uc798\ubabb\ub41c \uc0ac\uc6a9\uc790\uba85 \ub610\ub294 \ube44\ubc00\ubc88\ud638\uc785\ub2c8\ub2e4",\n            headers={"WWW-Authenticate": "Bearer"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={"sub": user.username}, expires_delta=access_token_expires\n    )\n    return {"access_token": access_token, "token_type": "bearer"}\n\n@app.get("/users/me", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n@app.get("/items/")\nasync def read_items(current_user: User = Depends(get_current_active_user)):\n    return [{"item_id": "Foo", "owner": current_user.username}]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"api-\ud0a4-\uc778\uc99d",children:"API \ud0a4 \uc778\uc99d"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import Security, HTTPException, status\nfrom fastapi.security import APIKeyHeader\nfrom typing import Optional\n\nAPI_KEY = "your-secret-api-key"\nAPI_KEY_NAME = "X-API-Key"\n\napi_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)\n\nasync def get_api_key(api_key: Optional[str] = Security(api_key_header)):\n    if api_key == API_KEY:\n        return api_key\n    raise HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail="\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 API \ud0a4\uc785\ub2c8\ub2e4"\n    )\n\n@app.get("/protected/")\nasync def protected_route(api_key: str = Depends(get_api_key)):\n    return {"message": "\ubcf4\ud638\ub41c \ub9ac\uc18c\uc2a4\uc5d0 \uc811\uadfc\ud588\uc2b5\ub2c8\ub2e4"}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"26-\uc5d0\ub7ec-\ucc98\ub9ac-\ubc0f-http-\uc608\uc678",children:"2.6 \uc5d0\ub7ec \ucc98\ub9ac \ubc0f HTTP \uc608\uc678"}),"\n",(0,i.jsx)(n.h3,{id:"\ucee4\uc2a4\ud140-\uc608\uc678-\ucc98\ub9ac",children:"\ucee4\uc2a4\ud140 \uc608\uc678 \ucc98\ub9ac"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\nfrom fastapi.exceptions import RequestValidationError\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n# \ucee4\uc2a4\ud140 \uc608\uc678 \ud074\ub798\uc2a4\nclass CustomException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n# \ucee4\uc2a4\ud140 \uc608\uc678 \ud578\ub4e4\ub7ec\n@app.exception_handler(CustomException)\nasync def custom_exception_handler(request: Request, exc: CustomException):\n    return JSONResponse(\n        status_code=status.HTTP_418_IM_A_TEAPOT,\n        content={"message": f"\uc774\ub7f0! {exc.name}\ub2d8, \ubb54\uac00 \uc798\ubabb\ub410\uc5b4\uc694!"},\n    )\n\n# \uc720\ud6a8\uc131 \uac80\uc99d \uc624\ub958 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\n            "message": "\uc785\ub825 \ub370\uc774\ud130 \uc720\ud6a8\uc131 \uac80\uc99d\uc5d0 \uc2e4\ud328\ud588\uc2b5\ub2c8\ub2e4",\n            "errors": exc.errors()\n        },\n    )\n\n# \uc0ac\uc6a9 \uc608\uc2dc\n@app.get("/items/{item_id}")\nasync def read_item(item_id: str):\n    if item_id == "foo":\n        raise CustomException(name="John")\n    return {"item_id": item_id}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\uad6c\uc870\ud654\ub41c-\uc5d0\ub7ec-\uc751\ub2f5",children:"\uad6c\uc870\ud654\ub41c \uc5d0\ub7ec \uc751\ub2f5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from typing import Optional\nfrom pydantic import BaseModel\n\nclass ErrorResponse(BaseModel):\n    error: str\n    message: str\n    details: Optional[dict] = None\n\nclass APIError(HTTPException):\n    def __init__(\n        self,\n        status_code: int,\n        error: str,\n        message: str,\n        details: Optional[dict] = None\n    ):\n        self.status_code = status_code\n        self.error = error\n        self.message = message\n        self.details = details\n        super().__init__(status_code=status_code, detail=message)\n\n@app.exception_handler(APIError)\nasync def api_error_handler(request: Request, exc: APIError):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            "error": exc.error,\n            "message": exc.message,\n            "details": exc.details\n        }\n    )\n\n# \uc0ac\uc6a9 \uc608\uc2dc\n@app.get("/users/{user_id}")\ndef get_user(user_id: int):\n    if user_id not in users_db:\n        raise APIError(\n            status_code=status.HTTP_404_NOT_FOUND,\n            error="USER_NOT_FOUND",\n            message="\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4",\n            details={"user_id": user_id}\n        )\n    return users_db[user_id]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"27-cors-\uc124\uc815",children:"2.7 CORS \uc124\uc815"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# CORS \ubbf8\ub4e4\uc6e8\uc5b4 \ucd94\uac00\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\n        "http://localhost:3000",  # React \uac1c\ubc1c \uc11c\ubc84\n        "http://localhost:8080",  # Vue \uac1c\ubc1c \uc11c\ubc84\n        "https://yourdomain.com",  # \ud504\ub85c\ub355\uc158 \ub3c4\uba54\uc778\n    ],\n    allow_credentials=True,\n    allow_methods=["*"],  # \ub610\ub294 ["GET", "POST", "PUT", "DELETE"]\n    allow_headers=["*"],  # \ub610\ub294 \ud2b9\uc815 \ud5e4\ub354\ub4e4\n)\n\n# \ubaa8\ub4e0 origin \ud5c8\uc6a9 (\uac1c\ubc1c \ud658\uacbd\uc5d0\ub9cc \uc0ac\uc6a9)\n# app.add_middleware(\n#     CORSMiddleware,\n#     allow_origins=["*"],\n#     allow_credentials=True,\n#     allow_methods=["*"],\n#     allow_headers=["*"],\n# )\n\n@app.get("/")\ndef read_root():\n    return {"message": "CORS\uac00 \uc124\uc815\ub41c API"}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"28-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\ub3d9-sqlalchemy",children:"2.8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9 (SQLAlchemy)"}),"\n",(0,i.jsx)(n.h3,{id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc124\uc815",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = "sqlite:///./sql_app.db"\n# PostgreSQL: "postgresql://user:password@localhost/dbname"\n# MySQL: "mysql://user:password@localhost/dbname"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={"check_same_thread": False}  # SQLite\uc5d0\ub9cc \ud544\uc694\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n# \uc758\uc874\uc131\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\ubaa8\ub378-\uc815\uc758",children:"\ubaa8\ub378 \uc815\uc758"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# models.py\nfrom sqlalchemy import Boolean, Column, ForeignKey, Integer, String, DateTime, Text\nfrom sqlalchemy.orm import relationship\nfrom datetime import datetime\nfrom database import Base\n\nclass User(Base):\n    __tablename__ = "users"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    username = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    full_name = Column(String)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    posts = relationship("Post", back_populates="owner")\n\nclass Post(Base):\n    __tablename__ = "posts"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    content = Column(Text)\n    published = Column(Boolean, default=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, onupdate=datetime.utcnow)\n    owner_id = Column(Integer, ForeignKey("users.id"))\n\n    owner = relationship("User", back_populates="posts")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pydantic-\uc2a4\ud0a4\ub9c8",children:"Pydantic \uc2a4\ud0a4\ub9c8"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# schemas.py\nfrom pydantic import BaseModel, EmailStr\nfrom typing import Optional, List\nfrom datetime import datetime\n\n# Post \uc2a4\ud0a4\ub9c8\nclass PostBase(BaseModel):\n    title: str\n    content: Optional[str] = None\n    published: bool = False\n\nclass PostCreate(PostBase):\n    pass\n\nclass PostUpdate(BaseModel):\n    title: Optional[str] = None\n    content: Optional[str] = None\n    published: Optional[bool] = None\n\nclass Post(PostBase):\n    id: int\n    created_at: datetime\n    updated_at: Optional[datetime]\n    owner_id: int\n\n    class Config:\n        from_attributes = True\n\n# User \uc2a4\ud0a4\ub9c8\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str\n\nclass UserCreate(UserBase):\n    password: str\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    created_at: datetime\n    posts: List[Post] = []\n\n    class Config:\n        from_attributes = True\n"})}),"\n",(0,i.jsx)(n.h3,{id:"crud-\uc791\uc5c5",children:"CRUD \uc791\uc5c5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# crud.py\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nimport models\nimport schemas\nfrom passlib.context import CryptContext\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\n# User CRUD\ndef get_user(db: Session, user_id: int) -> Optional[models.User]:\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\ndef get_user_by_email(db: Session, email: str) -> Optional[models.User]:\n    return db.query(models.User).filter(models.User.email == email).first()\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100) -> List[models.User]:\n    return db.query(models.User).offset(skip).limit(limit).all()\n\ndef create_user(db: Session, user: schemas.UserCreate) -> models.User:\n    hashed_password = pwd_context.hash(user.password)\n    db_user = models.User(\n        email=user.email,\n        username=user.username,\n        hashed_password=hashed_password\n    )\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n# Post CRUD\ndef get_posts(db: Session, skip: int = 0, limit: int = 100) -> List[models.Post]:\n    return db.query(models.Post).offset(skip).limit(limit).all()\n\ndef get_post(db: Session, post_id: int) -> Optional[models.Post]:\n    return db.query(models.Post).filter(models.Post.id == post_id).first()\n\ndef create_user_post(db: Session, post: schemas.PostCreate, user_id: int) -> models.Post:\n    db_post = models.Post(**post.dict(), owner_id=user_id)\n    db.add(db_post)\n    db.commit()\n    db.refresh(db_post)\n    return db_post\n\ndef update_post(db: Session, post_id: int, post_update: schemas.PostUpdate) -> Optional[models.Post]:\n    db_post = get_post(db, post_id)\n    if not db_post:\n        return None\n\n    update_data = post_update.dict(exclude_unset=True)\n    for field, value in update_data.items():\n        setattr(db_post, field, value)\n\n    db.commit()\n    db.refresh(db_post)\n    return db_post\n\ndef delete_post(db: Session, post_id: int) -> bool:\n    db_post = get_post(db, post_id)\n    if not db_post:\n        return False\n    db.delete(db_post)\n    db.commit()\n    return True\n'})}),"\n",(0,i.jsx)(n.h3,{id:"api-\uc5d4\ub4dc\ud3ec\uc778\ud2b8",children:"API \uc5d4\ub4dc\ud3ec\uc778\ud2b8"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# main.py\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nimport crud, models, schemas\nfrom database import engine, get_db\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Blog API")\n\n# User \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.post("/users/", response_model=schemas.User, status_code=status.HTTP_201_CREATED)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(\n            status_code=400,\n            detail="\uc774\ubbf8 \ub4f1\ub85d\ub41c \uc774\uba54\uc77c\uc785\ub2c8\ub2e4"\n        )\n    return crud.create_user(db=db, user=user)\n\n@app.get("/users/", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n@app.get("/users/{user_id}", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail="\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return db_user\n\n# Post \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.post("/users/{user_id}/posts/", response_model=schemas.Post, status_code=status.HTTP_201_CREATED)\ndef create_post_for_user(\n    user_id: int,\n    post: schemas.PostCreate,\n    db: Session = Depends(get_db)\n):\n    return crud.create_user_post(db=db, post=post, user_id=user_id)\n\n@app.get("/posts/", response_model=List[schemas.Post])\ndef read_posts(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    posts = crud.get_posts(db, skip=skip, limit=limit)\n    return posts\n\n@app.get("/posts/{post_id}", response_model=schemas.Post)\ndef read_post(post_id: int, db: Session = Depends(get_db)):\n    db_post = crud.get_post(db, post_id=post_id)\n    if db_post is None:\n        raise HTTPException(status_code=404, detail="\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return db_post\n\n@app.patch("/posts/{post_id}", response_model=schemas.Post)\ndef update_post(\n    post_id: int,\n    post_update: schemas.PostUpdate,\n    db: Session = Depends(get_db)\n):\n    db_post = crud.update_post(db, post_id=post_id, post_update=post_update)\n    if db_post is None:\n        raise HTTPException(status_code=404, detail="\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return db_post\n\n@app.delete("/posts/{post_id}", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_post(post_id: int, db: Session = Depends(get_db)):\n    if not crud.delete_post(db, post_id=post_id):\n        raise HTTPException(status_code=404, detail="\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"29-api-\uc790\ub3d9-\ubb38\uc11c\ud654",children:"2.9 API \uc790\ub3d9 \ubb38\uc11c\ud654"}),"\n",(0,i.jsx)(n.p,{children:"FastAPI\ub294 \uc790\ub3d9\uc73c\ub85c OpenAPI \uc2a4\ud0a4\ub9c8\ub97c \uc0dd\uc131\ud558\uace0 \ub300\ud654\ud615 \ubb38\uc11c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom typing import List\n\napp = FastAPI(\n    title="\ub098\uc758 API",\n    description="FastAPI\ub97c \uc0ac\uc6a9\ud55c \uba4b\uc9c4 API",\n    version="1.0.0",\n    terms_of_service="http://example.com/terms/",\n    contact={\n        "name": "API \uc9c0\uc6d0\ud300",\n        "url": "http://example.com/contact/",\n        "email": "support@example.com",\n    },\n    license_info={\n        "name": "Apache 2.0",\n        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",\n    },\n)\n\n@app.get(\n    "/items/",\n    response_model=List[Item],\n    summary="\uc544\uc774\ud15c \ubaa9\ub85d \uc870\ud68c",\n    description="\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc544\uc774\ud15c \ubaa9\ub85d\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.",\n    response_description="\uc544\uc774\ud15c \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4",\n    tags=["items"]\n)\ndef read_items(\n    skip: int = 0,\n    limit: int = 10\n):\n    """\n    \uc544\uc774\ud15c \ubaa9\ub85d\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4:\n\n    - **skip**: \uac74\ub108\ub6f8 \uc544\uc774\ud15c \uc218\n    - **limit**: \ubc18\ud658\ud560 \ucd5c\ub300 \uc544\uc774\ud15c \uc218\n    """\n    return items[skip : skip + limit]\n\n@app.post(\n    "/items/",\n    response_model=Item,\n    status_code=status.HTTP_201_CREATED,\n    tags=["items"],\n    summary="\uc544\uc774\ud15c \uc0dd\uc131"\n)\ndef create_item(item: ItemCreate):\n    """\uc0c8\ub85c\uc6b4 \uc544\uc774\ud15c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4."""\n    return item\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Swagger UI: ",(0,i.jsx)(n.code,{children:"http://localhost:8000/docs"})]}),"\n",(0,i.jsxs)(n.li,{children:["ReDoc: ",(0,i.jsx)(n.code,{children:"http://localhost:8000/redoc"})]}),"\n",(0,i.jsxs)(n.li,{children:["OpenAPI JSON: ",(0,i.jsx)(n.code,{children:"http://localhost:8000/openapi.json"})]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"210-api-\ud14c\uc2a4\ud2b8",children:"2.10 API \ud14c\uc2a4\ud2b8"}),"\n",(0,i.jsx)(n.h3,{id:"pytest\uc640-testclient-\uc0ac\uc6a9",children:"pytest\uc640 TestClient \uc0ac\uc6a9"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# test_main.py\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom database import Base, get_db\nfrom main import app\nimport pytest\n\n# \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ubca0\uc774\uc2a4\nSQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={"check_same_thread": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\nBase.metadata.create_all(bind=engine)\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n# \ud14c\uc2a4\ud2b8 \uc2dc\uc791 \uc804 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd08\uae30\ud654\n@pytest.fixture(autouse=True)\ndef reset_db():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)\n\n# \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ndef test_create_user():\n    response = client.post(\n        "/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser",\n            "password": "testpass123"\n        }\n    )\n    assert response.status_code == 201\n    data = response.json()\n    assert data["email"] == "test@example.com"\n    assert data["username"] == "testuser"\n    assert "id" in data\n\ndef test_create_duplicate_user():\n    # \uccab \ubc88\uc9f8 \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    client.post(\n        "/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser",\n            "password": "testpass123"\n        }\n    )\n\n    # \uc911\ubcf5 \uc0ac\uc6a9\uc790 \uc0dd\uc131 \uc2dc\ub3c4\n    response = client.post(\n        "/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser2",\n            "password": "testpass123"\n        }\n    )\n    assert response.status_code == 400\n    assert "\uc774\ubbf8 \ub4f1\ub85d\ub41c" in response.json()["detail"]\n\ndef test_read_user():\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    create_response = client.post(\n        "/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser",\n            "password": "testpass123"\n        }\n    )\n    user_id = create_response.json()["id"]\n\n    # \uc0ac\uc6a9\uc790 \uc870\ud68c\n    response = client.get(f"/users/{user_id}")\n    assert response.status_code == 200\n    assert response.json()["email"] == "test@example.com"\n\ndef test_read_nonexistent_user():\n    response = client.get("/users/999")\n    assert response.status_code == 404\n\ndef test_list_users():\n    # \uc5ec\ub7ec \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    for i in range(5):\n        client.post(\n            "/users/",\n            json={\n                "email": f"test{i}@example.com",\n                "username": f"testuser{i}",\n                "password": "testpass123"\n            }\n        )\n\n    # \uc0ac\uc6a9\uc790 \ubaa9\ub85d \uc870\ud68c\n    response = client.get("/users/")\n    assert response.status_code == 200\n    assert len(response.json()) == 5\n\ndef test_create_post():\n    # \uba3c\uc800 \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    user_response = client.post(\n        "/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser",\n            "password": "testpass123"\n        }\n    )\n    user_id = user_response.json()["id"]\n\n    # \uac8c\uc2dc\uae00 \uc0dd\uc131\n    response = client.post(\n        f"/users/{user_id}/posts/",\n        json={\n            "title": "\ud14c\uc2a4\ud2b8 \uac8c\uc2dc\uae00",\n            "content": "\ud14c\uc2a4\ud2b8 \ub0b4\uc6a9",\n            "published": True\n        }\n    )\n    assert response.status_code == 201\n    data = response.json()\n    assert data["title"] == "\ud14c\uc2a4\ud2b8 \uac8c\uc2dc\uae00"\n    assert data["owner_id"] == user_id\n\ndef test_update_post():\n    # \uc0ac\uc6a9\uc790 \ubc0f \uac8c\uc2dc\uae00 \uc0dd\uc131\n    user_response = client.post(\n        "/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser",\n            "password": "testpass123"\n        }\n    )\n    user_id = user_response.json()["id"]\n\n    post_response = client.post(\n        f"/users/{user_id}/posts/",\n        json={"title": "\uc6d0\ubcf8 \uc81c\ubaa9", "content": "\uc6d0\ubcf8 \ub0b4\uc6a9"}\n    )\n    post_id = post_response.json()["id"]\n\n    # \uac8c\uc2dc\uae00 \uc218\uc815\n    response = client.patch(\n        f"/posts/{post_id}",\n        json={"title": "\uc218\uc815\ub41c \uc81c\ubaa9"}\n    )\n    assert response.status_code == 200\n    assert response.json()["title"] == "\uc218\uc815\ub41c \uc81c\ubaa9"\n    assert response.json()["content"] == "\uc6d0\ubcf8 \ub0b4\uc6a9"  # \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc74c\n\ndef test_delete_post():\n    # \uc0ac\uc6a9\uc790 \ubc0f \uac8c\uc2dc\uae00 \uc0dd\uc131\n    user_response = client.post(\n        "/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser",\n            "password": "testpass123"\n        }\n    )\n    user_id = user_response.json()["id"]\n\n    post_response = client.post(\n        f"/users/{user_id}/posts/",\n        json={"title": "\ud14c\uc2a4\ud2b8", "content": "\ud14c\uc2a4\ud2b8"}\n    )\n    post_id = post_response.json()["id"]\n\n    # \uac8c\uc2dc\uae00 \uc0ad\uc81c\n    response = client.delete(f"/posts/{post_id}")\n    assert response.status_code == 204\n\n    # \uc0ad\uc81c\ub41c \uac8c\uc2dc\uae00 \uc870\ud68c \uc2dc\ub3c4\n    response = client.get(f"/posts/{post_id}")\n    assert response.status_code == 404\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# \ud14c\uc2a4\ud2b8 \uc2e4\ud589\npytest test_main.py -v\n\n# \ucee4\ubc84\ub9ac\uc9c0\uc640 \ud568\uaed8 \uc2e4\ud589\npip install pytest-cov\npytest test_main.py --cov=main --cov-report=html\n"})}),"\n",(0,i.jsx)(n.h2,{id:"211-\ubc30\ud3ec",children:"2.11 \ubc30\ud3ec"}),"\n",(0,i.jsx)(n.h3,{id:"\ud658\uacbd-\uc124\uc815-\uad00\ub9ac",children:"\ud658\uacbd \uc124\uc815 \uad00\ub9ac"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# config.py\nfrom pydantic_settings import BaseSettings\nfrom typing import Optional\n\nclass Settings(BaseSettings):\n    app_name: str = "\ub098\uc758 API"\n    debug: bool = False\n    database_url: str\n    secret_key: str\n    algorithm: str = "HS256"\n    access_token_expire_minutes: int = 30\n\n    class Config:\n        env_file = ".env"\n\nsettings = Settings()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-.env",children:"# .env\nAPP_NAME=\ub098\uc758 API\nDEBUG=False\nDATABASE_URL=postgresql://user:password@localhost/dbname\nSECRET_KEY=your-super-secret-key-change-this\nALGORITHM=HS256\nACCESS_TOKEN_EXPIRE_MINUTES=30\n"})}),"\n",(0,i.jsx)(n.h3,{id:"docker\ub97c-\uc0ac\uc6a9\ud55c-\ubc30\ud3ec",children:"Docker\ub97c \uc0ac\uc6a9\ud55c \ubc30\ud3ec"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# \uc758\uc874\uc131 \uc124\uce58\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# \uc571 \ucf54\ub4dc \ubcf5\uc0ac\nCOPY . .\n\n# \ud3ec\ud2b8 \ub178\ucd9c\nEXPOSE 8000\n\n# \uc11c\ubc84 \uc2e4\ud589\nCMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  web:\n    build: .\n    ports:\n      - "8000:8000"\n    environment:\n      - DATABASE_URL=postgresql://user:password@db/dbname\n      - SECRET_KEY=your-secret-key\n    depends_on:\n      - db\n    volumes:\n      - .:/app\n    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=dbname\n    ports:\n      - "5432:5432"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Docker\ub85c \uc2e4\ud589\ndocker-compose up -d\n\n# \ub85c\uadf8 \ud655\uc778\ndocker-compose logs -f web\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\ud504\ub85c\ub355\uc158-\uc124\uc815",children:"\ud504\ub85c\ub355\uc158 \uc124\uc815"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# main.py\nfrom fastapi import FastAPI\nfrom config import settings\n\napp = FastAPI(\n    title=settings.app_name,\n    debug=settings.debug,\n    docs_url="/docs" if settings.debug else None,  # \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 \ubb38\uc11c \ube44\ud65c\uc131\ud654\n    redoc_url="/redoc" if settings.debug else None,\n)\n\n# \ud504\ub85c\ub355\uc158 \uc2e4\ud589\n# uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4\n'})}),"\n",(0,i.jsx)(n.h2,{id:"212-\uc2e4\uc804-\uc608\uc81c",children:"2.12 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,i.jsx)(n.h3,{id:"\uc608\uc81c-1-todo-api-\uc644\uc804\ud55c-\ubc84\uc804",children:"\uc608\uc81c 1: Todo API (\uc644\uc804\ud55c \ubc84\uc804)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# todo_app.py\nfrom fastapi import FastAPI, Depends, HTTPException, status, Query\nfrom sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List\nfrom datetime import datetime\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\nSQLALCHEMY_DATABASE_URL = "sqlite:///./todos.db"\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# SQLAlchemy \ubaa8\ub378\nclass TodoModel(Base):\n    __tablename__ = "todos"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    description = Column(String)\n    completed = Column(Boolean, default=False)\n    priority = Column(Integer, default=0)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, onupdate=datetime.utcnow)\n\nBase.metadata.create_all(bind=engine)\n\n# Pydantic \uc2a4\ud0a4\ub9c8\nclass TodoBase(BaseModel):\n    title: str = Field(..., min_length=1, max_length=100)\n    description: Optional[str] = Field(None, max_length=500)\n    completed: bool = False\n    priority: int = Field(0, ge=0, le=5)\n\nclass TodoCreate(TodoBase):\n    pass\n\nclass TodoUpdate(BaseModel):\n    title: Optional[str] = Field(None, min_length=1, max_length=100)\n    description: Optional[str] = Field(None, max_length=500)\n    completed: Optional[bool] = None\n    priority: Optional[int] = Field(None, ge=0, le=5)\n\nclass Todo(TodoBase):\n    id: int\n    created_at: datetime\n    updated_at: Optional[datetime]\n\n    class Config:\n        from_attributes = True\n\n# FastAPI \uc571\napp = FastAPI(title="Todo API", version="1.0.0")\n\n# \uc758\uc874\uc131\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.post("/todos/", response_model=Todo, status_code=status.HTTP_201_CREATED)\ndef create_todo(todo: TodoCreate, db: Session = Depends(get_db)):\n    """\uc0c8\ub85c\uc6b4 \ud560 \uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4."""\n    db_todo = TodoModel(**todo.dict())\n    db.add(db_todo)\n    db.commit()\n    db.refresh(db_todo)\n    return db_todo\n\n@app.get("/todos/", response_model=List[Todo])\ndef list_todos(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(10, ge=1, le=100),\n    completed: Optional[bool] = None,\n    priority: Optional[int] = Query(None, ge=0, le=5),\n    db: Session = Depends(get_db)\n):\n    """\ud560 \uc77c \ubaa9\ub85d\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4. \ud544\ud130\ub9c1 \uc635\uc158\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."""\n    query = db.query(TodoModel)\n\n    if completed is not None:\n        query = query.filter(TodoModel.completed == completed)\n    if priority is not None:\n        query = query.filter(TodoModel.priority == priority)\n\n    return query.offset(skip).limit(limit).all()\n\n@app.get("/todos/{todo_id}", response_model=Todo)\ndef get_todo(todo_id: int, db: Session = Depends(get_db)):\n    """\ud2b9\uc815 \ud560 \uc77c\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4."""\n    todo = db.query(TodoModel).filter(TodoModel.id == todo_id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="\ud560 \uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return todo\n\n@app.patch("/todos/{todo_id}", response_model=Todo)\ndef update_todo(todo_id: int, todo_update: TodoUpdate, db: Session = Depends(get_db)):\n    """\ud560 \uc77c\uc744 \uc218\uc815\ud569\ub2c8\ub2e4."""\n    db_todo = db.query(TodoModel).filter(TodoModel.id == todo_id).first()\n    if not db_todo:\n        raise HTTPException(status_code=404, detail="\ud560 \uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    update_data = todo_update.dict(exclude_unset=True)\n    for field, value in update_data.items():\n        setattr(db_todo, field, value)\n\n    db.commit()\n    db.refresh(db_todo)\n    return db_todo\n\n@app.delete("/todos/{todo_id}", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_todo(todo_id: int, db: Session = Depends(get_db)):\n    """\ud560 \uc77c\uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4."""\n    db_todo = db.query(TodoModel).filter(TodoModel.id == todo_id).first()\n    if not db_todo:\n        raise HTTPException(status_code=404, detail="\ud560 \uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    db.delete(db_todo)\n    db.commit()\n\n@app.post("/todos/{todo_id}/complete", response_model=Todo)\ndef complete_todo(todo_id: int, db: Session = Depends(get_db)):\n    """\ud560 \uc77c\uc744 \uc644\ub8cc \ucc98\ub9ac\ud569\ub2c8\ub2e4."""\n    db_todo = db.query(TodoModel).filter(TodoModel.id == todo_id).first()\n    if not db_todo:\n        raise HTTPException(status_code=404, detail="\ud560 \uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    db_todo.completed = True\n    db.commit()\n    db.refresh(db_todo)\n    return db_todo\n\n@app.get("/todos/stats/summary")\ndef get_stats(db: Session = Depends(get_db)):\n    """\ud560 \uc77c \ud1b5\uacc4\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4."""\n    total = db.query(TodoModel).count()\n    completed = db.query(TodoModel).filter(TodoModel.completed == True).count()\n    pending = total - completed\n\n    return {\n        "total": total,\n        "completed": completed,\n        "pending": pending,\n        "completion_rate": (completed / total * 100) if total > 0 else 0\n    }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\uc608\uc81c-2-\uc0c1\ud488-\uce74\ud0c8\ub85c\uadf8-api",children:"\uc608\uc81c 2: \uc0c1\ud488 \uce74\ud0c8\ub85c\uadf8 API"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# product_api.py\nfrom fastapi import FastAPI, Depends, HTTPException, Query\nfrom sqlalchemy import create_engine, Column, Integer, String, Float, Boolean\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List\nfrom enum import Enum\n\napp = FastAPI(title="Product Catalog API")\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\nSQLALCHEMY_DATABASE_URL = "sqlite:///./products.db"\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# \uce74\ud14c\uace0\ub9ac Enum\nclass Category(str, Enum):\n    ELECTRONICS = "electronics"\n    CLOTHING = "clothing"\n    FOOD = "food"\n    BOOKS = "books"\n    TOYS = "toys"\n\n# SQLAlchemy \ubaa8\ub378\nclass ProductModel(Base):\n    __tablename__ = "products"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, nullable=False, index=True)\n    description = Column(String)\n    price = Column(Float, nullable=False)\n    category = Column(String, nullable=False)\n    stock = Column(Integer, default=0)\n    is_available = Column(Boolean, default=True)\n\nBase.metadata.create_all(bind=engine)\n\n# Pydantic \uc2a4\ud0a4\ub9c8\nclass ProductBase(BaseModel):\n    name: str = Field(..., min_length=1, max_length=200)\n    description: Optional[str] = Field(None, max_length=1000)\n    price: float = Field(..., gt=0)\n    category: Category\n    stock: int = Field(0, ge=0)\n    is_available: bool = True\n\nclass ProductCreate(ProductBase):\n    pass\n\nclass ProductUpdate(BaseModel):\n    name: Optional[str] = Field(None, min_length=1, max_length=200)\n    description: Optional[str] = Field(None, max_length=1000)\n    price: Optional[float] = Field(None, gt=0)\n    category: Optional[Category] = None\n    stock: Optional[int] = Field(None, ge=0)\n    is_available: Optional[bool] = None\n\nclass Product(ProductBase):\n    id: int\n\n    class Config:\n        from_attributes = True\n\n# \uc758\uc874\uc131\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.post("/products/", response_model=Product, status_code=201)\ndef create_product(product: ProductCreate, db: Session = Depends(get_db)):\n    """\uc0c8\ub85c\uc6b4 \uc0c1\ud488\uc744 \ub4f1\ub85d\ud569\ub2c8\ub2e4."""\n    db_product = ProductModel(**product.dict())\n    db.add(db_product)\n    db.commit()\n    db.refresh(db_product)\n    return db_product\n\n@app.get("/products/", response_model=List[Product])\ndef list_products(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(10, ge=1, le=100),\n    category: Optional[Category] = None,\n    min_price: Optional[float] = Query(None, ge=0),\n    max_price: Optional[float] = Query(None, ge=0),\n    in_stock: Optional[bool] = None,\n    search: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """\uc0c1\ud488 \ubaa9\ub85d\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4. \ub2e4\uc591\ud55c \ud544\ud130\ub9c1 \uc635\uc158\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."""\n    query = db.query(ProductModel)\n\n    if category:\n        query = query.filter(ProductModel.category == category.value)\n    if min_price is not None:\n        query = query.filter(ProductModel.price >= min_price)\n    if max_price is not None:\n        query = query.filter(ProductModel.price <= max_price)\n    if in_stock is not None:\n        if in_stock:\n            query = query.filter(ProductModel.stock > 0)\n        else:\n            query = query.filter(ProductModel.stock == 0)\n    if search:\n        query = query.filter(ProductModel.name.contains(search))\n\n    return query.offset(skip).limit(limit).all()\n\n@app.get("/products/{product_id}", response_model=Product)\ndef get_product(product_id: int, db: Session = Depends(get_db)):\n    """\ud2b9\uc815 \uc0c1\ud488\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4."""\n    product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n    if not product:\n        raise HTTPException(status_code=404, detail="\uc0c1\ud488\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return product\n\n@app.patch("/products/{product_id}", response_model=Product)\ndef update_product(product_id: int, product_update: ProductUpdate, db: Session = Depends(get_db)):\n    """\uc0c1\ud488 \uc815\ubcf4\ub97c \uc218\uc815\ud569\ub2c8\ub2e4."""\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n    if not db_product:\n        raise HTTPException(status_code=404, detail="\uc0c1\ud488\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    update_data = product_update.dict(exclude_unset=True)\n    for field, value in update_data.items():\n        setattr(db_product, field, value)\n\n    db.commit()\n    db.refresh(db_product)\n    return db_product\n\n@app.delete("/products/{product_id}", status_code=204)\ndef delete_product(product_id: int, db: Session = Depends(get_db)):\n    """\uc0c1\ud488\uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4."""\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n    if not db_product:\n        raise HTTPException(status_code=404, detail="\uc0c1\ud488\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    db.delete(db_product)\n    db.commit()\n\n@app.post("/products/{product_id}/restock")\ndef restock_product(\n    product_id: int,\n    quantity: int = Query(..., gt=0),\n    db: Session = Depends(get_db)\n):\n    """\uc0c1\ud488 \uc7ac\uace0\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4."""\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n    if not db_product:\n        raise HTTPException(status_code=404, detail="\uc0c1\ud488\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    db_product.stock += quantity\n    db_product.is_available = True\n    db.commit()\n    db.refresh(db_product)\n\n    return {"message": f"{quantity}\uac1c\uc758 \uc7ac\uace0\uac00 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4", "current_stock": db_product.stock}\n\n@app.get("/categories/")\ndef list_categories():\n    """\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uce74\ud14c\uace0\ub9ac \ubaa9\ub85d\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4."""\n    return [{"value": cat.value, "name": cat.name} for cat in Category]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"213-\ubaa8\ubc94-\uc0ac\ub840",children:"2.13 \ubaa8\ubc94 \uc0ac\ub840"}),"\n",(0,i.jsx)(n.h3,{id:"api-\ubc84\uc800\ub2dd",children:"API \ubc84\uc800\ub2dd"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\n\napp = FastAPI()\n\n# \ubc29\ubc95 1: URL \uacbd\ub85c\uc5d0 \ubc84\uc804 \ud3ec\ud568\n@app.get("/api/v1/users/")\ndef get_users_v1():\n    return {"version": "1.0", "users": []}\n\n@app.get("/api/v2/users/")\ndef get_users_v2():\n    return {"version": "2.0", "users": [], "total": 0}\n\n# \ubc29\ubc95 2: APIRouter\ub97c \uc0ac\uc6a9\ud55c \ubc84\uc804 \uad00\ub9ac\nfrom fastapi import APIRouter\n\nv1_router = APIRouter(prefix="/api/v1")\nv2_router = APIRouter(prefix="/api/v2")\n\n@v1_router.get("/users/")\ndef get_users_v1():\n    return {"version": "1.0", "users": []}\n\n@v2_router.get("/users/")\ndef get_users_v2():\n    return {"version": "2.0", "users": [], "total": 0}\n\napp.include_router(v1_router)\napp.include_router(v2_router)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\ud398\uc774\uc9c0\ub124\uc774\uc158",children:"\ud398\uc774\uc9c0\ub124\uc774\uc158"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel\nfrom typing import Generic, TypeVar, List\n\nT = TypeVar(\'T\')\n\nclass PaginatedResponse(BaseModel, Generic[T]):\n    items: List[T]\n    total: int\n    page: int\n    page_size: int\n    total_pages: int\n\n@app.get("/users/", response_model=PaginatedResponse[User])\ndef list_users(\n    page: int = Query(1, ge=1),\n    page_size: int = Query(10, ge=1, le=100),\n    db: Session = Depends(get_db)\n):\n    # \uc804\uccb4 \uac1c\uc218\n    total = db.query(UserModel).count()\n\n    # \ud398\uc774\uc9c0\ub124\uc774\uc158\n    skip = (page - 1) * page_size\n    users = db.query(UserModel).offset(skip).limit(page_size).all()\n\n    return {\n        "items": users,\n        "total": total,\n        "page": page,\n        "page_size": page_size,\n        "total_pages": (total + page_size - 1) // page_size\n    }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Request, HTTPException\nfrom slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.util import get_remote_address\nfrom slowapi.errors import RateLimitExceeded\n\nlimiter = Limiter(key_func=get_remote_address)\napp = FastAPI()\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n\n@app.get("/limited/")\n@limiter.limit("5/minute")\ndef limited_route(request: Request):\n    return {"message": "\uc774 \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub294 \ubd84\ub2f9 5\ud68c\ub85c \uc81c\ud55c\ub429\ub2c8\ub2e4"}\n\n@app.get("/strict-limited/")\n@limiter.limit("10/hour")\ndef strict_limited_route(request: Request):\n    return {"message": "\uc774 \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub294 \uc2dc\uac04\ub2f9 10\ud68c\ub85c \uc81c\ud55c\ub429\ub2c8\ub2e4"}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\uc751\ub2f5-\uce90\uc2f1",children:"\uc751\ub2f5 \uce90\uc2f1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Request\nfrom functools import wraps\nimport time\n\n# \uac04\ub2e8\ud55c \uc778\uba54\ubaa8\ub9ac \uce90\uc2dc\ncache = {}\n\ndef cache_response(expire_seconds: int = 60):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            # \uce90\uc2dc \ud0a4 \uc0dd\uc131\n            cache_key = f"{func.__name__}:{str(args)}:{str(kwargs)}"\n\n            # \uce90\uc2dc \ud655\uc778\n            if cache_key in cache:\n                cached_data, cached_time = cache[cache_key]\n                if time.time() - cached_time < expire_seconds:\n                    return cached_data\n\n            # \ud568\uc218 \uc2e4\ud589 \ubc0f \uce90\uc2f1\n            result = await func(*args, **kwargs)\n            cache[cache_key] = (result, time.time())\n            return result\n\n        return wrapper\n    return decorator\n\n@app.get("/expensive-operation/")\n@cache_response(expire_seconds=300)  # 5\ubd84 \uce90\uc2f1\nasync def expensive_operation():\n    # \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9ac\ub294 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n    time.sleep(2)\n    return {"result": "expensive data"}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"214-\uccb4\ud06c\ub9ac\uc2a4\ud2b8-\ubc0f-\ud301",children:"2.14 \uccb4\ud06c\ub9ac\uc2a4\ud2b8 \ubc0f \ud301"}),"\n",(0,i.jsx)(n.h3,{id:"rest-api-\uac1c\ubc1c-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"REST API \uac1c\ubc1c \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc801\uc808\ud55c HTTP \uba54\uc11c\ub4dc \uc0ac\uc6a9 (GET, POST, PUT, PATCH, DELETE)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc62c\ubc14\ub978 HTTP \uc0c1\ud0dc \ucf54\ub4dc \ubc18\ud658"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","RESTful \ub77c\uc6b0\ud305 \uaddc\uce59 \uc900\uc218"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc785\ub825 \ub370\uc774\ud130 \uc720\ud6a8\uc131 \uac80\uc99d (Pydantic)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc5d0\ub7ec \ucc98\ub9ac \ubc0f \uc758\ubbf8 \uc788\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","CORS \uc124\uc815 (\ud544\uc694\ud55c \uacbd\uc6b0)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc778\uc99d \ubc0f \uad8c\ud55c \ubd80\uc5ec"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","API \ubb38\uc11c\ud654 (\uc790\ub3d9 \uc0dd\uc131 \ud655\uc778)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8 \ucf54\ub4dc \uc791\uc131"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ub85c\uae45 \uad6c\ud604"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Rate limiting (\ud544\uc694\ud55c \uacbd\uc6b0)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud398\uc774\uc9c0\ub124\uc774\uc158 \uad6c\ud604"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","API \ubc84\uc800\ub2dd"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud658\uacbd \ubcc0\uc218\ub85c \uc124\uc815 \uad00\ub9ac"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654-\ud301",children:"\uc131\ub2a5 \ucd5c\uc801\ud654 \ud301"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \ucd5c\uc801\ud654"}),": N+1 \ubb38\uc81c\ub97c \ud53c\ud558\uae30 \uc704\ud574 ",(0,i.jsx)(n.code,{children:"joinedload"})," \uc0ac\uc6a9"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ube44\ub3d9\uae30 \ucc98\ub9ac"}),": I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc5d0 ",(0,i.jsx)(n.code,{children:"async/await"})," \ud65c\uc6a9"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\uce90\uc2f1"}),": \uc790\uc8fc \uc870\ud68c\ub418\ub294 \ub370\uc774\ud130\ub294 Redis \ub4f1\uc73c\ub85c \uce90\uc2f1"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ucee4\ub125\uc158 \ud480\ub9c1"}),": \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud480 \uc124\uc815"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud398\uc774\uc9c0\ub124\uc774\uc158"}),": \ub300\ub7c9\uc758 \ub370\uc774\ud130\ub294 \ud56d\uc0c1 \ud398\uc774\uc9c0\ub124\uc774\uc158 \uc801\uc6a9"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"\ubcf4\uc548-\ud301",children:"\ubcf4\uc548 \ud301"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ube44\ubc00\ubc88\ud638 \ud574\uc2f1"}),": \uc808\ub300 \ud3c9\ubb38\uc73c\ub85c \uc800\uc7a5\ud558\uc9c0 \uc54a\uae30"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JWT \ud1a0\ud070"}),": \uc548\uc804\ud55c SECRET_KEY \uc0ac\uc6a9 \ubc0f \ub9cc\ub8cc \uc2dc\uac04 \uc124\uc815"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTPS"}),": \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 \ubc18\ub4dc\uc2dc HTTPS \uc0ac\uc6a9"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SQL Injection \ubc29\uc9c0"}),": ORM \uc0ac\uc6a9 \uc2dc \uc790\ub3d9\uc73c\ub85c \ubc29\uc9c0\ub428"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud658\uacbd \ubcc0\uc218"}),": \ubbfc\uac10\ud55c \uc815\ubcf4\ub294 \ud658\uacbd \ubcc0\uc218\ub85c \uad00\ub9ac"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rate Limiting"}),": API \ub0a8\uc6a9 \ubc29\uc9c0"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CORS"}),": \ud544\uc694\ud55c origin\ub9cc \ud5c8\uc6a9"]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"215-\uc5f0\uc2b5-\ubb38\uc81c",children:"2.15 \uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,i.jsx)(n.h3,{id:"\uc5f0\uc2b5-1-\uac04\ub2e8\ud55c-\uba54\ubaa8-api-\ub9cc\ub4e4\uae30",children:"\uc5f0\uc2b5 1: \uac04\ub2e8\ud55c \uba54\ubaa8 API \ub9cc\ub4e4\uae30"}),"\n",(0,i.jsx)(n.p,{children:"\uba54\ubaa8\ub97c \uc0dd\uc131, \uc870\ud68c, \uc218\uc815, \uc0ad\uc81c\ud560 \uc218 \uc788\ub294 API\ub97c \ub9cc\ub4dc\uc138\uc694."}),"\n",(0,i.jsx)(n.p,{children:"\uc694\uad6c\uc0ac\ud56d:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\uba54\ubaa8\ub294 \uc81c\ubaa9(title)\uacfc \ub0b4\uc6a9(content)\uc744 \uac00\uc9d0"}),"\n",(0,i.jsx)(n.li,{children:"\uc0dd\uc131\uc77c\uc2dc \uc790\ub3d9 \uae30\ub85d"}),"\n",(0,i.jsx)(n.li,{children:"\ud0dc\uadf8 \uae30\ub2a5 \ucd94\uac00 (\uc120\ud0dd)"}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, HTTPException, Depends\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List\nfrom datetime import datetime\nfrom sqlalchemy import create_engine, Column, Integer, String, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\nSQLALCHEMY_DATABASE_URL = "sqlite:///./notes.db"\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# \ubaa8\ub378\nclass NoteModel(Base):\n    __tablename__ = "notes"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    tags = Column(String)  # \uc27c\ud45c\ub85c \uad6c\ubd84\ub41c \ud0dc\uadf8\n    created_at = Column(DateTime, default=datetime.utcnow)\n\nBase.metadata.create_all(bind=engine)\n\n# \uc2a4\ud0a4\ub9c8\nclass NoteBase(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200)\n    content: str = Field(..., min_length=1)\n    tags: Optional[str] = None\n\nclass NoteCreate(NoteBase):\n    pass\n\nclass NoteUpdate(BaseModel):\n    title: Optional[str] = Field(None, min_length=1, max_length=200)\n    content: Optional[str] = Field(None, min_length=1)\n    tags: Optional[str] = None\n\nclass Note(NoteBase):\n    id: int\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# FastAPI \uc571\napp = FastAPI(title="Notes API")\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post("/notes/", response_model=Note, status_code=201)\ndef create_note(note: NoteCreate, db: Session = Depends(get_db)):\n    db_note = NoteModel(**note.dict())\n    db.add(db_note)\n    db.commit()\n    db.refresh(db_note)\n    return db_note\n\n@app.get("/notes/", response_model=List[Note])\ndef list_notes(\n    skip: int = 0,\n    limit: int = 10,\n    tag: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    query = db.query(NoteModel)\n    if tag:\n        query = query.filter(NoteModel.tags.contains(tag))\n    return query.offset(skip).limit(limit).all()\n\n@app.get("/notes/{note_id}", response_model=Note)\ndef get_note(note_id: int, db: Session = Depends(get_db)):\n    note = db.query(NoteModel).filter(NoteModel.id == note_id).first()\n    if not note:\n        raise HTTPException(status_code=404, detail="\uba54\ubaa8\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return note\n\n@app.patch("/notes/{note_id}", response_model=Note)\ndef update_note(note_id: int, note_update: NoteUpdate, db: Session = Depends(get_db)):\n    db_note = db.query(NoteModel).filter(NoteModel.id == note_id).first()\n    if not db_note:\n        raise HTTPException(status_code=404, detail="\uba54\ubaa8\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    update_data = note_update.dict(exclude_unset=True)\n    for field, value in update_data.items():\n        setattr(db_note, field, value)\n\n    db.commit()\n    db.refresh(db_note)\n    return db_note\n\n@app.delete("/notes/{note_id}", status_code=204)\ndef delete_note(note_id: int, db: Session = Depends(get_db)):\n    db_note = db.query(NoteModel).filter(NoteModel.id == note_id).first()\n    if not db_note:\n        raise HTTPException(status_code=404, detail="\uba54\ubaa8\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    db.delete(db_note)\n    db.commit()\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"\uc5f0\uc2b5-2-\uc0ac\uc6a9\uc790-\uc778\uc99d\uc774-\uc788\ub294-\ube14\ub85c\uadf8-api",children:"\uc5f0\uc2b5 2: \uc0ac\uc6a9\uc790 \uc778\uc99d\uc774 \uc788\ub294 \ube14\ub85c\uadf8 API"}),"\n",(0,i.jsx)(n.p,{children:"JWT \uc778\uc99d\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubcf4\ud638\ub41c \ube14\ub85c\uadf8 API\ub97c \ub9cc\ub4dc\uc138\uc694."}),"\n",(0,i.jsx)(n.p,{children:"\uc694\uad6c\uc0ac\ud56d:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\uc0ac\uc6a9\uc790 \ub4f1\ub85d \ubc0f \ub85c\uadf8\uc778"}),"\n",(0,i.jsx)(n.li,{children:"\ub85c\uadf8\uc778\ud55c \uc0ac\uc6a9\uc790\ub9cc \uac8c\uc2dc\uae00 \uc791\uc131 \uac00\ub2a5"}),"\n",(0,i.jsx)(n.li,{children:"\uc790\uc2e0\uc758 \uac8c\uc2dc\uae00\ub9cc \uc218\uc815/\uc0ad\uc81c \uac00\ub2a5"}),"\n",(0,i.jsx)(n.li,{children:"\ubaa8\ub4e0 \uc0ac\uc6a9\uc790\ub294 \uac8c\uc2dc\uae00 \uc870\ud68c \uac00\ub2a5"}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, EmailStr\nfrom datetime import datetime, timedelta\nfrom typing import Optional, List\nfrom sqlalchemy import create_engine, Column, Integer, String, ForeignKey, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session, relationship\n\n# \uc124\uc815\nSECRET_KEY = "your-secret-key"\nALGORITHM = "HS256"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4\nSQLALCHEMY_DATABASE_URL = "sqlite:///./blog.db"\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")\n\n# \ubaa8\ub378\nclass UserModel(Base):\n    __tablename__ = "users"\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    username = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    posts = relationship("PostModel", back_populates="author")\n\nclass PostModel(Base):\n    __tablename__ = "posts"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    author_id = Column(Integer, ForeignKey("users.id"))\n    author = relationship("UserModel", back_populates="posts")\n\nBase.metadata.create_all(bind=engine)\n\n# \uc2a4\ud0a4\ub9c8\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass UserCreate(BaseModel):\n    email: EmailStr\n    username: str\n    password: str\n\nclass User(BaseModel):\n    id: int\n    email: EmailStr\n    username: str\n\n    class Config:\n        from_attributes = True\n\nclass PostCreate(BaseModel):\n    title: str\n    content: str\n\nclass Post(BaseModel):\n    id: int\n    title: str\n    content: str\n    created_at: datetime\n    author: User\n\n    class Config:\n        from_attributes = True\n\n# \ud5ec\ud37c \ud568\uc218\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({"exp": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n\nasync def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail="\uc778\uc99d \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4",\n        headers={"WWW-Authenticate": "Bearer"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get("sub")\n        if username is None:\n            raise credentials_exception\n    except JWTError:\n        raise credentials_exception\n\n    user = db.query(UserModel).filter(UserModel.username == username).first()\n    if user is None:\n        raise credentials_exception\n    return user\n\n# FastAPI \uc571\napp = FastAPI(title="Blog API")\n\n@app.post("/register", response_model=User)\ndef register(user: UserCreate, db: Session = Depends(get_db)):\n    db_user = db.query(UserModel).filter(UserModel.email == user.email).first()\n    if db_user:\n        raise HTTPException(status_code=400, detail="\uc774\ubbf8 \ub4f1\ub85d\ub41c \uc774\uba54\uc77c\uc785\ub2c8\ub2e4")\n\n    hashed_password = get_password_hash(user.password)\n    db_user = UserModel(\n        email=user.email,\n        username=user.username,\n        hashed_password=hashed_password\n    )\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n@app.post("/token", response_model=Token)\ndef login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    user = db.query(UserModel).filter(UserModel.username == form_data.username).first()\n    if not user or not verify_password(form_data.password, user.hashed_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail="\uc798\ubabb\ub41c \uc0ac\uc6a9\uc790\uba85 \ub610\ub294 \ube44\ubc00\ubc88\ud638\uc785\ub2c8\ub2e4",\n            headers={"WWW-Authenticate": "Bearer"},\n        )\n\n    access_token = create_access_token(data={"sub": user.username})\n    return {"access_token": access_token, "token_type": "bearer"}\n\n@app.post("/posts/", response_model=Post, status_code=201)\ndef create_post(\n    post: PostCreate,\n    current_user: UserModel = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    db_post = PostModel(**post.dict(), author_id=current_user.id)\n    db.add(db_post)\n    db.commit()\n    db.refresh(db_post)\n    return db_post\n\n@app.get("/posts/", response_model=List[Post])\ndef list_posts(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):\n    return db.query(PostModel).offset(skip).limit(limit).all()\n\n@app.get("/posts/{post_id}", response_model=Post)\ndef get_post(post_id: int, db: Session = Depends(get_db)):\n    post = db.query(PostModel).filter(PostModel.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail="\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return post\n\n@app.delete("/posts/{post_id}", status_code=204)\ndef delete_post(\n    post_id: int,\n    current_user: UserModel = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    post = db.query(PostModel).filter(PostModel.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail="\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    if post.author_id != current_user.id:\n        raise HTTPException(status_code=403, detail="\uad8c\ud55c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    db.delete(post)\n    db.commit()\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"\uc5f0\uc2b5-3-\ud30c\uc77c-\uc5c5\ub85c\ub4dc-api",children:"\uc5f0\uc2b5 3: \ud30c\uc77c \uc5c5\ub85c\ub4dc API"}),"\n",(0,i.jsx)(n.p,{children:"\uc774\ubbf8\uc9c0 \ud30c\uc77c\uc744 \uc5c5\ub85c\ub4dc\ud558\uace0 \uad00\ub9ac\ud558\ub294 API\ub97c \ub9cc\ub4dc\uc138\uc694."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.responses import FileResponse\nfrom typing import List\nimport shutil\nfrom pathlib import Path\nimport uuid\n\napp = FastAPI(title="File Upload API")\n\n# \uc5c5\ub85c\ub4dc \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\nUPLOAD_DIR = Path("uploads")\nUPLOAD_DIR.mkdir(exist_ok=True)\n\n# \ud5c8\uc6a9\ub41c \ud30c\uc77c \ud655\uc7a5\uc790\nALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".gif"}\n\ndef validate_file(filename: str):\n    ext = Path(filename).suffix.lower()\n    if ext not in ALLOWED_EXTENSIONS:\n        raise HTTPException(\n            status_code=400,\n            detail=f"\ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294 \ud30c\uc77c \ud615\uc2dd\uc785\ub2c8\ub2e4. \ud5c8\uc6a9: {\', \'.join(ALLOWED_EXTENSIONS)}"\n        )\n\n@app.post("/upload/")\nasync def upload_file(file: UploadFile = File(...)):\n    """\ub2e8\uc77c \ud30c\uc77c\uc744 \uc5c5\ub85c\ub4dc\ud569\ub2c8\ub2e4."""\n    validate_file(file.filename)\n\n    # \uace0\uc720\ud55c \ud30c\uc77c\uba85 \uc0dd\uc131\n    file_ext = Path(file.filename).suffix\n    unique_filename = f"{uuid.uuid4()}{file_ext}"\n    file_path = UPLOAD_DIR / unique_filename\n\n    # \ud30c\uc77c \uc800\uc7a5\n    with file_path.open("wb") as buffer:\n        shutil.copyfileobj(file.file, buffer)\n\n    return {\n        "filename": unique_filename,\n        "original_filename": file.filename,\n        "size": file_path.stat().st_size\n    }\n\n@app.post("/upload-multiple/")\nasync def upload_multiple_files(files: List[UploadFile] = File(...)):\n    """\uc5ec\ub7ec \ud30c\uc77c\uc744 \uc5c5\ub85c\ub4dc\ud569\ub2c8\ub2e4."""\n    uploaded_files = []\n\n    for file in files:\n        validate_file(file.filename)\n\n        file_ext = Path(file.filename).suffix\n        unique_filename = f"{uuid.uuid4()}{file_ext}"\n        file_path = UPLOAD_DIR / unique_filename\n\n        with file_path.open("wb") as buffer:\n            shutil.copyfileobj(file.file, buffer)\n\n        uploaded_files.append({\n            "filename": unique_filename,\n            "original_filename": file.filename,\n            "size": file_path.stat().st_size\n        })\n\n    return {"files": uploaded_files}\n\n@app.get("/files/")\ndef list_files():\n    """\uc5c5\ub85c\ub4dc\ub41c \ud30c\uc77c \ubaa9\ub85d\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4."""\n    files = []\n    for file_path in UPLOAD_DIR.iterdir():\n        if file_path.is_file():\n            files.append({\n                "filename": file_path.name,\n                "size": file_path.stat().st_size\n            })\n    return {"files": files}\n\n@app.get("/files/{filename}")\nasync def download_file(filename: str):\n    """\ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud569\ub2c8\ub2e4."""\n    file_path = UPLOAD_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail="\ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    return FileResponse(file_path)\n\n@app.delete("/files/{filename}")\ndef delete_file(filename: str):\n    """\ud30c\uc77c\uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4."""\n    file_path = UPLOAD_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail="\ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    file_path.unlink()\n    return {"message": "\ud30c\uc77c\uc774 \uc0ad\uc81c\ub418\uc5c8\uc2b5\ub2c8\ub2e4"}\n'})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,i.jsx)(n.p,{children:"REST API \uac1c\ubc1c\uc758 \uae30\ucd08\ub97c \ub9c8\uc2a4\ud130\ud588\uc2b5\ub2c8\ub2e4! \ub2e4\uc74c \uc139\uc158\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9\uc5d0 \ub300\ud574 \ub354 \uae4a\uc774 \uc788\uac8c \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ub2e4\uc74c"}),": ",(0,i.jsx)(n.a,{href:"./database",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9"})]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);