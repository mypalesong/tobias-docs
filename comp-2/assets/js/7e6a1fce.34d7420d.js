"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[9445],{1864:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"apscheduler/schedulers","title":"2. \uc2a4\ucf00\uc904\ub7ec","description":"APScheduler\ub294 \ub2e4\uc591\ud55c \uc2e4\ud589 \ud658\uacbd\uacfc \uc0ac\uc6a9 \uc0ac\ub840\uc5d0 \ub9de\ucdb0 \uc5ec\ub7ec \uc885\ub958\uc758 \uc2a4\ucf00\uc904\ub7ec\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac01 \uc2a4\ucf00\uc904\ub7ec\uc758 \ud2b9\uc9d5\uacfc \uc0ac\uc6a9\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/apscheduler/schedulers.md","sourceDirName":"apscheduler","slug":"/apscheduler/schedulers","permalink":"/docs/apscheduler/schedulers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/apscheduler/schedulers.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"apschedulerSidebar","previous":{"title":"1. \uc124\uce58 \ubc0f \uc124\uc815","permalink":"/docs/apscheduler/installation"},"next":{"title":"3. \ud2b8\ub9ac\uac70","permalink":"/docs/apscheduler/triggers"}}');var l=r(4848),t=r(8453);const d={sidebar_position:3},o="2. \uc2a4\ucf00\uc904\ub7ec",i={},a=[{value:"\uc2a4\ucf00\uc904\ub7ec \uac1c\uc694",id:"\uc2a4\ucf00\uc904\ub7ec-\uac1c\uc694",level:2},{value:"BlockingScheduler",id:"blockingscheduler",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"\uba85\ub839\uc904 \uc2a4\ud06c\ub9bd\ud2b8\ub85c \uc0ac\uc6a9",id:"\uba85\ub839\uc904-\uc2a4\ud06c\ub9bd\ud2b8\ub85c-\uc0ac\uc6a9",level:3},{value:"\ub370\ubaac \ud504\ub85c\uc138\uc2a4\ub85c \uc2e4\ud589",id:"\ub370\ubaac-\ud504\ub85c\uc138\uc2a4\ub85c-\uc2e4\ud589",level:3},{value:"BackgroundScheduler",id:"backgroundscheduler",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",level:3},{value:"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc0ac\uc6a9",id:"\uc6f9-\uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c-\uc0ac\uc6a9",level:3},{value:"\uba40\ud2f0 \uc778\uc2a4\ud134\uc2a4 \ud658\uacbd \uace0\ub824",id:"\uba40\ud2f0-\uc778\uc2a4\ud134\uc2a4-\ud658\uacbd-\uace0\ub824",level:3},{value:"\ub3d9\uc801 \uc791\uc5c5 \uad00\ub9ac",id:"\ub3d9\uc801-\uc791\uc5c5-\uad00\ub9ac",level:3},{value:"AsyncIOScheduler",id:"asyncioscheduler",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-2",level:3},{value:"FastAPI\uc640 \ud1b5\ud569",id:"fastapi\uc640-\ud1b5\ud569",level:3},{value:"\ube44\ub3d9\uae30 HTTP \uc694\uccad \uc2a4\ucf00\uc904\ub9c1",id:"\ube44\ub3d9\uae30-http-\uc694\uccad-\uc2a4\ucf00\uc904\ub9c1",level:3},{value:"\uc2a4\ucf00\uc904\ub7ec \uc124\uc815",id:"\uc2a4\ucf00\uc904\ub7ec-\uc124\uc815",level:2},{value:"Job Store \uc124\uc815",id:"job-store-\uc124\uc815",level:3},{value:"Executor \uc124\uc815",id:"executor-\uc124\uc815",level:3},{value:"\uc804\uccb4 \uc124\uc815 \uc608\uc81c",id:"\uc804\uccb4-\uc124\uc815-\uc608\uc81c",level:3},{value:"\uc2dc\uc791\uacfc \uc885\ub8cc",id:"\uc2dc\uc791\uacfc-\uc885\ub8cc",level:2},{value:"\uae30\ubcf8 \uc2dc\uc791/\uc885\ub8cc",id:"\uae30\ubcf8-\uc2dc\uc791\uc885\ub8cc",level:3},{value:"\uc885\ub8cc \uc635\uc158",id:"\uc885\ub8cc-\uc635\uc158",level:3},{value:"\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9",id:"\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800-\uc0ac\uc6a9",level:3},{value:"\uc6b0\uc544\ud55c \uc885\ub8cc (Graceful Shutdown)",id:"\uc6b0\uc544\ud55c-\uc885\ub8cc-graceful-shutdown",level:3},{value:"\uc0c1\ud0dc \ud655\uc778",id:"\uc0c1\ud0dc-\ud655\uc778",level:3},{value:"\uc7ac\uc2dc\uc791 \uae30\ub2a5",id:"\uc7ac\uc2dc\uc791-\uae30\ub2a5",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"2-\uc2a4\ucf00\uc904\ub7ec",children:"2. \uc2a4\ucf00\uc904\ub7ec"})}),"\n",(0,l.jsx)(n.p,{children:"APScheduler\ub294 \ub2e4\uc591\ud55c \uc2e4\ud589 \ud658\uacbd\uacfc \uc0ac\uc6a9 \uc0ac\ub840\uc5d0 \ub9de\ucdb0 \uc5ec\ub7ec \uc885\ub958\uc758 \uc2a4\ucf00\uc904\ub7ec\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac01 \uc2a4\ucf00\uc904\ub7ec\uc758 \ud2b9\uc9d5\uacfc \uc0ac\uc6a9\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.h2,{id:"\uc2a4\ucf00\uc904\ub7ec-\uac1c\uc694",children:"\uc2a4\ucf00\uc904\ub7ec \uac1c\uc694"}),"\n",(0,l.jsx)(n.p,{children:"APScheduler\ub294 \ud06c\uac8c 6\uac00\uc9c0 \uc2a4\ucf00\uc904\ub7ec\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"BlockingScheduler"}),": \uc2a4\ucf00\uc904\ub7ec\uac00 \uc720\uc77c\ud55c \uc2e4\ud589 \ud504\ub85c\uc138\uc2a4\uc77c \ub54c \uc0ac\uc6a9"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"BackgroundScheduler"}),": \uc2a4\ucf00\uc904\ub7ec\uac00 \ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc2e4\ud589\ub420 \ub54c \uc0ac\uc6a9"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"AsyncIOScheduler"}),": asyncio \uc774\ubca4\ud2b8 \ub8e8\ud504\uc640 \ud568\uaed8 \uc0ac\uc6a9"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"GeventScheduler"}),": gevent \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub0b4\ubd80\uc5d0\uc11c \uc0ac\uc6a9"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"TornadoScheduler"}),": Tornado \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub0b4\ubd80\uc5d0\uc11c \uc0ac\uc6a9"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"TwistedScheduler"}),": Twisted \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub0b4\ubd80\uc5d0\uc11c \uc0ac\uc6a9"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \uc0c1\uc704 3\uac00\uc9c0 \uc2a4\ucf00\uc904\ub7ec\ub97c \uc911\uc810\uc801\uc73c\ub85c \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.h2,{id:"blockingscheduler",children:"BlockingScheduler"}),"\n",(0,l.jsxs)(n.p,{children:["BlockingScheduler\ub294 \uc2a4\ucf00\uc904\ub7ec\uac00 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uc8fc\uc694 \ud504\ub85c\uc138\uc2a4\ub85c \uc2e4\ud589\ub418\uc5b4\uc57c \ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. ",(0,l.jsx)(n.code,{children:"start()"})," \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud558\uba74 \ud604\uc7ac \uc2a4\ub808\ub4dc\ub97c \ube14\ub85c\ud0b9\ud558\ubbc0\ub85c, \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."]}),"\n",(0,l.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.blocking import BlockingScheduler\nfrom datetime import datetime\nimport time\n\ndef job_function():\n    print(f"\uc791\uc5c5 \uc2e4\ud589 \uc2dc\uac04: {datetime.now()}")\n\n# \uc2a4\ucf00\uc904\ub7ec \uc0dd\uc131\nscheduler = BlockingScheduler()\n\n# \uc791\uc5c5 \ucd94\uac00\nscheduler.add_job(job_function, \'interval\', seconds=5)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791 (\uc5ec\uae30\uc11c \ube14\ub85c\ud0b9\ub428)\nprint("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791...")\ntry:\n    scheduler.start()\nexcept (KeyboardInterrupt, SystemExit):\n    print("\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\uba85\ub839\uc904-\uc2a4\ud06c\ub9bd\ud2b8\ub85c-\uc0ac\uc6a9",children:"\uba85\ub839\uc904 \uc2a4\ud06c\ub9bd\ud2b8\ub85c \uc0ac\uc6a9"}),"\n",(0,l.jsx)(n.p,{children:"BlockingScheduler\ub294 \ub3c5\ub9bd \uc2e4\ud589\ud615 \uc2a4\ud06c\ub9bd\ud2b8\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",metastring:'title="scheduler_script.py"',children:'#!/usr/bin/env python3\n"""\n\ub3c5\ub9bd \uc2e4\ud589\ud615 \uc2a4\ucf00\uc904\ub7ec \uc2a4\ud06c\ub9bd\ud2b8\n"""\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom datetime import datetime\nimport logging\nimport signal\nimport sys\n\n# \ub85c\uae45 \uc124\uc815\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\'\n)\nlogger = logging.getLogger(__name__)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc0dd\uc131\nscheduler = BlockingScheduler()\n\ndef data_backup():\n    """\ub370\uc774\ud130 \ubc31\uc5c5 \uc791\uc5c5"""\n    logger.info("\ub370\uc774\ud130 \ubc31\uc5c5 \uc2dc\uc791")\n    try:\n        # \ubc31\uc5c5 \ub85c\uc9c1\n        logger.info("\ubc31\uc5c5 \uc644\ub8cc")\n    except Exception as e:\n        logger.error(f"\ubc31\uc5c5 \uc2e4\ud328: {e}")\n\ndef send_daily_report():\n    """\uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc804\uc1a1"""\n    logger.info("\uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc804\uc1a1")\n    # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc804\uc1a1 \ub85c\uc9c1\n\ndef cleanup_old_files():\n    """\uc624\ub798\ub41c \ud30c\uc77c \uc815\ub9ac"""\n    logger.info("\uc624\ub798\ub41c \ud30c\uc77c \uc815\ub9ac")\n    # \ud30c\uc77c \uc815\ub9ac \ub85c\uc9c1\n\ndef signal_handler(signum, frame):\n    """\uc2dc\uadf8\ub110 \ud578\ub4e4\ub7ec"""\n    logger.info("\uc885\ub8cc \uc2dc\uadf8\ub110 \uc218\uc2e0, \uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc \uc911...")\n    scheduler.shutdown()\n    sys.exit(0)\n\ndef main():\n    """\uba54\uc778 \ud568\uc218"""\n    # \uc2dc\uadf8\ub110 \ud578\ub4e4\ub7ec \ub4f1\ub85d\n    signal.signal(signal.SIGINT, signal_handler)\n    signal.signal(signal.SIGTERM, signal_handler)\n\n    # \uc791\uc5c5 \ub4f1\ub85d\n    # \ub9e4\uc2dc\uac04 \ubc31\uc5c5\n    scheduler.add_job(\n        data_backup,\n        trigger=\'interval\',\n        hours=1,\n        id=\'backup_job\',\n        name=\'\ub370\uc774\ud130 \ubc31\uc5c5\'\n    )\n\n    # \ub9e4\uc77c \uc624\uc804 9\uc2dc \ub9ac\ud3ec\ud2b8\n    scheduler.add_job(\n        send_daily_report,\n        trigger=CronTrigger(hour=9, minute=0),\n        id=\'report_job\',\n        name=\'\uc77c\uc77c \ub9ac\ud3ec\ud2b8\'\n    )\n\n    # \ub9e4\uc77c \uc790\uc815 \ud30c\uc77c \uc815\ub9ac\n    scheduler.add_job(\n        cleanup_old_files,\n        trigger=CronTrigger(hour=0, minute=0),\n        id=\'cleanup_job\',\n        name=\'\ud30c\uc77c \uc815\ub9ac\'\n    )\n\n    # \ub4f1\ub85d\ub41c \uc791\uc5c5 \ucd9c\ub825\n    logger.info("\ub4f1\ub85d\ub41c \uc791\uc5c5:")\n    for job in scheduler.get_jobs():\n        logger.info(f"  - {job.name} (ID: {job.id})")\n        logger.info(f"    \ub2e4\uc74c \uc2e4\ud589: {job.next_run_time}")\n\n    # \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\n    logger.info("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791")\n    try:\n        scheduler.start()\n    except (KeyboardInterrupt, SystemExit):\n        logger.info("\uc2a4\ucf00\uc904\ub7ec \uc815\uc0c1 \uc885\ub8cc")\n\nif __name__ == \'__main__\':\n    main()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\ub370\ubaac-\ud504\ub85c\uc138\uc2a4\ub85c-\uc2e4\ud589",children:"\ub370\ubaac \ud504\ub85c\uc138\uc2a4\ub85c \uc2e4\ud589"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",metastring:'title="scheduler_daemon.py"',children:'#!/usr/bin/env python3\n"""\n\ub370\ubaac \ud504\ub85c\uc138\uc2a4\ub85c \uc2e4\ud589\ub418\ub294 \uc2a4\ucf00\uc904\ub7ec\n"""\nimport os\nimport sys\nimport time\nimport atexit\nfrom signal import SIGTERM\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nclass Daemon:\n    """\ub370\ubaac \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4"""\n\n    def __init__(self, pidfile):\n        self.pidfile = pidfile\n\n    def daemonize(self):\n        """\ud504\ub85c\uc138\uc2a4\ub97c \ub370\ubaac\ud654"""\n        try:\n            pid = os.fork()\n            if pid > 0:\n                sys.exit(0)\n        except OSError as e:\n            sys.stderr.write(f"fork #1 \uc2e4\ud328: {e}\\n")\n            sys.exit(1)\n\n        os.chdir("/")\n        os.setsid()\n        os.umask(0)\n\n        try:\n            pid = os.fork()\n            if pid > 0:\n                sys.exit(0)\n        except OSError as e:\n            sys.stderr.write(f"fork #2 \uc2e4\ud328: {e}\\n")\n            sys.exit(1)\n\n        # PID \ud30c\uc77c \uc791\uc131\n        atexit.register(self.delpid)\n        pid = str(os.getpid())\n        with open(self.pidfile, \'w+\') as f:\n            f.write(f"{pid}\\n")\n\n    def delpid(self):\n        """PID \ud30c\uc77c \uc0ad\uc81c"""\n        os.remove(self.pidfile)\n\n    def start(self):\n        """\ub370\ubaac \uc2dc\uc791"""\n        # PID \ud30c\uc77c \ud655\uc778\n        try:\n            with open(self.pidfile, \'r\') as pf:\n                pid = int(pf.read().strip())\n        except IOError:\n            pid = None\n\n        if pid:\n            message = f"PID \ud30c\uc77c {self.pidfile}\uc774 \uc774\ubbf8 \uc874\uc7ac\ud569\ub2c8\ub2e4. \ub370\ubaac\uc774 \uc774\ubbf8 \uc2e4\ud589 \uc911\uc785\ub2c8\uae4c?\\n"\n            sys.stderr.write(message)\n            sys.exit(1)\n\n        # \ub370\ubaac\ud654 \ubc0f \uc2e4\ud589\n        self.daemonize()\n        self.run()\n\n    def stop(self):\n        """\ub370\ubaac \uc815\uc9c0"""\n        try:\n            with open(self.pidfile, \'r\') as pf:\n                pid = int(pf.read().strip())\n        except IOError:\n            pid = None\n\n        if not pid:\n            message = f"PID \ud30c\uc77c {self.pidfile}\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub370\ubaac\uc774 \uc2e4\ud589 \uc911\uc774 \uc544\ub2d9\ub2c8\uae4c?\\n"\n            sys.stderr.write(message)\n            return\n\n        # \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc\n        try:\n            while True:\n                os.kill(pid, SIGTERM)\n                time.sleep(0.1)\n        except OSError as err:\n            err = str(err)\n            if err.find("No such process") > 0:\n                if os.path.exists(self.pidfile):\n                    os.remove(self.pidfile)\n            else:\n                print(str(err))\n                sys.exit(1)\n\n    def restart(self):\n        """\ub370\ubaac \uc7ac\uc2dc\uc791"""\n        self.stop()\n        self.start()\n\n    def run(self):\n        """\uc2e4\uc81c \uc791\uc5c5 \uc218\ud589 (\uc624\ubc84\ub77c\uc774\ub4dc \ud544\uc694)"""\n        pass\n\nclass SchedulerDaemon(Daemon):\n    """\uc2a4\ucf00\uc904\ub7ec \ub370\ubaac"""\n\n    def run(self):\n        scheduler = BlockingScheduler()\n\n        def scheduled_task():\n            with open(\'/tmp/scheduler.log\', \'a\') as f:\n                f.write(f"\uc791\uc5c5 \uc2e4\ud589: {time.ctime()}\\n")\n\n        scheduler.add_job(scheduled_task, \'interval\', seconds=30)\n        scheduler.start()\n\nif __name__ == "__main__":\n    daemon = SchedulerDaemon(\'/tmp/scheduler-daemon.pid\')\n\n    if len(sys.argv) == 2:\n        if \'start\' == sys.argv[1]:\n            daemon.start()\n        elif \'stop\' == sys.argv[1]:\n            daemon.stop()\n        elif \'restart\' == sys.argv[1]:\n            daemon.restart()\n        else:\n            print("\uc54c \uc218 \uc5c6\ub294 \uba85\ub839")\n            sys.exit(2)\n    else:\n        print(f"\uc0ac\uc6a9\ubc95: {sys.argv[0]} start|stop|restart")\n        sys.exit(2)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"backgroundscheduler",children:"BackgroundScheduler"}),"\n",(0,l.jsx)(n.p,{children:"BackgroundScheduler\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc2e4\ud589\ub418\uc5b4\uc57c \ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \uc2a4\ucf00\uc904\ub7ec\uc785\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\ndef tick():\n    print(f'\ud2f1: {datetime.now()}')\n\n# \uc2a4\ucf00\uc904\ub7ec \uc0dd\uc131 \ubc0f \uc2dc\uc791\nscheduler = BackgroundScheduler()\nscheduler.add_job(tick, 'interval', seconds=3)\nscheduler.start()\n\nprint('\uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589 \uc911. Ctrl+C\ub85c \uc885\ub8cc.')\n\ntry:\n    # \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uba54\uc778 \ub85c\uc9c1\uc774 \uc5ec\uae30\uc11c \uc2e4\ud589\n    while True:\n        time.sleep(1)\nexcept (KeyboardInterrupt, SystemExit):\n    scheduler.shutdown()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\uc6f9-\uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c-\uc0ac\uc6a9",children:"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc0ac\uc6a9"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from flask import Flask\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport atexit\n\napp = Flask(__name__)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc0dd\uc131\nscheduler = BackgroundScheduler()\n\ndef scheduled_job():\n    \"\"\"\ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc2e4\ud589\ub420 \uc791\uc5c5\"\"\"\n    print(f\"\uc2a4\ucf00\uc904\ub41c \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}\")\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc815\ub9ac, \uce90\uc2dc \uac31\uc2e0 \ub4f1\uc758 \uc791\uc5c5 \uc218\ud589\n\n# \uc791\uc5c5 \ub4f1\ub85d\nscheduler.add_job(\n    func=scheduled_job,\n    trigger='interval',\n    minutes=5,\n    id='cleanup_job',\n    name='\ub370\uc774\ud130 \uc815\ub9ac \uc791\uc5c5',\n    replace_existing=True\n)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\nscheduler.start()\n\n# \uc571 \uc885\ub8cc \uc2dc \uc2a4\ucf00\uc904\ub7ec\ub3c4 \uc885\ub8cc\natexit.register(lambda: scheduler.shutdown())\n\n@app.route('/')\ndef index():\n    return '\uc2a4\ucf00\uc904\ub7ec\uac00 \ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc2e4\ud589 \uc911\uc785\ub2c8\ub2e4.'\n\n@app.route('/jobs')\ndef jobs():\n    \"\"\"\uc2e4\ud589 \uc911\uc778 \uc791\uc5c5 \ubaa9\ub85d\"\"\"\n    job_list = []\n    for job in scheduler.get_jobs():\n        job_list.append({\n            'id': job.id,\n            'name': job.name,\n            'next_run': str(job.next_run_time)\n        })\n    return {'jobs': job_list}\n\nif __name__ == '__main__':\n    app.run(debug=False)  # debug=True \uc2dc \uc2a4\ucf00\uc904\ub7ec\uac00 \uc911\ubcf5 \uc2e4\ud589\ub420 \uc218 \uc788\uc74c\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\uba40\ud2f0-\uc778\uc2a4\ud134\uc2a4-\ud658\uacbd-\uace0\ub824",children:"\uba40\ud2f0 \uc778\uc2a4\ud134\uc2a4 \ud658\uacbd \uace0\ub824"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nimport os\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ubc18 Job Store \uc0ac\uc6a9\njobstores = {\n    'default': SQLAlchemyJobStore(url='postgresql://user:password@localhost/scheduler_db')\n}\n\nexecutors = {\n    'default': ThreadPoolExecutor(max_workers=10)\n}\n\njob_defaults = {\n    'coalesce': True,  # \ub204\uc801\ub41c \uc2e4\ud589\uc744 \ud558\ub098\ub85c \ud569\uce68\n    'max_instances': 1  # \ub3d9\uc77c \uc791\uc5c5\uc774 \ub3d9\uc2dc\uc5d0 \uc5ec\ub7ec \ubc88 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub3c4\ub85d\n}\n\nscheduler = BackgroundScheduler(\n    jobstores=jobstores,\n    executors=executors,\n    job_defaults=job_defaults\n)\n\ndef singleton_job():\n    \"\"\"\uc5ec\ub7ec \uc778\uc2a4\ud134\uc2a4\uc5d0\uc11c \uc2e4\ud589\ub418\uc5b4\ub3c4 \ud55c \ubc88\ub9cc \uc2e4\ud589\ub418\ub294 \uc791\uc5c5\"\"\"\n    instance_id = os.getenv('INSTANCE_ID', 'unknown')\n    print(f\"\uc791\uc5c5 \uc2e4\ud589 (\uc778\uc2a4\ud134\uc2a4: {instance_id})\")\n    # \uc791\uc5c5 \uc218\ud589\n\n# replace_existing=True\ub85c \uc911\ubcf5 \ub4f1\ub85d \ubc29\uc9c0\nscheduler.add_job(\n    singleton_job,\n    'interval',\n    minutes=5,\n    id='singleton_job',  # \uace0\uc720 ID \uc9c0\uc815\n    replace_existing=True\n)\n\nscheduler.start()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\ub3d9\uc801-\uc791\uc5c5-\uad00\ub9ac",children:"\ub3d9\uc801 \uc791\uc5c5 \uad00\ub9ac"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime, timedelta\n\nclass DynamicScheduler:\n    """\ub3d9\uc801\uc73c\ub85c \uc791\uc5c5\uc744 \ucd94\uac00/\uc81c\uac70\ud560 \uc218 \uc788\ub294 \uc2a4\ucf00\uc904\ub7ec"""\n\n    def __init__(self):\n        self.scheduler = BackgroundScheduler()\n        self.scheduler.start()\n\n    def add_interval_job(self, func, interval_seconds, job_id=None):\n        """\uc778\ud130\ubc8c \uc791\uc5c5 \ucd94\uac00"""\n        return self.scheduler.add_job(\n            func,\n            \'interval\',\n            seconds=interval_seconds,\n            id=job_id,\n            replace_existing=True\n        )\n\n    def add_cron_job(self, func, cron_expr, job_id=None):\n        """\ud06c\ub860 \uc791\uc5c5 \ucd94\uac00"""\n        # cron_expr \uc608: {\'hour\': 9, \'minute\': 0}\n        return self.scheduler.add_job(\n            func,\n            \'cron\',\n            id=job_id,\n            replace_existing=True,\n            **cron_expr\n        )\n\n    def add_delayed_job(self, func, delay_seconds, job_id=None):\n        """\uc9c0\uc5f0 \uc2e4\ud589 \uc791\uc5c5 \ucd94\uac00"""\n        run_date = datetime.now() + timedelta(seconds=delay_seconds)\n        return self.scheduler.add_job(\n            func,\n            \'date\',\n            run_date=run_date,\n            id=job_id,\n            replace_existing=True\n        )\n\n    def remove_job(self, job_id):\n        """\uc791\uc5c5 \uc81c\uac70"""\n        try:\n            self.scheduler.remove_job(job_id)\n            return True\n        except Exception as e:\n            print(f"\uc791\uc5c5 \uc81c\uac70 \uc2e4\ud328: {e}")\n            return False\n\n    def pause_job(self, job_id):\n        """\uc791\uc5c5 \uc77c\uc2dc \uc815\uc9c0"""\n        try:\n            self.scheduler.pause_job(job_id)\n            return True\n        except Exception as e:\n            print(f"\uc791\uc5c5 \uc77c\uc2dc \uc815\uc9c0 \uc2e4\ud328: {e}")\n            return False\n\n    def resume_job(self, job_id):\n        """\uc791\uc5c5 \uc7ac\uac1c"""\n        try:\n            self.scheduler.resume_job(job_id)\n            return True\n        except Exception as e:\n            print(f"\uc791\uc5c5 \uc7ac\uac1c \uc2e4\ud328: {e}")\n            return False\n\n    def get_job(self, job_id):\n        """\uc791\uc5c5 \uc815\ubcf4 \uc870\ud68c"""\n        return self.scheduler.get_job(job_id)\n\n    def get_all_jobs(self):\n        """\ubaa8\ub4e0 \uc791\uc5c5 \uc870\ud68c"""\n        return self.scheduler.get_jobs()\n\n    def shutdown(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc"""\n        self.scheduler.shutdown()\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndynamic_scheduler = DynamicScheduler()\n\ndef task1():\n    print("\uc791\uc5c5 1 \uc2e4\ud589")\n\ndef task2():\n    print("\uc791\uc5c5 2 \uc2e4\ud589")\n\n# \uc791\uc5c5 \ucd94\uac00\ndynamic_scheduler.add_interval_job(task1, 10, job_id=\'task1\')\ndynamic_scheduler.add_cron_job(task2, {\'hour\': 14, \'minute\': 30}, job_id=\'task2\')\n\n# 5\ucd08 \ud6c4 \uc791\uc5c5 1 \uc77c\uc2dc \uc815\uc9c0\nimport time\ntime.sleep(5)\ndynamic_scheduler.pause_job(\'task1\')\n\n# 10\ucd08 \ud6c4 \uc791\uc5c5 1 \uc7ac\uac1c\ntime.sleep(10)\ndynamic_scheduler.resume_job(\'task1\')\n'})}),"\n",(0,l.jsx)(n.h2,{id:"asyncioscheduler",children:"AsyncIOScheduler"}),"\n",(0,l.jsx)(n.p,{children:"AsyncIOScheduler\ub294 asyncio\ub97c \uc0ac\uc6a9\ud558\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Python 3.7 \uc774\uc0c1\uc5d0\uc11c \uad8c\uc7a5\ub429\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-2",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom datetime import datetime\n\nasync def async_job():\n    """\ube44\ub3d9\uae30 \uc791\uc5c5"""\n    print(f"\ube44\ub3d9\uae30 \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n    await asyncio.sleep(1)\n    print("\uc791\uc5c5 \uc644\ub8cc")\n\nasync def main():\n    # \uc2a4\ucf00\uc904\ub7ec \uc0dd\uc131\n    scheduler = AsyncIOScheduler()\n\n    # \uc791\uc5c5 \ucd94\uac00\n    scheduler.add_job(async_job, \'interval\', seconds=5)\n\n    # \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\n    scheduler.start()\n\n    print("\uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589 \uc911...")\n\n    # \uc774\ubca4\ud2b8 \ub8e8\ud504 \uc720\uc9c0\n    try:\n        await asyncio.Event().wait()\n    except (KeyboardInterrupt, SystemExit):\n        scheduler.shutdown()\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n'})}),"\n",(0,l.jsx)(n.h3,{id:"fastapi\uc640-\ud1b5\ud569",children:"FastAPI\uc640 \ud1b5\ud569"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom contextlib import asynccontextmanager\nimport asyncio\nfrom datetime import datetime\n\n# \uc2a4\ucf00\uc904\ub7ec \uc778\uc2a4\ud134\uc2a4\nscheduler = AsyncIOScheduler()\n\nasync def scheduled_task():\n    """\ube44\ub3d9\uae30 \uc2a4\ucf00\uc904 \uc791\uc5c5"""\n    print(f"\uc2a4\ucf00\uc904 \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n    # \ube44\ub3d9\uae30 \uc791\uc5c5 \uc218\ud589\n    await asyncio.sleep(1)\n    print("\uc791\uc5c5 \uc644\ub8cc")\n\nasync def fetch_data():\n    """\uc678\ubd80 API \ub370\uc774\ud130 \uc218\uc9d1"""\n    print("\ub370\uc774\ud130 \uc218\uc9d1 \uc2dc\uc791")\n    # HTTP \uc694\uccad \ub4f1\n    await asyncio.sleep(2)\n    print("\ub370\uc774\ud130 \uc218\uc9d1 \uc644\ub8cc")\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    """\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc0dd\uba85\uc8fc\uae30 \uad00\ub9ac"""\n    # \uc2dc\uc791 \uc2dc\n    scheduler.add_job(scheduled_task, \'interval\', seconds=10, id=\'task1\')\n    scheduler.add_job(fetch_data, \'interval\', minutes=5, id=\'task2\')\n    scheduler.start()\n    print("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\ub428")\n\n    yield\n\n    # \uc885\ub8cc \uc2dc\n    scheduler.shutdown()\n    print("\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc\ub428")\n\napp = FastAPI(lifespan=lifespan)\n\n@app.get("/")\nasync def root():\n    return {"message": "AsyncIO \uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589 \uc911"}\n\n@app.get("/jobs")\nasync def get_jobs():\n    """\uc2e4\ud589 \uc911\uc778 \uc791\uc5c5 \ubaa9\ub85d"""\n    jobs = []\n    for job in scheduler.get_jobs():\n        jobs.append({\n            "id": job.id,\n            "name": job.name,\n            "next_run_time": str(job.next_run_time)\n        })\n    return {"jobs": jobs}\n\n@app.post("/jobs/{job_id}/pause")\nasync def pause_job(job_id: str):\n    """\uc791\uc5c5 \uc77c\uc2dc \uc815\uc9c0"""\n    try:\n        scheduler.pause_job(job_id)\n        return {"message": f"\uc791\uc5c5 {job_id} \uc77c\uc2dc \uc815\uc9c0\ub428"}\n    except Exception as e:\n        return {"error": str(e)}\n\n@app.post("/jobs/{job_id}/resume")\nasync def resume_job(job_id: str):\n    """\uc791\uc5c5 \uc7ac\uac1c"""\n    try:\n        scheduler.resume_job(job_id)\n        return {"message": f"\uc791\uc5c5 {job_id} \uc7ac\uac1c\ub428"}\n    except Exception as e:\n        return {"error": str(e)}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\ube44\ub3d9\uae30-http-\uc694\uccad-\uc2a4\ucf00\uc904\ub9c1",children:"\ube44\ub3d9\uae30 HTTP \uc694\uccad \uc2a4\ucf00\uc904\ub9c1"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom datetime import datetime\n\nclass AsyncAPIPoller:\n    """\ube44\ub3d9\uae30 API \ud3f4\ub9c1 \uc2a4\ucf00\uc904\ub7ec"""\n\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.session = None\n\n    async def init_session(self):\n        """HTTP \uc138\uc158 \ucd08\uae30\ud654"""\n        if self.session is None:\n            self.session = aiohttp.ClientSession()\n\n    async def close_session(self):\n        """HTTP \uc138\uc158 \uc885\ub8cc"""\n        if self.session:\n            await self.session.close()\n\n    async def fetch_api_data(self, url):\n        """API \ub370\uc774\ud130 \uc218\uc9d1"""\n        await self.init_session()\n\n        try:\n            async with self.session.get(url) as response:\n                if response.status == 200:\n                    data = await response.json()\n                    print(f"[{datetime.now()}] \ub370\uc774\ud130 \uc218\uc9d1 \uc131\uacf5: {len(data)} \ud56d\ubaa9")\n                    return data\n                else:\n                    print(f"API \uc624\ub958: {response.status}")\n        except Exception as e:\n            print(f"\uc694\uccad \uc2e4\ud328: {e}")\n\n    async def poll_multiple_apis(self):\n        """\uc5ec\ub7ec API \ub3d9\uc2dc \ud3f4\ub9c1"""\n        urls = [\n            \'https://api.example.com/data1\',\n            \'https://api.example.com/data2\',\n            \'https://api.example.com/data3\'\n        ]\n\n        tasks = [self.fetch_api_data(url) for url in urls]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        for i, result in enumerate(results):\n            if isinstance(result, Exception):\n                print(f"URL {urls[i]} \ucc98\ub9ac \uc911 \uc624\ub958: {result}")\n\n    def start(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791"""\n        # 5\ubd84\ub9c8\ub2e4 API \ud3f4\ub9c1\n        self.scheduler.add_job(\n            self.poll_multiple_apis,\n            \'interval\',\n            minutes=5,\n            id=\'api_polling\'\n        )\n\n        self.scheduler.start()\n\n    def stop(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc815\uc9c0"""\n        self.scheduler.shutdown()\n\nasync def main():\n    poller = AsyncAPIPoller()\n    poller.start()\n\n    print("API \ud3f4\ub9c1 \uc2dc\uc791...")\n\n    try:\n        await asyncio.Event().wait()\n    except KeyboardInterrupt:\n        poller.stop()\n        await poller.close_session()\n        print("\ud3f4\ub9c1 \uc885\ub8cc")\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n'})}),"\n",(0,l.jsx)(n.h2,{id:"\uc2a4\ucf00\uc904\ub7ec-\uc124\uc815",children:"\uc2a4\ucf00\uc904\ub7ec \uc124\uc815"}),"\n",(0,l.jsx)(n.p,{children:"\ubaa8\ub4e0 \uc2a4\ucf00\uc904\ub7ec\ub294 \uacf5\ud1b5\uc801\uc778 \uc124\uc815 \uc635\uc158\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.h3,{id:"job-store-\uc124\uc815",children:"Job Store \uc124\uc815"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.memory import MemoryJobStore\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.jobstores.mongodb import MongoDBJobStore\n\njobstores = {\n    'default': MemoryJobStore(),\n    'postgres': SQLAlchemyJobStore(url='postgresql://user:pass@localhost/db'),\n    'mongo': MongoDBJobStore(client=pymongo.MongoClient('localhost'))\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\n# \ud2b9\uc815 job store\uc5d0 \uc791\uc5c5 \ucd94\uac00\nscheduler.add_job(my_job, 'interval', seconds=5, jobstore='postgres')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"executor-\uc124\uc815",children:"Executor \uc124\uc815"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor\n\nexecutors = {\n    'default': ThreadPoolExecutor(max_workers=20),\n    'processpool': ProcessPoolExecutor(max_workers=5)\n}\n\nscheduler = BackgroundScheduler(executors=executors)\n\n# CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\uc740 \ud504\ub85c\uc138\uc2a4 \ud480\uc5d0\uc11c \uc2e4\ud589\nscheduler.add_job(cpu_intensive_job, 'interval', minutes=5, executor='processpool')\n\n# I/O \uc791\uc5c5\uc740 \uc2a4\ub808\ub4dc \ud480\uc5d0\uc11c \uc2e4\ud589\nscheduler.add_job(io_job, 'interval', seconds=30, executor='default')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\uc804\uccb4-\uc124\uc815-\uc608\uc81c",children:"\uc804\uccb4 \uc124\uc815 \uc608\uc81c"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor\nfrom pytz import timezone\n\n# Job Stores \uc124\uc815\njobstores = {\n    'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite'),\n}\n\n# Executors \uc124\uc815\nexecutors = {\n    'default': ThreadPoolExecutor(max_workers=20),\n    'processpool': ProcessPoolExecutor(max_workers=5)\n}\n\n# Job \uae30\ubcf8\uac12 \uc124\uc815\njob_defaults = {\n    'coalesce': False,  # \ub204\uc801\ub41c job\uc744 \ud558\ub098\ub85c \ud569\uce58\uc9c0 \uc54a\uc74c\n    'max_instances': 3,  # \ucd5c\ub300 \ub3d9\uc2dc \uc2e4\ud589 \uc778\uc2a4\ud134\uc2a4 \uc218\n    'misfire_grace_time': 30,  # job\uc774 \ub2a6\uac8c \uc2e4\ud589\ub420 \uc218 \uc788\ub294 \ucd5c\ub300 \uc2dc\uac04(\ucd08)\n    'replace_existing': True  # \ub3d9\uc77c ID\uc758 job \uad50\uccb4\n}\n\n# \uc2a4\ucf00\uc904\ub7ec \uc0dd\uc131\nscheduler = BackgroundScheduler(\n    jobstores=jobstores,\n    executors=executors,\n    job_defaults=job_defaults,\n    timezone=timezone('Asia/Seoul')\n)\n\n# \ub7f0\ud0c0\uc784 \uc124\uc815 \ubcc0\uacbd\nscheduler.configure(job_defaults={'max_instances': 5})\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\uc2dc\uc791\uacfc-\uc885\ub8cc",children:"\uc2dc\uc791\uacfc \uc885\ub8cc"}),"\n",(0,l.jsx)(n.p,{children:"\uc2a4\ucf00\uc904\ub7ec\uc758 \uc0dd\uba85\uc8fc\uae30\ub97c \uc801\uc808\ud788 \uad00\ub9ac\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.h3,{id:"\uae30\ubcf8-\uc2dc\uc791\uc885\ub8cc",children:"\uae30\ubcf8 \uc2dc\uc791/\uc885\ub8cc"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef my_job():\n    print("\uc791\uc5c5 \uc2e4\ud589")\n\nscheduler.add_job(my_job, \'interval\', seconds=5)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\nscheduler.start()\nprint("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\ub428")\n\n# \uc791\uc5c5 \uc218\ud589\ntime.sleep(30)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc\nscheduler.shutdown()\nprint("\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc\ub428")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\uc885\ub8cc-\uc635\uc158",children:"\uc885\ub8cc \uc635\uc158"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \uc791\uc5c5\uc774 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \ub300\uae30\nscheduler.shutdown(wait=True)\n\n# \uc989\uc2dc \uc885\ub8cc (\uc2e4\ud589 \uc911\uc778 \uc791\uc5c5 \uc911\ub2e8)\nscheduler.shutdown(wait=False)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800-\uc0ac\uc6a9",children:"\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from contextlib import contextmanager\nfrom apscheduler.schedulers.background import BackgroundScheduler\n\n@contextmanager\ndef scheduler_context():\n    """\uc2a4\ucf00\uc904\ub7ec \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800"""\n    scheduler = BackgroundScheduler()\n    try:\n        scheduler.start()\n        yield scheduler\n    finally:\n        scheduler.shutdown(wait=True)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nwith scheduler_context() as scheduler:\n    scheduler.add_job(my_job, \'interval\', seconds=5)\n    # \uc791\uc5c5 \uc218\ud589\n    import time\n    time.sleep(30)\n# \ube14\ub85d\uc744 \ubc97\uc5b4\ub098\uba74 \uc790\ub3d9\uc73c\ub85c \uc885\ub8cc\ub428\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\uc6b0\uc544\ud55c-\uc885\ub8cc-graceful-shutdown",children:"\uc6b0\uc544\ud55c \uc885\ub8cc (Graceful Shutdown)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import signal\nimport sys\nfrom apscheduler.schedulers.background import BackgroundScheduler\nimport time\n\nclass GracefulScheduler:\n    """\uc6b0\uc544\ud55c \uc885\ub8cc\ub97c \uc9c0\uc6d0\ud558\ub294 \uc2a4\ucf00\uc904\ub7ec"""\n\n    def __init__(self):\n        self.scheduler = BackgroundScheduler()\n        self.running = False\n\n    def setup_signal_handlers(self):\n        """\uc2dc\uadf8\ub110 \ud578\ub4e4\ub7ec \uc124\uc815"""\n        signal.signal(signal.SIGINT, self.signal_handler)\n        signal.signal(signal.SIGTERM, self.signal_handler)\n\n    def signal_handler(self, signum, frame):\n        """\uc2dc\uadf8\ub110 \uc218\uc2e0 \uc2dc \ucc98\ub9ac"""\n        print(f"\\n\uc2dc\uadf8\ub110 {signum} \uc218\uc2e0, \uc885\ub8cc \uc911...")\n        self.stop()\n        sys.exit(0)\n\n    def start(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791"""\n        self.setup_signal_handlers()\n        self.scheduler.start()\n        self.running = True\n        print("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\ub428")\n\n    def stop(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc"""\n        if self.running:\n            print("\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc \uc911...")\n            self.scheduler.shutdown(wait=True)\n            self.running = False\n            print("\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc \uc644\ub8cc")\n\n    def add_job(self, *args, **kwargs):\n        """\uc791\uc5c5 \ucd94\uac00"""\n        return self.scheduler.add_job(*args, **kwargs)\n\n    def run_forever(self):\n        """\ubb34\ud55c \uc2e4\ud589"""\n        try:\n            while self.running:\n                time.sleep(1)\n        except (KeyboardInterrupt, SystemExit):\n            self.stop()\n\n# \uc0ac\uc6a9 \uc608\uc81c\ngraceful_scheduler = GracefulScheduler()\n\ndef task():\n    print("\uc791\uc5c5 \uc2e4\ud589")\n\ngraceful_scheduler.add_job(task, \'interval\', seconds=5)\ngraceful_scheduler.start()\ngraceful_scheduler.run_forever()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\uc0c1\ud0dc-\ud655\uc778",children:"\uc0c1\ud0dc \ud655\uc778"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.schedulers import SchedulerNotRunningError\n\nscheduler = BackgroundScheduler()\n\n# \uc2a4\ucf00\uc904\ub7ec \uc0c1\ud0dc \ud655\uc778\nprint(f"\uc2e4\ud589 \uc911: {scheduler.running}")\nprint(f"\uc0c1\ud0dc: {scheduler.state}")\n\n# \uc548\uc804\ud55c \uc791\uc5c5 \ucd94\uac00\ndef safe_add_job(scheduler, func, *args, **kwargs):\n    """\uc2a4\ucf00\uc904\ub7ec \uc0c1\ud0dc\ub97c \ud655\uc778\ud558\uace0 \uc791\uc5c5 \ucd94\uac00"""\n    if not scheduler.running:\n        scheduler.start()\n\n    try:\n        return scheduler.add_job(func, *args, **kwargs)\n    except Exception as e:\n        print(f"\uc791\uc5c5 \ucd94\uac00 \uc2e4\ud328: {e}")\n        return None\n\n# \uc548\uc804\ud55c \uc885\ub8cc\ndef safe_shutdown(scheduler):\n    """\uc2a4\ucf00\uc904\ub7ec\ub97c \uc548\uc804\ud558\uac8c \uc885\ub8cc"""\n    if scheduler.running:\n        try:\n            scheduler.shutdown(wait=True)\n            print("\uc2a4\ucf00\uc904\ub7ec \uc815\uc0c1 \uc885\ub8cc")\n        except SchedulerNotRunningError:\n            print("\uc2a4\ucf00\uc904\ub7ec\uac00 \uc774\ubbf8 \uc885\ub8cc\ub428")\n    else:\n        print("\uc2a4\ucf00\uc904\ub7ec\uac00 \uc2e4\ud589 \uc911\uc774 \uc544\ub2d8")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\uc7ac\uc2dc\uc791-\uae30\ub2a5",children:"\uc7ac\uc2dc\uc791 \uae30\ub2a5"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nimport time\n\nclass RestartableScheduler:\n    """\uc7ac\uc2dc\uc791 \uac00\ub2a5\ud55c \uc2a4\ucf00\uc904\ub7ec"""\n\n    def __init__(self, **kwargs):\n        self.config = kwargs\n        self.scheduler = None\n        self.jobs = []\n\n    def start(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791"""\n        if self.scheduler and self.scheduler.running:\n            print("\uc2a4\ucf00\uc904\ub7ec\uac00 \uc774\ubbf8 \uc2e4\ud589 \uc911\uc785\ub2c8\ub2e4")\n            return\n\n        self.scheduler = BackgroundScheduler(**self.config)\n\n        # \uc800\uc7a5\ub41c \uc791\uc5c5 \uc7ac\ub4f1\ub85d\n        for job_config in self.jobs:\n            self.scheduler.add_job(**job_config)\n\n        self.scheduler.start()\n        print("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\ub428")\n\n    def stop(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc815\uc9c0"""\n        if self.scheduler and self.scheduler.running:\n            self.scheduler.shutdown(wait=True)\n            print("\uc2a4\ucf00\uc904\ub7ec \uc815\uc9c0\ub428")\n\n    def restart(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc7ac\uc2dc\uc791"""\n        print("\uc2a4\ucf00\uc904\ub7ec \uc7ac\uc2dc\uc791 \uc911...")\n        self.stop()\n        time.sleep(1)\n        self.start()\n        print("\uc2a4\ucf00\uc904\ub7ec \uc7ac\uc2dc\uc791 \uc644\ub8cc")\n\n    def add_job(self, func, trigger, **kwargs):\n        """\uc791\uc5c5 \ucd94\uac00 \ubc0f \uc124\uc815 \uc800\uc7a5"""\n        job_config = {\n            \'func\': func,\n            \'trigger\': trigger,\n            **kwargs\n        }\n        self.jobs.append(job_config)\n\n        if self.scheduler and self.scheduler.running:\n            return self.scheduler.add_job(**job_config)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nrestartable = RestartableScheduler()\n\ndef my_task():\n    print("\uc791\uc5c5 \uc2e4\ud589")\n\nrestartable.add_job(my_task, \'interval\', seconds=5, id=\'task1\')\nrestartable.start()\n\n# 10\ucd08 \ud6c4 \uc7ac\uc2dc\uc791\ntime.sleep(10)\nrestartable.restart()\n'})}),"\n",(0,l.jsx)(n.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\uc758 \uc8fc\uc694 \uc2a4\ucf00\uc904\ub7ec \ud0c0\uc785\uacfc \uc124\uc815, \uadf8\ub9ac\uace0 \uc0dd\uba85\uc8fc\uae30 \uad00\ub9ac \ubc29\ubc95\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \uc791\uc5c5 \uc2e4\ud589 \uc2dc\uc810\uc744 \uc81c\uc5b4\ud558\ub294 \ud2b8\ub9ac\uac70\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>o});var s=r(6540);const l={},t=s.createContext(l);function d(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);