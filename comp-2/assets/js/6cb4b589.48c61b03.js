"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7978],{2241:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"pandas/advanced","title":"5. \uace0\uae09 \uae30\ub2a5","description":"Pandas\uc758 \uace0\uae09 \uae30\ub2a5\uc744 \ud65c\uc6a9\ud558\uba74 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ubd84\uc11d\uacfc \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","source":"@site/docs/pandas/advanced.md","sourceDirName":"pandas","slug":"/pandas/advanced","permalink":"/docs/pandas/advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pandas/advanced.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"pandasSidebar","previous":{"title":"4. \ub370\uc774\ud130 \uc815\uc81c","permalink":"/docs/pandas/data-cleaning"},"next":{"title":"6. \uc2dc\uac01\ud654","permalink":"/docs/pandas/visualization"}}');var a=r(4848),d=r(8453);const i={sidebar_position:5},s="5. \uace0\uae09 \uae30\ub2a5",o={},l=[{value:"5.1 \ub370\uc774\ud130 \uacb0\ud569 (Merge, Join, Concat)",id:"51-\ub370\uc774\ud130-\uacb0\ud569-merge-join-concat",level:2},{value:"5.1.1 Concat - \ub370\uc774\ud130 \uc5f0\uacb0",id:"511-concat---\ub370\uc774\ud130-\uc5f0\uacb0",level:3},{value:"5.1.2 \uacc4\uce35\uc801 \uc778\ub371\uc2a4\ub85c \uc5f0\uacb0",id:"512-\uacc4\uce35\uc801-\uc778\ub371\uc2a4\ub85c-\uc5f0\uacb0",level:3},{value:"5.1.3 Merge - SQL \uc2a4\ud0c0\uc77c \uc870\uc778",id:"513-merge---sql-\uc2a4\ud0c0\uc77c-\uc870\uc778",level:3},{value:"5.1.4 \uc5ec\ub7ec \ud0a4\ub85c \uc870\uc778",id:"514-\uc5ec\ub7ec-\ud0a4\ub85c-\uc870\uc778",level:3},{value:"5.1.5 Join - \uc778\ub371\uc2a4 \uae30\ubc18 \uc870\uc778",id:"515-join---\uc778\ub371\uc2a4-\uae30\ubc18-\uc870\uc778",level:3},{value:"5.2 MultiIndex (\uacc4\uce35\uc801 \uc778\ub371\uc2a4)",id:"52-multiindex-\uacc4\uce35\uc801-\uc778\ub371\uc2a4",level:2},{value:"5.2.1 MultiIndex \uc0dd\uc131",id:"521-multiindex-\uc0dd\uc131",level:3},{value:"5.2.2 MultiIndex \ub370\uc774\ud130 \uc811\uadfc",id:"522-multiindex-\ub370\uc774\ud130-\uc811\uadfc",level:3},{value:"5.2.3 MultiIndex \uc5f4",id:"523-multiindex-\uc5f4",level:3},{value:"5.2.4 \uc2a4\ud0dd/\uc5b8\uc2a4\ud0dd",id:"524-\uc2a4\ud0dd\uc5b8\uc2a4\ud0dd",level:3},{value:"5.2.5 \ub808\ubca8 \uc870\uc791",id:"525-\ub808\ubca8-\uc870\uc791",level:3},{value:"5.3 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130",id:"53-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130",level:2},{value:"5.3.1 \ub0a0\uc9dc/\uc2dc\uac04 \uc0dd\uc131 \ubc0f \ubcc0\ud658",id:"531-\ub0a0\uc9dc\uc2dc\uac04-\uc0dd\uc131-\ubc0f-\ubcc0\ud658",level:3},{value:"5.3.2 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \uc778\ub371\uc2f1",id:"532-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130-\uc778\ub371\uc2f1",level:3},{value:"5.3.3 Resample - \uc2dc\uacc4\uc5f4 \uc7ac\uc0d8\ud50c\ub9c1",id:"533-resample---\uc2dc\uacc4\uc5f4-\uc7ac\uc0d8\ud50c\ub9c1",level:3},{value:"5.3.4 \uc2dc\uac04\ub300(Timezone) \ucc98\ub9ac",id:"534-\uc2dc\uac04\ub300timezone-\ucc98\ub9ac",level:3},{value:"5.3.5 Period - \uae30\uac04 \ub370\uc774\ud130",id:"535-period---\uae30\uac04-\ub370\uc774\ud130",level:3},{value:"5.4 Window \ud568\uc218",id:"54-window-\ud568\uc218",level:2},{value:"5.4.1 Rolling - \uc774\ub3d9 \ucc3d",id:"541-rolling---\uc774\ub3d9-\ucc3d",level:3},{value:"5.4.2 Expanding - \ud655\uc7a5 \ucc3d",id:"542-expanding---\ud655\uc7a5-\ucc3d",level:3},{value:"5.4.3 Exponentially Weighted - \uc9c0\uc218 \uac00\uc911 \uc774\ub3d9 \ud3c9\uade0",id:"543-exponentially-weighted---\uc9c0\uc218-\uac00\uc911-\uc774\ub3d9-\ud3c9\uade0",level:3},{value:"5.4.4 Window \ud568\uc218 \uc751\uc6a9",id:"544-window-\ud568\uc218-\uc751\uc6a9",level:3},{value:"5.4.5 \uadf8\ub8f9\ubcc4 Window \ud568\uc218",id:"545-\uadf8\ub8f9\ubcc4-window-\ud568\uc218",level:3},{value:"5.5 \ud06c\ub85c\uc2a4\ud0ed (Crosstab)",id:"55-\ud06c\ub85c\uc2a4\ud0ed-crosstab",level:2},{value:"5.5.1 \uae30\ubcf8 \ud06c\ub85c\uc2a4\ud0ed",id:"551-\uae30\ubcf8-\ud06c\ub85c\uc2a4\ud0ed",level:3},{value:"5.5.2 \ub2e4\uc911 \uc778\ub371\uc2a4 \ud06c\ub85c\uc2a4\ud0ed",id:"552-\ub2e4\uc911-\uc778\ub371\uc2a4-\ud06c\ub85c\uc2a4\ud0ed",level:3},{value:"5.5.3 \uc9d1\uacc4 \ud568\uc218\uc640 \ud568\uaed8 \uc0ac\uc6a9",id:"553-\uc9d1\uacc4-\ud568\uc218\uc640-\ud568\uaed8-\uc0ac\uc6a9",level:3},{value:"5.6 \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654",id:"56-\uba54\ubaa8\ub9ac-\ucd5c\uc801\ud654",level:2},{value:"5.6.1 \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654",id:"561-\ub370\uc774\ud130-\ud0c0\uc785-\ucd5c\uc801\ud654",level:3},{value:"5.6.2 \ucd5c\uc801 \ub370\uc774\ud130 \ud0c0\uc785 \uc790\ub3d9 \uc120\ud0dd",id:"562-\ucd5c\uc801-\ub370\uc774\ud130-\ud0c0\uc785-\uc790\ub3d9-\uc120\ud0dd",level:3},{value:"5.6.3 \uccad\ud06c \ub2e8\uc704\ub85c \ub370\uc774\ud130 \ucc98\ub9ac",id:"563-\uccad\ud06c-\ub2e8\uc704\ub85c-\ub370\uc774\ud130-\ucc98\ub9ac",level:3},{value:"5.6.4 \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \uc800\uc7a5",id:"564-\ud6a8\uc728\uc801\uc778-\ub370\uc774\ud130-\uc800\uc7a5",level:3},{value:"5.7 \uc131\ub2a5 \ucd5c\uc801\ud654",id:"57-\uc131\ub2a5-\ucd5c\uc801\ud654",level:2},{value:"5.7.1 \ubca1\ud130\ud654 \uc5f0\uc0b0",id:"571-\ubca1\ud130\ud654-\uc5f0\uc0b0",level:3},{value:"5.7.2 NumPy \ud568\uc218 \ud65c\uc6a9",id:"572-numpy-\ud568\uc218-\ud65c\uc6a9",level:3},{value:"5.7.3 eval\uacfc query \uc0ac\uc6a9",id:"573-eval\uacfc-query-\uc0ac\uc6a9",level:3},{value:"5.7.4 \uc778\ub371\uc2f1 \ucd5c\uc801\ud654",id:"574-\uc778\ub371\uc2f1-\ucd5c\uc801\ud654",level:3},{value:"5.8 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc9d1\uacc4 \ud568\uc218",id:"58-\uc0ac\uc6a9\uc790-\uc815\uc758-\uc9d1\uacc4-\ud568\uc218",level:2},{value:"5.8.1 \uae30\ubcf8 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud568\uc218",id:"581-\uae30\ubcf8-\uc0ac\uc6a9\uc790-\uc815\uc758-\ud568\uc218",level:3},{value:"5.8.2 Named Aggregations",id:"582-named-aggregations",level:3},{value:"5.8.3 \ubcf5\uc7a1\ud55c \uc9d1\uacc4 \ud568\uc218",id:"583-\ubcf5\uc7a1\ud55c-\uc9d1\uacc4-\ud568\uc218",level:3},{value:"5.8.4 Transform vs Agg",id:"584-transform-vs-agg",level:3},{value:"5.8.5 Apply\ub97c \uc0ac\uc6a9\ud55c \ubcf5\uc7a1\ud55c \uc5f0\uc0b0",id:"585-apply\ub97c-\uc0ac\uc6a9\ud55c-\ubcf5\uc7a1\ud55c-\uc5f0\uc0b0",level:3},{value:"5.9 \uc2e4\uc804 \uc608\uc81c",id:"59-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"5.9.1 \uace0\uac1d \uad6c\ub9e4 \ud328\ud134 \ubd84\uc11d",id:"591-\uace0\uac1d-\uad6c\ub9e4-\ud328\ud134-\ubd84\uc11d",level:3},{value:"5.9.2 \uc2dc\uacc4\uc5f4 \uc774\uc0c1 \ud0d0\uc9c0",id:"592-\uc2dc\uacc4\uc5f4-\uc774\uc0c1-\ud0d0\uc9c0",level:3},{value:"5.9.3 \ub2e4\ucc28\uc6d0 \ub370\uc774\ud130 \ud53c\ubc97 \ubc0f \ubd84\uc11d",id:"593-\ub2e4\ucc28\uc6d0-\ub370\uc774\ud130-\ud53c\ubc97-\ubc0f-\ubd84\uc11d",level:3},{value:"5.9.4 \uace0\uae09 \uadf8\ub8f9\ubcc4 \ubcc0\ud658",id:"594-\uace0\uae09-\uadf8\ub8f9\ubcc4-\ubcc0\ud658",level:3},{value:"\uc5f0\uc2b5 \ubb38\uc81c",id:"\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \ubcf5\ud569 \ub370\uc774\ud130 \uacb0\ud569",id:"\ubb38\uc81c-1-\ubcf5\ud569-\ub370\uc774\ud130-\uacb0\ud569",level:3},{value:"\ubb38\uc81c 2: MultiIndex \ud65c\uc6a9",id:"\ubb38\uc81c-2-multiindex-\ud65c\uc6a9",level:3},{value:"\ubb38\uc81c 3: \uc2dc\uacc4\uc5f4 \ubd84\uc11d",id:"\ubb38\uc81c-3-\uc2dc\uacc4\uc5f4-\ubd84\uc11d",level:3},{value:"\ubb38\uc81c 4: \uc131\ub2a5 \ucd5c\uc801\ud654",id:"\ubb38\uc81c-4-\uc131\ub2a5-\ucd5c\uc801\ud654",level:3},{value:"\ubb38\uc81c 5: \uc885\ud569 \ubd84\uc11d \ud504\ub85c\uc81d\ud2b8",id:"\ubb38\uc81c-5-\uc885\ud569-\ubd84\uc11d-\ud504\ub85c\uc81d\ud2b8",level:3}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...n.components},{Details:r}=e;return r||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"5-\uace0\uae09-\uae30\ub2a5",children:"5. \uace0\uae09 \uae30\ub2a5"})}),"\n",(0,a.jsx)(e.p,{children:"Pandas\uc758 \uace0\uae09 \uae30\ub2a5\uc744 \ud65c\uc6a9\ud558\uba74 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ubd84\uc11d\uacfc \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,a.jsx)(e.h2,{id:"51-\ub370\uc774\ud130-\uacb0\ud569-merge-join-concat",children:"5.1 \ub370\uc774\ud130 \uacb0\ud569 (Merge, Join, Concat)"}),"\n",(0,a.jsx)(e.h3,{id:"511-concat---\ub370\uc774\ud130-\uc5f0\uacb0",children:"5.1.1 Concat - \ub370\uc774\ud130 \uc5f0\uacb0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\n\n# \ud589 \ubc29\ud5a5 \uc5f0\uacb0\ndf1 = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2'],\n    'B': ['B0', 'B1', 'B2']\n})\n\ndf2 = pd.DataFrame({\n    'A': ['A3', 'A4', 'A5'],\n    'B': ['B3', 'B4', 'B5']\n})\n\n# \uae30\ubcf8 \uc5f0\uacb0 (\ud589 \ubc29\ud5a5)\nresult = pd.concat([df1, df2])\nprint(result)\n#     A   B\n# 0  A0  B0\n# 1  A1  B1\n# 2  A2  B2\n# 0  A3  B3\n# 1  A4  B4\n# 2  A5  B5\n\n# \uc778\ub371\uc2a4 \uc7ac\uc124\uc815\nresult = pd.concat([df1, df2], ignore_index=True)\nprint(result)\n\n# \uc5f4 \ubc29\ud5a5 \uc5f0\uacb0\ndf3 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2'],\n    'D': ['D0', 'D1', 'D2']\n})\n\nresult = pd.concat([df1, df3], axis=1)\nprint(result)\n#     A   B   C   D\n# 0  A0  B0  C0  D0\n# 1  A1  B1  C1  D1\n# 2  A2  B2  C2  D2\n"})}),"\n",(0,a.jsx)(e.h3,{id:"512-\uacc4\uce35\uc801-\uc778\ub371\uc2a4\ub85c-\uc5f0\uacb0",children:"5.1.2 \uacc4\uce35\uc801 \uc778\ub371\uc2a4\ub85c \uc5f0\uacb0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uacc4\uce35\uc801 \uc778\ub371\uc2a4 \uc0dd\uc131\nresult = pd.concat([df1, df2], keys=['first', 'second'])\nprint(result)\n#            A   B\n# first  0  A0  B0\n#        1  A1  B1\n#        2  A2  B2\n# second 0  A3  B3\n#        1  A4  B4\n#        2  A5  B5\n\n# \ud2b9\uc815 \ub808\ubca8\uc758 \ub370\uc774\ud130 \ucd94\ucd9c\nprint(result.loc['first'])\n"})}),"\n",(0,a.jsx)(e.h3,{id:"513-merge---sql-\uc2a4\ud0c0\uc77c-\uc870\uc778",children:"5.1.3 Merge - SQL \uc2a4\ud0c0\uc77c \uc870\uc778"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc0d8\ud50c \ub370\uc774\ud130\nleft = pd.DataFrame({\n    'key': ['K0', 'K1', 'K2', 'K3'],\n    'A': ['A0', 'A1', 'A2', 'A3'],\n    'B': ['B0', 'B1', 'B2', 'B3']\n})\n\nright = pd.DataFrame({\n    'key': ['K0', 'K1', 'K2', 'K4'],\n    'C': ['C0', 'C1', 'C2', 'C4'],\n    'D': ['D0', 'D1', 'D2', 'D4']\n})\n\n# Inner Join (\uae30\ubcf8\uac12)\nresult = pd.merge(left, right, on='key')\nprint(result)\n#   key   A   B   C   D\n# 0  K0  A0  B0  C0  D0\n# 1  K1  A1  B1  C1  D1\n# 2  K2  A2  B2  C2  D2\n\n# Left Join\nresult = pd.merge(left, right, on='key', how='left')\nprint(result)\n\n# Right Join\nresult = pd.merge(left, right, on='key', how='right')\nprint(result)\n\n# Outer Join\nresult = pd.merge(left, right, on='key', how='outer')\nprint(result)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"514-\uc5ec\ub7ec-\ud0a4\ub85c-\uc870\uc778",children:"5.1.4 \uc5ec\ub7ec \ud0a4\ub85c \uc870\uc778"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ubcf5\ud569 \ud0a4 \uc870\uc778\nleft = pd.DataFrame({\n    'key1': ['K0', 'K0', 'K1', 'K2'],\n    'key2': ['K0', 'K1', 'K0', 'K1'],\n    'A': ['A0', 'A1', 'A2', 'A3']\n})\n\nright = pd.DataFrame({\n    'key1': ['K0', 'K1', 'K1', 'K2'],\n    'key2': ['K0', 'K0', 'K0', 'K0'],\n    'B': ['B0', 'B1', 'B2', 'B3']\n})\n\nresult = pd.merge(left, right, on=['key1', 'key2'])\nprint(result)\n\n# \ub2e4\ub978 \uc5f4 \uc774\ub984\uc73c\ub85c \uc870\uc778\nleft = pd.DataFrame({\n    'left_key': ['K0', 'K1', 'K2'],\n    'value': ['V0', 'V1', 'V2']\n})\n\nright = pd.DataFrame({\n    'right_key': ['K0', 'K1', 'K2'],\n    'value': ['V3', 'V4', 'V5']\n})\n\nresult = pd.merge(left, right, left_on='left_key', right_on='right_key')\nprint(result)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"515-join---\uc778\ub371\uc2a4-\uae30\ubc18-\uc870\uc778",children:"5.1.5 Join - \uc778\ub371\uc2a4 \uae30\ubc18 \uc870\uc778"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc778\ub371\uc2a4\ub85c \uc870\uc778\nleft = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2'],\n    'B': ['B0', 'B1', 'B2']\n}, index=['K0', 'K1', 'K2'])\n\nright = pd.DataFrame({\n    'C': ['C0', 'C2', 'C3'],\n    'D': ['D0', 'D2', 'D3']\n}, index=['K0', 'K2', 'K3'])\n\nresult = left.join(right)\nprint(result)\n\n# how \ud30c\ub77c\ubbf8\ud130 \uc9c0\uc815\nresult = left.join(right, how='outer')\nprint(result)\n\n# \uc5ec\ub7ec DataFrame \uc870\uc778\nanother = pd.DataFrame({\n    'E': ['E0', 'E1', 'E2']\n}, index=['K0', 'K1', 'K2'])\n\nresult = left.join([right, another], how='outer')\nprint(result)\n"})}),"\n",(0,a.jsx)(e.admonition,{title:"Merge vs Join",type:"tip",children:(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"merge"}),": \uc5f4 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc870\uc778 (SQL JOIN\uacfc \uc720\uc0ac)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"join"}),": \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc870\uc778 (\uae30\ubcf8\uc801\uc73c\ub85c left join)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"concat"}),": \ub2e8\uc21c \uc5f0\uacb0 (UNION\uacfc \uc720\uc0ac)"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"52-multiindex-\uacc4\uce35\uc801-\uc778\ub371\uc2a4",children:"5.2 MultiIndex (\uacc4\uce35\uc801 \uc778\ub371\uc2a4)"}),"\n",(0,a.jsx)(e.h3,{id:"521-multiindex-\uc0dd\uc131",children:"5.2.1 MultiIndex \uc0dd\uc131"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ud29c\ud50c \ub9ac\uc2a4\ud2b8\ub85c \uc0dd\uc131\narrays = [\n    ['A', 'A', 'B', 'B'],\n    [1, 2, 1, 2]\n]\nindex = pd.MultiIndex.from_arrays(arrays, names=['letter', 'number'])\ndf = pd.DataFrame({'value': [10, 20, 30, 40]}, index=index)\nprint(df)\n#                value\n# letter number\n# A      1          10\n#        2          20\n# B      1          30\n#        2          40\n\n# from_tuples\ub85c \uc0dd\uc131\ntuples = [('A', 1), ('A', 2), ('B', 1), ('B', 2)]\nindex = pd.MultiIndex.from_tuples(tuples, names=['letter', 'number'])\ndf = pd.DataFrame({'value': [10, 20, 30, 40]}, index=index)\n\n# from_product\ub85c \uc0dd\uc131 (\uce74\ub974\ud14c\uc2dc\uc548 \uacf1)\nindex = pd.MultiIndex.from_product(\n    [['A', 'B', 'C'], [1, 2]],\n    names=['letter', 'number']\n)\ndf = pd.DataFrame({'value': np.random.randn(6)}, index=index)\nprint(df)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"522-multiindex-\ub370\uc774\ud130-\uc811\uadfc",children:"5.2.2 MultiIndex \ub370\uc774\ud130 \uc811\uadfc"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc0d8\ud50c \ub370\uc774\ud130\nnp.random.seed(42)\nindex = pd.MultiIndex.from_product(\n    [['\uc11c\uc6b8', '\ubd80\uc0b0', '\ub300\uad6c'], ['2023', '2024']],\n    names=['\ub3c4\uc2dc', '\uc5f0\ub3c4']\n)\ndf = pd.DataFrame({\n    '\uc778\uad6c': np.random.randint(100, 1000, 6),\n    'GDP': np.random.randint(1000, 5000, 6)\n}, index=index)\nprint(df)\n\n# \uccab \ubc88\uc9f8 \ub808\ubca8 \uc778\ub371\uc2f1\nprint(df.loc['\uc11c\uc6b8'])\n\n# \ub450 \ub808\ubca8 \ubaa8\ub450 \uc9c0\uc815\nprint(df.loc[('\uc11c\uc6b8', '2023')])\n\n# \uc2ac\ub77c\uc774\uc2f1\nprint(df.loc[('\uc11c\uc6b8', '2023'):('\ubd80\uc0b0', '2024')])\n\n# xs \uba54\uc11c\ub4dc \uc0ac\uc6a9\nprint(df.xs('2023', level='\uc5f0\ub3c4'))\nprint(df.xs('\uc11c\uc6b8', level='\ub3c4\uc2dc'))\n\n# \ud2b9\uc815 \ub808\ubca8\uc758 \ubaa8\ub4e0 \uac12\nprint(df.loc[pd.IndexSlice[:, '2023'], :])\n"})}),"\n",(0,a.jsx)(e.h3,{id:"523-multiindex-\uc5f4",children:"5.2.3 MultiIndex \uc5f4"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc5f4\uc5d0 MultiIndex \uc801\uc6a9\ncolumns = pd.MultiIndex.from_product(\n    [['A', 'B'], ['mean', 'std']],\n    names=['group', 'stat']\n)\ndf = pd.DataFrame(\n    np.random.randn(3, 4),\n    columns=columns,\n    index=['one', 'two', 'three']\n)\nprint(df)\n\n# \uc5f4 \uc120\ud0dd\nprint(df['A'])\nprint(df['A']['mean'])\nprint(df.loc[:, ('A', 'mean')])\n\n# \ud2b9\uc815 stat\uc758 \ubaa8\ub4e0 group\nprint(df.loc[:, pd.IndexSlice[:, 'mean']])\n"})}),"\n",(0,a.jsx)(e.h3,{id:"524-\uc2a4\ud0dd\uc5b8\uc2a4\ud0dd",children:"5.2.4 \uc2a4\ud0dd/\uc5b8\uc2a4\ud0dd"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc2a4\ud0dd: \uc5f4\uc744 \ud589\uc73c\ub85c\nstacked = df.stack()\nprint(stacked)\n\n# \uc5b8\uc2a4\ud0dd: \ud589\uc744 \uc5f4\ub85c\nunstacked = stacked.unstack()\nprint(unstacked)\n\n# \ud2b9\uc815 \ub808\ubca8 \uc5b8\uc2a4\ud0dd\nunstacked = stacked.unstack(level=0)\nprint(unstacked)\n\n# pivot\uacfc melt \ud65c\uc6a9\ndata = pd.DataFrame({\n    '\ub0a0\uc9dc': ['2024-01-01', '2024-01-01', '2024-01-02', '2024-01-02'],\n    '\uc9c0\uc810': ['\uac15\ub0a8', '\uac15\ubd81', '\uac15\ub0a8', '\uac15\ubd81'],\n    '\ub9e4\ucd9c': [100, 150, 120, 130]\n})\n\n# pivot\uc73c\ub85c wide format\nwide = data.pivot(index='\ub0a0\uc9dc', columns='\uc9c0\uc810', values='\ub9e4\ucd9c')\nprint(wide)\n\n# melt\ub85c long format\nlong = wide.reset_index().melt(id_vars='\ub0a0\uc9dc', var_name='\uc9c0\uc810', value_name='\ub9e4\ucd9c')\nprint(long)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"525-\ub808\ubca8-\uc870\uc791",children:"5.2.5 \ub808\ubca8 \uc870\uc791"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub808\ubca8 \uc774\ub984 \ubcc0\uacbd\ndf.index.names = ['\uc0c8\ub3c4\uc2dc', '\uc0c8\uc5f0\ub3c4']\n\n# \ub808\ubca8 \uc21c\uc11c \ubcc0\uacbd\nswapped = df.swaplevel('\ub3c4\uc2dc', '\uc5f0\ub3c4')\nprint(swapped)\n\n# \ub808\ubca8\ub85c \uc815\ub82c\nsorted_df = swapped.sort_index(level=0)\nprint(sorted_df)\n\n# \ub808\ubca8 \uc81c\uac70\nreset = df.reset_index()\nprint(reset)\n\n# \ub808\ubca8\ub85c \uc124\uc815\ndf2 = reset.set_index(['\ub3c4\uc2dc', '\uc5f0\ub3c4'])\nprint(df2)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"53-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130",children:"5.3 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130"}),"\n",(0,a.jsx)(e.h3,{id:"531-\ub0a0\uc9dc\uc2dc\uac04-\uc0dd\uc131-\ubc0f-\ubcc0\ud658",children:"5.3.1 \ub0a0\uc9dc/\uc2dc\uac04 \uc0dd\uc131 \ubc0f \ubcc0\ud658"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ubb38\uc790\uc5f4\uc744 \ub0a0\uc9dc\ub85c \ubcc0\ud658\ndates = pd.to_datetime(['2024-01-01', '2024-01-02', '2024-01-03'])\nprint(dates)\n\n# \ub2e4\uc591\ud55c \ud615\uc2dd\ndates = pd.to_datetime(['01/01/2024', '02-01-2024', 'Jan 03, 2024'])\nprint(dates)\n\n# format \uc9c0\uc815\ndates = pd.to_datetime(['20240101', '20240102'], format='%Y%m%d')\nprint(dates)\n\n# \ub0a0\uc9dc \ubc94\uc704 \uc0dd\uc131\ndates = pd.date_range('2024-01-01', periods=10, freq='D')\nprint(dates)\n\n# \ub2e4\uc591\ud55c \uc8fc\uae30\ndates = pd.date_range('2024-01-01', periods=5, freq='W')  # \uc8fc\uac04\ndates = pd.date_range('2024-01-01', periods=5, freq='M')  # \uc6d4\ub9d0\ndates = pd.date_range('2024-01-01', periods=5, freq='MS')  # \uc6d4\ucd08\ndates = pd.date_range('2024-01-01', periods=5, freq='Q')  # \ubd84\uae30\ndates = pd.date_range('2024-01-01', periods=5, freq='H')  # \uc2dc\uac04\n\n# \uc601\uc5c5\uc77c\ub9cc\nbusiness_dates = pd.bdate_range('2024-01-01', periods=10)\nprint(business_dates)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"532-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130-\uc778\ub371\uc2f1",children:"5.3.2 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \uc778\ub371\uc2f1"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \uc0dd\uc131\ndates = pd.date_range('2024-01-01', periods=100, freq='D')\nts = pd.Series(np.random.randn(100), index=dates)\n\n# \ub0a0\uc9dc\ub85c \uc778\ub371\uc2f1\nprint(ts['2024-01-01'])\nprint(ts['2024-01'])  # 2024\ub144 1\uc6d4 \uc804\uccb4\nprint(ts['2024'])     # 2024\ub144 \uc804\uccb4\n\n# \uc2ac\ub77c\uc774\uc2f1\nprint(ts['2024-01-01':'2024-01-10'])\n\n# \ubd80\ubd84 \ubb38\uc790\uc5f4 \ub9e4\uce6d\nprint(ts.loc['2024-01'])\n\n# \ub0a0\uc9dc \uc18d\uc131 \uc811\uadfc\ndf = pd.DataFrame({'value': ts})\ndf['year'] = df.index.year\ndf['month'] = df.index.month\ndf['day'] = df.index.day\ndf['dayofweek'] = df.index.dayofweek\ndf['quarter'] = df.index.quarter\nprint(df.head())\n"})}),"\n",(0,a.jsx)(e.h3,{id:"533-resample---\uc2dc\uacc4\uc5f4-\uc7ac\uc0d8\ud50c\ub9c1",children:"5.3.3 Resample - \uc2dc\uacc4\uc5f4 \uc7ac\uc0d8\ud50c\ub9c1"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc77c\ubcc4 \ub370\uc774\ud130\ub97c \uc8fc\ubcc4\ub85c \uc9d1\uacc4\ndates = pd.date_range('2024-01-01', periods=100, freq='D')\nts = pd.Series(np.random.randn(100), index=dates)\n\n# \uc8fc\ubcc4 \ud3c9\uade0\nweekly_mean = ts.resample('W').mean()\nprint(weekly_mean)\n\n# \uc6d4\ubcc4 \ud569\uacc4\nmonthly_sum = ts.resample('M').sum()\nprint(monthly_sum)\n\n# \uc5ec\ub7ec \uc9d1\uacc4 \ud568\uc218\ndf = pd.DataFrame({\n    'value': ts,\n    'count': np.random.randint(1, 100, 100)\n}, index=dates)\n\nmonthly = df.resample('M').agg({\n    'value': ['mean', 'std', 'min', 'max'],\n    'count': 'sum'\n})\nprint(monthly)\n\n# \ub2e4\uc6b4\uc0d8\ud50c\ub9c1 (\ub192\uc740 \ube48\ub3c4 -> \ub0ae\uc740 \ube48\ub3c4)\n# \uc2dc\uac04\ubcc4 \ub370\uc774\ud130\ub97c \uc77c\ubcc4\ub85c\nhourly = pd.date_range('2024-01-01', periods=240, freq='H')\nts_hourly = pd.Series(np.random.randn(240), index=hourly)\ndaily = ts_hourly.resample('D').mean()\nprint(daily)\n\n# \uc5c5\uc0d8\ud50c\ub9c1 (\ub0ae\uc740 \ube48\ub3c4 -> \ub192\uc740 \ube48\ub3c4)\ndaily = pd.date_range('2024-01-01', periods=10, freq='D')\nts_daily = pd.Series(np.arange(10), index=daily)\nhourly = ts_daily.resample('H').ffill()  # forward fill\nprint(hourly)\n\n# \ub2e4\uc591\ud55c \ucc44\uc6b0\uae30 \ubc29\ubc95\nhourly_bfill = ts_daily.resample('H').bfill()  # backward fill\nhourly_interp = ts_daily.resample('H').interpolate()  # \ubcf4\uac04\n"})}),"\n",(0,a.jsx)(e.h3,{id:"534-\uc2dc\uac04\ub300timezone-\ucc98\ub9ac",children:"5.3.4 \uc2dc\uac04\ub300(Timezone) \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc2dc\uac04\ub300 \uc778\uc2dd \ub0a0\uc9dc \uc0dd\uc131\ndates = pd.date_range('2024-01-01', periods=5, freq='D', tz='UTC')\nprint(dates)\n\n# \uc2dc\uac04\ub300 \ubcc0\ud658\ndates_asia = dates.tz_convert('Asia/Seoul')\nprint(dates_asia)\n\n# \uc2dc\uac04\ub300 \uc124\uc815\ndates_naive = pd.date_range('2024-01-01', periods=5, freq='D')\ndates_localized = dates_naive.tz_localize('Asia/Seoul')\nprint(dates_localized)\n\n# \uc2dc\uac04\ub300 \uc81c\uac70\ndates_naive_again = dates_asia.tz_localize(None)\nprint(dates_naive_again)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"535-period---\uae30\uac04-\ub370\uc774\ud130",children:"5.3.5 Period - \uae30\uac04 \ub370\uc774\ud130"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# Period \uc0dd\uc131\np = pd.Period('2024-01', freq='M')\nprint(p)\nprint(p + 1)  # \ub2e4\uc74c \ub2ec\nprint(p - 2)  # 2\uac1c\uc6d4 \uc804\n\n# Period \ubc94\uc704\nperiods = pd.period_range('2024-01', periods=12, freq='M')\nprint(periods)\n\n# Period Series\nts = pd.Series(np.random.randn(12), index=periods)\nprint(ts)\n\n# Period\uc640 Timestamp \ubcc0\ud658\ntimestamp = periods.to_timestamp()\nprint(timestamp)\n\nperiod = timestamp.to_period('M')\nprint(period)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"54-window-\ud568\uc218",children:"5.4 Window \ud568\uc218"}),"\n",(0,a.jsx)(e.h3,{id:"541-rolling---\uc774\ub3d9-\ucc3d",children:"5.4.1 Rolling - \uc774\ub3d9 \ucc3d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc0d8\ud50c \ub370\uc774\ud130\nnp.random.seed(42)\ndates = pd.date_range('2024-01-01', periods=100, freq='D')\ndf = pd.DataFrame({\n    'value': np.random.randn(100).cumsum()\n}, index=dates)\n\n# \uc774\ub3d9 \ud3c9\uade0\ndf['rolling_mean_7'] = df['value'].rolling(window=7).mean()\ndf['rolling_mean_30'] = df['value'].rolling(window=30).mean()\n\nprint(df.head(10))\n\n# \ub2e4\uc591\ud55c \uc9d1\uacc4 \ud568\uc218\ndf['rolling_std'] = df['value'].rolling(window=7).std()\ndf['rolling_min'] = df['value'].rolling(window=7).min()\ndf['rolling_max'] = df['value'].rolling(window=7).max()\ndf['rolling_sum'] = df['value'].rolling(window=7).sum()\n\n# center \uc635\uc158 (\uc911\uc2ec \uc774\ub3d9 \ud3c9\uade0)\ndf['centered_mean'] = df['value'].rolling(window=7, center=True).mean()\n\n# min_periods (\ucd5c\uc18c \uad00\uce21\uac12)\ndf['rolling_mean_min3'] = df['value'].rolling(window=7, min_periods=3).mean()\n\n# \uc0ac\uc6a9\uc790 \uc815\uc758 \ud568\uc218\ndef custom_stat(x):\n    return (x.max() - x.min()) / x.std() if len(x) > 1 else 0\n\ndf['custom_rolling'] = df['value'].rolling(window=7).apply(custom_stat)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"542-expanding---\ud655\uc7a5-\ucc3d",children:"5.4.2 Expanding - \ud655\uc7a5 \ucc3d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub204\uc801 \ud3c9\uade0\ndf['expanding_mean'] = df['value'].expanding().mean()\ndf['expanding_std'] = df['value'].expanding().std()\ndf['expanding_sum'] = df['value'].expanding().sum()\n\nprint(df.head(10))\n\n# min_periods \uc9c0\uc815\ndf['expanding_mean_min5'] = df['value'].expanding(min_periods=5).mean()\n"})}),"\n",(0,a.jsx)(e.h3,{id:"543-exponentially-weighted---\uc9c0\uc218-\uac00\uc911-\uc774\ub3d9-\ud3c9\uade0",children:"5.4.3 Exponentially Weighted - \uc9c0\uc218 \uac00\uc911 \uc774\ub3d9 \ud3c9\uade0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# EWM (Exponentially Weighted Moving Average)\ndf['ewm_mean'] = df['value'].ewm(span=7).mean()\ndf['ewm_std'] = df['value'].ewm(span=7).std()\n\n# alpha \ud30c\ub77c\ubbf8\ud130\ndf['ewm_alpha'] = df['value'].ewm(alpha=0.3).mean()\n\n# halflife \ud30c\ub77c\ubbf8\ud130\ndf['ewm_halflife'] = df['value'].ewm(halflife=7).mean()\n\nprint(df.tail(10))\n"})}),"\n",(0,a.jsx)(e.h3,{id:"544-window-\ud568\uc218-\uc751\uc6a9",children:"5.4.4 Window \ud568\uc218 \uc751\uc6a9"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ubcfc\ub9b0\uc800 \ubc34\ub4dc \uacc4\uc0b0\nwindow = 20\ndf['MA20'] = df['value'].rolling(window=window).mean()\ndf['STD20'] = df['value'].rolling(window=window).std()\ndf['upper_band'] = df['MA20'] + (df['STD20'] * 2)\ndf['lower_band'] = df['MA20'] - (df['STD20'] * 2)\n\n# RSI (Relative Strength Index) \uacc4\uc0b0\ndef calculate_rsi(data, periods=14):\n    delta = data.diff()\n    gain = (delta.where(delta > 0, 0)).rolling(window=periods).mean()\n    loss = (-delta.where(delta < 0, 0)).rolling(window=periods).mean()\n    rs = gain / loss\n    rsi = 100 - (100 / (1 + rs))\n    return rsi\n\ndf['RSI'] = calculate_rsi(df['value'])\n\n# MACD (Moving Average Convergence Divergence)\ndf['EMA12'] = df['value'].ewm(span=12).mean()\ndf['EMA26'] = df['value'].ewm(span=26).mean()\ndf['MACD'] = df['EMA12'] - df['EMA26']\ndf['Signal'] = df['MACD'].ewm(span=9).mean()\n\nprint(df[['value', 'MA20', 'upper_band', 'lower_band', 'RSI', 'MACD']].tail(10))\n"})}),"\n",(0,a.jsx)(e.h3,{id:"545-\uadf8\ub8f9\ubcc4-window-\ud568\uc218",children:"5.4.5 \uadf8\ub8f9\ubcc4 Window \ud568\uc218"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uadf8\ub8f9\ubcc4 \uc774\ub3d9 \ud3c9\uade0\ndf = pd.DataFrame({\n    'date': pd.date_range('2024-01-01', periods=20, freq='D').tolist() * 3,\n    'category': ['A'] * 20 + ['B'] * 20 + ['C'] * 20,\n    'value': np.random.randn(60)\n})\n\ndf['rolling_mean'] = df.groupby('category')['value'].rolling(window=5).mean().reset_index(0, drop=True)\n\nprint(df.head(10))\n"})}),"\n",(0,a.jsx)(e.admonition,{title:"Window \ud568\uc218 \uc120\ud0dd \uac00\uc774\ub4dc",type:"tip",children:(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"rolling"}),": \uace0\uc815\ub41c \ud06c\uae30\uc758 \uc774\ub3d9 \ucc3d (\uc608: \ucd5c\uadfc 7\uc77c)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"expanding"}),": \ucc98\uc74c\ubd80\ud130 \ud604\uc7ac\uae4c\uc9c0 \ubaa8\ub4e0 \ub370\uc774\ud130 (\ub204\uc801 \ud1b5\uacc4)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"ewm"}),": \ucd5c\uadfc \ub370\uc774\ud130\uc5d0 \ub354 \ub192\uc740 \uac00\uc911\uce58 (\ud2b8\ub80c\ub4dc \ucd94\uc801)"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"55-\ud06c\ub85c\uc2a4\ud0ed-crosstab",children:"5.5 \ud06c\ub85c\uc2a4\ud0ed (Crosstab)"}),"\n",(0,a.jsx)(e.h3,{id:"551-\uae30\ubcf8-\ud06c\ub85c\uc2a4\ud0ed",children:"5.5.1 \uae30\ubcf8 \ud06c\ub85c\uc2a4\ud0ed"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc0d8\ud50c \ub370\uc774\ud130\ndata = pd.DataFrame({\n    '\uc131\ubcc4': ['\ub0a8', '\uc5ec', '\ub0a8', '\uc5ec', '\ub0a8', '\uc5ec', '\ub0a8', '\uc5ec'] * 3,\n    '\uc5f0\ub839\ub300': ['20\ub300', '20\ub300', '30\ub300', '30\ub300', '20\ub300', '20\ub300', '30\ub300', '30\ub300'] * 3,\n    '\uad6c\ub9e4': ['Y', 'N', 'Y', 'Y', 'N', 'Y', 'Y', 'N'] * 3\n})\n\n# \uae30\ubcf8 \ud06c\ub85c\uc2a4\ud0ed\nct = pd.crosstab(data['\uc131\ubcc4'], data['\uad6c\ub9e4'])\nprint(ct)\n# \uad6c\ub9e4    N  Y\n# \uc131\ubcc4\n# \ub0a8     6  6\n# \uc5ec     6  6\n\n# \ube44\uc728 \ud45c\uc2dc\nct_normalized = pd.crosstab(data['\uc131\ubcc4'], data['\uad6c\ub9e4'], normalize=True)\nprint(ct_normalized)\n\n# \ud589 \uae30\uc900 \ube44\uc728\nct_row_norm = pd.crosstab(data['\uc131\ubcc4'], data['\uad6c\ub9e4'], normalize='index')\nprint(ct_row_norm)\n\n# \uc5f4 \uae30\uc900 \ube44\uc728\nct_col_norm = pd.crosstab(data['\uc131\ubcc4'], data['\uad6c\ub9e4'], normalize='columns')\nprint(ct_col_norm)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"552-\ub2e4\uc911-\uc778\ub371\uc2a4-\ud06c\ub85c\uc2a4\ud0ed",children:"5.5.2 \ub2e4\uc911 \uc778\ub371\uc2a4 \ud06c\ub85c\uc2a4\ud0ed"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# 2\uac1c \uc774\uc0c1\uc758 \ubcc0\uc218\ub85c \ud06c\ub85c\uc2a4\ud0ed\nct = pd.crosstab(\n    [data['\uc131\ubcc4'], data['\uc5f0\ub839\ub300']],\n    data['\uad6c\ub9e4']\n)\nprint(ct)\n# \uad6c\ub9e4       N  Y\n# \uc131\ubcc4 \uc5f0\ub839\ub300\n# \ub0a8  20\ub300   3  3\n#    30\ub300   3  3\n# \uc5ec  20\ub300   3  3\n#    30\ub300   3  3\n\n# margins \ucd94\uac00 (\ud569\uacc4 \ud589/\uc5f4)\nct = pd.crosstab(\n    data['\uc131\ubcc4'],\n    data['\uad6c\ub9e4'],\n    margins=True,\n    margins_name='\ucd1d\uacc4'\n)\nprint(ct)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"553-\uc9d1\uacc4-\ud568\uc218\uc640-\ud568\uaed8-\uc0ac\uc6a9",children:"5.5.3 \uc9d1\uacc4 \ud568\uc218\uc640 \ud568\uaed8 \uc0ac\uc6a9"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc0d8\ud50c \ub370\uc774\ud130\nsales = pd.DataFrame({\n    '\uc9c0\uc5ed': ['\uc11c\uc6b8', '\ubd80\uc0b0', '\uc11c\uc6b8', '\ubd80\uc0b0', '\uc11c\uc6b8', '\ubd80\uc0b0'] * 4,\n    '\uc81c\ud488': ['A', 'A', 'B', 'B', 'A', 'A'] * 4,\n    '\ud310\ub9e4\ub7c9': np.random.randint(10, 100, 24),\n    '\ub9e4\ucd9c': np.random.randint(1000, 5000, 24)\n})\n\n# \ud3c9\uade0 \ub9e4\ucd9c\nct = pd.crosstab(\n    sales['\uc9c0\uc5ed'],\n    sales['\uc81c\ud488'],\n    values=sales['\ub9e4\ucd9c'],\n    aggfunc='mean'\n)\nprint(ct)\n\n# \uc5ec\ub7ec \uc9d1\uacc4 \ud568\uc218\nct = pd.crosstab(\n    sales['\uc9c0\uc5ed'],\n    sales['\uc81c\ud488'],\n    values=sales['\ub9e4\ucd9c'],\n    aggfunc=['mean', 'sum', 'count']\n)\nprint(ct)\n\n# \uc5ec\ub7ec \uac12\uc5d0 \ub300\ud55c \uc9d1\uacc4\nct = pd.crosstab(\n    sales['\uc9c0\uc5ed'],\n    sales['\uc81c\ud488'],\n    values=[sales['\ub9e4\ucd9c'], sales['\ud310\ub9e4\ub7c9']],\n    aggfunc={'\ub9e4\ucd9c': 'sum', '\ud310\ub9e4\ub7c9': 'mean'}\n)\nprint(ct)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"56-\uba54\ubaa8\ub9ac-\ucd5c\uc801\ud654",children:"5.6 \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,a.jsx)(e.h3,{id:"561-\ub370\uc774\ud130-\ud0c0\uc785-\ucd5c\uc801\ud654",children:"5.6.1 \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ud655\uc778\ndf = pd.DataFrame({\n    'int_col': np.random.randint(0, 100, 10000),\n    'float_col': np.random.randn(10000),\n    'string_col': ['text'] * 10000\n})\n\nprint(df.memory_usage(deep=True))\nprint(f\"Total memory: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\n\n# int \ud0c0\uc785 \ucd5c\uc801\ud654\nprint(f\"Original int dtype: {df['int_col'].dtype}\")\ndf['int_col'] = pd.to_numeric(df['int_col'], downcast='integer')\nprint(f\"Optimized int dtype: {df['int_col'].dtype}\")\n\n# float \ud0c0\uc785 \ucd5c\uc801\ud654\ndf['float_col'] = pd.to_numeric(df['float_col'], downcast='float')\nprint(f\"Optimized float dtype: {df['float_col'].dtype}\")\n\n# \uce74\ud14c\uace0\ub9ac \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\nprint(f\"Original string memory: {df['string_col'].memory_usage(deep=True) / 1024**2:.2f} MB\")\ndf['string_col'] = df['string_col'].astype('category')\nprint(f\"Category memory: {df['string_col'].memory_usage(deep=True) / 1024**2:.2f} MB\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"562-\ucd5c\uc801-\ub370\uc774\ud130-\ud0c0\uc785-\uc790\ub3d9-\uc120\ud0dd",children:"5.6.2 \ucd5c\uc801 \ub370\uc774\ud130 \ud0c0\uc785 \uc790\ub3d9 \uc120\ud0dd"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def optimize_dtypes(df):\n    \"\"\"\ub370\uc774\ud130\ud504\ub808\uc784\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc790\ub3d9\uc73c\ub85c \ucd5c\uc801\ud654\"\"\"\n    df_optimized = df.copy()\n\n    # \uc815\uc218\ud615 \ucd5c\uc801\ud654\n    int_cols = df_optimized.select_dtypes(include=['int']).columns\n    for col in int_cols:\n        df_optimized[col] = pd.to_numeric(df_optimized[col], downcast='integer')\n\n    # \uc2e4\uc218\ud615 \ucd5c\uc801\ud654\n    float_cols = df_optimized.select_dtypes(include=['float']).columns\n    for col in float_cols:\n        df_optimized[col] = pd.to_numeric(df_optimized[col], downcast='float')\n\n    # \ubb38\uc790\uc5f4\uc744 \uce74\ud14c\uace0\ub9ac\ub85c (\uace0\uc720\uac12\uc774 50% \ubbf8\ub9cc\uc778 \uacbd\uc6b0)\n    object_cols = df_optimized.select_dtypes(include=['object']).columns\n    for col in object_cols:\n        num_unique = df_optimized[col].nunique()\n        num_total = len(df_optimized[col])\n        if num_unique / num_total < 0.5:\n            df_optimized[col] = df_optimized[col].astype('category')\n\n    return df_optimized\n\n# \uc0ac\uc6a9 \uc608\uc2dc\noriginal_memory = df.memory_usage(deep=True).sum() / 1024**2\noptimized_df = optimize_dtypes(df)\noptimized_memory = optimized_df.memory_usage(deep=True).sum() / 1024**2\n\nprint(f\"Original: {original_memory:.2f} MB\")\nprint(f\"Optimized: {optimized_memory:.2f} MB\")\nprint(f\"Reduction: {(1 - optimized_memory/original_memory)*100:.1f}%\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"563-\uccad\ud06c-\ub2e8\uc704\ub85c-\ub370\uc774\ud130-\ucc98\ub9ac",children:"5.6.3 \uccad\ud06c \ub2e8\uc704\ub85c \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub300\uc6a9\ub7c9 CSV\ub97c \uccad\ud06c\ub85c \uc77d\uae30\nchunk_size = 10000\nresults = []\n\nfor chunk in pd.read_csv('large_file.csv', chunksize=chunk_size):\n    # \uac01 \uccad\ud06c \ucc98\ub9ac\n    processed = chunk[chunk['value'] > 100]\n    results.append(processed)\n\n# \uacb0\uacfc \uacb0\ud569\nfinal_df = pd.concat(results, ignore_index=True)\n\n# \uc9d1\uacc4\ub9cc \ud544\uc694\ud55c \uacbd\uc6b0\ntotal_sum = 0\nfor chunk in pd.read_csv('large_file.csv', chunksize=chunk_size):\n    total_sum += chunk['value'].sum()\n\nprint(f\"Total sum: {total_sum}\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"564-\ud6a8\uc728\uc801\uc778-\ub370\uc774\ud130-\uc800\uc7a5",children:"5.6.4 \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \uc800\uc7a5"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# Parquet \ud3ec\ub9f7 \uc0ac\uc6a9 (\uc555\ucd95 + \ube60\ub978 \uc77d\uae30)\ndf.to_parquet('data.parquet', compression='gzip')\nloaded_df = pd.read_parquet('data.parquet')\n\n# HDF5 \ud3ec\ub9f7 (\ub300\uc6a9\ub7c9 \ub370\uc774\ud130)\ndf.to_hdf('data.h5', key='df', mode='w')\nloaded_df = pd.read_hdf('data.h5', 'df')\n\n# Feather \ud3ec\ub9f7 (\ub9e4\uc6b0 \ube60\ub978 I/O)\ndf.to_feather('data.feather')\nloaded_df = pd.read_feather('data.feather')\n\n# \uc131\ub2a5 \ube44\uad50\nimport time\n\n# CSV\nstart = time.time()\ndf.to_csv('data.csv', index=False)\ncsv_write = time.time() - start\n\n# Parquet\nstart = time.time()\ndf.to_parquet('data.parquet')\nparquet_write = time.time() - start\n\n# Feather\nstart = time.time()\ndf.to_feather('data.feather')\nfeather_write = time.time() - start\n\nprint(f\"CSV write: {csv_write:.4f}s\")\nprint(f\"Parquet write: {parquet_write:.4f}s\")\nprint(f\"Feather write: {feather_write:.4f}s\")\n"})}),"\n",(0,a.jsx)(e.h2,{id:"57-\uc131\ub2a5-\ucd5c\uc801\ud654",children:"5.7 \uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,a.jsx)(e.h3,{id:"571-\ubca1\ud130\ud654-\uc5f0\uc0b0",children:"5.7.1 \ubca1\ud130\ud654 \uc5f0\uc0b0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import time\n\n# \ube44\ud6a8\uc728\uc801\uc778 \ubc18\ubcf5\ubb38\ndf = pd.DataFrame({'A': range(1000000)})\n\nstart = time.time()\nresult = []\nfor val in df['A']:\n    result.append(val * 2)\ndf['B_loop'] = result\nloop_time = time.time() - start\n\n# \ubca1\ud130\ud654 \uc5f0\uc0b0\nstart = time.time()\ndf['B_vectorized'] = df['A'] * 2\nvectorized_time = time.time() - start\n\nprint(f\"Loop: {loop_time:.4f}s\")\nprint(f\"Vectorized: {vectorized_time:.4f}s\")\nprint(f\"Speedup: {loop_time/vectorized_time:.1f}x\")\n\n# apply vs \ubca1\ud130\ud654\ndf = pd.DataFrame({\n    'A': np.random.randn(100000),\n    'B': np.random.randn(100000)\n})\n\n# apply \uc0ac\uc6a9\nstart = time.time()\ndf['sum_apply'] = df.apply(lambda row: row['A'] + row['B'], axis=1)\napply_time = time.time() - start\n\n# \ubca1\ud130\ud654\nstart = time.time()\ndf['sum_vectorized'] = df['A'] + df['B']\nvectorized_time = time.time() - start\n\nprint(f\"\\nApply: {apply_time:.4f}s\")\nprint(f\"Vectorized: {vectorized_time:.4f}s\")\nprint(f\"Speedup: {apply_time/vectorized_time:.1f}x\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"572-numpy-\ud568\uc218-\ud65c\uc6a9",children:"5.7.2 NumPy \ud568\uc218 \ud65c\uc6a9"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# pandas\ubcf4\ub2e4 NumPy\uac00 \ube60\ub978 \uacbd\uc6b0\ndf = pd.DataFrame(np.random.randn(100000, 4), columns=list('ABCD'))\n\n# pandas \uba54\uc11c\ub4dc\nstart = time.time()\nresult_pandas = df['A'].mean()\npandas_time = time.time() - start\n\n# NumPy \ud568\uc218\nstart = time.time()\nresult_numpy = np.mean(df['A'].values)\nnumpy_time = time.time() - start\n\nprint(f\"Pandas: {pandas_time:.6f}s\")\nprint(f\"NumPy: {numpy_time:.6f}s\")\n\n# \uc870\uac74\ubd80 \uc5f0\uc0b0\n# \ub290\ub9b0 \ubc29\ubc95\nstart = time.time()\ndf['category_slow'] = df['A'].apply(lambda x: 'high' if x > 0.5 else ('low' if x < -0.5 else 'medium'))\nslow_time = time.time() - start\n\n# \ube60\ub978 \ubc29\ubc95 (np.where \ub610\ub294 np.select)\nstart = time.time()\nconditions = [df['A'] > 0.5, df['A'] < -0.5]\nchoices = ['high', 'low']\ndf['category_fast'] = np.select(conditions, choices, default='medium')\nfast_time = time.time() - start\n\nprint(f\"\\nApply: {slow_time:.4f}s\")\nprint(f\"np.select: {fast_time:.4f}s\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"573-eval\uacfc-query-\uc0ac\uc6a9",children:"5.7.3 eval\uacfc query \uc0ac\uc6a9"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ubcf5\uc7a1\ud55c \uc5f0\uc0b0\uc5d0 eval \uc0ac\uc6a9\ndf = pd.DataFrame(np.random.randn(100000, 4), columns=list('ABCD'))\n\n# \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\nstart = time.time()\nresult1 = df['A'] + df['B'] * df['C'] - df['D']\nnormal_time = time.time() - start\n\n# eval \uc0ac\uc6a9\nstart = time.time()\nresult2 = df.eval('A + B * C - D')\neval_time = time.time() - start\n\nprint(f\"Normal: {normal_time:.4f}s\")\nprint(f\"Eval: {eval_time:.4f}s\")\n\n# query\ub97c \uc0ac\uc6a9\ud55c \ud544\ud130\ub9c1\n# \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\nstart = time.time()\nfiltered1 = df[(df['A'] > 0) & (df['B'] < 0)]\nnormal_time = time.time() - start\n\n# query \uc0ac\uc6a9\nstart = time.time()\nfiltered2 = df.query('A > 0 and B < 0')\nquery_time = time.time() - start\n\nprint(f\"\\nNormal filtering: {normal_time:.4f}s\")\nprint(f\"Query filtering: {query_time:.4f}s\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"574-\uc778\ub371\uc2f1-\ucd5c\uc801\ud654",children:"5.7.4 \uc778\ub371\uc2f1 \ucd5c\uc801\ud654"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc778\ub371\uc2a4 \uc124\uc815\uc73c\ub85c \uac80\uc0c9 \uc18d\ub3c4 \ud5a5\uc0c1\ndf = pd.DataFrame({\n    'id': np.random.randint(0, 10000, 100000),\n    'value': np.random.randn(100000)\n})\n\n# \uc778\ub371\uc2a4 \uc5c6\uc774 \uac80\uc0c9\nstart = time.time()\nresult1 = df[df['id'] == 5000]\nno_index_time = time.time() - start\n\n# \uc778\ub371\uc2a4 \uc124\uc815 \ud6c4 \uac80\uc0c9\ndf_indexed = df.set_index('id')\nstart = time.time()\nresult2 = df_indexed.loc[5000]\nindexed_time = time.time() - start\n\nprint(f\"Without index: {no_index_time:.6f}s\")\nprint(f\"With index: {indexed_time:.6f}s\")\nprint(f\"Speedup: {no_index_time/indexed_time:.1f}x\")\n\n# \uc815\ub82c\ub41c \uc778\ub371\uc2a4\uc758 \uc774\uc810\ndf_sorted = df.sort_values('id').set_index('id')\nstart = time.time()\nresult3 = df_sorted.loc[5000:6000]\nsorted_time = time.time() - start\n\nprint(f\"Sorted index slicing: {sorted_time:.6f}s\")\n"})}),"\n",(0,a.jsx)(e.h2,{id:"58-\uc0ac\uc6a9\uc790-\uc815\uc758-\uc9d1\uacc4-\ud568\uc218",children:"5.8 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc9d1\uacc4 \ud568\uc218"}),"\n",(0,a.jsx)(e.h3,{id:"581-\uae30\ubcf8-\uc0ac\uc6a9\uc790-\uc815\uc758-\ud568\uc218",children:"5.8.1 \uae30\ubcf8 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud568\uc218"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub2e8\uc77c \ud568\uc218 \uc815\uc758\ndef range_calc(x):\n    \"\"\"\ubc94\uc704 \uacc4\uc0b0\"\"\"\n    return x.max() - x.min()\n\ndf = pd.DataFrame({\n    'category': ['A', 'B', 'A', 'B', 'A', 'B'] * 10,\n    'value': np.random.randn(60)\n})\n\n# \uc0ac\uc6a9\uc790 \uc815\uc758 \ud568\uc218 \uc801\uc6a9\nresult = df.groupby('category')['value'].agg(range_calc)\nprint(result)\n\n# \uc5ec\ub7ec \ud568\uc218\ub97c \ub9ac\uc2a4\ud2b8\ub85c\nresult = df.groupby('category')['value'].agg([\n    'mean',\n    'std',\n    range_calc,\n    lambda x: x.quantile(0.25),\n    lambda x: x.quantile(0.75)\n])\nprint(result)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"582-named-aggregations",children:"5.8.2 Named Aggregations"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uba85\uba85\ub41c \uc9d1\uacc4\nresult = df.groupby('category').agg(\n    \ud3c9\uade0=('value', 'mean'),\n    \ud45c\uc900\ud3b8\ucc28=('value', 'std'),\n    \ubc94\uc704=('value', range_calc),\n    Q1=('value', lambda x: x.quantile(0.25)),\n    Q3=('value', lambda x: x.quantile(0.75))\n)\nprint(result)\n\n# \uc5ec\ub7ec \uc5f4\uc5d0 \ub300\ud55c \uba85\uba85\ub41c \uc9d1\uacc4\ndf = pd.DataFrame({\n    'category': ['A', 'B', 'A', 'B'] * 5,\n    'value1': np.random.randn(20),\n    'value2': np.random.randn(20)\n})\n\nresult = df.groupby('category').agg(\n    value1_mean=('value1', 'mean'),\n    value1_std=('value1', 'std'),\n    value2_sum=('value2', 'sum'),\n    value2_max=('value2', 'max')\n)\nprint(result)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"583-\ubcf5\uc7a1\ud55c-\uc9d1\uacc4-\ud568\uc218",children:"5.8.3 \ubcf5\uc7a1\ud55c \uc9d1\uacc4 \ud568\uc218"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ud1b5\uacc4\uc801 \uc774\uc0c1\uce58 \uc81c\uac70 \ud6c4 \ud3c9\uade0\ndef trimmed_mean(x, percentile=10):\n    \"\"\"\uc0c1\ud558\uc704 percentile%\ub97c \uc81c\uac70\ud55c \ud3c9\uade0\"\"\"\n    lower = x.quantile(percentile / 100)\n    upper = x.quantile(1 - percentile / 100)\n    return x[(x >= lower) & (x <= upper)].mean()\n\n# \uac00\uc911 \ud3c9\uade0\ndef weighted_mean(values, weights):\n    \"\"\"\uac00\uc911 \ud3c9\uade0 \uacc4\uc0b0\"\"\"\n    return (values * weights).sum() / weights.sum()\n\ndf = pd.DataFrame({\n    'category': ['A', 'B'] * 20,\n    'value': np.random.randn(40),\n    'weight': np.random.rand(40)\n})\n\n# \uc77c\ubc18 \ud3c9\uade0\uacfc \ud2b8\ub9bc\ub41c \ud3c9\uade0 \ube44\uad50\nresult = df.groupby('category')['value'].agg([\n    ('mean', 'mean'),\n    ('trimmed_mean_10', lambda x: trimmed_mean(x, 10)),\n    ('trimmed_mean_20', lambda x: trimmed_mean(x, 20))\n])\nprint(result)\n\n# \uac00\uc911 \ud3c9\uade0\nresult = df.groupby('category').apply(\n    lambda x: weighted_mean(x['value'], x['weight'])\n)\nprint(result)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"584-transform-vs-agg",children:"5.8.4 Transform vs Agg"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"df = pd.DataFrame({\n    'group': ['A', 'A', 'B', 'B', 'A', 'B'],\n    'value': [1, 2, 3, 4, 5, 6]\n})\n\n# agg: \uadf8\ub8f9\ub2f9 \ud558\ub098\uc758 \uac12 \ubc18\ud658\nagg_result = df.groupby('group')['value'].agg('mean')\nprint(\"Agg result:\")\nprint(agg_result)\n# group\n# A    2.666667\n# B    4.333333\n\n# transform: \uc6d0\ubcf8 DataFrame\uacfc \uac19\uc740 \ud06c\uae30\ub85c \ubc18\ud658\ntransform_result = df.groupby('group')['value'].transform('mean')\nprint(\"\\nTransform result:\")\nprint(transform_result)\n# 0    2.666667\n# 1    2.666667\n# 2    4.333333\n# 3    4.333333\n# 4    2.666667\n# 5    4.333333\n\n# \uadf8\ub8f9 \ud3c9\uade0\uacfc\uc758 \ucc28\uc774 \uacc4\uc0b0\ndf['diff_from_mean'] = df['value'] - df.groupby('group')['value'].transform('mean')\nprint(\"\\nDataFrame with difference:\")\nprint(df)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"585-apply\ub97c-\uc0ac\uc6a9\ud55c-\ubcf5\uc7a1\ud55c-\uc5f0\uc0b0",children:"5.8.5 Apply\ub97c \uc0ac\uc6a9\ud55c \ubcf5\uc7a1\ud55c \uc5f0\uc0b0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uadf8\ub8f9\ubcc4 \ubcf5\uc7a1\ud55c \ucc98\ub9ac\ndef process_group(group):\n    \"\"\"\uadf8\ub8f9\ubcc4 \ubcf5\uc7a1\ud55c \ucc98\ub9ac\"\"\"\n    result = pd.Series({\n        'count': len(group),\n        'mean': group['value'].mean(),\n        'std': group['value'].std(),\n        'cv': group['value'].std() / group['value'].mean() if group['value'].mean() != 0 else 0,\n        'range': group['value'].max() - group['value'].min()\n    })\n    return result\n\ndf = pd.DataFrame({\n    'category': ['A', 'B', 'C'] * 10,\n    'subcategory': ['X', 'Y'] * 15,\n    'value': np.random.randn(30) * 10 + 50\n})\n\nresult = df.groupby('category').apply(process_group)\nprint(result)\n\n# \uc5ec\ub7ec \uc5f4 \ubc18\ud658\ndef multi_column_process(group):\n    \"\"\"\uc5ec\ub7ec \uc5f4\uc744 \uac00\uc9c4 DataFrame \ubc18\ud658\"\"\"\n    return pd.DataFrame({\n        'sum': [group['value'].sum()],\n        'mean': [group['value'].mean()],\n        'top_value': [group.nlargest(1, 'value')['value'].iloc[0]]\n    })\n\nresult = df.groupby('category').apply(multi_column_process).reset_index(drop=True)\nprint(result)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"59-\uc2e4\uc804-\uc608\uc81c",children:"5.9 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,a.jsx)(e.h3,{id:"591-\uace0\uac1d-\uad6c\ub9e4-\ud328\ud134-\ubd84\uc11d",children:"5.9.1 \uace0\uac1d \uad6c\ub9e4 \ud328\ud134 \ubd84\uc11d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc0d8\ud50c \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\ndates = pd.date_range('2023-01-01', '2023-12-31', freq='D')\ncustomers = [f'C{i:04d}' for i in range(1, 101)]\nproducts = ['P001', 'P002', 'P003', 'P004', 'P005']\n\nn_transactions = 5000\ntransactions = pd.DataFrame({\n    'transaction_id': range(1, n_transactions + 1),\n    'date': np.random.choice(dates, n_transactions),\n    'customer_id': np.random.choice(customers, n_transactions),\n    'product_id': np.random.choice(products, n_transactions),\n    'quantity': np.random.randint(1, 10, n_transactions),\n    'unit_price': np.random.choice([10, 20, 30, 40, 50], n_transactions)\n})\n\ntransactions['amount'] = transactions['quantity'] * transactions['unit_price']\n\nprint(transactions.head(10))\n\n# 1. \uc6d4\ubcc4 \ub9e4\ucd9c \ucd94\uc774\nmonthly_sales = transactions.set_index('date').resample('M')['amount'].agg([\n    ('\ucd1d\ub9e4\ucd9c', 'sum'),\n    ('\ud3c9\uade0\uc8fc\ubb38\uae08\uc561', 'mean'),\n    ('\uc8fc\ubb38\uc218', 'count')\n])\nprint(\"\\n\uc6d4\ubcc4 \ub9e4\ucd9c \ucd94\uc774:\")\nprint(monthly_sales)\n\n# 2. \uace0\uac1d\ubcc4 \uad6c\ub9e4 \ubd84\uc11d\ncustomer_analysis = transactions.groupby('customer_id').agg({\n    'transaction_id': 'count',\n    'amount': ['sum', 'mean'],\n    'date': lambda x: (x.max() - x.min()).days\n}).round(2)\n\ncustomer_analysis.columns = ['\uad6c\ub9e4\ud69f\uc218', '\ucd1d\uad6c\ub9e4\uae08\uc561', '\ud3c9\uade0\uad6c\ub9e4\uae08\uc561', '\ud65c\ub3d9\uae30\uac04']\ncustomer_analysis['\uad6c\ub9e4\ube48\ub3c4'] = customer_analysis['\ud65c\ub3d9\uae30\uac04'] / customer_analysis['\uad6c\ub9e4\ud69f\uc218']\nprint(\"\\n\uace0\uac1d\ubcc4 \uad6c\ub9e4 \ubd84\uc11d (\uc0c1\uc704 10\uba85):\")\nprint(customer_analysis.nlargest(10, '\ucd1d\uad6c\ub9e4\uae08\uc561'))\n\n# 3. RFM \ubd84\uc11d (Recency, Frequency, Monetary)\nreference_date = transactions['date'].max()\n\nrfm = transactions.groupby('customer_id').agg({\n    'date': lambda x: (reference_date - x.max()).days,  # Recency\n    'transaction_id': 'count',  # Frequency\n    'amount': 'sum'  # Monetary\n})\n\nrfm.columns = ['Recency', 'Frequency', 'Monetary']\n\n# RFM \uc810\uc218 \ubd80\uc5ec (1-5)\nrfm['R_Score'] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])\nrfm['F_Score'] = pd.qcut(rfm['Frequency'].rank(method='first'), 5, labels=[1, 2, 3, 4, 5])\nrfm['M_Score'] = pd.qcut(rfm['Monetary'], 5, labels=[1, 2, 3, 4, 5])\n\nrfm['RFM_Score'] = rfm['R_Score'].astype(str) + rfm['F_Score'].astype(str) + rfm['M_Score'].astype(str)\n\nprint(\"\\nRFM \ubd84\uc11d \uacb0\uacfc (\uc0d8\ud50c):\")\nprint(rfm.head(10))\n\n# 4. \uc81c\ud488\ubcc4 \uc6d4\uac04 \uc131\uacfc\nproduct_monthly = pd.crosstab(\n    [transactions.set_index('date').resample('M').asfreq().index.to_period('M'),\n     transactions['product_id']],\n    'count',\n    transactions['amount'],\n    aggfunc='sum'\n).fillna(0)\n\nprint(\"\\n\uc81c\ud488\ubcc4 \uc6d4\uac04 \ub9e4\ucd9c:\")\nprint(product_monthly)\n\n# 5. \ucf54\ud638\ud2b8 \ubd84\uc11d\ntransactions['order_month'] = transactions['date'].dt.to_period('M')\ntransactions['cohort'] = transactions.groupby('customer_id')['date'].transform('min').dt.to_period('M')\n\n# \ucf54\ud638\ud2b8 \uc778\ub371\uc2a4 \uacc4\uc0b0\ndef get_month_diff(row):\n    return (row['order_month'] - row['cohort']).n\n\ntransactions['cohort_index'] = transactions.apply(get_month_diff, axis=1)\n\n# \ucf54\ud638\ud2b8\ubcc4 \uace0\uac1d \uc218\ncohort_data = transactions.groupby(['cohort', 'cohort_index'])['customer_id'].nunique().reset_index()\ncohort_pivot = cohort_data.pivot(index='cohort', columns='cohort_index', values='customer_id')\n\n# \ub9ac\ud150\uc158 \ube44\uc728\ncohort_size = cohort_pivot.iloc[:, 0]\nretention = cohort_pivot.divide(cohort_size, axis=0) * 100\n\nprint(\"\\n\ucf54\ud638\ud2b8 \ub9ac\ud150\uc158 \ubd84\uc11d (%):\")\nprint(retention.round(1))\n"})}),"\n",(0,a.jsx)(e.h3,{id:"592-\uc2dc\uacc4\uc5f4-\uc774\uc0c1-\ud0d0\uc9c0",children:"5.9.2 \uc2dc\uacc4\uc5f4 \uc774\uc0c1 \ud0d0\uc9c0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \uc0dd\uc131 (\uc815\uc0c1 \ud328\ud134 + \uc774\uc0c1\uce58)\nnp.random.seed(42)\ndates = pd.date_range('2024-01-01', periods=365, freq='D')\ntrend = np.linspace(100, 150, 365)\nseasonal = 10 * np.sin(np.arange(365) * 2 * np.pi / 7)  # \uc8fc\uac04 \ud328\ud134\nnoise = np.random.randn(365) * 2\n\nvalues = trend + seasonal + noise\n\n# \uc774\uc0c1\uce58 \uc8fc\uc785\nanomaly_indices = [50, 100, 150, 200, 250]\nvalues[anomaly_indices] += np.random.choice([-30, 30], size=len(anomaly_indices))\n\ndf = pd.DataFrame({\n    'date': dates,\n    'value': values\n})\n\ndf = df.set_index('date')\n\n# 1. \uc774\ub3d9 \ud3c9\uade0 \uae30\ubc18 \uc774\uc0c1 \ud0d0\uc9c0\ndf['MA7'] = df['value'].rolling(window=7, center=True).mean()\ndf['STD7'] = df['value'].rolling(window=7, center=True).std()\ndf['upper_bound'] = df['MA7'] + (3 * df['STD7'])\ndf['lower_bound'] = df['MA7'] - (3 * df['STD7'])\ndf['anomaly_ma'] = ((df['value'] > df['upper_bound']) |\n                     (df['value'] < df['lower_bound']))\n\n# 2. Z-score \uae30\ubc18 \uc774\uc0c1 \ud0d0\uc9c0\ndf['z_score'] = (df['value'] - df['value'].mean()) / df['value'].std()\ndf['anomaly_zscore'] = abs(df['z_score']) > 3\n\n# 3. IQR \uae30\ubc18 \uc774\uc0c1 \ud0d0\uc9c0\nQ1 = df['value'].quantile(0.25)\nQ3 = df['value'].quantile(0.75)\nIQR = Q3 - Q1\ndf['anomaly_iqr'] = ((df['value'] < (Q1 - 1.5 * IQR)) |\n                      (df['value'] > (Q3 + 1.5 * IQR)))\n\nprint(\"\uc774\uc0c1\uce58 \ud0d0\uc9c0 \uacb0\uacfc:\")\nprint(f\"\uc774\ub3d9\ud3c9\uade0 \uae30\ubc18: {df['anomaly_ma'].sum()}\uac1c\")\nprint(f\"Z-score \uae30\ubc18: {df['anomaly_zscore'].sum()}\uac1c\")\nprint(f\"IQR \uae30\ubc18: {df['anomaly_iqr'].sum()}\uac1c\")\n\nprint(\"\\n\ud0d0\uc9c0\ub41c \uc774\uc0c1\uce58:\")\nanomalies = df[df['anomaly_ma'] | df['anomaly_zscore'] | df['anomaly_iqr']]\nprint(anomalies[['value', 'MA7', 'z_score', 'anomaly_ma', 'anomaly_zscore', 'anomaly_iqr']])\n"})}),"\n",(0,a.jsx)(e.h3,{id:"593-\ub2e4\ucc28\uc6d0-\ub370\uc774\ud130-\ud53c\ubc97-\ubc0f-\ubd84\uc11d",children:"5.9.3 \ub2e4\ucc28\uc6d0 \ub370\uc774\ud130 \ud53c\ubc97 \ubc0f \ubd84\uc11d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ubcf5\uc7a1\ud55c \ud310\ub9e4 \ub370\uc774\ud130\nnp.random.seed(42)\ndata = []\nfor _ in range(1000):\n    data.append({\n        'date': np.random.choice(pd.date_range('2024-01-01', '2024-12-31', freq='D')),\n        'region': np.random.choice(['\uc11c\uc6b8', '\uacbd\uae30', '\ubd80\uc0b0', '\ub300\uad6c']),\n        'category': np.random.choice(['\uc804\uc790\uc81c\ud488', '\uc758\ub958', '\uc2dd\ud488', '\ub3c4\uc11c']),\n        'channel': np.random.choice(['\uc628\ub77c\uc778', '\uc624\ud504\ub77c\uc778']),\n        'sales': np.random.randint(10000, 100000),\n        'quantity': np.random.randint(1, 20)\n    })\n\ndf = pd.DataFrame(data)\ndf['month'] = df['date'].dt.to_period('M')\n\n# 1. \ub2e4\ucc28\uc6d0 \ud53c\ubc97 \ud14c\uc774\ube14\npivot = pd.pivot_table(\n    df,\n    values=['sales', 'quantity'],\n    index=['region', 'category'],\n    columns='channel',\n    aggfunc={\n        'sales': ['sum', 'mean'],\n        'quantity': 'sum'\n    },\n    fill_value=0,\n    margins=True\n)\n\nprint(\"\ub2e4\ucc28\uc6d0 \ud53c\ubc97 \ud14c\uc774\ube14:\")\nprint(pivot)\n\n# 2. \uc9c0\uc5ed\ubcc4, \uce74\ud14c\uace0\ub9ac\ubcc4 \uc131\uc7a5\ub960 \ubd84\uc11d\nmonthly_sales = df.groupby(['month', 'region', 'category'])['sales'].sum().reset_index()\nmonthly_sales = monthly_sales.sort_values(['region', 'category', 'month'])\n\n# \uc804\uc6d4 \ub300\ube44 \uc131\uc7a5\ub960\nmonthly_sales['growth_rate'] = monthly_sales.groupby(['region', 'category'])['sales'].pct_change() * 100\n\nprint(\"\\n\uc6d4\ubcc4 \uc131\uc7a5\ub960 (\uc0d8\ud50c):\")\nprint(monthly_sales.head(20))\n\n# 3. \ucc44\ub110\ubcc4 \uae30\uc5ec\ub3c4 \ubd84\uc11d\nchannel_contribution = df.groupby(['region', 'channel'])['sales'].sum().reset_index()\ntotal_by_region = channel_contribution.groupby('region')['sales'].transform('sum')\nchannel_contribution['contribution_pct'] = (channel_contribution['sales'] / total_by_region * 100).round(2)\n\nchannel_pivot = channel_contribution.pivot(\n    index='region',\n    columns='channel',\n    values='contribution_pct'\n)\n\nprint(\"\\n\ucc44\ub110\ubcc4 \uae30\uc5ec\ub3c4 (%):\")\nprint(channel_pivot)\n\n# 4. \uc0c1\uc704 \uc131\uacfc \uc870\ud569 \ucc3e\uae30\ntop_combinations = df.groupby(['region', 'category', 'channel']).agg({\n    'sales': 'sum',\n    'quantity': 'sum'\n}).reset_index()\n\ntop_combinations['avg_price'] = top_combinations['sales'] / top_combinations['quantity']\ntop_combinations = top_combinations.nlargest(10, 'sales')\n\nprint(\"\\n\uc0c1\uc704 10\uac1c \uc870\ud569:\")\nprint(top_combinations)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"594-\uace0\uae09-\uadf8\ub8f9\ubcc4-\ubcc0\ud658",children:"5.9.4 \uace0\uae09 \uadf8\ub8f9\ubcc4 \ubcc0\ud658"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc9c1\uc6d0 \uc131\uacfc \ub370\uc774\ud130\nnp.random.seed(42)\nemployees = pd.DataFrame({\n    'employee_id': range(1, 51),\n    'department': np.random.choice(['\uc601\uc5c5', '\uac1c\ubc1c', '\ub9c8\ucf00\ud305', '\uc778\uc0ac'], 50),\n    'level': np.random.choice(['\uc8fc\ub2c8\uc5b4', '\uc2dc\ub2c8\uc5b4', '\ub9e4\ub2c8\uc800'], 50),\n    'sales': np.random.randint(50, 200, 50),\n    'projects': np.random.randint(1, 10, 50),\n    'satisfaction': np.random.randint(1, 11, 50)\n})\n\n# 1. \ubd80\uc11c\ubcc4 \uc0c1\ub300 \uc21c\uc704\nemployees['dept_rank'] = employees.groupby('department')['sales'].rank(ascending=False)\n\n# 2. \ubd80\uc11c \ud3c9\uade0 \ub300\ube44 \ud3b8\ucc28\nemployees['dept_avg'] = employees.groupby('department')['sales'].transform('mean')\nemployees['vs_dept_avg'] = ((employees['sales'] / employees['dept_avg'] - 1) * 100).round(2)\n\n# 3. \ubd80\uc11c \ub0b4 \ubc31\ubd84\uc704\nemployees['dept_percentile'] = employees.groupby('department')['sales'].transform(\n    lambda x: x.rank(pct=True) * 100\n).round(2)\n\n# 4. \ub808\ubca8\ubcc4 \uc815\uaddc\ud654\nemployees['level_normalized'] = employees.groupby('level')['sales'].transform(\n    lambda x: (x - x.mean()) / x.std()\n).round(2)\n\n# 5. \ubd80\uc11c\ubcc4 \uc0c1\uc704 3\uba85 \ud50c\ub798\uadf8\nemployees['top3_in_dept'] = employees.groupby('department')['sales'].transform(\n    lambda x: x.rank(ascending=False) <= 3\n)\n\nprint(\"\uc9c1\uc6d0 \uc131\uacfc \ubd84\uc11d:\")\nprint(employees.sort_values(['department', 'dept_rank']))\n\n# \ubd80\uc11c\ubcc4 \ud1b5\uacc4\ndept_stats = employees.groupby('department').agg({\n    'sales': ['mean', 'std', 'min', 'max'],\n    'projects': 'mean',\n    'satisfaction': 'mean'\n}).round(2)\n\nprint(\"\\n\ubd80\uc11c\ubcc4 \ud1b5\uacc4:\")\nprint(dept_stats)\n"})}),"\n",(0,a.jsx)(e.admonition,{title:"\uc2e4\uc804 \ud301",type:"tip",children:(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ub300\uc6a9\ub7c9 \ub370\uc774\ud130"}),": \uccad\ud06c \ucc98\ub9ac\uc640 \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654\ub97c \ud56d\uc0c1 \uace0\ub824\ud558\uc138\uc694"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\uc131\ub2a5"}),": \ubc18\ubcf5\ubb38 \ub300\uc2e0 \ubca1\ud130\ud654 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\uc138\uc694"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\uba54\ubaa8\ub9ac"}),": \ud544\uc694\ud55c \uc5f4\ub9cc \uc120\ud0dd\ud558\uace0, \uce74\ud14c\uace0\ub9ac \ud0c0\uc785\uc744 \ud65c\uc6a9\ud558\uc138\uc694"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\uac00\ub3c5\uc131"}),": \uba54\uc11c\ub4dc \uccb4\uc774\ub2dd\uc744 \uc0ac\uc6a9\ud558\ub418, \ubcf5\uc7a1\ud55c \uacbd\uc6b0 \uc911\uac04 \uacb0\uacfc\ub97c \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uc138\uc694"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\uac80\uc99d"}),": \ud56d\uc0c1 \uacb0\uacfc\ub97c \uc0d8\ud50c\ub9c1\ud558\uc5ec \ud655\uc778\ud558\uc138\uc694"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"\uc5f0\uc2b5-\ubb38\uc81c",children:"\uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-1-\ubcf5\ud569-\ub370\uc774\ud130-\uacb0\ud569",children:"\ubb38\uc81c 1: \ubcf5\ud569 \ub370\uc774\ud130 \uacb0\ud569"}),"\n",(0,a.jsx)(e.p,{children:"\ub450 \uac1c\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uc5ec\ub7ec \ubc29\uc2dd\uc73c\ub85c \uacb0\ud569\ud558\uace0 \ucc28\uc774\ub97c \ubd84\uc11d\ud558\uc138\uc694."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub370\uc774\ud130\norders = pd.DataFrame({\n    'order_id': [1, 2, 3, 4, 5],\n    'customer_id': [101, 102, 103, 104, 105],\n    'amount': [1000, 1500, 2000, 2500, 3000]\n})\n\ncustomers = pd.DataFrame({\n    'customer_id': [101, 102, 103, 106, 107],\n    'name': ['\uae40\ucca0\uc218', '\uc774\uc601\ud76c', '\ubc15\ubbfc\uc218', '\uc815\uc218\ud604', '\ucd5c\uc9c0\uc740'],\n    'grade': ['Gold', 'Silver', 'Gold', 'Bronze', 'Silver']\n})\n\n# 1. Inner, Left, Right, Outer join \uc218\ud589\n# 2. \uac01 \uc870\uc778\uc758 \uacb0\uacfc \ud589 \uc218 \ube44\uad50\n# 3. \uace0\uac1d \ub4f1\uae09\ubcc4 \ucd1d \uc8fc\ubb38 \uae08\uc561 \uacc4\uc0b0\n"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# 1. \ub2e4\uc591\ud55c \uc870\uc778\ninner = pd.merge(orders, customers, on='customer_id', how='inner')\nleft = pd.merge(orders, customers, on='customer_id', how='left')\nright = pd.merge(orders, customers, on='customer_id', how='right')\nouter = pd.merge(orders, customers, on='customer_id', how='outer')\n\nprint(f\"Inner join: {len(inner)} rows\")\nprint(f\"Left join: {len(left)} rows\")\nprint(f\"Right join: {len(right)} rows\")\nprint(f\"Outer join: {len(outer)} rows\")\n\n# 2. Inner join \uacb0\uacfc\nprint(\"\\nInner join result:\")\nprint(inner)\n\n# 3. \uace0\uac1d \ub4f1\uae09\ubcc4 \ucd1d \uc8fc\ubb38 \uae08\uc561\ngrade_sales = inner.groupby('grade')['amount'].sum().sort_values(ascending=False)\nprint(\"\\n\uace0\uac1d \ub4f1\uae09\ubcc4 \ucd1d \uc8fc\ubb38 \uae08\uc561:\")\nprint(grade_sales)\n\n# \ucd94\uac00: \uace0\uac1d\ubcc4 \ud1b5\uacc4\ncustomer_stats = inner.groupby('name').agg({\n    'order_id': 'count',\n    'amount': ['sum', 'mean']\n})\ncustomer_stats.columns = ['\uc8fc\ubb38\uc218', '\ucd1d\uae08\uc561', '\ud3c9\uade0\uae08\uc561']\nprint(\"\\n\uace0\uac1d\ubcc4 \ud1b5\uacc4:\")\nprint(customer_stats)\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-2-multiindex-\ud65c\uc6a9",children:"\ubb38\uc81c 2: MultiIndex \ud65c\uc6a9"}),"\n",(0,a.jsx)(e.p,{children:"MultiIndex\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcf5\uc7a1\ud55c \ub370\uc774\ud130\ub97c \uad6c\uc870\ud654\ud558\uace0 \ubd84\uc11d\ud558\uc138\uc694."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc5ec\ub7ec \uc9c0\uc810\uc758 \ubd84\uae30\ubcc4 \ub9e4\ucd9c \ub370\uc774\ud130 \uc0dd\uc131\n# \uc778\ub371\uc2a4: (\uc9c0\uc810, \ubd84\uae30)\n# \uc5f4: (\uc81c\ud488\uad70, \uc9c0\ud45c) - \uc81c\ud488\uad70(A, B), \uc9c0\ud45c(\ub9e4\ucd9c, \uc218\ub7c9)\n# \ub2e4\uc74c\uc744 \uc218\ud589\ud558\uc138\uc694:\n# 1. MultiIndex DataFrame \uc0dd\uc131\n# 2. \ud2b9\uc815 \uc9c0\uc810\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130 \uc870\ud68c\n# 3. \ud2b9\uc815 \ubd84\uae30\uc758 \ubaa8\ub4e0 \uc9c0\uc810 \ub370\uc774\ud130 \uc870\ud68c\n# 4. \uc9c0\uc810\ubcc4 \ucd1d \ub9e4\ucd9c \uacc4\uc0b0\n# 5. \uc81c\ud488\uad70\ubcc4 \ud3c9\uade0 \uc218\ub7c9 \uacc4\uc0b0\n"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# 1. MultiIndex DataFrame \uc0dd\uc131\nnp.random.seed(42)\nindex = pd.MultiIndex.from_product(\n    [['\uac15\ub0a8\uc810', '\uac15\ubd81\uc810', '\uac15\ub3d9\uc810'], ['Q1', 'Q2', 'Q3', 'Q4']],\n    names=['\uc9c0\uc810', '\ubd84\uae30']\n)\n\ncolumns = pd.MultiIndex.from_product(\n    [['\uc81c\ud488A', '\uc81c\ud488B'], ['\ub9e4\ucd9c', '\uc218\ub7c9']],\n    names=['\uc81c\ud488\uad70', '\uc9c0\ud45c']\n)\n\ndata = np.random.randint(100, 1000, size=(12, 4))\ndf = pd.DataFrame(data, index=index, columns=columns)\nprint(\"MultiIndex DataFrame:\")\nprint(df)\n\n# 2. \ud2b9\uc815 \uc9c0\uc810\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130\nprint(\"\\n\uac15\ub0a8\uc810 \ub370\uc774\ud130:\")\nprint(df.loc['\uac15\ub0a8\uc810'])\n\n# 3. \ud2b9\uc815 \ubd84\uae30\uc758 \ubaa8\ub4e0 \uc9c0\uc810 \ub370\uc774\ud130\nprint(\"\\nQ1 \ub370\uc774\ud130:\")\nprint(df.xs('Q1', level='\ubd84\uae30'))\n\n# 4. \uc9c0\uc810\ubcc4 \ucd1d \ub9e4\ucd9c\nsales_columns = df.loc[:, pd.IndexSlice[:, '\ub9e4\ucd9c']]\nbranch_total_sales = sales_columns.sum(axis=1).groupby('\uc9c0\uc810').sum()\nprint(\"\\n\uc9c0\uc810\ubcc4 \ucd1d \ub9e4\ucd9c:\")\nprint(branch_total_sales)\n\n# 5. \uc81c\ud488\uad70\ubcc4 \ud3c9\uade0 \uc218\ub7c9\nquantity_columns = df.loc[:, pd.IndexSlice[:, '\uc218\ub7c9']]\nprint(\"\\n\uc81c\ud488\uad70\ubcc4 \ud3c9\uade0 \uc218\ub7c9:\")\nprint(quantity_columns.mean())\n\n# \ucd94\uac00: \ubd84\uae30\ubcc4 \uc131\uc7a5\ub960\nquarterly_sales = df.loc[:, pd.IndexSlice[:, '\ub9e4\ucd9c']].sum(axis=1).groupby('\ubd84\uae30').sum()\nquarterly_growth = quarterly_sales.pct_change() * 100\nprint(\"\\n\ubd84\uae30\ubcc4 \uc131\uc7a5\ub960 (%):\")\nprint(quarterly_growth)\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-3-\uc2dc\uacc4\uc5f4-\ubd84\uc11d",children:"\ubb38\uc81c 3: \uc2dc\uacc4\uc5f4 \ubd84\uc11d"}),"\n",(0,a.jsx)(e.p,{children:"\uc8fc\uc2dd \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uace0 \uae30\uc220\uc801 \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud558\uc138\uc694."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# 1\ub144\uce58 \uc77c\ubcc4 \uc8fc\uac00 \ub370\uc774\ud130 \uc0dd\uc131\n# \ub2e4\uc74c\uc744 \uacc4\uc0b0\ud558\uc138\uc694:\n# 1. 20\uc77c, 60\uc77c \uc774\ub3d9 \ud3c9\uade0\n# 2. \ubcfc\ub9b0\uc800 \ubc34\ub4dc (20\uc77c, 2 \ud45c\uc900\ud3b8\ucc28)\n# 3. \uc77c\uc77c \uc218\uc775\ub960\uacfc \ub204\uc801 \uc218\uc775\ub960\n# 4. \uc6d4\ubcc4 \ud3c9\uade0 \uac70\ub798\ub7c9\n# 5. \ubcc0\ub3d9\uc131 (20\uc77c \uc774\ub3d9 \ud45c\uc900\ud3b8\ucc28)\n"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc8fc\uc2dd \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\ndates = pd.date_range('2024-01-01', periods=252, freq='B')  # \uc601\uc5c5\uc77c\n\n# \ub79c\ub364\uc6cc\ud06c\ub85c \uc8fc\uac00 \uc0dd\uc131\nreturns = np.random.randn(252) * 0.02\nprice = 100 * (1 + returns).cumprod()\n\nstock = pd.DataFrame({\n    'close': price,\n    'volume': np.random.randint(1000000, 5000000, 252)\n}, index=dates)\n\n# 1. \uc774\ub3d9 \ud3c9\uade0\nstock['MA20'] = stock['close'].rolling(window=20).mean()\nstock['MA60'] = stock['close'].rolling(window=60).mean()\n\n# 2. \ubcfc\ub9b0\uc800 \ubc34\ub4dc\nstock['BB_middle'] = stock['close'].rolling(window=20).mean()\nstock['BB_std'] = stock['close'].rolling(window=20).std()\nstock['BB_upper'] = stock['BB_middle'] + (2 * stock['BB_std'])\nstock['BB_lower'] = stock['BB_middle'] - (2 * stock['BB_std'])\n\n# 3. \uc218\uc775\ub960\nstock['daily_return'] = stock['close'].pct_change()\nstock['cumulative_return'] = (1 + stock['daily_return']).cumprod() - 1\n\n# 4. \uc6d4\ubcc4 \ud3c9\uade0 \uac70\ub798\ub7c9\nmonthly_volume = stock['volume'].resample('M').mean()\nprint(\"\uc6d4\ubcc4 \ud3c9\uade0 \uac70\ub798\ub7c9:\")\nprint(monthly_volume)\n\n# 5. \ubcc0\ub3d9\uc131\nstock['volatility'] = stock['daily_return'].rolling(window=20).std() * np.sqrt(252)\n\n# \uacb0\uacfc \ucd9c\ub825\nprint(\"\\n\uc8fc\uc2dd \ub370\uc774\ud130 \ubd84\uc11d:\")\nprint(stock[['close', 'MA20', 'MA60', 'BB_upper', 'BB_lower',\n             'daily_return', 'volatility']].tail(20))\n\n# \ud1b5\uacc4 \uc694\uc57d\nprint(\"\\n\uae30\uc220\uc801 \uc9c0\ud45c \uc694\uc57d:\")\nprint(stock[['daily_return', 'volatility']].describe())\n\n# \uace8\ub4e0 \ud06c\ub85c\uc2a4/\ub370\ub4dc \ud06c\ub85c\uc2a4 \ud0d0\uc9c0\nstock['signal'] = 0\nstock.loc[stock['MA20'] > stock['MA60'], 'signal'] = 1\nstock.loc[stock['MA20'] < stock['MA60'], 'signal'] = -1\nstock['position_change'] = stock['signal'].diff()\n\ngolden_crosses = stock[stock['position_change'] == 2].index\ndead_crosses = stock[stock['position_change'] == -2].index\n\nprint(f\"\\n\uace8\ub4e0 \ud06c\ub85c\uc2a4: {len(golden_crosses)}\ud68c\")\nprint(f\"\ub370\ub4dc \ud06c\ub85c\uc2a4: {len(dead_crosses)}\ud68c\")\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-4-\uc131\ub2a5-\ucd5c\uc801\ud654",children:"\ubb38\uc81c 4: \uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,a.jsx)(e.p,{children:"\ub300\uc6a9\ub7c9 \ub370\uc774\ud130\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uc138\uc694."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# 100\ub9cc \ud589\uc758 \ub370\uc774\ud130\ud504\ub808\uc784 \uc0dd\uc131\n# \ub2e4\uc74c\uc744 \ube44\uad50\ud558\uc138\uc694:\n# 1. \ubc18\ubcf5\ubb38 vs \ubca1\ud130\ud654 \uc5f0\uc0b0\n# 2. apply vs NumPy \ud568\uc218\n# 3. \uc77c\ubc18 \uc5f0\uc0b0 vs eval\n# \uac01 \ubc29\ubc95\uc758 \uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud558\uace0 \ube44\uad50\ud558\uc138\uc694\n"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import time\n\n# \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \uc0dd\uc131\nn = 1_000_000\ndf = pd.DataFrame({\n    'A': np.random.randn(n),\n    'B': np.random.randn(n),\n    'C': np.random.randint(0, 100, n)\n})\n\nprint(\"\ub370\uc774\ud130 \ud06c\uae30:\", df.shape)\nprint(f\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB\\n\")\n\n# 1. \ubc18\ubcf5\ubb38 vs \ubca1\ud130\ud654 (\uc0d8\ud50c\ub9c1\ud558\uc5ec \ud14c\uc2a4\ud2b8)\nsample_size = 10000\ndf_sample = df.head(sample_size)\n\n# \ubc18\ubcf5\ubb38\nstart = time.time()\nresult_loop = []\nfor i in range(len(df_sample)):\n    result_loop.append(df_sample.iloc[i]['A'] * 2 + df_sample.iloc[i]['B'])\nloop_time = time.time() - start\n\n# \ubca1\ud130\ud654\nstart = time.time()\nresult_vec = df_sample['A'] * 2 + df_sample['B']\nvec_time = time.time() - start\n\nprint(\"=== \ubc18\ubcf5\ubb38 vs \ubca1\ud130\ud654 (10,000 rows) ===\")\nprint(f\"\ubc18\ubcf5\ubb38: {loop_time:.4f}\ucd08\")\nprint(f\"\ubca1\ud130\ud654: {vec_time:.4f}\ucd08\")\nprint(f\"\uc18d\ub3c4 \ud5a5\uc0c1: {loop_time/vec_time:.1f}\ubc30\\n\")\n\n# 2. apply vs NumPy \ud568\uc218 (\uc804\uccb4 \ub370\uc774\ud130)\n# apply\nstart = time.time()\nresult_apply = df['A'].apply(lambda x: x ** 2)\napply_time = time.time() - start\n\n# NumPy\nstart = time.time()\nresult_numpy = np.power(df['A'].values, 2)\nnumpy_time = time.time() - start\n\n# \ubca1\ud130\ud654\nstart = time.time()\nresult_vec2 = df['A'] ** 2\nvec2_time = time.time() - start\n\nprint(\"=== apply vs NumPy vs \ubca1\ud130\ud654 (1,000,000 rows) ===\")\nprint(f\"apply: {apply_time:.4f}\ucd08\")\nprint(f\"NumPy: {numpy_time:.4f}\ucd08\")\nprint(f\"\ubca1\ud130\ud654: {vec2_time:.4f}\ucd08\")\nprint(f\"apply \ub300\ube44 NumPy \ud5a5\uc0c1: {apply_time/numpy_time:.1f}\ubc30\")\nprint(f\"apply \ub300\ube44 \ubca1\ud130\ud654 \ud5a5\uc0c1: {apply_time/vec2_time:.1f}\ubc30\\n\")\n\n# 3. \uc77c\ubc18 \uc5f0\uc0b0 vs eval\n# \uc77c\ubc18 \uc5f0\uc0b0\nstart = time.time()\nresult_normal = df['A'] + df['B'] * df['C'] - df['A'] / df['B']\nnormal_time = time.time() - start\n\n# eval\nstart = time.time()\nresult_eval = df.eval('A + B * C - A / B')\neval_time = time.time() - start\n\nprint(\"=== \uc77c\ubc18 \uc5f0\uc0b0 vs eval (1,000,000 rows) ===\")\nprint(f\"\uc77c\ubc18 \uc5f0\uc0b0: {normal_time:.4f}\ucd08\")\nprint(f\"eval: {eval_time:.4f}\ucd08\")\nprint(f\"\uc18d\ub3c4 \ud5a5\uc0c1: {normal_time/eval_time:.1f}\ubc30\\n\")\n\n# 4. query vs \uc77c\ubc18 \ud544\ud130\ub9c1\n# \uc77c\ubc18 \ud544\ud130\ub9c1\nstart = time.time()\nresult_filter = df[(df['A'] > 0) & (df['B'] < 0) & (df['C'] > 50)]\nfilter_time = time.time() - start\n\n# query\nstart = time.time()\nresult_query = df.query('A > 0 and B < 0 and C > 50')\nquery_time = time.time() - start\n\nprint(\"=== \uc77c\ubc18 \ud544\ud130\ub9c1 vs query ===\")\nprint(f\"\uc77c\ubc18 \ud544\ud130\ub9c1: {filter_time:.4f}\ucd08\")\nprint(f\"query: {query_time:.4f}\ucd08\")\nprint(f\"\uc18d\ub3c4 \ud5a5\uc0c1: {filter_time/query_time:.1f}\ubc30\\n\")\n\n# \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654\ndf_optimized = df.copy()\nprint(\"=== \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654 ===\")\nprint(f\"\ucd5c\uc801\ud654 \uc804: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\n\n# \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654\ndf_optimized['C'] = pd.to_numeric(df_optimized['C'], downcast='integer')\ndf_optimized['A'] = pd.to_numeric(df_optimized['A'], downcast='float')\ndf_optimized['B'] = pd.to_numeric(df_optimized['B'], downcast='float')\n\nprint(f\"\ucd5c\uc801\ud654 \ud6c4: {df_optimized.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\nreduction = (1 - df_optimized.memory_usage(deep=True).sum() / df.memory_usage(deep=True).sum()) * 100\nprint(f\"\uba54\ubaa8\ub9ac \uc808\uac10: {reduction:.1f}%\")\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-5-\uc885\ud569-\ubd84\uc11d-\ud504\ub85c\uc81d\ud2b8",children:"\ubb38\uc81c 5: \uc885\ud569 \ubd84\uc11d \ud504\ub85c\uc81d\ud2b8"}),"\n",(0,a.jsx)(e.p,{children:"\uc804\uc790\uc0c1\uac70\ub798 \ub370\uc774\ud130\ub97c \uc885\ud569\uc801\uc73c\ub85c \ubd84\uc11d\ud558\uc138\uc694."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub370\uc774\ud130 \uc0dd\uc131 \ucf54\ub4dc\nnp.random.seed(42)\nn_orders = 10000\norders_df = pd.DataFrame({\n    'order_id': range(1, n_orders + 1),\n    'order_date': pd.date_range('2023-01-01', periods=n_orders, freq='H'),\n    'customer_id': np.random.randint(1, 1001, n_orders),\n    'product_category': np.random.choice(['\uc804\uc790\uc81c\ud488', '\uc758\ub958', '\uc2dd\ud488', '\ub3c4\uc11c', '\uc0dd\ud65c\uc6a9\ud488'], n_orders),\n    'amount': np.random.randint(5000, 500000, n_orders),\n    'quantity': np.random.randint(1, 10, n_orders),\n    'payment_method': np.random.choice(['\uce74\ub4dc', '\uacc4\uc88c\uc774\uccb4', '\uac04\ud3b8\uacb0\uc81c'], n_orders),\n    'region': np.random.choice(['\uc11c\uc6b8', '\uacbd\uae30', '\ubd80\uc0b0', '\ub300\uad6c', '\uad11\uc8fc'], n_orders)\n})\n\n# \ub2e4\uc74c\uc744 \uc218\ud589\ud558\uc138\uc694:\n# 1. \uc77c\ubcc4/\uc8fc\ubcc4/\uc6d4\ubcc4 \ub9e4\ucd9c \ucd94\uc774 \ubd84\uc11d\n# 2. \uace0\uac1d \uc138\uadf8\uba3c\ud14c\uc774\uc158 (RFM \ubd84\uc11d)\n# 3. \uc81c\ud488 \uce74\ud14c\uace0\ub9ac\ubcc4 \uc131\uacfc \ubd84\uc11d\n# 4. \uacb0\uc81c \uc218\ub2e8\ubcc4 \ubd84\uc11d\n# 5. \uc9c0\uc5ed\ubcc4 \ubd84\uc11d\n# 6. \uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38 \ud328\ud134 \ubd84\uc11d\n"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub370\uc774\ud130 \uc900\ube44\nnp.random.seed(42)\nn_orders = 10000\norders_df = pd.DataFrame({\n    'order_id': range(1, n_orders + 1),\n    'order_date': pd.date_range('2023-01-01', periods=n_orders, freq='H'),\n    'customer_id': np.random.randint(1, 1001, n_orders),\n    'product_category': np.random.choice(['\uc804\uc790\uc81c\ud488', '\uc758\ub958', '\uc2dd\ud488', '\ub3c4\uc11c', '\uc0dd\ud65c\uc6a9\ud488'], n_orders),\n    'amount': np.random.randint(5000, 500000, n_orders),\n    'quantity': np.random.randint(1, 10, n_orders),\n    'payment_method': np.random.choice(['\uce74\ub4dc', '\uacc4\uc88c\uc774\uccb4', '\uac04\ud3b8\uacb0\uc81c'], n_orders),\n    'region': np.random.choice(['\uc11c\uc6b8', '\uacbd\uae30', '\ubd80\uc0b0', '\ub300\uad6c', '\uad11\uc8fc'], n_orders)\n})\n\norders_df['unit_price'] = orders_df['amount'] / orders_df['quantity']\n\nprint(\"=== \uc804\uc790\uc0c1\uac70\ub798 \uc885\ud569 \ubd84\uc11d ===\\n\")\nprint(f\"\ubd84\uc11d \uae30\uac04: {orders_df['order_date'].min()} ~ {orders_df['order_date'].max()}\")\nprint(f\"\ucd1d \uc8fc\ubb38 \uc218: {len(orders_df):,}\")\nprint(f\"\ucd1d \ub9e4\ucd9c\uc561: {orders_df['amount'].sum():,}\uc6d0\\n\")\n\n# 1. \ub9e4\ucd9c \ucd94\uc774 \ubd84\uc11d\nprint(\"=== 1. \ub9e4\ucd9c \ucd94\uc774 \ubd84\uc11d ===\")\norders_df_indexed = orders_df.set_index('order_date')\n\ndaily_sales = orders_df_indexed.resample('D')['amount'].agg(['sum', 'count', 'mean'])\ndaily_sales.columns = ['\ub9e4\ucd9c', '\uc8fc\ubb38\uc218', '\ud3c9\uade0\uc8fc\ubb38\uae08\uc561']\nprint(\"\\n\uc77c\ubcc4 \ub9e4\ucd9c (\ucd5c\uadfc 10\uc77c):\")\nprint(daily_sales.tail(10))\n\nweekly_sales = orders_df_indexed.resample('W')['amount'].agg(['sum', 'count'])\nweekly_sales.columns = ['\ub9e4\ucd9c', '\uc8fc\ubb38\uc218']\nprint(\"\\n\uc8fc\ubcc4 \ub9e4\ucd9c:\")\nprint(weekly_sales)\n\nmonthly_sales = orders_df_indexed.resample('M')['amount'].agg(['sum', 'count', 'mean'])\nmonthly_sales.columns = ['\ub9e4\ucd9c', '\uc8fc\ubb38\uc218', '\ud3c9\uade0\uc8fc\ubb38\uae08\uc561']\nmonthly_sales['\uc804\uc6d4\ub300\ube44'] = monthly_sales['\ub9e4\ucd9c'].pct_change() * 100\nprint(\"\\n\uc6d4\ubcc4 \ub9e4\ucd9c:\")\nprint(monthly_sales)\n\n# 2. RFM \ubd84\uc11d\nprint(\"\\n=== 2. \uace0\uac1d \uc138\uadf8\uba3c\ud14c\uc774\uc158 (RFM) ===\")\nreference_date = orders_df['order_date'].max()\n\nrfm = orders_df.groupby('customer_id').agg({\n    'order_date': lambda x: (reference_date - x.max()).days,\n    'order_id': 'count',\n    'amount': 'sum'\n})\nrfm.columns = ['Recency', 'Frequency', 'Monetary']\n\n# RFM \uc810\uc218 (1-5)\nrfm['R_Score'] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1], duplicates='drop')\nrfm['F_Score'] = pd.qcut(rfm['Frequency'].rank(method='first'), 5, labels=[1, 2, 3, 4, 5], duplicates='drop')\nrfm['M_Score'] = pd.qcut(rfm['Monetary'], 5, labels=[1, 2, 3, 4, 5], duplicates='drop')\n\nrfm['RFM_Score'] = (rfm['R_Score'].astype(int) +\n                     rfm['F_Score'].astype(int) +\n                     rfm['M_Score'].astype(int))\n\n# \uace0\uac1d \uc138\uadf8\uba3c\ud2b8 \uc815\uc758\ndef segment_customer(row):\n    if row['RFM_Score'] >= 12:\n        return 'Champions'\n    elif row['RFM_Score'] >= 9:\n        return 'Loyal'\n    elif row['RFM_Score'] >= 6:\n        return 'Potential'\n    else:\n        return 'At Risk'\n\nrfm['Segment'] = rfm.apply(segment_customer, axis=1)\n\nsegment_summary = rfm.groupby('Segment').agg({\n    'Recency': 'mean',\n    'Frequency': 'mean',\n    'Monetary': ['mean', 'sum', 'count']\n}).round(2)\n\nprint(\"\\n\uace0\uac1d \uc138\uadf8\uba3c\ud2b8\ubcc4 \ud1b5\uacc4:\")\nprint(segment_summary)\n\n# 3. \uc81c\ud488 \uce74\ud14c\uace0\ub9ac\ubcc4 \ubd84\uc11d\nprint(\"\\n=== 3. \uc81c\ud488 \uce74\ud14c\uace0\ub9ac\ubcc4 \uc131\uacfc \ubd84\uc11d ===\")\ncategory_analysis = orders_df.groupby('product_category').agg({\n    'order_id': 'count',\n    'amount': ['sum', 'mean'],\n    'quantity': 'sum'\n}).round(2)\ncategory_analysis.columns = ['\uc8fc\ubb38\uc218', '\ucd1d\ub9e4\ucd9c', '\ud3c9\uade0\uc8fc\ubb38\uae08\uc561', '\ud310\ub9e4\uc218\ub7c9']\n\n# \ub9e4\ucd9c \ube44\uc911\ncategory_analysis['\ub9e4\ucd9c\ube44\uc911(%)'] = (\n    category_analysis['\ucd1d\ub9e4\ucd9c'] / category_analysis['\ucd1d\ub9e4\ucd9c'].sum() * 100\n).round(2)\n\nprint(category_analysis.sort_values('\ucd1d\ub9e4\ucd9c', ascending=False))\n\n# \uce74\ud14c\uace0\ub9ac\ubcc4 \uc6d4\ubcc4 \ud2b8\ub80c\ub4dc\ncategory_monthly = orders_df.set_index('order_date').groupby([\n    pd.Grouper(freq='M'), 'product_category'\n])['amount'].sum().unstack(fill_value=0)\n\nprint(\"\\n\uce74\ud14c\uace0\ub9ac\ubcc4 \uc6d4\ubcc4 \ub9e4\ucd9c:\")\nprint(category_monthly)\n\n# 4. \uacb0\uc81c \uc218\ub2e8\ubcc4 \ubd84\uc11d\nprint(\"\\n=== 4. \uacb0\uc81c \uc218\ub2e8\ubcc4 \ubd84\uc11d ===\")\npayment_analysis = orders_df.groupby('payment_method').agg({\n    'order_id': 'count',\n    'amount': ['sum', 'mean']\n}).round(2)\npayment_analysis.columns = ['\uc8fc\ubb38\uc218', '\ucd1d\ub9e4\ucd9c', '\ud3c9\uade0\uc8fc\ubb38\uae08\uc561']\npayment_analysis['\ube44\uc911(%)'] = (\n    payment_analysis['\uc8fc\ubb38\uc218'] / payment_analysis['\uc8fc\ubb38\uc218'].sum() * 100\n).round(2)\n\nprint(payment_analysis.sort_values('\ucd1d\ub9e4\ucd9c', ascending=False))\n\n# \uacb0\uc81c\uc218\ub2e8\ubcc4 \uce74\ud14c\uace0\ub9ac \uc120\ud638\ub3c4\npayment_category = pd.crosstab(\n    orders_df['payment_method'],\n    orders_df['product_category'],\n    values=orders_df['amount'],\n    aggfunc='sum'\n)\nprint(\"\\n\uacb0\uc81c\uc218\ub2e8\ubcc4 \uce74\ud14c\uace0\ub9ac \ub9e4\ucd9c:\")\nprint(payment_category)\n\n# 5. \uc9c0\uc5ed\ubcc4 \ubd84\uc11d\nprint(\"\\n=== 5. \uc9c0\uc5ed\ubcc4 \ubd84\uc11d ===\")\nregion_analysis = orders_df.groupby('region').agg({\n    'order_id': 'count',\n    'customer_id': 'nunique',\n    'amount': ['sum', 'mean']\n}).round(2)\nregion_analysis.columns = ['\uc8fc\ubb38\uc218', '\uace0\uac1d\uc218', '\ucd1d\ub9e4\ucd9c', '\ud3c9\uade0\uc8fc\ubb38\uae08\uc561']\nregion_analysis['\uac1d\ub2e8\uac00'] = (\n    region_analysis['\ucd1d\ub9e4\ucd9c'] / region_analysis['\uace0\uac1d\uc218']\n).round(2)\n\nprint(region_analysis.sort_values('\ucd1d\ub9e4\ucd9c', ascending=False))\n\n# \uc9c0\uc5ed\ubcc4 \uc778\uae30 \uce74\ud14c\uace0\ub9ac\nregion_category = orders_df.groupby(['region', 'product_category'])['amount'].sum()\ntop_category_by_region = region_category.groupby('region').nlargest(1)\nprint(\"\\n\uc9c0\uc5ed\ubcc4 1\uc704 \uce74\ud14c\uace0\ub9ac:\")\nprint(top_category_by_region)\n\n# 6. \uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38 \ud328\ud134\nprint(\"\\n=== 6. \uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38 \ud328\ud134 \ubd84\uc11d ===\")\norders_df['hour'] = orders_df['order_date'].dt.hour\norders_df['day_of_week'] = orders_df['order_date'].dt.dayofweek\norders_df['is_weekend'] = orders_df['day_of_week'].isin([5, 6])\n\n# \uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38\nhourly_pattern = orders_df.groupby('hour').agg({\n    'order_id': 'count',\n    'amount': ['sum', 'mean']\n}).round(2)\nhourly_pattern.columns = ['\uc8fc\ubb38\uc218', '\ucd1d\ub9e4\ucd9c', '\ud3c9\uade0\uc8fc\ubb38\uae08\uc561']\n\nprint(\"\\n\uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38 \ud328\ud134:\")\nprint(hourly_pattern)\n\n# \uc694\uc77c\ubcc4 \ud328\ud134\nday_names = ['\uc6d4', '\ud654', '\uc218', '\ubaa9', '\uae08', '\ud1a0', '\uc77c']\ndaily_pattern = orders_df.groupby('day_of_week').agg({\n    'order_id': 'count',\n    'amount': 'sum'\n})\ndaily_pattern.index = [day_names[i] for i in daily_pattern.index]\ndaily_pattern.columns = ['\uc8fc\ubb38\uc218', '\ucd1d\ub9e4\ucd9c']\n\nprint(\"\\n\uc694\uc77c\ubcc4 \uc8fc\ubb38 \ud328\ud134:\")\nprint(daily_pattern)\n\n# \uc8fc\uc911 vs \uc8fc\ub9d0\nweekend_comparison = orders_df.groupby('is_weekend').agg({\n    'order_id': 'count',\n    'amount': ['sum', 'mean']\n}).round(2)\nweekend_comparison.index = ['\uc8fc\uc911', '\uc8fc\ub9d0']\nweekend_comparison.columns = ['\uc8fc\ubb38\uc218', '\ucd1d\ub9e4\ucd9c', '\ud3c9\uade0\uc8fc\ubb38\uae08\uc561']\n\nprint(\"\\n\uc8fc\uc911/\uc8fc\ub9d0 \ube44\uad50:\")\nprint(weekend_comparison)\n\n# \uc885\ud569 \uc778\uc0ac\uc774\ud2b8\nprint(\"\\n=== \uc885\ud569 \uc778\uc0ac\uc774\ud2b8 ===\")\nprint(f\"1. \uac00\uc7a5 \ub9e4\ucd9c\uc774 \ub192\uc740 \uce74\ud14c\uace0\ub9ac: {category_analysis['\ucd1d\ub9e4\ucd9c'].idxmax()}\")\nprint(f\"2. \uac00\uc7a5 \ub9ce\uc740 \uace0\uac1d \uc138\uadf8\uba3c\ud2b8: {rfm['Segment'].value_counts().idxmax()}\")\nprint(f\"3. \uc120\ud638 \uacb0\uc81c\uc218\ub2e8: {payment_analysis['\uc8fc\ubb38\uc218'].idxmax()}\")\nprint(f\"4. \ucd5c\ub300 \ub9e4\ucd9c \uc9c0\uc5ed: {region_analysis['\ucd1d\ub9e4\ucd9c'].idxmax()}\")\nprint(f\"5. \ud53c\ud06c \uc2dc\uac04\ub300: {hourly_pattern['\uc8fc\ubb38\uc218'].idxmax()}\uc2dc\")\nprint(f\"6. \uc8fc\ubb38\uc774 \uac00\uc7a5 \ub9ce\uc740 \uc694\uc77c: {daily_pattern['\uc8fc\ubb38\uc218'].idxmax()}\")\n"})})]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.p,{children:["\ub2e4\uc74c: ",(0,a.jsx)(e.a,{href:"./visualization",children:"\uc2dc\uac01\ud654"})]})]})}function m(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>s});var t=r(6540);const a={},d=t.createContext(a);function i(n){const e=t.useContext(d);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),t.createElement(d.Provider,{value:e},n.children)}}}]);