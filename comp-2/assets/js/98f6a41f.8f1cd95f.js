"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1530],{6394:(n,e,d)=>{d.r(e),d.d(e,{assets:()=>s,contentTitle:()=>t,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"pandas/data-cleaning","title":"4. \ub370\uc774\ud130 \uc815\uc81c","description":"\ub370\uc774\ud130 \uc815\uc81c(Data Cleaning)\ub294 \ub370\uc774\ud130 \ubd84\uc11d\uc758 \uac00\uc7a5 \uc911\uc694\ud558\uace0 \uc2dc\uac04\uc774 \ub9ce\uc774 \uc18c\uc694\ub418\ub294 \uc791\uc5c5\uc785\ub2c8\ub2e4. \uc2e4\uc81c \ub370\uc774\ud130\ub294 \uacb0\uce21\uce58, \uc911\ubcf5, \uc624\ub958, \uc774\uc0c1\uce58 \ub4f1 \ub2e4\uc591\ud55c \ubb38\uc81c\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc73c\uba70, \uc774\ub97c \uc801\uc808\ud788 \ucc98\ub9ac\ud574\uc57c \uc815\ud655\ud55c \ubd84\uc11d\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.","source":"@site/docs/pandas/data-cleaning.md","sourceDirName":"pandas","slug":"/pandas/data-cleaning","permalink":"/docs/pandas/data-cleaning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pandas/data-cleaning.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"pandasSidebar","previous":{"title":"3. \ub370\uc774\ud130 \uc870\uc791","permalink":"/docs/pandas/data-manipulation"},"next":{"title":"5. \uace0\uae09 \uae30\ub2a5","permalink":"/docs/pandas/advanced"}}');var r=d(4848),l=d(8453);const i={sidebar_position:4},t="4. \ub370\uc774\ud130 \uc815\uc81c",s={},p=[{value:"4.1 \uacb0\uce21\uce58 \ucc98\ub9ac",id:"41-\uacb0\uce21\uce58-\ucc98\ub9ac",level:2},{value:"4.1.1 \uacb0\uce21\uce58 \ud655\uc778",id:"411-\uacb0\uce21\uce58-\ud655\uc778",level:3},{value:"4.1.2 \uacb0\uce21\uce58 \uc81c\uac70",id:"412-\uacb0\uce21\uce58-\uc81c\uac70",level:3},{value:"4.1.3 \uacb0\uce21\uce58 \ucc44\uc6b0\uae30",id:"413-\uacb0\uce21\uce58-\ucc44\uc6b0\uae30",level:3},{value:"4.1.4 \ubcf4\uac04\ubc95 (Interpolation)",id:"414-\ubcf4\uac04\ubc95-interpolation",level:3},{value:"4.1.5 \uc2e4\uc804 \uc608\uc81c: \uc2a4\ub9c8\ud2b8\ud55c \uacb0\uce21\uce58 \ucc98\ub9ac",id:"415-\uc2e4\uc804-\uc608\uc81c-\uc2a4\ub9c8\ud2b8\ud55c-\uacb0\uce21\uce58-\ucc98\ub9ac",level:3},{value:"4.2 \uc911\ubcf5 \ub370\uc774\ud130 \ucc98\ub9ac",id:"42-\uc911\ubcf5-\ub370\uc774\ud130-\ucc98\ub9ac",level:2},{value:"4.2.1 \uc911\ubcf5 \ub370\uc774\ud130 \ud655\uc778",id:"421-\uc911\ubcf5-\ub370\uc774\ud130-\ud655\uc778",level:3},{value:"4.2.2 \uc911\ubcf5 \ub370\uc774\ud130 \uc81c\uac70",id:"422-\uc911\ubcf5-\ub370\uc774\ud130-\uc81c\uac70",level:3},{value:"4.2.3 \uc2e4\uc804 \uc608\uc81c: \ub85c\uadf8 \ub370\uc774\ud130 \uc911\ubcf5 \uc81c\uac70",id:"423-\uc2e4\uc804-\uc608\uc81c-\ub85c\uadf8-\ub370\uc774\ud130-\uc911\ubcf5-\uc81c\uac70",level:3},{value:"4.3 \ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658",id:"43-\ub370\uc774\ud130-\ud0c0\uc785-\ubcc0\ud658",level:2},{value:"4.3.1 \uae30\ubcf8 \ud0c0\uc785 \ubcc0\ud658",id:"431-\uae30\ubcf8-\ud0c0\uc785-\ubcc0\ud658",level:3},{value:"4.3.2 \ubcf5\uc7a1\ud55c \ubcc0\ud658",id:"432-\ubcf5\uc7a1\ud55c-\ubcc0\ud658",level:3},{value:"4.3.3 \ub0a0\uc9dc/\uc2dc\uac04 \ucc98\ub9ac",id:"433-\ub0a0\uc9dc\uc2dc\uac04-\ucc98\ub9ac",level:3},{value:"4.4 \uc774\uc0c1\uce58 \ucc98\ub9ac",id:"44-\uc774\uc0c1\uce58-\ucc98\ub9ac",level:2},{value:"4.4.1 \uc774\uc0c1\uce58 \ud0d0\uc9c0",id:"441-\uc774\uc0c1\uce58-\ud0d0\uc9c0",level:3},{value:"4.4.2 \uc774\uc0c1\uce58 \ucc98\ub9ac",id:"442-\uc774\uc0c1\uce58-\ucc98\ub9ac",level:3},{value:"4.4.3 \ub2e4\ubcc0\ub7c9 \uc774\uc0c1\uce58 \ud0d0\uc9c0",id:"443-\ub2e4\ubcc0\ub7c9-\uc774\uc0c1\uce58-\ud0d0\uc9c0",level:3},{value:"4.5 \ubb38\uc790\uc5f4 \uc815\uc81c",id:"45-\ubb38\uc790\uc5f4-\uc815\uc81c",level:2},{value:"4.5.1 \uae30\ubcf8 \ubb38\uc790\uc5f4 \ucc98\ub9ac",id:"451-\uae30\ubcf8-\ubb38\uc790\uc5f4-\ucc98\ub9ac",level:3},{value:"4.5.2 \uc815\uaddc\ud45c\ud604\uc2dd \ud65c\uc6a9",id:"452-\uc815\uaddc\ud45c\ud604\uc2dd-\ud65c\uc6a9",level:3},{value:"4.5.3 \uace0\uae09 \ubb38\uc790\uc5f4 \uc815\uc81c",id:"453-\uace0\uae09-\ubb38\uc790\uc5f4-\uc815\uc81c",level:3},{value:"4.6 \uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130 \ucc98\ub9ac",id:"46-\uce74\ud14c\uace0\ub9ac-\ub370\uc774\ud130-\ucc98\ub9ac",level:2},{value:"4.6.1 \uce74\ud14c\uace0\ub9ac \ud0c0\uc785 \ubcc0\ud658",id:"461-\uce74\ud14c\uace0\ub9ac-\ud0c0\uc785-\ubcc0\ud658",level:3},{value:"4.6.2 \uce74\ud14c\uace0\ub9ac \uc21c\uc11c \uc9c0\uc815",id:"462-\uce74\ud14c\uace0\ub9ac-\uc21c\uc11c-\uc9c0\uc815",level:3},{value:"4.6.3 \uce74\ud14c\uace0\ub9ac \uc870\uc791",id:"463-\uce74\ud14c\uace0\ub9ac-\uc870\uc791",level:3},{value:"4.7 \ub370\uc774\ud130 \uac80\uc99d",id:"47-\ub370\uc774\ud130-\uac80\uc99d",level:2},{value:"4.7.1 \uc870\uac74 \uac80\uc99d",id:"471-\uc870\uac74-\uac80\uc99d",level:3},{value:"4.7.2 \ub370\uc774\ud130 \ud488\uc9c8 \ub9ac\ud3ec\ud2b8",id:"472-\ub370\uc774\ud130-\ud488\uc9c8-\ub9ac\ud3ec\ud2b8",level:3},{value:"4.7.3 \uc81c\uc57d \uc870\uac74 \uac80\uc99d",id:"473-\uc81c\uc57d-\uc870\uac74-\uac80\uc99d",level:3},{value:"4.8 \uc77c\uad00\uc131 \ud655\ubcf4",id:"48-\uc77c\uad00\uc131-\ud655\ubcf4",level:2},{value:"4.8.1 \ub2e8\uc704 \ud1b5\uc77c",id:"481-\ub2e8\uc704-\ud1b5\uc77c",level:3},{value:"4.8.2 \uba85\uba85 \uaddc\uce59 \ud1b5\uc77c",id:"482-\uba85\uba85-\uaddc\uce59-\ud1b5\uc77c",level:3},{value:"4.8.3 \uac12\uc758 \ud45c\uc900\ud654",id:"483-\uac12\uc758-\ud45c\uc900\ud654",level:3},{value:"4.9 \uc2e4\uc804 \uc608\uc81c: \ub354\ub7ec\uc6b4 \ub370\uc774\ud130 \uc644\uc804 \uc815\uc81c",id:"49-\uc2e4\uc804-\uc608\uc81c-\ub354\ub7ec\uc6b4-\ub370\uc774\ud130-\uc644\uc804-\uc815\uc81c",level:2},{value:"\uc5f0\uc2b5 \ubb38\uc81c",id:"\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \uacb0\uce21\uce58 \uc804\ub7b5\uc801 \ucc98\ub9ac",id:"\ubb38\uc81c-1-\uacb0\uce21\uce58-\uc804\ub7b5\uc801-\ucc98\ub9ac",level:3},{value:"\ubb38\uc81c 2: \ubcf5\uc7a1\ud55c \ubb38\uc790\uc5f4 \uc815\uc81c",id:"\ubb38\uc81c-2-\ubcf5\uc7a1\ud55c-\ubb38\uc790\uc5f4-\uc815\uc81c",level:3},{value:"\ubb38\uc81c 3: \uc774\uc0c1\uce58 \ud0d0\uc9c0 \ubc0f \ucc98\ub9ac",id:"\ubb38\uc81c-3-\uc774\uc0c1\uce58-\ud0d0\uc9c0-\ubc0f-\ucc98\ub9ac",level:3},{value:"\ubb38\uc81c 4: \ud1b5\ud569 \ub370\uc774\ud130 \uc815\uc81c",id:"\ubb38\uc81c-4-\ud1b5\ud569-\ub370\uc774\ud130-\uc815\uc81c",level:3},{value:"\uc815\ub9ac",id:"\uc815\ub9ac",level:2}];function o(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...n.components},{Details:d}=e;return d||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"4-\ub370\uc774\ud130-\uc815\uc81c",children:"4. \ub370\uc774\ud130 \uc815\uc81c"})}),"\n",(0,r.jsx)(e.p,{children:"\ub370\uc774\ud130 \uc815\uc81c(Data Cleaning)\ub294 \ub370\uc774\ud130 \ubd84\uc11d\uc758 \uac00\uc7a5 \uc911\uc694\ud558\uace0 \uc2dc\uac04\uc774 \ub9ce\uc774 \uc18c\uc694\ub418\ub294 \uc791\uc5c5\uc785\ub2c8\ub2e4. \uc2e4\uc81c \ub370\uc774\ud130\ub294 \uacb0\uce21\uce58, \uc911\ubcf5, \uc624\ub958, \uc774\uc0c1\uce58 \ub4f1 \ub2e4\uc591\ud55c \ubb38\uc81c\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc73c\uba70, \uc774\ub97c \uc801\uc808\ud788 \ucc98\ub9ac\ud574\uc57c \uc815\ud655\ud55c \ubd84\uc11d\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"41-\uacb0\uce21\uce58-\ucc98\ub9ac",children:"4.1 \uacb0\uce21\uce58 \ucc98\ub9ac"}),"\n",(0,r.jsxs)(e.p,{children:["\uacb0\uce21\uce58(Missing Value)\ub294 \ub370\uc774\ud130\uc5d0\uc11c \uac12\uc774 \uc5c6\ub294 \uacbd\uc6b0\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. pandas\ub294 \uacb0\uce21\uce58\ub97c ",(0,r.jsx)(e.code,{children:"NaN"}),"(Not a Number)\uc73c\ub85c \ud45c\ud604\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(e.h3,{id:"411-\uacb0\uce21\uce58-\ud655\uc778",children:"4.1.1 \uacb0\uce21\uce58 \ud655\uc778"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\n\n# \uacb0\uce21\uce58\uac00 \ud3ec\ud568\ub41c \ub370\uc774\ud130\ud504\ub808\uc784 \uc0dd\uc131\ndf = pd.DataFrame({\n    '\uc774\ub984': ['\uae40\ucca0\uc218', '\uc774\uc601\ud76c', '\ubc15\ubbfc\uc218', '\uc815\uc9c0\uc6d0', '\ucd5c\ub3d9\uc6b1'],\n    '\ub098\uc774': [25, np.nan, 30, 28, np.nan],\n    '\ub3c4\uc2dc': ['\uc11c\uc6b8', '\ubd80\uc0b0', None, '\ub300\uad6c', '\uc11c\uc6b8'],\n    '\uc5f0\ubd09': [3000, 3500, np.nan, 4000, 4500]\n})\n\nprint(df)\n#      \uc774\ub984   \ub098\uc774   \ub3c4\uc2dc      \uc5f0\ubd09\n# 0  \uae40\ucca0\uc218  25.0   \uc11c\uc6b8  3000.0\n# 1  \uc774\uc601\ud76c   NaN   \ubd80\uc0b0  3500.0\n# 2  \ubc15\ubbfc\uc218  30.0  None     NaN\n# 3  \uc815\uc9c0\uc6d0  28.0   \ub300\uad6c  4000.0\n# 4  \ucd5c\ub3d9\uc6b1   NaN   \uc11c\uc6b8  4500.0\n\n# \uacb0\uce21\uce58 \ud655\uc778\nprint(df.isnull())\nprint(df.isna())  # isnull()\uacfc \ub3d9\uc77c\n\n# \uacb0\uce21\uce58 \uac1c\uc218 \ud655\uc778\nprint(df.isnull().sum())\n# \uc774\ub984    0\n# \ub098\uc774    2\n# \ub3c4\uc2dc    1\n# \uc5f0\ubd09    1\n\n# \uc804\uccb4 \uacb0\uce21\uce58 \uac1c\uc218\nprint(df.isnull().sum().sum())  # 4\n\n# \uac01 \ud589\uc758 \uacb0\uce21\uce58 \uac1c\uc218\nprint(df.isnull().sum(axis=1))\n\n# \uacb0\uce21\uce58 \ube44\uc728 \ud655\uc778\nprint(df.isnull().sum() / len(df) * 100)\n"})}),"\n",(0,r.jsxs)(e.admonition,{type:"tip",children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"info()"})," \uba54\uc11c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uba74 \uac01 \uceec\ub7fc\uc758 \ube44\uacb0\uce21\uce58(non-null) \uac1c\uc218\ub97c \ud55c\ub208\uc5d0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"df.info()\n"})})]}),"\n",(0,r.jsx)(e.h3,{id:"412-\uacb0\uce21\uce58-\uc81c\uac70",children:"4.1.2 \uacb0\uce21\uce58 \uc81c\uac70"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uacb0\uce21\uce58\uac00 \ud558\ub098\ub77c\ub3c4 \uc788\ub294 \ud589 \uc81c\uac70\ndf_dropped = df.dropna()\nprint(df_dropped)\n#      \uc774\ub984   \ub098\uc774  \ub3c4\uc2dc      \uc5f0\ubd09\n# 0  \uae40\ucca0\uc218  25.0  \uc11c\uc6b8  3000.0\n# 3  \uc815\uc9c0\uc6d0  28.0  \ub300\uad6c  4000.0\n\n# \ubaa8\ub4e0 \uac12\uc774 \uacb0\uce21\uce58\uc778 \ud589\ub9cc \uc81c\uac70\ndf_dropped = df.dropna(how='all')\n\n# \ud2b9\uc815 \uceec\ub7fc\uc5d0 \uacb0\uce21\uce58\uac00 \uc788\ub294 \ud589 \uc81c\uac70\ndf_dropped = df.dropna(subset=['\ub098\uc774'])\nprint(df_dropped)\n\n# \uacb0\uce21\uce58\uac00 \ud558\ub098\ub77c\ub3c4 \uc788\ub294 \uc5f4 \uc81c\uac70\ndf_dropped = df.dropna(axis=1)\n\n# \uacb0\uce21\uce58\uac00 n\uac1c \uc774\uc0c1 \uc788\ub294 \ud589 \uc81c\uac70\ndf_dropped = df.dropna(thresh=3)  # \ucd5c\uc18c 3\uac1c\uc758 \ube44\uacb0\uce21\uce58\uac00 \uc788\uc5b4\uc57c \ud568\n\n# \uc6d0\ubcf8 \ub370\uc774\ud130\ud504\ub808\uc784 \uc218\uc815 (inplace=True)\ndf.dropna(inplace=True)\n"})}),"\n",(0,r.jsx)(e.admonition,{type:"warning",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"dropna()"}),"\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. \uc6d0\ubcf8\uc744 \uc218\uc815\ud558\ub824\uba74 ",(0,r.jsx)(e.code,{children:"inplace=True"}),"\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \uacb0\uacfc\ub97c \ub2e4\uc2dc \ud560\ub2f9\ud574\uc57c \ud569\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(e.h3,{id:"413-\uacb0\uce21\uce58-\ucc44\uc6b0\uae30",children:"4.1.3 \uacb0\uce21\uce58 \ucc44\uc6b0\uae30"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uacb0\uce21\uce58\ub97c \ud2b9\uc815 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\ndf_filled = df.fillna(0)\nprint(df_filled)\n\n# \uceec\ub7fc\ubcc4\ub85c \ub2e4\ub978 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\ndf_filled = df.fillna({\n    '\ub098\uc774': df['\ub098\uc774'].mean(),  # \ud3c9\uade0\uac12\n    '\ub3c4\uc2dc': '\ubbf8\uc815',\n    '\uc5f0\ubd09': df['\uc5f0\ubd09'].median()  # \uc911\uc559\uac12\n})\n\n# \uc774\uc804 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30 (Forward Fill)\ndf_filled = df.fillna(method='ffill')\ndf_filled = df.ffill()  # \ub2e8\ucd95 \ud615\ud0dc\n\n# \ub2e4\uc74c \uac12\uc73c\ub85c \ucc44\uc6b0\uae30 (Backward Fill)\ndf_filled = df.fillna(method='bfill')\ndf_filled = df.bfill()  # \ub2e8\ucd95 \ud615\ud0dc\n\n# \uc5f4 \ubc29\ud5a5\uc73c\ub85c \ucc44\uc6b0\uae30\ndf_filled = df.fillna(method='ffill', axis=1)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"414-\ubcf4\uac04\ubc95-interpolation",children:"4.1.4 \ubcf4\uac04\ubc95 (Interpolation)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc120\ud615 \ubcf4\uac04\ndf_series = pd.Series([1, np.nan, np.nan, 4, 5])\nprint(df_series.interpolate())\n# 0    1.0\n# 1    2.0  <- \ubcf4\uac04\ub428\n# 2    3.0  <- \ubcf4\uac04\ub428\n# 3    4.0\n# 4    5.0\n\n# \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \ubcf4\uac04\ndates = pd.date_range('2024-01-01', periods=5)\ndf_time = pd.DataFrame({\n    'date': dates,\n    'value': [100, np.nan, np.nan, 130, 140]\n})\ndf_time['value_interp'] = df_time['value'].interpolate(method='time')\n\n# \ub2e4\uc591\ud55c \ubcf4\uac04 \ubc29\ubc95\ndf['\ub098\uc774_linear'] = df['\ub098\uc774'].interpolate(method='linear')  # \uc120\ud615\ndf['\ub098\uc774_polynomial'] = df['\ub098\uc774'].interpolate(method='polynomial', order=2)  # \ub2e4\ud56d\uc2dd\ndf['\ub098\uc774_nearest'] = df['\ub098\uc774'].interpolate(method='nearest')  # \ucd5c\uadfc\uc811\n"})}),"\n",(0,r.jsx)(e.h3,{id:"415-\uc2e4\uc804-\uc608\uc81c-\uc2a4\ub9c8\ud2b8\ud55c-\uacb0\uce21\uce58-\ucc98\ub9ac",children:"4.1.5 \uc2e4\uc804 \uc608\uc81c: \uc2a4\ub9c8\ud2b8\ud55c \uacb0\uce21\uce58 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\n\n# \uc2e4\uc81c \ub370\uc774\ud130\uc14b \uc2dc\ubbac\ub808\uc774\uc158\nnp.random.seed(42)\ndf = pd.DataFrame({\n    '\ub0a0\uc9dc': pd.date_range('2024-01-01', periods=100),\n    '\uc628\ub3c4': np.random.normal(20, 5, 100),\n    '\uc2b5\ub3c4': np.random.normal(60, 10, 100),\n    '\ud310\ub9e4\ub7c9': np.random.poisson(50, 100)\n})\n\n# \ubb34\uc791\uc704\ub85c \uacb0\uce21\uce58 \uc0dd\uc131 (10%)\nfor col in ['\uc628\ub3c4', '\uc2b5\ub3c4', '\ud310\ub9e4\ub7c9']:\n    missing_idx = np.random.choice(df.index, size=10, replace=False)\n    df.loc[missing_idx, col] = np.nan\n\nprint(f\"\uacb0\uce21\uce58 \ud604\ud669:\\n{df.isnull().sum()}\")\n\n# \uc804\ub7b5\uc801 \uacb0\uce21\uce58 \ucc98\ub9ac\ndef smart_fill(df):\n    df_clean = df.copy()\n\n    # \uc5f0\uc18d\ud615 \ubcc0\uc218: \uc120\ud615 \ubcf4\uac04\n    df_clean['\uc628\ub3c4'] = df_clean['\uc628\ub3c4'].interpolate(method='linear')\n    df_clean['\uc2b5\ub3c4'] = df_clean['\uc2b5\ub3c4'].interpolate(method='linear')\n\n    # \uce74\uc6b4\ud2b8 \ubcc0\uc218: \uc804\ud6c4 \ud3c9\uade0\uc758 \uc815\uc218\uac12\n    df_clean['\ud310\ub9e4\ub7c9'] = df_clean['\ud310\ub9e4\ub7c9'].interpolate(method='linear').round()\n\n    # \ucc98\uc74c\uc774\ub098 \ub05d\uc758 \uacb0\uce21\uce58\ub294 bfill/ffill\n    df_clean = df_clean.bfill().ffill()\n\n    return df_clean\n\ndf_cleaned = smart_fill(df)\nprint(f\"\\n\ucc98\ub9ac \ud6c4 \uacb0\uce21\uce58: {df_cleaned.isnull().sum().sum()}\")\n"})}),"\n",(0,r.jsx)(e.h2,{id:"42-\uc911\ubcf5-\ub370\uc774\ud130-\ucc98\ub9ac",children:"4.2 \uc911\ubcf5 \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\uc911\ubcf5 \ub370\uc774\ud130\ub294 \ubd84\uc11d \uacb0\uacfc\ub97c \uc65c\uace1\uc2dc\ud0ac \uc218 \uc788\uc73c\ubbc0\ub85c \ubc18\ub4dc\uc2dc \ud655\uc778\ud558\uace0 \uc81c\uac70\ud574\uc57c \ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"421-\uc911\ubcf5-\ub370\uc774\ud130-\ud655\uc778",children:"4.2.1 \uc911\ubcf5 \ub370\uc774\ud130 \ud655\uc778"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"df = pd.DataFrame({\n    '\uc774\ub984': ['\uae40\ucca0\uc218', '\uc774\uc601\ud76c', '\uae40\ucca0\uc218', '\ubc15\ubbfc\uc218', '\uc774\uc601\ud76c'],\n    '\ub098\uc774': [25, 30, 25, 35, 30],\n    '\ub3c4\uc2dc': ['\uc11c\uc6b8', '\ubd80\uc0b0', '\uc11c\uc6b8', '\ub300\uad6c', '\ubd80\uc0b0']\n})\n\n# \uc644\uc804\ud788 \uc911\ubcf5\ub41c \ud589 \ud655\uc778\nprint(df.duplicated())\n# 0    False\n# 1    False\n# 2     True  <- 0\ubc88 \ud589\uacfc \uc911\ubcf5\n# 3    False\n# 4     True  <- 1\ubc88 \ud589\uacfc \uc911\ubcf5\n\n# \uc911\ubcf5\ub41c \ud589\ub9cc \ucd9c\ub825\nprint(df[df.duplicated()])\n\n# \ud2b9\uc815 \uceec\ub7fc \uae30\uc900\uc73c\ub85c \uc911\ubcf5 \ud655\uc778\nprint(df.duplicated(subset=['\uc774\ub984']))\n\n# \ub9c8\uc9c0\ub9c9 \uc911\ubcf5 \ud589\uc744 True\ub85c \ud45c\uc2dc (\uae30\ubcf8\uc740 \uccab \ubc88\uc9f8 \uc81c\uc678)\nprint(df.duplicated(keep='last'))\n\n# \ubaa8\ub4e0 \uc911\ubcf5 \ud589\uc744 True\ub85c \ud45c\uc2dc\nprint(df.duplicated(keep=False))\n"})}),"\n",(0,r.jsx)(e.h3,{id:"422-\uc911\ubcf5-\ub370\uc774\ud130-\uc81c\uac70",children:"4.2.2 \uc911\ubcf5 \ub370\uc774\ud130 \uc81c\uac70"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc911\ubcf5 \ud589 \uc81c\uac70 (\uccab \ubc88\uc9f8 \ud589 \uc720\uc9c0)\ndf_unique = df.drop_duplicates()\nprint(df_unique)\n\n# \ub9c8\uc9c0\ub9c9 \uc911\ubcf5 \ud589 \uc720\uc9c0\ndf_unique = df.drop_duplicates(keep='last')\n\n# \ubaa8\ub4e0 \uc911\ubcf5 \ud589 \uc81c\uac70\ndf_unique = df.drop_duplicates(keep=False)\n\n# \ud2b9\uc815 \uceec\ub7fc \uae30\uc900\uc73c\ub85c \uc911\ubcf5 \uc81c\uac70\ndf_unique = df.drop_duplicates(subset=['\uc774\ub984'])\n\n# \uc5ec\ub7ec \uceec\ub7fc \uae30\uc900\ndf_unique = df.drop_duplicates(subset=['\uc774\ub984', '\ub3c4\uc2dc'])\n\n# \uc6d0\ubcf8 \uc218\uc815\ndf.drop_duplicates(inplace=True)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"423-\uc2e4\uc804-\uc608\uc81c-\ub85c\uadf8-\ub370\uc774\ud130-\uc911\ubcf5-\uc81c\uac70",children:"4.2.3 \uc2e4\uc804 \uc608\uc81c: \ub85c\uadf8 \ub370\uc774\ud130 \uc911\ubcf5 \uc81c\uac70"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc2dc\uc2a4\ud15c \ub85c\uadf8 \ub370\uc774\ud130 \uc2dc\ubbac\ub808\uc774\uc158\nlog_df = pd.DataFrame({\n    'timestamp': pd.date_range('2024-01-01', periods=1000, freq='1min'),\n    'user_id': np.random.choice(['U001', 'U002', 'U003'], 1000),\n    'action': np.random.choice(['login', 'view', 'click', 'logout'], 1000),\n    'page': np.random.choice(['home', 'product', 'cart', 'checkout'], 1000)\n})\n\n# \uc758\ub3c4\uc801\uc73c\ub85c \uc911\ubcf5 \uc0dd\uc131\nlog_df = pd.concat([log_df, log_df.sample(50)]).sort_values('timestamp')\n\nprint(f\"\uc804\uccb4 \ub808\ucf54\ub4dc: {len(log_df)}\")\nprint(f\"\uc911\ubcf5 \ub808\ucf54\ub4dc: {log_df.duplicated().sum()}\")\n\n# \uc644\uc804 \uc911\ubcf5 \uc81c\uac70\nlog_clean = log_df.drop_duplicates()\nprint(f\"\uc911\ubcf5 \uc81c\uac70 \ud6c4: {len(log_clean)}\")\n\n# \uac19\uc740 \uc0ac\uc6a9\uc790\uc758 1\ubd84 \uc774\ub0b4 \ub3d9\uc77c \uc561\uc158\uc740 \uc911\ubcf5\uc73c\ub85c \uac04\uc8fc\nlog_clean = log_df.drop_duplicates(\n    subset=['user_id', 'action', 'page'],\n    keep='first'\n)\nprint(f\"\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc801\uc6a9 \ud6c4: {len(log_clean)}\")\n"})}),"\n",(0,r.jsx)(e.h2,{id:"43-\ub370\uc774\ud130-\ud0c0\uc785-\ubcc0\ud658",children:"4.3 \ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658"}),"\n",(0,r.jsx)(e.p,{children:"\uc62c\ubc14\ub978 \ub370\uc774\ud130 \ud0c0\uc785\uc740 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc131\uacfc \uc5f0\uc0b0 \uc815\ud655\uc131\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"431-\uae30\ubcf8-\ud0c0\uc785-\ubcc0\ud658",children:"4.3.1 \uae30\ubcf8 \ud0c0\uc785 \ubcc0\ud658"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"df = pd.DataFrame({\n    '\uc22b\uc790_\ubb38\uc790\uc5f4': ['100', '200', '300'],\n    '\ub0a0\uc9dc_\ubb38\uc790\uc5f4': ['2024-01-01', '2024-01-02', '2024-01-03'],\n    '\uc18c\uc218': [1.0, 2.0, 3.0],\n    '\ubc94\uc8fc': ['A', 'B', 'A']\n})\n\nprint(df.dtypes)\n\n# \ubb38\uc790\uc5f4\uc744 \uc22b\uc790\ub85c\ndf['\uc22b\uc790'] = df['\uc22b\uc790_\ubb38\uc790\uc5f4'].astype(int)\ndf['\uc22b\uc790'] = pd.to_numeric(df['\uc22b\uc790_\ubb38\uc790\uc5f4'])\n\n# \uc5d0\ub7ec \ucc98\ub9ac\ndf['\uc22b\uc790'] = pd.to_numeric(df['\uc22b\uc790_\ubb38\uc790\uc5f4'], errors='coerce')  # \uc5d0\ub7ec \uc2dc NaN\ndf['\uc22b\uc790'] = pd.to_numeric(df['\uc22b\uc790_\ubb38\uc790\uc5f4'], errors='ignore')  # \uc5d0\ub7ec \uc2dc \uc6d0\ubcf8 \uc720\uc9c0\n\n# \ubb38\uc790\uc5f4\uc744 \ub0a0\uc9dc\ub85c\ndf['\ub0a0\uc9dc'] = pd.to_datetime(df['\ub0a0\uc9dc_\ubb38\uc790\uc5f4'])\ndf['\ub0a0\uc9dc'] = pd.to_datetime(df['\ub0a0\uc9dc_\ubb38\uc790\uc5f4'], format='%Y-%m-%d')\n\n# \uc18c\uc218\ub97c \uc815\uc218\ub85c\ndf['\uc815\uc218'] = df['\uc18c\uc218'].astype(int)\n\n# \ubc94\uc8fc\ud615\uc73c\ub85c \ubcc0\ud658 (\uba54\ubaa8\ub9ac \ud6a8\uc728\uc801)\ndf['\ubc94\uc8fc_cat'] = df['\ubc94\uc8fc'].astype('category')\n"})}),"\n",(0,r.jsx)(e.h3,{id:"432-\ubcf5\uc7a1\ud55c-\ubcc0\ud658",children:"4.3.2 \ubcf5\uc7a1\ud55c \ubcc0\ud658"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \ud63c\ud569\ub41c \ub370\uc774\ud130 \ucc98\ub9ac\ndf = pd.DataFrame({\n    '\uac00\uaca9': ['1,000\uc6d0', '2,500\uc6d0', '3,200\uc6d0', '\uc5c6\uc74c'],\n    '\ub0a0\uc9dc': ['2024/01/01', '2024.01.02', '20240103', 'N/A'],\n    '\ube44\uc728': ['50%', '75.5%', '100%', '-']\n})\n\n# \uac00\uaca9 \uc815\uc81c\ndf['\uac00\uaca9_\uc22b\uc790'] = (df['\uac00\uaca9']\n                   .str.replace(',', '')\n                   .str.replace('\uc6d0', '')\n                   .replace('\uc5c6\uc74c', np.nan)\n                   .astype(float))\n\n# \ub0a0\uc9dc \uc815\uc81c\ndf['\ub0a0\uc9dc_\ubcc0\ud658'] = pd.to_datetime(\n    df['\ub0a0\uc9dc'],\n    format='mixed',  # \uc5ec\ub7ec \ud615\uc2dd \uc790\ub3d9 \uc778\uc2dd\n    errors='coerce'\n)\n\n# \ube44\uc728 \uc815\uc81c\ndf['\ube44\uc728_\uc22b\uc790'] = (df['\ube44\uc728']\n                   .str.replace('%', '')\n                   .replace('-', np.nan)\n                   .astype(float) / 100)\n\nprint(df)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"433-\ub0a0\uc9dc\uc2dc\uac04-\ucc98\ub9ac",children:"4.3.3 \ub0a0\uc9dc/\uc2dc\uac04 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \ub2e4\uc591\ud55c \ub0a0\uc9dc \ud615\uc2dd \ud30c\uc2f1\ndates = pd.Series([\n    '2024-01-01',\n    '01/02/2024',\n    '2024.01.03',\n    'Jan 4, 2024',\n    '2024-01-05 14:30:00'\n])\n\ndates_parsed = pd.to_datetime(dates, format='mixed')\n\n# \ub0a0\uc9dc \uad6c\uc131\uc694\uc18c \ucd94\ucd9c\ndf = pd.DataFrame({'\ub0a0\uc9dc': dates_parsed})\ndf['\uc5f0\ub3c4'] = df['\ub0a0\uc9dc'].dt.year\ndf['\uc6d4'] = df['\ub0a0\uc9dc'].dt.month\ndf['\uc77c'] = df['\ub0a0\uc9dc'].dt.day\ndf['\uc694\uc77c'] = df['\ub0a0\uc9dc'].dt.day_name()\ndf['\uc8fc'] = df['\ub0a0\uc9dc'].dt.isocalendar().week\n\n# \uc2dc\uac04\ub300 \ucc98\ub9ac\ndf['\ub0a0\uc9dc_utc'] = df['\ub0a0\uc9dc'].dt.tz_localize('UTC')\ndf['\ub0a0\uc9dc_kst'] = df['\ub0a0\uc9dc_utc'].dt.tz_convert('Asia/Seoul')\n\n# \ub0a0\uc9dc \uc5f0\uc0b0\ndf['30\uc77c\ud6c4'] = df['\ub0a0\uc9dc'] + pd.Timedelta(days=30)\ndf['\ucc28\uc774'] = (df['30\uc77c\ud6c4'] - df['\ub0a0\uc9dc']).dt.days\n"})}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"pd.to_datetime()"}),"\uc758 ",(0,r.jsx)(e.code,{children:"format='mixed'"})," \uc635\uc158\uc740 \uc5ec\ub7ec \ub0a0\uc9dc \ud615\uc2dd\uc774 \uc11e\uc5ec \uc788\uc744 \ub54c \uc720\uc6a9\ud558\uc9c0\ub9cc, \uc131\ub2a5\uc774 \ub290\ub9bd\ub2c8\ub2e4. \uac00\ub2a5\ud558\uba74 \uba85\uc2dc\uc801\uc778 ",(0,r.jsx)(e.code,{children:"format"}),"\uc744 \uc9c0\uc815\ud558\uc138\uc694."]})}),"\n",(0,r.jsx)(e.h2,{id:"44-\uc774\uc0c1\uce58-\ucc98\ub9ac",children:"4.4 \uc774\uc0c1\uce58 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\uc774\uc0c1\uce58(Outlier)\ub294 \uc815\uc0c1 \ubc94\uc704\ub97c \ubc97\uc5b4\ub09c \uadf9\ub2e8\uc801\uc778 \uac12\uc73c\ub85c, \ubd84\uc11d \uacb0\uacfc\ub97c \uc65c\uace1\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"441-\uc774\uc0c1\uce58-\ud0d0\uc9c0",children:"4.4.1 \uc774\uc0c1\uce58 \ud0d0\uc9c0"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import numpy as np\nimport pandas as pd\n\n# \uc0d8\ud50c \ub370\uc774\ud130\nnp.random.seed(42)\ndf = pd.DataFrame({\n    '\uc810\uc218': np.concatenate([\n        np.random.normal(70, 10, 95),  # \uc815\uc0c1 \ub370\uc774\ud130\n        [10, 15, 98, 99, 100]  # \uc774\uc0c1\uce58\n    ])\n})\n\n# 1. \ud1b5\uacc4\uc801 \ubc29\ubc95: IQR (Interquartile Range)\nQ1 = df['\uc810\uc218'].quantile(0.25)\nQ3 = df['\uc810\uc218'].quantile(0.75)\nIQR = Q3 - Q1\n\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\nprint(f\"\uc815\uc0c1 \ubc94\uc704: {lower_bound:.2f} ~ {upper_bound:.2f}\")\n\n# \uc774\uc0c1\uce58 \ud655\uc778\noutliers = df[(df['\uc810\uc218'] < lower_bound) | (df['\uc810\uc218'] > upper_bound)]\nprint(f\"\uc774\uc0c1\uce58 \uac1c\uc218: {len(outliers)}\")\n\n# 2. Z-Score \ubc29\ubc95\nfrom scipy import stats\n\ndf['z_score'] = np.abs(stats.zscore(df['\uc810\uc218']))\noutliers_z = df[df['z_score'] > 3]  # |z| > 3\uc778 \uacbd\uc6b0 \uc774\uc0c1\uce58\nprint(f\"Z-Score \uc774\uc0c1\uce58: {len(outliers_z)}\")\n\n# 3. \ubc31\ubd84\uc704\uc218 \ubc29\ubc95\nlower_percentile = df['\uc810\uc218'].quantile(0.01)\nupper_percentile = df['\uc810\uc218'].quantile(0.99)\noutliers_pct = df[(df['\uc810\uc218'] < lower_percentile) | (df['\uc810\uc218'] > upper_percentile)]\n"})}),"\n",(0,r.jsx)(e.h3,{id:"442-\uc774\uc0c1\uce58-\ucc98\ub9ac",children:"4.4.2 \uc774\uc0c1\uce58 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# 1. \uc81c\uac70\ndf_no_outliers = df[\n    (df['\uc810\uc218'] >= lower_bound) &\n    (df['\uc810\uc218'] <= upper_bound)\n]\n\n# 2. \ub300\uccb4 (Capping/Winsorizing)\ndf['\uc810\uc218_capped'] = df['\uc810\uc218'].clip(lower_bound, upper_bound)\n\n# 3. \ubcc0\ud658\ndf['\uc810\uc218_log'] = np.log1p(df['\uc810\uc218'])  # \ub85c\uadf8 \ubcc0\ud658\ndf['\uc810\uc218_sqrt'] = np.sqrt(df['\uc810\uc218'])  # \uc81c\uacf1\uadfc \ubcc0\ud658\n\n# 4. \ubcc4\ub3c4 \ud45c\uc2dc\ndf['is_outlier'] = (\n    (df['\uc810\uc218'] < lower_bound) |\n    (df['\uc810\uc218'] > upper_bound)\n)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"443-\ub2e4\ubcc0\ub7c9-\uc774\uc0c1\uce58-\ud0d0\uc9c0",children:"4.4.3 \ub2e4\ubcc0\ub7c9 \uc774\uc0c1\uce58 \ud0d0\uc9c0"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from sklearn.ensemble import IsolationForest\n\n# \ub2e4\ucc28\uc6d0 \ub370\uc774\ud130\ndf = pd.DataFrame({\n    '\ub098\uc774': np.random.normal(35, 10, 100),\n    '\uc5f0\ubd09': np.random.normal(5000, 1000, 100),\n    '\uacbd\ub825': np.random.normal(8, 3, 100)\n})\n\n# \uc758\ub3c4\uc801 \uc774\uc0c1\uce58 \ucd94\uac00\ndf.loc[100] = [80, 15000, 50]\ndf.loc[101] = [20, 1000, 0]\n\n# Isolation Forest\niso_forest = IsolationForest(contamination=0.05, random_state=42)\ndf['anomaly'] = iso_forest.fit_predict(df[['\ub098\uc774', '\uc5f0\ubd09', '\uacbd\ub825']])\n\n# -1: \uc774\uc0c1\uce58, 1: \uc815\uc0c1\nprint(df[df['anomaly'] == -1])\n"})}),"\n",(0,r.jsx)(e.h2,{id:"45-\ubb38\uc790\uc5f4-\uc815\uc81c",children:"4.5 \ubb38\uc790\uc5f4 \uc815\uc81c"}),"\n",(0,r.jsx)(e.p,{children:"\ud14d\uc2a4\ud2b8 \ub370\uc774\ud130\ub294 \uacf5\ubc31, \ub300\uc18c\ubb38\uc790, \ud2b9\uc218\ubb38\uc790 \ub4f1\uc758 \ubb38\uc81c\uac00 \ub9ce\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"451-\uae30\ubcf8-\ubb38\uc790\uc5f4-\ucc98\ub9ac",children:"4.5.1 \uae30\ubcf8 \ubb38\uc790\uc5f4 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"df = pd.DataFrame({\n    '\uc774\ub984': ['  \uae40\ucca0\uc218 ', 'LEE_YOUNG', 'park-minsoo ', ' CHOI '],\n    '\uc774\uba54\uc77c': ['kim@example.com', 'LEE@EXAMPLE.COM', 'invalid', 'choi@test.com'],\n    '\uc804\ud654\ubc88\ud638': ['010-1234-5678', '01012345678', '010.1234.5678', '10-1234-5678']\n})\n\n# \uacf5\ubc31 \uc81c\uac70\ndf['\uc774\ub984_\uc815\uc81c'] = df['\uc774\ub984'].str.strip()  # \uc591\ucabd \uacf5\ubc31\ndf['\uc774\ub984_\uc815\uc81c'] = df['\uc774\ub984'].str.lstrip()  # \uc67c\ucabd \uacf5\ubc31\ndf['\uc774\ub984_\uc815\uc81c'] = df['\uc774\ub984'].str.rstrip()  # \uc624\ub978\ucabd \uacf5\ubc31\n\n# \ub300\uc18c\ubb38\uc790 \ubcc0\ud658\ndf['\uc774\uba54\uc77c_lower'] = df['\uc774\uba54\uc77c'].str.lower()\ndf['\uc774\uba54\uc77c_upper'] = df['\uc774\uba54\uc77c'].str.upper()\ndf['\uc774\uba54\uc77c_title'] = df['\uc774\uba54\uc77c'].str.title()\n\n# \ubb38\uc790 \uce58\ud658\ndf['\uc804\ud654\ubc88\ud638_\uc815\uc81c'] = df['\uc804\ud654\ubc88\ud638'].str.replace('-', '')\ndf['\uc804\ud654\ubc88\ud638_\uc815\uc81c'] = df['\uc804\ud654\ubc88\ud638'].str.replace('.', '')\n\n# \uc5ec\ub7ec \ubb38\uc790 \ub3d9\uc2dc \uce58\ud658\ndf['\uc804\ud654\ubc88\ud638_\uc815\uc81c'] = (df['\uc804\ud654\ubc88\ud638']\n                       .str.replace('-', '')\n                       .str.replace('.', '')\n                       .str.replace(' ', ''))\n"})}),"\n",(0,r.jsx)(e.h3,{id:"452-\uc815\uaddc\ud45c\ud604\uc2dd-\ud65c\uc6a9",children:"4.5.2 \uc815\uaddc\ud45c\ud604\uc2dd \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import re\n\ndf = pd.DataFrame({\n    '\ud14d\uc2a4\ud2b8': [\n        '\uac00\uaca9: 1,000\uc6d0',\n        '\ud560\uc778\uac00: 2,500\uc6d0 (50% \ud560\uc778)',\n        '\uc815\uc0c1\uac00: 3,000\uc6d0',\n        '\ud488\uc808'\n    ],\n    '\uc804\ud654\ubc88\ud638': [\n        '010-1234-5678',\n        '02)1234-5678',\n        '031.1234.5678',\n        '01012345678'\n    ]\n})\n\n# \uc22b\uc790\ub9cc \ucd94\ucd9c\ndf['\uac00\uaca9'] = df['\ud14d\uc2a4\ud2b8'].str.extract(r'(\\d+,?\\d+)', expand=False)\ndf['\uac00\uaca9_\uc22b\uc790'] = (df['\uac00\uaca9']\n                   .str.replace(',', '')\n                   .astype(float, errors='ignore'))\n\n# \uc804\ud654\ubc88\ud638 \ud1b5\uc77c (010-XXXX-XXXX \ud615\uc2dd)\ndef format_phone(phone):\n    # \uc22b\uc790\ub9cc \ucd94\ucd9c\n    digits = re.sub(r'\\D', '', phone)\n\n    # \ud615\uc2dd \ub9de\ucd94\uae30\n    if len(digits) == 10:  # \uc9c0\uc5ed\ubc88\ud638\n        return f\"{digits[:2]}-{digits[2:6]}-{digits[6:]}\"\n    elif len(digits) == 11:  # \ud734\ub300\ud3f0\n        return f\"{digits[:3]}-{digits[3:7]}-{digits[7:]}\"\n    return phone\n\ndf['\uc804\ud654\ubc88\ud638_\uc815\uc81c'] = df['\uc804\ud654\ubc88\ud638'].apply(format_phone)\n\n# \uc815\uaddc\uc2dd \ub9e4\uce6d \ud655\uc778\ndf['\uc774\uba54\uc77c'] = ['kim@test.com', 'invalid', 'lee@example.co.kr', 'no-at-sign']\nemail_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\ndf['\uc774\uba54\uc77c_\uc720\ud6a8'] = df['\uc774\uba54\uc77c'].str.match(email_pattern)\n\nprint(df)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"453-\uace0\uae09-\ubb38\uc790\uc5f4-\uc815\uc81c",children:"4.5.3 \uace0\uae09 \ubb38\uc790\uc5f4 \uc815\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc8fc\uc18c \ub370\uc774\ud130 \uc815\uc81c\ndf = pd.DataFrame({\n    '\uc8fc\uc18c': [\n        '\uc11c\uc6b8\ud2b9\ubcc4\uc2dc \uac15\ub0a8\uad6c \ud14c\ud5e4\ub780\ub85c 123',\n        '\uc11c\uc6b8 \uac15\ub0a8\uad6c \ud14c\ud5e4\ub780\ub85c 123\ubc88\uae38 45',\n        '\uacbd\uae30\ub3c4 \uc131\ub0a8\uc2dc \ubd84\ub2f9\uad6c \ud310\uad50\uc5ed\ub85c 235',\n        'SEOUL gangnam-gu teheran-ro 123'\n    ]\n})\n\n# \ud55c\uae00\ub9cc \ucd94\ucd9c\ndf['\uc8fc\uc18c_\ud55c\uae00'] = df['\uc8fc\uc18c'].str.extract(r'([\uac00-\ud7a3\\s]+)', expand=False)\n\n# \uc8fc\uc18c \ud45c\uc900\ud654\ndef standardize_address(addr):\n    # \uc18c\ubb38\uc790 \ubcc0\ud658\n    addr = addr.lower()\n\n    # \uc601\ubb38 \uc81c\uac70\n    addr = re.sub(r'[a-zA-Z\\-]', '', addr)\n\n    # \uc5ec\ub7ec \uacf5\ubc31\uc744 \ud558\ub098\ub85c\n    addr = re.sub(r'\\s+', ' ', addr)\n\n    # \uc591\ucabd \uacf5\ubc31 \uc81c\uac70\n    addr = addr.strip()\n\n    return addr\n\ndf['\uc8fc\uc18c_\uc815\uc81c'] = df['\uc8fc\uc18c'].apply(standardize_address)\n\n# \ubb38\uc790\uc5f4 \ubd84\ub9ac\ndf[['\uc2dc\ub3c4', '\uc2dc\uad70\uad6c']] = df['\uc8fc\uc18c_\ud55c\uae00'].str.split(n=2, expand=True)[[0, 1]]\nprint(df)\n"})}),"\n",(0,r.jsx)(e.admonition,{type:"warning",children:(0,r.jsxs)(e.p,{children:["\uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud560 \ub54c\ub294 ",(0,r.jsx)(e.code,{children:".str.replace()"}),"\uc5d0 ",(0,r.jsx)(e.code,{children:"regex=True"}),"(\uae30\ubcf8\uac12)\ub85c \uc124\uc815\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc138\uc694. \ub9ac\ud130\ub7f4 \ubb38\uc790\uc5f4 \uce58\ud658\uc740 ",(0,r.jsx)(e.code,{children:"regex=False"}),"\ub85c \uc124\uc815\ud558\uc138\uc694."]})}),"\n",(0,r.jsx)(e.h2,{id:"46-\uce74\ud14c\uace0\ub9ac-\ub370\uc774\ud130-\ucc98\ub9ac",children:"4.6 \uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130\ub294 \uc81c\ud55c\ub41c \uac12\ub4e4\uc758 \uc9d1\ud569\uc785\ub2c8\ub2e4. \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc774\uace0 \uc5f0\uc0b0\uc774 \ube60\ub985\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"461-\uce74\ud14c\uace0\ub9ac-\ud0c0\uc785-\ubcc0\ud658",children:"4.6.1 \uce74\ud14c\uace0\ub9ac \ud0c0\uc785 \ubcc0\ud658"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc77c\ubc18 \ubb38\uc790\uc5f4 \ub370\uc774\ud130\ndf = pd.DataFrame({\n    '\ub4f1\uae09': ['Gold', 'Silver', 'Bronze', 'Gold', 'Silver'] * 100,\n    '\uc9c0\uc5ed': ['\uc11c\uc6b8', '\ubd80\uc0b0', '\ub300\uad6c', '\uc11c\uc6b8', '\ubd80\uc0b0'] * 100\n})\n\nprint(f\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {df.memory_usage(deep=True).sum()} bytes\")\n\n# \uce74\ud14c\uace0\ub9ac\ub85c \ubcc0\ud658\ndf['\ub4f1\uae09_cat'] = df['\ub4f1\uae09'].astype('category')\ndf['\uc9c0\uc5ed_cat'] = df['\uc9c0\uc5ed'].astype('category')\n\nprint(f\"\ubcc0\ud658 \ud6c4 \uba54\ubaa8\ub9ac: {df[['\ub4f1\uae09_cat', '\uc9c0\uc5ed_cat']].memory_usage(deep=True).sum()} bytes\")\n\n# \uce74\ud14c\uace0\ub9ac \uc815\ubcf4 \ud655\uc778\nprint(df['\ub4f1\uae09_cat'].cat.categories)\nprint(df['\ub4f1\uae09_cat'].cat.codes)  # \ub0b4\ubd80\uc801\uc73c\ub85c \uc815\uc218\ub85c \uc800\uc7a5\ub428\n"})}),"\n",(0,r.jsx)(e.h3,{id:"462-\uce74\ud14c\uace0\ub9ac-\uc21c\uc11c-\uc9c0\uc815",children:"4.6.2 \uce74\ud14c\uace0\ub9ac \uc21c\uc11c \uc9c0\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc21c\uc11c\uac00 \uc788\ub294 \uce74\ud14c\uace0\ub9ac\ndf = pd.DataFrame({\n    '\uc131\uc801': ['A', 'B', 'C', 'A', 'D', 'B', 'C']\n})\n\n# \uc21c\uc11c \uc9c0\uc815\ngrade_order = ['D', 'C', 'B', 'A']\ndf['\uc131\uc801_cat'] = pd.Categorical(\n    df['\uc131\uc801'],\n    categories=grade_order,\n    ordered=True\n)\n\n# \uc815\ub82c \uac00\ub2a5\nprint(df.sort_values('\uc131\uc801_cat'))\n\n# \ube44\uad50 \uc5f0\uc0b0 \uac00\ub2a5\nprint(df[df['\uc131\uc801_cat'] >= 'B'])\n\n# \uc21c\uc11c \ubcc0\uacbd\ndf['\uc131\uc801_cat'] = df['\uc131\uc801_cat'].cat.reorder_categories(['A', 'B', 'C', 'D'])\n"})}),"\n",(0,r.jsx)(e.h3,{id:"463-\uce74\ud14c\uace0\ub9ac-\uc870\uc791",children:"4.6.3 \uce74\ud14c\uace0\ub9ac \uc870\uc791"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"df = pd.DataFrame({\n    '\uc81c\ud488': ['\uc0ac\uacfc', '\ubc14\ub098\ub098', '\uc624\ub80c\uc9c0', '\uc0ac\uacfc', '\ubc14\ub098\ub098']\n})\n\ndf['\uc81c\ud488_cat'] = df['\uc81c\ud488'].astype('category')\n\n# \uce74\ud14c\uace0\ub9ac \ucd94\uac00\ndf['\uc81c\ud488_cat'] = df['\uc81c\ud488_cat'].cat.add_categories(['\ud3ec\ub3c4', '\uc218\ubc15'])\n\n# \uce74\ud14c\uace0\ub9ac \uc81c\uac70\ndf['\uc81c\ud488_cat'] = df['\uc81c\ud488_cat'].cat.remove_categories(['\uc218\ubc15'])\n\n# \uce74\ud14c\uace0\ub9ac \uc774\ub984 \ubcc0\uacbd\ndf['\uc81c\ud488_cat'] = df['\uc81c\ud488_cat'].cat.rename_categories({\n    '\uc0ac\uacfc': 'Apple',\n    '\ubc14\ub098\ub098': 'Banana',\n    '\uc624\ub80c\uc9c0': 'Orange'\n})\n\n# \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uce74\ud14c\uace0\ub9ac \uc81c\uac70\ndf['\uc81c\ud488_cat'] = df['\uc81c\ud488_cat'].cat.remove_unused_categories()\n\nprint(df['\uc81c\ud488_cat'].cat.categories)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"47-\ub370\uc774\ud130-\uac80\uc99d",children:"4.7 \ub370\uc774\ud130 \uac80\uc99d"}),"\n",(0,r.jsx)(e.p,{children:"\ub370\uc774\ud130\uac00 \uc608\uc0c1\ud55c \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc740 \ub9e4\uc6b0 \uc911\uc694\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"471-\uc870\uac74-\uac80\uc99d",children:"4.7.1 \uc870\uac74 \uac80\uc99d"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"df = pd.DataFrame({\n    '\uc774\ub984': ['\uae40\ucca0\uc218', '\uc774\uc601\ud76c', '\ubc15\ubbfc\uc218', '\uc815\uc9c0\uc6d0'],\n    '\ub098\uc774': [25, 30, -5, 28],  # -5\ub294 \uc798\ubabb\ub41c \ub370\uc774\ud130\n    '\uc5f0\ubd09': [3000, 3500, 4000, -1000],  # -1000\uc740 \uc798\ubabb\ub41c \ub370\uc774\ud130\n    '\uc774\uba54\uc77c': ['kim@test.com', 'invalid', 'park@test.com', 'jung@test.com']\n})\n\n# \ub098\uc774 \uac80\uc99d (0~120)\nassert df['\ub098\uc774'].between(0, 120).all(), \"\ub098\uc774\uc5d0 \uc774\uc0c1\ud55c \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4\"\n\n# \uc5f0\ubd09 \uac80\uc99d (\uc591\uc218)\ninvalid_salary = df[df['\uc5f0\ubd09'] < 0]\nif not invalid_salary.empty:\n    print(f\"\uc798\ubabb\ub41c \uc5f0\ubd09 \ub370\uc774\ud130:\\n{invalid_salary}\")\n\n# \uc774\uba54\uc77c \uac80\uc99d\nemail_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\ndf['\uc774\uba54\uc77c_\uc720\ud6a8'] = df['\uc774\uba54\uc77c'].str.match(email_pattern)\ninvalid_emails = df[~df['\uc774\uba54\uc77c_\uc720\ud6a8']]\nprint(f\"\uc798\ubabb\ub41c \uc774\uba54\uc77c:\\n{invalid_emails}\")\n\n# \uc911\ubcf5 \uac80\uc99d\nduplicates = df[df.duplicated(subset=['\uc774\ub984'], keep=False)]\nif not duplicates.empty:\n    print(f\"\uc911\ubcf5\ub41c \uc774\ub984:\\n{duplicates}\")\n"})}),"\n",(0,r.jsx)(e.h3,{id:"472-\ub370\uc774\ud130-\ud488\uc9c8-\ub9ac\ud3ec\ud2b8",children:"4.7.2 \ub370\uc774\ud130 \ud488\uc9c8 \ub9ac\ud3ec\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def data_quality_report(df):\n    \"\"\"\ub370\uc774\ud130 \ud488\uc9c8 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\"\"\"\n    report = {}\n\n    for col in df.columns:\n        report[col] = {\n            '\ud0c0\uc785': df[col].dtype,\n            '\uacb0\uce21\uce58': df[col].isnull().sum(),\n            '\uacb0\uce21\uce58_\ube44\uc728': f\"{df[col].isnull().sum() / len(df) * 100:.2f}%\",\n            '\uace0\uc720\uac12': df[col].nunique(),\n            '\uc911\ubcf5\uac12': df[col].duplicated().sum()\n        }\n\n        # \uc22b\uc790\ud615 \uceec\ub7fc\n        if pd.api.types.is_numeric_dtype(df[col]):\n            report[col].update({\n                '\ud3c9\uade0': f\"{df[col].mean():.2f}\",\n                '\ucd5c\uc18c': df[col].min(),\n                '\ucd5c\ub300': df[col].max(),\n                '\uc74c\uc218\uac12': (df[col] < 0).sum()\n            })\n\n        # \ubb38\uc790\uc5f4 \uceec\ub7fc\n        elif pd.api.types.is_string_dtype(df[col]):\n            report[col].update({\n                '\ud3c9\uade0_\uae38\uc774': f\"{df[col].str.len().mean():.2f}\",\n                '\uacf5\ubc31_\ud3ec\ud568': df[col].str.contains(r'^\\s|\\s$', regex=True).sum()\n            })\n\n    return pd.DataFrame(report).T\n\n# \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\nquality_report = data_quality_report(df)\nprint(quality_report)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"473-\uc81c\uc57d-\uc870\uac74-\uac80\uc99d",children:"4.7.3 \uc81c\uc57d \uc870\uac74 \uac80\uc99d"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Great Expectations \uc2a4\ud0c0\uc77c\uc758 \uac80\uc99d\ndef validate_dataframe(df, rules):\n    \"\"\"\ub370\uc774\ud130\ud504\ub808\uc784 \uac80\uc99d\"\"\"\n    errors = []\n\n    for col, constraints in rules.items():\n        if col not in df.columns:\n            errors.append(f\"\uceec\ub7fc '{col}'\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\")\n            continue\n\n        # \ud544\uc218 \uc5ec\ubd80\n        if constraints.get('required') and df[col].isnull().any():\n            errors.append(f\"\uceec\ub7fc '{col}'\uc5d0 \uacb0\uce21\uce58\uac00 \uc788\uc2b5\ub2c8\ub2e4\")\n\n        # \ubc94\uc704 \uac80\uc99d\n        if 'min' in constraints:\n            if (df[col] < constraints['min']).any():\n                errors.append(f\"\uceec\ub7fc '{col}'\uc5d0 \ucd5c\uc18c\uac12({constraints['min']})\ubcf4\ub2e4 \uc791\uc740 \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4\")\n\n        if 'max' in constraints:\n            if (df[col] > constraints['max']).any():\n                errors.append(f\"\uceec\ub7fc '{col}'\uc5d0 \ucd5c\ub300\uac12({constraints['max']})\ubcf4\ub2e4 \ud070 \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4\")\n\n        # \ud5c8\uc6a9 \uac12\n        if 'allowed_values' in constraints:\n            invalid = ~df[col].isin(constraints['allowed_values'])\n            if invalid.any():\n                errors.append(f\"\uceec\ub7fc '{col}'\uc5d0 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc740 \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4\")\n\n        # \uc815\uaddc\uc2dd \ud328\ud134\n        if 'pattern' in constraints:\n            invalid = ~df[col].str.match(constraints['pattern'])\n            if invalid.any():\n                errors.append(f\"\uceec\ub7fc '{col}'\uc5d0 \ud328\ud134\uacfc \ub9de\uc9c0 \uc54a\ub294 \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4\")\n\n    return errors\n\n# \uac80\uc99d \uaddc\uce59 \uc815\uc758\nvalidation_rules = {\n    '\ub098\uc774': {'required': True, 'min': 0, 'max': 120},\n    '\uc5f0\ubd09': {'required': True, 'min': 0},\n    '\ub4f1\uae09': {'allowed_values': ['Gold', 'Silver', 'Bronze']},\n    '\uc774\uba54\uc77c': {'pattern': r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'}\n}\n\n# \uac80\uc99d \uc2e4\ud589\nerrors = validate_dataframe(df, validation_rules)\nif errors:\n    print(\"\uac80\uc99d \uc624\ub958:\")\n    for error in errors:\n        print(f\"  - {error}\")\nelse:\n    print(\"\ubaa8\ub4e0 \uac80\uc99d \ud1b5\uacfc!\")\n"})}),"\n",(0,r.jsx)(e.h2,{id:"48-\uc77c\uad00\uc131-\ud655\ubcf4",children:"4.8 \uc77c\uad00\uc131 \ud655\ubcf4"}),"\n",(0,r.jsx)(e.p,{children:"\ub370\uc774\ud130\uc758 \uc77c\uad00\uc131\uc740 \uc815\ud655\ud55c \ubd84\uc11d\uc758 \uae30\ubcf8\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"481-\ub2e8\uc704-\ud1b5\uc77c",children:"4.8.1 \ub2e8\uc704 \ud1b5\uc77c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \ud63c\ud569\ub41c \ub2e8\uc704 \ub370\uc774\ud130\ndf = pd.DataFrame({\n    '\uac70\ub9ac': ['100m', '2km', '500m', '1.5km', '3000m'],\n    '\ubb34\uac8c': ['1kg', '500g', '2000g', '1.5kg', '750g'],\n    '\uc628\ub3c4': ['25C', '77F', '30C', '86F', '20C']\n})\n\n# \uac70\ub9ac\ub97c \ubbf8\ud130\ub85c \ud1b5\uc77c\ndef normalize_distance(dist):\n    if 'km' in dist:\n        return float(dist.replace('km', '')) * 1000\n    elif 'm' in dist:\n        return float(dist.replace('m', ''))\n    return None\n\ndf['\uac70\ub9ac_m'] = df['\uac70\ub9ac'].apply(normalize_distance)\n\n# \ubb34\uac8c\ub97c \uadf8\ub7a8\uc73c\ub85c \ud1b5\uc77c\ndef normalize_weight(weight):\n    if 'kg' in weight:\n        return float(weight.replace('kg', '')) * 1000\n    elif 'g' in weight:\n        return float(weight.replace('g', ''))\n    return None\n\ndf['\ubb34\uac8c_g'] = df['\ubb34\uac8c'].apply(normalize_weight)\n\n# \uc628\ub3c4\ub97c \uc12d\uc528\ub85c \ud1b5\uc77c\ndef normalize_temperature(temp):\n    if 'F' in temp:\n        f = float(temp.replace('F', ''))\n        return (f - 32) * 5/9\n    elif 'C' in temp:\n        return float(temp.replace('C', ''))\n    return None\n\ndf['\uc628\ub3c4_C'] = df['\uc628\ub3c4'].apply(normalize_temperature)\n\nprint(df)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"482-\uba85\uba85-\uaddc\uce59-\ud1b5\uc77c",children:"4.8.2 \uba85\uba85 \uaddc\uce59 \ud1b5\uc77c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \ubd88\uc77c\uce58\ud55c \uba85\uba85\ndf = pd.DataFrame({\n    'First_Name': ['Kim', 'Lee', 'Park'],\n    'last_name': ['\ucca0\uc218', '\uc601\ud76c', '\ubbfc\uc218'],\n    'AGE': [25, 30, 35],\n    'City Name': ['\uc11c\uc6b8', '\ubd80\uc0b0', '\ub300\uad6c']\n})\n\n# \uceec\ub7fc\uba85 \ud45c\uc900\ud654 (\uc18c\ubb38\uc790 + \uc5b8\ub354\uc2a4\ucf54\uc5b4)\ndef standardize_column_name(col):\n    # \uc18c\ubb38\uc790 \ubcc0\ud658\n    col = col.lower()\n    # \uacf5\ubc31\uc744 \uc5b8\ub354\uc2a4\ucf54\uc5b4\ub85c\n    col = col.replace(' ', '_')\n    return col\n\ndf.columns = [standardize_column_name(col) for col in df.columns]\nprint(df.columns)\n# Index(['first_name', 'last_name', 'age', 'city_name'], dtype='object')\n\n# \ub610\ub294 \ud55c\ubc88\uc5d0\ndf.columns = df.columns.str.lower().str.replace(' ', '_')\n"})}),"\n",(0,r.jsx)(e.h3,{id:"483-\uac12\uc758-\ud45c\uc900\ud654",children:"4.8.3 \uac12\uc758 \ud45c\uc900\ud654"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uac19\uc740 \uc758\ubbf8, \ub2e4\ub978 \ud45c\ud604\ndf = pd.DataFrame({\n    '\uc131\ubcc4': ['\ub0a8', 'M', 'male', '\ub0a8\uc790', 'Male', '\uc5ec', 'F', 'female', '\uc5ec\uc790'],\n    '\uc0c1\ud0dc': ['\uc644\ub8cc', 'DONE', 'complete', '\uc885\ub8cc', 'finished']\n})\n\n# \uc131\ubcc4 \ud45c\uc900\ud654\ngender_mapping = {\n    '\ub0a8': 'Male',\n    '\ub0a8\uc790': 'Male',\n    'M': 'Male',\n    'male': 'Male',\n    'Male': 'Male',\n    '\uc5ec': 'Female',\n    '\uc5ec\uc790': 'Female',\n    'F': 'Female',\n    'female': 'Female',\n    'Female': 'Female'\n}\n\ndf['\uc131\ubcc4_\ud45c\uc900'] = df['\uc131\ubcc4'].map(gender_mapping)\n\n# \uc0c1\ud0dc \ud45c\uc900\ud654\nstatus_mapping = {\n    '\uc644\ub8cc': 'Completed',\n    'DONE': 'Completed',\n    'complete': 'Completed',\n    '\uc885\ub8cc': 'Completed',\n    'finished': 'Completed'\n}\n\ndf['\uc0c1\ud0dc_\ud45c\uc900'] = df['\uc0c1\ud0dc'].map(status_mapping)\n\nprint(df)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"49-\uc2e4\uc804-\uc608\uc81c-\ub354\ub7ec\uc6b4-\ub370\uc774\ud130-\uc644\uc804-\uc815\uc81c",children:"4.9 \uc2e4\uc804 \uc608\uc81c: \ub354\ub7ec\uc6b4 \ub370\uc774\ud130 \uc644\uc804 \uc815\uc81c"}),"\n",(0,r.jsx)(e.p,{children:"\uc2e4\uc81c \uc5c5\ubb34\uc5d0\uc11c \ub9c8\uc8fc\uce60 \ubc95\ud55c \uc9c0\uc800\ubd84\ud55c \ub370\uc774\ud130\ub97c \ucc98\uc74c\ubd80\ud130 \ub05d\uae4c\uc9c0 \uc815\uc81c\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\nimport re\n\n# \uc2e4\uc81c \ub354\ub7ec\uc6b4 \ub370\uc774\ud130 \uc2dc\ubbac\ub808\uc774\uc158\nraw_data = {\n    'customer_id': ['C001', 'C002', 'C001', 'C003', 'C004', 'C002', None, 'C005', 'C006'],\n    'NAME': ['  \uae40\ucca0\uc218', 'LEE Young-hee ', 'Kim Chul-soo', '\ubc15\ubbfc\uc218  ', 'CHOI', 'lee young-hee', '\uc815\uc9c0\uc6d0', '  \uac15\uac10\ucc2c ', 'Unknown'],\n    'Age': ['25', '30\uc138', '25', 'unknown', '28', '30', '35', '40\uc138', '-1'],\n    'Phone': ['010-1234-5678', '01012345678', '010.1234.5678', '10-1234-5678', '010-9999-9999', '010-1234-5678', None, '02)1234-5678', '010-1111-2222'],\n    'email': ['kim@test.com', 'LEE@TEST.COM', 'kim@test.com', 'invalid-email', 'choi@example.com', 'lee@test.com', 'jung@test.com', 'kang@test.com', ''],\n    'City': ['\uc11c\uc6b8', 'SEOUL', '\uc11c\uc6b8\ud2b9\ubcc4\uc2dc', '\ubd80\uc0b0', ' \ub300\uad6c ', 'seoul', '\uc778\ucc9c', '\uc11c\uc6b8', None],\n    'purchase_amount': ['1,000', '2500', '1000', '3,500.50', 'N/A', '2,500', '4000', '5,000', '-100'],\n    'Purchase_Date': ['2024-01-01', '2024/01/15', '20240101', 'Jan 20, 2024', '2024-02-01', '2024.01.15', '2024-02-10', '2024-03-01', 'invalid'],\n    'Status': ['\uc644\ub8cc', 'DONE', 'complete', '\ucc98\ub9ac\uc911', '\uc644\ub8cc', 'done', 'pending', '\uc644\ub8cc', '\ucde8\uc18c']\n}\n\ndf = pd.DataFrame(raw_data)\nprint(\"=== \uc6d0\ubcf8 \ub370\uc774\ud130 ===\")\nprint(df)\nprint(f\"\\n\ub370\uc774\ud130 \ud615\ud0dc: {df.shape}\")\nprint(f\"\uacb0\uce21\uce58:\\n{df.isnull().sum()}\")\n\n# === 1\ub2e8\uacc4: \uceec\ub7fc\uba85 \ud45c\uc900\ud654 ===\nprint(\"\\n\\n=== 1\ub2e8\uacc4: \uceec\ub7fc\uba85 \ud45c\uc900\ud654 ===\")\ndf.columns = df.columns.str.lower().str.replace(' ', '_')\nprint(f\"\ud45c\uc900\ud654\ub41c \uceec\ub7fc\uba85: {list(df.columns)}\")\n\n# === 2\ub2e8\uacc4: \uc911\ubcf5 \ub370\uc774\ud130 \ucc98\ub9ac ===\nprint(\"\\n\\n=== 2\ub2e8\uacc4: \uc911\ubcf5 \ub370\uc774\ud130 \ucc98\ub9ac ===\")\nprint(f\"\uc911\ubcf5 \ud589 \uc218: {df.duplicated().sum()}\")\nprint(f\"customer_id \uae30\uc900 \uc911\ubcf5: {df.duplicated(subset=['customer_id']).sum()}\")\n\n# \uc644\uc804 \uc911\ubcf5 \uc81c\uac70\ndf = df.drop_duplicates()\n\n# customer_id \uae30\uc900 \uc911\ubcf5\uc740 \ucd5c\uc2e0 \ub370\uc774\ud130 \uc720\uc9c0\ndf['purchase_date_temp'] = pd.to_datetime(df['purchase_date'], errors='coerce')\ndf = df.sort_values('purchase_date_temp', ascending=False)\ndf = df.drop_duplicates(subset=['customer_id'], keep='first')\ndf = df.drop('purchase_date_temp', axis=1)\ndf = df.reset_index(drop=True)\n\nprint(f\"\uc911\ubcf5 \uc81c\uac70 \ud6c4: {df.shape}\")\n\n# === 3\ub2e8\uacc4: \uacb0\uce21\uce58 \ucc98\ub9ac ===\nprint(\"\\n\\n=== 3\ub2e8\uacc4: \uacb0\uce21\uce58 \ucc98\ub9ac ===\")\n\n# customer_id\uac00 \uc5c6\ub294 \ud589\uc740 \uc81c\uac70\ndf = df.dropna(subset=['customer_id'])\n\n# name\uc774 'Unknown'\uc774\uac70\ub098 \ube44\uc5b4\uc788\uc73c\uba74 \uacb0\uce21\uce58\ub85c\ndf.loc[df['name'].isin(['Unknown', '']), 'name'] = np.nan\n\n# email\uc774 \ube44\uc5b4\uc788\uc73c\uba74 \uacb0\uce21\uce58\ub85c\ndf.loc[df['email'] == '', 'email'] = np.nan\n\n# city \uacb0\uce21\uce58\ub294 '\ubbf8\uc815'\uc73c\ub85c\ndf['city'] = df['city'].fillna('\ubbf8\uc815')\n\nprint(f\"\uacb0\uce21\uce58 \ucc98\ub9ac \ud6c4:\\n{df.isnull().sum()}\")\n\n# === 4\ub2e8\uacc4: \ubb38\uc790\uc5f4 \uc815\uc81c ===\nprint(\"\\n\\n=== 4\ub2e8\uacc4: \ubb38\uc790\uc5f4 \uc815\uc81c ===\")\n\n# name: \uacf5\ubc31 \uc81c\uac70, \uc18c\ubb38\uc790\ub85c \ud1b5\uc77c\ndf['name'] = df['name'].str.strip().str.lower()\n\n# email: \uc18c\ubb38\uc790\ub85c \ud1b5\uc77c\ndf['email'] = df['email'].str.lower()\n\n# city: \uc11c\uc6b8 \uad00\ub828 \ud45c\ud604 \ud1b5\uc77c\ndf['city'] = df['city'].str.strip().str.lower()\ndf['city'] = df['city'].replace({\n    'seoul': '\uc11c\uc6b8',\n    '\uc11c\uc6b8\ud2b9\ubcc4\uc2dc': '\uc11c\uc6b8'\n})\n\nprint(\"\ubb38\uc790\uc5f4 \uc815\uc81c \uc644\ub8cc\")\n\n# === 5\ub2e8\uacc4: \uc804\ud654\ubc88\ud638 \ud45c\uc900\ud654 ===\nprint(\"\\n\\n=== 5\ub2e8\uacc4: \uc804\ud654\ubc88\ud638 \ud45c\uc900\ud654 ===\")\n\ndef standardize_phone(phone):\n    if pd.isna(phone):\n        return None\n\n    # \uc22b\uc790\ub9cc \ucd94\ucd9c\n    digits = re.sub(r'\\D', '', str(phone))\n\n    # \uae38\uc774\uc5d0 \ub530\ub77c \ud615\uc2dd \uc9c0\uc815\n    if len(digits) == 11:  # \ud734\ub300\ud3f0\n        return f\"{digits[:3]}-{digits[3:7]}-{digits[7:]}\"\n    elif len(digits) == 10:  # \uc9c0\uc5ed\ubc88\ud638\n        if digits.startswith('02'):\n            return f\"{digits[:2]}-{digits[2:6]}-{digits[6:]}\"\n        else:\n            return f\"{digits[:3]}-{digits[3:7]}-{digits[7:]}\"\n    else:\n        return None\n\ndf['phone'] = df['phone'].apply(standardize_phone)\nprint(f\"\uc804\ud654\ubc88\ud638 \ud45c\uc900\ud654:\\n{df['phone']}\")\n\n# === 6\ub2e8\uacc4: \ub098\uc774 \ub370\uc774\ud130 \uc815\uc81c ===\nprint(\"\\n\\n=== 6\ub2e8\uacc4: \ub098\uc774 \ub370\uc774\ud130 \uc815\uc81c ===\")\n\ndef clean_age(age):\n    if pd.isna(age):\n        return np.nan\n\n    # \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n    age_str = str(age)\n\n    # '\uc138' \uc81c\uac70\n    age_str = age_str.replace('\uc138', '')\n\n    # 'unknown' \uac19\uc740 \ubb38\uc790\ub294 NaN\uc73c\ub85c\n    if age_str.lower() in ['unknown', 'n/a', '']:\n        return np.nan\n\n    try:\n        age_num = float(age_str)\n        # \uc720\ud6a8 \ubc94\uc704 \ud655\uc778 (0~120)\n        if 0 <= age_num <= 120:\n            return int(age_num)\n        else:\n            return np.nan\n    except:\n        return np.nan\n\ndf['age'] = df['age'].apply(clean_age)\nprint(f\"\ub098\uc774 \uc815\uc81c:\\n{df['age']}\")\n\n# \ub098\uc774 \uacb0\uce21\uce58\ub294 \uc911\uc559\uac12\uc73c\ub85c\ndf['age'] = df['age'].fillna(df['age'].median())\n\n# === 7\ub2e8\uacc4: \uae08\uc561 \ub370\uc774\ud130 \uc815\uc81c ===\nprint(\"\\n\\n=== 7\ub2e8\uacc4: \uae08\uc561 \ub370\uc774\ud130 \uc815\uc81c ===\")\n\ndef clean_amount(amount):\n    if pd.isna(amount):\n        return np.nan\n\n    amount_str = str(amount)\n\n    # N/A \ucc98\ub9ac\n    if amount_str.lower() in ['n/a', 'na', '']:\n        return np.nan\n\n    # \uc27c\ud45c \uc81c\uac70\n    amount_str = amount_str.replace(',', '')\n\n    try:\n        amount_num = float(amount_str)\n        # \uc74c\uc218\ub294 0\uc73c\ub85c\n        return max(0, amount_num)\n    except:\n        return np.nan\n\ndf['purchase_amount'] = df['purchase_amount'].apply(clean_amount)\nprint(f\"\uae08\uc561 \uc815\uc81c:\\n{df['purchase_amount']}\")\n\n# \uae08\uc561 \uacb0\uce21\uce58\ub294 \ud3c9\uade0\uac12\uc73c\ub85c\ndf['purchase_amount'] = df['purchase_amount'].fillna(df['purchase_amount'].mean())\n\n# === 8\ub2e8\uacc4: \ub0a0\uc9dc \ub370\uc774\ud130 \uc815\uc81c ===\nprint(\"\\n\\n=== 8\ub2e8\uacc4: \ub0a0\uc9dc \ub370\uc774\ud130 \uc815\uc81c ===\")\n\ndf['purchase_date'] = pd.to_datetime(df['purchase_date'], errors='coerce')\n\n# \ub0a0\uc9dc \uacb0\uce21\uce58\ub294 \uac00\uc7a5 \ucd5c\uadfc \ub0a0\uc9dc\ub85c\ndf['purchase_date'] = df['purchase_date'].fillna(df['purchase_date'].max())\n\nprint(f\"\ub0a0\uc9dc \uc815\uc81c:\\n{df['purchase_date']}\")\n\n# === 9\ub2e8\uacc4: \uc0c1\ud0dc \ud45c\uc900\ud654 ===\nprint(\"\\n\\n=== 9\ub2e8\uacc4: \uc0c1\ud0dc \ud45c\uc900\ud654 ===\")\n\nstatus_mapping = {\n    '\uc644\ub8cc': 'completed',\n    'done': 'completed',\n    'complete': 'completed',\n    '\ucc98\ub9ac\uc911': 'pending',\n    'pending': 'pending',\n    '\ucde8\uc18c': 'cancelled'\n}\n\ndf['status'] = df['status'].str.lower().map(status_mapping)\nprint(f\"\uc0c1\ud0dc \ud45c\uc900\ud654:\\n{df['status'].value_counts()}\")\n\n# === 10\ub2e8\uacc4: \uc774\uba54\uc77c \uac80\uc99d ===\nprint(\"\\n\\n=== 10\ub2e8\uacc4: \uc774\uba54\uc77c \uac80\uc99d ===\")\n\nemail_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\ndf['email_valid'] = df['email'].str.match(email_pattern, na=False)\n\n# \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc774\uba54\uc77c\uc740 \uacb0\uce21\uce58\ub85c\ndf.loc[~df['email_valid'], 'email'] = np.nan\ndf = df.drop('email_valid', axis=1)\n\nprint(f\"\uc720\ud6a8\ud55c \uc774\uba54\uc77c: {df['email'].notna().sum()}/{len(df)}\")\n\n# === 11\ub2e8\uacc4: \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654 ===\nprint(\"\\n\\n=== 11\ub2e8\uacc4: \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654 ===\")\n\n# \uce74\ud14c\uace0\ub9ac\ud615 \ubcc0\ud658\ndf['city'] = df['city'].astype('category')\ndf['status'] = df['status'].astype('category')\n\n# \uc815\uc218\ud615 \ubcc0\ud658\ndf['age'] = df['age'].astype('int')\n\nprint(f\"\\n\ucd5c\uc885 \ub370\uc774\ud130 \ud0c0\uc785:\\n{df.dtypes}\")\n\n# === \ucd5c\uc885 \uacb0\uacfc ===\nprint(\"\\n\\n=== \ucd5c\uc885 \uc815\uc81c\ub41c \ub370\uc774\ud130 ===\")\nprint(df)\n\nprint(f\"\\n\ucd5c\uc885 \ub370\uc774\ud130 \ud615\ud0dc: {df.shape}\")\nprint(f\"\\n\ucd5c\uc885 \uacb0\uce21\uce58:\\n{df.isnull().sum()}\")\n\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\nprint(f\"\\n\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {df.memory_usage(deep=True).sum() / 1024:.2f} KB\")\n\n# === \ub370\uc774\ud130 \ud488\uc9c8 \ub9ac\ud3ec\ud2b8 ===\nprint(\"\\n\\n=== \ub370\uc774\ud130 \ud488\uc9c8 \ub9ac\ud3ec\ud2b8 ===\")\nquality_report = pd.DataFrame({\n    '\uceec\ub7fc': df.columns,\n    '\ud0c0\uc785': df.dtypes.values,\n    '\uacb0\uce21\uce58': df.isnull().sum().values,\n    '\uace0\uc720\uac12': [df[col].nunique() for col in df.columns]\n})\nprint(quality_report)\n\n# \uc815\uc81c\ub41c \ub370\uc774\ud130 \uc800\uc7a5 (\uc120\ud0dd\uc0ac\ud56d)\n# df.to_csv('cleaned_data.csv', index=False)\nprint(\"\\n\ub370\uc774\ud130 \uc815\uc81c \uc644\ub8cc!\")\n"})}),"\n",(0,r.jsxs)(e.admonition,{type:"tip",children:[(0,r.jsx)(e.p,{children:"\uc2e4\uc804\uc5d0\uc11c\ub294 \uc815\uc81c \uacfc\uc815\uc744 \ud568\uc218\ub85c \ub9cc\ub4e4\uc5b4 \uc7ac\uc0ac\uc6a9\ud558\uc138\uc694:"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def clean_customer_data(df):\n    """\uace0\uac1d \ub370\uc774\ud130 \uc815\uc81c \ud30c\uc774\ud504\ub77c\uc778"""\n    df = df.copy()\n\n    # 1. \uceec\ub7fc\uba85 \ud45c\uc900\ud654\n    df.columns = df.columns.str.lower().str.replace(\' \', \'_\')\n\n    # 2. \uc911\ubcf5 \uc81c\uac70\n    df = df.drop_duplicates()\n\n    # 3. \uacb0\uce21\uce58 \ucc98\ub9ac\n    # ... (\uac01 \ub2e8\uacc4 \ub85c\uc9c1)\n\n    return df\n\ncleaned_df = clean_customer_data(raw_df)\n'})})]}),"\n",(0,r.jsx)(e.h2,{id:"\uc5f0\uc2b5-\ubb38\uc81c",children:"\uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-1-\uacb0\uce21\uce58-\uc804\ub7b5\uc801-\ucc98\ub9ac",children:"\ubb38\uc81c 1: \uacb0\uce21\uce58 \uc804\ub7b5\uc801 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\ub2e4\uc74c \ub370\uc774\ud130\uc758 \uacb0\uce21\uce58\ub97c \uc801\uc808\ud55c \ubc29\ubc95\uc73c\ub85c \ucc98\ub9ac\ud558\uc138\uc694."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\n    '\ub0a0\uc9dc': pd.date_range('2024-01-01', periods=10),\n    '\uc628\ub3c4': [20, 22, np.nan, 25, np.nan, 28, 30, np.nan, 32, 35],\n    '\ud310\ub9e4\ub7c9': [100, 120, np.nan, 140, 150, np.nan, 180, 190, np.nan, 220],\n    '\uce74\ud14c\uace0\ub9ac': ['A', 'B', np.nan, 'A', 'B', 'A', np.nan, 'B', 'A', 'B']\n})\n\n# TODO:\n# 1. \uc628\ub3c4\ub294 \uc120\ud615 \ubcf4\uac04\n# 2. \ud310\ub9e4\ub7c9\uc740 \uc774\ub3d9 \ud3c9\uade0\n# 3. \uce74\ud14c\uace0\ub9ac\ub294 \uc774\uc804 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n"})}),"\n",(0,r.jsxs)(d,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# 1. \uc628\ub3c4: \uc120\ud615 \ubcf4\uac04\ndf['\uc628\ub3c4'] = df['\uc628\ub3c4'].interpolate(method='linear')\n\n# 2. \ud310\ub9e4\ub7c9: 3\uc77c \uc774\ub3d9 \ud3c9\uade0\uc73c\ub85c \ucc44\uc6b0\uae30\ndf['\ud310\ub9e4\ub7c9'] = df['\ud310\ub9e4\ub7c9'].fillna(\n    df['\ud310\ub9e4\ub7c9'].rolling(window=3, min_periods=1).mean()\n)\n\n# \ub610\ub294 \uc55e\ub4a4 \ud3c9\uade0\nfor idx in df[df['\ud310\ub9e4\ub7c9'].isna()].index:\n    before = df.loc[:idx-1, '\ud310\ub9e4\ub7c9'].iloc[-1] if idx > 0 else np.nan\n    after = df.loc[idx+1:, '\ud310\ub9e4\ub7c9'].iloc[0] if idx < len(df)-1 else np.nan\n    df.loc[idx, '\ud310\ub9e4\ub7c9'] = np.nanmean([before, after])\n\n# 3. \uce74\ud14c\uace0\ub9ac: \uc774\uc804 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\ndf['\uce74\ud14c\uace0\ub9ac'] = df['\uce74\ud14c\uace0\ub9ac'].ffill()\n\nprint(df)\n"})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-2-\ubcf5\uc7a1\ud55c-\ubb38\uc790\uc5f4-\uc815\uc81c",children:"\ubb38\uc81c 2: \ubcf5\uc7a1\ud55c \ubb38\uc790\uc5f4 \uc815\uc81c"}),"\n",(0,r.jsx)(e.p,{children:"\ub2e4\uc74c \uc8fc\uc18c \ub370\uc774\ud130\ub97c \uc815\uc81c\ud558\uc5ec '\uc2dc\ub3c4', '\uc2dc\uad70\uad6c', '\ub3d9' \uceec\ub7fc\uc73c\ub85c \ubd84\ub9ac\ud558\uc138\uc694."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"df = pd.DataFrame({\n    '\uc8fc\uc18c': [\n        '\uc11c\uc6b8\ud2b9\ubcc4\uc2dc \uac15\ub0a8\uad6c \uc5ed\uc0bc\ub3d9 123',\n        '\uacbd\uae30\ub3c4 \uc131\ub0a8\uc2dc \ubd84\ub2f9\uad6c \uc815\uc790\ub3d9 456',\n        '\ubd80\uc0b0\uad11\uc5ed\uc2dc \ud574\uc6b4\ub300\uad6c \uc6b0\ub3d9 789',\n        'SEOUL gangnam-gu yeoksam-dong 123',\n        '\uc11c\uc6b8 \uac15\ub0a8\uad6c \uc5ed\uc0bc\ub3d9'\n    ]\n})\n\n# TODO: \uc2dc\ub3c4, \uc2dc\uad70\uad6c, \ub3d9 \ubd84\ub9ac\n"})}),"\n",(0,r.jsxs)(d,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import re\n\ndef parse_address(addr):\n    # \uc18c\ubb38\uc790 \ubcc0\ud658 \ubc0f \uc601\ubb38 \uc81c\uac70\n    addr = re.sub(r'[a-zA-Z\\-]', '', addr.lower())\n    addr = re.sub(r'\\s+', ' ', addr).strip()\n\n    # \uc22b\uc790 \uc81c\uac70\n    addr = re.sub(r'\\d+', '', addr).strip()\n\n    # \ubd84\ub9ac\n    parts = addr.split()\n\n    result = {\n        '\uc2dc\ub3c4': None,\n        '\uc2dc\uad70\uad6c': None,\n        '\ub3d9': None\n    }\n\n    if len(parts) >= 1:\n        result['\uc2dc\ub3c4'] = parts[0]\n    if len(parts) >= 2:\n        result['\uc2dc\uad70\uad6c'] = parts[1]\n    if len(parts) >= 3:\n        result['\ub3d9'] = parts[2]\n\n    return pd.Series(result)\n\ndf[['\uc2dc\ub3c4', '\uc2dc\uad70\uad6c', '\ub3d9']] = df['\uc8fc\uc18c'].apply(parse_address)\nprint(df)\n"})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-3-\uc774\uc0c1\uce58-\ud0d0\uc9c0-\ubc0f-\ucc98\ub9ac",children:"\ubb38\uc81c 3: \uc774\uc0c1\uce58 \ud0d0\uc9c0 \ubc0f \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\ub2e4\uc74c \ub370\uc774\ud130\uc5d0\uc11c \uc774\uc0c1\uce58\ub97c \ucc3e\uace0 \uc801\uc808\ud788 \ucc98\ub9ac\ud558\uc138\uc694."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"np.random.seed(42)\ndf = pd.DataFrame({\n    '\uc810\uc218': np.concatenate([\n        np.random.normal(70, 10, 95),\n        [5, 10, 98, 99, 100]  # \uc774\uc0c1\uce58\n    ])\n})\n\n# TODO:\n# 1. IQR \ubc29\ubc95\uc73c\ub85c \uc774\uc0c1\uce58 \ud0d0\uc9c0\n# 2. \uc774\uc0c1\uce58\ub97c \uc0c1\ud55c/\ud558\ud55c\uac12\uc73c\ub85c \ub300\uccb4\n# 3. \uacb0\uacfc \uc2dc\uac01\ud654 (\uc120\ud0dd)\n"})}),"\n",(0,r.jsxs)(d,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# 1. IQR \ubc29\ubc95\uc73c\ub85c \uc774\uc0c1\uce58 \ud0d0\uc9c0\nQ1 = df['\uc810\uc218'].quantile(0.25)\nQ3 = df['\uc810\uc218'].quantile(0.75)\nIQR = Q3 - Q1\n\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\nprint(f\"\ud558\ud55c: {lower_bound:.2f}, \uc0c1\ud55c: {upper_bound:.2f}\")\n\n# \uc774\uc0c1\uce58 \ud655\uc778\noutliers = df[(df['\uc810\uc218'] < lower_bound) | (df['\uc810\uc218'] > upper_bound)]\nprint(f\"\uc774\uc0c1\uce58 \uac1c\uc218: {len(outliers)}\")\nprint(f\"\uc774\uc0c1\uce58 \uac12: {outliers['\uc810\uc218'].values}\")\n\n# 2. Capping: \uc774\uc0c1\uce58\ub97c \uc0c1\ud55c/\ud558\ud55c\uac12\uc73c\ub85c \ub300\uccb4\ndf['\uc810\uc218_\ucc98\ub9ac'] = df['\uc810\uc218'].clip(lower_bound, upper_bound)\n\n# \ube44\uad50\nprint(f\"\\n\uc6d0\ubcf8 \ud1b5\uacc4:\\n{df['\uc810\uc218'].describe()}\")\nprint(f\"\\n\ucc98\ub9ac \ud6c4 \ud1b5\uacc4:\\n{df['\uc810\uc218_\ucc98\ub9ac'].describe()}\")\n\n# 3. \uc2dc\uac01\ud654 (\uc120\ud0dd)\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 4))\n\naxes[0].boxplot(df['\uc810\uc218'])\naxes[0].set_title('\uc6d0\ubcf8 \ub370\uc774\ud130')\naxes[0].set_ylabel('\uc810\uc218')\n\naxes[1].boxplot(df['\uc810\uc218_\ucc98\ub9ac'])\naxes[1].set_title('\ucc98\ub9ac \ud6c4 \ub370\uc774\ud130')\naxes[1].set_ylabel('\uc810\uc218')\n\nplt.tight_layout()\nplt.show()\n"})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-4-\ud1b5\ud569-\ub370\uc774\ud130-\uc815\uc81c",children:"\ubb38\uc81c 4: \ud1b5\ud569 \ub370\uc774\ud130 \uc815\uc81c"}),"\n",(0,r.jsx)(e.p,{children:"\uc2e4\uc804 \ub370\uc774\ud130 \uc815\uc81c \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \ub354\ub7ec\uc6b4 \ub370\uc774\ud130\ndirty_df = pd.DataFrame({\n    'id': ['1', '2', '2', '3', None],\n    'name': ['  Kim ', 'LEE', 'lee', 'PARK', 'Choi  '],\n    'age': ['25', '30\uc138', '30', 'unknown', '35'],\n    'salary': ['3,000', '4500', '4,500', 'N/A', '5000'],\n    'email': ['kim@test.com', 'INVALID', 'lee@test.com', 'park@test.com', 'choi@test.com']\n})\n\n# TODO: clean_data \ud568\uc218 \uc791\uc131\ndef clean_data(df):\n    \"\"\"\ub370\uc774\ud130 \uc815\uc81c \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n    # \uc5ec\uae30\uc5d0 \uc815\uc81c \ub85c\uc9c1 \uad6c\ud604\n    pass\n\ncleaned_df = clean_data(dirty_df)\n"})}),"\n",(0,r.jsxs)(d,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"def clean_data(df):\n    \"\"\"\ub370\uc774\ud130 \uc815\uc81c \ud30c\uc774\ud504\ub77c\uc778\"\"\"\n    df = df.copy()\n\n    # 1. ID \ucc98\ub9ac\n    df = df.dropna(subset=['id'])  # ID \uc5c6\ub294 \ud589 \uc81c\uac70\n    df = df.drop_duplicates(subset=['id'])  # \uc911\ubcf5 ID \uc81c\uac70\n    df['id'] = df['id'].astype(int)\n\n    # 2. \uc774\ub984 \uc815\uc81c\n    df['name'] = df['name'].str.strip().str.title()\n\n    # 3. \ub098\uc774 \uc815\uc81c\n    def clean_age(age):\n        if pd.isna(age):\n            return np.nan\n        age_str = str(age).replace('\uc138', '').strip()\n        if age_str.lower() in ['unknown', 'n/a']:\n            return np.nan\n        try:\n            return int(age_str)\n        except:\n            return np.nan\n\n    df['age'] = df['age'].apply(clean_age)\n    df['age'] = df['age'].fillna(df['age'].median())  # \uc911\uc559\uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n\n    # 4. \uae09\uc5ec \uc815\uc81c\n    def clean_salary(salary):\n        if pd.isna(salary):\n            return np.nan\n        salary_str = str(salary).replace(',', '').strip()\n        if salary_str.lower() in ['n/a', 'na']:\n            return np.nan\n        try:\n            return float(salary_str)\n        except:\n            return np.nan\n\n    df['salary'] = df['salary'].apply(clean_salary)\n    df['salary'] = df['salary'].fillna(df['salary'].mean())  # \ud3c9\uade0\uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n\n    # 5. \uc774\uba54\uc77c \uac80\uc99d\n    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    df['email'] = df['email'].str.lower()\n    df.loc[~df['email'].str.match(email_pattern, na=False), 'email'] = np.nan\n\n    # 6. \uc778\ub371\uc2a4 \ub9ac\uc14b\n    df = df.reset_index(drop=True)\n\n    return df\n\ncleaned_df = clean_data(dirty_df)\nprint(\"=== \uc815\uc81c \uc804 ===\")\nprint(dirty_df)\nprint(\"\\n=== \uc815\uc81c \ud6c4 ===\")\nprint(cleaned_df)\nprint(f\"\\n\ub370\uc774\ud130 \ud0c0\uc785:\\n{cleaned_df.dtypes}\")\nprint(f\"\\n\uacb0\uce21\uce58:\\n{cleaned_df.isnull().sum()}\")\n"})})]}),"\n",(0,r.jsx)(e.h2,{id:"\uc815\ub9ac",children:"\uc815\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\ub370\uc774\ud130 \uc815\uc81c\ub294 \ub370\uc774\ud130 \ubd84\uc11d \ud504\ub85c\uc138\uc2a4\uc758 70-80%\ub97c \ucc28\uc9c0\ud558\ub294 \uc911\uc694\ud55c \uc791\uc5c5\uc785\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uacb0\uce21\uce58 \ucc98\ub9ac"}),": ",(0,r.jsx)(e.code,{children:"isnull()"}),", ",(0,r.jsx)(e.code,{children:"dropna()"}),", ",(0,r.jsx)(e.code,{children:"fillna()"}),", ",(0,r.jsx)(e.code,{children:"interpolate()"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc911\ubcf5 \uc81c\uac70"}),": ",(0,r.jsx)(e.code,{children:"duplicated()"}),", ",(0,r.jsx)(e.code,{children:"drop_duplicates()"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud0c0\uc785 \ubcc0\ud658"}),": ",(0,r.jsx)(e.code,{children:"astype()"}),", ",(0,r.jsx)(e.code,{children:"pd.to_numeric()"}),", ",(0,r.jsx)(e.code,{children:"pd.to_datetime()"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc774\uc0c1\uce58 \ucc98\ub9ac"}),": IQR, Z-Score, Isolation Forest"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ubb38\uc790\uc5f4 \uc815\uc81c"}),": ",(0,r.jsx)(e.code,{children:".str"})," \uc811\uadfc\uc790, \uc815\uaddc\ud45c\ud604\uc2dd"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uce74\ud14c\uace0\ub9ac"}),": ",(0,r.jsx)(e.code,{children:"category"})," \ud0c0\uc785\uc73c\ub85c \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uac80\uc99d"}),": \uc870\uac74 \ud655\uc778, \ud488\uc9c8 \ub9ac\ud3ec\ud2b8"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc77c\uad00\uc131"}),": \ub2e8\uc704 \ud1b5\uc77c, \uba85\uba85 \uaddc\uce59, \uac12 \ud45c\uc900\ud654"]}),"\n"]}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"\ub370\uc774\ud130 \uc815\uc81c\ub294 \ud55c \ubc88\uc5d0 \ub05d\ub098\ub294 \uc791\uc5c5\uc774 \uc544\ub2d9\ub2c8\ub2e4. \ud0d0\uc0c9\uc801 \ubd84\uc11d\uc744 \ud558\uba74\uc11c \uacc4\uc18d\ud574\uc11c \ubb38\uc81c\ub97c \ubc1c\uacac\ud558\uace0 \uc218\uc815\ud558\ub294 \ubc18\ubcf5\uc801\uc778 \uacfc\uc815\uc785\ub2c8\ub2e4."})}),"\n",(0,r.jsx)(e.p,{children:"\ub2e4\uc74c \uc139\uc158\uc5d0\uc11c\ub294 pandas\uc758 \uace0\uae09 \uae30\ub2a5\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"\ub2e4\uc74c"}),": ",(0,r.jsx)(e.a,{href:"./advanced",children:"\uace0\uae09 \uae30\ub2a5"})]})]})}function c(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}},8453:(n,e,d)=>{d.d(e,{R:()=>i,x:()=>t});var a=d(6540);const r={},l=a.createContext(r);function i(n){const e=a.useContext(l);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(l.Provider,{value:e},n.children)}}}]);