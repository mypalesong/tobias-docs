"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[9594],{4612:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"apscheduler/examples","title":"8. \uc2e4\uc804 \uc608\uc81c","description":"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\ub97c \uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc801\uc6a9\ud558\ub294 \ub2e4\uc591\ud55c \uc2e4\uc804 \uc608\uc81c\ub97c \ub2e4\ub8f9\ub2c8\ub2e4. Flask, Django, FastAPI \ud1b5\ud569\ubd80\ud130 \ub370\uc774\ud130 \ubc31\uc5c5, API \ud3f4\ub9c1, \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\uae4c\uc9c0 \ud3ec\uad04\uc801\uc73c\ub85c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","source":"@site/docs/apscheduler/examples.md","sourceDirName":"apscheduler","slug":"/apscheduler/examples","permalink":"/tobias-docs/comp-2/docs/apscheduler/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/apscheduler/examples.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"apschedulerSidebar","previous":{"title":"7. \ubaa8\ub2c8\ud130\ub9c1","permalink":"/tobias-docs/comp-2/docs/apscheduler/monitoring"}}');var s=r(4848),t=r(8453);const a={sidebar_position:9},i="8. \uc2e4\uc804 \uc608\uc81c",l={},d=[{value:"Flask \ud1b5\ud569",id:"flask-\ud1b5\ud569",level:2},{value:"\uae30\ubcf8 Flask \ud1b5\ud569",id:"\uae30\ubcf8-flask-\ud1b5\ud569",level:3},{value:"Flask-APScheduler \ud655\uc7a5 \uc0ac\uc6a9",id:"flask-apscheduler-\ud655\uc7a5-\uc0ac\uc6a9",level:3},{value:"Flask \ube14\ub8e8\ud504\ub9b0\ud2b8\uc640 \ud1b5\ud569",id:"flask-\ube14\ub8e8\ud504\ub9b0\ud2b8\uc640-\ud1b5\ud569",level:3},{value:"Django \ud1b5\ud569",id:"django-\ud1b5\ud569",level:2},{value:"Django \uae30\ubcf8 \ud1b5\ud569",id:"django-\uae30\ubcf8-\ud1b5\ud569",level:3},{value:"Django Management Command",id:"django-management-command",level:3},{value:"Celery\uc640 \ud568\uaed8 \uc0ac\uc6a9",id:"celery\uc640-\ud568\uaed8-\uc0ac\uc6a9",level:3},{value:"FastAPI \ud1b5\ud569",id:"fastapi-\ud1b5\ud569",level:2},{value:"\uae30\ubcf8 FastAPI \ud1b5\ud569",id:"\uae30\ubcf8-fastapi-\ud1b5\ud569",level:3},{value:"FastAPI \uc758\uc874\uc131 \uc8fc\uc785\uacfc \ud1b5\ud569",id:"fastapi-\uc758\uc874\uc131-\uc8fc\uc785\uacfc-\ud1b5\ud569",level:3},{value:"\ub370\uc774\ud130 \ubc31\uc5c5",id:"\ub370\uc774\ud130-\ubc31\uc5c5",level:2},{value:"PostgreSQL \ubc31\uc5c5",id:"postgresql-\ubc31\uc5c5",level:3},{value:"MongoDB \ubc31\uc5c5",id:"mongodb-\ubc31\uc5c5",level:3},{value:"API \ud3f4\ub9c1",id:"api-\ud3f4\ub9c1",level:2},{value:"REST API \ud3f4\ub9c1",id:"rest-api-\ud3f4\ub9c1",level:3},{value:"\ub9ac\ud3ec\ud2b8 \uc0dd\uc131",id:"\ub9ac\ud3ec\ud2b8-\uc0dd\uc131",level:2},{value:"PDF \ub9ac\ud3ec\ud2b8 \uc0dd\uc131",id:"pdf-\ub9ac\ud3ec\ud2b8-\uc0dd\uc131",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"8-\uc2e4\uc804-\uc608\uc81c",children:"8. \uc2e4\uc804 \uc608\uc81c"})}),"\n",(0,s.jsx)(e.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\ub97c \uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc801\uc6a9\ud558\ub294 \ub2e4\uc591\ud55c \uc2e4\uc804 \uc608\uc81c\ub97c \ub2e4\ub8f9\ub2c8\ub2e4. Flask, Django, FastAPI \ud1b5\ud569\ubd80\ud130 \ub370\uc774\ud130 \ubc31\uc5c5, API \ud3f4\ub9c1, \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\uae4c\uc9c0 \ud3ec\uad04\uc801\uc73c\ub85c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h2,{id:"flask-\ud1b5\ud569",children:"Flask \ud1b5\ud569"}),"\n",(0,s.jsx)(e.p,{children:"Flask \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c APScheduler\ub97c \ud1b5\ud569\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-flask-\ud1b5\ud569",children:"\uae30\ubcf8 Flask \ud1b5\ud569"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from flask import Flask, jsonify, request\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.triggers.cron import CronTrigger\nfrom datetime import datetime\nimport atexit\nimport logging\n\n# Flask \uc571 \uc0dd\uc131\napp = Flask(__name__)\n\n# \ub85c\uae45 \uc124\uc815\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# APScheduler \uc124\uc815\njobstores = {\n    'default': SQLAlchemyJobStore(url='sqlite:///flask_jobs.sqlite')\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\n# \uc2a4\ucf00\uc904\ub41c \uc791\uc5c5\ub4e4\ndef cleanup_old_data():\n    \"\"\"\uc624\ub798\ub41c \ub370\uc774\ud130 \uc815\ub9ac\"\"\"\n    logger.info(f\"[{datetime.now()}] \ub370\uc774\ud130 \uc815\ub9ac \uc791\uc5c5 \uc2e4\ud589\")\n    # \uc2e4\uc81c \uc815\ub9ac \ub85c\uc9c1\n    logger.info(\"\ub370\uc774\ud130 \uc815\ub9ac \uc644\ub8cc\")\n\ndef send_daily_report():\n    \"\"\"\uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc804\uc1a1\"\"\"\n    logger.info(f\"[{datetime.now()}] \uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc804\uc1a1\")\n    # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \ubc0f \uc804\uc1a1 \ub85c\uc9c1\n    logger.info(\"\ub9ac\ud3ec\ud2b8 \uc804\uc1a1 \uc644\ub8cc\")\n\ndef backup_database():\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5\"\"\"\n    logger.info(f\"[{datetime.now()}] \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5 \uc2dc\uc791\")\n    # \ubc31\uc5c5 \ub85c\uc9c1\n    logger.info(\"\ubc31\uc5c5 \uc644\ub8cc\")\n\n# \ucd08\uae30 \uc791\uc5c5 \ub4f1\ub85d\ndef init_scheduler():\n    \"\"\"\uc2a4\ucf00\uc904\ub7ec \ucd08\uae30\ud654\"\"\"\n    # \ub9e4\uc77c \uc0c8\ubcbd 2\uc2dc \ub370\uc774\ud130 \uc815\ub9ac\n    scheduler.add_job(\n        cleanup_old_data,\n        trigger=CronTrigger(hour=2, minute=0),\n        id='cleanup_job',\n        name='\ub370\uc774\ud130 \uc815\ub9ac',\n        replace_existing=True\n    )\n\n    # \ub9e4\uc77c \uc624\uc804 9\uc2dc \ub9ac\ud3ec\ud2b8 \uc804\uc1a1\n    scheduler.add_job(\n        send_daily_report,\n        trigger=CronTrigger(hour=9, minute=0),\n        id='report_job',\n        name='\uc77c\uc77c \ub9ac\ud3ec\ud2b8',\n        replace_existing=True\n    )\n\n    # \ub9e4\uc77c \uc624\uc804 3\uc2dc \ubc31\uc5c5\n    scheduler.add_job(\n        backup_database,\n        trigger=CronTrigger(hour=3, minute=0),\n        id='backup_job',\n        name='\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5',\n        replace_existing=True\n    )\n\n    scheduler.start()\n    logger.info(\"\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\ub428\")\n\n# API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.route('/')\ndef index():\n    \"\"\"\ud648\ud398\uc774\uc9c0\"\"\"\n    return jsonify({\n        'message': 'Flask + APScheduler',\n        'status': 'running'\n    })\n\n@app.route('/jobs')\ndef list_jobs():\n    \"\"\"Job \ubaa9\ub85d \uc870\ud68c\"\"\"\n    jobs = []\n    for job in scheduler.get_jobs():\n        jobs.append({\n            'id': job.id,\n            'name': job.name,\n            'next_run_time': str(job.next_run_time),\n            'trigger': str(job.trigger)\n        })\n    return jsonify({'jobs': jobs})\n\n@app.route('/jobs/<job_id>')\ndef get_job(job_id):\n    \"\"\"\ud2b9\uc815 Job \uc870\ud68c\"\"\"\n    job = scheduler.get_job(job_id)\n    if job:\n        return jsonify({\n            'id': job.id,\n            'name': job.name,\n            'next_run_time': str(job.next_run_time),\n            'trigger': str(job.trigger)\n        })\n    return jsonify({'error': 'Job not found'}), 404\n\n@app.route('/jobs/<job_id>/run', methods=['POST'])\ndef run_job_now(job_id):\n    \"\"\"Job \uc989\uc2dc \uc2e4\ud589\"\"\"\n    job = scheduler.get_job(job_id)\n    if job:\n        job.func()\n        return jsonify({'message': f'Job {job_id} executed'})\n    return jsonify({'error': 'Job not found'}), 404\n\n@app.route('/jobs/<job_id>/pause', methods=['POST'])\ndef pause_job(job_id):\n    \"\"\"Job \uc77c\uc2dc\uc815\uc9c0\"\"\"\n    try:\n        scheduler.pause_job(job_id)\n        return jsonify({'message': f'Job {job_id} paused'})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\n@app.route('/jobs/<job_id>/resume', methods=['POST'])\ndef resume_job(job_id):\n    \"\"\"Job \uc7ac\uac1c\"\"\"\n    try:\n        scheduler.resume_job(job_id)\n        return jsonify({'message': f'Job {job_id} resumed'})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\n@app.route('/jobs', methods=['POST'])\ndef add_job():\n    \"\"\"\uc0c8 Job \ucd94\uac00\"\"\"\n    data = request.json\n\n    try:\n        scheduler.add_job(\n            cleanup_old_data,  # \uc2e4\uc81c\ub85c\ub294 \ud568\uc218\ub97c \ub3d9\uc801\uc73c\ub85c \uc120\ud0dd\ud574\uc57c \ud568\n            trigger=CronTrigger(**data.get('trigger', {})),\n            id=data['id'],\n            name=data.get('name', data['id']),\n            replace_existing=True\n        )\n        return jsonify({'message': f'Job {data[\"id\"]} added'})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\n# \uc571 \uc2dc\uc791 \uc2dc \uc2a4\ucf00\uc904\ub7ec \ucd08\uae30\ud654\nwith app.app_context():\n    init_scheduler()\n\n# \uc571 \uc885\ub8cc \uc2dc \uc2a4\ucf00\uc904\ub7ec \uc815\ub9ac\natexit.register(lambda: scheduler.shutdown())\n\nif __name__ == '__main__':\n    app.run(debug=False, port=5000)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"flask-apscheduler-\ud655\uc7a5-\uc0ac\uc6a9",children:"Flask-APScheduler \ud655\uc7a5 \uc0ac\uc6a9"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from flask import Flask\nfrom flask_apscheduler import APScheduler\nfrom datetime import datetime\nimport logging\n\n# Flask \uc571 \uc0dd\uc131\napp = Flask(__name__)\n\n# \uc124\uc815\nclass Config:\n    SCHEDULER_API_ENABLED = True\n    SCHEDULER_TIMEZONE = 'Asia/Seoul'\n\napp.config.from_object(Config())\n\n# APScheduler \uc778\uc2a4\ud134\uc2a4\nscheduler = APScheduler()\n\n# \uc791\uc5c5 \uc815\uc758\n@scheduler.task('interval', id='job_1', seconds=30)\ndef job1():\n    \"\"\"30\ucd08\ub9c8\ub2e4 \uc2e4\ud589\ub418\ub294 \uc791\uc5c5\"\"\"\n    print(f'Job 1 \uc2e4\ud589: {datetime.now()}')\n\n@scheduler.task('cron', id='job_2', hour=9, minute=0)\ndef job2():\n    \"\"\"\ub9e4\uc77c \uc624\uc804 9\uc2dc \uc2e4\ud589\"\"\"\n    print(f'Job 2 \uc2e4\ud589: {datetime.now()}')\n\n# \ub77c\uc6b0\ud2b8\n@app.route('/')\ndef index():\n    return 'Flask-APScheduler \uc2e4\ud589 \uc911'\n\n@app.route('/health')\ndef health():\n    \"\"\"\ud5ec\uc2a4 \uccb4\ud06c\"\"\"\n    return {\n        'status': 'healthy',\n        'scheduler_running': scheduler.running,\n        'jobs_count': len(scheduler.get_jobs())\n    }\n\nif __name__ == '__main__':\n    scheduler.init_app(app)\n    scheduler.start()\n    app.run(debug=False)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"flask-\ube14\ub8e8\ud504\ub9b0\ud2b8\uc640-\ud1b5\ud569",children:"Flask \ube14\ub8e8\ud504\ub9b0\ud2b8\uc640 \ud1b5\ud569"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from flask import Flask, Blueprint, jsonify\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\n\n# \uc2a4\ucf00\uc904\ub7ec \ube14\ub8e8\ud504\ub9b0\ud2b8\nscheduler_bp = Blueprint('scheduler', __name__, url_prefix='/scheduler')\n\n# \uc804\uc5ed \uc2a4\ucf00\uc904\ub7ec\nscheduler = BackgroundScheduler()\n\ndef scheduled_task():\n    \"\"\"\uc2a4\ucf00\uc904\ub41c \uc791\uc5c5\"\"\"\n    print(f'\uc2a4\ucf00\uc904 \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}')\n\n@scheduler_bp.route('/status')\ndef get_status():\n    \"\"\"\uc2a4\ucf00\uc904\ub7ec \uc0c1\ud0dc\"\"\"\n    return jsonify({\n        'running': scheduler.running,\n        'jobs': len(scheduler.get_jobs())\n    })\n\n@scheduler_bp.route('/jobs')\ndef list_jobs():\n    \"\"\"Job \ubaa9\ub85d\"\"\"\n    jobs = [{\n        'id': job.id,\n        'name': job.name,\n        'next_run': str(job.next_run_time)\n    } for job in scheduler.get_jobs()]\n\n    return jsonify({'jobs': jobs})\n\ndef create_app():\n    \"\"\"Flask \uc571 \ud329\ud1a0\ub9ac\"\"\"\n    app = Flask(__name__)\n\n    # \ube14\ub8e8\ud504\ub9b0\ud2b8 \ub4f1\ub85d\n    app.register_blueprint(scheduler_bp)\n\n    # \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\n    scheduler.add_job(\n        scheduled_task,\n        'interval',\n        seconds=30,\n        id='main_task'\n    )\n    scheduler.start()\n\n    @app.route('/')\n    def index():\n        return 'Flask with Blueprints'\n\n    return app\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run(debug=False)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"django-\ud1b5\ud569",children:"Django \ud1b5\ud569"}),"\n",(0,s.jsx)(e.p,{children:"Django \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c APScheduler\ub97c \ud1b5\ud569\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"django-\uae30\ubcf8-\ud1b5\ud569",children:"Django \uae30\ubcf8 \ud1b5\ud569"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# myapp/scheduler.py\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom django_apscheduler.jobstores import DjangoJobStore\nfrom django_apscheduler.models import DjangoJobExecution\nfrom django.conf import settings\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef start():\n    """\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791"""\n    scheduler = BackgroundScheduler(timezone=settings.TIME_ZONE)\n    scheduler.add_jobstore(DjangoJobStore(), "default")\n\n    # \uc791\uc5c5 \ub4f1\ub85d\n    scheduler.add_job(\n        daily_cleanup,\n        trigger=CronTrigger(hour=2, minute=0),\n        id="daily_cleanup",\n        max_instances=1,\n        replace_existing=True,\n    )\n\n    scheduler.add_job(\n        send_notifications,\n        trigger=CronTrigger(hour=9, minute=0),\n        id="send_notifications",\n        max_instances=1,\n        replace_existing=True,\n    )\n\n    # \uc624\ub798\ub41c Job \uc2e4\ud589 \uae30\ub85d \uc0ad\uc81c\n    scheduler.add_job(\n        delete_old_job_executions,\n        trigger=CronTrigger(day_of_week="mon", hour=0, minute=0),\n        id="delete_old_job_executions",\n        max_instances=1,\n        replace_existing=True,\n    )\n\n    try:\n        logger.info("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791...")\n        scheduler.start()\n    except KeyboardInterrupt:\n        logger.info("\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc...")\n        scheduler.shutdown()\n\ndef daily_cleanup():\n    """\uc77c\uc77c \ub370\uc774\ud130 \uc815\ub9ac"""\n    logger.info("\uc77c\uc77c \uc815\ub9ac \uc791\uc5c5 \uc2dc\uc791")\n    # Django ORM \uc0ac\uc6a9\n    from myapp.models import OldData\n    from django.utils import timezone\n    from datetime import timedelta\n\n    # 30\uc77c \uc774\uc0c1 \ub41c \ub370\uc774\ud130 \uc0ad\uc81c\n    cutoff_date = timezone.now() - timedelta(days=30)\n    deleted_count = OldData.objects.filter(created_at__lt=cutoff_date).delete()[0]\n\n    logger.info(f"\uc815\ub9ac \uc644\ub8cc: {deleted_count}\uac1c \ub808\ucf54\ub4dc \uc0ad\uc81c")\n\ndef send_notifications():\n    """\uc54c\ub9bc \uc804\uc1a1"""\n    logger.info("\uc54c\ub9bc \uc804\uc1a1 \uc2dc\uc791")\n    from myapp.models import User\n    from django.core.mail import send_mail\n\n    users = User.objects.filter(notification_enabled=True)\n\n    for user in users:\n        try:\n            send_mail(\n                \'\uc77c\uc77c \uc694\uc57d\',\n                \'\uc624\ub298\uc758 \uc694\uc57d \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\',\n                \'noreply@example.com\',\n                [user.email],\n                fail_silently=False,\n            )\n        except Exception as e:\n            logger.error(f"\uc774\uba54\uc77c \uc804\uc1a1 \uc2e4\ud328 ({user.email}): {e}")\n\n    logger.info(f"\uc54c\ub9bc \uc804\uc1a1 \uc644\ub8cc: {users.count()}\uba85")\n\ndef delete_old_job_executions(max_age=604_800):\n    """\uc624\ub798\ub41c Job \uc2e4\ud589 \uae30\ub85d \uc0ad\uc81c (\uae30\ubcf8: 7\uc77c)"""\n    DjangoJobExecution.objects.delete_old_job_executions(max_age)\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# myapp/apps.py\n\nfrom django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    default_auto_field = \'django.db.models.BigAutoField\'\n    name = \'myapp\'\n\n    def ready(self):\n        """\uc571 \uc900\ube44 \uc644\ub8cc \uc2dc \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791"""\n        from . import scheduler\n        scheduler.start()\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# settings.py\n\nINSTALLED_APPS = [\n    # ...\n    'django_apscheduler',\n    'myapp',\n]\n\n# \ud0c0\uc784\uc874 \uc124\uc815\nTIME_ZONE = 'Asia/Seoul'\nUSE_TZ = True\n\n# APScheduler \uc124\uc815\nSCHEDULER_TIMEZONE = TIME_ZONE\nSCHEDULER_AUTOSTART = True\n"})}),"\n",(0,s.jsx)(e.h3,{id:"django-management-command",children:"Django Management Command"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# myapp/management/commands/run_scheduler.py\n\nfrom django.core.management.base import BaseCommand\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom django_apscheduler.jobstores import DjangoJobStore\nfrom django_apscheduler import util\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@util.close_old_connections\ndef my_scheduled_job():\n    """\uc2a4\ucf00\uc904\ub41c \uc791\uc5c5"""\n    logger.info("\uc2a4\ucf00\uc904 \uc791\uc5c5 \uc2e4\ud589")\n    # Django \ubaa8\ub378 \uc0ac\uc6a9\n    from myapp.models import MyModel\n    count = MyModel.objects.count()\n    logger.info(f"\ud604\uc7ac \ub808\ucf54\ub4dc \uc218: {count}")\n\nclass Command(BaseCommand):\n    help = "APScheduler\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4"\n\n    def handle(self, *args, **options):\n        scheduler = BlockingScheduler(timezone=\'Asia/Seoul\')\n        scheduler.add_jobstore(DjangoJobStore(), "default")\n\n        scheduler.add_job(\n            my_scheduled_job,\n            trigger=CronTrigger(minute="*/5"),  # 5\ubd84\ub9c8\ub2e4\n            id="my_job",\n            max_instances=1,\n            replace_existing=True,\n        )\n\n        logger.info("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791")\n\n        try:\n            scheduler.start()\n        except KeyboardInterrupt:\n            logger.info("\uc2a4\ucf00\uc904\ub7ec \uc815\uc9c0")\n            scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(e.p,{children:"\uc2e4\ud589:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"python manage.py run_scheduler\n"})}),"\n",(0,s.jsx)(e.h3,{id:"celery\uc640-\ud568\uaed8-\uc0ac\uc6a9",children:"Celery\uc640 \ud568\uaed8 \uc0ac\uc6a9"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# myapp/tasks.py (Celery tasks)\n\nfrom celery import shared_task\nfrom django.core.cache import cache\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@shared_task\ndef process_data(data_id):\n    """\ub370\uc774\ud130 \ucc98\ub9ac (Celery \uc791\uc5c5)"""\n    logger.info(f"\ub370\uc774\ud130 \ucc98\ub9ac \uc2dc\uc791: {data_id}")\n    # \ucc98\ub9ac \ub85c\uc9c1\n    logger.info(f"\ub370\uc774\ud130 \ucc98\ub9ac \uc644\ub8cc: {data_id}")\n\n@shared_task\ndef generate_report(report_type):\n    """\ub9ac\ud3ec\ud2b8 \uc0dd\uc131 (Celery \uc791\uc5c5)"""\n    logger.info(f"\ub9ac\ud3ec\ud2b8 \uc0dd\uc131: {report_type}")\n    # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \ub85c\uc9c1\n    logger.info("\ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uc644\ub8cc")\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# myapp/scheduler.py (APScheduler)\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom .tasks import process_data, generate_report\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef start():\n    """APScheduler\ub85c Celery \uc791\uc5c5 \uc2a4\ucf00\uc904\ub9c1"""\n    scheduler = BackgroundScheduler()\n\n    # \ub9e4\uc2dc\uac04 \ub370\uc774\ud130 \ucc98\ub9ac \uc791\uc5c5\uc744 Celery\ub85c \uc804\ub2ec\n    scheduler.add_job(\n        lambda: process_data.delay(\'hourly_data\'),\n        trigger=CronTrigger(minute=0),\n        id="hourly_processing",\n        replace_existing=True,\n    )\n\n    # \ub9e4\uc77c \uc624\uc804 9\uc2dc \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n    scheduler.add_job(\n        lambda: generate_report.delay(\'daily\'),\n        trigger=CronTrigger(hour=9, minute=0),\n        id="daily_report",\n        replace_existing=True,\n    )\n\n    scheduler.start()\n    logger.info("APScheduler \uc2dc\uc791 (Celery \uc5f0\ub3d9)")\n'})}),"\n",(0,s.jsx)(e.h2,{id:"fastapi-\ud1b5\ud569",children:"FastAPI \ud1b5\ud569"}),"\n",(0,s.jsx)(e.p,{children:"FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c APScheduler\ub97c \ud1b5\ud569\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-fastapi-\ud1b5\ud569",children:"\uae30\ubcf8 FastAPI \ud1b5\ud569"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from fastapi import FastAPI, HTTPException\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom contextlib import asynccontextmanager\nfrom datetime import datetime\nfrom typing import List, Dict\nimport asyncio\nimport logging\n\n# \ub85c\uae45 \uc124\uc815\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc778\uc2a4\ud134\uc2a4\nscheduler = AsyncIOScheduler()\n\n# \ube44\ub3d9\uae30 \uc791\uc5c5\nasync def async_cleanup():\n    """\ube44\ub3d9\uae30 \uc815\ub9ac \uc791\uc5c5"""\n    logger.info(f"[{datetime.now()}] \ube44\ub3d9\uae30 \uc815\ub9ac \uc791\uc5c5 \uc2dc\uc791")\n    await asyncio.sleep(2)  # \ube44\ub3d9\uae30 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n    logger.info("\uc815\ub9ac \uc791\uc5c5 \uc644\ub8cc")\n\nasync def fetch_external_data():\n    """\uc678\ubd80 \ub370\uc774\ud130 \uc218\uc9d1"""\n    logger.info(f"[{datetime.now()}] \uc678\ubd80 \ub370\uc774\ud130 \uc218\uc9d1 \uc2dc\uc791")\n    # HTTP \uc694\uccad \ub4f1\n    await asyncio.sleep(1)\n    logger.info("\ub370\uc774\ud130 \uc218\uc9d1 \uc644\ub8cc")\n\nasync def send_scheduled_emails():\n    """\uc2a4\ucf00\uc904\ub41c \uc774\uba54\uc77c \uc804\uc1a1"""\n    logger.info(f"[{datetime.now()}] \uc774\uba54\uc77c \uc804\uc1a1 \uc2dc\uc791")\n    await asyncio.sleep(1)\n    logger.info("\uc774\uba54\uc77c \uc804\uc1a1 \uc644\ub8cc")\n\n# Lifespan \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    """\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc0dd\uba85\uc8fc\uae30 \uad00\ub9ac"""\n    # \uc2dc\uc791\n    scheduler.add_job(\n        async_cleanup,\n        trigger=CronTrigger(hour=2, minute=0),\n        id=\'cleanup_job\',\n        name=\'\ub370\uc774\ud130 \uc815\ub9ac\',\n        replace_existing=True\n    )\n\n    scheduler.add_job(\n        fetch_external_data,\n        trigger=CronTrigger(minute=\'*/10\'),\n        id=\'fetch_job\',\n        name=\'\ub370\uc774\ud130 \uc218\uc9d1\',\n        replace_existing=True\n    )\n\n    scheduler.add_job(\n        send_scheduled_emails,\n        trigger=CronTrigger(hour=9, minute=0),\n        id=\'email_job\',\n        name=\'\uc774\uba54\uc77c \uc804\uc1a1\',\n        replace_existing=True\n    )\n\n    scheduler.start()\n    logger.info("\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\ub428")\n\n    yield\n\n    # \uc885\ub8cc\n    scheduler.shutdown()\n    logger.info("\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc\ub428")\n\n# FastAPI \uc571\napp = FastAPI(title="FastAPI + APScheduler", lifespan=lifespan)\n\n# Pydantic \ubaa8\ub378\nfrom pydantic import BaseModel\n\nclass JobInfo(BaseModel):\n    id: str\n    name: str\n    next_run_time: str | None\n    trigger: str\n\nclass JobCreate(BaseModel):\n    id: str\n    name: str\n    trigger_type: str\n    trigger_args: Dict\n\n# API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.get("/")\nasync def root():\n    """\ub8e8\ud2b8 \uc5d4\ub4dc\ud3ec\uc778\ud2b8"""\n    return {\n        "message": "FastAPI + APScheduler",\n        "status": "running",\n        "scheduler_running": scheduler.running\n    }\n\n@app.get("/jobs", response_model=List[JobInfo])\nasync def list_jobs():\n    """Job \ubaa9\ub85d \uc870\ud68c"""\n    jobs = []\n    for job in scheduler.get_jobs():\n        jobs.append(JobInfo(\n            id=job.id,\n            name=job.name,\n            next_run_time=str(job.next_run_time) if job.next_run_time else None,\n            trigger=str(job.trigger)\n        ))\n    return jobs\n\n@app.get("/jobs/{job_id}", response_model=JobInfo)\nasync def get_job(job_id: str):\n    """\ud2b9\uc815 Job \uc870\ud68c"""\n    job = scheduler.get_job(job_id)\n    if not job:\n        raise HTTPException(status_code=404, detail="Job not found")\n\n    return JobInfo(\n        id=job.id,\n        name=job.name,\n        next_run_time=str(job.next_run_time) if job.next_run_time else None,\n        trigger=str(job.trigger)\n    )\n\n@app.post("/jobs/{job_id}/run")\nasync def run_job(job_id: str):\n    """Job \uc989\uc2dc \uc2e4\ud589"""\n    job = scheduler.get_job(job_id)\n    if not job:\n        raise HTTPException(status_code=404, detail="Job not found")\n\n    # \ube44\ub3d9\uae30 \ud568\uc218 \uc2e4\ud589\n    if asyncio.iscoroutinefunction(job.func):\n        await job.func(*job.args, **job.kwargs)\n    else:\n        job.func(*job.args, **job.kwargs)\n\n    return {"message": f"Job {job_id} executed"}\n\n@app.post("/jobs/{job_id}/pause")\nasync def pause_job(job_id: str):\n    """Job \uc77c\uc2dc\uc815\uc9c0"""\n    try:\n        scheduler.pause_job(job_id)\n        return {"message": f"Job {job_id} paused"}\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.post("/jobs/{job_id}/resume")\nasync def resume_job(job_id: str):\n    """Job \uc7ac\uac1c"""\n    try:\n        scheduler.resume_job(job_id)\n        return {"message": f"Job {job_id} resumed"}\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.delete("/jobs/{job_id}")\nasync def delete_job(job_id: str):\n    """Job \uc81c\uac70"""\n    try:\n        scheduler.remove_job(job_id)\n        return {"message": f"Job {job_id} deleted"}\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"fastapi-\uc758\uc874\uc131-\uc8fc\uc785\uacfc-\ud1b5\ud569",children:"FastAPI \uc758\uc874\uc131 \uc8fc\uc785\uacfc \ud1b5\ud569"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, HTTPException\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom contextlib import asynccontextmanager\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\nDATABASE_URL = "sqlite+aiosqlite:///./test.db"\nengine = create_async_engine(DATABASE_URL, echo=True)\nAsyncSessionLocal = sessionmaker(\n    engine, class_=AsyncSession, expire_on_commit=False\n)\n\n# \uc758\uc874\uc131\nasync def get_db():\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158 \uc758\uc874\uc131"""\n    async with AsyncSessionLocal() as session:\n        yield session\n\n# \uc2a4\ucf00\uc904\ub7ec\nscheduler = AsyncIOScheduler()\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \uc2a4\ucf00\uc904 \uc791\uc5c5\nasync def scheduled_db_task():\n    """\uc2a4\ucf00\uc904\ub41c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5"""\n    async with AsyncSessionLocal() as session:\n        logger.info("\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 \uc2e4\ud589")\n        # ORM \ucffc\ub9ac \uc2e4\ud589\n        logger.info("\uc791\uc5c5 \uc644\ub8cc")\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    """\uc0dd\uba85\uc8fc\uae30 \uad00\ub9ac"""\n    # \uc2dc\uc791\n    scheduler.add_job(\n        scheduled_db_task,\n        \'interval\',\n        minutes=10,\n        id=\'db_task\'\n    )\n    scheduler.start()\n\n    yield\n\n    # \uc885\ub8cc\n    scheduler.shutdown()\n    await engine.dispose()\n\napp = FastAPI(lifespan=lifespan)\n\n@app.get("/")\nasync def root(db: AsyncSession = Depends(get_db)):\n    """\ub8e8\ud2b8 (\uc758\uc874\uc131 \uc8fc\uc785 \uc608\uc81c)"""\n    return {"message": "FastAPI with DI"}\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\ub370\uc774\ud130-\ubc31\uc5c5",children:"\ub370\uc774\ud130 \ubc31\uc5c5"}),"\n",(0,s.jsx)(e.p,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5\uc744 \uc790\ub3d9\ud654\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"postgresql-\ubc31\uc5c5",children:"PostgreSQL \ubc31\uc5c5"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom datetime import datetime\nimport subprocess\nimport os\nimport logging\nimport shutil\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nclass DatabaseBackup:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self, db_config, backup_dir='/backups'):\n        self.db_config = db_config\n        self.backup_dir = backup_dir\n        self.max_backups = 7  # \ucd5c\ub300 7\uac1c\uc758 \ubc31\uc5c5 \uc720\uc9c0\n\n        # \ubc31\uc5c5 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n        os.makedirs(backup_dir, exist_ok=True)\n\n    def backup_postgres(self):\n        \"\"\"PostgreSQL \ubc31\uc5c5\"\"\"\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        backup_file = f\"{self.backup_dir}/backup_{timestamp}.sql\"\n\n        logger.info(f\"\ubc31\uc5c5 \uc2dc\uc791: {backup_file}\")\n\n        try:\n            # pg_dump \uc2e4\ud589\n            cmd = [\n                'pg_dump',\n                '-h', self.db_config['host'],\n                '-p', str(self.db_config['port']),\n                '-U', self.db_config['user'],\n                '-d', self.db_config['database'],\n                '-F', 'c',  # \ucee4\uc2a4\ud140 \ud3ec\ub9f7\n                '-f', backup_file\n            ]\n\n            # \ud658\uacbd \ubcc0\uc218\ub85c \ube44\ubc00\ubc88\ud638 \uc804\ub2ec\n            env = os.environ.copy()\n            env['PGPASSWORD'] = self.db_config['password']\n\n            result = subprocess.run(\n                cmd,\n                env=env,\n                capture_output=True,\n                text=True,\n                check=True\n            )\n\n            logger.info(f\"\ubc31\uc5c5 \uc644\ub8cc: {backup_file}\")\n\n            # \uc624\ub798\ub41c \ubc31\uc5c5 \uc815\ub9ac\n            self.cleanup_old_backups()\n\n            # \ubc31\uc5c5 \uac80\uc99d\n            self.verify_backup(backup_file)\n\n            return backup_file\n\n        except subprocess.CalledProcessError as e:\n            logger.error(f\"\ubc31\uc5c5 \uc2e4\ud328: {e.stderr}\")\n            raise\n\n    def cleanup_old_backups(self):\n        \"\"\"\uc624\ub798\ub41c \ubc31\uc5c5 \uc81c\uac70\"\"\"\n        backups = sorted([\n            os.path.join(self.backup_dir, f)\n            for f in os.listdir(self.backup_dir)\n            if f.startswith('backup_') and f.endswith('.sql')\n        ])\n\n        # \uc624\ub798\ub41c \ubc31\uc5c5 \uc0ad\uc81c\n        while len(backups) > self.max_backups:\n            old_backup = backups.pop(0)\n            os.remove(old_backup)\n            logger.info(f\"\uc624\ub798\ub41c \ubc31\uc5c5 \uc81c\uac70: {old_backup}\")\n\n    def verify_backup(self, backup_file):\n        \"\"\"\ubc31\uc5c5 \ud30c\uc77c \uac80\uc99d\"\"\"\n        file_size = os.path.getsize(backup_file)\n        logger.info(f\"\ubc31\uc5c5 \ud30c\uc77c \ud06c\uae30: {file_size / 1024 / 1024:.2f} MB\")\n\n        if file_size < 1000:  # 1KB \ubbf8\ub9cc\uc774\uba74 \uc758\uc2ec\n            logger.warning(\"\ubc31\uc5c5 \ud30c\uc77c\uc774 \ub108\ubb34 \uc791\uc2b5\ub2c8\ub2e4!\")\n\n    def compress_backup(self, backup_file):\n        \"\"\"\ubc31\uc5c5 \ud30c\uc77c \uc555\ucd95\"\"\"\n        import gzip\n\n        compressed_file = f\"{backup_file}.gz\"\n\n        with open(backup_file, 'rb') as f_in:\n            with gzip.open(compressed_file, 'wb') as f_out:\n                shutil.copyfileobj(f_in, f_out)\n\n        # \uc6d0\ubcf8 \ud30c\uc77c \uc81c\uac70\n        os.remove(backup_file)\n\n        logger.info(f\"\ubc31\uc5c5 \uc555\ucd95 \uc644\ub8cc: {compressed_file}\")\n        return compressed_file\n\n# \uc124\uc815\ndb_config = {\n    'host': 'localhost',\n    'port': 5432,\n    'user': 'postgres',\n    'password': 'password',\n    'database': 'mydb'\n}\n\nbackup_manager = DatabaseBackup(db_config, backup_dir='/var/backups/postgres')\n\n# \uc2a4\ucf00\uc904\ub7ec \uc124\uc815\nscheduler = BackgroundScheduler()\n\n# \ub9e4\uc77c \uc0c8\ubcbd 2\uc2dc \ubc31\uc5c5\nscheduler.add_job(\n    backup_manager.backup_postgres,\n    trigger=CronTrigger(hour=2, minute=0),\n    id='daily_backup',\n    name='\uc77c\uc77c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5'\n)\n\n# \ub9e4\uc8fc \uc77c\uc694\uc77c \uc0c8\ubcbd 3\uc2dc \uc804\uccb4 \ubc31\uc5c5 + \uc555\ucd95\ndef weekly_full_backup():\n    backup_file = backup_manager.backup_postgres()\n    backup_manager.compress_backup(backup_file)\n\nscheduler.add_job(\n    weekly_full_backup,\n    trigger=CronTrigger(day_of_week='sun', hour=3, minute=0),\n    id='weekly_backup',\n    name='\uc8fc\uac04 \uc804\uccb4 \ubc31\uc5c5'\n)\n\nscheduler.start()\n\nlogger.info(\"\ubc31\uc5c5 \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791\")\n\n# \uba54\uc778 \ub8e8\ud504\ntry:\n    import time\n    while True:\n        time.sleep(1)\nexcept (KeyboardInterrupt, SystemExit):\n    scheduler.shutdown()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"mongodb-\ubc31\uc5c5",children:"MongoDB \ubc31\uc5c5"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom datetime import datetime\nimport subprocess\nimport os\nimport logging\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nclass MongoDBBackup:\n    \"\"\"MongoDB \ubc31\uc5c5 \uad00\ub9ac\uc790\"\"\"\n\n    def __init__(self, mongo_config, backup_dir='/backups/mongodb'):\n        self.mongo_config = mongo_config\n        self.backup_dir = backup_dir\n        os.makedirs(backup_dir, exist_ok=True)\n\n    def backup_mongodb(self):\n        \"\"\"MongoDB \ubc31\uc5c5\"\"\"\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        backup_path = f\"{self.backup_dir}/backup_{timestamp}\"\n\n        logger.info(f\"MongoDB \ubc31\uc5c5 \uc2dc\uc791: {backup_path}\")\n\n        try:\n            cmd = [\n                'mongodump',\n                '--host', self.mongo_config['host'],\n                '--port', str(self.mongo_config['port']),\n                '--db', self.mongo_config['database'],\n                '--out', backup_path\n            ]\n\n            # \uc778\uc99d\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\n            if 'username' in self.mongo_config:\n                cmd.extend([\n                    '--username', self.mongo_config['username'],\n                    '--password', self.mongo_config['password'],\n                    '--authenticationDatabase', self.mongo_config.get('auth_db', 'admin')\n                ])\n\n            result = subprocess.run(cmd, capture_output=True, text=True, check=True)\n\n            logger.info(f\"MongoDB \ubc31\uc5c5 \uc644\ub8cc: {backup_path}\")\n            return backup_path\n\n        except subprocess.CalledProcessError as e:\n            logger.error(f\"\ubc31\uc5c5 \uc2e4\ud328: {e.stderr}\")\n            raise\n\nmongo_config = {\n    'host': 'localhost',\n    'port': 27017,\n    'database': 'mydb',\n    'username': 'backup_user',\n    'password': 'password'\n}\n\nmongo_backup = MongoDBBackup(mongo_config)\n\nscheduler = BackgroundScheduler()\n\nscheduler.add_job(\n    mongo_backup.backup_mongodb,\n    trigger=CronTrigger(hour=3, minute=0),\n    id='mongo_backup'\n)\n\nscheduler.start()\n"})}),"\n",(0,s.jsx)(e.h2,{id:"api-\ud3f4\ub9c1",children:"API \ud3f4\ub9c1"}),"\n",(0,s.jsx)(e.p,{children:"\uc678\ubd80 API\ub97c \uc8fc\uae30\uc801\uc73c\ub85c \ud3f4\ub9c1\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"rest-api-\ud3f4\ub9c1",children:"REST API \ud3f4\ub9c1"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from apscheduler.schedulers.asyncio import AsyncIOScheduler\nimport aiohttp\nimport asyncio\nfrom datetime import datetime\nimport logging\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nclass APIPoller:\n    """API \ud3f4\ub9c1 \uad00\ub9ac\uc790"""\n\n    def __init__(self):\n        self.session = None\n        self.data_cache = {}\n\n    async def init_session(self):\n        """HTTP \uc138\uc158 \ucd08\uae30\ud654"""\n        if self.session is None:\n            self.session = aiohttp.ClientSession()\n\n    async def close_session(self):\n        """HTTP \uc138\uc158 \uc885\ub8cc"""\n        if self.session:\n            await self.session.close()\n\n    async def poll_weather_api(self):\n        """\ub0a0\uc528 API \ud3f4\ub9c1"""\n        await self.init_session()\n\n        url = "https://api.openweathermap.org/data/2.5/weather"\n        params = {\n            \'q\': \'Seoul\',\n            \'appid\': \'YOUR_API_KEY\',\n            \'units\': \'metric\'\n        }\n\n        try:\n            async with self.session.get(url, params=params) as response:\n                if response.status == 200:\n                    data = await response.json()\n                    self.data_cache[\'weather\'] = {\n                        \'temperature\': data[\'main\'][\'temp\'],\n                        \'description\': data[\'weather\'][0][\'description\'],\n                        \'timestamp\': datetime.now()\n                    }\n                    logger.info(f"\ub0a0\uc528 \uc5c5\ub370\uc774\ud2b8: {data[\'main\'][\'temp\']}\xb0C")\n                else:\n                    logger.error(f"API \uc624\ub958: {response.status}")\n        except Exception as e:\n            logger.error(f"\ud3f4\ub9c1 \uc2e4\ud328: {e}")\n\n    async def poll_stock_prices(self):\n        """\uc8fc\uc2dd \uac00\uaca9 \ud3f4\ub9c1"""\n        await self.init_session()\n\n        symbols = [\'AAPL\', \'GOOGL\', \'MSFT\']\n\n        for symbol in symbols:\n            url = f"https://api.example.com/stocks/{symbol}"\n\n            try:\n                async with self.session.get(url) as response:\n                    if response.status == 200:\n                        data = await response.json()\n                        logger.info(f"{symbol}: ${data[\'price\']}")\n                    else:\n                        logger.error(f"{symbol} API \uc624\ub958: {response.status}")\n            except Exception as e:\n                logger.error(f"{symbol} \ud3f4\ub9c1 \uc2e4\ud328: {e}")\n\n            await asyncio.sleep(1)  # Rate limiting\n\n    async def poll_with_retry(self, url, max_retries=3):\n        """\uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\uc774 \uc788\ub294 \ud3f4\ub9c1"""\n        await self.init_session()\n\n        for attempt in range(max_retries):\n            try:\n                async with self.session.get(url, timeout=10) as response:\n                    if response.status == 200:\n                        return await response.json()\n                    else:\n                        logger.warning(f"\uc2dc\ub3c4 {attempt+1} \uc2e4\ud328: {response.status}")\n            except asyncio.TimeoutError:\n                logger.warning(f"\uc2dc\ub3c4 {attempt+1} \ud0c0\uc784\uc544\uc6c3")\n            except Exception as e:\n                logger.error(f"\uc2dc\ub3c4 {attempt+1} \uc624\ub958: {e}")\n\n            if attempt < max_retries - 1:\n                await asyncio.sleep(2 ** attempt)  # Exponential backoff\n\n        return None\n\nasync def main():\n    """\uba54\uc778 \ud568\uc218"""\n    poller = APIPoller()\n    scheduler = AsyncIOScheduler()\n\n    # 10\ubd84\ub9c8\ub2e4 \ub0a0\uc528 \ud3f4\ub9c1\n    scheduler.add_job(\n        poller.poll_weather_api,\n        \'interval\',\n        minutes=10,\n        id=\'weather_poll\'\n    )\n\n    # 5\ubd84\ub9c8\ub2e4 \uc8fc\uc2dd \uac00\uaca9 \ud3f4\ub9c1\n    scheduler.add_job(\n        poller.poll_stock_prices,\n        \'interval\',\n        minutes=5,\n        id=\'stock_poll\'\n    )\n\n    scheduler.start()\n\n    logger.info("API \ud3f4\ub9c1 \uc2dc\uc791")\n\n    try:\n        await asyncio.Event().wait()\n    except (KeyboardInterrupt, SystemExit):\n        scheduler.shutdown()\n        await poller.close_session()\n\nif __name__ == \'__main__\':\n    asyncio.run(main())\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\ub9ac\ud3ec\ud2b8-\uc0dd\uc131",children:"\ub9ac\ud3ec\ud2b8 \uc0dd\uc131"}),"\n",(0,s.jsx)(e.p,{children:"\uc8fc\uae30\uc801\uc73c\ub85c \ub9ac\ud3ec\ud2b8\ub97c \uc0dd\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"pdf-\ub9ac\ud3ec\ud2b8-\uc0dd\uc131",children:"PDF \ub9ac\ud3ec\ud2b8 \uc0dd\uc131"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom datetime import datetime, timedelta\nimport logging\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nclass ReportGenerator:\n    """\ub9ac\ud3ec\ud2b8 \uc0dd\uc131\uae30"""\n\n    def __init__(self, output_dir=\'/reports\'):\n        self.output_dir = output_dir\n        import os\n        os.makedirs(output_dir, exist_ok=True)\n\n    def generate_daily_report(self):\n        """\uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc0dd\uc131"""\n        logger.info("\uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uc2dc\uc791")\n\n        # \ub370\uc774\ud130 \uc218\uc9d1\n        data = self._collect_daily_data()\n\n        # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n        report_path = self._create_pdf_report(data, \'daily\')\n\n        # \uc774\uba54\uc77c \uc804\uc1a1\n        self._send_report_email(report_path, \'\uc77c\uc77c \ub9ac\ud3ec\ud2b8\')\n\n        logger.info(f"\uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc644\ub8cc: {report_path}")\n\n    def generate_weekly_report(self):\n        """\uc8fc\uac04 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131"""\n        logger.info("\uc8fc\uac04 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uc2dc\uc791")\n\n        # \ub370\uc774\ud130 \uc218\uc9d1 (\uc9c0\ub09c 7\uc77c)\n        data = self._collect_weekly_data()\n\n        # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n        report_path = self._create_pdf_report(data, \'weekly\')\n\n        # \uc774\uba54\uc77c \uc804\uc1a1\n        self._send_report_email(report_path, \'\uc8fc\uac04 \ub9ac\ud3ec\ud2b8\')\n\n        logger.info(f"\uc8fc\uac04 \ub9ac\ud3ec\ud2b8 \uc644\ub8cc: {report_path}")\n\n    def generate_monthly_report(self):\n        """\uc6d4\uac04 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131"""\n        logger.info("\uc6d4\uac04 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uc2dc\uc791")\n\n        # \ub370\uc774\ud130 \uc218\uc9d1\n        data = self._collect_monthly_data()\n\n        # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n        report_path = self._create_pdf_report(data, \'monthly\')\n\n        # \uc774\uba54\uc77c \uc804\uc1a1\n        self._send_report_email(report_path, \'\uc6d4\uac04 \ub9ac\ud3ec\ud2b8\')\n\n        logger.info(f"\uc6d4\uac04 \ub9ac\ud3ec\ud2b8 \uc644\ub8cc: {report_path}")\n\n    def _collect_daily_data(self):\n        """\uc77c\uc77c \ub370\uc774\ud130 \uc218\uc9d1"""\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \uc870\ud68c\n        return {\n            \'date\': datetime.now().date(),\n            \'total_users\': 1250,\n            \'new_users\': 45,\n            \'revenue\': 12500.50,\n            \'orders\': 89\n        }\n\n    def _collect_weekly_data(self):\n        """\uc8fc\uac04 \ub370\uc774\ud130 \uc218\uc9d1"""\n        return {\n            \'week_start\': (datetime.now() - timedelta(days=7)).date(),\n            \'week_end\': datetime.now().date(),\n            \'total_users\': 8750,\n            \'new_users\': 315,\n            \'revenue\': 87503.50,\n            \'orders\': 623\n        }\n\n    def _collect_monthly_data(self):\n        """\uc6d4\uac04 \ub370\uc774\ud130 \uc218\uc9d1"""\n        return {\n            \'month\': datetime.now().strftime(\'%Y-%m\'),\n            \'total_users\': 35000,\n            \'new_users\': 1260,\n            \'revenue\': 350000.00,\n            \'orders\': 2490\n        }\n\n    def _create_pdf_report(self, data, report_type):\n        """PDF \ub9ac\ud3ec\ud2b8 \uc0dd\uc131"""\n        from reportlab.lib.pagesizes import letter, A4\n        from reportlab.pdfgen import canvas\n        from reportlab.lib.units import inch\n\n        timestamp = datetime.now().strftime(\'%Y%m%d_%H%M%S\')\n        filename = f"{self.output_dir}/{report_type}_report_{timestamp}.pdf"\n\n        # PDF \uc0dd\uc131\n        c = canvas.Canvas(filename, pagesize=A4)\n        width, height = A4\n\n        # \uc81c\ubaa9\n        c.setFont("Helvetica-Bold", 24)\n        c.drawString(1*inch, height - 1*inch, f"{report_type.title()} Report")\n\n        # \ub0a0\uc9dc\n        c.setFont("Helvetica", 12)\n        c.drawString(1*inch, height - 1.5*inch, f"Generated: {datetime.now()}")\n\n        # \ub370\uc774\ud130\n        c.setFont("Helvetica", 14)\n        y_position = height - 2.5*inch\n\n        for key, value in data.items():\n            text = f"{key.replace(\'_\', \' \').title()}: {value}"\n            c.drawString(1*inch, y_position, text)\n            y_position -= 0.3*inch\n\n        c.save()\n\n        logger.info(f"PDF \uc0dd\uc131\ub428: {filename}")\n        return filename\n\n    def _send_report_email(self, report_path, subject):\n        """\ub9ac\ud3ec\ud2b8 \uc774\uba54\uc77c \uc804\uc1a1"""\n        import smtplib\n        from email.mime.multipart import MIMEMultipart\n        from email.mime.base import MIMEBase\n        from email.mime.text import MIMEText\n        from email import encoders\n\n        # \uc774\uba54\uc77c \uc124\uc815\n        sender_email = "reports@example.com"\n        receiver_emails = ["manager@example.com", "team@example.com"]\n        smtp_server = "smtp.example.com"\n        smtp_port = 587\n        smtp_user = "reports@example.com"\n        smtp_password = "password"\n\n        # \uc774\uba54\uc77c \uc791\uc131\n        msg = MIMEMultipart()\n        msg[\'From\'] = sender_email\n        msg[\'To\'] = \', \'.join(receiver_emails)\n        msg[\'Subject\'] = f"{subject} - {datetime.now().strftime(\'%Y-%m-%d\')}"\n\n        body = f"""\n        \uc548\ub155\ud558\uc138\uc694,\n\n        {subject}\ub97c \ucca8\ubd80\ud569\ub2c8\ub2e4.\n\n        \uac10\uc0ac\ud569\ub2c8\ub2e4.\n        """\n\n        msg.attach(MIMEText(body, \'plain\'))\n\n        # \ud30c\uc77c \ucca8\ubd80\n        with open(report_path, \'rb\') as f:\n            part = MIMEBase(\'application\', \'octet-stream\')\n            part.set_payload(f.read())\n\n        encoders.encode_base64(part)\n        part.add_header(\n            \'Content-Disposition\',\n            f\'attachment; filename={os.path.basename(report_path)}\'\n        )\n        msg.attach(part)\n\n        # \uc774\uba54\uc77c \uc804\uc1a1\n        try:\n            with smtplib.SMTP(smtp_server, smtp_port) as server:\n                server.starttls()\n                server.login(smtp_user, smtp_password)\n                server.send_message(msg)\n\n            logger.info(f"\ub9ac\ud3ec\ud2b8 \uc774\uba54\uc77c \uc804\uc1a1 \uc644\ub8cc: {receiver_emails}")\n        except Exception as e:\n            logger.error(f"\uc774\uba54\uc77c \uc804\uc1a1 \uc2e4\ud328: {e}")\n\n# \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\uae30 \ucd08\uae30\ud654\nreport_gen = ReportGenerator(output_dir=\'/var/reports\')\n\n# \uc2a4\ucf00\uc904\ub7ec \uc124\uc815\nscheduler = BackgroundScheduler()\n\n# \ub9e4\uc77c \uc624\uc804 9\uc2dc \uc77c\uc77c \ub9ac\ud3ec\ud2b8\nscheduler.add_job(\n    report_gen.generate_daily_report,\n    trigger=CronTrigger(hour=9, minute=0),\n    id=\'daily_report\',\n    name=\'\uc77c\uc77c \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\'\n)\n\n# \ub9e4\uc8fc \uc6d4\uc694\uc77c \uc624\uc804 10\uc2dc \uc8fc\uac04 \ub9ac\ud3ec\ud2b8\nscheduler.add_job(\n    report_gen.generate_weekly_report,\n    trigger=CronTrigger(day_of_week=\'mon\', hour=10, minute=0),\n    id=\'weekly_report\',\n    name=\'\uc8fc\uac04 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\'\n)\n\n# \ub9e4\uc6d4 1\uc77c \uc624\uc804 11\uc2dc \uc6d4\uac04 \ub9ac\ud3ec\ud2b8\nscheduler.add_job(\n    report_gen.generate_monthly_report,\n    trigger=CronTrigger(day=1, hour=11, minute=0),\n    id=\'monthly_report\',\n    name=\'\uc6d4\uac04 \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\'\n)\n\nscheduler.start()\n\nlogger.info("\ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791")\n\n# \uba54\uc778 \ub8e8\ud504\ntry:\n    import time\n    while True:\n        time.sleep(1)\nexcept (KeyboardInterrupt, SystemExit):\n    scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(e.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\uc758 \ub2e4\uc591\ud55c \uc2e4\uc804 \uc608\uc81c\ub97c \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c APScheduler\ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."})]})}function p(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>i});var o=r(6540);const s={},t=o.createContext(s);function a(n){const e=o.useContext(t);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);