"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7559],{7900:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"apscheduler/job-stores","title":"6. Job Stores","description":"Job Store\ub294 APScheduler\uc5d0\uc11c Job\uc758 \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ucef4\ud3ec\ub10c\ud2b8\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c Job Store \ud0c0\uc785\uacfc \ud65c\uc6a9\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/apscheduler/job-stores.md","sourceDirName":"apscheduler","slug":"/apscheduler/job-stores","permalink":"/tobias-docs/comp-2/docs/apscheduler/job-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/apscheduler/job-stores.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"apschedulerSidebar","previous":{"title":"5. Executors","permalink":"/tobias-docs/comp-2/docs/apscheduler/executors"},"next":{"title":"7. \ubaa8\ub2c8\ud130\ub9c1","permalink":"/tobias-docs/comp-2/docs/apscheduler/monitoring"}}');var t=o(4848),s=o(8453);const d={sidebar_position:7},i="6. Job Stores",l={},c=[{value:"Job Store \uac1c\uc694",id:"job-store-\uac1c\uc694",level:2},{value:"MemoryJobStore",id:"memoryjobstore",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"\uc5ec\ub7ec MemoryJobStore \uc0ac\uc6a9",id:"\uc5ec\ub7ec-memoryjobstore-\uc0ac\uc6a9",level:3},{value:"MemoryJobStore\uc758 \ud55c\uacc4",id:"memoryjobstore\uc758-\ud55c\uacc4",level:3},{value:"SQLAlchemyJobStore",id:"sqlalchemyjobstore",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95 (SQLite)",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-sqlite",level:3},{value:"PostgreSQL \uc0ac\uc6a9",id:"postgresql-\uc0ac\uc6a9",level:3},{value:"MySQL \uc0ac\uc6a9",id:"mysql-\uc0ac\uc6a9",level:3},{value:"\ud14c\uc774\ube14 \uc0dd\uc131 \ubc0f \uad00\ub9ac",id:"\ud14c\uc774\ube14-\uc0dd\uc131-\ubc0f-\uad00\ub9ac",level:3},{value:"\ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac",id:"\ud2b8\ub79c\uc7ad\uc158-\ucc98\ub9ac",level:3},{value:"\ub300\uc6a9\ub7c9 Job \uad00\ub9ac",id:"\ub300\uc6a9\ub7c9-job-\uad00\ub9ac",level:3},{value:"MongoDBJobStore",id:"mongodbjobstore",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",level:3},{value:"MongoDB \uc778\uc99d \uc0ac\uc6a9",id:"mongodb-\uc778\uc99d-\uc0ac\uc6a9",level:3},{value:"MongoDB \ubcf5\uc81c \uc138\ud2b8 \uc0ac\uc6a9",id:"mongodb-\ubcf5\uc81c-\uc138\ud2b8-\uc0ac\uc6a9",level:3},{value:"MongoDB \uc778\ub371\uc2a4 \ucd5c\uc801\ud654",id:"mongodb-\uc778\ub371\uc2a4-\ucd5c\uc801\ud654",level:3},{value:"MongoDB \ucffc\ub9ac \ubc0f \ubd84\uc11d",id:"mongodb-\ucffc\ub9ac-\ubc0f-\ubd84\uc11d",level:3},{value:"RedisJobStore",id:"redisjobstore",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-2",level:3},{value:"Redis \uc778\uc99d \uc0ac\uc6a9",id:"redis-\uc778\uc99d-\uc0ac\uc6a9",level:3},{value:"Redis \ud074\ub7ec\uc2a4\ud130 \uc0ac\uc6a9",id:"redis-\ud074\ub7ec\uc2a4\ud130-\uc0ac\uc6a9",level:3},{value:"Redis TTL \uc124\uc815",id:"redis-ttl-\uc124\uc815",level:3},{value:"Redis Pub/Sub \ud1b5\ud569",id:"redis-pubsub-\ud1b5\ud569",level:3},{value:"Job Store \uc120\ud0dd \uac00\uc774\ub4dc",id:"job-store-\uc120\ud0dd-\uac00\uc774\ub4dc",level:2},{value:"\uc131\ub2a5 \ube44\uad50",id:"\uc131\ub2a5-\ube44\uad50",level:3},{value:"\uc0ac\uc6a9 \uc0ac\ub840\ubcc4 \uad8c\uc7a5\uc0ac\ud56d",id:"\uc0ac\uc6a9-\uc0ac\ub840\ubcc4-\uad8c\uc7a5\uc0ac\ud56d",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"6-job-stores",children:"6. Job Stores"})}),"\n",(0,t.jsx)(n.p,{children:"Job Store\ub294 APScheduler\uc5d0\uc11c Job\uc758 \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ucef4\ud3ec\ub10c\ud2b8\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \ub2e4\uc591\ud55c Job Store \ud0c0\uc785\uacfc \ud65c\uc6a9\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"job-store-\uac1c\uc694",children:"Job Store \uac1c\uc694"}),"\n",(0,t.jsx)(n.p,{children:"APScheduler\ub294 \uc5ec\ub7ec \uc885\ub958\uc758 Job Store\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MemoryJobStore"}),": \uba54\ubaa8\ub9ac\uc5d0 Job \uc800\uc7a5 (\uae30\ubcf8\uac12, \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc \uc2dc \uc18c\uba78)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQLAlchemyJobStore"}),": \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 Job \uc800\uc7a5"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MongoDBJobStore"}),": MongoDB\uc5d0 Job \uc800\uc7a5"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RedisJobStore"}),": Redis\uc5d0 Job \uc800\uc7a5"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\uac01 Job Store\ub294 \uc601\uc18d\uc131, \ud655\uc7a5\uc131, \uc131\ub2a5 \uba74\uc5d0\uc11c \ub2e4\ub978 \ud2b9\uc131\uc744 \uac00\uc9d1\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"memoryjobstore",children:"MemoryJobStore"}),"\n",(0,t.jsx)(n.p,{children:"MemoryJobStore\ub294 Job\uc744 \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. \uac00\uc7a5 \ube60\ub974\uc9c0\ub9cc \ud504\ub85c\uc138\uc2a4\uac00 \uc885\ub8cc\ub418\uba74 \ubaa8\ub4e0 Job\uc774 \uc0ac\ub77c\uc9d1\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.memory import MemoryJobStore\nfrom datetime import datetime\nimport time\n\n# MemoryJobStore \uc124\uc815 (\uae30\ubcf8\uac12\uc774\ubbc0\ub85c \uba85\uc2dc\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub428)\njobstores = {\n    'default': MemoryJobStore()\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef simple_job():\n    print(f\"\uba54\ubaa8\ub9ac Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(simple_job, 'interval', seconds=5, id='memory_job')\n\nscheduler.start()\n\nprint(\"MemoryJobStore \uc0ac\uc6a9 \uc911...\")\nprint(f\"\uc800\uc7a5\ub41c Job \uc218: {len(scheduler.get_jobs())}\")\n\ntry:\n    time.sleep(20)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc5ec\ub7ec-memoryjobstore-\uc0ac\uc6a9",children:"\uc5ec\ub7ec MemoryJobStore \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.memory import MemoryJobStore\nfrom datetime import datetime\nimport time\n\n# \uc5ec\ub7ec MemoryJobStore \uc124\uc815\njobstores = {\n    'default': MemoryJobStore(),\n    'critical': MemoryJobStore(),\n    'temporary': MemoryJobStore()\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef task(category):\n    print(f\"[{category}] \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}\")\n\n# \uac01 Job Store\uc5d0 Job \ucd94\uac00\nscheduler.add_job(task, 'interval', seconds=5, args=['\uc77c\ubc18'],\n                  jobstore='default', id='normal_job')\n\nscheduler.add_job(task, 'interval', seconds=10, args=['\uc911\uc694'],\n                  jobstore='critical', id='critical_job')\n\nscheduler.add_job(task, 'interval', seconds=3, args=['\uc784\uc2dc'],\n                  jobstore='temporary', id='temp_job')\n\nscheduler.start()\n\nprint(\"\uc5ec\ub7ec MemoryJobStore \uc0ac\uc6a9 \uc911...\")\n\n# Job Store\ubcc4 Job \uc218 \ud655\uc778\nfor jobstore_name in ['default', 'critical', 'temporary']:\n    jobs = scheduler.get_jobs(jobstore=jobstore_name)\n    print(f\"{jobstore_name}: {len(jobs)}\uac1c Job\")\n\ntry:\n    time.sleep(20)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"memoryjobstore\uc758-\ud55c\uacc4",children:"MemoryJobStore\uc758 \ud55c\uacc4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.memory import MemoryJobStore\nimport time\n\ndef demonstrate_memory_limitation():\n    """MemoryJobStore\uc758 \ud55c\uacc4 \uc2dc\uc5f0"""\n\n    # \uccab \ubc88\uc9f8 \uc2a4\ucf00\uc904\ub7ec\n    scheduler1 = BackgroundScheduler(jobstores={\'default\': MemoryJobStore()})\n\n    def task():\n        print("\uc791\uc5c5 \uc2e4\ud589")\n\n    scheduler1.add_job(task, \'interval\', seconds=5, id=\'persistent_job\')\n    scheduler1.start()\n\n    print("\uccab \ubc88\uc9f8 \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791")\n    print(f"\uc800\uc7a5\ub41c Job: {len(scheduler1.get_jobs())}\uac1c")\n\n    time.sleep(10)\n\n    # \uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc\n    scheduler1.shutdown()\n    print("\uccab \ubc88\uc9f8 \uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc")\n\n    # \ub450 \ubc88\uc9f8 \uc2a4\ucf00\uc904\ub7ec (\uc0c8\ub85c\uc6b4 MemoryJobStore)\n    scheduler2 = BackgroundScheduler(jobstores={\'default\': MemoryJobStore()})\n    scheduler2.start()\n\n    print("\\n\ub450 \ubc88\uc9f8 \uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791")\n    print(f"\uc800\uc7a5\ub41c Job: {len(scheduler2.get_jobs())}\uac1c")\n    print("-> MemoryJobStore\ub294 \uc601\uc18d\uc131\uc774 \uc5c6\uc5b4 Job\uc774 \uc0ac\ub77c\uc84c\uc2b5\ub2c8\ub2e4!")\n\n    scheduler2.shutdown()\n\ndemonstrate_memory_limitation()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sqlalchemyjobstore",children:"SQLAlchemyJobStore"}),"\n",(0,t.jsx)(n.p,{children:"SQLAlchemyJobStore\ub294 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 Job\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. \uc601\uc18d\uc131\uc774 \ud544\uc694\ud55c \ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-sqlite",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95 (SQLite)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom datetime import datetime\nimport time\n\n# SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0ac\uc6a9\njobstores = {\n    \'default\': SQLAlchemyJobStore(url=\'sqlite:///jobs.sqlite\')\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef persistent_job():\n    print(f"\uc601\uc18d\uc801 Job \uc2e4\ud589: {datetime.now()}")\n\n# Job \ucd94\uac00 (replace_existing=True\ub85c \uc911\ubcf5 \ubc29\uc9c0)\nscheduler.add_job(\n    persistent_job,\n    \'interval\',\n    seconds=10,\n    id=\'persistent_job_1\',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint("SQLAlchemyJobStore \uc0ac\uc6a9 \uc911 (SQLite)...")\nprint(f"\uc800\uc7a5\ub41c Job \uc218: {len(scheduler.get_jobs())}")\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n\nprint("\\n\uc2a4\ucf00\uc904\ub7ec \uc7ac\uc2dc\uc791 \uc2dc\uc5f0...")\ntime.sleep(2)\n\n# \uc0c8 \uc2a4\ucf00\uc904\ub7ec \uc778\uc2a4\ud134\uc2a4\nscheduler2 = BackgroundScheduler(jobstores=jobstores)\nscheduler2.start()\n\nprint(f"\uc800\uc7a5\ub41c Job \uc218: {len(scheduler2.get_jobs())}")\nprint("-> SQLAlchemyJobStore\ub294 \uc601\uc18d\uc131\uc774 \uc788\uc5b4 Job\uc774 \uc720\uc9c0\ub429\ub2c8\ub2e4!")\n\ntime.sleep(10)\nscheduler2.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-\uc0ac\uc6a9",children:"PostgreSQL \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom datetime import datetime\nimport time\n\n# PostgreSQL \uc5f0\uacb0 URL\n# \ud615\uc2dd: postgresql://username:password@host:port/database\npostgres_url = 'postgresql://scheduler_user:password@localhost:5432/scheduler_db'\n\njobstores = {\n    'default': SQLAlchemyJobStore(url=postgres_url)\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef postgres_job():\n    print(f\"PostgreSQL Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(\n    postgres_job,\n    'interval',\n    minutes=5,\n    id='postgres_job',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint(\"PostgreSQL JobStore \uc0ac\uc6a9 \uc911...\")\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mysql-\uc0ac\uc6a9",children:"MySQL \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom datetime import datetime\nimport time\n\n# MySQL \uc5f0\uacb0 URL\n# \ud615\uc2dd: mysql+pymysql://username:password@host:port/database\nmysql_url = 'mysql+pymysql://scheduler_user:password@localhost:3306/scheduler_db'\n\njobstores = {\n    'default': SQLAlchemyJobStore(url=mysql_url, tablename='apscheduler_jobs')\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef mysql_job():\n    print(f\"MySQL Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(\n    mysql_job,\n    'interval',\n    minutes=5,\n    id='mysql_job',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint(\"MySQL JobStore \uc0ac\uc6a9 \uc911...\")\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\ud14c\uc774\ube14-\uc0dd\uc131-\ubc0f-\uad00\ub9ac",children:"\ud14c\uc774\ube14 \uc0dd\uc131 \ubc0f \uad00\ub9ac"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom sqlalchemy import create_engine, inspect\nimport time\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 URL\ndb_url = 'sqlite:///scheduler_jobs.sqlite'\n\n# Engine \uc0dd\uc131\nengine = create_engine(db_url)\n\n# JobStore \uc0dd\uc131 (\ud14c\uc774\ube14 \uc790\ub3d9 \uc0dd\uc131)\njobstore = SQLAlchemyJobStore(url=db_url, tablename='scheduled_jobs')\n\nscheduler = BackgroundScheduler(jobstores={'default': jobstore})\n\ndef sample_job():\n    print(\"\uc791\uc5c5 \uc2e4\ud589\")\n\n# Job \ucd94\uac00\nscheduler.add_job(sample_job, 'interval', seconds=30, id='sample')\n\nscheduler.start()\n\n# \ud14c\uc774\ube14 \ud655\uc778\ninspector = inspect(engine)\ntables = inspector.get_table_names()\nprint(f\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14: {tables}\")\n\nif 'scheduled_jobs' in tables:\n    columns = inspector.get_columns('scheduled_jobs')\n    print(\"\\n\ud14c\uc774\ube14 \uad6c\uc870:\")\n    for column in columns:\n        print(f\"  - {column['name']}: {column['type']}\")\n\ntime.sleep(5)\nscheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\ud2b8\ub79c\uc7ad\uc158-\ucc98\ub9ac",children:"\ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom contextlib import contextmanager\nimport time\n\ndb_url = \'sqlite:///transactional_jobs.sqlite\'\nengine = create_engine(db_url)\nSession = sessionmaker(bind=engine)\n\njobstore = SQLAlchemyJobStore(url=db_url)\nscheduler = BackgroundScheduler(jobstores={\'default\': jobstore})\n\n@contextmanager\ndef db_session():\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800"""\n    session = Session()\n    try:\n        yield session\n        session.commit()\n    except Exception as e:\n        session.rollback()\n        print(f"\ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31: {e}")\n        raise\n    finally:\n        session.close()\n\ndef transactional_job():\n    """\ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac\uac00 \uc788\ub294 Job"""\n    with db_session() as session:\n        print("\ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791")\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5\n        print("\ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b")\n\nscheduler.add_job(transactional_job, \'interval\', seconds=10, id=\'transactional\')\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\ub300\uc6a9\ub7c9-job-\uad00\ub9ac",children:"\ub300\uc6a9\ub7c9 Job \uad00\ub9ac"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom datetime import datetime, timedelta\nimport time\n\ndb_url = 'sqlite:///large_scale_jobs.sqlite'\n\njobstores = {\n    'default': SQLAlchemyJobStore(url=db_url)\n}\n\njob_defaults = {\n    'coalesce': True,\n    'max_instances': 1,\n    'misfire_grace_time': 60\n}\n\nscheduler = BackgroundScheduler(\n    jobstores=jobstores,\n    job_defaults=job_defaults\n)\n\ndef task(task_id):\n    print(f\"\uc791\uc5c5 {task_id} \uc2e4\ud589\")\n\n# \ub300\ub7c9\uc758 Job \ucd94\uac00\nprint(\"1000\uac1c\uc758 Job \ucd94\uac00 \uc911...\")\nstart_time = time.time()\n\nfor i in range(1000):\n    run_date = datetime.now() + timedelta(seconds=i*10)\n    scheduler.add_job(\n        task,\n        'date',\n        run_date=run_date,\n        args=[i],\n        id=f'task_{i}',\n        replace_existing=True\n    )\n\nduration = time.time() - start_time\nprint(f\"\uc644\ub8cc! (\uc18c\uc694\uc2dc\uac04: {duration:.2f}\ucd08)\")\n\nscheduler.start()\n\nprint(f\"\ucd1d {len(scheduler.get_jobs())}\uac1c Job \uc800\uc7a5\ub428\")\n\ntime.sleep(30)\n\n# Job \uc77c\uad04 \uc81c\uac70\nprint(\"\\nJob \uc77c\uad04 \uc81c\uac70 \uc911...\")\nstart_time = time.time()\n\nscheduler.remove_all_jobs()\n\nduration = time.time() - start_time\nprint(f\"\uc644\ub8cc! (\uc18c\uc694\uc2dc\uac04: {duration:.2f}\ucd08)\")\n\nscheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mongodbjobstore",children:"MongoDBJobStore"}),"\n",(0,t.jsx)(n.p,{children:"MongoDBJobStore\ub294 MongoDB\uc5d0 Job\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. NoSQL\uc758 \uc720\uc5f0\uc131\uc774 \ud544\uc694\ud560 \ub54c \uc801\ud569\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.mongodb import MongoDBJobStore\nfrom pymongo import MongoClient\nfrom datetime import datetime\nimport time\n\n# MongoDB \ud074\ub77c\uc774\uc5b8\ud2b8 \uc0dd\uc131\nclient = MongoClient('mongodb://localhost:27017/')\n\n# MongoDBJobStore \uc124\uc815\njobstores = {\n    'default': MongoDBJobStore(\n        client=client,\n        database='scheduler_db',\n        collection='jobs'\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef mongo_job():\n    print(f\"MongoDB Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(\n    mongo_job,\n    'interval',\n    seconds=10,\n    id='mongo_job_1',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint(\"MongoDBJobStore \uc0ac\uc6a9 \uc911...\")\nprint(f\"\uc800\uc7a5\ub41c Job \uc218: {len(scheduler.get_jobs())}\")\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\nfinally:\n    client.close()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mongodb-\uc778\uc99d-\uc0ac\uc6a9",children:"MongoDB \uc778\uc99d \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.mongodb import MongoDBJobStore\nfrom pymongo import MongoClient\nfrom datetime import datetime\nimport time\n\n# \uc778\uc99d \uc815\ubcf4 \ud3ec\ud568 MongoDB \uc5f0\uacb0\nclient = MongoClient(\n    host='localhost',\n    port=27017,\n    username='scheduler_user',\n    password='password',\n    authSource='admin'\n)\n\njobstores = {\n    'default': MongoDBJobStore(\n        client=client,\n        database='scheduler_db',\n        collection='scheduled_jobs'\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef authenticated_job():\n    print(f\"\uc778\uc99d\ub41c MongoDB Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(\n    authenticated_job,\n    'interval',\n    minutes=5,\n    id='auth_job',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint(\"\uc778\uc99d\ub41c MongoDBJobStore \uc0ac\uc6a9 \uc911...\")\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\nfinally:\n    client.close()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mongodb-\ubcf5\uc81c-\uc138\ud2b8-\uc0ac\uc6a9",children:"MongoDB \ubcf5\uc81c \uc138\ud2b8 \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.mongodb import MongoDBJobStore\nfrom pymongo import MongoClient\nfrom datetime import datetime\nimport time\n\n# \ubcf5\uc81c \uc138\ud2b8 \uc5f0\uacb0\nclient = MongoClient(\n    'mongodb://mongo1:27017,mongo2:27017,mongo3:27017/'\n    '?replicaSet=myReplicaSet'\n)\n\njobstores = {\n    'default': MongoDBJobStore(\n        client=client,\n        database='scheduler_db',\n        collection='jobs',\n        # \uc4f0\uae30 \uad00\uc2ec\uc0ac \uc124\uc815\n        write_concern={'w': 'majority'}\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef replicated_job():\n    print(f\"\ubcf5\uc81c\ub41c Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(\n    replicated_job,\n    'interval',\n    minutes=5,\n    id='replicated_job',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint(\"MongoDB \ubcf5\uc81c \uc138\ud2b8 \uc0ac\uc6a9 \uc911...\")\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\nfinally:\n    client.close()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mongodb-\uc778\ub371\uc2a4-\ucd5c\uc801\ud654",children:"MongoDB \uc778\ub371\uc2a4 \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.mongodb import MongoDBJobStore\nfrom pymongo import MongoClient, ASCENDING\nfrom datetime import datetime\nimport time\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client['scheduler_db']\ncollection = db['optimized_jobs']\n\n# \uc778\ub371\uc2a4 \uc0dd\uc131\ncollection.create_index([('next_run_time', ASCENDING)])\ncollection.create_index([('_id', ASCENDING)])\n\nprint(\"MongoDB \uc778\ub371\uc2a4 \uc0dd\uc131\ub428:\")\nfor index in collection.list_indexes():\n    print(f\"  - {index['name']}: {index['key']}\")\n\njobstores = {\n    'default': MongoDBJobStore(\n        client=client,\n        database='scheduler_db',\n        collection='optimized_jobs'\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef optimized_job(n):\n    print(f\"\ucd5c\uc801\ud654\ub41c Job {n} \uc2e4\ud589\")\n\n# \ub9ce\uc740 Job \ucd94\uac00\nfor i in range(100):\n    scheduler.add_job(\n        optimized_job,\n        'interval',\n        seconds=30,\n        args=[i],\n        id=f'opt_job_{i}',\n        replace_existing=True\n    )\n\nscheduler.start()\n\nprint(f\"\ucd1d {len(scheduler.get_jobs())}\uac1c Job \uc800\uc7a5\ub428\")\n\ntime.sleep(10)\n\nscheduler.shutdown()\nclient.close()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mongodb-\ucffc\ub9ac-\ubc0f-\ubd84\uc11d",children:"MongoDB \ucffc\ub9ac \ubc0f \ubd84\uc11d"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.mongodb import MongoDBJobStore\nfrom pymongo import MongoClient\nfrom datetime import datetime\nimport time\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client['scheduler_db']\ncollection = db['jobs']\n\njobstores = {\n    'default': MongoDBJobStore(\n        client=client,\n        database='scheduler_db',\n        collection='jobs'\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef analyzed_job(category):\n    print(f\"[{category}] Job \uc2e4\ud589: {datetime.now()}\")\n\n# \ub2e4\uc591\ud55c \uce74\ud14c\uace0\ub9ac\uc758 Job \ucd94\uac00\ncategories = ['data', 'report', 'backup', 'cleanup']\n\nfor i, category in enumerate(categories):\n    for j in range(5):\n        scheduler.add_job(\n            analyzed_job,\n            'interval',\n            seconds=30,\n            args=[category],\n            id=f'{category}_job_{j}',\n            replace_existing=True\n        )\n\nscheduler.start()\n\ntime.sleep(5)\n\n# MongoDB\uc5d0\uc11c \uc9c1\uc811 \ucffc\ub9ac\nprint(\"\\n=== Job \ubd84\uc11d ===\")\n\n# \ucd1d Job \uc218\ntotal_jobs = collection.count_documents({})\nprint(f\"\ucd1d Job \uc218: {total_jobs}\")\n\n# \ub2e4\uc74c \uc2e4\ud589 \uc2dc\uac04\uc774 \uc788\ub294 Job \uc218\nactive_jobs = collection.count_documents({'next_run_time': {'$ne': None}})\nprint(f\"\ud65c\uc131 Job \uc218: {active_jobs}\")\n\n# Job ID \ud328\ud134\ubcc4 \uc9d1\uacc4\nprint(\"\\n\uce74\ud14c\uace0\ub9ac\ubcc4 Job \uc218:\")\npipeline = [\n    {\n        '$group': {\n            '_id': {\n                '$arrayElemAt': [\n                    {'$split': ['$_id', '_job_']},\n                    0\n                ]\n            },\n            'count': {'$sum': 1}\n        }\n    }\n]\n\nfor result in collection.aggregate(pipeline):\n    print(f\"  {result['_id']}: {result['count']}\uac1c\")\n\ntime.sleep(10)\n\nscheduler.shutdown()\nclient.close()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"redisjobstore",children:"RedisJobStore"}),"\n",(0,t.jsx)(n.p,{children:"RedisJobStore\ub294 Redis\uc5d0 Job\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4. \ube60\ub978 \uc131\ub2a5\uacfc \ubd84\uc0b0 \ud658\uacbd \uc9c0\uc6d0\uc774 \ud544\uc694\ud560 \ub54c \uc801\ud569\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-2",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.redis import RedisJobStore\nfrom datetime import datetime\nimport time\n\n# RedisJobStore \uc124\uc815\njobstores = {\n    'default': RedisJobStore(\n        host='localhost',\n        port=6379,\n        db=0\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef redis_job():\n    print(f\"Redis Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(\n    redis_job,\n    'interval',\n    seconds=10,\n    id='redis_job_1',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint(\"RedisJobStore \uc0ac\uc6a9 \uc911...\")\nprint(f\"\uc800\uc7a5\ub41c Job \uc218: {len(scheduler.get_jobs())}\")\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"redis-\uc778\uc99d-\uc0ac\uc6a9",children:"Redis \uc778\uc99d \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.redis import RedisJobStore\nfrom datetime import datetime\nimport time\n\n# \ube44\ubc00\ubc88\ud638 \ud3ec\ud568 Redis \uc5f0\uacb0\njobstores = {\n    'default': RedisJobStore(\n        host='localhost',\n        port=6379,\n        db=0,\n        password='redis_password'\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef secured_job():\n    print(f\"\ubcf4\uc548 Redis Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(\n    secured_job,\n    'interval',\n    minutes=5,\n    id='secured_job',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint(\"\ubcf4\uc548 RedisJobStore \uc0ac\uc6a9 \uc911...\")\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"redis-\ud074\ub7ec\uc2a4\ud130-\uc0ac\uc6a9",children:"Redis \ud074\ub7ec\uc2a4\ud130 \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.redis import RedisJobStore\nfrom redis.cluster import RedisCluster\nfrom datetime import datetime\nimport time\n\n# Redis \ud074\ub7ec\uc2a4\ud130 \ud074\ub77c\uc774\uc5b8\ud2b8\nstartup_nodes = [\n    {"host": "redis-node-1", "port": 7000},\n    {"host": "redis-node-2", "port": 7001},\n    {"host": "redis-node-3", "port": 7002},\n]\n\nredis_client = RedisCluster(startup_nodes=startup_nodes, decode_responses=True)\n\n# RedisJobStore\uc5d0 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc804\ub2ec\njobstores = {\n    \'default\': RedisJobStore(\n        redis=redis_client,\n        jobs_key=\'apscheduler.jobs\',\n        run_times_key=\'apscheduler.run_times\'\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef cluster_job():\n    print(f"\ud074\ub7ec\uc2a4\ud130 Job \uc2e4\ud589: {datetime.now()}")\n\nscheduler.add_job(\n    cluster_job,\n    \'interval\',\n    minutes=5,\n    id=\'cluster_job\',\n    replace_existing=True\n)\n\nscheduler.start()\n\nprint("Redis \ud074\ub7ec\uc2a4\ud130 \uc0ac\uc6a9 \uc911...")\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"redis-ttl-\uc124\uc815",children:"Redis TTL \uc124\uc815"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.redis import RedisJobStore\nimport redis\nfrom datetime import datetime, timedelta\nimport time\n\n# Redis \ud074\ub77c\uc774\uc5b8\ud2b8\nredis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)\n\njobstores = {\n    'default': RedisJobStore(\n        redis=redis_client,\n        jobs_key='apscheduler.jobs',\n        run_times_key='apscheduler.run_times'\n    )\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef temporary_job():\n    print(f\"\uc784\uc2dc Job \uc2e4\ud589: {datetime.now()}\")\n\n# Job \ucd94\uac00\nrun_date = datetime.now() + timedelta(seconds=30)\nscheduler.add_job(\n    temporary_job,\n    'date',\n    run_date=run_date,\n    id='temp_job_with_ttl'\n)\n\nscheduler.start()\n\n# Redis \ud0a4\uc5d0 TTL \uc124\uc815 (1\uc2dc\uac04)\nredis_client.expire('apscheduler.jobs', 3600)\nredis_client.expire('apscheduler.run_times', 3600)\n\nprint(\"Redis TTL\uc774 \uc124\uc815\ub41c JobStore \uc0ac\uc6a9 \uc911...\")\n\nttl = redis_client.ttl('apscheduler.jobs')\nprint(f\"Jobs \ud0a4 TTL: {ttl}\ucd08\")\n\ntime.sleep(40)\n\nscheduler.shutdown()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"redis-pubsub-\ud1b5\ud569",children:"Redis Pub/Sub \ud1b5\ud569"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.redis import RedisJobStore\nfrom apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR\nimport redis\nimport json\nfrom datetime import datetime\nimport time\nimport threading\n\n# Redis \ud074\ub77c\uc774\uc5b8\ud2b8\nredis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)\npubsub = redis_client.pubsub()\n\njobstores = {\n    'default': RedisJobStore(redis=redis_client)\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef publish_job_event(event_type, job_id, data=None):\n    \"\"\"Job \uc774\ubca4\ud2b8\ub97c Redis Pub/Sub\uc73c\ub85c \ubc1c\ud589\"\"\"\n    message = {\n        'event_type': event_type,\n        'job_id': job_id,\n        'timestamp': datetime.now().isoformat(),\n        'data': data\n    }\n    redis_client.publish('scheduler_events', json.dumps(message))\n\ndef job_executed_listener(event):\n    \"\"\"Job \uc2e4\ud589 \uc644\ub8cc \ub9ac\uc2a4\ub108\"\"\"\n    publish_job_event('JOB_EXECUTED', event.job_id)\n\ndef job_error_listener(event):\n    \"\"\"Job \uc624\ub958 \ub9ac\uc2a4\ub108\"\"\"\n    publish_job_event('JOB_ERROR', event.job_id, {'exception': str(event.exception)})\n\n# \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108 \ub4f1\ub85d\nscheduler.add_listener(job_executed_listener, EVENT_JOB_EXECUTED)\nscheduler.add_listener(job_error_listener, EVENT_JOB_ERROR)\n\ndef monitored_job():\n    print(f\"\ubaa8\ub2c8\ud130\ub9c1\ub418\ub294 Job \uc2e4\ud589: {datetime.now()}\")\n\nscheduler.add_job(monitored_job, 'interval', seconds=10, id='monitored')\n\n# Pub/Sub \uad6c\ub3c5\uc790\ndef subscriber():\n    \"\"\"\uc774\ubca4\ud2b8 \uad6c\ub3c5\uc790\"\"\"\n    pubsub.subscribe('scheduler_events')\n\n    for message in pubsub.listen():\n        if message['type'] == 'message':\n            event_data = json.loads(message['data'])\n            print(f\"[\uc774\ubca4\ud2b8] {event_data['event_type']}: {event_data['job_id']}\")\n\n# \uad6c\ub3c5\uc790 \uc2a4\ub808\ub4dc \uc2dc\uc791\nsubscriber_thread = threading.Thread(target=subscriber, daemon=True)\nsubscriber_thread.start()\n\nscheduler.start()\n\nprint(\"Redis Pub/Sub \ud1b5\ud569 JobStore \uc0ac\uc6a9 \uc911...\")\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    scheduler.shutdown()\n    pubsub.close()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"job-store-\uc120\ud0dd-\uac00\uc774\ub4dc",children:"Job Store \uc120\ud0dd \uac00\uc774\ub4dc"}),"\n",(0,t.jsx)(n.h3,{id:"\uc131\ub2a5-\ube44\uad50",children:"\uc131\ub2a5 \ube44\uad50"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.memory import MemoryJobStore\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.jobstores.redis import RedisJobStore\nimport time\n\ndef benchmark_jobstore(jobstore_name, jobstore):\n    \"\"\"Job Store \uc131\ub2a5 \ubca4\uce58\ub9c8\ud06c\"\"\"\n    scheduler = BackgroundScheduler(jobstores={'default': jobstore})\n\n    def dummy_job():\n        pass\n\n    # Job \ucd94\uac00 \uc131\ub2a5 \uce21\uc815\n    start = time.time()\n    for i in range(1000):\n        scheduler.add_job(\n            dummy_job,\n            'interval',\n            seconds=3600,\n            id=f'job_{i}',\n            replace_existing=True\n        )\n    add_duration = time.time() - start\n\n    scheduler.start()\n\n    # Job \uc870\ud68c \uc131\ub2a5 \uce21\uc815\n    start = time.time()\n    jobs = scheduler.get_jobs()\n    query_duration = time.time() - start\n\n    # Job \uc81c\uac70 \uc131\ub2a5 \uce21\uc815\n    start = time.time()\n    scheduler.remove_all_jobs()\n    remove_duration = time.time() - start\n\n    scheduler.shutdown()\n\n    return {\n        'name': jobstore_name,\n        'add': add_duration,\n        'query': query_duration,\n        'remove': remove_duration\n    }\n\n# \ubca4\uce58\ub9c8\ud06c \uc2e4\ud589\nprint(\"Job Store \uc131\ub2a5 \ube44\uad50 (1000\uac1c Job)\")\nprint(\"=\"*60)\n\nresults = []\n\n# MemoryJobStore\nresults.append(benchmark_jobstore('Memory', MemoryJobStore()))\n\n# SQLAlchemyJobStore (SQLite)\nresults.append(benchmark_jobstore('SQLAlchemy (SQLite)',\n                                   SQLAlchemyJobStore(url='sqlite:///benchmark.sqlite')))\n\n# RedisJobStore\nresults.append(benchmark_jobstore('Redis', RedisJobStore()))\n\n# \uacb0\uacfc \ucd9c\ub825\nfor result in results:\n    print(f\"\\n{result['name']}:\")\n    print(f\"  \ucd94\uac00: {result['add']:.3f}\ucd08\")\n    print(f\"  \uc870\ud68c: {result['query']:.3f}\ucd08\")\n    print(f\"  \uc81c\uac70: {result['remove']:.3f}\ucd08\")\n    print(f\"  \ucd1d\ud569: {sum([result['add'], result['query'], result['remove']]):.3f}\ucd08\")\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc0ac\uc6a9-\uc0ac\ub840\ubcc4-\uad8c\uc7a5\uc0ac\ud56d",children:"\uc0ac\uc6a9 \uc0ac\ub840\ubcc4 \uad8c\uc7a5\uc0ac\ud56d"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\"\"\"\nJob Store \uc120\ud0dd \uac00\uc774\ub4dc\n\n1. MemoryJobStore\n   - \uc0ac\uc6a9 \uc0ac\ub840: \uac1c\ubc1c/\ud14c\uc2a4\ud2b8, \uc77c\uc2dc\uc801 \uc791\uc5c5, \ub2e8\uc77c \uc778\uc2a4\ud134\uc2a4\n   - \uc7a5\uc810: \uac00\uc7a5 \ube60\ub984, \uc124\uc815 \ubd88\ud544\uc694\n   - \ub2e8\uc810: \uc601\uc18d\uc131 \uc5c6\uc74c, \ubd84\uc0b0 \ud658\uacbd \ubbf8\uc9c0\uc6d0\n\n2. SQLAlchemyJobStore\n   - \uc0ac\uc6a9 \uc0ac\ub840: \ud504\ub85c\ub355\uc158, \uc601\uc18d\uc131 \ud544\uc694, \ud2b8\ub79c\uc7ad\uc158 \uc911\uc694\n   - \uc7a5\uc810: \uc601\uc18d\uc131, \ud2b8\ub79c\uc7ad\uc158, \ubcf5\uc7a1\ud55c \ucffc\ub9ac \uac00\ub2a5\n   - \ub2e8\uc810: \uc0c1\ub300\uc801\uc73c\ub85c \ub290\ub9bc, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub9ac \ud544\uc694\n\n3. MongoDBJobStore\n   - \uc0ac\uc6a9 \uc0ac\ub840: \ub300\uc6a9\ub7c9 Job, \uc720\uc5f0\ud55c \uc2a4\ud0a4\ub9c8, \ubd84\uc0b0 \ud658\uacbd\n   - \uc7a5\uc810: \ud655\uc7a5\uc131, \uc720\uc5f0\uc131, \ubcf5\uc81c \uc138\ud2b8 \uc9c0\uc6d0\n   - \ub2e8\uc810: MongoDB \uc778\ud504\ub77c \ud544\uc694, \ud2b8\ub79c\uc7ad\uc158 \uc81c\ud55c\uc801\n\n4. RedisJobStore\n   - \uc0ac\uc6a9 \uc0ac\ub840: \uace0\uc131\ub2a5 \ud544\uc694, \ubd84\uc0b0 \ud658\uacbd, \uc2e4\uc2dc\uac04 \ucc98\ub9ac\n   - \uc7a5\uc810: \ub9e4\uc6b0 \ube60\ub984, \ubd84\uc0b0 \ud658\uacbd \uc6b0\uc218, Pub/Sub \ud1b5\ud569\n   - \ub2e8\uc810: \uba54\ubaa8\ub9ac \uae30\ubc18 (\ube44\uc6a9), \uc601\uc18d\uc131 \uc124\uc815 \ud544\uc694\n\"\"\"\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.memory import MemoryJobStore\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.jobstores.redis import RedisJobStore\n\nclass JobStoreSelector:\n    \"\"\"\uc0ac\uc6a9 \uc0ac\ub840\uc5d0 \ub9de\ub294 Job Store \uc120\ud0dd\"\"\"\n\n    @staticmethod\n    def get_development_config():\n        \"\"\"\uac1c\ubc1c \ud658\uacbd \uc124\uc815\"\"\"\n        return {\n            'jobstores': {\n                'default': MemoryJobStore()\n            }\n        }\n\n    @staticmethod\n    def get_production_config():\n        \"\"\"\ud504\ub85c\ub355\uc158 \ud658\uacbd \uc124\uc815 (\ub2e8\uc77c \uc778\uc2a4\ud134\uc2a4)\"\"\"\n        return {\n            'jobstores': {\n                'default': SQLAlchemyJobStore(\n                    url='postgresql://user:pass@localhost/scheduler_db'\n                )\n            }\n        }\n\n    @staticmethod\n    def get_distributed_config():\n        \"\"\"\ubd84\uc0b0 \ud658\uacbd \uc124\uc815\"\"\"\n        return {\n            'jobstores': {\n                'default': RedisJobStore(\n                    host='redis-cluster',\n                    port=6379\n                )\n            }\n        }\n\n    @staticmethod\n    def get_hybrid_config():\n        \"\"\"\ud558\uc774\ube0c\ub9ac\ub4dc \uc124\uc815 (\ub2e4\uc911 Job Store)\"\"\"\n        return {\n            'jobstores': {\n                'memory': MemoryJobStore(),  # \uc784\uc2dc \uc791\uc5c5\n                'persistent': SQLAlchemyJobStore(  # \uc601\uc18d\uc801 \uc791\uc5c5\n                    url='postgresql://user:pass@localhost/scheduler_db'\n                ),\n                'cache': RedisJobStore(  # \uace0\uc131\ub2a5 \uc791\uc5c5\n                    host='localhost',\n                    port=6379\n                )\n            }\n        }\n\n# \uc0ac\uc6a9 \uc608\uc81c\nselector = JobStoreSelector()\n\n# \uac1c\ubc1c \ud658\uacbd\ndev_config = selector.get_development_config()\ndev_scheduler = BackgroundScheduler(**dev_config)\n\n# \ud504\ub85c\ub355\uc158 \ud658\uacbd\nprod_config = selector.get_production_config()\nprod_scheduler = BackgroundScheduler(**prod_config)\n\n# \ubd84\uc0b0 \ud658\uacbd\ndistributed_config = selector.get_distributed_config()\ndistributed_scheduler = BackgroundScheduler(**distributed_config)\n\n# \ud558\uc774\ube0c\ub9ac\ub4dc \ud658\uacbd\nhybrid_config = selector.get_hybrid_config()\nhybrid_scheduler = BackgroundScheduler(**hybrid_config)\n\ndef task():\n    print(\"\uc791\uc5c5 \uc2e4\ud589\")\n\n# \ud558\uc774\ube0c\ub9ac\ub4dc \ud658\uacbd \uc608\uc81c: Job Store\ubcc4\ub85c \ub2e4\ub978 \uc791\uc5c5 \ud560\ub2f9\nhybrid_scheduler.add_job(task, 'interval', seconds=5,\n                         jobstore='memory', id='temp_task')\nhybrid_scheduler.add_job(task, 'interval', minutes=30,\n                         jobstore='persistent', id='important_task')\nhybrid_scheduler.add_job(task, 'interval', seconds=1,\n                         jobstore='cache', id='realtime_task')\n\nprint(\"\ud558\uc774\ube0c\ub9ac\ub4dc Job Store \uad6c\uc131:\")\nfor jobstore_name in ['memory', 'persistent', 'cache']:\n    jobs = hybrid_scheduler.get_jobs(jobstore=jobstore_name)\n    print(f\"  {jobstore_name}: {len(jobs)}\uac1c Job\")\n"})}),"\n",(0,t.jsx)(n.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\uc758 \ub2e4\uc591\ud55c Job Store \ud0c0\uc785\uacfc \uc120\ud0dd \uac00\uc774\ub4dc\ub97c \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \uc2a4\ucf00\uc904\ub7ec \ubaa8\ub2c8\ud130\ub9c1 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var r=o(6540);const t={},s=r.createContext(t);function d(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);