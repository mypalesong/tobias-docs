"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[4429],{8165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"dagster/testing","title":"7. \ud14c\uc2a4\ud2b8","description":"Dagster\ub294 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \uc2e0\ub8b0\uc131\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud55c \uac15\ub825\ud55c \ud14c\uc2a4\ud2b8 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774 \uc7a5\uc5d0\uc11c\ub294 Asset, Op, Resource\ub97c \ud14c\uc2a4\ud2b8\ud558\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.","source":"@site/docs/dagster/testing.md","sourceDirName":"dagster","slug":"/dagster/testing","permalink":"/docs/dagster/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dagster/testing.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"dagsterSidebar","previous":{"title":"6. Partitions","permalink":"/docs/dagster/partitions"},"next":{"title":"8. \ubc30\ud3ec","permalink":"/docs/dagster/deployment"}}');var r=t(4848),a=t(8453);const i={sidebar_position:8},o="7. \ud14c\uc2a4\ud2b8",l={},d=[{value:"7.1 \ud14c\uc2a4\ud2b8\uc758 \uc911\uc694\uc131",id:"71-\ud14c\uc2a4\ud2b8\uc758-\uc911\uc694\uc131",level:2},{value:"7.1.1 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \ud14c\uc2a4\ud2b8\uac00 \uc911\uc694\ud55c \uc774\uc720",id:"711-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778-\ud14c\uc2a4\ud2b8\uac00-\uc911\uc694\ud55c-\uc774\uc720",level:3},{value:"7.1.2 Dagster \ud14c\uc2a4\ud2b8 \ucca0\ud559",id:"712-dagster-\ud14c\uc2a4\ud2b8-\ucca0\ud559",level:3},{value:"7.2 Asset \ud14c\uc2a4\ud2b8",id:"72-asset-\ud14c\uc2a4\ud2b8",level:2},{value:"7.2.1 \uae30\ubcf8 Asset \ud14c\uc2a4\ud2b8",id:"721-\uae30\ubcf8-asset-\ud14c\uc2a4\ud2b8",level:3},{value:"7.2.2 Asset \uc758\uc874\uc131 \ud14c\uc2a4\ud2b8",id:"722-asset-\uc758\uc874\uc131-\ud14c\uc2a4\ud2b8",level:3},{value:"7.2.3 Asset with Resources \ud14c\uc2a4\ud2b8",id:"723-asset-with-resources-\ud14c\uc2a4\ud2b8",level:3},{value:"7.3 Op \ud14c\uc2a4\ud2b8",id:"73-op-\ud14c\uc2a4\ud2b8",level:2},{value:"7.3.1 \uae30\ubcf8 Op \ud14c\uc2a4\ud2b8",id:"731-\uae30\ubcf8-op-\ud14c\uc2a4\ud2b8",level:3},{value:"7.3.2 Op Configuration \ud14c\uc2a4\ud2b8",id:"732-op-configuration-\ud14c\uc2a4\ud2b8",level:3},{value:"7.3.3 Job \ud14c\uc2a4\ud2b8",id:"733-job-\ud14c\uc2a4\ud2b8",level:3},{value:"7.4 Resource Mocking",id:"74-resource-mocking",level:2},{value:"7.4.1 Resource Mock \ud328\ud134",id:"741-resource-mock-\ud328\ud134",level:3},{value:"7.4.2 pytest-mock\uc744 \uc0ac\uc6a9\ud55c Mocking",id:"742-pytest-mock\uc744-\uc0ac\uc6a9\ud55c-mocking",level:3},{value:"7.4.3 Database Mock",id:"743-database-mock",level:3},{value:"7.5 Partition \ud14c\uc2a4\ud2b8",id:"75-partition-\ud14c\uc2a4\ud2b8",level:2},{value:"7.5.1 Time-based Partition \ud14c\uc2a4\ud2b8",id:"751-time-based-partition-\ud14c\uc2a4\ud2b8",level:3},{value:"7.5.2 Static Partition \ud14c\uc2a4\ud2b8",id:"752-static-partition-\ud14c\uc2a4\ud2b8",level:3},{value:"7.6 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8",id:"76-\uc2e4\uc2b5-\ud504\ub85c\uc81d\ud2b8",level:2},{value:"7.6.1 E-commerce Analytics \ud14c\uc2a4\ud2b8 \uc2a4\uc704\ud2b8",id:"761-e-commerce-analytics-\ud14c\uc2a4\ud2b8-\uc2a4\uc704\ud2b8",level:3},{value:"7.6.2 Integration \ud14c\uc2a4\ud2b8",id:"762-integration-\ud14c\uc2a4\ud2b8",level:3},{value:"7.6.3 pytest \uc124\uc815 \ubc0f Best Practices",id:"763-pytest-\uc124\uc815-\ubc0f-best-practices",level:3},{value:"7.7 \uc694\uc57d",id:"77-\uc694\uc57d",level:2},{value:"\ud575\uc2ec \uac1c\ub150",id:"\ud575\uc2ec-\uac1c\ub150",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"7-\ud14c\uc2a4\ud2b8",children:"7. \ud14c\uc2a4\ud2b8"})}),"\n",(0,r.jsx)(n.p,{children:"Dagster\ub294 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \uc2e0\ub8b0\uc131\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud55c \uac15\ub825\ud55c \ud14c\uc2a4\ud2b8 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774 \uc7a5\uc5d0\uc11c\ub294 Asset, Op, Resource\ub97c \ud14c\uc2a4\ud2b8\ud558\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"71-\ud14c\uc2a4\ud2b8\uc758-\uc911\uc694\uc131",children:"7.1 \ud14c\uc2a4\ud2b8\uc758 \uc911\uc694\uc131"}),"\n",(0,r.jsx)(n.h3,{id:"711-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778-\ud14c\uc2a4\ud2b8\uac00-\uc911\uc694\ud55c-\uc774\uc720",children:"7.1.1 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \ud14c\uc2a4\ud2b8\uac00 \uc911\uc694\ud55c \uc774\uc720"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'"""\n\ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \ud14c\uc2a4\ud2b8\uc758 \ud544\uc694\uc131:\n\n1. \ub370\uc774\ud130 \ud488\uc9c8 \ubcf4\uc7a5\n   - \uc798\ubabb\ub41c \ub370\uc774\ud130\uac00 \ud504\ub85c\ub355\uc158\uc5d0 \ub3c4\ub2ec\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\n   - \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc758 \uc815\ud655\uc131 \uac80\uc99d\n\n2. \ub9ac\ud329\ud1a0\ub9c1 \uc548\uc804\uc131\n   - \ucf54\ub4dc \ubcc0\uacbd \uc2dc \uae30\uc874 \uae30\ub2a5\uc774 \uae68\uc9c0\uc9c0 \uc54a\uc74c\uc744 \ubcf4\uc7a5\n   - \uc790\uc2e0\uac10 \uc788\ub294 \ucf54\ub4dc \uac1c\uc120\n\n3. \ubb38\uc11c\ud654 \ud6a8\uacfc\n   - \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uac00 \ud30c\uc774\ud504\ub77c\uc778\uc758 \ub3d9\uc791 \ubc29\uc2dd\uc744 \uc124\uba85\n   - \uc0c8\ub85c\uc6b4 \ud300\uc6d0\uc758 \uc628\ubcf4\ub529 \uc9c0\uc6d0\n\n4. \ube60\ub978 \ud53c\ub4dc\ubc31\n   - \ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uc804\uc5d0 \ubb38\uc81c \ubc1c\uacac\n   - \ub514\ubc84\uae45 \uc2dc\uac04 \ub2e8\ucd95\n"""\n'})}),"\n",(0,r.jsx)(n.h3,{id:"712-dagster-\ud14c\uc2a4\ud2b8-\ucca0\ud559",children:"7.1.2 Dagster \ud14c\uc2a4\ud2b8 \ucca0\ud559"}),"\n",(0,r.jsx)(n.p,{children:'Dagster\ub294 "\ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uac00\ub2a5\ud55c \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778"\uc744 \ud575\uc2ec \uc6d0\uce59\uc73c\ub85c \ud569\ub2c8\ub2e4:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uaca9\ub9ac\ub41c \ud14c\uc2a4\ud2b8"}),": \uac01 \ucef4\ud3ec\ub10c\ud2b8\ub97c \ub3c5\ub9bd\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Mocking"}),": \uc678\ubd80 \uc758\uc874\uc131\uc744 \uc27d\uac8c \ub300\uccb4"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc7ac\ud604 \uac00\ub2a5\uc131"}),": \ub3d9\uc77c\ud55c \uc785\ub825\uc5d0 \ub300\ud574 \ub3d9\uc77c\ud55c \uacb0\uacfc \ubcf4\uc7a5"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"72-asset-\ud14c\uc2a4\ud2b8",children:"7.2 Asset \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"721-\uae30\ubcf8-asset-\ud14c\uc2a4\ud2b8",children:"7.2.1 \uae30\ubcf8 Asset \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# my_assets.py\nfrom dagster import asset\nimport pandas as pd\n\n@asset\ndef users_data() -> pd.DataFrame:\n    """\uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4."""\n    return pd.DataFrame({\n        "user_id": [1, 2, 3],\n        "name": ["Alice", "Bob", "Charlie"],\n        "age": [25, 30, 35]\n    })\n\n@asset\ndef adult_users(users_data: pd.DataFrame) -> pd.DataFrame:\n    """\uc131\uc778 \uc0ac\uc6a9\uc790\ub9cc \ud544\ud130\ub9c1\ud569\ub2c8\ub2e4."""\n    return users_data[users_data["age"] >= 18]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_my_assets.py\nimport pytest\nfrom dagster import materialize\nfrom my_assets import users_data, adult_users\n\ndef test_users_data():\n    """users_data asset\uc774 \uc62c\ubc14\ub978 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8"""\n    # Asset\uc744 \uc2e4\ud589\ud558\uace0 \uacb0\uacfc\ub97c \uac00\uc838\uc635\ub2c8\ub2e4\n    result = materialize([users_data])\n\n    # \uc131\uacf5 \uc5ec\ubd80 \ud655\uc778\n    assert result.success\n\n    # \uc0dd\uc131\ub41c \ub370\uc774\ud130 \ud655\uc778\n    output = result.output_for_node("users_data")\n    assert len(output) == 3\n    assert list(output.columns) == ["user_id", "name", "age"]\n    assert output["user_id"].tolist() == [1, 2, 3]\n\ndef test_adult_users():\n    """adult_users asset\uc774 \uc62c\ubc14\ub974\uac8c \ud544\ud130\ub9c1\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8"""\n    # \uc758\uc874\uc131\uc774 \uc788\ub294 asset\uc744 \ud568\uaed8 \uc2e4\ud589\n    result = materialize([users_data, adult_users])\n\n    assert result.success\n\n    # adult_users \uacb0\uacfc \ud655\uc778\n    output = result.output_for_node("adult_users")\n    assert len(output) == 3  # \ubaa8\ub450 18\uc138 \uc774\uc0c1\n    assert all(output["age"] >= 18)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"722-asset-\uc758\uc874\uc131-\ud14c\uc2a4\ud2b8",children:"7.2.2 Asset \uc758\uc874\uc131 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# analytics_assets.py\nfrom dagster import asset, AssetIn\nimport pandas as pd\n\n@asset\ndef daily_sales() -> pd.DataFrame:\n    """\uc77c\ubcc4 \ub9e4\ucd9c \ub370\uc774\ud130"""\n    return pd.DataFrame({\n        "date": pd.date_range("2024-01-01", periods=7),\n        "revenue": [1000, 1200, 800, 1500, 1100, 1300, 900]\n    })\n\n@asset\ndef weekly_revenue(daily_sales: pd.DataFrame) -> float:\n    """\uc8fc\uac04 \ucd1d \ub9e4\ucd9c"""\n    return daily_sales["revenue"].sum()\n\n@asset(\n    ins={\n        "daily_sales": AssetIn(),\n        "weekly_revenue": AssetIn()\n    }\n)\ndef revenue_report(daily_sales: pd.DataFrame, weekly_revenue: float) -> dict:\n    """\ub9e4\ucd9c \ub9ac\ud3ec\ud2b8 \uc0dd\uc131"""\n    return {\n        "total_revenue": weekly_revenue,\n        "daily_average": weekly_revenue / len(daily_sales),\n        "max_daily": daily_sales["revenue"].max(),\n        "min_daily": daily_sales["revenue"].min()\n    }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_analytics_assets.py\nfrom dagster import materialize\nfrom analytics_assets import daily_sales, weekly_revenue, revenue_report\n\ndef test_revenue_report_chain():\n    """\uc804\uccb4 \ub9e4\ucd9c \ub9ac\ud3ec\ud2b8 \ud30c\uc774\ud504\ub77c\uc778 \ud14c\uc2a4\ud2b8"""\n    # \ubaa8\ub4e0 \uc758\uc874\uc131\uc744 \ud3ec\ud568\ud558\uc5ec \uc2e4\ud589\n    result = materialize([daily_sales, weekly_revenue, revenue_report])\n\n    assert result.success\n\n    # \uac01 \ub2e8\uacc4\uc758 \uacb0\uacfc \uac80\uc99d\n    sales_data = result.output_for_node("daily_sales")\n    assert len(sales_data) == 7\n\n    total_rev = result.output_for_node("weekly_revenue")\n    assert total_rev == 7800  # 1000+1200+800+1500+1100+1300+900\n\n    report = result.output_for_node("revenue_report")\n    assert report["total_revenue"] == 7800\n    assert report["daily_average"] == 7800 / 7\n    assert report["max_daily"] == 1500\n    assert report["min_daily"] == 800\n\ndef test_weekly_revenue_calculation():\n    """\uc8fc\uac04 \ub9e4\ucd9c \uacc4\uc0b0 \ub85c\uc9c1\ub9cc \ud14c\uc2a4\ud2b8"""\n    result = materialize([daily_sales, weekly_revenue])\n\n    assert result.success\n\n    total = result.output_for_node("weekly_revenue")\n    assert isinstance(total, (int, float))\n    assert total > 0\n'})}),"\n",(0,r.jsx)(n.h3,{id:"723-asset-with-resources-\ud14c\uc2a4\ud2b8",children:"7.2.3 Asset with Resources \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# database_assets.py\nfrom dagster import asset, ConfigurableResource\nimport pandas as pd\nfrom typing import List\n\nclass DatabaseConnection(ConfigurableResource):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ub9ac\uc18c\uc2a4"""\n    connection_string: str\n\n    def query(self, sql: str) -> pd.DataFrame:\n        """SQL \ucffc\ub9ac \uc2e4\ud589"""\n        # \uc2e4\uc81c \uad6c\ud604\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0\n        raise NotImplementedError("\uc2e4\uc81c DB \uc5f0\uacb0 \ud544\uc694")\n\n    def insert(self, table: str, data: pd.DataFrame) -> int:\n        """\ub370\uc774\ud130 \uc0bd\uc785"""\n        raise NotImplementedError("\uc2e4\uc81c DB \uc5f0\uacb0 \ud544\uc694")\n\n@asset\ndef customers_from_db(database: DatabaseConnection) -> pd.DataFrame:\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uace0\uac1d \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4."""\n    return database.query("SELECT * FROM customers WHERE active = true")\n\n@asset\ndef customer_segments(customers_from_db: pd.DataFrame) -> pd.DataFrame:\n    """\uace0\uac1d\uc744 \uc138\uadf8\uba3c\ud2b8\ub85c \ubd84\ub958\ud569\ub2c8\ub2e4."""\n    df = customers_from_db.copy()\n\n    # \uac04\ub2e8\ud55c \uc138\uadf8\uba3c\ud2b8 \ub85c\uc9c1\n    conditions = [\n        df["total_spent"] >= 10000,\n        (df["total_spent"] >= 1000) & (df["total_spent"] < 10000),\n        df["total_spent"] < 1000\n    ]\n    choices = ["Premium", "Standard", "Basic"]\n    df["segment"] = pd.Series(\n        [choices[i] for i in range(len(df))\n         for j, cond in enumerate(conditions) if cond.iloc[i]]\n    )\n\n    return df\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_database_assets.py\nfrom dagster import materialize, DagsterInstance\nfrom database_assets import (\n    DatabaseConnection,\n    customers_from_db,\n    customer_segments\n)\nimport pandas as pd\n\nclass MockDatabaseConnection(DatabaseConnection):\n    """\ud14c\uc2a4\ud2b8\uc6a9 Mock \ub370\uc774\ud130\ubca0\uc774\uc2a4"""\n\n    def query(self, sql: str) -> pd.DataFrame:\n        """Mock \ub370\uc774\ud130 \ubc18\ud658"""\n        return pd.DataFrame({\n            "customer_id": [1, 2, 3, 4],\n            "name": ["Alice", "Bob", "Charlie", "David"],\n            "total_spent": [15000, 5000, 500, 12000]\n        })\n\n    def insert(self, table: str, data: pd.DataFrame) -> int:\n        """Mock \uc0bd\uc785 (\uc2e4\uc81c\ub85c\ub294 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uc74c)"""\n        return len(data)\n\ndef test_customers_from_db_with_mock():\n    """Mock \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud2b8"""\n    # Mock \ub9ac\uc18c\uc2a4 \uc0dd\uc131\n    mock_db = MockDatabaseConnection(connection_string="mock://test")\n\n    # Asset \uc2e4\ud589 \uc2dc Mock \ub9ac\uc18c\uc2a4 \uc81c\uacf5\n    result = materialize(\n        [customers_from_db],\n        resources={"database": mock_db}\n    )\n\n    assert result.success\n\n    customers = result.output_for_node("customers_from_db")\n    assert len(customers) == 4\n    assert "customer_id" in customers.columns\n    assert "total_spent" in customers.columns\n\ndef test_customer_segments_logic():\n    """\uc138\uadf8\uba3c\ud2b8 \ubd84\ub958 \ub85c\uc9c1 \ud14c\uc2a4\ud2b8"""\n    mock_db = MockDatabaseConnection(connection_string="mock://test")\n\n    result = materialize(\n        [customers_from_db, customer_segments],\n        resources={"database": mock_db}\n    )\n\n    assert result.success\n\n    segments = result.output_for_node("customer_segments")\n\n    # \uc138\uadf8\uba3c\ud2b8 \ubd84\ub958 \uac80\uc99d\n    premium = segments[segments["segment"] == "Premium"]\n    standard = segments[segments["segment"] == "Standard"]\n    basic = segments[segments["segment"] == "Basic"]\n\n    assert len(premium) == 2  # Alice(15000), David(12000)\n    assert len(standard) == 1  # Bob(5000)\n    assert len(basic) == 1  # Charlie(500)\n\n    # Premium \uace0\uac1d\uc774 \uc2e4\uc81c\ub85c 10000 \uc774\uc0c1\uc778\uc9c0 \ud655\uc778\n    assert all(premium["total_spent"] >= 10000)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"73-op-\ud14c\uc2a4\ud2b8",children:"7.3 Op \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"731-\uae30\ubcf8-op-\ud14c\uc2a4\ud2b8",children:"7.3.1 \uae30\ubcf8 Op \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# my_ops.py\nfrom dagster import op, In, Out\nimport pandas as pd\n\n@op\ndef load_csv(context, file_path: str) -> pd.DataFrame:\n    """CSV \ud30c\uc77c\uc744 \ub85c\ub4dc\ud569\ub2c8\ub2e4."""\n    context.log.info(f"Loading CSV from {file_path}")\n    return pd.read_csv(file_path)\n\n@op(\n    ins={"df": In(pd.DataFrame)},\n    out=Out(pd.DataFrame)\n)\ndef clean_data(context, df: pd.DataFrame) -> pd.DataFrame:\n    """\ub370\uc774\ud130\ub97c \uc815\uc81c\ud569\ub2c8\ub2e4."""\n    context.log.info(f"Cleaning {len(df)} rows")\n\n    # \uacb0\uce21\uce58 \uc81c\uac70\n    cleaned = df.dropna()\n\n    # \uc911\ubcf5 \uc81c\uac70\n    cleaned = cleaned.drop_duplicates()\n\n    context.log.info(f"After cleaning: {len(cleaned)} rows")\n    return cleaned\n\n@op(\n    ins={"df": In(pd.DataFrame)},\n    out=Out(dict)\n)\ndef calculate_stats(df: pd.DataFrame) -> dict:\n    """\ud1b5\uacc4\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4."""\n    return {\n        "row_count": len(df),\n        "column_count": len(df.columns),\n        "numeric_columns": df.select_dtypes(include=[\'number\']).columns.tolist()\n    }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_my_ops.py\nfrom dagster import build_op_context\nfrom my_ops import load_csv, clean_data, calculate_stats\nimport pandas as pd\nimport tempfile\nimport os\n\ndef test_clean_data():\n    """clean_data op \ub2e8\uc704 \ud14c\uc2a4\ud2b8"""\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131\n    test_df = pd.DataFrame({\n        "a": [1, 2, None, 4, 2],  # \uacb0\uce21\uce58\uc640 \uc911\ubcf5 \ud3ec\ud568\n        "b": ["x", "y", "z", "w", "y"]\n    })\n\n    # Op \ucee8\ud14d\uc2a4\ud2b8 \uc0dd\uc131\n    context = build_op_context()\n\n    # Op \uc2e4\ud589\n    result = clean_data(context, test_df)\n\n    # \uacb0\uacfc \uac80\uc99d\n    assert len(result) == 3  # \uacb0\uce21\uce58 1\uac1c, \uc911\ubcf5 1\uac1c \uc81c\uac70\ub428\n    assert result["a"].isna().sum() == 0  # \uacb0\uce21\uce58 \uc5c6\uc74c\n    assert len(result) == len(result.drop_duplicates())  # \uc911\ubcf5 \uc5c6\uc74c\n\ndef test_calculate_stats():\n    """calculate_stats op \ud14c\uc2a4\ud2b8"""\n    test_df = pd.DataFrame({\n        "number1": [1, 2, 3],\n        "number2": [4, 5, 6],\n        "text": ["a", "b", "c"]\n    })\n\n    result = calculate_stats(test_df)\n\n    assert result["row_count"] == 3\n    assert result["column_count"] == 3\n    assert set(result["numeric_columns"]) == {"number1", "number2"}\n\ndef test_load_csv():\n    """load_csv op \ud14c\uc2a4\ud2b8 (\ud30c\uc77c I/O \ud3ec\ud568)"""\n    # \uc784\uc2dc CSV \ud30c\uc77c \uc0dd\uc131\n    with tempfile.NamedTemporaryFile(mode=\'w\', delete=False, suffix=\'.csv\') as f:\n        f.write("col1,col2\\n")\n        f.write("1,2\\n")\n        f.write("3,4\\n")\n        temp_path = f.name\n\n    try:\n        context = build_op_context()\n        result = load_csv(context, temp_path)\n\n        assert len(result) == 2\n        assert list(result.columns) == ["col1", "col2"]\n        assert result["col1"].tolist() == [1, 3]\n    finally:\n        # \uc784\uc2dc \ud30c\uc77c \uc815\ub9ac\n        os.unlink(temp_path)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"732-op-configuration-\ud14c\uc2a4\ud2b8",children:"7.3.2 Op Configuration \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# configurable_ops.py\nfrom dagster import op, Config\nimport pandas as pd\nfrom typing import List\n\nclass FilterConfig(Config):\n    """\ud544\ud130\ub9c1 \uc124\uc815"""\n    min_value: float = 0.0\n    max_value: float = 100.0\n    columns_to_check: List[str] = ["value"]\n\n@op\ndef filter_outliers(config: FilterConfig, df: pd.DataFrame) -> pd.DataFrame:\n    """\uc124\uc815\uc5d0 \ub530\ub77c \uc774\uc0c1\uce58\ub97c \ud544\ud130\ub9c1\ud569\ub2c8\ub2e4."""\n    result = df.copy()\n\n    for col in config.columns_to_check:\n        if col in result.columns:\n            result = result[\n                (result[col] >= config.min_value) &\n                (result[col] <= config.max_value)\n            ]\n\n    return result\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_configurable_ops.py\nfrom dagster import build_op_context\nfrom configurable_ops import FilterConfig, filter_outliers\nimport pandas as pd\n\ndef test_filter_outliers_with_config():\n    """\uc124\uc815\uc744 \uc0ac\uc6a9\ud55c \ud544\ud130\ub9c1 \ud14c\uc2a4\ud2b8"""\n    test_df = pd.DataFrame({\n        "value": [1, 50, 99, 150, -10, 75]\n    })\n\n    # \uc124\uc815 \uc0dd\uc131\n    config = FilterConfig(\n        min_value=0.0,\n        max_value=100.0,\n        columns_to_check=["value"]\n    )\n\n    # Op \uc2e4\ud589\n    result = filter_outliers(config, test_df)\n\n    # 0~100 \ubc94\uc704\uc758 \uac12\ub9cc \ub0a8\uc544\uc57c \ud568\n    assert len(result) == 4  # 1, 50, 99, 75\n    assert all(result["value"] >= 0)\n    assert all(result["value"] <= 100)\n\ndef test_filter_outliers_multiple_columns():\n    """\uc5ec\ub7ec \uceec\ub7fc \ud544\ud130\ub9c1 \ud14c\uc2a4\ud2b8"""\n    test_df = pd.DataFrame({\n        "value1": [10, 20, 150],\n        "value2": [5, 15, 25]\n    })\n\n    config = FilterConfig(\n        min_value=0.0,\n        max_value=100.0,\n        columns_to_check=["value1", "value2"]\n    )\n\n    result = filter_outliers(config, test_df)\n\n    # value1\uc774 150\uc778 \ud589\uc774 \uc81c\uac70\ub418\uc5b4\uc57c \ud568\n    assert len(result) == 2\n    assert result["value1"].tolist() == [10, 20]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"733-job-\ud14c\uc2a4\ud2b8",children:"7.3.3 Job \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# my_jobs.py\nfrom dagster import job, op\nimport pandas as pd\n\n@op\ndef extract_data() -> pd.DataFrame:\n    """\ub370\uc774\ud130 \ucd94\ucd9c"""\n    return pd.DataFrame({"id": [1, 2, 3], "value": [10, 20, 30]})\n\n@op\ndef transform_data(data: pd.DataFrame) -> pd.DataFrame:\n    """\ub370\uc774\ud130 \ubcc0\ud658"""\n    data["value_doubled"] = data["value"] * 2\n    return data\n\n@op\ndef load_data(data: pd.DataFrame) -> int:\n    """\ub370\uc774\ud130 \ub85c\ub4dc (\uc800\uc7a5)"""\n    return len(data)\n\n@job\ndef etl_pipeline():\n    """ETL \ud30c\uc774\ud504\ub77c\uc778"""\n    raw = extract_data()\n    transformed = transform_data(raw)\n    load_data(transformed)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_my_jobs.py\nfrom dagster import DagsterInstance\nfrom my_jobs import etl_pipeline\n\ndef test_etl_pipeline_execution():\n    """\uc804\uccb4 ETL \ud30c\uc774\ud504\ub77c\uc778 \ud14c\uc2a4\ud2b8"""\n    # Job \uc2e4\ud589\n    result = etl_pipeline.execute_in_process()\n\n    # \uc131\uacf5 \uc5ec\ubd80 \ud655\uc778\n    assert result.success\n\n    # \uac01 Op\uc758 \uacb0\uacfc \ud655\uc778\n    extract_result = result.output_for_node("extract_data")\n    assert len(extract_result) == 3\n\n    transform_result = result.output_for_node("transform_data")\n    assert "value_doubled" in transform_result.columns\n    assert transform_result["value_doubled"].tolist() == [20, 40, 60]\n\n    load_result = result.output_for_node("load_data")\n    assert load_result == 3\n\ndef test_etl_pipeline_with_instance():\n    """\ud2b9\uc815 \uc778\uc2a4\ud134\uc2a4\uc5d0\uc11c \ud30c\uc774\ud504\ub77c\uc778 \ud14c\uc2a4\ud2b8"""\n    instance = DagsterInstance.ephemeral()\n\n    result = etl_pipeline.execute_in_process(instance=instance)\n\n    assert result.success\n    assert result.dagster_run.status.value == "SUCCESS"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"74-resource-mocking",children:"7.4 Resource Mocking"}),"\n",(0,r.jsx)(n.h3,{id:"741-resource-mock-\ud328\ud134",children:"7.4.1 Resource Mock \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# resources.py\nfrom dagster import ConfigurableResource\nimport requests\nfrom typing import Dict, Any\n\nclass APIClient(ConfigurableResource):\n    """\uc678\ubd80 API \ud074\ub77c\uc774\uc5b8\ud2b8"""\n    base_url: str\n    api_key: str\n\n    def get_user(self, user_id: int) -> Dict[str, Any]:\n        """\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc870\ud68c"""\n        response = requests.get(\n            f"{self.base_url}/users/{user_id}",\n            headers={"Authorization": f"Bearer {self.api_key}"}\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def create_order(self, order_data: Dict[str, Any]) -> Dict[str, Any]:\n        """\uc8fc\ubb38 \uc0dd\uc131"""\n        response = requests.post(\n            f"{self.base_url}/orders",\n            json=order_data,\n            headers={"Authorization": f"Bearer {self.api_key}"}\n        )\n        response.raise_for_status()\n        return response.json()\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_resources.py\nfrom dagster import ConfigurableResource, asset, materialize\nfrom resources import APIClient\nfrom typing import Dict, Any\n\nclass MockAPIClient(APIClient):\n    """\ud14c\uc2a4\ud2b8\uc6a9 Mock API \ud074\ub77c\uc774\uc5b8\ud2b8"""\n\n    def __init__(self, **kwargs):\n        super().__init__(base_url="http://mock", api_key="mock_key")\n        self.call_history = []\n\n    def get_user(self, user_id: int) -> Dict[str, Any]:\n        """Mock \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ubc18\ud658"""\n        self.call_history.append(("get_user", user_id))\n        return {\n            "id": user_id,\n            "name": f"User {user_id}",\n            "email": f"user{user_id}@example.com"\n        }\n\n    def create_order(self, order_data: Dict[str, Any]) -> Dict[str, Any]:\n        """Mock \uc8fc\ubb38 \uc0dd\uc131"""\n        self.call_history.append(("create_order", order_data))\n        return {\n            "order_id": 12345,\n            "status": "created",\n            **order_data\n        }\n\n@asset\ndef user_orders(api: APIClient) -> Dict[str, Any]:\n    """\uc0ac\uc6a9\uc790\uc758 \uc8fc\ubb38\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4."""\n    user = api.get_user(user_id=1)\n\n    order = api.create_order({\n        "user_id": user["id"],\n        "items": ["item1", "item2"],\n        "total": 100.0\n    })\n\n    return {\n        "user": user,\n        "order": order\n    }\n\ndef test_user_orders_with_mock():\n    """Mock API\ub97c \uc0ac\uc6a9\ud55c Asset \ud14c\uc2a4\ud2b8"""\n    mock_api = MockAPIClient()\n\n    result = materialize(\n        [user_orders],\n        resources={"api": mock_api}\n    )\n\n    assert result.success\n\n    # \uacb0\uacfc \uac80\uc99d\n    output = result.output_for_node("user_orders")\n    assert output["user"]["id"] == 1\n    assert output["order"]["order_id"] == 12345\n\n    # API \ud638\ucd9c \uac80\uc99d\n    assert len(mock_api.call_history) == 2\n    assert mock_api.call_history[0] == ("get_user", 1)\n    assert mock_api.call_history[1][0] == "create_order"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"742-pytest-mock\uc744-\uc0ac\uc6a9\ud55c-mocking",children:"7.4.2 pytest-mock\uc744 \uc0ac\uc6a9\ud55c Mocking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_with_pytest_mock.py\nimport pytest\nfrom unittest.mock import MagicMock, patch\nfrom dagster import asset, materialize\nimport pandas as pd\n\n@asset\ndef fetch_external_data(context) -> pd.DataFrame:\n    """\uc678\ubd80 \ub370\uc774\ud130 \uc18c\uc2a4\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4."""\n    import requests\n\n    response = requests.get("https://api.example.com/data")\n    response.raise_for_status()\n\n    return pd.DataFrame(response.json())\n\ndef test_fetch_external_data_with_mock(mocker):\n    """pytest-mock\uc744 \uc0ac\uc6a9\ud55c \uc678\ubd80 API \ubaa8\ud0b9"""\n    # requests.get\uc744 mock\n    mock_response = MagicMock()\n    mock_response.json.return_value = [\n        {"id": 1, "value": 100},\n        {"id": 2, "value": 200}\n    ]\n    mock_response.raise_for_status.return_value = None\n\n    mocker.patch("requests.get", return_value=mock_response)\n\n    # Asset \uc2e4\ud589\n    result = materialize([fetch_external_data])\n\n    assert result.success\n\n    output = result.output_for_node("fetch_external_data")\n    assert len(output) == 2\n    assert output["id"].tolist() == [1, 2]\n    assert output["value"].tolist() == [100, 200]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"743-database-mock",children:"7.4.3 Database Mock"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_database_mock.py\nfrom dagster import ConfigurableResource, asset, materialize\nimport pandas as pd\nfrom typing import List, Dict, Any\n\nclass DatabaseResource(ConfigurableResource):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9ac\uc18c\uc2a4"""\n    connection_string: str\n\n    def execute_query(self, query: str) -> pd.DataFrame:\n        """SQL \ucffc\ub9ac \uc2e4\ud589"""\n        raise NotImplementedError()\n\n    def insert_records(self, table: str, records: List[Dict]) -> int:\n        """\ub808\ucf54\ub4dc \uc0bd\uc785"""\n        raise NotImplementedError()\n\nclass InMemoryDatabase(DatabaseResource):\n    """\uc778\uba54\ubaa8\ub9ac \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ubca0\uc774\uc2a4"""\n\n    def __init__(self, **kwargs):\n        super().__init__(connection_string="memory://test")\n        self.tables: Dict[str, pd.DataFrame] = {\n            "users": pd.DataFrame({\n                "id": [1, 2, 3],\n                "name": ["Alice", "Bob", "Charlie"]\n            }),\n            "orders": pd.DataFrame({\n                "order_id": [101, 102],\n                "user_id": [1, 2],\n                "amount": [50.0, 75.0]\n            })\n        }\n\n    def execute_query(self, query: str) -> pd.DataFrame:\n        """\uac04\ub2e8\ud55c \ucffc\ub9ac \ud30c\uc2f1 \ubc0f \uc2e4\ud589"""\n        # \uc2e4\uc81c\ub85c\ub294 SQL \ud30c\uc11c\ub97c \uc0ac\uc6a9\ud558\uaca0\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \ub2e8\uc21c\ud654\n        if "FROM users" in query.upper():\n            return self.tables["users"].copy()\n        elif "FROM orders" in query.upper():\n            return self.tables["orders"].copy()\n        else:\n            return pd.DataFrame()\n\n    def insert_records(self, table: str, records: List[Dict]) -> int:\n        """\ub808\ucf54\ub4dc\ub97c \ud14c\uc774\ube14\uc5d0 \ucd94\uac00"""\n        if table in self.tables:\n            new_df = pd.DataFrame(records)\n            self.tables[table] = pd.concat(\n                [self.tables[table], new_df],\n                ignore_index=True\n            )\n            return len(records)\n        return 0\n\n@asset\ndef high_value_orders(db: DatabaseResource) -> pd.DataFrame:\n    """\uace0\uc561 \uc8fc\ubb38 \uc870\ud68c"""\n    orders = db.execute_query("SELECT * FROM orders WHERE amount > 60")\n    return orders\n\ndef test_high_value_orders():\n    """\uc778\uba54\ubaa8\ub9ac DB\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud2b8"""\n    mock_db = InMemoryDatabase()\n\n    result = materialize(\n        [high_value_orders],\n        resources={"db": mock_db}\n    )\n\n    assert result.success\n\n    output = result.output_for_node("high_value_orders")\n    # amount > 60\uc778 \uc8fc\ubb38\ub9cc (order_id 102, amount 75.0)\n    assert len(output) == 1\n    assert output["amount"].iloc[0] == 75.0\n'})}),"\n",(0,r.jsx)(n.h2,{id:"75-partition-\ud14c\uc2a4\ud2b8",children:"7.5 Partition \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"751-time-based-partition-\ud14c\uc2a4\ud2b8",children:"7.5.1 Time-based Partition \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# partitioned_assets.py\nfrom dagster import (\n    asset,\n    DailyPartitionsDefinition,\n    AssetExecutionContext\n)\nimport pandas as pd\nfrom datetime import datetime\n\ndaily_partitions = DailyPartitionsDefinition(start_date="2024-01-01")\n\n@asset(partitions_def=daily_partitions)\ndef daily_sales(context: AssetExecutionContext) -> pd.DataFrame:\n    """\uc77c\ubcc4 \ub9e4\ucd9c \ub370\uc774\ud130"""\n    partition_date = context.partition_key\n\n    # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ud574\ub2f9 \ub0a0\uc9dc \ub370\uc774\ud130 \uc870\ud68c\n    return pd.DataFrame({\n        "date": [partition_date],\n        "revenue": [1000.0],\n        "transactions": [50]\n    })\n\n@asset(partitions_def=daily_partitions)\ndef daily_metrics(\n    context: AssetExecutionContext,\n    daily_sales: pd.DataFrame\n) -> dict:\n    """\uc77c\ubcc4 \uc9c0\ud45c \uacc4\uc0b0"""\n    return {\n        "date": context.partition_key,\n        "total_revenue": daily_sales["revenue"].sum(),\n        "avg_transaction": daily_sales["revenue"].sum() / daily_sales["transactions"].sum()\n    }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_partitioned_assets.py\nfrom dagster import materialize, build_asset_context\nfrom partitioned_assets import daily_sales, daily_metrics, daily_partitions\n\ndef test_daily_sales_single_partition():\n    """\ub2e8\uc77c \ud30c\ud2f0\uc158 \ud14c\uc2a4\ud2b8"""\n    partition_key = "2024-01-15"\n\n    # \ud2b9\uc815 \ud30c\ud2f0\uc158\uc73c\ub85c \ucee8\ud14d\uc2a4\ud2b8 \uc0dd\uc131\n    context = build_asset_context(partition_key=partition_key)\n\n    # Asset \uc2e4\ud589\n    result = daily_sales(context)\n\n    assert len(result) == 1\n    assert result["date"].iloc[0] == partition_key\n    assert result["revenue"].iloc[0] == 1000.0\n\ndef test_daily_metrics_partition():\n    """\ud30c\ud2f0\uc158\ubcc4 \uc9c0\ud45c \uacc4\uc0b0 \ud14c\uc2a4\ud2b8"""\n    partition_key = "2024-01-20"\n\n    result = materialize(\n        [daily_sales, daily_metrics],\n        partition_key=partition_key\n    )\n\n    assert result.success\n\n    metrics = result.output_for_node("daily_metrics")\n    assert metrics["date"] == partition_key\n    assert metrics["total_revenue"] == 1000.0\n    assert metrics["avg_transaction"] == 20.0  # 1000 / 50\n\ndef test_multiple_partitions():\n    """\uc5ec\ub7ec \ud30c\ud2f0\uc158 \ud14c\uc2a4\ud2b8"""\n    partition_keys = ["2024-01-01", "2024-01-02", "2024-01-03"]\n\n    for partition_key in partition_keys:\n        result = materialize(\n            [daily_sales, daily_metrics],\n            partition_key=partition_key\n        )\n\n        assert result.success\n\n        sales = result.output_for_node("daily_sales")\n        assert sales["date"].iloc[0] == partition_key\n'})}),"\n",(0,r.jsx)(n.h3,{id:"752-static-partition-\ud14c\uc2a4\ud2b8",children:"7.5.2 Static Partition \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# static_partitioned_assets.py\nfrom dagster import (\n    asset,\n    StaticPartitionsDefinition,\n    AssetExecutionContext\n)\nimport pandas as pd\n\nregions = StaticPartitionsDefinition(["us-east", "us-west", "eu-central", "ap-south"])\n\n@asset(partitions_def=regions)\ndef regional_data(context: AssetExecutionContext) -> pd.DataFrame:\n    """\uc9c0\uc5ed\ubcc4 \ub370\uc774\ud130"""\n    region = context.partition_key\n\n    # Mock \ub370\uc774\ud130 (\uc2e4\uc81c\ub85c\ub294 \uc9c0\uc5ed\ubcc4 \ub370\uc774\ud130 \uc18c\uc2a4\uc5d0\uc11c \uc870\ud68c)\n    data_map = {\n        "us-east": {"users": 10000, "revenue": 50000},\n        "us-west": {"users": 8000, "revenue": 40000},\n        "eu-central": {"users": 12000, "revenue": 60000},\n        "ap-south": {"users": 5000, "revenue": 25000}\n    }\n\n    stats = data_map.get(region, {"users": 0, "revenue": 0})\n\n    return pd.DataFrame([{\n        "region": region,\n        **stats\n    }])\n\n@asset(partitions_def=regions)\ndef regional_metrics(\n    context: AssetExecutionContext,\n    regional_data: pd.DataFrame\n) -> dict:\n    """\uc9c0\uc5ed\ubcc4 \uc9c0\ud45c"""\n    region = context.partition_key\n\n    return {\n        "region": region,\n        "arpu": regional_data["revenue"].iloc[0] / regional_data["users"].iloc[0]\n    }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_static_partitioned_assets.py\nfrom dagster import materialize\nfrom static_partitioned_assets import regional_data, regional_metrics\n\ndef test_all_regions():\n    """\ubaa8\ub4e0 \uc9c0\uc5ed\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8"""\n    regions = ["us-east", "us-west", "eu-central", "ap-south"]\n\n    for region in regions:\n        result = materialize(\n            [regional_data, regional_metrics],\n            partition_key=region\n        )\n\n        assert result.success\n\n        data = result.output_for_node("regional_data")\n        assert data["region"].iloc[0] == region\n        assert data["users"].iloc[0] > 0\n\n        metrics = result.output_for_node("regional_metrics")\n        assert metrics["region"] == region\n        assert metrics["arpu"] > 0\n\ndef test_specific_region():\n    """\ud2b9\uc815 \uc9c0\uc5ed \ud14c\uc2a4\ud2b8"""\n    result = materialize(\n        [regional_data, regional_metrics],\n        partition_key="eu-central"\n    )\n\n    assert result.success\n\n    data = result.output_for_node("regional_data")\n    assert data["users"].iloc[0] == 12000\n    assert data["revenue"].iloc[0] == 60000\n\n    metrics = result.output_for_node("regional_metrics")\n    assert metrics["arpu"] == 5.0  # 60000 / 12000\n'})}),"\n",(0,r.jsx)(n.h2,{id:"76-\uc2e4\uc2b5-\ud504\ub85c\uc81d\ud2b8",children:"7.6 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"761-e-commerce-analytics-\ud14c\uc2a4\ud2b8-\uc2a4\uc704\ud2b8",children:"7.6.1 E-commerce Analytics \ud14c\uc2a4\ud2b8 \uc2a4\uc704\ud2b8"}),"\n",(0,r.jsx)(n.p,{children:"\uc885\ud569\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc2a4\uc704\ud2b8\ub97c \uc791\uc131\ud574\ubd05\uc2dc\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# ecommerce_assets.py\nfrom dagster import (\n    asset,\n    AssetExecutionContext,\n    DailyPartitionsDefinition,\n    ConfigurableResource\n)\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import List, Dict, Any\n\n# Partitions\ndaily_partitions = DailyPartitionsDefinition(start_date="2024-01-01")\n\n# Resources\nclass SalesDatabase(ConfigurableResource):\n    """\ud310\ub9e4 \ub370\uc774\ud130\ubca0\uc774\uc2a4"""\n    connection_string: str\n\n    def get_orders(self, date: str) -> pd.DataFrame:\n        """\uc8fc\ubb38 \ub370\uc774\ud130 \uc870\ud68c"""\n        raise NotImplementedError()\n\n    def get_products(self) -> pd.DataFrame:\n        """\uc0c1\ud488 \ub370\uc774\ud130 \uc870\ud68c"""\n        raise NotImplementedError()\n\n# Assets\n@asset(partitions_def=daily_partitions)\ndef daily_orders(\n    context: AssetExecutionContext,\n    db: SalesDatabase\n) -> pd.DataFrame:\n    """\uc77c\ubcc4 \uc8fc\ubb38 \ub370\uc774\ud130"""\n    date = context.partition_key\n    context.log.info(f"Fetching orders for {date}")\n\n    orders = db.get_orders(date)\n    return orders\n\n@asset\ndef products(db: SalesDatabase) -> pd.DataFrame:\n    """\uc0c1\ud488 \ub9c8\uc2a4\ud130 \ub370\uc774\ud130"""\n    return db.get_products()\n\n@asset(partitions_def=daily_partitions)\ndef daily_revenue(\n    context: AssetExecutionContext,\n    daily_orders: pd.DataFrame,\n    products: pd.DataFrame\n) -> pd.DataFrame:\n    """\uc77c\ubcc4 \ub9e4\ucd9c \ubd84\uc11d"""\n    date = context.partition_key\n\n    # \uc8fc\ubb38\uacfc \uc0c1\ud488 \uc870\uc778\n    merged = daily_orders.merge(\n        products,\n        on="product_id",\n        how="left"\n    )\n\n    # \uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c \uc9d1\uacc4\n    revenue_by_category = merged.groupby("category").agg({\n        "price": "sum",\n        "order_id": "count"\n    }).reset_index()\n\n    revenue_by_category.columns = ["category", "revenue", "order_count"]\n    revenue_by_category["date"] = date\n\n    return revenue_by_category\n\n@asset(partitions_def=daily_partitions)\ndef daily_kpis(\n    context: AssetExecutionContext,\n    daily_revenue: pd.DataFrame\n) -> Dict[str, Any]:\n    """\uc77c\ubcc4 KPI"""\n    return {\n        "date": context.partition_key,\n        "total_revenue": daily_revenue["revenue"].sum(),\n        "total_orders": daily_revenue["order_count"].sum(),\n        "categories_sold": len(daily_revenue),\n        "avg_revenue_per_category": daily_revenue["revenue"].mean()\n    }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_ecommerce_assets.py\nimport pytest\nfrom dagster import materialize, build_asset_context\nfrom ecommerce_assets import (\n    SalesDatabase,\n    daily_orders,\n    products,\n    daily_revenue,\n    daily_kpis\n)\nimport pandas as pd\n\nclass MockSalesDatabase(SalesDatabase):\n    """\ud14c\uc2a4\ud2b8\uc6a9 Mock \ub370\uc774\ud130\ubca0\uc774\uc2a4"""\n\n    def __init__(self):\n        super().__init__(connection_string="mock://test")\n\n        # Mock \ub370\uc774\ud130 \uc900\ube44\n        self._orders = {\n            "2024-01-15": pd.DataFrame({\n                "order_id": [1, 2, 3, 4],\n                "product_id": [101, 102, 101, 103],\n                "quantity": [2, 1, 3, 1]\n            }),\n            "2024-01-16": pd.DataFrame({\n                "order_id": [5, 6],\n                "product_id": [102, 103],\n                "quantity": [1, 2]\n            })\n        }\n\n        self._products = pd.DataFrame({\n            "product_id": [101, 102, 103],\n            "product_name": ["Laptop", "Mouse", "Keyboard"],\n            "category": ["Electronics", "Accessories", "Accessories"],\n            "price": [1000.0, 50.0, 100.0]\n        })\n\n    def get_orders(self, date: str) -> pd.DataFrame:\n        return self._orders.get(date, pd.DataFrame()).copy()\n\n    def get_products(self) -> pd.DataFrame:\n        return self._products.copy()\n\n@pytest.fixture\ndef mock_db():\n    """Mock \ub370\uc774\ud130\ubca0\uc774\uc2a4 fixture"""\n    return MockSalesDatabase()\n\ndef test_products(mock_db):\n    """\uc0c1\ud488 \ub370\uc774\ud130 \ub85c\ub4dc \ud14c\uc2a4\ud2b8"""\n    result = materialize(\n        [products],\n        resources={"db": mock_db}\n    )\n\n    assert result.success\n\n    products_data = result.output_for_node("products")\n    assert len(products_data) == 3\n    assert set(products_data["category"].unique()) == {"Electronics", "Accessories"}\n\ndef test_daily_orders(mock_db):\n    """\uc77c\ubcc4 \uc8fc\ubb38 \ub370\uc774\ud130 \ud14c\uc2a4\ud2b8"""\n    result = materialize(\n        [daily_orders],\n        resources={"db": mock_db},\n        partition_key="2024-01-15"\n    )\n\n    assert result.success\n\n    orders = result.output_for_node("daily_orders")\n    assert len(orders) == 4\n    assert set(orders["product_id"].unique()) == {101, 102, 103}\n\ndef test_daily_revenue_calculation(mock_db):\n    """\uc77c\ubcc4 \ub9e4\ucd9c \uacc4\uc0b0 \ud14c\uc2a4\ud2b8"""\n    result = materialize(\n        [daily_orders, products, daily_revenue],\n        resources={"db": mock_db},\n        partition_key="2024-01-15"\n    )\n\n    assert result.success\n\n    revenue = result.output_for_node("daily_revenue")\n\n    # \uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c \uac80\uc99d\n    electronics = revenue[revenue["category"] == "Electronics"]\n    accessories = revenue[revenue["category"] == "Accessories"]\n\n    # Electronics: 2*1000 + 3*1000 = 5000 (\uc8fc\ubb38 1, 3)\n    assert electronics["revenue"].iloc[0] == 5000.0\n    assert electronics["order_count"].iloc[0] == 2\n\n    # Accessories: 1*50 + 1*100 = 150 (\uc8fc\ubb38 2, 4)\n    assert accessories["revenue"].iloc[0] == 150.0\n    assert accessories["order_count"].iloc[0] == 2\n\ndef test_daily_kpis(mock_db):\n    """\uc77c\ubcc4 KPI \uacc4\uc0b0 \ud14c\uc2a4\ud2b8"""\n    result = materialize(\n        [daily_orders, products, daily_revenue, daily_kpis],\n        resources={"db": mock_db},\n        partition_key="2024-01-15"\n    )\n\n    assert result.success\n\n    kpis = result.output_for_node("daily_kpis")\n\n    assert kpis["date"] == "2024-01-15"\n    assert kpis["total_revenue"] == 5150.0  # 5000 + 150\n    assert kpis["total_orders"] == 4  # 2 + 2\n    assert kpis["categories_sold"] == 2\n    assert kpis["avg_revenue_per_category"] == 2575.0  # 5150 / 2\n\ndef test_different_date(mock_db):\n    """\ub2e4\ub978 \ub0a0\uc9dc\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8"""\n    result = materialize(\n        [daily_orders, products, daily_revenue, daily_kpis],\n        resources={"db": mock_db},\n        partition_key="2024-01-16"\n    )\n\n    assert result.success\n\n    orders = result.output_for_node("daily_orders")\n    assert len(orders) == 2\n\n    kpis = result.output_for_node("daily_kpis")\n    assert kpis["date"] == "2024-01-16"\n    # 1*50 + 2*100 = 250\n    assert kpis["total_revenue"] == 250.0\n\ndef test_empty_orders(mock_db):\n    """\uc8fc\ubb38\uc774 \uc5c6\ub294 \ub0a0\uc9dc \ud14c\uc2a4\ud2b8"""\n    result = materialize(\n        [daily_orders],\n        resources={"db": mock_db},\n        partition_key="2024-01-20"  # \ub370\uc774\ud130 \uc5c6\uc74c\n    )\n\n    assert result.success\n\n    orders = result.output_for_node("daily_orders")\n    assert len(orders) == 0\n'})}),"\n",(0,r.jsx)(n.h3,{id:"762-integration-\ud14c\uc2a4\ud2b8",children:"7.6.2 Integration \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_integration.py\nimport pytest\nfrom dagster import materialize, Definitions\nfrom ecommerce_assets import (\n    daily_orders,\n    products,\n    daily_revenue,\n    daily_kpis,\n    SalesDatabase\n)\nfrom test_ecommerce_assets import MockSalesDatabase\n\ndef test_full_pipeline_integration():\n    """\uc804\uccb4 \ud30c\uc774\ud504\ub77c\uc778 \ud1b5\ud569 \ud14c\uc2a4\ud2b8"""\n    mock_db = MockSalesDatabase()\n\n    # \uc804\uccb4 \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589\n    result = materialize(\n        [daily_orders, products, daily_revenue, daily_kpis],\n        resources={"db": mock_db},\n        partition_key="2024-01-15"\n    )\n\n    # \ubaa8\ub4e0 asset\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc2e4\ud589\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\n    assert result.success\n\n    # \uac01 asset\uc758 \ucd9c\ub825 \uac80\uc99d\n    assert result.output_for_node("daily_orders") is not None\n    assert result.output_for_node("products") is not None\n    assert result.output_for_node("daily_revenue") is not None\n    assert result.output_for_node("daily_kpis") is not None\n\ndef test_pipeline_definitions():\n    """Definitions \uac1d\uccb4 \ud14c\uc2a4\ud2b8"""\n    mock_db = MockSalesDatabase()\n\n    defs = Definitions(\n        assets=[daily_orders, products, daily_revenue, daily_kpis],\n        resources={"db": mock_db}\n    )\n\n    # Definitions\uc774 \uc62c\ubc14\ub974\uac8c \uad6c\uc131\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\n    assert len(defs.get_all_asset_specs()) == 4\n    assert "db" in defs.resources\n\n@pytest.mark.parametrize("partition_key,expected_orders", [\n    ("2024-01-15", 4),\n    ("2024-01-16", 2),\n    ("2024-01-17", 0),\n])\ndef test_parametrized_partitions(partition_key, expected_orders):\n    """Parametrized \ud14c\uc2a4\ud2b8\ub97c \uc0ac\uc6a9\ud55c \uc5ec\ub7ec \ud30c\ud2f0\uc158 \uac80\uc99d"""\n    mock_db = MockSalesDatabase()\n\n    result = materialize(\n        [daily_orders],\n        resources={"db": mock_db},\n        partition_key=partition_key\n    )\n\n    assert result.success\n    orders = result.output_for_node("daily_orders")\n    assert len(orders) == expected_orders\n'})}),"\n",(0,r.jsx)(n.h3,{id:"763-pytest-\uc124\uc815-\ubc0f-best-practices",children:"7.6.3 pytest \uc124\uc815 \ubc0f Best Practices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# conftest.py\n"""\npytest \uacf5\ud1b5 \uc124\uc815 \ubc0f fixtures\n"""\nimport pytest\nfrom dagster import DagsterInstance\nimport tempfile\nimport os\n\n@pytest.fixture(scope="session")\ndef dagster_instance():\n    """\ud14c\uc2a4\ud2b8\uc6a9 \uc784\uc2dc Dagster \uc778\uc2a4\ud134\uc2a4"""\n    with tempfile.TemporaryDirectory() as temp_dir:\n        instance = DagsterInstance.ephemeral(tempdir=temp_dir)\n        yield instance\n\n@pytest.fixture\ndef mock_db():\n    """\uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c Mock \ub370\uc774\ud130\ubca0\uc774\uc2a4"""\n    from test_ecommerce_assets import MockSalesDatabase\n    return MockSalesDatabase()\n\n@pytest.fixture\ndef sample_dataframe():\n    """\ud14c\uc2a4\ud2b8\uc6a9 \uc0d8\ud50c DataFrame"""\n    import pandas as pd\n    return pd.DataFrame({\n        "id": [1, 2, 3],\n        "value": [10, 20, 30],\n        "category": ["A", "B", "A"]\n    })\n\n# pytest \uc124\uc815\ndef pytest_configure(config):\n    """pytest \uc804\uc5ed \uc124\uc815"""\n    config.addinivalue_line(\n        "markers", "slow: marks tests as slow (deselect with \'-m \\"not slow\\"\')"\n    )\n    config.addinivalue_line(\n        "markers", "integration: marks tests as integration tests"\n    )\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"# pytest.ini\n[pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts =\n    -v\n    --tb=short\n    --strict-markers\n    --disable-warnings\nmarkers =\n    slow: slow running tests\n    integration: integration tests\n    unit: unit tests\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# tests/test_best_practices.py\n"""\n\ud14c\uc2a4\ud2b8 Best Practices \uc608\uc81c\n"""\nimport pytest\nfrom dagster import asset, materialize\nimport pandas as pd\n\n# 1. \uba85\ud655\ud55c \ud14c\uc2a4\ud2b8 \uc774\ub984\ndef test_asset_filters_adult_users_correctly():\n    """\uc88b\uc740 \uc608: \ud14c\uc2a4\ud2b8\uac00 \ubb34\uc5c7\uc744 \uac80\uc99d\ud558\ub294\uc9c0 \uba85\ud655"""\n    pass\n\ndef test_filter():\n    """\ub098\uc05c \uc608: \ub108\ubb34 \ubaa8\ud638\ud568"""\n    pass\n\n# 2. Arrange-Act-Assert \ud328\ud134\ndef test_data_transformation_with_aaa_pattern():\n    """AAA \ud328\ud134\uc744 \ub530\ub974\ub294 \ud14c\uc2a4\ud2b8"""\n    # Arrange: \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc900\ube44\n    input_df = pd.DataFrame({\n        "value": [1, 2, 3, 4, 5],\n        "category": ["A", "B", "A", "B", "A"]\n    })\n\n    # Act: \uc2e4\uc81c \uc791\uc5c5 \uc218\ud589\n    result = input_df.groupby("category")["value"].sum()\n\n    # Assert: \uacb0\uacfc \uac80\uc99d\n    assert result["A"] == 9  # 1 + 3 + 5\n    assert result["B"] == 6  # 2 + 4\n\n# 3. \ud558\ub098\uc758 \ud14c\uc2a4\ud2b8\ub294 \ud558\ub098\uc758 \uac83\ub9cc \uac80\uc99d\ndef test_only_revenue_calculation():\n    """\uc88b\uc740 \uc608: \ub9e4\ucd9c \uacc4\uc0b0\ub9cc \uac80\uc99d"""\n    orders = pd.DataFrame({"price": [10, 20, 30]})\n    total = orders["price"].sum()\n    assert total == 60\n\ndef test_everything_at_once():\n    """\ub098\uc05c \uc608: \ub108\ubb34 \ub9ce\uc740 \uac83\uc744 \ud55c \ubc88\uc5d0 \ud14c\uc2a4\ud2b8"""\n    # \ub370\uc774\ud130 \ub85c\ub4dc, \ubcc0\ud658, \uacc4\uc0b0, \uc800\uc7a5\uc744 \ubaa8\ub450 \ud14c\uc2a4\ud2b8\n    # \uc2e4\ud328 \uc2dc \uc5b4\ub290 \ubd80\ubd84\uc774 \ubb38\uc81c\uc778\uc9c0 \ud30c\uc545\ud558\uae30 \uc5b4\ub824\uc6c0\n    pass\n\n# 4. Parametrized \ud14c\uc2a4\ud2b8\ub85c \uc911\ubcf5 \uc81c\uac70\n@pytest.mark.parametrize("input_value,expected", [\n    (10, 20),\n    (5, 10),\n    (0, 0),\n    (-5, -10),\n])\ndef test_doubling_function(input_value, expected):\n    """\uc88b\uc740 \uc608: \uc5ec\ub7ec \ucf00\uc774\uc2a4\ub97c \uac04\uacb0\ud558\uac8c \ud14c\uc2a4\ud2b8"""\n    result = input_value * 2\n    assert result == expected\n\n# 5. \uc801\uc808\ud55c Fixture \uc0ac\uc6a9\n@pytest.fixture\ndef sample_orders():\n    """\uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130"""\n    return pd.DataFrame({\n        "order_id": [1, 2, 3],\n        "amount": [100, 200, 150]\n    })\n\ndef test_with_fixture(sample_orders):\n    """Fixture\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud2b8"""\n    assert len(sample_orders) == 3\n    assert sample_orders["amount"].sum() == 450\n\n# 6. \uc608\uc678 \ucc98\ub9ac \ud14c\uc2a4\ud2b8\ndef test_invalid_input_raises_error():\n    """\uc608\uc678\uac00 \uc62c\ubc14\ub974\uac8c \ubc1c\uc0dd\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8"""\n    with pytest.raises(ValueError, match="age must be positive"):\n        validate_age(-5)\n\ndef validate_age(age):\n    if age < 0:\n        raise ValueError("age must be positive")\n\n# 7. Mock\uc744 \uacfc\ub3c4\ud558\uac8c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uae30\ndef test_with_minimal_mocking(mock_db):\n    """\uc88b\uc740 \uc608: \ud544\uc694\ud55c \ubd80\ubd84\ub9cc Mock"""\n    # \uc678\ubd80 API\ub9cc Mock\ud558\uace0 \ub098\uba38\uc9c0 \ub85c\uc9c1\uc740 \uc2e4\uc81c\ub85c \uc2e4\ud589\n    pass\n\ndef test_with_excessive_mocking():\n    """\ub098\uc05c \uc608: \ubaa8\ub4e0 \uac83\uc744 Mock"""\n    # \ub108\ubb34 \ub9ce\uc740 Mock\uc73c\ub85c \uc2e4\uc81c \ub85c\uc9c1\uc774 \uac70\uc758 \ud14c\uc2a4\ud2b8\ub418\uc9c0 \uc54a\uc74c\n    pass\n'})}),"\n",(0,r.jsx)(n.h2,{id:"77-\uc694\uc57d",children:"7.7 \uc694\uc57d"}),"\n",(0,r.jsx)(n.p,{children:"\uc774 \uc7a5\uc5d0\uc11c\ub294 Dagster \ud30c\uc774\ud504\ub77c\uc778\uc758 \ud14c\uc2a4\ud2b8 \ubc29\ubc95\uc744 \ud559\uc2b5\ud588\uc2b5\ub2c8\ub2e4:"}),"\n",(0,r.jsx)(n.h3,{id:"\ud575\uc2ec-\uac1c\ub150",children:"\ud575\uc2ec \uac1c\ub150"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Asset \ud14c\uc2a4\ud2b8"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"materialize()"})," \ud568\uc218\ub85c Asset \uc2e4\ud589"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output_for_node()"}),"\ub85c \uacb0\uacfc \uac80\uc99d"]}),"\n",(0,r.jsx)(n.li,{children:"\uc758\uc874\uc131\uc774 \uc788\ub294 Asset\uc744 \ud568\uaed8 \ud14c\uc2a4\ud2b8"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Op \ud14c\uc2a4\ud2b8"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"build_op_context()"}),"\ub85c \ucee8\ud14d\uc2a4\ud2b8 \uc0dd\uc131"]}),"\n",(0,r.jsx)(n.li,{children:"Op\ub97c \uc77c\ubc18 \ud568\uc218\ucc98\ub7fc \ud638\ucd9c"}),"\n",(0,r.jsx)(n.li,{children:"Configuration \ud14c\uc2a4\ud2b8"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Resource Mocking"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Mock \ud074\ub798\uc2a4 \uc791\uc131"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"materialize(resources=...)"}),"\ub85c \uc8fc\uc785"]}),"\n",(0,r.jsx)(n.li,{children:"pytest-mock \ud65c\uc6a9"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Partition \ud14c\uc2a4\ud2b8"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"partition_key"})," \ud30c\ub77c\ubbf8\ud130 \uc0ac\uc6a9"]}),"\n",(0,r.jsx)(n.li,{children:"\uc5ec\ub7ec \ud30c\ud2f0\uc158\uc5d0 \ub300\ud55c \ubc18\ubcf5 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.li,{children:"Parametrized \ud14c\uc2a4\ud2b8 \ud65c\uc6a9"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc6b0\uc120"}),": \uac01 \ucef4\ud3ec\ub10c\ud2b8\ub97c \ub3c5\ub9bd\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud1b5\ud569 \ud14c\uc2a4\ud2b8 \ucd94\uac00"}),": \uc804\uccb4 \ud30c\uc774\ud504\ub77c\uc778 \ub3d9\uc791 \uac80\uc99d"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AAA \ud328\ud134"}),": Arrange-Act-Assert \uad6c\uc870 \ub530\ub974\uae30"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uba85\ud655\ud55c \uc774\ub984"}),": \ud14c\uc2a4\ud2b8\uac00 \ubb34\uc5c7\uc744 \uac80\uc99d\ud558\ub294\uc9c0 \uc774\ub984\uc5d0 \uba85\uc2dc"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc801\uc808\ud55c Mock"}),": \uc678\ubd80 \uc758\uc874\uc131\ub9cc Mock, \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc740 \uc2e4\uc81c\ub85c \uc2e4\ud589"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fixture \ud65c\uc6a9"}),": \uacf5\ud1b5 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc7ac\uc0ac\uc6a9"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsx)(n.p,{children:"\ud14c\uc2a4\ud2b8 \uc791\uc131 \ubc29\ubc95\uc744 \uc775\ud614\uc73c\ub2c8, \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 Dagster \ud30c\uc774\ud504\ub77c\uc778\uc744 \ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0 \ubc30\ud3ec\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);