"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2646],{2547:(n,e,l)=>{l.r(e),l.d(e,{assets:()=>t,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"pandas/examples","title":"8. \uc2e4\uc804 \uc608\uc81c","description":"\uc2e4\ubb34\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 pandas \ud65c\uc6a9 \uc0ac\ub840\ub97c \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/pandas/examples.md","sourceDirName":"pandas","slug":"/pandas/examples","permalink":"/tobias-docs/comp-2/docs/pandas/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pandas/examples.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"pandasSidebar","previous":{"title":"6. \uc2dc\uac01\ud654","permalink":"/tobias-docs/comp-2/docs/pandas/visualization"},"next":{"title":"pandas \ub370\uc774\ud130 \ubd84\uc11d \uac00\uc774\ub4dc","permalink":"/tobias-docs/comp-2/docs/pandas/intro"}}');var a=l(4848),r=l(8453);const i={sidebar_position:8},d="8. \uc2e4\uc804 \uc608\uc81c",t={},o=[{value:"8.1 \ub9e4\ucd9c \ub370\uc774\ud130 \ubd84\uc11d",id:"81-\ub9e4\ucd9c-\ub370\uc774\ud130-\ubd84\uc11d",level:2},{value:"\ub370\uc774\ud130 \uc900\ube44",id:"\ub370\uc774\ud130-\uc900\ube44",level:3},{value:"8.1.1 \uc6d4\ubcc4 \ub9e4\ucd9c \ubd84\uc11d",id:"811-\uc6d4\ubcc4-\ub9e4\ucd9c-\ubd84\uc11d",level:3},{value:"8.1.2 \uc81c\ud488\ubcc4 \ub9e4\ucd9c \uc21c\uc704",id:"812-\uc81c\ud488\ubcc4-\ub9e4\ucd9c-\uc21c\uc704",level:3},{value:"8.1.3 \uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c \ube44\uad50",id:"813-\uc9c0\uc5ed\ubcc4-\ub9e4\ucd9c-\ube44\uad50",level:3},{value:"8.2 \uace0\uac1d \uc138\ubd84\ud654",id:"82-\uace0\uac1d-\uc138\ubd84\ud654",level:2},{value:"8.2.1 RFM \ubd84\uc11d",id:"821-rfm-\ubd84\uc11d",level:3},{value:"8.2.2 \uace0\uac1d \ub4f1\uae09 \ubd84\ub958",id:"822-\uace0\uac1d-\ub4f1\uae09-\ubd84\ub958",level:3},{value:"8.3 \uc2dc\uacc4\uc5f4 \uc608\uce21 \ub370\uc774\ud130 \uc900\ube44",id:"83-\uc2dc\uacc4\uc5f4-\uc608\uce21-\ub370\uc774\ud130-\uc900\ube44",level:2},{value:"8.3.1 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \uc804\ucc98\ub9ac",id:"831-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130-\uc804\ucc98\ub9ac",level:3},{value:"8.3.2 \uacc4\uc808\uc131 \ubd84\uc11d",id:"832-\uacc4\uc808\uc131-\ubd84\uc11d",level:3},{value:"8.4 \ub85c\uadf8 \ub370\uc774\ud130 \ubd84\uc11d",id:"84-\ub85c\uadf8-\ub370\uc774\ud130-\ubd84\uc11d",level:2},{value:"8.4.1 \uc6f9 \ub85c\uadf8 \ud30c\uc2f1",id:"841-\uc6f9-\ub85c\uadf8-\ud30c\uc2f1",level:3},{value:"8.4.2 \uc5d0\ub7ec \ubd84\uc11d",id:"842-\uc5d0\ub7ec-\ubd84\uc11d",level:3},{value:"8.4.3 \uc131\ub2a5 \ubd84\uc11d",id:"843-\uc131\ub2a5-\ubd84\uc11d",level:3},{value:"8.5 Excel \uc790\ub3d9\ud654",id:"85-excel-\uc790\ub3d9\ud654",level:2},{value:"8.5.1 Excel \ub9ac\ud3ec\ud2b8 \uc0dd\uc131",id:"851-excel-\ub9ac\ud3ec\ud2b8-\uc0dd\uc131",level:3},{value:"8.5.2 Excel \ub370\uc774\ud130 \uc77d\uae30 \ubc0f \uacb0\ud569",id:"852-excel-\ub370\uc774\ud130-\uc77d\uae30-\ubc0f-\uacb0\ud569",level:3},{value:"8.6 \ub370\uc774\ud130\ubca0\uc774\uc2a4 ETL",id:"86-\ub370\uc774\ud130\ubca0\uc774\uc2a4-etl",level:2},{value:"8.6.1 \ub370\uc774\ud130 \ucd94\ucd9c \ubc0f \uc801\uc7ac",id:"861-\ub370\uc774\ud130-\ucd94\ucd9c-\ubc0f-\uc801\uc7ac",level:3},{value:"8.6.2 \uc99d\ubd84 \uc5c5\ub370\uc774\ud2b8",id:"862-\uc99d\ubd84-\uc5c5\ub370\uc774\ud2b8",level:3},{value:"8.7 \ub370\uc774\ud130 \ud488\uc9c8 \uac80\uc99d",id:"87-\ub370\uc774\ud130-\ud488\uc9c8-\uac80\uc99d",level:2},{value:"8.7.1 \ub370\uc774\ud130 \uac80\uc99d \ud568\uc218",id:"871-\ub370\uc774\ud130-\uac80\uc99d-\ud568\uc218",level:3},{value:"8.8 \uc131\ub2a5 \ucd5c\uc801\ud654 \uc2e4\uc804",id:"88-\uc131\ub2a5-\ucd5c\uc801\ud654-\uc2e4\uc804",level:2},{value:"8.8.1 \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac",id:"881-\ub300\uc6a9\ub7c9-\ub370\uc774\ud130-\ucc98\ub9ac",level:3},{value:"8.8.2 \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654",id:"882-\uba54\ubaa8\ub9ac-\ucd5c\uc801\ud654",level:3},{value:"8.9 \uc2e4\uc2b5 \ubb38\uc81c",id:"89-\uc2e4\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \ub9e4\ucd9c \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130 \uc900\ube44",id:"\ubb38\uc81c-1-\ub9e4\ucd9c-\ub300\uc2dc\ubcf4\ub4dc-\ub370\uc774\ud130-\uc900\ube44",level:3},{value:"\ubb38\uc81c 2: \uc774\uc0c1\uce58 \ud0d0\uc9c0 \ubc0f \ucc98\ub9ac",id:"\ubb38\uc81c-2-\uc774\uc0c1\uce58-\ud0d0\uc9c0-\ubc0f-\ucc98\ub9ac",level:3},{value:"8.10 \ubaa8\ubc94 \uc0ac\ub840",id:"810-\ubaa8\ubc94-\uc0ac\ub840",level:2},{value:"8.10.1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"8101-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:3},{value:"8.10.2 \uc5d0\ub7ec \ucc98\ub9ac",id:"8102-\uc5d0\ub7ec-\ucc98\ub9ac",level:3}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...n.components},{Details:l}=e;return l||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"8-\uc2e4\uc804-\uc608\uc81c",children:"8. \uc2e4\uc804 \uc608\uc81c"})}),"\n",(0,a.jsx)(e.p,{children:"\uc2e4\ubb34\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 pandas \ud65c\uc6a9 \uc0ac\ub840\ub97c \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,a.jsx)(e.h2,{id:"81-\ub9e4\ucd9c-\ub370\uc774\ud130-\ubd84\uc11d",children:"8.1 \ub9e4\ucd9c \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,a.jsx)(e.h3,{id:"\ub370\uc774\ud130-\uc900\ube44",children:"\ub370\uc774\ud130 \uc900\ube44"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n# \uc0d8\ud50c \ub9e4\ucd9c \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\ndates = pd.date_range('2024-01-01', '2024-12-31', freq='D')\nproducts = ['\ub178\ud2b8\ubd81', '\ub9c8\uc6b0\uc2a4', '\ud0a4\ubcf4\ub4dc', '\ubaa8\ub2c8\ud130', '\ud5e4\ub4dc\uc14b']\n\nsales_data = []\nfor date in dates:\n    for _ in range(np.random.randint(5, 15)):\n        sales_data.append({\n            '\ub0a0\uc9dc': date,\n            '\uc81c\ud488': np.random.choice(products),\n            '\uc218\ub7c9': np.random.randint(1, 5),\n            '\ub2e8\uac00': np.random.choice([50000, 30000, 80000, 200000, 60000]),\n            '\uc9c0\uc5ed': np.random.choice(['\uc11c\uc6b8', '\ubd80\uc0b0', '\ub300\uad6c', '\uc778\ucc9c'])\n        })\n\ndf = pd.DataFrame(sales_data)\ndf['\ucd1d\uc561'] = df['\uc218\ub7c9'] * df['\ub2e8\uac00']\n"})}),"\n",(0,a.jsx)(e.h3,{id:"811-\uc6d4\ubcc4-\ub9e4\ucd9c-\ubd84\uc11d",children:"8.1.1 \uc6d4\ubcc4 \ub9e4\ucd9c \ubd84\uc11d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc6d4\ubcc4 \ub9e4\ucd9c \uc9d1\uacc4\ndf['\ub144\uc6d4'] = df['\ub0a0\uc9dc'].dt.to_period('M')\nmonthly_sales = df.groupby('\ub144\uc6d4')['\ucd1d\uc561'].sum()\n\nprint(\"\uc6d4\ubcc4 \ub9e4\ucd9c:\")\nprint(monthly_sales)\n\n# \uc804\uc6d4 \ub300\ube44 \uc99d\uac10\ub960\ngrowth_rate = monthly_sales.pct_change() * 100\nprint(f\"\\n\ud3c9\uade0 \uc6d4 \uc131\uc7a5\ub960: {growth_rate.mean():.2f}%\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"812-\uc81c\ud488\ubcc4-\ub9e4\ucd9c-\uc21c\uc704",children:"8.1.2 \uc81c\ud488\ubcc4 \ub9e4\ucd9c \uc21c\uc704"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc81c\ud488\ubcc4 \ub9e4\ucd9c \ubc0f \ud310\ub9e4\ub7c9\nproduct_analysis = df.groupby('\uc81c\ud488').agg({\n    '\ucd1d\uc561': 'sum',\n    '\uc218\ub7c9': 'sum',\n    '\ub0a0\uc9dc': 'count'\n}).rename(columns={'\ub0a0\uc9dc': '\uac70\ub798\uac74\uc218'})\n\nproduct_analysis['\ud3c9\uade0\ub2e8\uac00'] = product_analysis['\ucd1d\uc561'] / product_analysis['\uc218\ub7c9']\nproduct_analysis = product_analysis.sort_values('\ucd1d\uc561', ascending=False)\n\nprint(\"\uc81c\ud488\ubcc4 \ubd84\uc11d:\")\nprint(product_analysis)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"813-\uc9c0\uc5ed\ubcc4-\ub9e4\ucd9c-\ube44\uad50",children:"8.1.3 \uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c \ube44\uad50"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc9c0\uc5ed\ubcc4 \uc6d4\ubcc4 \ub9e4\ucd9c\nregional_sales = df.pivot_table(\n    values='\ucd1d\uc561',\n    index='\ub144\uc6d4',\n    columns='\uc9c0\uc5ed',\n    aggfunc='sum',\n    fill_value=0\n)\n\nprint(\"\uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c:\")\nprint(regional_sales)\n\n# \uc9c0\uc5ed\ubcc4 \uc810\uc720\uc728\nregion_share = df.groupby('\uc9c0\uc5ed')['\ucd1d\uc561'].sum()\nregion_share_pct = (region_share / region_share.sum() * 100).round(2)\n\nprint(\"\\n\uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c \uc810\uc720\uc728:\")\nprint(region_share_pct)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"82-\uace0\uac1d-\uc138\ubd84\ud654",children:"8.2 \uace0\uac1d \uc138\ubd84\ud654"}),"\n",(0,a.jsx)(e.h3,{id:"821-rfm-\ubd84\uc11d",children:"8.2.1 RFM \ubd84\uc11d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uace0\uac1d \uac70\ub798 \ub370\uc774\ud130 \uc0dd\uc131\ncustomer_data = df.copy()\ncustomer_data['\uace0\uac1dID'] = np.random.randint(1000, 1100, len(df))\n\n# \uae30\uc900\uc77c \uc124\uc815\nanalysis_date = df['\ub0a0\uc9dc'].max()\n\n# RFM \uacc4\uc0b0\nrfm = customer_data.groupby('\uace0\uac1dID').agg({\n    '\ub0a0\uc9dc': lambda x: (analysis_date - x.max()).days,  # Recency\n    '\ucd1d\uc561': ['sum', 'count']  # Monetary, Frequency\n})\n\nrfm.columns = ['Recency', 'Monetary', 'Frequency']\nrfm = rfm.reset_index()\n\n# RFM \uc810\uc218 \ubd80\uc5ec (1-5\uc810)\nrfm['R_Score'] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])\nrfm['F_Score'] = pd.qcut(rfm['Frequency'].rank(method='first'), 5, labels=[1, 2, 3, 4, 5])\nrfm['M_Score'] = pd.qcut(rfm['Monetary'], 5, labels=[1, 2, 3, 4, 5])\n\n# RFM \uc810\uc218 \ud569\uc0b0\nrfm['RFM_Score'] = rfm['R_Score'].astype(str) + rfm['F_Score'].astype(str) + rfm['M_Score'].astype(str)\n\nprint(\"RFM \ubd84\uc11d \uacb0\uacfc:\")\nprint(rfm.head(10))\n"})}),"\n",(0,a.jsx)(e.h3,{id:"822-\uace0\uac1d-\ub4f1\uae09-\ubd84\ub958",children:"8.2.2 \uace0\uac1d \ub4f1\uae09 \ubd84\ub958"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uace0\uac1d \uc138\uadf8\uba3c\ud2b8 \uc815\uc758\ndef customer_segment(row):\n    if row['R_Score'] >= 4 and row['F_Score'] >= 4 and row['M_Score'] >= 4:\n        return 'VIP'\n    elif row['R_Score'] >= 3 and row['F_Score'] >= 3:\n        return '\uc6b0\uc218\uace0\uac1d'\n    elif row['R_Score'] <= 2:\n        return '\uc774\ud0c8\uc704\ud5d8'\n    else:\n        return '\uc77c\ubc18\uace0\uac1d'\n\nrfm['\uc138\uadf8\uba3c\ud2b8'] = rfm.apply(customer_segment, axis=1)\n\n# \uc138\uadf8\uba3c\ud2b8\ubcc4 \ud1b5\uacc4\nsegment_stats = rfm.groupby('\uc138\uadf8\uba3c\ud2b8').agg({\n    '\uace0\uac1dID': 'count',\n    'Monetary': 'mean',\n    'Frequency': 'mean',\n    'Recency': 'mean'\n}).round(2)\n\nsegment_stats.columns = ['\uace0\uac1d\uc218', '\ud3c9\uade0\uad6c\ub9e4\uc561', '\ud3c9\uade0\uad6c\ub9e4\ube48\ub3c4', '\ud3c9\uade0\ucd5c\uadfc\uad6c\ub9e4\uc77c']\nprint(\"\\n\uace0\uac1d \uc138\uadf8\uba3c\ud2b8 \ubd84\uc11d:\")\nprint(segment_stats)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"83-\uc2dc\uacc4\uc5f4-\uc608\uce21-\ub370\uc774\ud130-\uc900\ube44",children:"8.3 \uc2dc\uacc4\uc5f4 \uc608\uce21 \ub370\uc774\ud130 \uc900\ube44"}),"\n",(0,a.jsx)(e.h3,{id:"831-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130-\uc804\ucc98\ub9ac",children:"8.3.1 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \uc804\ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc77c\ubcc4 \ub9e4\ucd9c \uc2dc\uacc4\uc5f4\ndaily_sales = df.groupby('\ub0a0\uc9dc')['\ucd1d\uc561'].sum().reset_index()\ndaily_sales = daily_sales.set_index('\ub0a0\uc9dc')\n\n# \uc774\ub3d9\ud3c9\uade0 \uacc4\uc0b0\ndaily_sales['MA7'] = daily_sales['\ucd1d\uc561'].rolling(window=7).mean()\ndaily_sales['MA30'] = daily_sales['\ucd1d\uc561'].rolling(window=30).mean()\n\nprint(\"\uc2dc\uacc4\uc5f4 \ub370\uc774\ud130:\")\nprint(daily_sales.tail(10))\n"})}),"\n",(0,a.jsx)(e.h3,{id:"832-\uacc4\uc808\uc131-\ubd84\uc11d",children:"8.3.2 \uacc4\uc808\uc131 \ubd84\uc11d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc694\uc77c\ubcc4 \ud328\ud134\ndaily_sales['\uc694\uc77c'] = daily_sales.index.dayofweek\nweekday_pattern = daily_sales.groupby('\uc694\uc77c')['\ucd1d\uc561'].mean()\n\nweekday_names = ['\uc6d4', '\ud654', '\uc218', '\ubaa9', '\uae08', '\ud1a0', '\uc77c']\nweekday_pattern.index = weekday_names\n\nprint(\"\\n\uc694\uc77c\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c:\")\nprint(weekday_pattern.round(0))\n\n# \uc6d4\ubcc4 \ud328\ud134\ndaily_sales['\uc6d4'] = daily_sales.index.month\nmonthly_pattern = daily_sales.groupby('\uc6d4')['\ucd1d\uc561'].mean()\n\nprint(\"\\n\uc6d4\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c:\")\nprint(monthly_pattern.round(0))\n"})}),"\n",(0,a.jsx)(e.h2,{id:"84-\ub85c\uadf8-\ub370\uc774\ud130-\ubd84\uc11d",children:"8.4 \ub85c\uadf8 \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,a.jsx)(e.h3,{id:"841-\uc6f9-\ub85c\uadf8-\ud30c\uc2f1",children:"8.4.1 \uc6f9 \ub85c\uadf8 \ud30c\uc2f1"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc0d8\ud50c \ub85c\uadf8 \ub370\uc774\ud130\nlog_data = {\n    'timestamp': pd.date_range('2024-01-01', periods=1000, freq='1min'),\n    'user_id': np.random.randint(1, 100, 1000),\n    'page': np.random.choice(['/home', '/product', '/cart', '/checkout'], 1000),\n    'status': np.random.choice([200, 404, 500], 1000, p=[0.9, 0.07, 0.03]),\n    'response_time': np.random.exponential(0.5, 1000)\n}\n\nlogs = pd.DataFrame(log_data)\nlogs['hour'] = logs['timestamp'].dt.hour\n"})}),"\n",(0,a.jsx)(e.h3,{id:"842-\uc5d0\ub7ec-\ubd84\uc11d",children:"8.4.2 \uc5d0\ub7ec \ubd84\uc11d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc5d0\ub7ec\uc728 \uacc4\uc0b0\nerror_rate = (logs['status'] != 200).mean() * 100\nprint(f\"\uc804\uccb4 \uc5d0\ub7ec\uc728: {error_rate:.2f}%\")\n\n# \uc2dc\uac04\ub300\ubcc4 \uc5d0\ub7ec\uc728\nhourly_errors = logs.groupby('hour').apply(\n    lambda x: (x['status'] != 200).sum() / len(x) * 100\n).round(2)\n\nprint(\"\\n\uc2dc\uac04\ub300\ubcc4 \uc5d0\ub7ec\uc728(%):\")\nprint(hourly_errors)\n\n# \ud398\uc774\uc9c0\ubcc4 \uc5d0\ub7ec \ud1b5\uacc4\npage_errors = logs.groupby(['page', 'status']).size().unstack(fill_value=0)\npage_errors['\uc5d0\ub7ec\uc728(%)'] = (\n    (page_errors[404] + page_errors[500]) /\n    page_errors.sum(axis=1) * 100\n).round(2)\n\nprint(\"\\n\ud398\uc774\uc9c0\ubcc4 \uc5d0\ub7ec \ud1b5\uacc4:\")\nprint(page_errors)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"843-\uc131\ub2a5-\ubd84\uc11d",children:"8.4.3 \uc131\ub2a5 \ubd84\uc11d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc751\ub2f5\uc2dc\uac04 \ud1b5\uacc4\nresponse_stats = logs.groupby('page')['response_time'].agg([\n    'count', 'mean', 'median',\n    ('p95', lambda x: x.quantile(0.95)),\n    ('p99', lambda x: x.quantile(0.99))\n]).round(3)\n\nprint(\"\\n\ud398\uc774\uc9c0\ubcc4 \uc751\ub2f5\uc2dc\uac04 \ud1b5\uacc4 (\ucd08):\")\nprint(response_stats)\n\n# \ub290\ub9b0 \uc694\uccad \ucc3e\uae30 (95 \ubc31\ubd84\uc704\uc218 \ucd08\uacfc)\nslow_threshold = logs['response_time'].quantile(0.95)\nslow_requests = logs[logs['response_time'] > slow_threshold]\n\nprint(f\"\\n\ub290\ub9b0 \uc694\uccad ({slow_threshold:.2f}\ucd08 \ucd08\uacfc): {len(slow_requests)}\uac74\")\n"})}),"\n",(0,a.jsx)(e.h2,{id:"85-excel-\uc790\ub3d9\ud654",children:"8.5 Excel \uc790\ub3d9\ud654"}),"\n",(0,a.jsx)(e.h3,{id:"851-excel-\ub9ac\ud3ec\ud2b8-\uc0dd\uc131",children:"8.5.1 Excel \ub9ac\ud3ec\ud2b8 \uc0dd\uc131"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub9ac\ud3ec\ud2b8 \ub370\uc774\ud130 \uc900\ube44\nreport_date = datetime.now().strftime('%Y-%m-%d')\n\n# Excel \ud30c\uc77c\ub85c \uc800\uc7a5 (\uc5ec\ub7ec \uc2dc\ud2b8)\nwith pd.ExcelWriter(f'sales_report_{report_date}.xlsx', engine='openpyxl') as writer:\n    # \uc694\uc57d \uc2dc\ud2b8\n    summary = pd.DataFrame({\n        '\ud56d\ubaa9': ['\ucd1d \ub9e4\ucd9c\uc561', '\ucd1d \uac70\ub798\uac74\uc218', '\ud3c9\uade0 \uac70\ub798\uae08\uc561', '\ud65c\uc131 \uace0\uac1d\uc218'],\n        '\uac12': [\n            df['\ucd1d\uc561'].sum(),\n            len(df),\n            df['\ucd1d\uc561'].mean(),\n            df['\uace0\uac1dID'].nunique() if '\uace0\uac1dID' in df.columns else len(df)\n        ]\n    })\n    summary.to_excel(writer, sheet_name='\uc694\uc57d', index=False)\n\n    # \uc6d4\ubcc4 \ub9e4\ucd9c \uc2dc\ud2b8\n    monthly_sales.to_excel(writer, sheet_name='\uc6d4\ubcc4\ub9e4\ucd9c')\n\n    # \uc81c\ud488 \ubd84\uc11d \uc2dc\ud2b8\n    product_analysis.to_excel(writer, sheet_name='\uc81c\ud488\ubd84\uc11d')\n\n    # \uc9c0\uc5ed \ubd84\uc11d \uc2dc\ud2b8\n    regional_sales.to_excel(writer, sheet_name='\uc9c0\uc5ed\ubcc4\ub9e4\ucd9c')\n\nprint(f\"\ub9ac\ud3ec\ud2b8 \uc0dd\uc131 \uc644\ub8cc: sales_report_{report_date}.xlsx\")\n"})}),"\n",(0,a.jsx)(e.h3,{id:"852-excel-\ub370\uc774\ud130-\uc77d\uae30-\ubc0f-\uacb0\ud569",children:"8.5.2 Excel \ub370\uc774\ud130 \uc77d\uae30 \ubc0f \uacb0\ud569"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uc5ec\ub7ec Excel \ud30c\uc77c \uacb0\ud569\nimport glob\n\n# \ubaa8\ub4e0 Excel \ud30c\uc77c \ucc3e\uae30\nexcel_files = glob.glob('sales_*.xlsx')\n\n# \ubaa8\ub4e0 \ud30c\uc77c \uc77d\uc5b4\uc11c \uacb0\ud569\ndfs = []\nfor file in excel_files:\n    df_temp = pd.read_excel(file, sheet_name='\uc694\uc57d')\n    df_temp['\ud30c\uc77c\uba85'] = file\n    dfs.append(df_temp)\n\ncombined = pd.concat(dfs, ignore_index=True)\nprint(\"\uacb0\ud569\ub41c \ub370\uc774\ud130:\")\nprint(combined)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"86-\ub370\uc774\ud130\ubca0\uc774\uc2a4-etl",children:"8.6 \ub370\uc774\ud130\ubca0\uc774\uc2a4 ETL"}),"\n",(0,a.jsx)(e.h3,{id:"861-\ub370\uc774\ud130-\ucd94\ucd9c-\ubc0f-\uc801\uc7ac",children:"8.6.1 \ub370\uc774\ud130 \ucd94\ucd9c \ubc0f \uc801\uc7ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import create_engine\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 (\uc608: SQLite)\nengine = create_engine(\'sqlite:///sales.db\')\n\n# \ub370\uc774\ud130 \uc800\uc7a5\ndf.to_sql(\'sales\', engine, if_exists=\'replace\', index=False)\nprint("\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5 \uc644\ub8cc")\n\n# \ub370\uc774\ud130 \uc870\ud68c\nquery = """\nSELECT\n    \uc81c\ud488,\n    SUM(\ucd1d\uc561) as \ucd1d\ub9e4\ucd9c,\n    COUNT(*) as \uac70\ub798\uac74\uc218\nFROM sales\nWHERE \ub0a0\uc9dc >= \'2024-01-01\'\nGROUP BY \uc81c\ud488\nORDER BY \ucd1d\ub9e4\ucd9c DESC\n"""\n\nresult = pd.read_sql(query, engine)\nprint("\\nSQL \uc870\ud68c \uacb0\uacfc:")\nprint(result)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"862-\uc99d\ubd84-\uc5c5\ub370\uc774\ud2b8",children:"8.6.2 \uc99d\ubd84 \uc5c5\ub370\uc774\ud2b8"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub9c8\uc9c0\ub9c9 \uc5c5\ub370\uc774\ud2b8 \ub0a0\uc9dc \ud655\uc778\nlast_date_query = \"SELECT MAX(\ub0a0\uc9dc) as last_date FROM sales\"\nlast_date = pd.read_sql(last_date_query, engine)['last_date'][0]\n\nprint(f\"\ub9c8\uc9c0\ub9c9 \uc5c5\ub370\uc774\ud2b8: {last_date}\")\n\n# \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub9cc \ucd94\uac00\nnew_data = df[df['\ub0a0\uc9dc'] > last_date]\n\nif len(new_data) > 0:\n    new_data.to_sql('sales', engine, if_exists='append', index=False)\n    print(f\"{len(new_data)}\uac74\uc758 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ucd94\uac00\ub428\")\nelse:\n    print(\"\uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \uc5c6\uc74c\")\n"})}),"\n",(0,a.jsx)(e.h2,{id:"87-\ub370\uc774\ud130-\ud488\uc9c8-\uac80\uc99d",children:"8.7 \ub370\uc774\ud130 \ud488\uc9c8 \uac80\uc99d"}),"\n",(0,a.jsx)(e.h3,{id:"871-\ub370\uc774\ud130-\uac80\uc99d-\ud568\uc218",children:"8.7.1 \ub370\uc774\ud130 \uac80\uc99d \ud568\uc218"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def validate_dataframe(df, rules):\n    \"\"\"\n    \ub370\uc774\ud130\ud504\ub808\uc784 \uac80\uc99d\n\n    Parameters:\n    -----------\n    df : DataFrame\n        \uac80\uc99d\ud560 \ub370\uc774\ud130\ud504\ub808\uc784\n    rules : dict\n        \uac80\uc99d \uaddc\uce59\n\n    Returns:\n    --------\n    dict : \uac80\uc99d \uacb0\uacfc\n    \"\"\"\n    results = {}\n\n    # \ud544\uc218 \uceec\ub7fc \ud655\uc778\n    if 'required_columns' in rules:\n        missing = set(rules['required_columns']) - set(df.columns)\n        results['missing_columns'] = list(missing)\n\n    # \uacb0\uce21\uce58 \ud655\uc778\n    if 'no_nulls' in rules:\n        null_cols = df[rules['no_nulls']].isnull().sum()\n        results['null_counts'] = null_cols[null_cols > 0].to_dict()\n\n    # \ubc94\uc704 \ud655\uc778\n    if 'ranges' in rules:\n        for col, (min_val, max_val) in rules['ranges'].items():\n            out_of_range = df[\n                (df[col] < min_val) | (df[col] > max_val)\n            ]\n            if len(out_of_range) > 0:\n                results[f'{col}_out_of_range'] = len(out_of_range)\n\n    # \uc911\ubcf5 \ud655\uc778\n    if 'unique_columns' in rules:\n        for col in rules['unique_columns']:\n            duplicates = df[df.duplicated(subset=col, keep=False)]\n            if len(duplicates) > 0:\n                results[f'{col}_duplicates'] = len(duplicates)\n\n    return results\n\n# \uac80\uc99d \uaddc\uce59 \uc815\uc758\nvalidation_rules = {\n    'required_columns': ['\ub0a0\uc9dc', '\uc81c\ud488', '\uc218\ub7c9', '\ub2e8\uac00'],\n    'no_nulls': ['\ub0a0\uc9dc', '\uc81c\ud488'],\n    'ranges': {\n        '\uc218\ub7c9': (0, 100),\n        '\ub2e8\uac00': (0, 1000000)\n    }\n}\n\n# \uac80\uc99d \uc2e4\ud589\nvalidation_result = validate_dataframe(df, validation_rules)\n\nif validation_result:\n    print(\"\uac80\uc99d \uc2e4\ud328 \ud56d\ubaa9:\")\n    for key, value in validation_result.items():\n        print(f\"  {key}: {value}\")\nelse:\n    print(\"\ubaa8\ub4e0 \uac80\uc99d \ud1b5\uacfc\")\n"})}),"\n",(0,a.jsx)(e.h2,{id:"88-\uc131\ub2a5-\ucd5c\uc801\ud654-\uc2e4\uc804",children:"8.8 \uc131\ub2a5 \ucd5c\uc801\ud654 \uc2e4\uc804"}),"\n",(0,a.jsx)(e.h3,{id:"881-\ub300\uc6a9\ub7c9-\ub370\uc774\ud130-\ucc98\ub9ac",children:"8.8.1 \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \uccad\ud06c \ub2e8\uc704\ub85c \uc77d\uae30\nchunk_size = 10000\nchunks = []\n\nfor chunk in pd.read_csv('large_file.csv', chunksize=chunk_size):\n    # \ud544\uc694\ud55c \ucc98\ub9ac\n    processed = chunk[chunk['\uae08\uc561'] > 100000]\n    chunks.append(processed)\n\nresult = pd.concat(chunks, ignore_index=True)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"882-\uba54\ubaa8\ub9ac-\ucd5c\uc801\ud654",children:"8.8.2 \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654\ndef optimize_dtypes(df):\n    \"\"\"\ub370\uc774\ud130 \ud0c0\uc785\uc744 \ucd5c\uc801\ud654\ud558\uc5ec \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uac10\uc18c\"\"\"\n\n    # \uc2dc\uc791 \uba54\ubaa8\ub9ac\n    start_mem = df.memory_usage(deep=True).sum() / 1024**2\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n\n            elif str(col_type)[:5] == 'float':\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n\n        else:\n            # \uce74\ud14c\uace0\ub9ac\ud615\uc73c\ub85c \ubcc0\ud658 (\uace0\uc720\uac12\uc774 \uc801\uc740 \uacbd\uc6b0)\n            if df[col].nunique() / len(df) < 0.5:\n                df[col] = df[col].astype('category')\n\n    # \ub05d \uba54\ubaa8\ub9ac\n    end_mem = df.memory_usage(deep=True).sum() / 1024**2\n\n    print(f'\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {start_mem:.2f} MB \u2192 {end_mem:.2f} MB')\n    print(f'\uac10\uc18c\uc728: {100 * (start_mem - end_mem) / start_mem:.1f}%')\n\n    return df\n\n# \uc0ac\uc6a9 \uc608\ndf_optimized = optimize_dtypes(df.copy())\n"})}),"\n",(0,a.jsx)(e.h2,{id:"89-\uc2e4\uc2b5-\ubb38\uc81c",children:"8.9 \uc2e4\uc2b5 \ubb38\uc81c"}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-1-\ub9e4\ucd9c-\ub300\uc2dc\ubcf4\ub4dc-\ub370\uc774\ud130-\uc900\ube44",children:"\ubb38\uc81c 1: \ub9e4\ucd9c \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130 \uc900\ube44"}),"\n",(0,a.jsx)(e.p,{children:"\ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\ub294 \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130\ub97c \uc900\ube44\ud558\uc138\uc694:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"\uc804\uccb4 \ub9e4\ucd9c KPI (\ucd1d \ub9e4\ucd9c, \uac70\ub798 \uac74\uc218, \ud3c9\uade0 \uc8fc\ubb38\uc561)"}),"\n",(0,a.jsx)(e.li,{children:"\uc77c\uc8fc\uc77c \ub2e8\uc704 \ub9e4\ucd9c \ucd94\uc774"}),"\n",(0,a.jsx)(e.li,{children:"\uc0c1\uc704 5\uac1c \uc81c\ud488"}),"\n",(0,a.jsx)(e.li,{children:"\uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c \ube44\uad50"}),"\n"]}),"\n",(0,a.jsxs)(l,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# 1. KPI \uacc4\uc0b0\nkpi = {\n    '\ucd1d_\ub9e4\ucd9c': df['\ucd1d\uc561'].sum(),\n    '\uac70\ub798_\uac74\uc218': len(df),\n    '\ud3c9\uade0_\uc8fc\ubb38\uc561': df['\ucd1d\uc561'].mean(),\n    '\ud65c\uc131_\uace0\uac1d': df['\uace0\uac1dID'].nunique() if '\uace0\uac1dID' in df.columns else None\n}\n\n# 2. \uc8fc\uac04 \ub9e4\ucd9c \ucd94\uc774\ndf['\uc8fc'] = df['\ub0a0\uc9dc'].dt.isocalendar().week\nweekly_sales = df.groupby('\uc8fc')['\ucd1d\uc561'].sum().reset_index()\n\n# 3. \uc0c1\uc704 5\uac1c \uc81c\ud488\ntop_products = df.groupby('\uc81c\ud488')['\ucd1d\uc561'].sum().nlargest(5)\n\n# 4. \uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c\nregional_sales = df.groupby('\uc9c0\uc5ed')['\ucd1d\uc561'].sum().sort_values(ascending=False)\n\n# \uacb0\uacfc \ucd9c\ub825\nprint(\"=== \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130 ===\")\nprint(\"\\n1. KPI:\")\nfor key, value in kpi.items():\n    if value is not None:\n        print(f\"   {key}: {value:,.0f}\")\n\nprint(\"\\n2. \uc8fc\uac04 \ub9e4\ucd9c:\")\nprint(weekly_sales.tail())\n\nprint(\"\\n3. \uc0c1\uc704 5\uac1c \uc81c\ud488:\")\nprint(top_products)\n\nprint(\"\\n4. \uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c:\")\nprint(regional_sales)\n"})})]}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-2-\uc774\uc0c1\uce58-\ud0d0\uc9c0-\ubc0f-\ucc98\ub9ac",children:"\ubb38\uc81c 2: \uc774\uc0c1\uce58 \ud0d0\uc9c0 \ubc0f \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.p,{children:"\ub9e4\ucd9c \ub370\uc774\ud130\uc5d0\uc11c \uc774\uc0c1\uce58\ub97c \ud0d0\uc9c0\ud558\uace0 \ucc98\ub9ac\ud558\uc138\uc694:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"IQR \ubc29\ubc95\uc73c\ub85c \uc774\uc0c1\uce58 \ud0d0\uc9c0"}),"\n",(0,a.jsx)(e.li,{children:"\uc774\uc0c1\uce58 \ud1b5\uacc4 \ucd9c\ub825"}),"\n",(0,a.jsx)(e.li,{children:"\uc774\uc0c1\uce58 \uc81c\uac70 \ub610\ub294 \ub300\uccb4"}),"\n"]}),"\n",(0,a.jsxs)(l,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def detect_outliers(df, column):\n    """IQR \ubc29\ubc95\uc73c\ub85c \uc774\uc0c1\uce58 \ud0d0\uc9c0"""\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n\n    outliers = df[\n        (df[column] < lower_bound) |\n        (df[column] > upper_bound)\n    ]\n\n    print(f"\\n=== {column} \uc774\uc0c1\uce58 \ubd84\uc11d ===")\n    print(f"Q1: {Q1:,.0f}")\n    print(f"Q3: {Q3:,.0f}")\n    print(f"IQR: {IQR:,.0f}")\n    print(f"\uc815\uc0c1 \ubc94\uc704: {lower_bound:,.0f} ~ {upper_bound:,.0f}")\n    print(f"\uc774\uc0c1\uce58 \uac1c\uc218: {len(outliers)} ({len(outliers)/len(df)*100:.2f}%)")\n\n    return outliers, lower_bound, upper_bound\n\n# \ucd1d\uc561 \uceec\ub7fc \uc774\uc0c1\uce58 \ud0d0\uc9c0\noutliers, lower, upper = detect_outliers(df, \'\ucd1d\uc561\')\n\n# \uc774\uc0c1\uce58 \ucc98\ub9ac \uc635\uc158 1: \uc81c\uac70\ndf_cleaned = df[\n    (df[\'\ucd1d\uc561\'] >= lower) &\n    (df[\'\ucd1d\uc561\'] <= upper)\n].copy()\n\nprint(f"\\n\uc81c\uac70 \ud6c4 \ub370\uc774\ud130: {len(df_cleaned)}\uac74 (\uc6d0\ubcf8: {len(df)}\uac74)")\n\n# \uc774\uc0c1\uce58 \ucc98\ub9ac \uc635\uc158 2: \ucea1\ud551 (\uc0c1/\ud558\ud55c\uac12\uc73c\ub85c \ub300\uccb4)\ndf_capped = df.copy()\ndf_capped.loc[df_capped[\'\ucd1d\uc561\'] < lower, \'\ucd1d\uc561\'] = lower\ndf_capped.loc[df_capped[\'\ucd1d\uc561\'] > upper, \'\ucd1d\uc561\'] = upper\n\nprint(f"\ucea1\ud551 \ud6c4 \ubc94\uc704: {df_capped[\'\ucd1d\uc561\'].min():,.0f} ~ {df_capped[\'\ucd1d\uc561\'].max():,.0f}")\n'})})]}),"\n",(0,a.jsx)(e.h2,{id:"810-\ubaa8\ubc94-\uc0ac\ub840",children:"8.10 \ubaa8\ubc94 \uc0ac\ub840"}),"\n",(0,a.jsx)(e.h3,{id:"8101-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"8.10.1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# config.py - \uc124\uc815 \uad00\ub9ac\nclass Config:\n    DATA_DIR = 'data/'\n    OUTPUT_DIR = 'output/'\n    DB_CONNECTION = 'sqlite:///sales.db'\n\n# utils.py - \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ndef load_data(file_path):\n    \"\"\"\ub370\uc774\ud130 \ub85c\ub4dc \ubc0f \uae30\ubcf8 \uc804\ucc98\ub9ac\"\"\"\n    df = pd.read_csv(file_path)\n    df['\ub0a0\uc9dc'] = pd.to_datetime(df['\ub0a0\uc9dc'])\n    return df\n\ndef save_report(df, filename):\n    \"\"\"\ub9ac\ud3ec\ud2b8 \uc800\uc7a5\"\"\"\n    output_path = Config.OUTPUT_DIR + filename\n    df.to_excel(output_path, index=False)\n    print(f\"\uc800\uc7a5 \uc644\ub8cc: {output_path}\")\n\n# main.py - \uba54\uc778 \ubd84\uc11d \uc2a4\ud06c\ub9bd\ud2b8\nfrom config import Config\nfrom utils import load_data, save_report\n\ndef main():\n    # \ub370\uc774\ud130 \ub85c\ub4dc\n    df = load_data(Config.DATA_DIR + 'sales.csv')\n\n    # \ubd84\uc11d \uc218\ud589\n    monthly_sales = df.groupby('\ub144\uc6d4')['\ucd1d\uc561'].sum()\n\n    # \uacb0\uacfc \uc800\uc7a5\n    save_report(monthly_sales, 'monthly_report.xlsx')\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,a.jsx)(e.h3,{id:"8102-\uc5d0\ub7ec-\ucc98\ub9ac",children:"8.10.2 \uc5d0\ub7ec \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def safe_read_csv(file_path, **kwargs):\n    """\uc548\uc804\ud55c CSV \uc77d\uae30"""\n    try:\n        df = pd.read_csv(file_path, **kwargs)\n        print(f"\ud30c\uc77c \ub85c\ub4dc \uc131\uacf5: {len(df)}\uac74")\n        return df\n    except FileNotFoundError:\n        print(f"\uc624\ub958: \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4 - {file_path}")\n        return None\n    except pd.errors.EmptyDataError:\n        print(f"\uc624\ub958: \ud30c\uc77c\uc774 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4 - {file_path}")\n        return None\n    except Exception as e:\n        print(f"\uc624\ub958 \ubc1c\uc0dd: {str(e)}")\n        return None\n\n# \uc0ac\uc6a9\ndf = safe_read_csv(\'sales.csv\')\nif df is not None:\n    # \ubd84\uc11d \uc9c4\ud589\n    pass\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.p,{children:["\ub2e4\uc74c \ub2e8\uacc4: ",(0,a.jsx)(e.a,{href:"./basics",children:"pandas \uae30\ubcf8 \uac1c\ub150"}),"\uc73c\ub85c \ub3cc\uc544\uac00\uae30"]}),"\n",(0,a.jsxs)(e.admonition,{title:"\uc2e4\uc804 \ud504\ub85c\uc81d\ud2b8 \uc2dc\uc791\ud558\uae30",type:"tip",children:[(0,a.jsx)(e.p,{children:"\uc2e4\uc81c \ub370\uc774\ud130\ub85c \uc9c1\uc811 \ud504\ub85c\uc81d\ud2b8\ub97c \uc2dc\uc791\ud574\ubcf4\uc138\uc694:"}),(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Kaggle\uc5d0\uc11c \uad00\uc2ec \uc788\ub294 \ub370\uc774\ud130\uc14b \ub2e4\uc6b4\ub85c\ub4dc"}),"\n",(0,a.jsx)(e.li,{children:"\ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d (EDA) \uc218\ud589"}),"\n",(0,a.jsx)(e.li,{children:"\uc778\uc0ac\uc774\ud2b8 \ub3c4\ucd9c \ubc0f \ub9ac\ud3ec\ud2b8 \uc791\uc131"}),"\n",(0,a.jsx)(e.li,{children:"GitHub\uc5d0 \ud504\ub85c\uc81d\ud2b8 \uacf5\uc720"}),"\n"]})]})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,l)=>{l.d(e,{R:()=>i,x:()=>d});var s=l(6540);const a={},r=s.createContext(a);function i(n){const e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);