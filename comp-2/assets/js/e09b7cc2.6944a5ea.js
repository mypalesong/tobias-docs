"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[4608],{4299:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"n8n/examples","title":"6. \uc2e4\uc804 \uc608\uc81c","description":"\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc2e4\uc81c n8n \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc608\uc81c\ub97c \ubc30\uc6cc\ubd05\ub2c8\ub2e4.","source":"@site/docs/n8n/examples.md","sourceDirName":"n8n","slug":"/n8n/examples","permalink":"/tobias-docs/comp-2/docs/n8n/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/n8n/examples.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"n8nSidebar","previous":{"title":"5. \uc8fc\uc694 \ud1b5\ud569","permalink":"/tobias-docs/comp-2/docs/n8n/integrations"},"next":{"title":"n8n \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc790\ub3d9\ud654 \uac00\uc774\ub4dc","permalink":"/tobias-docs/comp-2/docs/n8n/intro"}}');var s=t(4848),o=t(8453);const r={sidebar_position:6},l="6. \uc2e4\uc804 \uc608\uc81c",i={},d=[{value:"6.1 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95",id:"61-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778-\uad6c\ucd95",level:2},{value:"CRM \u2192 Data Warehouse \ud30c\uc774\ud504\ub77c\uc778",id:"crm--data-warehouse-\ud30c\uc774\ud504\ub77c\uc778",level:3},{value:"6.2 \uace0\uac1d \uc628\ubcf4\ub529 \uc790\ub3d9\ud654",id:"62-\uace0\uac1d-\uc628\ubcf4\ub529-\uc790\ub3d9\ud654",level:2},{value:"\uc2e0\uaddc \uace0\uac1d \ud658\uc601 \ud50c\ub85c\uc6b0",id:"\uc2e0\uaddc-\uace0\uac1d-\ud658\uc601-\ud50c\ub85c\uc6b0",level:3},{value:"6.3 \uc18c\uc15c \ubbf8\ub514\uc5b4 \uc790\ub3d9\ud654",id:"63-\uc18c\uc15c-\ubbf8\ub514\uc5b4-\uc790\ub3d9\ud654",level:2},{value:"\uba40\ud2f0 \ucc44\ub110 \ud3ec\uc2a4\ud305",id:"\uba40\ud2f0-\ucc44\ub110-\ud3ec\uc2a4\ud305",level:3},{value:"6.4 \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc \uc2dc\uc2a4\ud15c",id:"64-\ubaa8\ub2c8\ud130\ub9c1-\ubc0f-\uc54c\ub9bc-\uc2dc\uc2a4\ud15c",level:2},{value:"\uc6f9\uc0ac\uc774\ud2b8 \ud5ec\uc2a4 \uccb4\ud06c",id:"\uc6f9\uc0ac\uc774\ud2b8-\ud5ec\uc2a4-\uccb4\ud06c",level:3},{value:"6.5 ETL \ud504\ub85c\uc138\uc2a4",id:"65-etl-\ud504\ub85c\uc138\uc2a4",level:2},{value:"CSV \u2192 Database ETL",id:"csv--database-etl",level:3},{value:"6.6 DevOps \uc790\ub3d9\ud654",id:"66-devops-\uc790\ub3d9\ud654",level:2},{value:"GitHub \ubc30\ud3ec \uc54c\ub9bc",id:"github-\ubc30\ud3ec-\uc54c\ub9bc",level:3},{value:"6.7 Python\uc73c\ub85c n8n \uad00\ub9ac",id:"67-python\uc73c\ub85c-n8n-\uad00\ub9ac",level:2},{value:"\uc6cc\ud06c\ud50c\ub85c\uc6b0 \ubc31\uc5c5 \ubc0f \ubc30\ud3ec",id:"\uc6cc\ud06c\ud50c\ub85c\uc6b0-\ubc31\uc5c5-\ubc0f-\ubc30\ud3ec",level:3},{value:"6.8 \ud504\ub85c\ub355\uc158 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"68-\ud504\ub85c\ub355\uc158-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:2},{value:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"\uc5d0\ub7ec \ucc98\ub9ac \ud328\ud134",id:"\uc5d0\ub7ec-\ucc98\ub9ac-\ud328\ud134",level:3},{value:"6.9 \ubcf4\uc548 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"69-\ubcf4\uc548-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:2},{value:"6.10 \uc131\ub2a5 \ucd5c\uc801\ud654 \ud301",id:"610-\uc131\ub2a5-\ucd5c\uc801\ud654-\ud301",level:2},{value:"\ubc30\uce58 \ucc98\ub9ac",id:"\ubc30\uce58-\ucc98\ub9ac",level:3},{value:"\ubcd1\ub82c \uc2e4\ud589",id:"\ubcd1\ub82c-\uc2e4\ud589",level:3},{value:"6.11 \ud2b8\ub7ec\ube14\uc288\ud305 \uac00\uc774\ub4dc",id:"611-\ud2b8\ub7ec\ube14\uc288\ud305-\uac00\uc774\ub4dc",level:2},{value:"\uc77c\ubc18\uc801\uc778 \ubb38\uc81c",id:"\uc77c\ubc18\uc801\uc778-\ubb38\uc81c",level:3},{value:"6.12 \uc5f0\uc2b5 \ubb38\uc81c",id:"612-\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \uc790\ub3d9 \ubc31\uc5c5 \uc2dc\uc2a4\ud15c",id:"\ubb38\uc81c-1-\uc790\ub3d9-\ubc31\uc5c5-\uc2dc\uc2a4\ud15c",level:3},{value:"\ubb38\uc81c 2: \uba40\ud2f0 \ucc44\ub110 \uc54c\ub9bc",id:"\ubb38\uc81c-2-\uba40\ud2f0-\ucc44\ub110-\uc54c\ub9bc",level:3},{value:"6.13 \uc694\uc57d",id:"613-\uc694\uc57d",level:2}];function c(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"6-\uc2e4\uc804-\uc608\uc81c",children:"6. \uc2e4\uc804 \uc608\uc81c"})}),"\n",(0,s.jsx)(e.p,{children:"\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc2e4\uc81c n8n \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc608\uc81c\ub97c \ubc30\uc6cc\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h2,{id:"61-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778-\uad6c\ucd95",children:"6.1 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95"}),"\n",(0,s.jsx)(e.h3,{id:"crm--data-warehouse-\ud30c\uc774\ud504\ub77c\uc778",children:"CRM \u2192 Data Warehouse \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'// \uc6cc\ud06c\ud50c\ub85c\uc6b0: Salesforce \u2192 PostgreSQL ETL\n{\n  "nodes": [\n    {\n      "name": "Every 6 hours",\n      "type": "n8n-nodes-base.cron",\n      "parameters": {\n        "triggerTimes": {\n          "item": [\n            {\n              "mode": "everyX",\n              "value": 6,\n              "unit": "hours"\n            }\n          ]\n        }\n      }\n    },\n    {\n      "name": "Get Salesforce Contacts",\n      "type": "n8n-nodes-base.salesforce",\n      "parameters": {\n        "operation": "getAll",\n        "resource": "contact",\n        "returnAll": true,\n        "options": {\n          "fields": "Id,Name,Email,Phone,CreatedDate,LastModifiedDate"\n        }\n      }\n    },\n    {\n      "name": "Transform Data",\n      "type": "n8n-nodes-base.function",\n      "parameters": {\n        "functionCode": `\nconst items = $input.all();\n\nreturn items.map(item => ({\n  json: {\n    external_id: item.json.Id,\n    name: item.json.Name,\n    email: item.json.Email?.toLowerCase(),\n    phone: item.json.Phone,\n    created_at: item.json.CreatedDate,\n    updated_at: item.json.LastModifiedDate,\n    synced_at: new Date().toISOString()\n  }\n}));\n        `\n      }\n    },\n    {\n      "name": "Upsert to PostgreSQL",\n      "type": "n8n-nodes-base.postgres",\n      "parameters": {\n        "operation": "executeQuery",\n        "query": `\nINSERT INTO contacts (external_id, name, email, phone, created_at, updated_at, synced_at)\nVALUES ($1, $2, $3, $4, $5, $6, $7)\nON CONFLICT (external_id)\nDO UPDATE SET\n  name = EXCLUDED.name,\n  email = EXCLUDED.email,\n  phone = EXCLUDED.phone,\n  updated_at = EXCLUDED.updated_at,\n  synced_at = EXCLUDED.synced_at\n        `,\n        "additionalFields": {\n          "mode": "independently"\n        }\n      }\n    },\n    {\n      "name": "Log Success",\n      "type": "n8n-nodes-base.httpRequest",\n      "parameters": {\n        "method": "POST",\n        "url": "https://api.slack.com/webhooks/xxx",\n        "jsonParameters": true,\n        "bodyParametersJson": {\n          "text": "\u2705 Synced {{$json.count}} contacts from Salesforce"\n        }\n      }\n    }\n  ],\n  "connections": {\n    "Every 6 hours": {\n      "main": [[{"node": "Get Salesforce Contacts"}]]\n    },\n    "Get Salesforce Contacts": {\n      "main": [[{"node": "Transform Data"}]]\n    },\n    "Transform Data": {\n      "main": [[{"node": "Upsert to PostgreSQL"}]]\n    },\n    "Upsert to PostgreSQL": {\n      "main": [[{"node": "Log Success"}]]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"62-\uace0\uac1d-\uc628\ubcf4\ub529-\uc790\ub3d9\ud654",children:"6.2 \uace0\uac1d \uc628\ubcf4\ub529 \uc790\ub3d9\ud654"}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e0\uaddc-\uace0\uac1d-\ud658\uc601-\ud50c\ub85c\uc6b0",children:"\uc2e0\uaddc \uace0\uac1d \ud658\uc601 \ud50c\ub85c\uc6b0"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "nodes": [\n    {\n      "name": "Webhook - New User",\n      "type": "n8n-nodes-base.webhook",\n      "parameters": {\n        "path": "new-user",\n        "responseMode": "lastNode",\n        "options": {}\n      }\n    },\n    {\n      "name": "Create in CRM",\n      "type": "n8n-nodes-base.httpRequest",\n      "parameters": {\n        "method": "POST",\n        "url": "https://api.crm.com/contacts",\n        "authentication": "headerAuth",\n        "jsonParameters": true,\n        "bodyParametersJson": {\n          "name": "={{$json.body.name}}",\n          "email": "={{$json.body.email}}",\n          "source": "website_signup",\n          "tags": ["new_user"]\n        }\n      }\n    },\n    {\n      "name": "Send Welcome Email",\n      "type": "n8n-nodes-base.emailSend",\n      "parameters": {\n        "fromEmail": "welcome@company.com",\n        "toEmail": "={{$json.body.email}}",\n        "subject": "Welcome to Our Platform!",\n        "emailFormat": "html",\n        "html": `\n<h1>Welcome, {{$json.body.name}}!</h1>\n<p>We\'re excited to have you on board.</p>\n<h2>Quick Start Guide:</h2>\n<ol>\n  <li>Complete your profile</li>\n  <li>Explore the dashboard</li>\n  <li>Join our community</li>\n</ol>\n<a href="https://app.company.com/onboarding">Get Started</a>\n        `\n      }\n    },\n    {\n      "name": "Add to Slack Channel",\n      "type": "n8n-nodes-base.slack",\n      "parameters": {\n        "resource": "message",\n        "channel": "#new-users",\n        "text": "\ud83c\udf89 New user: {{$json.body.name}} ({{$json.body.email}})",\n        "attachments": [\n          {\n            "color": "good",\n            "fields": [\n              {\n                "title": "Email",\n                "value": "={{$json.body.email}}"\n              },\n              {\n                "title": "Signup Source",\n                "value": "Website"\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      "name": "Schedule Follow-up",\n      "type": "n8n-nodes-base.httpRequest",\n      "parameters": {\n        "method": "POST",\n        "url": "https://api.n8n.local/webhooks/follow-up",\n        "jsonParameters": true,\n        "bodyParametersJson": {\n          "userId": "={{$json.body.email}}",\n          "scheduledFor": "={{DateTime.now().plus({days: 3}).toISO()}}"\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"63-\uc18c\uc15c-\ubbf8\ub514\uc5b4-\uc790\ub3d9\ud654",children:"6.3 \uc18c\uc15c \ubbf8\ub514\uc5b4 \uc790\ub3d9\ud654"}),"\n",(0,s.jsx)(e.h3,{id:"\uba40\ud2f0-\ucc44\ub110-\ud3ec\uc2a4\ud305",children:"\uba40\ud2f0 \ucc44\ub110 \ud3ec\uc2a4\ud305"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Function \ub178\ub4dc: \ucee8\ud150\uce20 \ubcc0\ud658\nconst content = $input.first().json.content;\nconst platforms = ['twitter', 'linkedin', 'facebook'];\n\nconst adaptContent = (text, platform) => {\n  const maxLengths = {\n    twitter: 280,\n    linkedin: 3000,\n    facebook: 63206\n  };\n\n  const hashtags = {\n    twitter: '#tech #automation',\n    linkedin: '',\n    facebook: '#tech'\n  };\n\n  let adapted = text;\n  if (adapted.length > maxLengths[platform]) {\n    adapted = adapted.substring(0, maxLengths[platform] - 3) + '...';\n  }\n\n  return `${adapted} ${hashtags[platform]}`;\n};\n\nreturn platforms.map(platform => ({\n  json: {\n    platform: platform,\n    content: adaptContent(content, platform),\n    scheduledTime: $input.first().json.scheduledTime\n  }\n}));\n"})}),"\n",(0,s.jsx)(e.h2,{id:"64-\ubaa8\ub2c8\ud130\ub9c1-\ubc0f-\uc54c\ub9bc-\uc2dc\uc2a4\ud15c",children:"6.4 \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc \uc2dc\uc2a4\ud15c"}),"\n",(0,s.jsx)(e.h3,{id:"\uc6f9\uc0ac\uc774\ud2b8-\ud5ec\uc2a4-\uccb4\ud06c",children:"\uc6f9\uc0ac\uc774\ud2b8 \ud5ec\uc2a4 \uccb4\ud06c"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "nodes": [\n    {\n      "name": "Every 5 minutes",\n      "type": "n8n-nodes-base.cron",\n      "parameters": {\n        "triggerTimes": {\n          "item": [\n            {\n              "mode": "everyX",\n              "value": 5,\n              "unit": "minutes"\n            }\n          ]\n        }\n      }\n    },\n    {\n      "name": "Check Endpoints",\n      "type": "n8n-nodes-base.function",\n      "parameters": {\n        "functionCode": `\nconst endpoints = [\n  { name: \'Homepage\', url: \'https://example.com\' },\n  { name: \'API\', url: \'https://api.example.com/health\' },\n  { name: \'Dashboard\', url: \'https://dashboard.example.com\' }\n];\n\nreturn endpoints.map(endpoint => ({\n  json: endpoint\n}));\n        `\n      }\n    },\n    {\n      "name": "HTTP Request",\n      "type": "n8n-nodes-base.httpRequest",\n      "parameters": {\n        "url": "={{$json.url}}",\n        "options": {\n          "timeout": 10000,\n          "redirect": {\n            "redirect": {\n              "followRedirects": true,\n              "maxRedirects": 3\n            }\n          }\n        }\n      }\n    },\n    {\n      "name": "Check Response",\n      "type": "n8n-nodes-base.if",\n      "parameters": {\n        "conditions": {\n          "number": [\n            {\n              "value1": "={{$json.statusCode}}",\n              "operation": "notEqual",\n              "value2": 200\n            }\n          ]\n        }\n      }\n    },\n    {\n      "name": "Alert on Failure",\n      "type": "n8n-nodes-base.slack",\n      "parameters": {\n        "resource": "message",\n        "channel": "#alerts",\n        "text": "\ud83d\udea8 Service Down Alert",\n        "attachments": [\n          {\n            "color": "danger",\n            "fields": [\n              {\n                "title": "Service",\n                "value": "={{$json.name}}"\n              },\n              {\n                "title": "URL",\n                "value": "={{$json.url}}"\n              },\n              {\n                "title": "Status Code",\n                "value": "={{$json.statusCode}}"\n              },\n              {\n                "title": "Time",\n                "value": "={{DateTime.now().toFormat(\'yyyy-MM-dd HH:mm:ss\')}}"\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      "name": "Store in Database",\n      "type": "n8n-nodes-base.postgres",\n      "parameters": {\n        "operation": "insert",\n        "table": "health_checks",\n        "columns": "service_name, url, status_code, response_time, checked_at",\n        "additionalFields": {}\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"65-etl-\ud504\ub85c\uc138\uc2a4",children:"6.5 ETL \ud504\ub85c\uc138\uc2a4"}),"\n",(0,s.jsx)(e.h3,{id:"csv--database-etl",children:"CSV \u2192 Database ETL"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Function \ub178\ub4dc: CSV \ub370\uc774\ud130 \ubcc0\ud658 \ubc0f \uac80\uc99d\nconst items = $input.all();\n\nconst validateEmail = (email) => {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n};\n\nconst cleanPhone = (phone) => {\n  return phone.replace(/[^0-9]/g, '');\n};\n\nconst validItems = [];\nconst errorItems = [];\n\nitems.forEach(item => {\n  const data = item.json;\n\n  // \uac80\uc99d\n  const errors = [];\n\n  if (!data.name || data.name.trim() === '') {\n    errors.push('Name is required');\n  }\n\n  if (!validateEmail(data.email)) {\n    errors.push('Invalid email format');\n  }\n\n  if (errors.length > 0) {\n    errorItems.push({\n      json: {\n        ...data,\n        errors: errors\n      }\n    });\n  } else {\n    validItems.push({\n      json: {\n        name: data.name.trim(),\n        email: data.email.toLowerCase(),\n        phone: cleanPhone(data.phone || ''),\n        company: data.company || null,\n        imported_at: new Date().toISOString()\n      }\n    });\n  }\n});\n\n// \uc5d0\ub7ec \ub85c\uadf8 \uc800\uc7a5\nif (errorItems.length > 0) {\n  $execution.customData.set('errors', errorItems);\n}\n\nreturn validItems;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"66-devops-\uc790\ub3d9\ud654",children:"6.6 DevOps \uc790\ub3d9\ud654"}),"\n",(0,s.jsx)(e.h3,{id:"github-\ubc30\ud3ec-\uc54c\ub9bc",children:"GitHub \ubc30\ud3ec \uc54c\ub9bc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "nodes": [\n    {\n      "name": "GitHub Webhook",\n      "type": "n8n-nodes-base.webhook",\n      "parameters": {\n        "path": "github-deployment",\n        "responseMode": "lastNode"\n      }\n    },\n    {\n      "name": "Parse Event",\n      "type": "n8n-nodes-base.function",\n      "parameters": {\n        "functionCode": `\nconst event = $input.first().json;\n\nconst deployment = {\n  environment: event.deployment.environment,\n  sha: event.deployment.sha.substring(0, 7),\n  creator: event.deployment.creator.login,\n  repository: event.repository.full_name,\n  status: event.deployment_status.state,\n  url: event.deployment_status.target_url\n};\n\nreturn [{json: deployment}];\n        `\n      }\n    },\n    {\n      "name": "Notify Team",\n      "type": "n8n-nodes-base.slack",\n      "parameters": {\n        "resource": "message",\n        "channel": "#deployments",\n        "text": "",\n        "blocksUi": {\n          "blocksValues": [\n            {\n              "type": "section",\n              "text": {\n                "type": "mrkdwn",\n                "text": `*Deployment Status: {{$json.status}}*\\n\\n*Environment:* {{$json.environment}}\\n*Repository:* {{$json.repository}}\\n*Commit:* {{$json.sha}}\\n*Deployed by:* {{$json.creator}}\\n\\n<{{$json.url}}|View Deployment>`\n              }\n            }\n          ]\n        }\n      }\n    },\n    {\n      "name": "Update Status Page",\n      "type": "n8n-nodes-base.httpRequest",\n      "parameters": {\n        "method": "POST",\n        "url": "https://api.statuspage.io/v1/pages/xxx/incidents",\n        "authentication": "headerAuth",\n        "jsonParameters": true,\n        "bodyParametersJson": {\n          "incident": {\n            "name": "Deployment to {{$json.environment}}",\n            "status": "monitoring",\n            "body": "Version {{$json.sha}} deployed by {{$json.creator}}"\n          }\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"67-python\uc73c\ub85c-n8n-\uad00\ub9ac",children:"6.7 Python\uc73c\ub85c n8n \uad00\ub9ac"}),"\n",(0,s.jsx)(e.h3,{id:"\uc6cc\ud06c\ud50c\ub85c\uc6b0-\ubc31\uc5c5-\ubc0f-\ubc30\ud3ec",children:"\uc6cc\ud06c\ud50c\ub85c\uc6b0 \ubc31\uc5c5 \ubc0f \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# n8n_manager.py\nimport requests\nimport json\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass N8nManager:\n    \"\"\"n8n \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uad00\ub9ac \ud074\ub798\uc2a4\"\"\"\n\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.headers = {\n            'X-N8N-API-KEY': api_key,\n            'Content-Type': 'application/json'\n        }\n\n    def backup_all_workflows(self, backup_dir='./backups'):\n        \"\"\"\ubaa8\ub4e0 \uc6cc\ud06c\ud50c\ub85c\uc6b0 \ubc31\uc5c5\"\"\"\n        # \ubc31\uc5c5 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n        backup_path = Path(backup_dir)\n        backup_path.mkdir(exist_ok=True)\n\n        # \uc6cc\ud06c\ud50c\ub85c\uc6b0 \ubaa9\ub85d \uac00\uc838\uc624\uae30\n        response = requests.get(\n            f'{self.base_url}/workflows',\n            headers=self.headers\n        )\n        workflows = response.json()['data']\n\n        # \uac01 \uc6cc\ud06c\ud50c\ub85c\uc6b0 \ubc31\uc5c5\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n\n        for workflow in workflows:\n            filename = f\"{workflow['name']}_{timestamp}.json\"\n            filepath = backup_path / filename\n\n            with open(filepath, 'w', encoding='utf-8') as f:\n                json.dump(workflow, f, indent=2, ensure_ascii=False)\n\n            print(f\"\u2705 Backed up: {filename}\")\n\n        print(f\"\\n\ud83d\udce6 Total: {len(workflows)} workflows backed up\")\n\n    def deploy_workflow(self, filepath, activate=True):\n        \"\"\"\uc6cc\ud06c\ud50c\ub85c\uc6b0 \ubc30\ud3ec\"\"\"\n        with open(filepath, 'r', encoding='utf-8') as f:\n            workflow = json.load(f)\n\n        # ID \uc81c\uac70 (\uc0c8\ub85c \uc0dd\uc131)\n        if 'id' in workflow:\n            del workflow['id']\n\n        # \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc0dd\uc131\n        response = requests.post(\n            f'{self.base_url}/workflows',\n            headers=self.headers,\n            json=workflow\n        )\n\n        if response.status_code == 201:\n            workflow_id = response.json()['id']\n            print(f\"\u2705 Deployed: {workflow['name']} (ID: {workflow_id})\")\n\n            # \ud65c\uc131\ud654\n            if activate:\n                self.activate_workflow(workflow_id)\n\n            return workflow_id\n        else:\n            print(f\"\u274c Failed to deploy: {response.text}\")\n            return None\n\n    def activate_workflow(self, workflow_id):\n        \"\"\"\uc6cc\ud06c\ud50c\ub85c\uc6b0 \ud65c\uc131\ud654\"\"\"\n        response = requests.patch(\n            f'{self.base_url}/workflows/{workflow_id}',\n            headers=self.headers,\n            json={'active': True}\n        )\n\n        if response.status_code == 200:\n            print(f\"\u2705 Activated workflow: {workflow_id}\")\n        else:\n            print(f\"\u274c Failed to activate: {response.text}\")\n\n    def sync_workflows(self, source_env, target_env):\n        \"\"\"\ud658\uacbd \uac04 \uc6cc\ud06c\ud50c\ub85c\uc6b0 \ub3d9\uae30\ud654\"\"\"\n        # Source\uc5d0\uc11c \ubc31\uc5c5\n        print(f\"\ud83d\udce5 Backing up from {source_env}...\")\n        self.base_url = source_env\n        self.backup_all_workflows('./temp_sync')\n\n        # Target\uc73c\ub85c \ubc30\ud3ec\n        print(f\"\\n\ud83d\udce4 Deploying to {target_env}...\")\n        self.base_url = target_env\n\n        for filepath in Path('./temp_sync').glob('*.json'):\n            self.deploy_workflow(filepath)\n\n        print(\"\\n\u2705 Sync completed\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nif __name__ == '__main__':\n    manager = N8nManager(\n        base_url='http://localhost:5678/api/v1',\n        api_key='your_api_key'\n    )\n\n    # \ubc31\uc5c5\n    manager.backup_all_workflows()\n\n    # \ubc30\ud3ec\n    # manager.deploy_workflow('./workflows/customer_onboarding.json')\n\n    # \ud658\uacbd \uac04 \ub3d9\uae30\ud654\n    # manager.sync_workflows(\n    #     source_env='http://dev.n8n.local/api/v1',\n    #     target_env='http://prod.n8n.local/api/v1'\n    # )\n"})}),"\n",(0,s.jsx)(e.h2,{id:"68-\ud504\ub85c\ub355\uc158-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"6.8 \ud504\ub85c\ub355\uc158 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,s.jsx)(e.h3,{id:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markdown",children:"**\uc778\ud504\ub77c**\n- [ ] \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0ac\uc6a9 (PostgreSQL \uad8c\uc7a5)\n- [ ] Queue \ubaa8\ub4dc \ud65c\uc131\ud654\n- [ ] \uc6cc\ucee4 \uc2a4\ucf00\uc77c\ub9c1\n- [ ] \uc790\ub3d9 \ubc31\uc5c5 \uc124\uc815\n- [ ] \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \ub85c\uae45\n\n**\ubcf4\uc548**\n- [ ] HTTPS \ud65c\uc131\ud654\n- [ ] \uc778\uc99d \uc124\uc815 (Basic Auth \ub610\ub294 OAuth)\n- [ ] API \ud0a4 \ub85c\ud14c\uc774\uc158\n- [ ] Webhook \uc11c\uba85 \uac80\uc99d\n- [ ] \ud658\uacbd \ubcc0\uc218\ub85c \uc2dc\ud06c\ub9bf \uad00\ub9ac\n\n**\uc6cc\ud06c\ud50c\ub85c\uc6b0**\n- [ ] \uc5d0\ub7ec \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc124\uc815\n- [ ] \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1 \ucd94\uac00\n- [ ] \ud0c0\uc784\uc544\uc6c3 \uc124\uc815\n- [ ] \ub85c\uae45 \ub178\ub4dc \ucd94\uac00\n- [ ] \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc5d0\uc11c \uac80\uc99d\n\n**\uc131\ub2a5**\n- [ ] \ubc30\uce58 \ucc98\ub9ac \ud65c\uc6a9\n- [ ] \ubcd1\ub82c \uc2e4\ud589 \ucd5c\uc801\ud654\n- [ ] \ubd88\ud544\uc694\ud55c \ub178\ub4dc \uc81c\uac70\n- [ ] \uce90\uc2f1 \uc804\ub7b5 \uad6c\ud604\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc5d0\ub7ec-\ucc98\ub9ac-\ud328\ud134",children:"\uc5d0\ub7ec \ucc98\ub9ac \ud328\ud134"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Function \ub178\ub4dc: \uacac\uace0\ud55c \uc5d0\ub7ec \ucc98\ub9ac\nasync function robustExecution() {\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY = 1000; // 1\ucd08\n\n  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {\n    try {\n      // \uc2e4\uc81c \uc791\uc5c5\n      const result = await performTask();\n      return [{json: result}];\n\n    } catch (error) {\n      console.error(`Attempt ${attempt} failed:`, error.message);\n\n      if (attempt === MAX_RETRIES) {\n        // \ucd5c\uc885 \uc2e4\ud328 - \uc54c\ub9bc \ubc1c\uc1a1\n        await $http.post('https://hooks.slack.com/xxx', {\n          text: `\ud83d\udea8 Workflow failed after ${MAX_RETRIES} attempts: ${error.message}`\n        });\n\n        throw error;\n      }\n\n      // \uc9c0\uc218 \ubc31\uc624\ud504\ub85c \uc7ac\uc2dc\ub3c4\n      await new Promise(resolve =>\n        setTimeout(resolve, RETRY_DELAY * Math.pow(2, attempt - 1))\n      );\n    }\n  }\n}\n\nreturn await robustExecution();\n"})}),"\n",(0,s.jsx)(e.h2,{id:"69-\ubcf4\uc548-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"6.9 \ubcf4\uc548 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markdown",children:"**Credentials**\n- [ ] OAuth2 \uc0ac\uc6a9 (\uac00\ub2a5\ud55c \uacbd\uc6b0)\n- [ ] API \ud0a4\ub97c \ud658\uacbd \ubcc0\uc218\ub85c \uc800\uc7a5\n- [ ] \uc815\uae30\uc801\uc778 \ud0a4 \ub85c\ud14c\uc774\uc158\n- [ ] \ucd5c\uc18c \uad8c\ud55c \uc6d0\uce59\n\n**Network**\n- [ ] HTTPS \uac15\uc81c\n- [ ] IP \ud654\uc774\ud2b8\ub9ac\uc2a4\ud2b8\n- [ ] Rate limiting\n- [ ] CORS \uc124\uc815\n\n**\ub370\uc774\ud130**\n- [ ] \ubbfc\uac10\ud55c \ub370\uc774\ud130 \uc554\ud638\ud654\n- [ ] PII \ub370\uc774\ud130 \ucd5c\uc18c\ud654\n- [ ] \ub370\uc774\ud130 \ubcf4\uc874 \uc815\ucc45\n- [ ] GDPR \uc900\uc218\n"})}),"\n",(0,s.jsx)(e.h2,{id:"610-\uc131\ub2a5-\ucd5c\uc801\ud654-\ud301",children:"6.10 \uc131\ub2a5 \ucd5c\uc801\ud654 \ud301"}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\uce58-\ucc98\ub9ac",children:"\ubc30\uce58 \ucc98\ub9ac"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// \ud070 \ub370\uc774\ud130\uc14b\uc744 \ubc30\uce58\ub85c \ucc98\ub9ac\nconst items = $input.all();\nconst BATCH_SIZE = 100;\n\nconst batches = [];\nfor (let i = 0; i < items.length; i += BATCH_SIZE) {\n  batches.push(items.slice(i, i + BATCH_SIZE));\n}\n\nreturn batches.map(batch => ({\n  json: { batch: batch }\n}));\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ubcd1\ub82c-\uc2e4\ud589",children:"\ubcd1\ub82c \uc2e4\ud589"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markdown",children:"**Split in Batches \ub178\ub4dc \uc0ac\uc6a9**\n1. Split in Batches\ub85c \ub370\uc774\ud130 \ubd84\ud560\n2. \uac01 \ubc30\uce58 \ubcd1\ub82c \ucc98\ub9ac\n3. Merge\ub85c \uacb0\uacfc \ud1b5\ud569\n\n**\uc608\uc0c1 \uc131\ub2a5 \ud5a5\uc0c1:**\n- \uc21c\ucc28 \ucc98\ub9ac: 100\uac1c \xd7 1\ucd08 = 100\ucd08\n- \ubcd1\ub82c \ucc98\ub9ac (10\uac1c \ubc30\uce58): 10\uac1c \ubc30\uce58 \xd7 1\ucd08 = 10\ucd08\n"})}),"\n",(0,s.jsx)(e.h2,{id:"611-\ud2b8\ub7ec\ube14\uc288\ud305-\uac00\uc774\ub4dc",children:"6.11 \ud2b8\ub7ec\ube14\uc288\ud305 \uac00\uc774\ub4dc"}),"\n",(0,s.jsx)(e.h3,{id:"\uc77c\ubc18\uc801\uc778-\ubb38\uc81c",children:"\uc77c\ubc18\uc801\uc778 \ubb38\uc81c"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markdown",children:"**\ubb38\uc81c: Workflow \uc2e4\ud589\uc774 \ub290\ub9bc**\n\ud574\uacb0:\n- Queue \ubaa8\ub4dc \ud65c\uc131\ud654\n- \ubc30\uce58 \ucc98\ub9ac \uc0ac\uc6a9\n- \ubd88\ud544\uc694\ud55c \ub178\ub4dc \uc81c\uac70\n- Database \uc778\ub371\uc2a4 \ud655\uc778\n\n**\ubb38\uc81c: Memory \ubd80\uc871**\n\ud574\uacb0:\n- Split in Batches \uc0ac\uc6a9\n- Binary \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d\n- Worker \uba54\ubaa8\ub9ac \uc99d\uac00\n- Pagination \ud65c\uc6a9\n\n**\ubb38\uc81c: Webhook timeout**\n\ud574\uacb0:\n- Async \ucc98\ub9ac \uc0ac\uc6a9\n- Response \uc989\uc2dc \ubc18\ud658\n- Background job\uc73c\ub85c \ucc98\ub9ac\n- Timeout \uc2dc\uac04 \uc99d\uac00\n"})}),"\n",(0,s.jsx)(e.h2,{id:"612-\uc5f0\uc2b5-\ubb38\uc81c",children:"6.12 \uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,s.jsx)(e.h3,{id:"\ubb38\uc81c-1-\uc790\ub3d9-\ubc31\uc5c5-\uc2dc\uc2a4\ud15c",children:"\ubb38\uc81c 1: \uc790\ub3d9 \ubc31\uc5c5 \uc2dc\uc2a4\ud15c"}),"\n",(0,s.jsx)(e.p,{children:"PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c S3\uc5d0 \ubc31\uc5c5\ud558\ub294 \uc6cc\ud06c\ud50c\ub85c\uc6b0\ub97c \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "nodes": [\n    {\n      "name": "Daily at 2 AM",\n      "type": "n8n-nodes-base.cron",\n      "parameters": {\n        "triggerTimes": {\n          "item": [{"mode": "custom", "minute": 0, "hour": 2}]\n        }\n      }\n    },\n    {\n      "name": "Execute pg_dump",\n      "type": "n8n-nodes-base.executeCommand",\n      "parameters": {\n        "command": "pg_dump -h localhost -U user -d mydb > /tmp/backup.sql"\n      }\n    },\n    {\n      "name": "Upload to S3",\n      "type": "n8n-nodes-base.awsS3",\n      "parameters": {\n        "operation": "upload",\n        "bucketName": "backups",\n        "fileName": "={{DateTime.now().toFormat(\'yyyyMMdd\')}}_backup.sql",\n        "binaryData": true\n      }\n    },\n    {\n      "name": "Notify Success",\n      "type": "n8n-nodes-base.slack",\n      "parameters": {\n        "text": "\u2705 Database backup completed"\n      }\n    }\n  ]\n}\n'})})]}),"\n",(0,s.jsx)(e.h3,{id:"\ubb38\uc81c-2-\uba40\ud2f0-\ucc44\ub110-\uc54c\ub9bc",children:"\ubb38\uc81c 2: \uba40\ud2f0 \ucc44\ub110 \uc54c\ub9bc"}),"\n",(0,s.jsx)(e.p,{children:"\uc5ec\ub7ec \ucc44\ub110(Slack, Email, SMS)\ub85c \ub3d9\uc2dc\uc5d0 \uc54c\ub9bc\uc744 \ubc1c\uc1a1\ud558\ub294 \uc6cc\ud06c\ud50c\ub85c\uc6b0\ub97c \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.p,{children:"Function \ub178\ub4dc\uc5d0\uc11c 3\uac1c \uc544\uc774\ud15c \uc0dd\uc131 \ud6c4 \uac01\uac01 \ub2e4\ub978 \ucc44\ub110\ub85c \ubd84\uae30:"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"return [\n  {json: {channel: 'slack', message: $json.message}},\n  {json: {channel: 'email', message: $json.message}},\n  {json: {channel: 'sms', message: $json.message}}\n];\n"})}),(0,s.jsx)(e.p,{children:"Switch \ub178\ub4dc\ub85c channel\uc5d0 \ub530\ub77c \ubd84\uae30 \ucc98\ub9ac"})]}),"\n",(0,s.jsx)(e.h2,{id:"613-\uc694\uc57d",children:"6.13 \uc694\uc57d"}),"\n",(0,s.jsx)(e.admonition,{title:"\ud575\uc2ec \ud3ec\uc778\ud2b8",type:"tip",children:(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc5d0\ub7ec \ucc98\ub9ac"}),": \ubaa8\ub4e0 \uc6cc\ud06c\ud50c\ub85c\uc6b0\uc5d0 \ud544\uc218"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ubaa8\ub2c8\ud130\ub9c1"}),": \uc2e4\ud589 \ub85c\uadf8\uc640 \uc54c\ub9bc \uc124\uc815"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ubcf4\uc548"}),": Credentials \uc548\uc804\ud558\uac8c \uad00\ub9ac"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc131\ub2a5"}),": \ubc30\uce58 \ucc98\ub9ac\uc640 \ubcd1\ub82c \uc2e4\ud589"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ubc31\uc5c5"}),": \uc815\uae30\uc801\uc778 \uc6cc\ud06c\ud50c\ub85c\uc6b0 \ubc31\uc5c5"]}),"\n"]})}),"\n",(0,s.jsx)(e.admonition,{title:"\ub2e4\uc74c \ub2e8\uacc4",type:"tip",children:(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"n8n Community Forum \uac00\uc785"}),"\n",(0,s.jsx)(e.li,{children:"\uc6cc\ud06c\ud50c\ub85c\uc6b0 \ud15c\ud50c\ub9bf \ud0d0\uc0c9"}),"\n",(0,s.jsx)(e.li,{children:"\ucee4\uc2a4\ud140 \ub178\ub4dc \uac1c\ubc1c \uc2dc\uc791"}),"\n",(0,s.jsx)(e.li,{children:"\ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uacbd\ud5d8 \uc313\uae30"}),"\n"]})}),"\n",(0,s.jsx)(e.p,{children:"\ucd95\ud558\ud569\ub2c8\ub2e4! n8n \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uc790\ub3d9\ud654\ub97c \ub9c8\uc2a4\ud130\ud588\uc2b5\ub2c8\ub2e4!"}),"\n",(0,s.jsx)(e.p,{children:"\uc774\uc81c \uc5ec\ub7ec\ubd84\uc758 \uc5c5\ubb34\ub97c \uc790\ub3d9\ud654\ud574\ubcf4\uc138\uc694!"})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var a=t(6540);const s={},o=a.createContext(s);function r(n){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);