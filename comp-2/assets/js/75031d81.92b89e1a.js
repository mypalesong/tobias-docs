"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2542],{8453:(n,e,a)=>{a.d(e,{R:()=>l,x:()=>d});var t=a(6540);const s={},r=t.createContext(s);function l(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(r.Provider,{value:e},n.children)}},9021:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>i,contentTitle:()=>d,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"python/practical/data-analysis","title":"4. \ub370\uc774\ud130 \ubd84\uc11d","description":"Python\uc740 \ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc704\ud55c \uac15\ub825\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4. NumPy\uc640 pandas\ub97c \uc911\uc2ec\uc73c\ub85c \ub370\uc774\ud130 \ucc98\ub9ac, \ubd84\uc11d, \uc2dc\uac01\ud654 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.","source":"@site/docs/python/practical/data-analysis.md","sourceDirName":"python/practical","slug":"/python/practical/data-analysis","permalink":"/tobias-docs/comp-2/docs/python/practical/data-analysis","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/practical/data-analysis.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"pythonSidebar","previous":{"title":"3. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9","permalink":"/tobias-docs/comp-2/docs/python/practical/database"},"next":{"title":"5. \uc790\ub3d9\ud654","permalink":"/tobias-docs/comp-2/docs/python/practical/automation"}}');var s=a(4848),r=a(8453);const l={sidebar_position:4},d="4. \ub370\uc774\ud130 \ubd84\uc11d",i={},o=[{value:"4.1 NumPy \uae30\ucd08",id:"41-numpy-\uae30\ucd08",level:2},{value:"\ubc30\uc5f4 \uc0dd\uc131 \ubc0f \uc870\uc791",id:"\ubc30\uc5f4-\uc0dd\uc131-\ubc0f-\uc870\uc791",level:3},{value:"\ubc30\uc5f4 \uc5f0\uc0b0",id:"\ubc30\uc5f4-\uc5f0\uc0b0",level:3},{value:"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305",id:"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305",level:3},{value:"\ubc30\uc5f4 \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1",id:"\ubc30\uc5f4-\uc778\ub371\uc2f1\uacfc-\uc2ac\ub77c\uc774\uc2f1",level:3},{value:"4.2 pandas \uae30\ucd08",id:"42-pandas-\uae30\ucd08",level:2},{value:"Series\uc640 DataFrame",id:"series\uc640-dataframe",level:3},{value:"\ub370\uc774\ud130 \uc77d\uae30 \ubc0f \uc4f0\uae30",id:"\ub370\uc774\ud130-\uc77d\uae30-\ubc0f-\uc4f0\uae30",level:3},{value:"\ub370\uc774\ud130 \ud0d0\uc0c9",id:"\ub370\uc774\ud130-\ud0d0\uc0c9",level:3},{value:"4.3 \ub370\uc774\ud130 \uc870\uc791",id:"43-\ub370\uc774\ud130-\uc870\uc791",level:2},{value:"\ud544\ud130\ub9c1",id:"\ud544\ud130\ub9c1",level:3},{value:"\uc815\ub82c",id:"\uc815\ub82c",level:3},{value:"\uc0c8\ub85c\uc6b4 \uc5f4 \ucd94\uac00 \ubc0f \uc218\uc815",id:"\uc0c8\ub85c\uc6b4-\uc5f4-\ucd94\uac00-\ubc0f-\uc218\uc815",level:3},{value:"\uadf8\ub8f9\ud654\uc640 \uc9d1\uacc4",id:"\uadf8\ub8f9\ud654\uc640-\uc9d1\uacc4",level:3},{value:"\ub370\uc774\ud130 \ubcd1\ud569",id:"\ub370\uc774\ud130-\ubcd1\ud569",level:3},{value:"4.4 \uacb0\uce21\uce58 \ucc98\ub9ac",id:"44-\uacb0\uce21\uce58-\ucc98\ub9ac",level:2},{value:"4.5 \ub370\uc774\ud130 \uc2dc\uac01\ud654",id:"45-\ub370\uc774\ud130-\uc2dc\uac01\ud654",level:2},{value:"Matplotlib \uae30\ucd08",id:"matplotlib-\uae30\ucd08",level:3},{value:"Seaborn \uc2dc\uac01\ud654",id:"seaborn-\uc2dc\uac01\ud654",level:3},{value:"pandas \ub0b4\uc7a5 \uc2dc\uac01\ud654",id:"pandas-\ub0b4\uc7a5-\uc2dc\uac01\ud654",level:3},{value:"4.6 \ud1b5\uacc4 \ubd84\uc11d \uae30\ucd08",id:"46-\ud1b5\uacc4-\ubd84\uc11d-\uae30\ucd08",level:2},{value:"4.7 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130",id:"47-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130",level:2},{value:"4.8 \uc2e4\uc804 \uc608\uc81c",id:"48-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\uc608\uc81c 1: \ud310\ub9e4 \ub370\uc774\ud130 \ubd84\uc11d",id:"\uc608\uc81c-1-\ud310\ub9e4-\ub370\uc774\ud130-\ubd84\uc11d",level:3},{value:"\uc608\uc81c 2: \uace0\uac1d \uc138\uadf8\uba3c\ud14c\uc774\uc158",id:"\uc608\uc81c-2-\uace0\uac1d-\uc138\uadf8\uba3c\ud14c\uc774\uc158",level:3},{value:"\uc608\uc81c 3: \uc8fc\uc2dd \ub370\uc774\ud130 \ubd84\uc11d",id:"\uc608\uc81c-3-\uc8fc\uc2dd-\ub370\uc774\ud130-\ubd84\uc11d",level:3},{value:"\uc608\uc81c 4: \uc124\ubb38\uc870\uc0ac \ub370\uc774\ud130 \ubd84\uc11d",id:"\uc608\uc81c-4-\uc124\ubb38\uc870\uc0ac-\ub370\uc774\ud130-\ubd84\uc11d",level:3},{value:"4.9 Jupyter Notebook \uc6cc\ud06c\ud50c\ub85c\uc6b0",id:"49-jupyter-notebook-\uc6cc\ud06c\ud50c\ub85c\uc6b0",level:2},{value:"Jupyter Notebook \uc2dc\uc791\ud558\uae30",id:"jupyter-notebook-\uc2dc\uc791\ud558\uae30",level:3},{value:"Notebook \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"notebook-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:3},{value:"\uc720\uc6a9\ud55c \ub9e4\uc9c1 \ucee4\ub9e8\ub4dc",id:"\uc720\uc6a9\ud55c-\ub9e4\uc9c1-\ucee4\ub9e8\ub4dc",level:3},{value:"4.10 \ub370\uc774\ud130 \ud074\ub9ac\ub2dd \ud30c\uc774\ud504\ub77c\uc778",id:"410-\ub370\uc774\ud130-\ud074\ub9ac\ub2dd-\ud30c\uc774\ud504\ub77c\uc778",level:2},{value:"4.11 \ub370\uc774\ud130 \ubd84\uc11d \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"411-\ub370\uc774\ud130-\ubd84\uc11d-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:2},{value:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"\uc131\ub2a5 \ucd5c\uc801\ud654 \ud301",id:"\uc131\ub2a5-\ucd5c\uc801\ud654-\ud301",level:3},{value:"\ucf54\ub4dc \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc",id:"\ucf54\ub4dc-\uc2a4\ud0c0\uc77c-\uac00\uc774\ub4dc",level:3},{value:"4.12 \uc5f0\uc2b5 \ubb38\uc81c",id:"412-\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \ub0a0\uc528 \ub370\uc774\ud130 \ubd84\uc11d",id:"\ubb38\uc81c-1-\ub0a0\uc528-\ub370\uc774\ud130-\ubd84\uc11d",level:3},{value:"\ubb38\uc81c 2: \uc804\uc790\uc0c1\uac70\ub798 \ub370\uc774\ud130 \ubd84\uc11d",id:"\ubb38\uc81c-2-\uc804\uc790\uc0c1\uac70\ub798-\ub370\uc774\ud130-\ubd84\uc11d",level:3},{value:"\ubb38\uc81c 3: \ubcf5\ud569 \ub370\uc774\ud130 \ucc98\ub9ac",id:"\ubb38\uc81c-3-\ubcf5\ud569-\ub370\uc774\ud130-\ucc98\ub9ac",level:3},{value:"\uc694\uc57d",id:"\uc694\uc57d",level:2}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components},{Details:a}=e;return a||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"4-\ub370\uc774\ud130-\ubd84\uc11d",children:"4. \ub370\uc774\ud130 \ubd84\uc11d"})}),"\n",(0,s.jsx)(e.p,{children:"Python\uc740 \ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc704\ud55c \uac15\ub825\ud55c \ub3c4\uad6c\uc785\ub2c8\ub2e4. NumPy\uc640 pandas\ub97c \uc911\uc2ec\uc73c\ub85c \ub370\uc774\ud130 \ucc98\ub9ac, \ubd84\uc11d, \uc2dc\uac01\ud654 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h2,{id:"41-numpy-\uae30\ucd08",children:"4.1 NumPy \uae30\ucd08"}),"\n",(0,s.jsx)(e.p,{children:"NumPy\ub294 \uc218\uce58 \uacc4\uc0b0\uc744 \uc704\ud55c \ud575\uc2ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\uc5f4-\uc0dd\uc131-\ubc0f-\uc870\uc791",children:"\ubc30\uc5f4 \uc0dd\uc131 \ubc0f \uc870\uc791"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'import numpy as np\n\n# \ubc30\uc5f4 \uc0dd\uc131\narr1 = np.array([1, 2, 3, 4, 5])\narr2 = np.array([[1, 2, 3], [4, 5, 6]])\n\n# \ud2b9\uc218 \ubc30\uc5f4 \uc0dd\uc131\nzeros = np.zeros((3, 4))          # 0\uc73c\ub85c \ucc44\uc6cc\uc9c4 \ubc30\uc5f4\nones = np.ones((2, 3))            # 1\ub85c \ucc44\uc6cc\uc9c4 \ubc30\uc5f4\narange = np.arange(0, 10, 2)      # [0, 2, 4, 6, 8]\nlinspace = np.linspace(0, 1, 5)   # 0\ubd80\ud130 1\uae4c\uc9c0 5\uac1c \uade0\ub4f1 \ubd84\ud560\n\n# \ub79c\ub364 \ubc30\uc5f4\nrandom_arr = np.random.rand(3, 3)         # 0~1 \uade0\ub4f1\ubd84\ud3ec\nnormal_arr = np.random.randn(3, 3)        # \ud45c\uc900\uc815\uaddc\ubd84\ud3ec\nrandint_arr = np.random.randint(0, 10, (3, 3))  # \uc815\uc218 \ub79c\ub364\n\nprint(f"\ubc30\uc5f4 \ud615\ud0dc: {arr2.shape}")          # (2, 3)\nprint(f"\ubc30\uc5f4 \ucc28\uc6d0: {arr2.ndim}")           # 2\nprint(f"\ubc30\uc5f4 \ud06c\uae30: {arr2.size}")           # 6\nprint(f"\ub370\uc774\ud130 \ud0c0\uc785: {arr2.dtype}")        # int32 \ub610\ub294 int64\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\uc5f4-\uc5f0\uc0b0",children:"\ubc30\uc5f4 \uc5f0\uc0b0"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uae30\ubcf8 \uc5f0\uc0b0\na = np.array([1, 2, 3, 4])\nb = np.array([10, 20, 30, 40])\n\nprint(a + b)        # [11, 22, 33, 44]\nprint(a * 2)        # [2, 4, 6, 8]\nprint(a ** 2)       # [1, 4, 9, 16]\nprint(a > 2)        # [False, False, True, True]\n\n# \uc218\ud559 \ud568\uc218\nprint(np.sqrt(a))           # \uc81c\uacf1\uadfc\nprint(np.exp(a))            # \uc9c0\uc218\nprint(np.log(a))            # \uc790\uc5f0\ub85c\uadf8\nprint(np.sin(a))            # \uc0ac\uc778\n\n# \uc9d1\uacc4 \ud568\uc218\nprint(a.sum())              # \ud569\uacc4\nprint(a.mean())             # \ud3c9\uade0\nprint(a.std())              # \ud45c\uc900\ud3b8\ucc28\nprint(a.min(), a.max())     # \ucd5c\uc18c, \ucd5c\ub300\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305",children:"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc11c\ub85c \ub2e4\ub978 \ud615\ud0dc\uc758 \ubc30\uc5f4 \uc5f0\uc0b0\na = np.array([[1, 2, 3],\n              [4, 5, 6]])\nb = np.array([10, 20, 30])\n\n# b\uac00 \uac01 \ud589\uc5d0 \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\ub428\nresult = a + b\nprint(result)\n# [[11, 22, 33],\n#  [14, 25, 36]]\n\n# 2D \ubc30\uc5f4\uacfc \uc2a4\uce7c\ub77c\nmatrix = np.array([[1, 2], [3, 4]])\nprint(matrix * 10)\n# [[10, 20],\n#  [30, 40]]\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\uc5f4-\uc778\ub371\uc2f1\uacfc-\uc2ac\ub77c\uc774\uc2f1",children:"\ubc30\uc5f4 \uc778\ub371\uc2f1\uacfc \uc2ac\ub77c\uc774\uc2f1"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"arr = np.array([[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12]])\n\n# \uae30\ubcf8 \uc778\ub371\uc2f1\nprint(arr[0, 1])        # 2\nprint(arr[1])           # [5, 6, 7, 8]\n\n# \uc2ac\ub77c\uc774\uc2f1\nprint(arr[:2, 1:3])     # [[2, 3], [6, 7]]\nprint(arr[:, -1])       # [4, 8, 12] (\ub9c8\uc9c0\ub9c9 \uc5f4)\n\n# \ubd88\ub9ac\uc5b8 \uc778\ub371\uc2f1\nmask = arr > 6\nprint(arr[mask])        # [7, 8, 9, 10, 11, 12]\n\n# \ud32c\uc2dc \uc778\ub371\uc2f1\nrows = np.array([0, 2])\ncols = np.array([1, 3])\nprint(arr[rows, cols])  # [2, 12]\n"})}),"\n",(0,s.jsx)(e.admonition,{title:"NumPy \uc131\ub2a5 \ud301",type:"tip",children:(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\ubc18\ubcf5\ubb38 \ub300\uc2e0 \ubca1\ud130\ud654 \uc5f0\uc0b0 \uc0ac\uc6a9"}),"\n",(0,s.jsx)(e.li,{children:"\ubbf8\ub9ac \ubc30\uc5f4 \ud06c\uae30\ub97c \ud560\ub2f9\ud558\uace0 \uac12 \ucc44\uc6b0\uae30"}),"\n",(0,s.jsx)(e.li,{children:"\uc801\uc808\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \uc120\ud0dd (float32 vs float64)"}),"\n"]})}),"\n",(0,s.jsx)(e.h2,{id:"42-pandas-\uae30\ucd08",children:"4.2 pandas \uae30\ucd08"}),"\n",(0,s.jsx)(e.p,{children:"pandas\ub294 \ub370\uc774\ud130 \uc870\uc791\uacfc \ubd84\uc11d\uc744 \uc704\ud55c \ud575\uc2ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"series\uc640-dataframe",children:"Series\uc640 DataFrame"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# Series \uc0dd\uc131 (1\ucc28\uc6d0)\ns = pd.Series([10, 20, 30, 40], index=['a', 'b', 'c', 'd'])\nprint(s)\nprint(s['b'])           # 20\nprint(s[s > 20])        # c: 30, d: 40\n\n# DataFrame \uc0dd\uc131 (2\ucc28\uc6d0)\ndata = {\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'age': [25, 30, 35, 28],\n    'city': ['Seoul', 'Busan', 'Seoul', 'Incheon'],\n    'salary': [50000, 60000, 75000, 55000]\n}\ndf = pd.DataFrame(data)\nprint(df)\n\n# \ub2e4\uc591\ud55c \uc0dd\uc131 \ubc29\ubc95\ndf_from_dict = pd.DataFrame(data)\ndf_from_list = pd.DataFrame([\n    ['Alice', 25, 'Seoul'],\n    ['Bob', 30, 'Busan']\n], columns=['name', 'age', 'city'])\n\ndf_from_array = pd.DataFrame(\n    np.random.randn(4, 3),\n    columns=['A', 'B', 'C'],\n    index=['row1', 'row2', 'row3', 'row4']\n)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ub370\uc774\ud130-\uc77d\uae30-\ubc0f-\uc4f0\uae30",children:"\ub370\uc774\ud130 \uc77d\uae30 \ubc0f \uc4f0\uae30"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# CSV \ud30c\uc77c\ndf = pd.read_csv('data.csv')\ndf = pd.read_csv('data.csv', encoding='utf-8')\ndf = pd.read_csv('data.csv', sep='\\t')  # \ud0ed \uad6c\ubd84\ndf.to_csv('output.csv', index=False)\n\n# Excel \ud30c\uc77c\ndf = pd.read_excel('data.xlsx', sheet_name='Sheet1')\ndf.to_excel('output.xlsx', sheet_name='Results', index=False)\n\n# JSON \ud30c\uc77c\ndf = pd.read_json('data.json')\ndf.to_json('output.json', orient='records', indent=2)\n\n# \ud074\ub9bd\ubcf4\ub4dc\uc5d0\uc11c \uc77d\uae30/\uc4f0\uae30\ndf = pd.read_clipboard()\ndf.to_clipboard()\n\n# SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\nimport sqlite3\nconn = sqlite3.connect('database.db')\ndf = pd.read_sql_query(\"SELECT * FROM users\", conn)\ndf.to_sql('new_table', conn, if_exists='replace', index=False)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ub370\uc774\ud130-\ud0d0\uc0c9",children:"\ub370\uc774\ud130 \ud0d0\uc0c9"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uae30\ubcf8 \uc815\ubcf4\nprint(df.head())            # \ucc98\uc74c 5\ud589\nprint(df.tail(3))           # \ub9c8\uc9c0\ub9c9 3\ud589\nprint(df.shape)             # (\ud589, \uc5f4) \ud06c\uae30\nprint(df.columns)           # \uc5f4 \uc774\ub984\nprint(df.index)             # \uc778\ub371\uc2a4\nprint(df.dtypes)            # \ub370\uc774\ud130 \ud0c0\uc785\n\n# \uc0c1\uc138 \uc815\ubcf4\nprint(df.info())            # \uc804\uccb4 \uc815\ubcf4\nprint(df.describe())        # \uae30\uc220 \ud1b5\uacc4\nprint(df.describe(include='all'))  # \ubaa8\ub4e0 \uc5f4 \ud3ec\ud568\n\n# \ud2b9\uc815 \uc5f4 \uc811\uadfc\nprint(df['age'])            # Series\nprint(df[['name', 'age']])  # DataFrame\n\n# \uace0\uc720\uac12 \ud655\uc778\nprint(df['city'].unique())\nprint(df['city'].nunique())\nprint(df['city'].value_counts())\n"})}),"\n",(0,s.jsx)(e.h2,{id:"43-\ub370\uc774\ud130-\uc870\uc791",children:"4.3 \ub370\uc774\ud130 \uc870\uc791"}),"\n",(0,s.jsx)(e.h3,{id:"\ud544\ud130\ub9c1",children:"\ud544\ud130\ub9c1"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc870\uac74 \ud544\ud130\ub9c1\nyoung_people = df[df['age'] < 30]\nseoul_people = df[df['city'] == 'Seoul']\n\n# \ub2e4\uc911 \uc870\uac74\nresult = df[(df['age'] > 25) & (df['salary'] > 55000)]\nresult = df[(df['city'] == 'Seoul') | (df['city'] == 'Busan')]\n\n# isin \uba54\uc11c\ub4dc\ncities = ['Seoul', 'Incheon']\nresult = df[df['city'].isin(cities)]\n\n# \ubb38\uc790\uc5f4 \ud544\ud130\ub9c1\nresult = df[df['name'].str.startswith('A')]\nresult = df[df['name'].str.contains('li')]\n\n# query \uba54\uc11c\ub4dc (\ub354 \uc77d\uae30 \uc26c\uc6c0)\nresult = df.query('age > 25 and salary > 55000')\nresult = df.query('city in [\"Seoul\", \"Busan\"]')\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc815\ub82c",children:"\uc815\ub82c"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \ub2e8\uc77c \uc5f4 \uc815\ub82c\nsorted_df = df.sort_values('age')\nsorted_df = df.sort_values('age', ascending=False)\n\n# \ub2e4\uc911 \uc5f4 \uc815\ub82c\nsorted_df = df.sort_values(['city', 'age'])\nsorted_df = df.sort_values(['city', 'age'], ascending=[True, False])\n\n# \uc778\ub371\uc2a4 \uc815\ub82c\nsorted_df = df.sort_index()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc0c8\ub85c\uc6b4-\uc5f4-\ucd94\uac00-\ubc0f-\uc218\uc815",children:"\uc0c8\ub85c\uc6b4 \uc5f4 \ucd94\uac00 \ubc0f \uc218\uc815"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc0c8 \uc5f4 \ucd94\uac00\ndf['bonus'] = df['salary'] * 0.1\ndf['total_comp'] = df['salary'] + df['bonus']\n\n# \uc870\uac74\ubd80 \uac12 \uc124\uc815\ndf['age_group'] = 'young'\ndf.loc[df['age'] > 30, 'age_group'] = 'senior'\n\n# apply \ud568\uc218 \uc0ac\uc6a9\ndef categorize_salary(salary):\n    if salary < 55000:\n        return 'Low'\n    elif salary < 65000:\n        return 'Medium'\n    else:\n        return 'High'\n\ndf['salary_category'] = df['salary'].apply(categorize_salary)\n\n# lambda \ud568\uc218\ndf['age_in_10_years'] = df['age'].apply(lambda x: x + 10)\n\n# map \ud568\uc218 (\ub515\uc154\ub108\ub9ac \ub9e4\ud551)\ncity_code = {'Seoul': 'SEL', 'Busan': 'PUS', 'Incheon': 'ICN'}\ndf['city_code'] = df['city'].map(city_code)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uadf8\ub8f9\ud654\uc640-\uc9d1\uacc4",children:"\uadf8\ub8f9\ud654\uc640 \uc9d1\uacc4"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uae30\ubcf8 \uadf8\ub8f9\ud654\ncity_groups = df.groupby('city')\nprint(city_groups['salary'].mean())\nprint(city_groups['age'].max())\n\n# \ub2e4\uc911 \uc9d1\uacc4\nresult = df.groupby('city').agg({\n    'salary': ['mean', 'max', 'min'],\n    'age': ['mean', 'count']\n})\n\n# \uc0ac\uc6a9\uc790 \uc815\uc758 \uc9d1\uacc4 \ud568\uc218\ndef salary_range(x):\n    return x.max() - x.min()\n\nresult = df.groupby('city').agg({\n    'salary': ['mean', salary_range],\n    'age': 'mean'\n})\n\n# \ub2e4\uc911 \uadf8\ub8f9\ud654\nresult = df.groupby(['city', 'age_group']).agg({\n    'salary': 'mean',\n    'name': 'count'\n})\n\n# transform (\uc6d0\ubcf8 \ud06c\uae30 \uc720\uc9c0)\ndf['salary_mean_by_city'] = df.groupby('city')['salary'].transform('mean')\ndf['salary_deviation'] = df['salary'] - df['salary_mean_by_city']\n\n# filter (\uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uadf8\ub8f9\ub9cc \uc720\uc9c0)\nresult = df.groupby('city').filter(lambda x: x['salary'].mean() > 55000)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ub370\uc774\ud130-\ubcd1\ud569",children:"\ub370\uc774\ud130 \ubcd1\ud569"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \ub450 DataFrame \uc0dd\uc131\ndf1 = pd.DataFrame({\n    'employee_id': [1, 2, 3, 4],\n    'name': ['Alice', 'Bob', 'Charlie', 'David'],\n    'department': ['HR', 'IT', 'Sales', 'IT']\n})\n\ndf2 = pd.DataFrame({\n    'employee_id': [1, 2, 3, 5],\n    'salary': [50000, 60000, 55000, 70000],\n    'start_date': ['2020-01-15', '2019-03-20', '2021-06-01', '2018-11-10']\n})\n\n# Inner join (\uae30\ubcf8)\nmerged = pd.merge(df1, df2, on='employee_id')\n\n# Left join\nmerged = pd.merge(df1, df2, on='employee_id', how='left')\n\n# Right join\nmerged = pd.merge(df1, df2, on='employee_id', how='right')\n\n# Outer join\nmerged = pd.merge(df1, df2, on='employee_id', how='outer')\n\n# \ub2e4\ub978 \uc5f4 \uc774\ub984\uc73c\ub85c \uc870\uc778\nmerged = pd.merge(df1, df2, left_on='emp_id', right_on='employee_id')\n\n# concat (\ub2e8\uc21c \uc5f0\uacb0)\nresult = pd.concat([df1, df2], axis=0)      # \uc138\ub85c \uc5f0\uacb0\nresult = pd.concat([df1, df2], axis=1)      # \uac00\ub85c \uc5f0\uacb0\nresult = pd.concat([df1, df2], ignore_index=True)  # \uc778\ub371\uc2a4 \uc7ac\uc124\uc815\n"})}),"\n",(0,s.jsx)(e.h2,{id:"44-\uacb0\uce21\uce58-\ucc98\ub9ac",children:"4.4 \uacb0\uce21\uce58 \ucc98\ub9ac"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uacb0\uce21\uce58 \ud655\uc778\nprint(df.isnull())          # \uacb0\uce21\uce58 \uc704\uce58 (True/False)\nprint(df.isnull().sum())    # \uc5f4\ubcc4 \uacb0\uce21\uce58 \uac1c\uc218\nprint(df.isnull().sum().sum())  # \uc804\uccb4 \uacb0\uce21\uce58 \uac1c\uc218\n\n# \uacb0\uce21\uce58 \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(10, 6))\nsns.heatmap(df.isnull(), cbar=False, cmap='viridis')\nplt.title('Missing Values Heatmap')\nplt.show()\n\n# \uacb0\uce21\uce58 \uc81c\uac70\ndf_cleaned = df.dropna()                    # \uacb0\uce21\uce58 \uc788\ub294 \ud589 \uc81c\uac70\ndf_cleaned = df.dropna(axis=1)              # \uacb0\uce21\uce58 \uc788\ub294 \uc5f4 \uc81c\uac70\ndf_cleaned = df.dropna(subset=['age'])      # \ud2b9\uc815 \uc5f4\uc758 \uacb0\uce21\uce58\ub9cc \uc81c\uac70\ndf_cleaned = df.dropna(thresh=3)            # \ucd5c\uc18c 3\uac1c \uc774\uc0c1 \uac12\uc774 \uc788\ub294 \ud589\ub9cc \uc720\uc9c0\n\n# \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\ndf_filled = df.fillna(0)                    # 0\uc73c\ub85c \ucc44\uc6b0\uae30\ndf_filled = df.fillna(df.mean())            # \ud3c9\uade0\uc73c\ub85c \ucc44\uc6b0\uae30\ndf_filled = df.fillna(method='ffill')       # \uc774\uc804 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\ndf_filled = df.fillna(method='bfill')       # \ub2e4\uc74c \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n\n# \uc5f4\ubcc4\ub85c \ub2e4\ub974\uac8c \ucc44\uc6b0\uae30\nfill_values = {\n    'age': df['age'].median(),\n    'salary': df['salary'].mean(),\n    'city': 'Unknown'\n}\ndf_filled = df.fillna(fill_values)\n\n# \ubcf4\uac04\ubc95\ndf['column'] = df['column'].interpolate()\ndf['column'] = df['column'].interpolate(method='linear')\n"})}),"\n",(0,s.jsx)(e.admonition,{title:"\uacb0\uce21\uce58 \ucc98\ub9ac \uc804\ub7b5",type:"tip",children:(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc81c\uac70"}),": \uacb0\uce21\uce58\uac00 \uc804\uccb4\uc758 5% \ubbf8\ub9cc\uc774\uace0 \ubb34\uc791\uc704\uc801\uc77c \ub54c"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ud3c9\uade0/\uc911\uc559\uac12"}),": \uc218\uce58\ud615 \ub370\uc774\ud130, \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub97c \ub54c"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ucd5c\ube48\uac12"}),": \ubc94\uc8fc\ud615 \ub370\uc774\ud130"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc608\uce21 \ubaa8\ub378"}),": \uacb0\uce21\uce58\uac00 \ub9ce\uace0 \uc911\uc694\ud55c \ubcc0\uc218\uc77c \ub54c"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ubcc4\ub3c4 \uce74\ud14c\uace0\ub9ac"}),": \uacb0\uce21 \uc790\uccb4\uac00 \uc758\ubbf8 \uc788\ub294 \uc815\ubcf4\uc77c \ub54c"]}),"\n"]})}),"\n",(0,s.jsx)(e.h2,{id:"45-\ub370\uc774\ud130-\uc2dc\uac01\ud654",children:"4.5 \ub370\uc774\ud130 \uc2dc\uac01\ud654"}),"\n",(0,s.jsx)(e.h3,{id:"matplotlib-\uae30\ucd08",children:"Matplotlib \uae30\ucd08"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import matplotlib.pyplot as plt\nimport numpy as np\n\n# \uae30\ubcf8 \uc120 \uadf8\ub798\ud504\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y, label='sin(x)', color='blue', linewidth=2)\nplt.plot(x, np.cos(x), label='cos(x)', color='red', linestyle='--')\nplt.xlabel('X\ucd95')\nplt.ylabel('Y\ucd95')\nplt.title('\uc0bc\uac01\ud568\uc218 \uadf8\ub798\ud504')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# \uc5ec\ub7ec \uc11c\ube0c\ud50c\ub86f\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\naxes[0, 0].plot(x, y)\naxes[0, 0].set_title('Sin \ud568\uc218')\n\naxes[0, 1].scatter(x, y)\naxes[0, 1].set_title('\uc0b0\uc810\ub3c4')\n\naxes[1, 0].hist(np.random.randn(1000), bins=30)\naxes[1, 0].set_title('\ud788\uc2a4\ud1a0\uadf8\ub7a8')\n\naxes[1, 1].bar(['A', 'B', 'C', 'D'], [10, 25, 15, 30])\naxes[1, 1].set_title('\ub9c9\ub300 \uadf8\ub798\ud504')\n\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"seaborn-\uc2dc\uac01\ud654",children:"Seaborn \uc2dc\uac01\ud654"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import seaborn as sns\n\n# \uc2a4\ud0c0\uc77c \uc124\uc815\nsns.set_style('whitegrid')\nsns.set_palette('husl')\n\n# \uc0d8\ud50c \ub370\uc774\ud130\ntips = sns.load_dataset('tips')\n\n# \ud788\uc2a4\ud1a0\uadf8\ub7a8\uacfc KDE\nplt.figure(figsize=(10, 6))\nsns.histplot(data=tips, x='total_bill', kde=True, bins=30)\nplt.title('\uc804\uccb4 \uacc4\uc0b0 \uae08\uc561 \ubd84\ud3ec')\nplt.show()\n\n# \ubc15\uc2a4 \ud50c\ub86f\nplt.figure(figsize=(10, 6))\nsns.boxplot(data=tips, x='day', y='total_bill', hue='sex')\nplt.title('\uc694\uc77c\ubcc4 \uacc4\uc0b0 \uae08\uc561 (\uc131\ubcc4)')\nplt.show()\n\n# \ubc14\uc774\uc62c\ub9b0 \ud50c\ub86f\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=tips, x='day', y='total_bill', hue='time')\nplt.title('\uc694\uc77c\ubcc4 \uacc4\uc0b0 \uae08\uc561 \ubd84\ud3ec')\nplt.show()\n\n# \uc0b0\uc810\ub3c4\uc640 \ud68c\uadc0\uc120\nplt.figure(figsize=(10, 6))\nsns.regplot(data=tips, x='total_bill', y='tip')\nplt.title('\uacc4\uc0b0 \uae08\uc561\uacfc \ud301\uc758 \uad00\uacc4')\nplt.show()\n\n# \ud398\uc5b4 \ud50c\ub86f (\ub2e4\ubcc0\ub7c9 \uad00\uacc4)\nsns.pairplot(tips, hue='time', diag_kind='kde')\nplt.show()\n\n# \ud788\ud2b8\ub9f5 (\uc0c1\uad00\uad00\uacc4)\nplt.figure(figsize=(10, 8))\ncorrelation = tips.corr(numeric_only=True)\nsns.heatmap(correlation, annot=True, cmap='coolwarm', center=0)\nplt.title('\uc0c1\uad00\uad00\uacc4 \ud788\ud2b8\ub9f5')\nplt.show()\n\n# \uce74\uc6b4\ud2b8 \ud50c\ub86f\nplt.figure(figsize=(10, 6))\nsns.countplot(data=tips, x='day', hue='sex')\nplt.title('\uc694\uc77c\ubcc4 \ubc29\ubb38 \uace0\uac1d \uc218')\nplt.show()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"pandas-\ub0b4\uc7a5-\uc2dc\uac01\ud654",children:"pandas \ub0b4\uc7a5 \uc2dc\uac01\ud654"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# DataFrame\uc5d0\uc11c \uc9c1\uc811 \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\ndf = pd.DataFrame({\n    'A': np.random.randn(1000).cumsum(),\n    'B': np.random.randn(1000).cumsum(),\n    'C': np.random.randn(1000).cumsum()\n})\n\n# \uc120 \uadf8\ub798\ud504\ndf.plot(figsize=(12, 6), title='\uc2dc\uacc4\uc5f4 \ub370\uc774\ud130')\nplt.show()\n\n# \ub9c9\ub300 \uadf8\ub798\ud504\ndf.iloc[-1].plot(kind='bar')\nplt.title('\ucd5c\uc885 \uac12 \ube44\uad50')\nplt.show()\n\n# \ud788\uc2a4\ud1a0\uadf8\ub7a8\ndf.plot(kind='hist', bins=50, alpha=0.5, figsize=(10, 6))\nplt.title('\ubd84\ud3ec \ud788\uc2a4\ud1a0\uadf8\ub7a8')\nplt.show()\n\n# \ubc15\uc2a4 \ud50c\ub86f\ndf.plot(kind='box', figsize=(10, 6))\nplt.title('\ubc15\uc2a4 \ud50c\ub86f')\nplt.show()\n\n# \uc0b0\uc810\ub3c4 \ud589\ub82c\npd.plotting.scatter_matrix(df, figsize=(12, 12), diagonal='kde')\nplt.show()\n"})}),"\n",(0,s.jsx)(e.h2,{id:"46-\ud1b5\uacc4-\ubd84\uc11d-\uae30\ucd08",children:"4.6 \ud1b5\uacc4 \ubd84\uc11d \uae30\ucd08"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n# \uc0d8\ud50c \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'group': ['A'] * 50 + ['B'] * 50,\n    'value': np.concatenate([\n        np.random.normal(100, 15, 50),\n        np.random.normal(110, 15, 50)\n    ])\n})\n\n# \uae30\uc220 \ud1b5\uacc4\nprint(\"=== \uae30\uc220 \ud1b5\uacc4 ===\")\nprint(data.groupby('group')['value'].describe())\n\n# \ud3c9\uade0, \uc911\uc559\uac12, \ubd84\uc0b0, \ud45c\uc900\ud3b8\ucc28\nprint(f\"\\n\ud3c9\uade0: {data['value'].mean():.2f}\")\nprint(f\"\uc911\uc559\uac12: {data['value'].median():.2f}\")\nprint(f\"\ubd84\uc0b0: {data['value'].var():.2f}\")\nprint(f\"\ud45c\uc900\ud3b8\ucc28: {data['value'].std():.2f}\")\nprint(f\"\uc65c\ub3c4: {data['value'].skew():.2f}\")\nprint(f\"\ucca8\ub3c4: {data['value'].kurtosis():.2f}\")\n\n# \ubd84\uc704\uc218\nprint(f\"\\n25% \ubd84\uc704\uc218: {data['value'].quantile(0.25):.2f}\")\nprint(f\"50% \ubd84\uc704\uc218: {data['value'].quantile(0.50):.2f}\")\nprint(f\"75% \ubd84\uc704\uc218: {data['value'].quantile(0.75):.2f}\")\n\n# \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\ndf = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100)\n})\ndf['z'] = df['x'] * 2 + np.random.randn(100) * 0.5\n\nprint(\"\\n=== \uc0c1\uad00\uad00\uacc4 \ud589\ub82c ===\")\nprint(df.corr())\n\n# \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uacc4\uc218\ncorr, p_value = stats.pearsonr(df['x'], df['z'])\nprint(f\"\\nX\uc640 Z\uc758 \uc0c1\uad00\uacc4\uc218: {corr:.3f} (p-value: {p_value:.3f})\")\n\n# t-\uac80\uc815 (\ub450 \uadf8\ub8f9 \ud3c9\uade0 \ube44\uad50)\ngroup_a = data[data['group'] == 'A']['value']\ngroup_b = data[data['group'] == 'B']['value']\n\nt_stat, p_value = stats.ttest_ind(group_a, group_b)\nprint(f\"\\n=== t-\uac80\uc815 \uacb0\uacfc ===\")\nprint(f\"t-\ud1b5\uacc4\ub7c9: {t_stat:.3f}\")\nprint(f\"p-value: {p_value:.3f}\")\nprint(f\"\uc720\uc758\ubbf8\ud55c \ucc28\uc774: {'Yes' if p_value < 0.05 else 'No'}\")\n\n# \uce74\uc774\uc81c\uacf1 \uac80\uc815 (\ubc94\uc8fc\ud615 \ubcc0\uc218)\nobserved = pd.crosstab(\n    index=pd.cut(data['value'], bins=3, labels=['Low', 'Medium', 'High']),\n    columns=data['group']\n)\nchi2, p_value, dof, expected = stats.chi2_contingency(observed)\nprint(f\"\\n=== \uce74\uc774\uc81c\uacf1 \uac80\uc815 ===\")\nprint(f\"\uce74\uc774\uc81c\uacf1 \ud1b5\uacc4\ub7c9: {chi2:.3f}\")\nprint(f\"p-value: {p_value:.3f}\")\n\n# \uc815\uaddc\uc131 \uac80\uc815\nstat, p_value = stats.shapiro(data['value'])\nprint(f\"\\n=== \uc815\uaddc\uc131 \uac80\uc815 (Shapiro-Wilk) ===\")\nprint(f\"\ud1b5\uacc4\ub7c9: {stat:.3f}\")\nprint(f\"p-value: {p_value:.3f}\")\nprint(f\"\uc815\uaddc\ubd84\ud3ec: {'Yes' if p_value > 0.05 else 'No'}\")\n"})}),"\n",(0,s.jsx)(e.h2,{id:"47-\uc2dc\uacc4\uc5f4-\ub370\uc774\ud130",children:"4.7 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \uc0dd\uc131\ndates = pd.date_range('2023-01-01', periods=365, freq='D')\nvalues = np.random.randn(365).cumsum() + 100\n\ndf = pd.DataFrame({\n    'date': dates,\n    'value': values\n})\ndf.set_index('date', inplace=True)\n\n# \ub0a0\uc9dc \ubc94\uc704 \uc120\ud0dd\nprint(df['2023-01'])        # 2023\ub144 1\uc6d4\nprint(df['2023-01':'2023-03'])  # 1\uc6d4\ubd80\ud130 3\uc6d4\n\n# \ub9ac\uc0d8\ud50c\ub9c1 (\uc2dc\uac04 \ub2e8\uc704 \ubcc0\uacbd)\nmonthly = df.resample('M').mean()       # \uc6d4\ubcc4 \ud3c9\uade0\nweekly = df.resample('W').sum()         # \uc8fc\ubcc4 \ud569\uacc4\nquarterly = df.resample('Q').agg({\n    'value': ['mean', 'max', 'min']\n})\n\n# \uc774\ub3d9 \ud3c9\uade0\ndf['MA_7'] = df['value'].rolling(window=7).mean()\ndf['MA_30'] = df['value'].rolling(window=30).mean()\n\n# \uc9c0\uc218 \uc774\ub3d9 \ud3c9\uade0\ndf['EMA_7'] = df['value'].ewm(span=7).mean()\n\n# \uc2dc\ucc28 (Lag)\ndf['prev_day'] = df['value'].shift(1)\ndf['next_day'] = df['value'].shift(-1)\ndf['change'] = df['value'] - df['prev_day']\ndf['pct_change'] = df['value'].pct_change()\n\n# \ucd94\uc138 \uc81c\uac70 (\ucc28\ubd84)\ndf['diff'] = df['value'].diff()\ndf['diff2'] = df['diff'].diff()\n\n# \uacc4\uc808\uc131 \ubd84\ud574\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndecomposition = seasonal_decompose(\n    df['value'],\n    model='additive',\n    period=30\n)\n\nfig, axes = plt.subplots(4, 1, figsize=(12, 10))\ndecomposition.observed.plot(ax=axes[0], title='Original')\ndecomposition.trend.plot(ax=axes[1], title='Trend')\ndecomposition.seasonal.plot(ax=axes[2], title='Seasonal')\ndecomposition.resid.plot(ax=axes[3], title='Residual')\nplt.tight_layout()\nplt.show()\n\n# \ub0a0\uc9dc/\uc2dc\uac04 \uc18d\uc131 \ucd94\ucd9c\ndf['year'] = df.index.year\ndf['month'] = df.index.month\ndf['day'] = df.index.day\ndf['dayofweek'] = df.index.dayofweek\ndf['quarter'] = df.index.quarter\ndf['is_weekend'] = df.index.dayofweek >= 5\n\n# \uc6d4\ubcc4 \ud3c9\uade0 \ube44\uad50\nmonthly_avg = df.groupby('month')['value'].mean()\nprint(monthly_avg)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"48-\uc2e4\uc804-\uc608\uc81c",children:"4.8 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,s.jsx)(e.h3,{id:"\uc608\uc81c-1-\ud310\ub9e4-\ub370\uc774\ud130-\ubd84\uc11d",children:"\uc608\uc81c 1: \ud310\ub9e4 \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \uc0d8\ud50c \ud310\ub9e4 \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\ndates = pd.date_range('2023-01-01', periods=365, freq='D')\nn_records = 1000\n\nsales_data = pd.DataFrame({\n    'date': np.random.choice(dates, n_records),\n    'product': np.random.choice(['A', 'B', 'C', 'D', 'E'], n_records),\n    'category': np.random.choice(['\uc804\uc790\uc81c\ud488', '\uc758\ub958', '\uc2dd\ud488'], n_records),\n    'quantity': np.random.randint(1, 10, n_records),\n    'unit_price': np.random.randint(10, 100, n_records) * 1000,\n    'region': np.random.choice(['\uc11c\uc6b8', '\ubd80\uc0b0', '\ub300\uad6c', '\uc778\ucc9c'], n_records)\n})\n\nsales_data['total_price'] = sales_data['quantity'] * sales_data['unit_price']\nsales_data['date'] = pd.to_datetime(sales_data['date'])\n\n# 1. \uae30\ubcf8 \ubd84\uc11d\nprint(\"=== \uae30\ubcf8 \ud1b5\uacc4 ===\")\nprint(sales_data.describe())\n\n# 2. \uc81c\ud488\ubcc4 \ub9e4\ucd9c \ubd84\uc11d\nproduct_sales = sales_data.groupby('product').agg({\n    'total_price': ['sum', 'mean', 'count'],\n    'quantity': 'sum'\n}).round(0)\nprint(\"\\n=== \uc81c\ud488\ubcc4 \ub9e4\ucd9c ===\")\nprint(product_sales)\n\n# 3. \uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c\ncategory_sales = sales_data.groupby('category')['total_price'].sum().sort_values(ascending=False)\n\nplt.figure(figsize=(10, 6))\ncategory_sales.plot(kind='bar', color='skyblue')\nplt.title('\uce74\ud14c\uace0\ub9ac\ubcc4 \ucd1d \ub9e4\ucd9c', fontsize=14)\nplt.xlabel('\uce74\ud14c\uace0\ub9ac')\nplt.ylabel('\ub9e4\ucd9c (\uc6d0)')\nplt.xticks(rotation=0)\nplt.tight_layout()\nplt.show()\n\n# 4. \uc6d4\ubcc4 \ub9e4\ucd9c \ucd94\uc774\nsales_data['month'] = sales_data['date'].dt.to_period('M')\nmonthly_sales = sales_data.groupby('month')['total_price'].sum()\n\nplt.figure(figsize=(12, 6))\nmonthly_sales.plot(kind='line', marker='o', color='green')\nplt.title('\uc6d4\ubcc4 \ub9e4\ucd9c \ucd94\uc774', fontsize=14)\nplt.xlabel('\uc6d4')\nplt.ylabel('\ub9e4\ucd9c (\uc6d0)')\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# 5. \uc9c0\uc5ed\ubcc4 \uce74\ud14c\uace0\ub9ac \ub9e4\ucd9c\npivot_table = sales_data.pivot_table(\n    values='total_price',\n    index='region',\n    columns='category',\n    aggfunc='sum',\n    fill_value=0\n)\n\nplt.figure(figsize=(10, 6))\npivot_table.plot(kind='bar', stacked=True)\nplt.title('\uc9c0\uc5ed\ubcc4 \uce74\ud14c\uace0\ub9ac \ub9e4\ucd9c', fontsize=14)\nplt.xlabel('\uc9c0\uc5ed')\nplt.ylabel('\ub9e4\ucd9c (\uc6d0)')\nplt.legend(title='\uce74\ud14c\uace0\ub9ac')\nplt.xticks(rotation=0)\nplt.tight_layout()\nplt.show()\n\n# 6. \uc0c1\uc704 10\uac1c \ud310\ub9e4\uc77c\ntop_days = sales_data.groupby('date')['total_price'].sum().nlargest(10)\nprint(\"\\n=== \uc0c1\uc704 10\uac1c \ud310\ub9e4\uc77c ===\")\nprint(top_days)\n\n# 7. \uc81c\ud488-\uc9c0\uc5ed \ud788\ud2b8\ub9f5\nproduct_region = sales_data.pivot_table(\n    values='total_price',\n    index='product',\n    columns='region',\n    aggfunc='sum'\n)\n\nplt.figure(figsize=(10, 6))\nsns.heatmap(product_region, annot=True, fmt='.0f', cmap='YlOrRd')\nplt.title('\uc81c\ud488-\uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c \ud788\ud2b8\ub9f5', fontsize=14)\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc608\uc81c-2-\uace0\uac1d-\uc138\uadf8\uba3c\ud14c\uc774\uc158",children:"\uc608\uc81c 2: \uace0\uac1d \uc138\uadf8\uba3c\ud14c\uc774\uc158"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uace0\uac1d \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\nn_customers = 500\n\ncustomer_data = pd.DataFrame({\n    'customer_id': range(1, n_customers + 1),\n    'age': np.random.randint(18, 70, n_customers),\n    'income': np.random.randint(20, 150, n_customers) * 1000,\n    'spending': np.random.randint(10, 100, n_customers) * 1000,\n    'visits': np.random.randint(1, 50, n_customers),\n    'member_years': np.random.randint(0, 10, n_customers)\n})\n\n# 1. \ub098\uc774 \uadf8\ub8f9 \uc0dd\uc131\ncustomer_data['age_group'] = pd.cut(\n    customer_data['age'],\n    bins=[0, 30, 40, 50, 100],\n    labels=['20\ub300 \uc774\ud558', '30\ub300', '40\ub300', '50\ub300 \uc774\uc0c1']\n)\n\n# 2. \uc18c\ub4dd \uadf8\ub8f9 \uc0dd\uc131\ncustomer_data['income_group'] = pd.qcut(\n    customer_data['income'],\n    q=3,\n    labels=['Low', 'Medium', 'High']\n)\n\n# 3. RFM \ubd84\uc11d (Recency, Frequency, Monetary)\ncustomer_data['recency_score'] = pd.qcut(\n    customer_data['visits'],\n    q=4,\n    labels=[1, 2, 3, 4]\n).astype(int)\n\ncustomer_data['frequency_score'] = pd.qcut(\n    customer_data['visits'],\n    q=4,\n    labels=[1, 2, 3, 4],\n    duplicates='drop'\n).astype(int)\n\ncustomer_data['monetary_score'] = pd.qcut(\n    customer_data['spending'],\n    q=4,\n    labels=[1, 2, 3, 4]\n).astype(int)\n\ncustomer_data['rfm_score'] = (\n    customer_data['recency_score'] +\n    customer_data['frequency_score'] +\n    customer_data['monetary_score']\n)\n\n# 4. \uace0\uac1d \uc138\uadf8\uba3c\ud2b8 \uc815\uc758\ndef classify_customer(rfm_score):\n    if rfm_score >= 10:\n        return 'VIP'\n    elif rfm_score >= 7:\n        return 'Loyal'\n    elif rfm_score >= 4:\n        return 'Regular'\n    else:\n        return 'At Risk'\n\ncustomer_data['segment'] = customer_data['rfm_score'].apply(classify_customer)\n\n# 5. \uc138\uadf8\uba3c\ud2b8 \ubd84\uc11d\nsegment_analysis = customer_data.groupby('segment').agg({\n    'customer_id': 'count',\n    'income': 'mean',\n    'spending': 'mean',\n    'visits': 'mean'\n}).round(0)\nsegment_analysis.columns = ['\uace0\uac1d \uc218', '\ud3c9\uade0 \uc18c\ub4dd', '\ud3c9\uade0 \uc9c0\ucd9c', '\ud3c9\uade0 \ubc29\ubb38']\n\nprint(\"=== \uace0\uac1d \uc138\uadf8\uba3c\ud2b8 \ubd84\uc11d ===\")\nprint(segment_analysis)\n\n# 6. \uc2dc\uac01\ud654\nfig, axes = plt.subplots(2, 2, figsize=(14, 10))\n\n# \uc138\uadf8\uba3c\ud2b8\ubcc4 \uace0\uac1d \uc218\ncustomer_data['segment'].value_counts().plot(\n    kind='pie',\n    ax=axes[0, 0],\n    autopct='%1.1f%%'\n)\naxes[0, 0].set_title('\uace0\uac1d \uc138\uadf8\uba3c\ud2b8 \ubd84\ud3ec')\naxes[0, 0].set_ylabel('')\n\n# \uc18c\ub4dd vs \uc9c0\ucd9c\nfor segment in customer_data['segment'].unique():\n    segment_df = customer_data[customer_data['segment'] == segment]\n    axes[0, 1].scatter(\n        segment_df['income'],\n        segment_df['spending'],\n        label=segment,\n        alpha=0.6\n    )\naxes[0, 1].set_xlabel('\uc18c\ub4dd')\naxes[0, 1].set_ylabel('\uc9c0\ucd9c')\naxes[0, 1].set_title('\uc18c\ub4dd vs \uc9c0\ucd9c (\uc138\uadf8\uba3c\ud2b8\ubcc4)')\naxes[0, 1].legend()\n\n# \ub098\uc774 \uadf8\ub8f9\ubcc4 \uc138\uadf8\uba3c\ud2b8\npd.crosstab(\n    customer_data['age_group'],\n    customer_data['segment']\n).plot(kind='bar', ax=axes[1, 0], stacked=True)\naxes[1, 0].set_title('\ub098\uc774 \uadf8\ub8f9\ubcc4 \uc138\uadf8\uba3c\ud2b8 \ubd84\ud3ec')\naxes[1, 0].set_xlabel('\ub098\uc774 \uadf8\ub8f9')\naxes[1, 0].set_ylabel('\uace0\uac1d \uc218')\naxes[1, 0].legend(title='\uc138\uadf8\uba3c\ud2b8')\n\n# RFM \uc810\uc218 \ubd84\ud3ec\ncustomer_data['rfm_score'].hist(bins=12, ax=axes[1, 1], color='green', alpha=0.7)\naxes[1, 1].set_title('RFM \uc810\uc218 \ubd84\ud3ec')\naxes[1, 1].set_xlabel('RFM \uc810\uc218')\naxes[1, 1].set_ylabel('\uace0\uac1d \uc218')\n\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc608\uc81c-3-\uc8fc\uc2dd-\ub370\uc774\ud130-\ubd84\uc11d",children:"\uc608\uc81c 3: \uc8fc\uc2dd \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc8fc\uc2dd \ub370\uc774\ud130 \uc2dc\ubbac\ub808\uc774\uc158\nnp.random.seed(42)\ndates = pd.date_range('2023-01-01', periods=252, freq='B')  # \uc601\uc5c5\uc77c\n\n# \ub79c\ub364 \uc6cc\ud06c\ub85c \uc8fc\uac00 \uc0dd\uc131\nreturns = np.random.randn(252) * 0.02\nprice = 100 * (1 + returns).cumprod()\n\nstock_data = pd.DataFrame({\n    'date': dates,\n    'open': price * (1 + np.random.randn(252) * 0.01),\n    'high': price * (1 + np.abs(np.random.randn(252)) * 0.02),\n    'low': price * (1 - np.abs(np.random.randn(252)) * 0.02),\n    'close': price,\n    'volume': np.random.randint(1000000, 5000000, 252)\n})\n\nstock_data.set_index('date', inplace=True)\n\n# 1. \uae30\uc220\uc801 \uc9c0\ud45c \uacc4\uc0b0\n# \uc774\ub3d9\ud3c9\uade0\nstock_data['MA_20'] = stock_data['close'].rolling(window=20).mean()\nstock_data['MA_60'] = stock_data['close'].rolling(window=60).mean()\n\n# \ubcfc\ub9b0\uc800 \ubc34\ub4dc\nstock_data['BB_upper'] = stock_data['MA_20'] + 2 * stock_data['close'].rolling(20).std()\nstock_data['BB_lower'] = stock_data['MA_20'] - 2 * stock_data['close'].rolling(20).std()\n\n# RSI (Relative Strength Index)\ndelta = stock_data['close'].diff()\ngain = (delta.where(delta > 0, 0)).rolling(window=14).mean()\nloss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()\nrs = gain / loss\nstock_data['RSI'] = 100 - (100 / (1 + rs))\n\n# \uc77c\uc77c \uc218\uc775\ub960\nstock_data['daily_return'] = stock_data['close'].pct_change()\n\n# 2. \ud1b5\uacc4 \ubd84\uc11d\nprint(\"=== \uc8fc\uc2dd \ud1b5\uacc4 ===\")\nprint(f\"\ud3c9\uade0 \uc885\uac00: {stock_data['close'].mean():.2f}\")\nprint(f\"\ucd5c\uace0\uac00: {stock_data['high'].max():.2f}\")\nprint(f\"\ucd5c\uc800\uac00: {stock_data['low'].min():.2f}\")\nprint(f\"\ud3c9\uade0 \uc77c\uc77c \uc218\uc775\ub960: {stock_data['daily_return'].mean():.4f} ({stock_data['daily_return'].mean()*100:.2f}%)\")\nprint(f\"\uc218\uc775\ub960 \ud45c\uc900\ud3b8\ucc28 (\ubcc0\ub3d9\uc131): {stock_data['daily_return'].std():.4f}\")\nprint(f\"\uc0e4\ud504 \ube44\uc728: {stock_data['daily_return'].mean() / stock_data['daily_return'].std():.4f}\")\n\n# 3. \uc2dc\uac01\ud654\nfig, axes = plt.subplots(3, 1, figsize=(14, 12))\n\n# \uac00\uaca9\uacfc \uc774\ub3d9\ud3c9\uade0\naxes[0].plot(stock_data.index, stock_data['close'], label='\uc885\uac00', linewidth=1)\naxes[0].plot(stock_data.index, stock_data['MA_20'], label='MA 20', alpha=0.7)\naxes[0].plot(stock_data.index, stock_data['MA_60'], label='MA 60', alpha=0.7)\naxes[0].fill_between(\n    stock_data.index,\n    stock_data['BB_upper'],\n    stock_data['BB_lower'],\n    alpha=0.2,\n    label='\ubcfc\ub9b0\uc800 \ubc34\ub4dc'\n)\naxes[0].set_title('\uc8fc\uac00 \ucc28\ud2b8 \ubc0f \uae30\uc220\uc801 \uc9c0\ud45c')\naxes[0].set_ylabel('\uac00\uaca9')\naxes[0].legend()\naxes[0].grid(True, alpha=0.3)\n\n# RSI\naxes[1].plot(stock_data.index, stock_data['RSI'], color='purple')\naxes[1].axhline(y=70, color='r', linestyle='--', alpha=0.5, label='\uacfc\ub9e4\uc218')\naxes[1].axhline(y=30, color='g', linestyle='--', alpha=0.5, label='\uacfc\ub9e4\ub3c4')\naxes[1].set_title('RSI (Relative Strength Index)')\naxes[1].set_ylabel('RSI')\naxes[1].legend()\naxes[1].grid(True, alpha=0.3)\n\n# \uac70\ub798\ub7c9\naxes[2].bar(stock_data.index, stock_data['volume'], alpha=0.7, color='blue')\naxes[2].set_title('\uac70\ub798\ub7c9')\naxes[2].set_xlabel('\ub0a0\uc9dc')\naxes[2].set_ylabel('\uac70\ub798\ub7c9')\naxes[2].grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\n# 4. \uc218\uc775\ub960 \ubd84\ud3ec\nplt.figure(figsize=(10, 6))\nstock_data['daily_return'].hist(bins=50, alpha=0.7, color='green')\nplt.axvline(stock_data['daily_return'].mean(), color='red', linestyle='--', label='\ud3c9\uade0')\nplt.title('\uc77c\uc77c \uc218\uc775\ub960 \ubd84\ud3ec')\nplt.xlabel('\uc218\uc775\ub960')\nplt.ylabel('\ube48\ub3c4')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.show()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc608\uc81c-4-\uc124\ubb38\uc870\uc0ac-\ub370\uc774\ud130-\ubd84\uc11d",children:"\uc608\uc81c 4: \uc124\ubb38\uc870\uc0ac \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc124\ubb38\uc870\uc0ac \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\nn_responses = 500\n\nsurvey_data = pd.DataFrame({\n    'respondent_id': range(1, n_responses + 1),\n    'age': np.random.randint(18, 70, n_responses),\n    'gender': np.random.choice(['\ub0a8\uc131', '\uc5ec\uc131'], n_responses),\n    'education': np.random.choice(['\uace0\uc878', '\ub300\uc878', '\ub300\ud559\uc6d0'], n_responses),\n    'satisfaction': np.random.randint(1, 6, n_responses),  # 1-5 \ucc99\ub3c4\n    'recommendation': np.random.randint(0, 11, n_responses),  # NPS 0-10\n    'usage_frequency': np.random.choice(['\ub9e4\uc77c', '\uc8fc 2-3\ud68c', '\uc8fc 1\ud68c', '\uc6d4 1-2\ud68c'], n_responses),\n    'price_perception': np.random.choice(['\ub9e4\uc6b0 \ube44\uc308', '\ube44\uc308', '\uc801\ub2f9', '\uc800\ub834'], n_responses)\n})\n\n# 1. \uae30\ubcf8 \ud1b5\uacc4\nprint(\"=== \uc124\ubb38 \uc751\ub2f5 \ud1b5\uacc4 ===\")\nprint(f\"\ucd1d \uc751\ub2f5\uc790: {len(survey_data)}\")\nprint(f\"\\n\uc131\ubcc4 \ubd84\ud3ec:\")\nprint(survey_data['gender'].value_counts())\nprint(f\"\\n\ud559\ub825 \ubd84\ud3ec:\")\nprint(survey_data['education'].value_counts())\n\n# 2. \ub9cc\uc871\ub3c4 \ubd84\uc11d\nsatisfaction_by_gender = survey_data.groupby('gender')['satisfaction'].agg([\n    'mean', 'median', 'std', 'count'\n])\nprint(\"\\n=== \uc131\ubcc4 \ub9cc\uc871\ub3c4 ===\")\nprint(satisfaction_by_gender)\n\n# 3. NPS (Net Promoter Score) \uacc4\uc0b0\ndef calculate_nps(score):\n    if score >= 9:\n        return 'Promoter'\n    elif score >= 7:\n        return 'Passive'\n    else:\n        return 'Detractor'\n\nsurvey_data['nps_category'] = survey_data['recommendation'].apply(calculate_nps)\n\nnps_counts = survey_data['nps_category'].value_counts()\nnps_score = (\n    (nps_counts.get('Promoter', 0) - nps_counts.get('Detractor', 0)) /\n    len(survey_data) * 100\n)\n\nprint(f\"\\n=== NPS \ubd84\uc11d ===\")\nprint(f\"NPS \uc810\uc218: {nps_score:.1f}\")\nprint(nps_counts)\n\n# 4. \uad50\ucc28 \ubd84\uc11d\ncross_tab = pd.crosstab(\n    survey_data['education'],\n    survey_data['satisfaction'],\n    normalize='index'\n) * 100\n\nprint(\"\\n=== \ud559\ub825\ubcc4 \ub9cc\uc871\ub3c4 \ubd84\ud3ec (%) ===\")\nprint(cross_tab.round(1))\n\n# 5. \uc2dc\uac01\ud654\nfig, axes = plt.subplots(2, 2, figsize=(14, 10))\n\n# \ub9cc\uc871\ub3c4 \ubd84\ud3ec\nsatisfaction_counts = survey_data['satisfaction'].value_counts().sort_index()\naxes[0, 0].bar(satisfaction_counts.index, satisfaction_counts.values, color='skyblue')\naxes[0, 0].set_title('\ub9cc\uc871\ub3c4 \ubd84\ud3ec')\naxes[0, 0].set_xlabel('\ub9cc\uc871\ub3c4 (1-5)')\naxes[0, 0].set_ylabel('\uc751\ub2f5 \uc218')\naxes[0, 0].grid(True, alpha=0.3, axis='y')\n\n# \uc131\ubcc4-\ud559\ub825\ubcc4 \ub9cc\uc871\ub3c4\ngender_edu_satisfaction = survey_data.groupby(['gender', 'education'])['satisfaction'].mean().unstack()\ngender_edu_satisfaction.plot(kind='bar', ax=axes[0, 1], width=0.8)\naxes[0, 1].set_title('\uc131\ubcc4-\ud559\ub825\ubcc4 \ud3c9\uade0 \ub9cc\uc871\ub3c4')\naxes[0, 1].set_xlabel('\uc131\ubcc4')\naxes[0, 1].set_ylabel('\ud3c9\uade0 \ub9cc\uc871\ub3c4')\naxes[0, 1].legend(title='\ud559\ub825')\naxes[0, 1].grid(True, alpha=0.3, axis='y')\n\n# NPS \uce74\ud14c\uace0\ub9ac \ubd84\ud3ec\nnps_counts.plot(kind='pie', ax=axes[1, 0], autopct='%1.1f%%', colors=['green', 'yellow', 'red'])\naxes[1, 0].set_title(f'NPS \ubd84\ud3ec (\uc810\uc218: {nps_score:.1f})')\naxes[1, 0].set_ylabel('')\n\n# \uc0ac\uc6a9 \ube48\ub3c4\ubcc4 \ub9cc\uc871\ub3c4\nusage_order = ['\ub9e4\uc77c', '\uc8fc 2-3\ud68c', '\uc8fc 1\ud68c', '\uc6d4 1-2\ud68c']\nusage_satisfaction = survey_data.groupby('usage_frequency')['satisfaction'].mean().reindex(usage_order)\naxes[1, 1].barh(range(len(usage_satisfaction)), usage_satisfaction.values, color='orange')\naxes[1, 1].set_yticks(range(len(usage_satisfaction)))\naxes[1, 1].set_yticklabels(usage_satisfaction.index)\naxes[1, 1].set_title('\uc0ac\uc6a9 \ube48\ub3c4\ubcc4 \ud3c9\uade0 \ub9cc\uc871\ub3c4')\naxes[1, 1].set_xlabel('\ud3c9\uade0 \ub9cc\uc871\ub3c4')\naxes[1, 1].grid(True, alpha=0.3, axis='x')\n\nplt.tight_layout()\nplt.show()\n\n# 6. \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d (\uc218\uce58\ud615 \ubcc0\uc218\ub9cc)\nnumeric_cols = ['age', 'satisfaction', 'recommendation']\ncorrelation = survey_data[numeric_cols].corr()\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm', center=0, square=True)\nplt.title('\ubcc0\uc218 \uac04 \uc0c1\uad00\uad00\uacc4')\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,s.jsx)(e.h2,{id:"49-jupyter-notebook-\uc6cc\ud06c\ud50c\ub85c\uc6b0",children:"4.9 Jupyter Notebook \uc6cc\ud06c\ud50c\ub85c\uc6b0"}),"\n",(0,s.jsx)(e.h3,{id:"jupyter-notebook-\uc2dc\uc791\ud558\uae30",children:"Jupyter Notebook \uc2dc\uc791\ud558\uae30"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Jupyter Notebook \uc124\uce58\npip install jupyter notebook\n\n# Jupyter Lab \uc124\uce58 (\ub354 \ubc1c\uc804\ub41c \ud658\uacbd)\npip install jupyterlab\n\n# Notebook \uc2e4\ud589\njupyter notebook\n\n# Jupyter Lab \uc2e4\ud589\njupyter lab\n"})}),"\n",(0,s.jsx)(e.h3,{id:"notebook-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"Notebook \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# 1. \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8 (\uccab \ubc88\uc9f8 \uc140)\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \uc124\uc815\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 100)\nplt.rcParams['figure.figsize'] = (12, 6)\nsns.set_style('whitegrid')\n\n# Jupyter\uc5d0\uc11c \uadf8\ub798\ud504 inline\uc73c\ub85c \ud45c\uc2dc\n%matplotlib inline\n\n# 2. \ub370\uc774\ud130 \ub85c\ub4dc (\ub450 \ubc88\uc9f8 \uc140)\ndf = pd.read_csv('data.csv')\n\n# 3. \ub370\uc774\ud130 \ud0d0\uc0c9 (\ubcc4\ub3c4 \uc140\ub4e4)\n# \uac01 \ud0d0\uc0c9 \ub2e8\uacc4\ub97c \ubcc4\ub3c4 \uc140\ub85c \ubd84\ub9ac\ndf.head()\ndf.info()\ndf.describe()\n\n# 4. \ub370\uc774\ud130 \ud074\ub9ac\ub2dd (\ubcc4\ub3c4 \uc139\uc158)\n# \ub9c8\ud06c\ub2e4\uc6b4 \uc140\ub85c \uc139\uc158 \uc81c\ubaa9 \ucd94\uac00\n## \ub370\uc774\ud130 \ud074\ub9ac\ub2dd\n# \uacb0\uce21\uce58 \ucc98\ub9ac\n# \uc911\ubcf5 \uc81c\uac70\n# \ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658\n\n# 5. \ubd84\uc11d (\uccb4\uacc4\uc801\uc73c\ub85c \uad6c\uc131)\n## \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d\n# \uc2dc\uac01\ud654\n# \ud1b5\uacc4 \ubd84\uc11d\n\n# 6. \uacb0\ub860 (\ub9c8\uc9c0\ub9c9 \uc139\uc158)\n## \uc8fc\uc694 \ubc1c\uacac\uc0ac\ud56d\n# \ub9c8\ud06c\ub2e4\uc6b4\uc73c\ub85c \uc694\uc57d\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc720\uc6a9\ud55c-\ub9e4\uc9c1-\ucee4\ub9e8\ub4dc",children:"\uc720\uc6a9\ud55c \ub9e4\uc9c1 \ucee4\ub9e8\ub4dc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815\n%timeit df.groupby('category').mean()\n\n# \uc804\uccb4 \uc140 \uc2e4\ud589 \uc2dc\uac04\n%%time\n# \uae34 \uc5f0\uc0b0\nresult = some_long_operation()\n\n# \ub514\ubc84\uae45\n%debug\n\n# \ud658\uacbd \ubcc0\uc218 \ud655\uc778\n%env\n\n# \uc2dc\uc2a4\ud15c \uba85\ub839\uc5b4 \uc2e4\ud589\n!pip list\n!ls -la\n\n# \ud30c\uc77c \ub0b4\uc6a9 \ud45c\uc2dc\n%load script.py\n\n# \ubcc0\uc218 \uc815\ubcf4\n%whos\n\n# \ud788\uc2a4\ud1a0\ub9ac\n%history\n"})}),"\n",(0,s.jsx)(e.h2,{id:"410-\ub370\uc774\ud130-\ud074\ub9ac\ub2dd-\ud30c\uc774\ud504\ub77c\uc778",children:"4.10 \ub370\uc774\ud130 \ud074\ub9ac\ub2dd \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'class DataCleaningPipeline:\n    """\ub370\uc774\ud130 \ud074\ub9ac\ub2dd\uc744 \uc704\ud55c \ud45c\uc900 \ud30c\uc774\ud504\ub77c\uc778"""\n\n    def __init__(self, df):\n        self.df = df.copy()\n        self.cleaning_report = []\n\n    def remove_duplicates(self, subset=None):\n        """\uc911\ubcf5 \uc81c\uac70"""\n        initial_count = len(self.df)\n        self.df = self.df.drop_duplicates(subset=subset)\n        removed = initial_count - len(self.df)\n        self.cleaning_report.append(f"\uc911\ubcf5 \uc81c\uac70: {removed}\uac1c \ud589 \uc0ad\uc81c")\n        return self\n\n    def handle_missing_values(self, strategy=\'drop\', fill_values=None):\n        """\uacb0\uce21\uce58 \ucc98\ub9ac"""\n        initial_nulls = self.df.isnull().sum().sum()\n\n        if strategy == \'drop\':\n            self.df = self.df.dropna()\n        elif strategy == \'fill\' and fill_values:\n            self.df = self.df.fillna(fill_values)\n        elif strategy == \'mean\':\n            numeric_cols = self.df.select_dtypes(include=[np.number]).columns\n            self.df[numeric_cols] = self.df[numeric_cols].fillna(\n                self.df[numeric_cols].mean()\n            )\n\n        final_nulls = self.df.isnull().sum().sum()\n        self.cleaning_report.append(\n            f"\uacb0\uce21\uce58 \ucc98\ub9ac: {initial_nulls - final_nulls}\uac1c \ucc98\ub9ac"\n        )\n        return self\n\n    def remove_outliers(self, columns, method=\'iqr\', threshold=1.5):\n        """\uc774\uc0c1\uce58 \uc81c\uac70"""\n        initial_count = len(self.df)\n\n        for col in columns:\n            if method == \'iqr\':\n                Q1 = self.df[col].quantile(0.25)\n                Q3 = self.df[col].quantile(0.75)\n                IQR = Q3 - Q1\n                lower = Q1 - threshold * IQR\n                upper = Q3 + threshold * IQR\n                self.df = self.df[\n                    (self.df[col] >= lower) & (self.df[col] <= upper)\n                ]\n            elif method == \'zscore\':\n                from scipy import stats\n                z_scores = np.abs(stats.zscore(self.df[col]))\n                self.df = self.df[z_scores < threshold]\n\n        removed = initial_count - len(self.df)\n        self.cleaning_report.append(f"\uc774\uc0c1\uce58 \uc81c\uac70: {removed}\uac1c \ud589 \uc0ad\uc81c")\n        return self\n\n    def convert_dtypes(self, dtype_dict):\n        """\ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658"""\n        for col, dtype in dtype_dict.items():\n            if col in self.df.columns:\n                self.df[col] = self.df[col].astype(dtype)\n        self.cleaning_report.append(f"\ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658: {len(dtype_dict)}\uac1c \uc5f4")\n        return self\n\n    def standardize_text(self, columns):\n        """\ud14d\uc2a4\ud2b8 \ud45c\uc900\ud654"""\n        for col in columns:\n            if col in self.df.columns:\n                self.df[col] = self.df[col].str.strip().str.lower()\n        self.cleaning_report.append(f"\ud14d\uc2a4\ud2b8 \ud45c\uc900\ud654: {len(columns)}\uac1c \uc5f4")\n        return self\n\n    def rename_columns(self, rename_dict):\n        """\uc5f4 \uc774\ub984 \ubcc0\uacbd"""\n        self.df = self.df.rename(columns=rename_dict)\n        self.cleaning_report.append(f"\uc5f4 \uc774\ub984 \ubcc0\uacbd: {len(rename_dict)}\uac1c")\n        return self\n\n    def get_cleaned_data(self):\n        """\ud074\ub9ac\ub2dd\ub41c \ub370\uc774\ud130 \ubc18\ud658"""\n        return self.df\n\n    def get_report(self):\n        """\ud074\ub9ac\ub2dd \ubcf4\uace0\uc11c \ucd9c\ub825"""\n        print("=== \ub370\uc774\ud130 \ud074\ub9ac\ub2dd \ubcf4\uace0\uc11c ===")\n        for item in self.cleaning_report:\n            print(f"- {item}")\n        print(f"\\n\ucd5c\uc885 \ub370\uc774\ud130 \ud06c\uae30: {self.df.shape}")\n\n# \uc0ac\uc6a9 \uc608\uc2dc\n# df_cleaned = (DataCleaningPipeline(df)\n#               .remove_duplicates()\n#               .handle_missing_values(strategy=\'mean\')\n#               .remove_outliers([\'age\', \'salary\'])\n#               .standardize_text([\'name\', \'city\'])\n#               .get_cleaned_data())\n'})}),"\n",(0,s.jsx)(e.h2,{id:"411-\ub370\uc774\ud130-\ubd84\uc11d-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"4.11 \ub370\uc774\ud130 \ubd84\uc11d \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,s.jsx)(e.h3,{id:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markdown",children:"## \ub370\uc774\ud130 \ub85c\ub4dc \ub2e8\uacc4\n- [ ] \ub370\uc774\ud130 \uc815\uc0c1\uc801\uc73c\ub85c \ub85c\ub4dc\ub428\n- [ ] \uc778\ucf54\ub529 \ubb38\uc81c \uc5c6\uc74c (\ud55c\uae00 \uae68\uc9d0 \ud655\uc778)\n- [ ] \uc608\uc0c1\ud55c \ud589/\uc5f4 \uac1c\uc218\uc640 \uc77c\uce58\n- [ ] \uc801\uc808\ud55c \uad6c\ubd84\uc790 \uc0ac\uc6a9 (CSV\uc758 \uacbd\uc6b0)\n\n## \ub370\uc774\ud130 \ud0d0\uc0c9 \ub2e8\uacc4\n- [ ] df.head(), df.tail() \ud655\uc778\n- [ ] df.info() - \ub370\uc774\ud130 \ud0c0\uc785, \uacb0\uce21\uce58 \ud655\uc778\n- [ ] df.describe() - \uae30\uc220 \ud1b5\uacc4 \ud655\uc778\n- [ ] \uac01 \uc5f4\uc758 \uace0\uc720\uac12 \uac1c\uc218 \ud655\uc778\n- [ ] \ub370\uc774\ud130 \ubd84\ud3ec \uc2dc\uac01\ud654\n\n## \ub370\uc774\ud130 \ud074\ub9ac\ub2dd \ub2e8\uacc4\n- [ ] \uc911\ubcf5 \ub370\uc774\ud130 \ud655\uc778 \ubc0f \uc81c\uac70\n- [ ] \uacb0\uce21\uce58 \ud655\uc778 \ubc0f \ucc98\ub9ac\n- [ ] \uc774\uc0c1\uce58 \ud655\uc778 \ubc0f \ucc98\ub9ac\n- [ ] \ub370\uc774\ud130 \ud0c0\uc785 \uc801\uc808\uc131 \ud655\uc778\n- [ ] \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \uc77c\uad00\uc131 \ud655\uc778\n- [ ] \ub0a0\uc9dc/\uc2dc\uac04 \ub370\uc774\ud130 \ud615\uc2dd \ud1b5\uc77c\n\n## \ubd84\uc11d \ub2e8\uacc4\n- [ ] \ubd84\uc11d \ubaa9\uc801 \uba85\ud655\ud788 \uc815\uc758\n- [ ] \uc801\uc808\ud55c \uc2dc\uac01\ud654 \uc120\ud0dd\n- [ ] \ud1b5\uacc4\uc801 \uc720\uc758\uc131 \ud655\uc778\n- [ ] \uac00\uc815(assumptions) \uac80\uc99d\n- [ ] \uacb0\uacfc \ud574\uc11d\uc758 \ud0c0\ub2f9\uc131 \ud655\uc778\n\n## \uacb0\uacfc \uacf5\uc720 \ub2e8\uacc4\n- [ ] \ud575\uc2ec \uc778\uc0ac\uc774\ud2b8 \uba85\ud655\ud788 \uc815\ub9ac\n- [ ] \uc2dc\uac01\ud654 \ub77c\ubca8\ub9c1 (\uc81c\ubaa9, \ucd95 \uc774\ub984)\n- [ ] \ucf54\ub4dc \uc8fc\uc11d \ucd94\uac00\n- [ ] \uc7ac\ud604 \uac00\ub2a5\ud55c \ucf54\ub4dc \uc791\uc131\n- [ ] \uacb0\uacfc \ubb38\uc11c\ud654\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654-\ud301",children:"\uc131\ub2a5 \ucd5c\uc801\ud654 \ud301"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# 1. \uc801\uc808\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \uc0ac\uc6a9\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uc904\uc774\uae30\ndf['category'] = df['category'].astype('category')\ndf['id'] = df['id'].astype('int32')  # int64 \ub300\uc2e0\n\n# 2. \ubca1\ud130\ud654 \uc5f0\uc0b0 \uc0ac\uc6a9 (\ubc18\ubcf5\ubb38 \ud53c\ud558\uae30)\n# \ub290\ub9bc\nresult = []\nfor value in df['column']:\n    result.append(value * 2)\n\n# \ube60\ub984\nresult = df['column'] * 2\n\n# 3. \uccad\ud06c \ub2e8\uc704\ub85c \ub300\uc6a9\ub7c9 \ud30c\uc77c \uc77d\uae30\nchunks = pd.read_csv('large_file.csv', chunksize=10000)\nfor chunk in chunks:\n    process(chunk)\n\n# 4. query \uba54\uc11c\ub4dc \uc0ac\uc6a9 (\uc870\uac74 \ud544\ud130\ub9c1 \uc2dc)\n# \uc77c\ubc18\uc801 \ubc29\ubc95\ndf_filtered = df[(df['age'] > 25) & (df['city'] == 'Seoul')]\n\n# \ub354 \ube60\ub978 \ubc29\ubc95\ndf_filtered = df.query('age > 25 and city == \"Seoul\"')\n\n# 5. eval \uba54\uc11c\ub4dc \uc0ac\uc6a9 (\ubcf5\uc7a1\ud55c \uc5f0\uc0b0)\n# \uc77c\ubc18\uc801 \ubc29\ubc95\ndf['result'] = df['a'] + df['b'] * df['c']\n\n# \ub354 \ube60\ub978 \ubc29\ubc95\ndf.eval('result = a + b * c', inplace=True)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ucf54\ub4dc-\uc2a4\ud0c0\uc77c-\uac00\uc774\ub4dc",children:"\ucf54\ub4dc \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc88b\uc740 \uc608\uc2dc\ndef analyze_sales_by_region(df, region_col='region', sales_col='sales'):\n    \"\"\"\n    \uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c\uc744 \ubd84\uc11d\ud569\ub2c8\ub2e4.\n\n    Parameters:\n    -----------\n    df : DataFrame\n        \ud310\ub9e4 \ub370\uc774\ud130\n    region_col : str\n        \uc9c0\uc5ed \uc5f4 \uc774\ub984\n    sales_col : str\n        \ub9e4\ucd9c \uc5f4 \uc774\ub984\n\n    Returns:\n    --------\n    DataFrame\n        \uc9c0\uc5ed\ubcc4 \uc9d1\uacc4\ub41c \ub9e4\ucd9c \ud1b5\uacc4\n    \"\"\"\n    result = (df.groupby(region_col)[sales_col]\n              .agg(['sum', 'mean', 'count'])\n              .round(2)\n              .sort_values('sum', ascending=False))\n\n    return result\n\n# \ub098\uc05c \uc608\uc2dc\ndef f(d):\n    return d.groupby('region')['sales'].sum()  # \ubb38\uc11c\ud654 \uc5c6\uc74c, \uc774\ub984 \ubd88\uba85\ud655\n"})}),"\n",(0,s.jsx)(e.h2,{id:"412-\uc5f0\uc2b5-\ubb38\uc81c",children:"4.12 \uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,s.jsx)(e.h3,{id:"\ubb38\uc81c-1-\ub0a0\uc528-\ub370\uc774\ud130-\ubd84\uc11d",children:"\ubb38\uc81c 1: \ub0a0\uc528 \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \ub0a0\uc528 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uc138\uc694\nimport pandas as pd\nimport numpy as np\n\n# \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\ndates = pd.date_range('2023-01-01', periods=365, freq='D')\nweather_data = pd.DataFrame({\n    'date': dates,\n    'temperature': np.random.normal(15, 10, 365),\n    'humidity': np.random.uniform(30, 90, 365),\n    'rainfall': np.random.exponential(5, 365),\n    'wind_speed': np.random.gamma(2, 2, 365)\n})\n\n# \uacfc\uc81c:\n# 1. \uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628 \uacc4\uc0b0\n# 2. \uac15\uc218\ub7c9\uc774 10mm \uc774\uc0c1\uc778 \ub0a0 \ube44\uc728 \uacc4\uc0b0\n# 3. \uae30\uc628\uacfc \uc2b5\ub3c4\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\n# 4. \uacc4\uc808\ubcc4(\ubd04, \uc5ec\ub984, \uac00\uc744, \uaca8\uc6b8) \ud3c9\uade0 \uae30\uc628 \ube44\uad50\n# 5. \uc6d4\ubcc4 \uae30\uc628 \ucd94\uc774 \uc2dc\uac01\ud654\n"})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# 1. \uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628\nweather_data['month'] = weather_data['date'].dt.month\nmonthly_temp = weather_data.groupby('month')['temperature'].mean()\nprint(\"=== \uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628 ===\")\nprint(monthly_temp.round(2))\n\n# 2. \uac15\uc218\ub7c9 10mm \uc774\uc0c1\uc778 \ub0a0 \ube44\uc728\nrainy_days = (weather_data['rainfall'] >= 10).sum()\nrainy_ratio = rainy_days / len(weather_data) * 100\nprint(f\"\\n\uac15\uc218\ub7c9 10mm \uc774\uc0c1: {rainy_ratio:.1f}%\")\n\n# 3. \uae30\uc628\uacfc \uc2b5\ub3c4\uc758 \uc0c1\uad00\uad00\uacc4\ncorrelation = weather_data['temperature'].corr(weather_data['humidity'])\nprint(f\"\\n\uae30\uc628-\uc2b5\ub3c4 \uc0c1\uad00\uacc4\uc218: {correlation:.3f}\")\n\n# 4. \uacc4\uc808\ubcc4 \ud3c9\uade0 \uae30\uc628\ndef get_season(month):\n    if month in [3, 4, 5]:\n        return '\ubd04'\n    elif month in [6, 7, 8]:\n        return '\uc5ec\ub984'\n    elif month in [9, 10, 11]:\n        return '\uac00\uc744'\n    else:\n        return '\uaca8\uc6b8'\n\nweather_data['season'] = weather_data['month'].apply(get_season)\nseasonal_temp = weather_data.groupby('season')['temperature'].mean()\nprint(\"\\n=== \uacc4\uc808\ubcc4 \ud3c9\uade0 \uae30\uc628 ===\")\nprint(seasonal_temp.round(2))\n\n# 5. \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, axes = plt.subplots(2, 2, figsize=(14, 10))\n\n# \uc6d4\ubcc4 \uae30\uc628\naxes[0, 0].plot(monthly_temp.index, monthly_temp.values, marker='o')\naxes[0, 0].set_title('\uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628')\naxes[0, 0].set_xlabel('\uc6d4')\naxes[0, 0].set_ylabel('\uae30\uc628 (\xb0C)')\naxes[0, 0].grid(True, alpha=0.3)\n\n# \uae30\uc628 \ubd84\ud3ec\naxes[0, 1].hist(weather_data['temperature'], bins=30, edgecolor='black')\naxes[0, 1].set_title('\uae30\uc628 \ubd84\ud3ec')\naxes[0, 1].set_xlabel('\uae30\uc628 (\xb0C)')\naxes[0, 1].set_ylabel('\ube48\ub3c4')\n\n# \uae30\uc628 vs \uc2b5\ub3c4\naxes[1, 0].scatter(weather_data['temperature'], weather_data['humidity'], alpha=0.5)\naxes[1, 0].set_title('\uae30\uc628 vs \uc2b5\ub3c4')\naxes[1, 0].set_xlabel('\uae30\uc628 (\xb0C)')\naxes[1, 0].set_ylabel('\uc2b5\ub3c4 (%)')\n\n# \uacc4\uc808\ubcc4 \ubc15\uc2a4\ud50c\ub86f\nseason_order = ['\ubd04', '\uc5ec\ub984', '\uac00\uc744', '\uaca8\uc6b8']\nsns.boxplot(data=weather_data, x='season', y='temperature',\n            order=season_order, ax=axes[1, 1])\naxes[1, 1].set_title('\uacc4\uc808\ubcc4 \uae30\uc628 \ubd84\ud3ec')\naxes[1, 1].set_xlabel('\uacc4\uc808')\naxes[1, 1].set_ylabel('\uae30\uc628 (\xb0C)')\n\nplt.tight_layout()\nplt.show()\n"})})]}),"\n",(0,s.jsx)(e.h3,{id:"\ubb38\uc81c-2-\uc804\uc790\uc0c1\uac70\ub798-\ub370\uc774\ud130-\ubd84\uc11d",children:"\ubb38\uc81c 2: \uc804\uc790\uc0c1\uac70\ub798 \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \uc804\uc790\uc0c1\uac70\ub798 \uc8fc\ubb38 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uc138\uc694\nnp.random.seed(42)\n\norders = pd.DataFrame({\n    'order_id': range(1, 1001),\n    'customer_id': np.random.randint(1, 201, 1000),\n    'product_category': np.random.choice(['\uc804\uc790\uc81c\ud488', '\uc758\ub958', '\uc2dd\ud488', '\uac00\uad6c'], 1000),\n    'order_amount': np.random.randint(10, 500, 1000) * 1000,\n    'order_date': pd.date_range('2023-01-01', periods=1000, freq='H'),\n    'payment_method': np.random.choice(['\uce74\ub4dc', '\uacc4\uc88c\uc774\uccb4', '\uac04\ud3b8\uacb0\uc81c'], 1000),\n    'is_returned': np.random.choice([True, False], 1000, p=[0.1, 0.9])\n})\n\n# \uacfc\uc81c:\n# 1. \uace0\uac1d\ub2f9 \ud3c9\uade0 \uc8fc\ubb38 \uae08\uc561 \uacc4\uc0b0\n# 2. \uce74\ud14c\uace0\ub9ac\ubcc4 \ubc18\ud488\ub960 \uacc4\uc0b0\n# 3. \uacb0\uc81c \uc218\ub2e8\ubcc4 \ud3c9\uade0 \uc8fc\ubb38 \uae08\uc561 \ube44\uad50\n# 4. \uc694\uc77c\ubcc4 \uc8fc\ubb38 \ud328\ud134 \ubd84\uc11d\n# 5. \uac00\uc7a5 \ub9ce\uc774 \uad6c\ub9e4\ud55c \uc0c1\uc704 10\uba85\uc758 \uace0\uac1d \ucc3e\uae30\n# 6. \uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38 \ubd84\ud3ec \uc2dc\uac01\ud654\n"})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# 1. \uace0\uac1d\ub2f9 \ud3c9\uade0 \uc8fc\ubb38 \uae08\uc561\navg_per_customer = orders.groupby('customer_id')['order_amount'].mean()\nprint(f\"\uace0\uac1d\ub2f9 \ud3c9\uade0 \uc8fc\ubb38 \uae08\uc561: {avg_per_customer.mean():,.0f}\uc6d0\")\n\n# 2. \uce74\ud14c\uace0\ub9ac\ubcc4 \ubc18\ud488\ub960\nreturn_rate = orders.groupby('product_category')['is_returned'].mean() * 100\nprint(\"\\n=== \uce74\ud14c\uace0\ub9ac\ubcc4 \ubc18\ud488\ub960 ===\")\nprint(return_rate.round(2))\n\n# 3. \uacb0\uc81c \uc218\ub2e8\ubcc4 \ud3c9\uade0 \uc8fc\ubb38 \uae08\uc561\npayment_avg = orders.groupby('payment_method')['order_amount'].mean()\nprint(\"\\n=== \uacb0\uc81c \uc218\ub2e8\ubcc4 \ud3c9\uade0 \uc8fc\ubb38 \uae08\uc561 ===\")\nprint(payment_avg.round(0))\n\n# 4. \uc694\uc77c\ubcc4 \uc8fc\ubb38 \ud328\ud134\norders['dayofweek'] = orders['order_date'].dt.day_name()\norders_by_day = orders.groupby('dayofweek').size()\nprint(\"\\n=== \uc694\uc77c\ubcc4 \uc8fc\ubb38 \uc218 ===\")\nprint(orders_by_day)\n\n# 5. \uc0c1\uc704 10\uba85 \uace0\uac1d\ntop_customers = (orders.groupby('customer_id')['order_amount']\n                 .sum()\n                 .nlargest(10))\nprint(\"\\n=== \uc0c1\uc704 10\uba85 \uace0\uac1d (\ucd1d \uad6c\ub9e4\uc561) ===\")\nprint(top_customers)\n\n# 6. \uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38 \ubd84\ud3ec\norders['hour'] = orders['order_date'].dt.hour\nhourly_orders = orders.groupby('hour').size()\n\nplt.figure(figsize=(12, 6))\nplt.bar(hourly_orders.index, hourly_orders.values, color='steelblue')\nplt.title('\uc2dc\uac04\ub300\ubcc4 \uc8fc\ubb38 \ubd84\ud3ec')\nplt.xlabel('\uc2dc\uac04')\nplt.ylabel('\uc8fc\ubb38 \uc218')\nplt.xticks(range(24))\nplt.grid(True, alpha=0.3, axis='y')\nplt.tight_layout()\nplt.show()\n\n# \ucd94\uac00: \uc885\ud569 \ub300\uc2dc\ubcf4\ub4dc\nfig, axes = plt.subplots(2, 2, figsize=(14, 10))\n\n# \uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c\ncategory_sales = orders.groupby('product_category')['order_amount'].sum()\naxes[0, 0].pie(category_sales.values, labels=category_sales.index, autopct='%1.1f%%')\naxes[0, 0].set_title('\uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c \ube44\uc911')\n\n# \uacb0\uc81c \uc218\ub2e8\ubcc4 \uc8fc\ubb38 \uc218\npayment_counts = orders['payment_method'].value_counts()\naxes[0, 1].bar(payment_counts.index, payment_counts.values)\naxes[0, 1].set_title('\uacb0\uc81c \uc218\ub2e8\ubcc4 \uc8fc\ubb38 \uc218')\naxes[0, 1].set_ylabel('\uc8fc\ubb38 \uc218')\n\n# \uc77c\ubcc4 \ub9e4\ucd9c \ucd94\uc774\ndaily_sales = orders.groupby(orders['order_date'].dt.date)['order_amount'].sum()\naxes[1, 0].plot(daily_sales.index, daily_sales.values)\naxes[1, 0].set_title('\uc77c\ubcc4 \ub9e4\ucd9c \ucd94\uc774')\naxes[1, 0].set_xlabel('\ub0a0\uc9dc')\naxes[1, 0].set_ylabel('\ub9e4\ucd9c')\naxes[1, 0].tick_params(axis='x', rotation=45)\n\n# \uc8fc\ubb38 \uae08\uc561 \ubd84\ud3ec\naxes[1, 1].hist(orders['order_amount'], bins=30, edgecolor='black')\naxes[1, 1].set_title('\uc8fc\ubb38 \uae08\uc561 \ubd84\ud3ec')\naxes[1, 1].set_xlabel('\uc8fc\ubb38 \uae08\uc561')\naxes[1, 1].set_ylabel('\ube48\ub3c4')\n\nplt.tight_layout()\nplt.show()\n"})})]}),"\n",(0,s.jsx)(e.h3,{id:"\ubb38\uc81c-3-\ubcf5\ud569-\ub370\uc774\ud130-\ucc98\ub9ac",children:"\ubb38\uc81c 3: \ubcf5\ud569 \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \ub450 \uac1c\uc758 \ub370\uc774\ud130\uc14b\uc744 \ubcd1\ud569\ud558\uace0 \ubd84\uc11d\ud558\uc138\uc694\n\n# \uc9c1\uc6d0 \ub370\uc774\ud130\nemployees = pd.DataFrame({\n    'emp_id': range(1, 51),\n    'name': [f'\uc9c1\uc6d0{i}' for i in range(1, 51)],\n    'department': np.random.choice(['\uc601\uc5c5', 'IT', '\ub9c8\ucf00\ud305', 'HR'], 50),\n    'hire_date': pd.date_range('2018-01-01', periods=50, freq='M')\n})\n\n# \uc131\uacfc \ub370\uc774\ud130\nperformance = pd.DataFrame({\n    'emp_id': np.random.choice(range(1, 51), 100),\n    'quarter': np.random.choice(['Q1', 'Q2', 'Q3', 'Q4'], 100),\n    'sales': np.random.randint(50, 200, 100) * 10000,\n    'rating': np.random.choice(['A', 'B', 'C'], 100, p=[0.2, 0.5, 0.3])\n})\n\n# \uacfc\uc81c:\n# 1. \ub450 \ub370\uc774\ud130\uc14b \ubcd1\ud569\n# 2. \ubd80\uc11c\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c \uacc4\uc0b0\n# 3. \ud3c9\uc810\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c \ube44\uad50\n# 4. \ubd84\uae30\ubcc4 \ub9e4\ucd9c \ucd94\uc774 \ubd84\uc11d\n# 5. \uac01 \ubd80\uc11c\uc758 \ucd5c\uace0 \uc131\uacfc\uc790 \ucc3e\uae30\n# 6. \uc7ac\uc9c1 \uae30\uac04\uacfc \ud3c9\uade0 \ub9e4\ucd9c\uc758 \uad00\uacc4 \ubd84\uc11d\n"})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# 1. \ub370\uc774\ud130 \ubcd1\ud569\nmerged_data = pd.merge(employees, performance, on='emp_id', how='left')\nprint(\"=== \ubcd1\ud569\ub41c \ub370\uc774\ud130 ===\")\nprint(merged_data.head())\n\n# 2. \ubd80\uc11c\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c\ndept_sales = merged_data.groupby('department')['sales'].mean()\nprint(\"\\n=== \ubd80\uc11c\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c ===\")\nprint(dept_sales.round(0))\n\n# 3. \ud3c9\uc810\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c\nrating_sales = merged_data.groupby('rating')['sales'].mean().sort_values(ascending=False)\nprint(\"\\n=== \ud3c9\uc810\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c ===\")\nprint(rating_sales.round(0))\n\n# 4. \ubd84\uae30\ubcc4 \ub9e4\ucd9c \ucd94\uc774\nquarter_sales = merged_data.groupby('quarter')['sales'].sum()\nquarter_order = ['Q1', 'Q2', 'Q3', 'Q4']\nquarter_sales = quarter_sales.reindex(quarter_order)\nprint(\"\\n=== \ubd84\uae30\ubcc4 \ucd1d \ub9e4\ucd9c ===\")\nprint(quarter_sales)\n\n# 5. \uac01 \ubd80\uc11c\uc758 \ucd5c\uace0 \uc131\uacfc\uc790\ntop_performers = (merged_data.groupby(['department', 'name'])['sales']\n                  .sum()\n                  .reset_index()\n                  .sort_values('sales', ascending=False)\n                  .groupby('department')\n                  .first())\nprint(\"\\n=== \ubd80\uc11c\ubcc4 \ucd5c\uace0 \uc131\uacfc\uc790 ===\")\nprint(top_performers)\n\n# 6. \uc7ac\uc9c1 \uae30\uac04\uacfc \ub9e4\ucd9c \uad00\uacc4\nimport datetime\nmerged_data['tenure_years'] = (\n    (datetime.datetime.now() - merged_data['hire_date']).dt.days / 365\n)\n\ntenure_sales = merged_data.groupby(\n    pd.cut(merged_data['tenure_years'], bins=5)\n)['sales'].mean()\n\nprint(\"\\n=== \uc7ac\uc9c1 \uae30\uac04\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c ===\")\nprint(tenure_sales.round(0))\n\n# \uc2dc\uac01\ud654\nfig, axes = plt.subplots(2, 2, figsize=(14, 10))\n\n# \ubd80\uc11c\ubcc4 \ub9e4\ucd9c\ndept_sales.plot(kind='bar', ax=axes[0, 0], color='skyblue')\naxes[0, 0].set_title('\ubd80\uc11c\ubcc4 \ud3c9\uade0 \ub9e4\ucd9c')\naxes[0, 0].set_ylabel('\ub9e4\ucd9c')\naxes[0, 0].tick_params(axis='x', rotation=45)\n\n# \ubd84\uae30\ubcc4 \ub9e4\ucd9c\naxes[0, 1].plot(quarter_order, quarter_sales.values, marker='o', linewidth=2)\naxes[0, 1].set_title('\ubd84\uae30\ubcc4 \ucd1d \ub9e4\ucd9c')\naxes[0, 1].set_xlabel('\ubd84\uae30')\naxes[0, 1].set_ylabel('\ub9e4\ucd9c')\naxes[0, 1].grid(True, alpha=0.3)\n\n# \ud3c9\uc810 \ubd84\ud3ec\nmerged_data['rating'].value_counts().plot(kind='pie', ax=axes[1, 0], autopct='%1.1f%%')\naxes[1, 0].set_title('\ud3c9\uc810 \ubd84\ud3ec')\naxes[1, 0].set_ylabel('')\n\n# \uc7ac\uc9c1 \uae30\uac04 vs \ub9e4\ucd9c\naxes[1, 1].scatter(merged_data['tenure_years'], merged_data['sales'], alpha=0.5)\naxes[1, 1].set_title('\uc7ac\uc9c1 \uae30\uac04\uacfc \ub9e4\ucd9c\uc758 \uad00\uacc4')\naxes[1, 1].set_xlabel('\uc7ac\uc9c1 \uae30\uac04 (\ub144)')\naxes[1, 1].set_ylabel('\ub9e4\ucd9c')\n\nplt.tight_layout()\nplt.show()\n"})})]}),"\n",(0,s.jsx)(e.h2,{id:"\uc694\uc57d",children:"\uc694\uc57d"}),"\n",(0,s.jsx)(e.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Python\uc744 \uc774\uc6a9\ud55c \ub370\uc774\ud130 \ubd84\uc11d\uc758 \ud575\uc2ec \ub0b4\uc6a9\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"NumPy"}),": \ubc30\uc5f4 \uc5f0\uc0b0, \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305, \uc218\ud559 \ud568\uc218"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"pandas"}),": DataFrame, Series, \ub370\uc774\ud130 \uc870\uc791 \ubc0f \ubd84\uc11d"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ub370\uc774\ud130 \ucc98\ub9ac"}),": \ud544\ud130\ub9c1, \uc815\ub82c, \uadf8\ub8f9\ud654, \ubcd1\ud569, \uacb0\uce21\uce58 \ucc98\ub9ac"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc2dc\uac01\ud654"}),": Matplotlib, Seaborn\uc744 \uc774\uc6a9\ud55c \ub2e4\uc591\ud55c \uadf8\ub798\ud504"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ud1b5\uacc4 \ubd84\uc11d"}),": \uae30\uc220 \ud1b5\uacc4, \uc0c1\uad00\uad00\uacc4, \uac00\uc124 \uac80\uc815"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc2dc\uacc4\uc5f4"}),": \ub0a0\uc9dc \ucc98\ub9ac, \ub9ac\uc0d8\ud50c\ub9c1, \uc774\ub3d9 \ud3c9\uade0"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc2e4\uc804 \uc608\uc81c"}),": \ud310\ub9e4 \ubd84\uc11d, \uace0\uac1d \uc138\uadf8\uba3c\ud14c\uc774\uc158, \uc8fc\uc2dd \ubd84\uc11d, \uc124\ubb38\uc870\uc0ac"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"\ub2e4\uc74c \uc139\uc158\uc5d0\uc11c\ub294 Python\uc744 \uc774\uc6a9\ud55c \uc790\ub3d9\ud654 \uae30\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\ub2e4\uc74c"}),": ",(0,s.jsx)(e.a,{href:"./automation",children:"\uc790\ub3d9\ud654"})]})]})}function c(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}}}]);