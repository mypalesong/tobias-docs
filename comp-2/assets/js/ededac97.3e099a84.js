"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[6747],{8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},8962:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"dagster/io-managers","title":"5. I/O Managers","description":"Asset\uacfc Op\uc758 \uc785\ucd9c\ub825 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \ub85c\ub4dc\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4.","source":"@site/docs/dagster/io-managers.md","sourceDirName":"dagster","slug":"/dagster/io-managers","permalink":"/docs/dagster/io-managers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dagster/io-managers.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"dagsterSidebar","previous":{"title":"4. Resources","permalink":"/docs/dagster/resources"},"next":{"title":"6. Partitions","permalink":"/docs/dagster/partitions"}}');var r=a(4848),s=a(8453);const i={sidebar_position:6},o="5. I/O Managers",d={},l=[{value:"5.1 I/O Manager \uac1c\ub150",id:"51-io-manager-\uac1c\ub150",level:2},{value:"5.2 \uae30\ubcf8 I/O Manager",id:"52-\uae30\ubcf8-io-manager",level:2},{value:"5.3 \ud30c\uc77c \uc2dc\uc2a4\ud15c I/O Manager",id:"53-\ud30c\uc77c-\uc2dc\uc2a4\ud15c-io-manager",level:2},{value:"5.3.1 Pickle I/O Manager",id:"531-pickle-io-manager",level:3},{value:"5.3.2 JSON I/O Manager",id:"532-json-io-manager",level:3},{value:"5.4 Parquet I/O Manager",id:"54-parquet-io-manager",level:2},{value:"5.5 S3 I/O Manager",id:"55-s3-io-manager",level:2},{value:"5.6 Database I/O Manager",id:"56-database-io-manager",level:2},{value:"5.7 Per-asset I/O Manager",id:"57-per-asset-io-manager",level:2},{value:"5.8 Partitioned I/O Manager",id:"58-partitioned-io-manager",level:2},{value:"5.9 \uc2e4\uc2b5 \ubb38\uc81c",id:"59-\uc2e4\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c: CSV I/O Manager \uad6c\ud604",id:"\ubb38\uc81c-csv-io-manager-\uad6c\ud604",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"5-io-managers",children:"5. I/O Managers"})}),"\n",(0,r.jsx)(n.p,{children:"Asset\uacfc Op\uc758 \uc785\ucd9c\ub825 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \ub85c\ub4dc\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"51-io-manager-\uac1c\ub150",children:"5.1 I/O Manager \uac1c\ub150"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"I/O Manager"}),"\ub294 Dagster\uc5d0\uc11c \ub370\uc774\ud130\uc758 \uc800\uc7a5\uacfc \ub85c\ub4dc\ub97c \ub2f4\ub2f9\ud558\ub294 \ub9ac\uc18c\uc2a4\uc785\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"**\uc5ed\ud560:**\n- Asset/Op \ucd9c\ub825\uc744 \uc800\uc7a5 (handle_output)\n- Asset/Op \uc785\ub825\uc744 \ub85c\ub4dc (load_input)\n- \ub370\uc774\ud130 \uc9c1\ub82c\ud654/\uc5ed\uc9c1\ub82c\ud654\n- \uc800\uc7a5 \uc704\uce58 \uad00\ub9ac\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc7a5\uc810:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uc800\uc7a5 \ub85c\uc9c1\uacfc \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \ubd84\ub9ac"}),"\n",(0,r.jsx)(n.li,{children:"\ud658\uacbd\ubcc4 \uc800\uc7a5 \uc804\ub7b5 \ubcc0\uacbd \uc6a9\uc774"}),"\n",(0,r.jsx)(n.li,{children:"\ub370\uc774\ud130 \ud615\uc2dd \ud45c\uc900\ud654"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"52-\uae30\ubcf8-io-manager",children:"5.2 \uae30\ubcf8 I/O Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import IOManager, io_manager\nimport pickle\nfrom pathlib import Path\n\nclass MyIOManager(IOManager):\n    def __init__(self, base_dir: str):\n        self.base_dir = Path(base_dir)\n        self.base_dir.mkdir(exist_ok=True)\n\n    def handle_output(self, context, obj):\n        """\ucd9c\ub825 \uc800\uc7a5"""\n        file_path = self._get_path(context)\n        with open(file_path, "wb") as f:\n            pickle.dump(obj, f)\n\n        context.log.info(f"Saved to {file_path}")\n\n    def load_input(self, context):\n        """\uc785\ub825 \ub85c\ub4dc"""\n        file_path = self._get_path(context)\n        with open(file_path, "rb") as f:\n            return pickle.load(f)\n\n    def _get_path(self, context) -> Path:\n        """\ud30c\uc77c \uacbd\ub85c \uc0dd\uc131"""\n        return self.base_dir / f"{context.asset_key.path[-1]}.pkl"\n\n@io_manager\ndef my_io_manager():\n    return MyIOManager(base_dir="data/outputs")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"53-\ud30c\uc77c-\uc2dc\uc2a4\ud15c-io-manager",children:"5.3 \ud30c\uc77c \uc2dc\uc2a4\ud15c I/O Manager"}),"\n",(0,r.jsx)(n.h3,{id:"531-pickle-io-manager",children:"5.3.1 Pickle I/O Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import IOManager, io_manager, Definitions\nimport pickle\nimport os\n\nclass PickleIOManager(IOManager):\n    def __init__(self, base_dir: str):\n        self.base_dir = base_dir\n        os.makedirs(base_dir, exist_ok=True)\n\n    def handle_output(self, context, obj):\n        path = self._get_path(context)\n        with open(path, "wb") as f:\n            pickle.dump(obj, f)\n\n    def load_input(self, context):\n        path = self._get_path(context)\n        with open(path, "rb") as f:\n            return pickle.load(f)\n\n    def _get_path(self, context):\n        return os.path.join(\n            self.base_dir,\n            f"{context.asset_key.path[-1]}.pkl"\n        )\n\n@io_manager\ndef pickle_io_manager():\n    return PickleIOManager("data/pickle")\n\n# \uc0ac\uc6a9\nfrom dagster import asset\n\n@asset\ndef my_data() -> list:\n    return [1, 2, 3, 4, 5]\n\n@asset\ndef processed_data(my_data: list) -> list:\n    return [x * 2 for x in my_data]\n\ndefs = Definitions(\n    assets=[my_data, processed_data],\n    resources={"io_manager": pickle_io_manager}\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"532-json-io-manager",children:"5.3.2 JSON I/O Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\n\nclass JsonIOManager(IOManager):\n    def __init__(self, base_dir: str):\n        self.base_dir = base_dir\n        os.makedirs(base_dir, exist_ok=True)\n\n    def handle_output(self, context, obj):\n        path = self._get_path(context)\n        with open(path, "w") as f:\n            json.dump(obj, f, indent=2)\n\n    def load_input(self, context):\n        path = self._get_path(context)\n        with open(path, "r") as f:\n            return json.load(f)\n\n    def _get_path(self, context):\n        return os.path.join(\n            self.base_dir,\n            f"{context.asset_key.path[-1]}.json"\n        )\n\n@io_manager\ndef json_io_manager():\n    return JsonIOManager("data/json")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"54-parquet-io-manager",children:"5.4 Parquet I/O Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import IOManager, io_manager\nimport pandas as pd\nimport pyarrow.parquet as pq\nimport pyarrow as pa\n\nclass ParquetIOManager(IOManager):\n    def __init__(self, base_dir: str):\n        self.base_dir = base_dir\n        os.makedirs(base_dir, exist_ok=True)\n\n    def handle_output(self, context, obj: pd.DataFrame):\n        path = self._get_path(context)\n\n        # Parquet\ub85c \uc800\uc7a5\n        table = pa.Table.from_pandas(obj)\n        pq.write_table(table, path, compression=\'snappy\')\n\n        context.log.info(f"Saved {len(obj)} rows to {path}")\n\n        # \uba54\ud0c0\ub370\uc774\ud130 \uae30\ub85d\n        context.add_output_metadata({\n            "num_rows": len(obj),\n            "num_columns": len(obj.columns),\n            "file_size": os.path.getsize(path)\n        })\n\n    def load_input(self, context) -> pd.DataFrame:\n        path = self._get_path(context)\n        return pd.read_parquet(path)\n\n    def _get_path(self, context):\n        return os.path.join(\n            self.base_dir,\n            f"{context.asset_key.path[-1]}.parquet"\n        )\n\n@io_manager\ndef parquet_io_manager():\n    return ParquetIOManager("data/parquet")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"55-s3-io-manager",children:"5.5 S3 I/O Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import IOManager, io_manager\nimport boto3\nimport pickle\nfrom io import BytesIO\n\nclass S3IOManager(IOManager):\n    def __init__(self, bucket: str, prefix: str = ""):\n        self.s3_client = boto3.client(\'s3\')\n        self.bucket = bucket\n        self.prefix = prefix\n\n    def handle_output(self, context, obj):\n        key = self._get_key(context)\n\n        # \uc9c1\ub82c\ud654\n        buffer = BytesIO()\n        pickle.dump(obj, buffer)\n        buffer.seek(0)\n\n        # S3 \uc5c5\ub85c\ub4dc\n        self.s3_client.put_object(\n            Bucket=self.bucket,\n            Key=key,\n            Body=buffer.getvalue()\n        )\n\n        context.log.info(f"Saved to s3://{self.bucket}/{key}")\n\n    def load_input(self, context):\n        key = self._get_key(context)\n\n        # S3 \ub2e4\uc6b4\ub85c\ub4dc\n        response = self.s3_client.get_object(\n            Bucket=self.bucket,\n            Key=key\n        )\n\n        # \uc5ed\uc9c1\ub82c\ud654\n        return pickle.loads(response[\'Body\'].read())\n\n    def _get_key(self, context):\n        parts = [self.prefix] if self.prefix else []\n        parts.append(f"{context.asset_key.path[-1]}.pkl")\n        return "/".join(parts)\n\n@io_manager(config_schema={"bucket": str, "prefix": str})\ndef s3_io_manager(context):\n    return S3IOManager(\n        bucket=context.resource_config["bucket"],\n        prefix=context.resource_config.get("prefix", "")\n    )\n'})}),"\n",(0,r.jsx)(n.h2,{id:"56-database-io-manager",children:"5.6 Database I/O Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import IOManager, io_manager\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\nclass PostgresIOManager(IOManager):\n    def __init__(self, connection_string: str):\n        self.engine = create_engine(connection_string)\n\n    def handle_output(self, context, obj: pd.DataFrame):\n        table_name = context.asset_key.path[-1]\n\n        # DataFrame\uc744 PostgreSQL\uc5d0 \uc800\uc7a5\n        obj.to_sql(\n            table_name,\n            self.engine,\n            if_exists=\'replace\',\n            index=False\n        )\n\n        context.log.info(f"Saved {len(obj)} rows to {table_name}")\n\n        context.add_output_metadata({\n            "num_rows": len(obj),\n            "table_name": table_name\n        })\n\n    def load_input(self, context) -> pd.DataFrame:\n        table_name = context.upstream_output.asset_key.path[-1]\n\n        # PostgreSQL\uc5d0\uc11c \ub85c\ub4dc\n        query = f"SELECT * FROM {table_name}"\n        return pd.read_sql(query, self.engine)\n\n@io_manager(config_schema={"connection_string": str})\ndef postgres_io_manager(context):\n    return PostgresIOManager(\n        context.resource_config["connection_string"]\n    )\n'})}),"\n",(0,r.jsx)(n.h2,{id:"57-per-asset-io-manager",children:"5.7 Per-asset I/O Manager"}),"\n",(0,r.jsx)(n.p,{children:"Asset\ubcc4\ub85c \ub2e4\ub978 I/O Manager\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import asset, Definitions, fs_io_manager\n\n# Pickle \uc0ac\uc6a9\n@asset(io_manager_key="pickle_io_manager")\ndef raw_data() -> dict:\n    return {"value": 100}\n\n# Parquet \uc0ac\uc6a9\n@asset(io_manager_key="parquet_io_manager")\ndef dataframe_asset() -> pd.DataFrame:\n    return pd.DataFrame({"a": [1, 2, 3]})\n\n# S3 \uc0ac\uc6a9\n@asset(io_manager_key="s3_io_manager")\ndef cloud_asset() -> dict:\n    return {"cloud_data": "stored in S3"}\n\ndefs = Definitions(\n    assets=[raw_data, dataframe_asset, cloud_asset],\n    resources={\n        "pickle_io_manager": pickle_io_manager,\n        "parquet_io_manager": parquet_io_manager,\n        "s3_io_manager": s3_io_manager\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"58-partitioned-io-manager",children:"5.8 Partitioned I/O Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class PartitionedParquetIOManager(IOManager):\n    def __init__(self, base_dir: str):\n        self.base_dir = base_dir\n\n    def handle_output(self, context, obj: pd.DataFrame):\n        # Partition \uc815\ubcf4 \uac00\uc838\uc624\uae30\n        if context.has_partition_key:\n            partition_key = context.partition_key\n        else:\n            partition_key = "default"\n\n        # Partition\ubcc4\ub85c \uc800\uc7a5\n        partition_dir = os.path.join(\n            self.base_dir,\n            context.asset_key.path[-1],\n            f"partition={partition_key}"\n        )\n        os.makedirs(partition_dir, exist_ok=True)\n\n        file_path = os.path.join(partition_dir, "data.parquet")\n        obj.to_parquet(file_path)\n\n        context.log.info(\n            f"Saved partition {partition_key} to {file_path}"\n        )\n\n    def load_input(self, context) -> pd.DataFrame:\n        if context.has_partition_key:\n            partition_key = context.partition_key\n        else:\n            partition_key = "default"\n\n        file_path = os.path.join(\n            self.base_dir,\n            context.upstream_output.asset_key.path[-1],\n            f"partition={partition_key}",\n            "data.parquet"\n        )\n\n        return pd.read_parquet(file_path)\n\n@io_manager\ndef partitioned_parquet_io_manager():\n    return PartitionedParquetIOManager("data/partitioned")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"59-\uc2e4\uc2b5-\ubb38\uc81c",children:"5.9 \uc2e4\uc2b5 \ubb38\uc81c"}),"\n",(0,r.jsx)(n.h3,{id:"\ubb38\uc81c-csv-io-manager-\uad6c\ud604",children:"\ubb38\uc81c: CSV I/O Manager \uad6c\ud604"}),"\n",(0,r.jsx)(n.p,{children:"CSV \ud30c\uc77c\ub85c DataFrame\uc744 \uc800\uc7a5\ud558\uace0 \ub85c\ub4dc\ud558\ub294 I/O Manager\ub97c \uad6c\ud604\ud558\uc138\uc694."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc694\uad6c\uc0ac\ud56d:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"pandas DataFrame\uc744 CSV\ub85c \uc800\uc7a5"}),"\n",(0,r.jsx)(n.li,{children:"\uc778\ub371\uc2a4 \uc800\uc7a5 \uc5ec\ubd80 \uc120\ud0dd \uac00\ub2a5"}),"\n",(0,r.jsx)(n.li,{children:"\uc778\ucf54\ub529 \uc124\uc815 \uac00\ub2a5 (\uae30\ubcf8 utf-8)"}),"\n",(0,r.jsx)(n.li,{children:"\uba54\ud0c0\ub370\uc774\ud130 \uae30\ub85d (\ud589 \uc218, \uc5f4 \uc218, \ud30c\uc77c \ud06c\uae30)"}),"\n"]}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import IOManager, io_manager, Definitions, asset\nimport pandas as pd\nimport os\n\nclass CsvIOManager(IOManager):\n    def __init__(\n        self,\n        base_dir: str,\n        save_index: bool = False,\n        encoding: str = \'utf-8\'\n    ):\n        self.base_dir = base_dir\n        self.save_index = save_index\n        self.encoding = encoding\n        os.makedirs(base_dir, exist_ok=True)\n\n    def handle_output(self, context, obj: pd.DataFrame):\n        path = self._get_path(context)\n\n        # CSV\ub85c \uc800\uc7a5\n        obj.to_csv(\n            path,\n            index=self.save_index,\n            encoding=self.encoding\n        )\n\n        # \uba54\ud0c0\ub370\uc774\ud130 \uae30\ub85d\n        context.add_output_metadata({\n            "num_rows": len(obj),\n            "num_columns": len(obj.columns),\n            "file_size_bytes": os.path.getsize(path),\n            "columns": list(obj.columns),\n            "file_path": path\n        })\n\n        context.log.info(\n            f"Saved {len(obj)} rows to {path}"\n        )\n\n    def load_input(self, context) -> pd.DataFrame:\n        path = self._get_path(context)\n\n        # CSV \ub85c\ub4dc\n        df = pd.read_csv(path, encoding=self.encoding)\n\n        context.log.info(\n            f"Loaded {len(df)} rows from {path}"\n        )\n\n        return df\n\n    def _get_path(self, context):\n        return os.path.join(\n            self.base_dir,\n            f"{context.asset_key.path[-1]}.csv"\n        )\n\n@io_manager(\n    config_schema={\n        "base_dir": str,\n        "save_index": bool,\n        "encoding": str\n    }\n)\ndef csv_io_manager(context):\n    return CsvIOManager(\n        base_dir=context.resource_config.get("base_dir", "data/csv"),\n        save_index=context.resource_config.get("save_index", False),\n        encoding=context.resource_config.get("encoding", "utf-8")\n    )\n\n# \ud14c\uc2a4\ud2b8\n@asset\ndef sales_data() -> pd.DataFrame:\n    return pd.DataFrame({\n        "product": ["A", "B", "C"],\n        "sales": [100, 200, 150],\n        "date": ["2024-01-01", "2024-01-02", "2024-01-03"]\n    })\n\n@asset\ndef total_sales(sales_data: pd.DataFrame) -> pd.DataFrame:\n    return pd.DataFrame({\n        "total": [sales_data["sales"].sum()]\n    })\n\ndefs = Definitions(\n    assets=[sales_data, total_sales],\n    resources={"io_manager": csv_io_manager}\n)\n'})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ub2e4\uc74c: ",(0,r.jsx)(n.a,{href:"./partitions",children:"Partitions"})]}),"\n",(0,r.jsx)(n.admonition,{title:"I/O Manager \uc120\ud0dd \uac00\uc774\ub4dc",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uac1c\ubc1c/\ud14c\uc2a4\ud2b8"}),": Pickle (\ube60\ub974\uace0 \uac04\ub2e8)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud504\ub85c\ub355\uc158"}),": Parquet (\ud6a8\uc728\uc801, \uc2a4\ud0a4\ub9c8 \ubcf4\uc874)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uacf5\uc720 \ub370\uc774\ud130"}),": CSV/JSON (\ubc94\uc6a9\uc131)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub300\uc6a9\ub7c9"}),": S3 + Parquet"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc2e4\uc2dc\uac04 \uc870\ud68c"}),": Database I/O Manager"]}),"\n"]})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);