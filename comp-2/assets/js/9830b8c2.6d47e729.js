"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1688],{3357:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"apscheduler/monitoring","title":"7. \ubaa8\ub2c8\ud130\ub9c1","description":"APScheduler\uc758 \uc548\uc815\uc801\uc778 \uc6b4\uc601\uc744 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ubaa8\ub2c8\ud130\ub9c1\uc774 \ud544\uc218\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108, \ub85c\uae45, \uc5d0\ub7ec \ucc98\ub9ac, \uba54\ud2b8\ub9ad \uc218\uc9d1 \ubc29\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/apscheduler/monitoring.md","sourceDirName":"apscheduler","slug":"/apscheduler/monitoring","permalink":"/docs/apscheduler/monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/apscheduler/monitoring.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"apschedulerSidebar","previous":{"title":"6. Job Stores","permalink":"/docs/apscheduler/job-stores"},"next":{"title":"8. \uc2e4\uc804 \uc608\uc81c","permalink":"/docs/apscheduler/examples"}}');var o=r(4848),i=r(8453);const s={sidebar_position:8},l="7. \ubaa8\ub2c8\ud130\ub9c1",d={},a=[{value:"\uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108",id:"\uc774\ubca4\ud2b8-\ub9ac\uc2a4\ub108",level:2},{value:"\uae30\ubcf8 \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108",id:"\uae30\ubcf8-\uc774\ubca4\ud2b8-\ub9ac\uc2a4\ub108",level:3},{value:"\ud1b5\ud569 \uc774\ubca4\ud2b8 \ubaa8\ub2c8\ud130",id:"\ud1b5\ud569-\uc774\ubca4\ud2b8-\ubaa8\ub2c8\ud130",level:3},{value:"\uc774\ubca4\ud2b8 \ud544\ud130\ub9c1",id:"\uc774\ubca4\ud2b8-\ud544\ud130\ub9c1",level:3},{value:"\ub85c\uae45",id:"\ub85c\uae45",level:2},{value:"\uad6c\uc870\ud654\ub41c \ub85c\uae45",id:"\uad6c\uc870\ud654\ub41c-\ub85c\uae45",level:3},{value:"\ub85c\uadf8 \uc9d1\uacc4 \ubc0f \ubd84\uc11d",id:"\ub85c\uadf8-\uc9d1\uacc4-\ubc0f-\ubd84\uc11d",level:3},{value:"\ub85c\uadf8 \ub808\ubca8\ubcc4 \uad00\ub9ac",id:"\ub85c\uadf8-\ub808\ubca8\ubcc4-\uad00\ub9ac",level:3},{value:"\uc5d0\ub7ec \ucc98\ub9ac",id:"\uc5d0\ub7ec-\ucc98\ub9ac",level:2},{value:"\uc804\uc5ed \uc5d0\ub7ec \ud578\ub4e4\ub7ec",id:"\uc804\uc5ed-\uc5d0\ub7ec-\ud578\ub4e4\ub7ec",level:3},{value:"\uc7ac\uc2dc\ub3c4 \uba54\ucee4\ub2c8\uc998",id:"\uc7ac\uc2dc\ub3c4-\uba54\ucee4\ub2c8\uc998",level:3},{value:"\ud68c\ub85c \ucc28\ub2e8\uae30 \ud328\ud134",id:"\ud68c\ub85c-\ucc28\ub2e8\uae30-\ud328\ud134",level:3},{value:"\uba54\ud2b8\ub9ad",id:"\uba54\ud2b8\ub9ad",level:2},{value:"\uae30\ubcf8 \uba54\ud2b8\ub9ad \uc218\uc9d1",id:"\uae30\ubcf8-\uba54\ud2b8\ub9ad-\uc218\uc9d1",level:3},{value:"Prometheus \ud1b5\ud569",id:"prometheus-\ud1b5\ud569",level:3}];function _(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"7-\ubaa8\ub2c8\ud130\ub9c1",children:"7. \ubaa8\ub2c8\ud130\ub9c1"})}),"\n",(0,o.jsx)(n.p,{children:"APScheduler\uc758 \uc548\uc815\uc801\uc778 \uc6b4\uc601\uc744 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ubaa8\ub2c8\ud130\ub9c1\uc774 \ud544\uc218\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108, \ub85c\uae45, \uc5d0\ub7ec \ucc98\ub9ac, \uba54\ud2b8\ub9ad \uc218\uc9d1 \ubc29\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.h2,{id:"\uc774\ubca4\ud2b8-\ub9ac\uc2a4\ub108",children:"\uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108"}),"\n",(0,o.jsx)(n.p,{children:"APScheduler\ub294 \ub2e4\uc591\ud55c \uc774\ubca4\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uba70, \uc774\ub97c \ud1b5\ud574 \uc2a4\ucf00\uc904\ub7ec\uc758 \ub3d9\uc791\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.h3,{id:"\uae30\ubcf8-\uc774\ubca4\ud2b8-\ub9ac\uc2a4\ub108",children:"\uae30\ubcf8 \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import (\n    EVENT_JOB_EXECUTED,\n    EVENT_JOB_ERROR,\n    EVENT_JOB_ADDED,\n    EVENT_JOB_REMOVED,\n    EVENT_JOB_SUBMITTED,\n    EVENT_JOB_MISSED,\n    EVENT_JOB_MAX_INSTANCES\n)\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef job_executed(event):\n    """Job \uc2e4\ud589 \uc644\ub8cc \uc774\ubca4\ud2b8"""\n    print(f"[{datetime.now():%H:%M:%S}] \u2713 Job {event.job_id} \uc2e4\ud589 \uc644\ub8cc")\n    print(f"  \uc608\uc815 \uc2dc\uac04: {event.scheduled_run_time}")\n    print(f"  \ubc18\ud658\uac12: {event.retval}")\n\ndef job_error(event):\n    """Job \uc624\ub958 \uc774\ubca4\ud2b8"""\n    print(f"[{datetime.now():%H:%M:%S}] \u2717 Job {event.job_id} \uc624\ub958 \ubc1c\uc0dd")\n    print(f"  \uc608\uc678: {event.exception}")\n    print(f"  \ud2b8\ub808\uc774\uc2a4\ubc31: {event.traceback}")\n\ndef job_missed(event):\n    """Job \ub193\uce68 \uc774\ubca4\ud2b8"""\n    print(f"[{datetime.now():%H:%M:%S}] \u26a0 Job {event.job_id} \ub193\uce68")\n    print(f"  \uc608\uc815 \uc2dc\uac04: {event.scheduled_run_time}")\n\ndef job_submitted(event):\n    """Job \uc81c\ucd9c \uc774\ubca4\ud2b8"""\n    print(f"[{datetime.now():%H:%M:%S}] \u2192 Job {event.job_id} \uc81c\ucd9c\ub428")\n    print(f"  \uc608\uc815 \uc2dc\uac04: {event.scheduled_run_times}")\n\ndef job_added(event):\n    """Job \ucd94\uac00 \uc774\ubca4\ud2b8"""\n    print(f"[{datetime.now():%H:%M:%S}] + Job {event.job_id} \ucd94\uac00\ub428")\n\ndef job_removed(event):\n    """Job \uc81c\uac70 \uc774\ubca4\ud2b8"""\n    print(f"[{datetime.now():%H:%M:%S}] - Job {event.job_id} \uc81c\uac70\ub428")\n\ndef job_max_instances(event):\n    """Max instances \ub3c4\ub2ec \uc774\ubca4\ud2b8"""\n    print(f"[{datetime.now():%H:%M:%S}] \u26a0 Job {event.job_id} max_instances \ub3c4\ub2ec")\n\n# \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108 \ub4f1\ub85d\nscheduler.add_listener(job_executed, EVENT_JOB_EXECUTED)\nscheduler.add_listener(job_error, EVENT_JOB_ERROR)\nscheduler.add_listener(job_missed, EVENT_JOB_MISSED)\nscheduler.add_listener(job_submitted, EVENT_JOB_SUBMITTED)\nscheduler.add_listener(job_added, EVENT_JOB_ADDED)\nscheduler.add_listener(job_removed, EVENT_JOB_REMOVED)\nscheduler.add_listener(job_max_instances, EVENT_JOB_MAX_INSTANCES)\n\ndef success_job():\n    """\uc131\uacf5\ud558\ub294 \uc791\uc5c5"""\n    print("  \uc791\uc5c5 \uc2e4\ud589 \uc911...")\n    time.sleep(1)\n    return "\uc131\uacf5 \uacb0\uacfc"\n\ndef error_job():\n    """\uc624\ub958 \ubc1c\uc0dd \uc791\uc5c5"""\n    print("  \uc791\uc5c5 \uc2e4\ud589 \uc911...")\n    raise Exception("\uc758\ub3c4\uc801 \uc624\ub958")\n\n# Job \ucd94\uac00\nscheduler.add_job(success_job, \'interval\', seconds=5, id=\'success_job\')\nscheduler.add_job(error_job, \'interval\', seconds=10, id=\'error_job\')\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    scheduler.shutdown()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ud1b5\ud569-\uc774\ubca4\ud2b8-\ubaa8\ub2c8\ud130",children:"\ud1b5\ud569 \uc774\ubca4\ud2b8 \ubaa8\ub2c8\ud130"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import (\n    EVENT_ALL,\n    EVENT_SCHEDULER_STARTED,\n    EVENT_SCHEDULER_SHUTDOWN,\n    EVENT_EXECUTOR_ADDED,\n    EVENT_EXECUTOR_REMOVED,\n    EVENT_JOBSTORE_ADDED,\n    EVENT_JOBSTORE_REMOVED\n)\nfrom datetime import datetime\nfrom collections import defaultdict\nimport time\n\nclass EventMonitor:\n    """\ud1b5\ud569 \uc774\ubca4\ud2b8 \ubaa8\ub2c8\ud130"""\n\n    def __init__(self):\n        self.event_counts = defaultdict(int)\n        self.job_history = []\n        self.error_history = []\n\n    def handle_event(self, event):\n        """\ubaa8\ub4e0 \uc774\ubca4\ud2b8 \ucc98\ub9ac"""\n        event_type = type(event).__name__\n        self.event_counts[event_type] += 1\n\n        timestamp = datetime.now()\n\n        # \uc774\ubca4\ud2b8\ubcc4 \ucc98\ub9ac\n        if hasattr(event, \'job_id\'):\n            self.job_history.append({\n                \'timestamp\': timestamp,\n                \'type\': event_type,\n                \'job_id\': event.job_id\n            })\n\n            if hasattr(event, \'exception\'):\n                self.error_history.append({\n                    \'timestamp\': timestamp,\n                    \'job_id\': event.job_id,\n                    \'exception\': str(event.exception)\n                })\n\n        # \uc2e4\uc2dc\uac04 \ub85c\uae45\n        self._log_event(timestamp, event_type, event)\n\n    def _log_event(self, timestamp, event_type, event):\n        """\uc774\ubca4\ud2b8 \ub85c\uae45"""\n        log_msg = f"[{timestamp:%H:%M:%S}] {event_type}"\n\n        if hasattr(event, \'job_id\'):\n            log_msg += f" (Job: {event.job_id})"\n\n        if hasattr(event, \'exception\'):\n            log_msg += f" - \uc624\ub958: {event.exception}"\n\n        print(log_msg)\n\n    def get_statistics(self):\n        """\ud1b5\uacc4 \uc870\ud68c"""\n        return {\n            \'event_counts\': dict(self.event_counts),\n            \'total_jobs_executed\': len([h for h in self.job_history\n                                        if \'Executed\' in h[\'type\']]),\n            \'total_errors\': len(self.error_history),\n            \'recent_errors\': self.error_history[-5:] if self.error_history else []\n        }\n\n    def print_statistics(self):\n        """\ud1b5\uacc4 \ucd9c\ub825"""\n        stats = self.get_statistics()\n\n        print("\\n" + "="*60)\n        print("\uc774\ubca4\ud2b8 \ubaa8\ub2c8\ud130 \ud1b5\uacc4")\n        print("="*60)\n\n        print("\\n\uc774\ubca4\ud2b8 \ubc1c\uc0dd \ud69f\uc218:")\n        for event_type, count in sorted(stats[\'event_counts\'].items()):\n            print(f"  {event_type}: {count}\ud68c")\n\n        print(f"\\n\ucd1d \uc2e4\ud589\ub41c Job: {stats[\'total_jobs_executed\']}\uac1c")\n        print(f"\ucd1d \uc624\ub958: {stats[\'total_errors\']}\uac1c")\n\n        if stats[\'recent_errors\']:\n            print("\\n\ucd5c\uadfc \uc624\ub958:")\n            for error in stats[\'recent_errors\']:\n                print(f"  [{error[\'timestamp\']:%H:%M:%S}] "\n                      f"{error[\'job_id\']}: {error[\'exception\']}")\n\n        print("="*60)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nscheduler = BackgroundScheduler()\nmonitor = EventMonitor()\n\n# \ubaa8\ub4e0 \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub2dd\nscheduler.add_listener(monitor.handle_event, EVENT_ALL)\n\ndef task(n):\n    print(f"  \uc791\uc5c5 {n} \uc2e4\ud589")\n    if n % 3 == 0:\n        raise Exception(f"\uc791\uc5c5 {n} \uc624\ub958")\n\nfor i in range(5):\n    scheduler.add_job(task, \'interval\', seconds=2, args=[i], id=f\'task_{i}\')\n\nscheduler.start()\n\ntry:\n    time.sleep(20)\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    scheduler.shutdown()\n    monitor.print_statistics()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\uc774\ubca4\ud2b8-\ud544\ud130\ub9c1",children:"\uc774\ubca4\ud2b8 \ud544\ud130\ub9c1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR\nfrom datetime import datetime\nimport time\n\nclass FilteredEventListener:\n    """\uc870\uac74\ubd80 \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108"""\n\n    def __init__(self, job_id_pattern=None, min_duration=None):\n        self.job_id_pattern = job_id_pattern\n        self.min_duration = min_duration\n\n    def should_process(self, event):\n        """\uc774\ubca4\ud2b8 \ucc98\ub9ac \uc5ec\ubd80 \uacb0\uc815"""\n        # Job ID \ud328\ud134 \ud655\uc778\n        if self.job_id_pattern and self.job_id_pattern not in event.job_id:\n            return False\n\n        # \uc2e4\ud589 \uc2dc\uac04 \ud655\uc778 (JobExecutionEvent\ub9cc \ud574\ub2f9)\n        if self.min_duration and hasattr(event, \'scheduled_run_time\'):\n            # \uc2e4\uc81c\ub85c\ub294 \uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud574\uc57c \ud558\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud788 \uad6c\ud604\n            pass\n\n        return True\n\n    def handle_success(self, event):\n        """\uc131\uacf5 \uc774\ubca4\ud2b8 \ucc98\ub9ac"""\n        if not self.should_process(event):\n            return\n\n        print(f"[{datetime.now():%H:%M:%S}] "\n              f"\ud544\ud130\ub9c1\ub41c \uc131\uacf5 \uc774\ubca4\ud2b8: {event.job_id}")\n\n    def handle_error(self, event):\n        """\uc624\ub958 \uc774\ubca4\ud2b8 \ucc98\ub9ac"""\n        if not self.should_process(event):\n            return\n\n        print(f"[{datetime.now():%H:%M:%S}] "\n              f"\ud544\ud130\ub9c1\ub41c \uc624\ub958 \uc774\ubca4\ud2b8: {event.job_id} - {event.exception}")\n\nscheduler = BackgroundScheduler()\n\n# critical Job\ub9cc \ubaa8\ub2c8\ud130\ub9c1\ncritical_listener = FilteredEventListener(job_id_pattern=\'critical\')\nscheduler.add_listener(critical_listener.handle_success, EVENT_JOB_EXECUTED)\nscheduler.add_listener(critical_listener.handle_error, EVENT_JOB_ERROR)\n\ndef task(name):\n    print(f"  {name} \uc2e4\ud589")\n    if \'critical\' in name and \'error\' in name:\n        raise Exception("Critical \uc624\ub958")\n\nscheduler.add_job(task, \'interval\', seconds=5, args=[\'normal_task\'], id=\'normal_1\')\nscheduler.add_job(task, \'interval\', seconds=5, args=[\'critical_task\'], id=\'critical_1\')\nscheduler.add_job(task, \'interval\', seconds=10, args=[\'critical_error\'], id=\'critical_error_1\')\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\ub85c\uae45",children:"\ub85c\uae45"}),"\n",(0,o.jsx)(n.p,{children:"\ub85c\uae45\uc740 \uc2a4\ucf00\uc904\ub7ec\uc758 \ub3d9\uc791\uc744 \ucd94\uc801\ud558\uace0 \ubb38\uc81c\ub97c \uc9c4\ub2e8\ud558\ub294 \ub370 \ud544\uc218\uc801\uc785\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.h3,{id:"\uad6c\uc870\ud654\ub41c-\ub85c\uae45",children:"\uad6c\uc870\ud654\ub41c \ub85c\uae45"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import logging\nimport json\nfrom datetime import datetime\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR\nimport time\n\nclass StructuredLogger:\n    """\uad6c\uc870\ud654\ub41c \ub85c\uadf8 \uc0dd\uc131\uae30"""\n\n    def __init__(self, logger_name=\'scheduler\'):\n        self.logger = logging.getLogger(logger_name)\n        self._setup_logger()\n\n    def _setup_logger(self):\n        """\ub85c\uac70 \uc124\uc815"""\n        self.logger.setLevel(logging.INFO)\n\n        # JSON \ud3ec\ub9f7 \ud578\ub4e4\ub7ec\n        handler = logging.FileHandler(\'scheduler_structured.log\')\n        handler.setFormatter(self.JSONFormatter())\n        self.logger.addHandler(handler)\n\n        # \ucf58\uc194 \ud578\ub4e4\ub7ec\n        console = logging.StreamHandler()\n        console.setFormatter(logging.Formatter(\n            \'%(asctime)s - %(levelname)s - %(message)s\'\n        ))\n        self.logger.addHandler(console)\n\n    class JSONFormatter(logging.Formatter):\n        """JSON \ub85c\uadf8 \ud3ec\ub9f7\ud130"""\n\n        def format(self, record):\n            log_data = {\n                \'timestamp\': datetime.utcnow().isoformat(),\n                \'level\': record.levelname,\n                \'logger\': record.name,\n                \'message\': record.getMessage(),\n                \'module\': record.module,\n                \'function\': record.funcName,\n                \'line\': record.lineno\n            }\n\n            # \ucd94\uac00 \ud544\ub4dc\n            if hasattr(record, \'job_id\'):\n                log_data[\'job_id\'] = record.job_id\n\n            if hasattr(record, \'duration\'):\n                log_data[\'duration\'] = record.duration\n\n            if record.exc_info:\n                log_data[\'exception\'] = self.formatException(record.exc_info)\n\n            return json.dumps(log_data, ensure_ascii=False)\n\n    def log_job_start(self, job_id):\n        """Job \uc2dc\uc791 \ub85c\uadf8"""\n        self.logger.info(f"Job \uc2dc\uc791", extra={\'job_id\': job_id})\n\n    def log_job_end(self, job_id, duration):\n        """Job \uc885\ub8cc \ub85c\uadf8"""\n        self.logger.info(\n            f"Job \uc644\ub8cc",\n            extra={\'job_id\': job_id, \'duration\': duration}\n        )\n\n    def log_job_error(self, job_id, error):\n        """Job \uc624\ub958 \ub85c\uadf8"""\n        self.logger.error(\n            f"Job \uc624\ub958: {error}",\n            extra={\'job_id\': job_id},\n            exc_info=True\n        )\n\n# \uc0ac\uc6a9 \uc608\uc81c\nstructured_logger = StructuredLogger()\n\nscheduler = BackgroundScheduler()\n\ndef monitored_job(n):\n    """\ubaa8\ub2c8\ud130\ub9c1\ub418\ub294 Job"""\n    job_id = f\'job_{n}\'\n    start_time = time.time()\n\n    try:\n        structured_logger.log_job_start(job_id)\n        print(f"  \uc791\uc5c5 {n} \uc2e4\ud589")\n        time.sleep(1)\n\n        if n % 3 == 0:\n            raise Exception(f"\uc791\uc5c5 {n} \uc624\ub958")\n\n        duration = time.time() - start_time\n        structured_logger.log_job_end(job_id, duration)\n\n    except Exception as e:\n        structured_logger.log_job_error(job_id, e)\n        raise\n\nfor i in range(3):\n    scheduler.add_job(monitored_job, \'interval\', seconds=5, args=[i])\n\nscheduler.start()\n\ntry:\n    time.sleep(20)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ub85c\uadf8-\uc9d1\uacc4-\ubc0f-\ubd84\uc11d",children:"\ub85c\uadf8 \uc9d1\uacc4 \ubc0f \ubd84\uc11d"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import logging\nimport json\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\nimport time\n\nclass LogAnalyzer:\n    """\ub85c\uadf8 \ubd84\uc11d\uae30"""\n\n    def __init__(self, log_file=\'scheduler_structured.log\'):\n        self.log_file = log_file\n\n    def parse_log_file(self):\n        """\ub85c\uadf8 \ud30c\uc77c \ud30c\uc2f1"""\n        logs = []\n\n        try:\n            with open(self.log_file, \'r\', encoding=\'utf-8\') as f:\n                for line in f:\n                    try:\n                        log_entry = json.loads(line.strip())\n                        logs.append(log_entry)\n                    except json.JSONDecodeError:\n                        continue\n        except FileNotFoundError:\n            print(f"\ub85c\uadf8 \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {self.log_file}")\n\n        return logs\n\n    def analyze_performance(self):\n        """\uc131\ub2a5 \ubd84\uc11d"""\n        logs = self.parse_log_file()\n\n        job_durations = defaultdict(list)\n        job_errors = defaultdict(int)\n\n        for log in logs:\n            if \'job_id\' in log:\n                job_id = log[\'job_id\']\n\n                if \'duration\' in log:\n                    job_durations[job_id].append(log[\'duration\'])\n\n                if log[\'level\'] == \'ERROR\':\n                    job_errors[job_id] += 1\n\n        # \ud1b5\uacc4 \uacc4\uc0b0\n        statistics = {}\n\n        for job_id, durations in job_durations.items():\n            statistics[job_id] = {\n                \'count\': len(durations),\n                \'avg_duration\': sum(durations) / len(durations),\n                \'min_duration\': min(durations),\n                \'max_duration\': max(durations),\n                \'errors\': job_errors.get(job_id, 0)\n            }\n\n        return statistics\n\n    def print_analysis(self):\n        """\ubd84\uc11d \uacb0\uacfc \ucd9c\ub825"""\n        stats = self.analyze_performance()\n\n        print("\\n" + "="*70)\n        print("\ub85c\uadf8 \ubd84\uc11d \uacb0\uacfc")\n        print("="*70)\n\n        for job_id, stat in stats.items():\n            print(f"\\nJob: {job_id}")\n            print(f"  \uc2e4\ud589 \ud69f\uc218: {stat[\'count\']}")\n            print(f"  \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04: {stat[\'avg_duration\']:.3f}\ucd08")\n            print(f"  \ucd5c\uc18c \uc2e4\ud589 \uc2dc\uac04: {stat[\'min_duration\']:.3f}\ucd08")\n            print(f"  \ucd5c\ub300 \uc2e4\ud589 \uc2dc\uac04: {stat[\'max_duration\']:.3f}\ucd08")\n            print(f"  \uc624\ub958 \ud69f\uc218: {stat[\'errors\']}")\n\n            # \uc131\ub2a5 \uacbd\uace0\n            if stat[\'avg_duration\'] > 5:\n                print(f"  \u26a0 \uacbd\uace0: \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04\uc774 5\ucd08\ub97c \ucd08\uacfc\ud569\ub2c8\ub2e4!")\n\n            if stat[\'errors\'] > 0:\n                print(f"  \u26a0 \uacbd\uace0: {stat[\'errors\']}\uac1c\uc758 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4!")\n\n        print("="*70)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nanalyzer = LogAnalyzer(\'scheduler_structured.log\')\ntime.sleep(2)  # \ub85c\uadf8\uac00 \uc313\uc77c \uc2dc\uac04\nanalyzer.print_analysis()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ub85c\uadf8-\ub808\ubca8\ubcc4-\uad00\ub9ac",children:"\ub85c\uadf8 \ub808\ubca8\ubcc4 \uad00\ub9ac"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import logging\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_ALL\nfrom datetime import datetime\nimport time\n\nclass MultiLevelLogger:\n    """\ub2e4\uc911 \ub808\ubca8 \ub85c\uac70"""\n\n    def __init__(self):\n        # \uac01 \ub808\ubca8\ubcc4 \ub85c\uac70 \uc124\uc815\n        self.debug_logger = self._setup_logger(\'debug\', logging.DEBUG, \'debug.log\')\n        self.info_logger = self._setup_logger(\'info\', logging.INFO, \'info.log\')\n        self.error_logger = self._setup_logger(\'error\', logging.ERROR, \'error.log\')\n\n    def _setup_logger(self, name, level, filename):\n        """\ub85c\uac70 \uc124\uc815"""\n        logger = logging.getLogger(name)\n        logger.setLevel(level)\n\n        handler = logging.FileHandler(filename)\n        handler.setLevel(level)\n        handler.setFormatter(logging.Formatter(\n            \'%(asctime)s - %(levelname)s - %(message)s\'\n        ))\n\n        logger.addHandler(handler)\n        return logger\n\n    def handle_event(self, event):\n        """\uc774\ubca4\ud2b8\ubcc4 \ub85c\uae45"""\n        event_type = type(event).__name__\n        timestamp = datetime.now()\n\n        # DEBUG: \ubaa8\ub4e0 \uc774\ubca4\ud2b8\n        self.debug_logger.debug(f"{event_type}: {event}")\n\n        # INFO: Job \uc2e4\ud589 \uad00\ub828\n        if \'Executed\' in event_type or \'Submitted\' in event_type:\n            self.info_logger.info(f"{event_type} - Job: {event.job_id}")\n\n        # ERROR: \uc624\ub958 \uad00\ub828\n        if \'Error\' in event_type or \'Missed\' in event_type:\n            error_msg = f"{event_type} - Job: {event.job_id}"\n            if hasattr(event, \'exception\'):\n                error_msg += f" - Exception: {event.exception}"\n            self.error_logger.error(error_msg)\n\nscheduler = BackgroundScheduler()\nmulti_logger = MultiLevelLogger()\n\nscheduler.add_listener(multi_logger.handle_event, EVENT_ALL)\n\ndef task(n):\n    print(f"\uc791\uc5c5 {n}")\n    if n == 2:\n        raise Exception("\uc624\ub958 \ubc1c\uc0dd")\n\nfor i in range(3):\n    scheduler.add_job(task, \'interval\', seconds=5, args=[i])\n\nscheduler.start()\n\ntry:\n    time.sleep(20)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n\nprint("\\n\ub85c\uadf8 \ud30c\uc77c\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4:")\nprint("  - debug.log: \ubaa8\ub4e0 \uc774\ubca4\ud2b8")\nprint("  - info.log: Job \uc2e4\ud589 \uc815\ubcf4")\nprint("  - error.log: \uc624\ub958 \ubc0f \uacbd\uace0")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\uc5d0\ub7ec-\ucc98\ub9ac",children:"\uc5d0\ub7ec \ucc98\ub9ac"}),"\n",(0,o.jsx)(n.p,{children:"\uc801\uc808\ud55c \uc5d0\ub7ec \ucc98\ub9ac\ub294 \uc2a4\ucf00\uc904\ub7ec\uc758 \uc548\uc815\uc131\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.h3,{id:"\uc804\uc5ed-\uc5d0\ub7ec-\ud578\ub4e4\ub7ec",children:"\uc804\uc5ed \uc5d0\ub7ec \ud578\ub4e4\ub7ec"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_ERROR\nfrom datetime import datetime\nimport time\nimport traceback\n\nclass GlobalErrorHandler:\n    """\uc804\uc5ed \uc5d0\ub7ec \ud578\ub4e4\ub7ec"""\n\n    def __init__(self):\n        self.error_count = 0\n        self.error_history = []\n\n    def handle_job_error(self, event):\n        """Job \uc624\ub958 \ucc98\ub9ac"""\n        self.error_count += 1\n\n        error_info = {\n            \'timestamp\': datetime.now(),\n            \'job_id\': event.job_id,\n            \'exception_type\': type(event.exception).__name__,\n            \'exception_message\': str(event.exception),\n            \'traceback\': event.traceback\n        }\n\n        self.error_history.append(error_info)\n\n        # \uc624\ub958 \ub85c\uae45\n        self._log_error(error_info)\n\n        # \uc54c\ub9bc \uc804\uc1a1 (\uc870\uac74\ubd80)\n        if self._should_alert(error_info):\n            self._send_alert(error_info)\n\n    def _log_error(self, error_info):\n        """\uc624\ub958 \ub85c\uae45"""\n        print(f"\\n{\'=\'*60}")\n        print(f"[\uc624\ub958 #{self.error_count}] {error_info[\'timestamp\']:%Y-%m-%d %H:%M:%S}")\n        print(f"Job ID: {error_info[\'job_id\']}")\n        print(f"\uc608\uc678 \ud0c0\uc785: {error_info[\'exception_type\']}")\n        print(f"\uc608\uc678 \uba54\uc2dc\uc9c0: {error_info[\'exception_message\']}")\n        print(f"\\n\ud2b8\ub808\uc774\uc2a4\ubc31:\\n{error_info[\'traceback\']}")\n        print(f"{\'=\'*60}\\n")\n\n    def _should_alert(self, error_info):\n        """\uc54c\ub9bc \uc804\uc1a1 \uc5ec\ubd80 \uacb0\uc815"""\n        # \ub3d9\uc77c Job\uc5d0\uc11c 5\ubd84 \ub0b4 3\ud68c \uc774\uc0c1 \uc624\ub958 \ubc1c\uc0dd \uc2dc\n        recent_errors = [\n            e for e in self.error_history\n            if e[\'job_id\'] == error_info[\'job_id\']\n            and (error_info[\'timestamp\'] - e[\'timestamp\']).seconds < 300\n        ]\n\n        return len(recent_errors) >= 3\n\n    def _send_alert(self, error_info):\n        """\uc54c\ub9bc \uc804\uc1a1 (\uc2dc\ubbac\ub808\uc774\uc158)"""\n        print(f"\\n\ud83d\udea8 \uc54c\ub9bc: Job {error_info[\'job_id\']}\uc5d0\uc11c \ubc18\ubcf5\uc801 \uc624\ub958 \ubc1c\uc0dd!")\n        print(f"   \ucd5c\uadfc 5\ubd84\uac04 {len([e for e in self.error_history if e[\'job_id\'] == error_info[\'job_id\']])}\ud68c \uc624\ub958\\n")\n\n    def get_error_summary(self):\n        """\uc624\ub958 \uc694\uc57d"""\n        from collections import Counter\n\n        summary = {\n            \'total_errors\': self.error_count,\n            \'unique_jobs_with_errors\': len(set(e[\'job_id\'] for e in self.error_history)),\n            \'most_common_errors\': Counter(\n                e[\'exception_type\'] for e in self.error_history\n            ).most_common(5)\n        }\n\n        return summary\n\nscheduler = BackgroundScheduler()\nerror_handler = GlobalErrorHandler()\n\nscheduler.add_listener(error_handler.handle_job_error, EVENT_JOB_ERROR)\n\ndef flaky_job(n):\n    """\ubd88\uc548\uc815\ud55c \uc791\uc5c5"""\n    print(f"\uc791\uc5c5 {n} \uc2e4\ud589")\n\n    import random\n    if random.random() < 0.5:  # 50% \ud655\ub960\ub85c \uc624\ub958\n        raise Exception(f"\uc791\uc5c5 {n}\uc5d0\uc11c \uc784\uc758 \uc624\ub958 \ubc1c\uc0dd")\n\nfor i in range(3):\n    scheduler.add_job(flaky_job, \'interval\', seconds=3, args=[i], id=f\'flaky_{i}\')\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    scheduler.shutdown()\n\n    # \uc624\ub958 \uc694\uc57d \ucd9c\ub825\n    summary = error_handler.get_error_summary()\n    print(f"\\n\uc624\ub958 \uc694\uc57d:")\n    print(f"  \ucd1d \uc624\ub958: {summary[\'total_errors\']}\ud68c")\n    print(f"  \uc624\ub958 \ubc1c\uc0dd Job \uc218: {summary[\'unique_jobs_with_errors\']}\uac1c")\n    print(f"  \uc8fc\uc694 \uc624\ub958 \ud0c0\uc785:")\n    for error_type, count in summary[\'most_common_errors\']:\n        print(f"    - {error_type}: {count}\ud68c")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\uc7ac\uc2dc\ub3c4-\uba54\ucee4\ub2c8\uc998",children:"\uc7ac\uc2dc\ub3c4 \uba54\ucee4\ub2c8\uc998"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_ERROR\nfrom datetime import datetime, timedelta\nimport time\nfrom functools import wraps\n\nclass RetryManager:\n    """\uc7ac\uc2dc\ub3c4 \uad00\ub9ac\uc790"""\n\n    def __init__(self, scheduler, max_retries=3, retry_delay=60):\n        self.scheduler = scheduler\n        self.max_retries = max_retries\n        self.retry_delay = retry_delay\n        self.retry_counts = {}\n\n    def handle_job_error(self, event):\n        """Job \uc624\ub958 \ucc98\ub9ac \ubc0f \uc7ac\uc2dc\ub3c4"""\n        job_id = event.job_id\n\n        # \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \uc99d\uac00\n        self.retry_counts[job_id] = self.retry_counts.get(job_id, 0) + 1\n\n        if self.retry_counts[job_id] <= self.max_retries:\n            print(f"\\n[{datetime.now():%H:%M:%S}] "\n                  f"Job {job_id} \uc7ac\uc2dc\ub3c4 {self.retry_counts[job_id]}/{self.max_retries}")\n\n            # \uc6d0\ubcf8 Job \uac00\uc838\uc624\uae30\n            job = self.scheduler.get_job(job_id)\n\n            if job:\n                # \uc7ac\uc2dc\ub3c4 Job \uc2a4\ucf00\uc904\n                retry_time = datetime.now() + timedelta(seconds=self.retry_delay)\n                retry_job_id = f"{job_id}_retry_{self.retry_counts[job_id]}"\n\n                self.scheduler.add_job(\n                    job.func,\n                    \'date\',\n                    run_date=retry_time,\n                    args=job.args,\n                    kwargs=job.kwargs,\n                    id=retry_job_id\n                )\n\n                print(f"  -> {self.retry_delay}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4 \uc608\uc815")\n        else:\n            print(f"\\n[{datetime.now():%H:%M:%S}] "\n                  f"Job {job_id} \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc, \ud3ec\uae30")\n\n            # \uc54c\ub9bc \uc804\uc1a1 \ub4f1\n            self._notify_failure(job_id)\n\n    def _notify_failure(self, job_id):\n        """\uc2e4\ud328 \uc54c\ub9bc"""\n        print(f"  \ud83d\udea8 Job {job_id}\uac00 {self.max_retries}\ubc88 \uc7ac\uc2dc\ub3c4 \ud6c4 \uc2e4\ud328\ud588\uc2b5\ub2c8\ub2e4!")\n\nscheduler = BackgroundScheduler()\nretry_manager = RetryManager(scheduler, max_retries=3, retry_delay=5)\n\nscheduler.add_listener(retry_manager.handle_job_error, EVENT_JOB_ERROR)\n\nattempt_counter = {}\n\ndef unreliable_job(job_name):\n    """\ubd88\uc548\uc815\ud55c \uc791\uc5c5 (4\ubc88\uc9f8 \uc2dc\ub3c4\uc5d0 \uc131\uacf5)"""\n    attempt_counter[job_name] = attempt_counter.get(job_name, 0) + 1\n\n    print(f"  [{job_name}] \uc2dc\ub3c4 #{attempt_counter[job_name]}")\n\n    if attempt_counter[job_name] < 4:\n        raise Exception(f"{job_name} \uc544\uc9c1 \uc2e4\ud328 (\uc2dc\ub3c4 {attempt_counter[job_name]})")\n\n    print(f"  [{job_name}] \uc131\uacf5!")\n    return "\uc131\uacf5"\n\nscheduler.add_job(unreliable_job, \'date\', args=[\'job_1\'], id=\'job_1\')\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ud68c\ub85c-\ucc28\ub2e8\uae30-\ud328\ud134",children:"\ud68c\ub85c \ucc28\ub2e8\uae30 \ud328\ud134"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime, timedelta\nimport time\nfrom enum import Enum\n\nclass CircuitState(Enum):\n    """\ud68c\ub85c \uc0c1\ud0dc"""\n    CLOSED = "closed"  # \uc815\uc0c1\n    OPEN = "open"  # \ucc28\ub2e8\n    HALF_OPEN = "half_open"  # \ubc18\uac1c\ubc29\n\nclass CircuitBreaker:\n    """\ud68c\ub85c \ucc28\ub2e8\uae30"""\n\n    def __init__(self, failure_threshold=3, recovery_timeout=60):\n        self.failure_threshold = failure_threshold\n        self.recovery_timeout = recovery_timeout\n        self.failure_count = 0\n        self.state = CircuitState.CLOSED\n        self.last_failure_time = None\n        self.state_change_time = datetime.now()\n\n    def call(self, func, *args, **kwargs):\n        """\ud568\uc218 \ud638\ucd9c (\ud68c\ub85c \ucc28\ub2e8\uae30 \ud1b5\uacfc)"""\n        # \ud68c\ub85c \uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8\n        self._update_state()\n\n        if self.state == CircuitState.OPEN:\n            raise Exception("\ud68c\ub85c \ucc28\ub2e8\uae30 OPEN: \ud638\ucd9c \uac70\ubd80")\n\n        try:\n            result = func(*args, **kwargs)\n            self._on_success()\n            return result\n\n        except Exception as e:\n            self._on_failure()\n            raise\n\n    def _update_state(self):\n        """\uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8"""\n        if self.state == CircuitState.OPEN:\n            # \ubcf5\uad6c \ud0c0\uc784\uc544\uc6c3 \ud655\uc778\n            if datetime.now() - self.state_change_time > timedelta(seconds=self.recovery_timeout):\n                print(f"[{datetime.now():%H:%M:%S}] \ud68c\ub85c \uc0c1\ud0dc: OPEN -> HALF_OPEN")\n                self.state = CircuitState.HALF_OPEN\n                self.state_change_time = datetime.now()\n\n    def _on_success(self):\n        """\uc131\uacf5 \ucc98\ub9ac"""\n        self.failure_count = 0\n\n        if self.state == CircuitState.HALF_OPEN:\n            print(f"[{datetime.now():%H:%M:%S}] \ud68c\ub85c \uc0c1\ud0dc: HALF_OPEN -> CLOSED")\n            self.state = CircuitState.CLOSED\n            self.state_change_time = datetime.now()\n\n    def _on_failure(self):\n        """\uc2e4\ud328 \ucc98\ub9ac"""\n        self.failure_count += 1\n        self.last_failure_time = datetime.now()\n\n        print(f"[{datetime.now():%H:%M:%S}] \uc2e4\ud328 \ud69f\uc218: {self.failure_count}/{self.failure_threshold}")\n\n        if self.failure_count >= self.failure_threshold:\n            print(f"[{datetime.now():%H:%M:%S}] \ud68c\ub85c \uc0c1\ud0dc: CLOSED -> OPEN")\n            self.state = CircuitState.OPEN\n            self.state_change_time = datetime.now()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nscheduler = BackgroundScheduler()\ncircuit_breaker = CircuitBreaker(failure_threshold=3, recovery_timeout=10)\n\nfailure_count = 0\n\ndef protected_job():\n    """\ud68c\ub85c \ucc28\ub2e8\uae30\ub85c \ubcf4\ud638\ub418\ub294 \uc791\uc5c5"""\n    global failure_count\n\n    def actual_work():\n        global failure_count\n        failure_count += 1\n\n        # \ucc98\uc74c 5\ubc88\uc740 \uc2e4\ud328, \uc774\ud6c4 \uc131\uacf5\n        if failure_count <= 5:\n            raise Exception("\uc678\ubd80 \uc11c\ube44\uc2a4 \uc624\ub958")\n\n        print("  \uc791\uc5c5 \uc131\uacf5!")\n        return "\uc131\uacf5"\n\n    try:\n        result = circuit_breaker.call(actual_work)\n        print(f"  \uacb0\uacfc: {result}")\n    except Exception as e:\n        print(f"  \uc624\ub958: {e}")\n\nscheduler.add_job(protected_job, \'interval\', seconds=3, id=\'protected\')\n\nscheduler.start()\n\ntry:\n    time.sleep(40)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\uba54\ud2b8\ub9ad",children:"\uba54\ud2b8\ub9ad"}),"\n",(0,o.jsx)(n.p,{children:"\uc2a4\ucf00\uc904\ub7ec\uc758 \uc131\ub2a5\uacfc \uc0c1\ud0dc\ub97c \uc815\ub7c9\uc801\uc73c\ub85c \uce21\uc815\ud569\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.h3,{id:"\uae30\ubcf8-\uba54\ud2b8\ub9ad-\uc218\uc9d1",children:"\uae30\ubcf8 \uba54\ud2b8\ub9ad \uc218\uc9d1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR\nfrom datetime import datetime\nfrom collections import defaultdict\nimport time\n\nclass MetricsCollector:\n    """\uba54\ud2b8\ub9ad \uc218\uc9d1\uae30"""\n\n    def __init__(self):\n        self.metrics = {\n            \'jobs_executed\': 0,\n            \'jobs_failed\': 0,\n            \'total_execution_time\': 0,\n            \'execution_times\': defaultdict(list),\n            \'error_counts\': defaultdict(int)\n        }\n        self.start_time = datetime.now()\n\n    def record_execution(self, event):\n        """\uc2e4\ud589 \uba54\ud2b8\ub9ad \uae30\ub85d"""\n        self.metrics[\'jobs_executed\'] += 1\n\n        # \uc2e4\ud589 \uc2dc\uac04 \uae30\ub85d (\uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud788 \uad6c\ud604)\n        job_id = event.job_id\n        # \uc2e4\uc81c\ub85c\ub294 \uc2dc\uc791 \uc2dc\uac04\uc744 \ucd94\uc801\ud574\uc57c \ud568\n        execution_time = 1.0  # \uc608\uc2dc\n        self.metrics[\'execution_times\'][job_id].append(execution_time)\n        self.metrics[\'total_execution_time\'] += execution_time\n\n    def record_error(self, event):\n        """\uc624\ub958 \uba54\ud2b8\ub9ad \uae30\ub85d"""\n        self.metrics[\'jobs_failed\'] += 1\n        self.metrics[\'error_counts\'][event.job_id] += 1\n\n    def get_metrics(self):\n        """\uba54\ud2b8\ub9ad \uc870\ud68c"""\n        uptime = (datetime.now() - self.start_time).total_seconds()\n\n        return {\n            \'uptime_seconds\': uptime,\n            \'jobs_executed\': self.metrics[\'jobs_executed\'],\n            \'jobs_failed\': self.metrics[\'jobs_failed\'],\n            \'success_rate\': self._calculate_success_rate(),\n            \'avg_execution_time\': self._calculate_avg_execution_time(),\n            \'jobs_per_minute\': self.metrics[\'jobs_executed\'] / (uptime / 60) if uptime > 0 else 0\n        }\n\n    def _calculate_success_rate(self):\n        """\uc131\uacf5\ub960 \uacc4\uc0b0"""\n        total = self.metrics[\'jobs_executed\'] + self.metrics[\'jobs_failed\']\n        if total == 0:\n            return 0\n        return (self.metrics[\'jobs_executed\'] / total) * 100\n\n    def _calculate_avg_execution_time(self):\n        """\ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04 \uacc4\uc0b0"""\n        total_jobs = self.metrics[\'jobs_executed\']\n        if total_jobs == 0:\n            return 0\n        return self.metrics[\'total_execution_time\'] / total_jobs\n\n    def print_metrics(self):\n        """\uba54\ud2b8\ub9ad \ucd9c\ub825"""\n        metrics = self.get_metrics()\n\n        print("\\n" + "="*60)\n        print("\uc2a4\ucf00\uc904\ub7ec \uba54\ud2b8\ub9ad")\n        print("="*60)\n        print(f"\uac00\ub3d9 \uc2dc\uac04: {metrics[\'uptime_seconds\']:.0f}\ucd08")\n        print(f"\uc2e4\ud589\ub41c Job: {metrics[\'jobs_executed\']}\uac1c")\n        print(f"\uc2e4\ud328\ud55c Job: {metrics[\'jobs_failed\']}\uac1c")\n        print(f"\uc131\uacf5\ub960: {metrics[\'success_rate\']:.1f}%")\n        print(f"\ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04: {metrics[\'avg_execution_time\']:.3f}\ucd08")\n        print(f"\ubd84\ub2f9 Job \uc218: {metrics[\'jobs_per_minute\']:.1f}\uac1c")\n        print("="*60)\n\nscheduler = BackgroundScheduler()\nmetrics = MetricsCollector()\n\nscheduler.add_listener(metrics.record_execution, EVENT_JOB_EXECUTED)\nscheduler.add_listener(metrics.record_error, EVENT_JOB_ERROR)\n\ndef task(n):\n    print(f"\uc791\uc5c5 {n}")\n    time.sleep(0.5)\n    if n % 4 == 0:\n        raise Exception("\uc624\ub958")\n\nfor i in range(5):\n    scheduler.add_job(task, \'interval\', seconds=2, args=[i])\n\nscheduler.start()\n\ntry:\n    # \uc8fc\uae30\uc801\uc73c\ub85c \uba54\ud2b8\ub9ad \ucd9c\ub825\n    for _ in range(3):\n        time.sleep(10)\n        metrics.print_metrics()\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    scheduler.shutdown()\n    metrics.print_metrics()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"prometheus-\ud1b5\ud569",children:"Prometheus \ud1b5\ud569"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR\nfrom prometheus_client import Counter, Histogram, Gauge, start_http_server\nimport time\n\n# Prometheus \uba54\ud2b8\ub9ad \uc815\uc758\njobs_executed_total = Counter(\n    \'scheduler_jobs_executed_total\',\n    \'Total number of jobs executed\',\n    [\'job_id\']\n)\n\njobs_failed_total = Counter(\n    \'scheduler_jobs_failed_total\',\n    \'Total number of jobs failed\',\n    [\'job_id\']\n)\n\njob_duration_seconds = Histogram(\n    \'scheduler_job_duration_seconds\',\n    \'Job execution duration in seconds\',\n    [\'job_id\']\n)\n\nactive_jobs = Gauge(\n    \'scheduler_active_jobs\',\n    \'Number of currently active jobs\'\n)\n\nclass PrometheusMetrics:\n    """Prometheus \uba54\ud2b8\ub9ad \uc218\uc9d1\uae30"""\n\n    def __init__(self, scheduler):\n        self.scheduler = scheduler\n        self.job_start_times = {}\n\n    def record_job_start(self, job_id):\n        """Job \uc2dc\uc791 \uae30\ub85d"""\n        self.job_start_times[job_id] = time.time()\n        active_jobs.inc()\n\n    def record_job_end(self, event):\n        """Job \uc885\ub8cc \uae30\ub85d"""\n        job_id = event.job_id\n\n        # \uc2e4\ud589 \uc2dc\uac04 \uacc4\uc0b0\n        if job_id in self.job_start_times:\n            duration = time.time() - self.job_start_times[job_id]\n            job_duration_seconds.labels(job_id=job_id).observe(duration)\n            del self.job_start_times[job_id]\n\n        jobs_executed_total.labels(job_id=job_id).inc()\n        active_jobs.dec()\n\n    def record_job_error(self, event):\n        """Job \uc624\ub958 \uae30\ub85d"""\n        job_id = event.job_id\n\n        if job_id in self.job_start_times:\n            del self.job_start_times[job_id]\n\n        jobs_failed_total.labels(job_id=job_id).inc()\n        active_jobs.dec()\n\n# Prometheus \uba54\ud2b8\ub9ad \uc11c\ubc84 \uc2dc\uc791 (\ud3ec\ud2b8 8000)\nstart_http_server(8000)\nprint("Prometheus \uba54\ud2b8\ub9ad \uc11c\ubc84 \uc2dc\uc791: http://localhost:8000")\n\nscheduler = BackgroundScheduler()\nprom_metrics = PrometheusMetrics(scheduler)\n\nscheduler.add_listener(prom_metrics.record_job_end, EVENT_JOB_EXECUTED)\nscheduler.add_listener(prom_metrics.record_job_error, EVENT_JOB_ERROR)\n\ndef monitored_task(n):\n    job_id = f\'task_{n}\'\n    prom_metrics.record_job_start(job_id)\n\n    print(f"\uc791\uc5c5 {n} \uc2e4\ud589")\n    time.sleep(1)\n\n    if n % 3 == 0:\n        raise Exception("\uc624\ub958")\n\nfor i in range(3):\n    scheduler.add_job(monitored_task, \'interval\', seconds=5, args=[i])\n\nscheduler.start()\n\nprint("\\nPrometheus \uba54\ud2b8\ub9ad\uc744 \ud655\uc778\ud558\uc138\uc694:")\nprint("  - http://localhost:8000/metrics")\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,o.jsx)(n.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\uc758 \ubaa8\ub2c8\ud130\ub9c1 \ubc29\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \uc2e4\uc804 \uc608\uc81c\ub97c \ud1b5\ud574 \uc2e4\uc81c \uc801\uc6a9 \uc0ac\ub840\ub97c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(_,{...e})}):_(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);