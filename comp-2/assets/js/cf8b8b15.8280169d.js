"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7346],{5784:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dagster/resources","title":"4. Resources","description":"Dagster\uc758 Resources\ub294 \uc678\ubd80 \uc11c\ube44\uc2a4, \ub370\uc774\ud130\ubca0\uc774\uc2a4, API \ud074\ub77c\uc774\uc5b8\ud2b8 \ub4f1\uacfc \uac19\uc740 \uc678\ubd80 \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uace0 asset \ubc0f op\uc5d0 \uc81c\uacf5\ud558\ub294 \uba54\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4. Resources\ub97c \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\uc640 \uc124\uc815\uc744 \ubd84\ub9ac\ud558\uace0, \ud658\uacbd\ubcc4\ub85c \ub2e4\ub978 \uad6c\uc131\uc744 \uc801\uc6a9\ud558\uba70, \ud14c\uc2a4\ud2b8\ub97c \uc27d\uac8c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","source":"@site/docs/dagster/resources.md","sourceDirName":"dagster","slug":"/dagster/resources","permalink":"/docs/dagster/resources","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dagster/resources.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"dagsterSidebar","previous":{"title":"3. \uc2a4\ucf00\uc904\uacfc \uc13c\uc11c","permalink":"/docs/dagster/schedules-sensors"},"next":{"title":"5. I/O Managers","permalink":"/docs/dagster/io-managers"}}');var r=s(4848),o=s(8453);const a={sidebar_position:5},i="4. Resources",l={},c=[{value:"4.1 Resource \uac1c\ub150",id:"41-resource-\uac1c\ub150",level:2},{value:"Resource\ub780?",id:"resource\ub780",level:3},{value:"Resource\uc758 \uc7a5\uc810",id:"resource\uc758-\uc7a5\uc810",level:3},{value:"Resource\uc758 \uc0dd\uba85\uc8fc\uae30",id:"resource\uc758-\uc0dd\uba85\uc8fc\uae30",level:3},{value:"4.2 @resource \ub370\ucf54\ub808\uc774\ud130",id:"42-resource-\ub370\ucf54\ub808\uc774\ud130",level:2},{value:"\uae30\ubcf8 @resource \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-resource-\uc0ac\uc6a9\ubc95",level:3},{value:"\uc124\uc815 \uac00\ub2a5\ud55c Resource",id:"\uc124\uc815-\uac00\ub2a5\ud55c-resource",level:3},{value:"\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud55c Resource",id:"\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800\ub97c-\uc0ac\uc6a9\ud55c-resource",level:3},{value:"Resource \ucd08\uae30\ud654 \ubc0f \uc815\ub9ac",id:"resource-\ucd08\uae30\ud654-\ubc0f-\uc815\ub9ac",level:3},{value:"4.3 Configured Resources",id:"43-configured-resources",level:2},{value:"ConfigurableResource \uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"configurableresource-\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"\uc911\ucca9\ub41c Resource \uc124\uc815",id:"\uc911\ucca9\ub41c-resource-\uc124\uc815",level:3},{value:"\ub3d9\uc801 Resource \uc124\uc815",id:"\ub3d9\uc801-resource-\uc124\uc815",level:3},{value:"Resource \uba54\uc11c\ub4dc \ud65c\uc6a9",id:"resource-\uba54\uc11c\ub4dc-\ud65c\uc6a9",level:3},{value:"4.4 Resource \uc758\uc874\uc131",id:"44-resource-\uc758\uc874\uc131",level:2},{value:"Resource \uac04 \uc758\uc874\uc131 \uc815\uc758",id:"resource-\uac04-\uc758\uc874\uc131-\uc815\uc758",level:3},{value:"Resource \ucc38\uc870\ub97c \ud1b5\ud55c \uc758\uc874\uc131",id:"resource-\ucc38\uc870\ub97c-\ud1b5\ud55c-\uc758\uc874\uc131",level:3},{value:"\uc21c\ud658 \uc758\uc874\uc131 \ubc29\uc9c0",id:"\uc21c\ud658-\uc758\uc874\uc131-\ubc29\uc9c0",level:3},{value:"\uc870\uac74\ubd80 Resource \uc758\uc874\uc131",id:"\uc870\uac74\ubd80-resource-\uc758\uc874\uc131",level:3},{value:"4.5 Database Resources",id:"45-database-resources",level:2},{value:"PostgreSQL Resource",id:"postgresql-resource",level:3},{value:"MySQL Resource",id:"mysql-resource",level:3},{value:"MongoDB Resource",id:"mongodb-resource",level:3},{value:"SQLAlchemy Resource (\ub2e4\uc911 DB \uc9c0\uc6d0)",id:"sqlalchemy-resource-\ub2e4\uc911-db-\uc9c0\uc6d0",level:3},{value:"4.6 API Resources",id:"46-api-resources",level:2},{value:"REST API Resource",id:"rest-api-resource",level:3},{value:"GraphQL API Resource",id:"graphql-api-resource",level:3},{value:"SDK \uae30\ubc18 API Resource",id:"sdk-\uae30\ubc18-api-resource",level:3},{value:"4.7 Cloud Resources (S3, BigQuery)",id:"47-cloud-resources-s3-bigquery",level:2},{value:"AWS S3 Resource",id:"aws-s3-resource",level:3},{value:"Google Cloud Storage Resource",id:"google-cloud-storage-resource",level:3},{value:"Google BigQuery Resource",id:"google-bigquery-resource",level:3},{value:"4.8 \ud658\uacbd\ubcc4 Resources",id:"48-\ud658\uacbd\ubcc4-resources",level:2},{value:"\ud658\uacbd\ubcc4 \uc124\uc815 \ud30c\uc77c",id:"\ud658\uacbd\ubcc4-\uc124\uc815-\ud30c\uc77c",level:3},{value:"\ud658\uacbd \uc120\ud0dd \ub85c\uc9c1",id:"\ud658\uacbd-\uc120\ud0dd-\ub85c\uc9c1",level:3},{value:"\ud658\uacbd\ubcc4 Resource \ud329\ud1a0\ub9ac",id:"\ud658\uacbd\ubcc4-resource-\ud329\ud1a0\ub9ac",level:3},{value:"Resource \uc624\ubc84\ub77c\uc774\ub4dc",id:"resource-\uc624\ubc84\ub77c\uc774\ub4dc",level:3},{value:"\uc870\uac74\ubd80 Resource \ub85c\ub529",id:"\uc870\uac74\ubd80-resource-\ub85c\ub529",level:3},{value:"4.9 \uc2e4\uc2b5",id:"49-\uc2e4\uc2b5",level:2},{value:"\uc2e4\uc2b5 1: E-Commerce \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778",id:"\uc2e4\uc2b5-1-e-commerce-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778",level:3},{value:"\uc2e4\uc2b5 2: \ub370\uc774\ud130 \ud488\uc9c8 \uac80\uc99d Resource",id:"\uc2e4\uc2b5-2-\ub370\uc774\ud130-\ud488\uc9c8-\uac80\uc99d-resource",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"4-resources",children:"4. Resources"})}),"\n",(0,r.jsx)(n.p,{children:"Dagster\uc758 Resources\ub294 \uc678\ubd80 \uc11c\ube44\uc2a4, \ub370\uc774\ud130\ubca0\uc774\uc2a4, API \ud074\ub77c\uc774\uc5b8\ud2b8 \ub4f1\uacfc \uac19\uc740 \uc678\ubd80 \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uace0 asset \ubc0f op\uc5d0 \uc81c\uacf5\ud558\ub294 \uba54\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4. Resources\ub97c \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\uc640 \uc124\uc815\uc744 \ubd84\ub9ac\ud558\uace0, \ud658\uacbd\ubcc4\ub85c \ub2e4\ub978 \uad6c\uc131\uc744 \uc801\uc6a9\ud558\uba70, \ud14c\uc2a4\ud2b8\ub97c \uc27d\uac8c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"41-resource-\uac1c\ub150",children:"4.1 Resource \uac1c\ub150"}),"\n",(0,r.jsx)(n.h3,{id:"resource\ub780",children:"Resource\ub780?"}),"\n",(0,r.jsx)(n.p,{children:"Resource\ub294 Dagster\uac00 asset\uc774\ub098 op\uc5d0 \uc81c\uacf5\ud558\ub294 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucef4\ud3ec\ub10c\ud2b8\uc785\ub2c8\ub2e4. \uc8fc\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0"}),": PostgreSQL, MySQL, MongoDB \ub4f1"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4"}),": AWS S3, Google Cloud Storage, Azure Blob Storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API \ud074\ub77c\uc774\uc5b8\ud2b8"}),": REST API, GraphQL, \uc678\ubd80 \uc11c\ube44\uc2a4 SDK"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc124\uc815 \uac12"}),": \ud658\uacbd \ubcc0\uc218, \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud30c\uc77c \uc2dc\uc2a4\ud15c"}),": \ub85c\uceec \ub610\ub294 \uc6d0\uaca9 \uc2a4\ud1a0\ub9ac\uc9c0"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"resource\uc758-\uc7a5\uc810",children:"Resource\uc758 \uc7a5\uc810"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. \uc758\uc874\uc131 \uc8fc\uc785 (Dependency Injection)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import asset, Definitions, ConfigurableResource\nimport requests\n\nclass APIClient(ConfigurableResource):\n    base_url: str\n    api_key: str\n\n    def get_data(self, endpoint: str):\n        headers = {"Authorization": f"Bearer {self.api_key}"}\n        response = requests.get(f"{self.base_url}/{endpoint}", headers=headers)\n        return response.json()\n\n@asset\ndef api_data(api_client: APIClient):\n    # Resource\uac00 \uc790\ub3d9\uc73c\ub85c \uc8fc\uc785\ub428\n    return api_client.get_data("users")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. \ud658\uacbd\ubcc4 \uc124\uc815 \ubd84\ub9ac"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \uac1c\ubc1c \ud658\uacbd\ndev_resources = {\n    "api_client": APIClient(\n        base_url="https://dev-api.example.com",\n        api_key="dev-key"\n    )\n}\n\n# \ud504\ub85c\ub355\uc158 \ud658\uacbd\nprod_resources = {\n    "api_client": APIClient(\n        base_url="https://api.example.com",\n        api_key="prod-key"\n    )\n}\n\n# \ud658\uacbd\uc5d0 \ub530\ub77c \uc120\ud0dd\ndefs = Definitions(\n    assets=[api_data],\n    resources=dev_resources  # \ub610\ub294 prod_resources\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. \ud14c\uc2a4\ud2b8 \uc6a9\uc774\uc131"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MockAPIClient(ConfigurableResource):\n    def get_data(self, endpoint: str):\n        # \ud14c\uc2a4\ud2b8\uc6a9 mock \ub370\uc774\ud130 \ubc18\ud658\n        return {"users": [{"id": 1, "name": "Test User"}]}\n\n# \ud14c\uc2a4\ud2b8\uc5d0\uc11c mock resource \uc0ac\uc6a9\ntest_resources = {\n    "api_client": MockAPIClient()\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. \uc5f0\uacb0 \ud480\ub9c1 \ubc0f \ub9ac\uc18c\uc2a4 \uad00\ub9ac"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from dagster import ConfigurableResource\nfrom contextlib import contextmanager\nimport psycopg2.pool\n\nclass DatabaseResource(ConfigurableResource):\n    host: str\n    port: int\n    database: str\n    user: str\n    password: str\n\n    def setup_for_execution(self, context) -> None:\n        # \uc5f0\uacb0 \ud480 \uc0dd\uc131\n        self._pool = psycopg2.pool.SimpleConnectionPool(\n            1, 20,\n            host=self.host,\n            port=self.port,\n            database=self.database,\n            user=self.user,\n            password=self.password\n        )\n\n    @contextmanager\n    def get_connection(self):\n        conn = self._pool.getconn()\n        try:\n            yield conn\n        finally:\n            self._pool.putconn(conn)\n\n    def teardown_after_execution(self, context) -> None:\n        # \uc5f0\uacb0 \ud480 \uc815\ub9ac\n        self._pool.closeall()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"resource\uc758-\uc0dd\uba85\uc8fc\uae30",children:"Resource\uc758 \uc0dd\uba85\uc8fc\uae30"}),"\n",(0,r.jsx)(n.p,{children:"Resources\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc0dd\uba85\uc8fc\uae30\ub97c \uac00\uc9d1\ub2c8\ub2e4:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource\n\nclass MyResource(ConfigurableResource):\n    connection_string: str\n\n    def setup_for_execution(self, context) -> None:\n        """\uc2e4\ud589 \uc804 \ucd08\uae30\ud654 (\uc5f0\uacb0 \uc0dd\uc131 \ub4f1)"""\n        self.context.log.info("Resource \ucd08\uae30\ud654 \uc2dc\uc791")\n        # \uc5f0\uacb0 \uc124\uc815, \ub9ac\uc18c\uc2a4 \ud560\ub2f9 \ub4f1\n\n    def teardown_after_execution(self, context) -> None:\n        """\uc2e4\ud589 \ud6c4 \uc815\ub9ac (\uc5f0\uacb0 \uc885\ub8cc \ub4f1)"""\n        self.context.log.info("Resource \uc815\ub9ac \uc2dc\uc791")\n        # \uc5f0\uacb0 \uc885\ub8cc, \ub9ac\uc18c\uc2a4 \ud574\uc81c \ub4f1\n'})}),"\n",(0,r.jsx)(n.h2,{id:"42-resource-\ub370\ucf54\ub808\uc774\ud130",children:"4.2 @resource \ub370\ucf54\ub808\uc774\ud130"}),"\n",(0,r.jsxs)(n.p,{children:["Dagster\ub294 Resources\ub97c \uc815\uc758\ud558\ub294 \uc5ec\ub7ec \ubc29\ubc95\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ucd5c\uc2e0 \ubc29\uc2dd\uc740 ",(0,r.jsx)(n.code,{children:"ConfigurableResource"}),"\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\uc9c0\ub9cc, \ub808\uac70\uc2dc \ucf54\ub4dc\uc5d0\uc11c\ub294 ",(0,r.jsx)(n.code,{children:"@resource"})," \ub370\ucf54\ub808\uc774\ud130\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-resource-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 @resource \uc0ac\uc6a9\ubc95"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import resource, op, job\n\n@resource\ndef database_client():\n    """\uac04\ub2e8\ud55c resource \uc815\uc758"""\n    return {"host": "localhost", "port": 5432}\n\n@op(required_resource_keys={"database"})\ndef query_database(context):\n    db_config = context.resources.database\n    context.log.info(f"Connecting to {db_config[\'host\']}:{db_config[\'port\']}")\n    return "query_result"\n\n@job(resource_defs={"database": database_client})\ndef database_job():\n    query_database()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc124\uc815-\uac00\ub2a5\ud55c-resource",children:"\uc124\uc815 \uac00\ub2a5\ud55c Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import resource, Field, String, Int\n\n@resource(\n    config_schema={\n        "host": Field(String, description="Database host"),\n        "port": Field(Int, default_value=5432, description="Database port"),\n        "username": Field(String),\n        "password": Field(String),\n    }\n)\ndef configurable_database(context):\n    """\uc124\uc815 \uac00\ub2a5\ud55c resource"""\n    config = context.resource_config\n\n    # \uc2e4\uc81c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc0dd\uc131\n    connection = create_db_connection(\n        host=config["host"],\n        port=config["port"],\n        username=config["username"],\n        password=config["password"]\n    )\n\n    return connection\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800\ub97c-\uc0ac\uc6a9\ud55c-resource",children:"\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud55c Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import resource\nfrom contextlib import contextmanager\n\n@resource\n@contextmanager\ndef database_connection(context):\n    """\uc5f0\uacb0 \uc0dd\uc131 \ubc0f \uc815\ub9ac\ub97c \uc790\ub3d9\ud654\ud558\ub294 resource"""\n    conn = create_connection(context.resource_config)\n\n    try:\n        yield conn\n    finally:\n        conn.close()\n        context.log.info("Database connection closed")\n\n@op(required_resource_keys={"db"})\ndef run_query(context):\n    # with \ube14\ub85d \uc5c6\uc774 \uc0ac\uc6a9 \uac00\ub2a5\n    result = context.resources.db.execute("SELECT * FROM users")\n    return result\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-\ucd08\uae30\ud654-\ubc0f-\uc815\ub9ac",children:"Resource \ucd08\uae30\ud654 \ubc0f \uc815\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import resource\n\n@resource(config_schema={"api_key": str})\ndef api_client_resource(context):\n    """\ucd08\uae30\ud654 \ubc0f \uc815\ub9ac \ub85c\uc9c1\uc744 \ud3ec\ud568\ud55c resource"""\n    api_key = context.resource_config["api_key"]\n\n    # \ucd08\uae30\ud654\n    client = APIClient(api_key)\n    client.connect()\n    context.log.info("API client connected")\n\n    try:\n        yield client\n    finally:\n        # \uc815\ub9ac\n        client.disconnect()\n        context.log.info("API client disconnected")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"43-configured-resources",children:"4.3 Configured Resources"}),"\n",(0,r.jsx)(n.p,{children:"ConfigurableResource\ub294 Dagster\uc758 \ucd5c\uc2e0 resource \uc815\uc758 \ubc29\uc2dd\uc73c\ub85c, \ud0c0\uc785 \uc548\uc804\uc131\uacfc \ub354 \ub098\uc740 \uac1c\ubc1c\uc790 \uacbd\ud5d8\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"configurableresource-\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"ConfigurableResource \uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset, Definitions\nfrom pydantic import Field\n\nclass DatabaseConfig(ConfigurableResource):\n    """\ud0c0\uc785 \uc548\uc804\ud55c database resource"""\n    host: str = Field(description="Database host address")\n    port: int = Field(default=5432, description="Database port")\n    database: str = Field(description="Database name")\n    username: str = Field(description="Database username")\n    password: str = Field(description="Database password")\n\n    def get_connection(self):\n        """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ubc18\ud658"""\n        import psycopg2\n        return psycopg2.connect(\n            host=self.host,\n            port=self.port,\n            database=self.database,\n            user=self.username,\n            password=self.password\n        )\n\n    def execute_query(self, query: str):\n        """\ucffc\ub9ac \uc2e4\ud589"""\n        with self.get_connection() as conn:\n            with conn.cursor() as cursor:\n                cursor.execute(query)\n                return cursor.fetchall()\n\n@asset\ndef users_data(database: DatabaseConfig):\n    """Database resource\ub97c \uc0ac\uc6a9\ud558\ub294 asset"""\n    results = database.execute_query("SELECT * FROM users")\n    return results\n\ndefs = Definitions(\n    assets=[users_data],\n    resources={\n        "database": DatabaseConfig(\n            host="localhost",\n            port=5432,\n            database="mydb",\n            username="user",\n            password="password"\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc911\ucca9\ub41c-resource-\uc124\uc815",children:"\uc911\ucca9\ub41c Resource \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource\nfrom pydantic import Field\nfrom typing import Optional\n\nclass SSLConfig(ConfigurableResource):\n    """SSL \uc124\uc815"""\n    enabled: bool = Field(default=False)\n    cert_path: Optional[str] = Field(default=None)\n    key_path: Optional[str] = Field(default=None)\n\nclass AdvancedDatabaseConfig(ConfigurableResource):\n    """\uace0\uae09 database \uc124\uc815"""\n    host: str\n    port: int = 5432\n    database: str\n    username: str\n    password: str\n    ssl: SSLConfig = Field(default_factory=SSLConfig)\n    pool_size: int = Field(default=10, description="Connection pool size")\n    timeout: int = Field(default=30, description="Connection timeout in seconds")\n\n    def get_connection_string(self) -> str:\n        """\uc5f0\uacb0 \ubb38\uc790\uc5f4 \uc0dd\uc131"""\n        ssl_mode = "require" if self.ssl.enabled else "disable"\n        return (\n            f"postgresql://{self.username}:{self.password}"\n            f"@{self.host}:{self.port}/{self.database}"\n            f"?sslmode={ssl_mode}"\n        )\n\n# \uc0ac\uc6a9 \uc608\uc2dc\ndefs = Definitions(\n    assets=[users_data],\n    resources={\n        "database": AdvancedDatabaseConfig(\n            host="localhost",\n            database="mydb",\n            username="user",\n            password="password",\n            ssl=SSLConfig(\n                enabled=True,\n                cert_path="/path/to/cert.pem",\n                key_path="/path/to/key.pem"\n            ),\n            pool_size=20,\n            timeout=60\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub3d9\uc801-resource-\uc124\uc815",children:"\ub3d9\uc801 Resource \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, EnvVar\nimport os\n\nclass DynamicDatabaseConfig(ConfigurableResource):\n    """\ud658\uacbd \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc801 \uc124\uc815"""\n    host: str = Field(default_factory=lambda: os.getenv("DB_HOST", "localhost"))\n    port: int = Field(default_factory=lambda: int(os.getenv("DB_PORT", "5432")))\n    database: str\n    username: str\n    password: str\n\n# \ub610\ub294 Dagster\uc758 EnvVar \uc0ac\uc6a9\nclass SecureDatabaseConfig(ConfigurableResource):\n    """EnvVar\ub97c \uc0ac\uc6a9\ud55c \ubcf4\uc548 \uc124\uc815"""\n    host: str\n    port: int = 5432\n    database: str\n    username: str\n    password: str  # EnvVar\ub85c \uc8fc\uc785\ub428\n\ndefs = Definitions(\n    assets=[users_data],\n    resources={\n        "database": SecureDatabaseConfig(\n            host="localhost",\n            database="mydb",\n            username="user",\n            password=EnvVar("DB_PASSWORD")  # \ud658\uacbd \ubcc0\uc218\uc5d0\uc11c \uc77d\uae30\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-\uba54\uc11c\ub4dc-\ud65c\uc6a9",children:"Resource \uba54\uc11c\ub4dc \ud65c\uc6a9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import List, Dict, Any\nimport pandas as pd\n\nclass DataWarehouseResource(ConfigurableResource):\n    """\ub370\uc774\ud130 \uc6e8\uc5b4\ud558\uc6b0\uc2a4 resource"""\n    host: str\n    database: str\n    username: str\n    password: str\n\n    def query_to_dataframe(self, query: str) -> pd.DataFrame:\n        """\ucffc\ub9ac \uacb0\uacfc\ub97c DataFrame\uc73c\ub85c \ubc18\ud658"""\n        conn = self.get_connection()\n        return pd.read_sql(query, conn)\n\n    def execute_batch(self, queries: List[str]) -> None:\n        """\uc5ec\ub7ec \ucffc\ub9ac\ub97c \ubc30\uce58\ub85c \uc2e4\ud589"""\n        with self.get_connection() as conn:\n            with conn.cursor() as cursor:\n                for query in queries:\n                    cursor.execute(query)\n            conn.commit()\n\n    def get_table_schema(self, table_name: str) -> Dict[str, Any]:\n        """\ud14c\uc774\ube14 \uc2a4\ud0a4\ub9c8 \uc815\ubcf4 \uc870\ud68c"""\n        query = f"""\n            SELECT column_name, data_type\n            FROM information_schema.columns\n            WHERE table_name = \'{table_name}\'\n        """\n        return self.query_to_dataframe(query).to_dict(\'records\')\n\n    def get_connection(self):\n        import psycopg2\n        return psycopg2.connect(\n            host=self.host,\n            database=self.database,\n            user=self.username,\n            password=self.password\n        )\n\n@asset\ndef customer_analysis(warehouse: DataWarehouseResource) -> pd.DataFrame:\n    """Resource\uc758 \uba54\uc11c\ub4dc\ub97c \ud65c\uc6a9\ud55c \ubd84\uc11d"""\n    # \uc2a4\ud0a4\ub9c8 \ud655\uc778\n    schema = warehouse.get_table_schema("customers")\n\n    # \ub370\uc774\ud130 \uc870\ud68c\n    df = warehouse.query_to_dataframe("""\n        SELECT customer_id, total_purchases, last_purchase_date\n        FROM customers\n        WHERE total_purchases > 100\n    """)\n\n    return df\n'})}),"\n",(0,r.jsx)(n.h2,{id:"44-resource-\uc758\uc874\uc131",children:"4.4 Resource \uc758\uc874\uc131"}),"\n",(0,r.jsx)(n.p,{children:"Resources\ub294 \ub2e4\ub978 resources\uc5d0 \uc758\uc874\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \ubcf5\uc7a1\ud55c \uc758\uc874\uc131 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"resource-\uac04-\uc758\uc874\uc131-\uc815\uc758",children:"Resource \uac04 \uc758\uc874\uc131 \uc815\uc758"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset, Definitions\n\nclass DatabaseConfig(ConfigurableResource):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815"""\n    connection_string: str\n\n    def get_engine(self):\n        from sqlalchemy import create_engine\n        return create_engine(self.connection_string)\n\nclass CacheConfig(ConfigurableResource):\n    """\uce90\uc2dc \uc124\uc815"""\n    redis_host: str\n    redis_port: int = 6379\n\n    def get_client(self):\n        import redis\n        return redis.Redis(host=self.redis_host, port=self.redis_port)\n\nclass DataService(ConfigurableResource):\n    """Database\uc640 Cache\uc5d0 \uc758\uc874\ud558\ub294 \uc11c\ube44\uc2a4"""\n    database: DatabaseConfig\n    cache: CacheConfig\n    cache_ttl: int = 3600\n\n    def get_data(self, key: str):\n        # \uce90\uc2dc \ud655\uc778\n        cache_client = self.cache.get_client()\n        cached_data = cache_client.get(key)\n\n        if cached_data:\n            return cached_data\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc870\ud68c\n        engine = self.database.get_engine()\n        with engine.connect() as conn:\n            result = conn.execute(f"SELECT * FROM data WHERE key = \'{key}\'")\n            data = result.fetchone()\n\n        # \uce90\uc2dc\uc5d0 \uc800\uc7a5\n        if data:\n            cache_client.setex(key, self.cache_ttl, str(data))\n\n        return data\n\n@asset\ndef user_data(data_service: DataService):\n    """\uc758\uc874\uc131 \uccb4\uc778\uc744 \uac00\uc9c4 resource \uc0ac\uc6a9"""\n    return data_service.get_data("user_123")\n\ndefs = Definitions(\n    assets=[user_data],\n    resources={\n        "database": DatabaseConfig(\n            connection_string="postgresql://user:pass@localhost/db"\n        ),\n        "cache": CacheConfig(\n            redis_host="localhost",\n            redis_port=6379\n        ),\n        "data_service": DataService(\n            database=DatabaseConfig(\n                connection_string="postgresql://user:pass@localhost/db"\n            ),\n            cache=CacheConfig(\n                redis_host="localhost",\n                redis_port=6379\n            ),\n            cache_ttl=7200\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-\ucc38\uc870\ub97c-\ud1b5\ud55c-\uc758\uc874\uc131",children:"Resource \ucc38\uc870\ub97c \ud1b5\ud55c \uc758\uc874\uc131"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset, Definitions\n\nclass LoggerConfig(ConfigurableResource):\n    """\ub85c\uae45 \uc124\uc815"""\n    log_level: str = "INFO"\n    log_file: str = "app.log"\n\n    def get_logger(self):\n        import logging\n        logger = logging.getLogger(__name__)\n        logger.setLevel(self.log_level)\n\n        handler = logging.FileHandler(self.log_file)\n        formatter = logging.Formatter(\n            \'%(asctime)s - %(name)s - %(levelname)s - %(message)s\'\n        )\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n\n        return logger\n\nclass MonitoredDatabaseConfig(ConfigurableResource):\n    """\ub85c\uac70\uc5d0 \uc758\uc874\ud558\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4"""\n    connection_string: str\n    logger: LoggerConfig\n\n    def execute_query(self, query: str):\n        logger = self.logger.get_logger()\n        logger.info(f"Executing query: {query}")\n\n        try:\n            # \ucffc\ub9ac \uc2e4\ud589\n            result = self._run_query(query)\n            logger.info(f"Query successful, returned {len(result)} rows")\n            return result\n        except Exception as e:\n            logger.error(f"Query failed: {str(e)}")\n            raise\n\n    def _run_query(self, query: str):\n        # \uc2e4\uc81c \ucffc\ub9ac \uc2e4\ud589 \ub85c\uc9c1\n        pass\n\n# Resource \uc815\uc758\uc5d0\uc11c \uc758\uc874\uc131 \uc8fc\uc785\ndefs = Definitions(\n    assets=[user_data],\n    resources={\n        "logger": LoggerConfig(\n            log_level="DEBUG",\n            log_file="database.log"\n        ),\n        "database": MonitoredDatabaseConfig(\n            connection_string="postgresql://user:pass@localhost/db",\n            logger=LoggerConfig(log_level="DEBUG", log_file="database.log")\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc21c\ud658-\uc758\uc874\uc131-\ubc29\uc9c0",children:"\uc21c\ud658 \uc758\uc874\uc131 \ubc29\uc9c0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource\nfrom typing import Optional\n\nclass ServiceA(ConfigurableResource):\n    """\uc11c\ube44\uc2a4 A"""\n    name: str = "ServiceA"\n\n    def process(self, data):\n        return f"{self.name} processed: {data}"\n\nclass ServiceB(ConfigurableResource):\n    """\uc11c\ube44\uc2a4 B - ServiceA\uc5d0 \uc758\uc874"""\n    name: str = "ServiceB"\n    service_a: Optional[ServiceA] = None\n\n    def process(self, data):\n        # ServiceA\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucc98\ub9ac\n        if self.service_a:\n            intermediate = self.service_a.process(data)\n            return f"{self.name} enhanced: {intermediate}"\n        return f"{self.name} processed: {data}"\n\n# \uc62c\ubc14\ub978 \ubc29\ubc95: \uc758\uc874\uc131\uc744 \ud55c \ubc29\ud5a5\uc73c\ub85c\ub9cc \uc124\uc815\ndefs = Definitions(\n    assets=[user_data],\n    resources={\n        "service_a": ServiceA(name="ServiceA"),\n        "service_b": ServiceB(\n            name="ServiceB",\n            service_a=ServiceA(name="ServiceA")\n        )\n    }\n)\n\n# \uc798\ubabb\ub41c \uc608: \uc21c\ud658 \uc758\uc874\uc131 (\ud53c\ud574\uc57c \ud568)\n# ServiceA -> ServiceB -> ServiceA \ud615\ud0dc\uc758 \uc21c\ud658 \ucc38\uc870\ub294 \ud53c\ud574\uc57c \ud569\ub2c8\ub2e4\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc870\uac74\ubd80-resource-\uc758\uc874\uc131",children:"\uc870\uac74\ubd80 Resource \uc758\uc874\uc131"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import Optional\nfrom enum import Enum\n\nclass StorageType(str, Enum):\n    LOCAL = "local"\n    S3 = "s3"\n    GCS = "gcs"\n\nclass S3Config(ConfigurableResource):\n    """S3 \uc124\uc815"""\n    bucket: str\n    access_key: str\n    secret_key: str\n\nclass GCSConfig(ConfigurableResource):\n    """GCS \uc124\uc815"""\n    bucket: str\n    credentials_path: str\n\nclass FlexibleStorageConfig(ConfigurableResource):\n    """\uc2a4\ud1a0\ub9ac\uc9c0 \ud0c0\uc785\uc5d0 \ub530\ub77c \ub2e4\ub978 \uc758\uc874\uc131 \uc0ac\uc6a9"""\n    storage_type: StorageType\n    s3_config: Optional[S3Config] = None\n    gcs_config: Optional[GCSConfig] = None\n    local_path: Optional[str] = None\n\n    def save_file(self, filename: str, content: bytes):\n        if self.storage_type == StorageType.S3:\n            if not self.s3_config:\n                raise ValueError("S3 config required for S3 storage")\n            # S3\uc5d0 \uc800\uc7a5\n            return self._save_to_s3(filename, content)\n\n        elif self.storage_type == StorageType.GCS:\n            if not self.gcs_config:\n                raise ValueError("GCS config required for GCS storage")\n            # GCS\uc5d0 \uc800\uc7a5\n            return self._save_to_gcs(filename, content)\n\n        else:\n            if not self.local_path:\n                raise ValueError("Local path required for local storage")\n            # \ub85c\uceec\uc5d0 \uc800\uc7a5\n            return self._save_locally(filename, content)\n\n    def _save_to_s3(self, filename: str, content: bytes):\n        import boto3\n        s3 = boto3.client(\n            \'s3\',\n            aws_access_key_id=self.s3_config.access_key,\n            aws_secret_access_key=self.s3_config.secret_key\n        )\n        s3.put_object(Bucket=self.s3_config.bucket, Key=filename, Body=content)\n\n    def _save_to_gcs(self, filename: str, content: bytes):\n        from google.cloud import storage\n        client = storage.Client.from_service_account_json(\n            self.gcs_config.credentials_path\n        )\n        bucket = client.bucket(self.gcs_config.bucket)\n        blob = bucket.blob(filename)\n        blob.upload_from_string(content)\n\n    def _save_locally(self, filename: str, content: bytes):\n        import os\n        filepath = os.path.join(self.local_path, filename)\n        with open(filepath, \'wb\') as f:\n            f.write(content)\n\n@asset\ndef data_export(storage: FlexibleStorageConfig):\n    """\uc870\uac74\ubd80 \uc758\uc874\uc131\uc744 \uac00\uc9c4 resource \uc0ac\uc6a9"""\n    data = b"export data content"\n    storage.save_file("export.csv", data)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"45-database-resources",children:"4.5 Database Resources"}),"\n",(0,r.jsx)(n.p,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub294 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c \uac00\uc7a5 \ud754\ud558\uac8c \uc0ac\uc6a9\ub418\ub294 resource\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"postgresql-resource",children:"PostgreSQL Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset, Definitions\nfrom contextlib import contextmanager\nfrom typing import Iterator, List, Dict, Any\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nimport pandas as pd\n\nclass PostgresResource(ConfigurableResource):\n    """PostgreSQL database resource"""\n    host: str\n    port: int = 5432\n    database: str\n    user: str\n    password: str\n\n    @contextmanager\n    def get_connection(self) -> Iterator[psycopg2.extensions.connection]:\n        """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\uc744 \uc81c\uacf5\ud558\ub294 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800"""\n        conn = psycopg2.connect(\n            host=self.host,\n            port=self.port,\n            database=self.database,\n            user=self.user,\n            password=self.password\n        )\n        try:\n            yield conn\n            conn.commit()\n        except Exception:\n            conn.rollback()\n            raise\n        finally:\n            conn.close()\n\n    def execute_query(self, query: str, params: tuple = None) -> List[Dict[str, Any]]:\n        """\ucffc\ub9ac \uc2e4\ud589 \ubc0f \uacb0\uacfc \ubc18\ud658"""\n        with self.get_connection() as conn:\n            with conn.cursor(cursor_factory=RealDictCursor) as cursor:\n                cursor.execute(query, params)\n                return [dict(row) for row in cursor.fetchall()]\n\n    def execute_many(self, query: str, data: List[tuple]) -> None:\n        """\ubc30\uce58 \uc0bd\uc785"""\n        with self.get_connection() as conn:\n            with conn.cursor() as cursor:\n                cursor.executemany(query, data)\n\n    def query_to_dataframe(self, query: str, params: tuple = None) -> pd.DataFrame:\n        """\ucffc\ub9ac \uacb0\uacfc\ub97c DataFrame\uc73c\ub85c \ubc18\ud658"""\n        with self.get_connection() as conn:\n            return pd.read_sql(query, conn, params=params)\n\n    def insert_dataframe(self, df: pd.DataFrame, table_name: str) -> None:\n        """DataFrame\uc744 \ud14c\uc774\ube14\uc5d0 \uc0bd\uc785"""\n        with self.get_connection() as conn:\n            df.to_sql(table_name, conn, if_exists=\'append\', index=False)\n\n@asset\ndef users_from_postgres(postgres: PostgresResource) -> pd.DataFrame:\n    """PostgreSQL\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc870\ud68c"""\n    query = """\n        SELECT user_id, username, email, created_at\n        FROM users\n        WHERE active = true\n        ORDER BY created_at DESC\n        LIMIT 1000\n    """\n    return postgres.query_to_dataframe(query)\n\n@asset\ndef user_statistics(postgres: PostgresResource, users_from_postgres: pd.DataFrame) -> None:\n    """\uc0ac\uc6a9\uc790 \ud1b5\uacc4 \uacc4\uc0b0 \ubc0f \uc800\uc7a5"""\n    stats = users_from_postgres.groupby(\'created_at\').size().reset_index(name=\'count\')\n\n    # \ud1b5\uacc4\ub97c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\n    insert_query = """\n        INSERT INTO user_statistics (date, user_count, created_at)\n        VALUES (%s, %s, NOW())\n    """\n    data = [(row[\'created_at\'], row[\'count\']) for _, row in stats.iterrows()]\n    postgres.execute_many(insert_query, data)\n\ndefs = Definitions(\n    assets=[users_from_postgres, user_statistics],\n    resources={\n        "postgres": PostgresResource(\n            host="localhost",\n            port=5432,\n            database="myapp",\n            user="postgres",\n            password="password"\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mysql-resource",children:"MySQL Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom contextlib import contextmanager\nfrom typing import Iterator, List, Dict, Any\nimport mysql.connector\nfrom mysql.connector import pooling\nimport pandas as pd\n\nclass MySQLResource(ConfigurableResource):\n    """MySQL database resource with connection pooling"""\n    host: str\n    port: int = 3306\n    database: str\n    user: str\n    password: str\n    pool_name: str = "mypool"\n    pool_size: int = 5\n\n    def setup_for_execution(self, context) -> None:\n        """\uc5f0\uacb0 \ud480 \ucd08\uae30\ud654"""\n        self._pool = pooling.MySQLConnectionPool(\n            pool_name=self.pool_name,\n            pool_size=self.pool_size,\n            host=self.host,\n            port=self.port,\n            database=self.database,\n            user=self.user,\n            password=self.password\n        )\n        context.log.info(f"MySQL connection pool created: {self.pool_name}")\n\n    @contextmanager\n    def get_connection(self) -> Iterator:\n        """\ud480\uc5d0\uc11c \uc5f0\uacb0 \uac00\uc838\uc624\uae30"""\n        conn = self._pool.get_connection()\n        try:\n            yield conn\n            conn.commit()\n        except Exception:\n            conn.rollback()\n            raise\n        finally:\n            conn.close()\n\n    def execute_query(self, query: str, params: tuple = None) -> List[Dict[str, Any]]:\n        """\ucffc\ub9ac \uc2e4\ud589"""\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute(query, params)\n            results = cursor.fetchall()\n            cursor.close()\n            return results\n\n    def query_to_dataframe(self, query: str) -> pd.DataFrame:\n        """\ucffc\ub9ac \uacb0\uacfc\ub97c DataFrame\uc73c\ub85c \ubc18\ud658"""\n        with self.get_connection() as conn:\n            return pd.read_sql(query, conn)\n\n    def bulk_insert(self, table: str, columns: List[str], data: List[tuple]) -> None:\n        """\ub300\ub7c9 \ub370\uc774\ud130 \uc0bd\uc785"""\n        placeholders = \', \'.join([\'%s\'] * len(columns))\n        columns_str = \', \'.join(columns)\n        query = f"INSERT INTO {table} ({columns_str}) VALUES ({placeholders})"\n\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.executemany(query, data)\n            cursor.close()\n\n@asset\ndef products_from_mysql(mysql: MySQLResource) -> pd.DataFrame:\n    """MySQL\uc5d0\uc11c \uc81c\ud488 \ub370\uc774\ud130 \uc870\ud68c"""\n    return mysql.query_to_dataframe("""\n        SELECT product_id, name, price, category, stock\n        FROM products\n        WHERE stock > 0\n    """)\n\n@asset\ndef update_product_prices(mysql: MySQLResource, products_from_mysql: pd.DataFrame) -> None:\n    """\uc81c\ud488 \uac00\uaca9 \uc5c5\ub370\uc774\ud2b8"""\n    # \uac00\uaca9 \uc778\uc0c1 \uacc4\uc0b0 (\uc608: 10%)\n    for _, product in products_from_mysql.iterrows():\n        new_price = product[\'price\'] * 1.1\n\n        mysql.execute_query(\n            "UPDATE products SET price = %s WHERE product_id = %s",\n            (new_price, product[\'product_id\'])\n        )\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mongodb-resource",children:"MongoDB Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import List, Dict, Any, Optional\nimport pymongo\nfrom pymongo import MongoClient\nimport pandas as pd\n\nclass MongoDBResource(ConfigurableResource):\n    """MongoDB database resource"""\n    host: str = "localhost"\n    port: int = 27017\n    database: str\n    username: Optional[str] = None\n    password: Optional[str] = None\n    auth_source: str = "admin"\n\n    def setup_for_execution(self, context) -> None:\n        """MongoDB \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd08\uae30\ud654"""\n        if self.username and self.password:\n            connection_string = (\n                f"mongodb://{self.username}:{self.password}"\n                f"@{self.host}:{self.port}/{self.database}"\n                f"?authSource={self.auth_source}"\n            )\n        else:\n            connection_string = f"mongodb://{self.host}:{self.port}/{self.database}"\n\n        self._client = MongoClient(connection_string)\n        self._db = self._client[self.database]\n        context.log.info(f"Connected to MongoDB: {self.database}")\n\n    def get_collection(self, collection_name: str):\n        """\uceec\ub809\uc158 \ubc18\ud658"""\n        return self._db[collection_name]\n\n    def find(self, collection: str, query: Dict = None, projection: Dict = None) -> List[Dict]:\n        """\ubb38\uc11c \uc870\ud68c"""\n        if query is None:\n            query = {}\n        coll = self.get_collection(collection)\n        return list(coll.find(query, projection))\n\n    def find_to_dataframe(self, collection: str, query: Dict = None) -> pd.DataFrame:\n        """\uc870\ud68c \uacb0\uacfc\ub97c DataFrame\uc73c\ub85c \ubc18\ud658"""\n        documents = self.find(collection, query)\n        return pd.DataFrame(documents)\n\n    def insert_many(self, collection: str, documents: List[Dict]) -> None:\n        """\uc5ec\ub7ec \ubb38\uc11c \uc0bd\uc785"""\n        coll = self.get_collection(collection)\n        coll.insert_many(documents)\n\n    def update_many(self, collection: str, query: Dict, update: Dict) -> int:\n        """\uc5ec\ub7ec \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8"""\n        coll = self.get_collection(collection)\n        result = coll.update_many(query, update)\n        return result.modified_count\n\n    def aggregate(self, collection: str, pipeline: List[Dict]) -> List[Dict]:\n        """\uc9d1\uacc4 \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589"""\n        coll = self.get_collection(collection)\n        return list(coll.aggregate(pipeline))\n\n    def teardown_after_execution(self, context) -> None:\n        """\uc5f0\uacb0 \uc885\ub8cc"""\n        self._client.close()\n        context.log.info("MongoDB connection closed")\n\n@asset\ndef user_events_from_mongo(mongodb: MongoDBResource) -> pd.DataFrame:\n    """MongoDB\uc5d0\uc11c \uc0ac\uc6a9\uc790 \uc774\ubca4\ud2b8 \uc870\ud68c"""\n    # \ucd5c\uadfc 7\uc77c\uac04\uc758 \uc774\ubca4\ud2b8 \uc870\ud68c\n    from datetime import datetime, timedelta\n\n    seven_days_ago = datetime.now() - timedelta(days=7)\n    query = {"timestamp": {"$gte": seven_days_ago}}\n\n    return mongodb.find_to_dataframe("user_events", query)\n\n@asset\ndef event_summary(mongodb: MongoDBResource) -> pd.DataFrame:\n    """\uc774\ubca4\ud2b8 \uc9d1\uacc4"""\n    pipeline = [\n        {"$match": {"event_type": "purchase"}},\n        {"$group": {\n            "_id": "$user_id",\n            "total_purchases": {"$sum": 1},\n            "total_amount": {"$sum": "$amount"}\n        }},\n        {"$sort": {"total_amount": -1}},\n        {"$limit": 100}\n    ]\n\n    results = mongodb.aggregate("user_events", pipeline)\n    return pd.DataFrame(results)\n\n@asset\ndef save_aggregated_events(mongodb: MongoDBResource, event_summary: pd.DataFrame) -> None:\n    """\uc9d1\uacc4\ub41c \ub370\uc774\ud130 \uc800\uc7a5"""\n    documents = event_summary.to_dict(\'records\')\n\n    # \uae30\uc874 \ub370\uc774\ud130 \uc0ad\uc81c \ud6c4 \uc0c8\ub85c \uc0bd\uc785\n    mongodb.get_collection("event_summaries").delete_many({})\n    mongodb.insert_many("event_summaries", documents)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sqlalchemy-resource-\ub2e4\uc911-db-\uc9c0\uc6d0",children:"SQLAlchemy Resource (\ub2e4\uc911 DB \uc9c0\uc6d0)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom sqlalchemy.pool import QueuePool\nfrom contextlib import contextmanager\nfrom typing import Iterator\nimport pandas as pd\n\nclass SQLAlchemyResource(ConfigurableResource):\n    """SQLAlchemy\ub97c \uc0ac\uc6a9\ud55c \ubc94\uc6a9 database resource"""\n    connection_string: str\n    pool_size: int = 5\n    max_overflow: int = 10\n    pool_timeout: int = 30\n    echo: bool = False\n\n    def setup_for_execution(self, context) -> None:\n        """\uc5d4\uc9c4 \ubc0f \uc138\uc158 \ud329\ud1a0\ub9ac \uc0dd\uc131"""\n        self._engine = create_engine(\n            self.connection_string,\n            poolclass=QueuePool,\n            pool_size=self.pool_size,\n            max_overflow=self.max_overflow,\n            pool_timeout=self.pool_timeout,\n            echo=self.echo\n        )\n        self._SessionFactory = sessionmaker(bind=self._engine)\n        context.log.info("SQLAlchemy engine created")\n\n    @property\n    def engine(self):\n        """SQLAlchemy \uc5d4\uc9c4 \ubc18\ud658"""\n        return self._engine\n\n    @contextmanager\n    def get_session(self) -> Iterator[Session]:\n        """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158 \uc81c\uacf5"""\n        session = self._SessionFactory()\n        try:\n            yield session\n            session.commit()\n        except Exception:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n\n    def execute_query(self, query: str, params: dict = None) -> list:\n        """Raw SQL \ucffc\ub9ac \uc2e4\ud589"""\n        with self.get_session() as session:\n            result = session.execute(text(query), params or {})\n            return [dict(row) for row in result]\n\n    def query_to_dataframe(self, query: str, params: dict = None) -> pd.DataFrame:\n        """\ucffc\ub9ac \uacb0\uacfc\ub97c DataFrame\uc73c\ub85c \ubc18\ud658"""\n        return pd.read_sql(query, self._engine, params=params)\n\n    def dataframe_to_table(self, df: pd.DataFrame, table_name: str,\n                           if_exists: str = \'append\') -> None:\n        """DataFrame\uc744 \ud14c\uc774\ube14\uc5d0 \uc800\uc7a5"""\n        df.to_sql(table_name, self._engine, if_exists=if_exists, index=False)\n\n    def teardown_after_execution(self, context) -> None:\n        """\uc5d4\uc9c4 \uc815\ub9ac"""\n        self._engine.dispose()\n        context.log.info("SQLAlchemy engine disposed")\n\n# \ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\npostgres_resource = SQLAlchemyResource(\n    connection_string="postgresql://user:pass@localhost:5432/dbname"\n)\n\nmysql_resource = SQLAlchemyResource(\n    connection_string="mysql+pymysql://user:pass@localhost:3306/dbname"\n)\n\nsqlite_resource = SQLAlchemyResource(\n    connection_string="sqlite:///path/to/database.db"\n)\n\n@asset\ndef cross_database_analysis(\n    postgres: SQLAlchemyResource,\n    mysql: SQLAlchemyResource\n) -> pd.DataFrame:\n    """\uc5ec\ub7ec \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \uc870\ud68c \ubc0f \uacb0\ud569"""\n    # PostgreSQL\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc870\ud68c\n    users_df = postgres.query_to_dataframe("SELECT * FROM users")\n\n    # MySQL\uc5d0\uc11c \uc8fc\ubb38 \ub370\uc774\ud130 \uc870\ud68c\n    orders_df = mysql.query_to_dataframe("SELECT * FROM orders")\n\n    # \ub370\uc774\ud130 \uacb0\ud569\n    merged_df = pd.merge(\n        users_df,\n        orders_df,\n        left_on=\'user_id\',\n        right_on=\'user_id\',\n        how=\'inner\'\n    )\n\n    return merged_df\n'})}),"\n",(0,r.jsx)(n.h2,{id:"46-api-resources",children:"4.6 API Resources"}),"\n",(0,r.jsx)(n.p,{children:"\uc678\ubd80 API\uc640 \uc0c1\ud638\uc791\uc6a9\ud558\ub294 resources\ub97c \uc815\uc758\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"rest-api-resource",children:"REST API Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import Dict, Any, Optional\nimport requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\nclass RESTAPIResource(ConfigurableResource):\n    """REST API \ud074\ub77c\uc774\uc5b8\ud2b8 resource"""\n    base_url: str\n    api_key: Optional[str] = None\n    timeout: int = 30\n    max_retries: int = 3\n\n    def setup_for_execution(self, context) -> None:\n        """HTTP \uc138\uc158 \ucd08\uae30\ud654"""\n        self._session = requests.Session()\n\n        # \uc7ac\uc2dc\ub3c4 \uc804\ub7b5 \uc124\uc815\n        retry_strategy = Retry(\n            total=self.max_retries,\n            backoff_factor=1,\n            status_forcelist=[429, 500, 502, 503, 504],\n            allowed_methods=["HEAD", "GET", "OPTIONS", "POST"]\n        )\n        adapter = HTTPAdapter(max_retries=retry_strategy)\n        self._session.mount("http://", adapter)\n        self._session.mount("https://", adapter)\n\n        # \uae30\ubcf8 \ud5e4\ub354 \uc124\uc815\n        if self.api_key:\n            self._session.headers.update({\n                "Authorization": f"Bearer {self.api_key}"\n            })\n        self._session.headers.update({\n            "Content-Type": "application/json"\n        })\n\n        context.log.info(f"API client initialized: {self.base_url}")\n\n    def get(self, endpoint: str, params: Dict = None) -> Dict[str, Any]:\n        """GET \uc694\uccad"""\n        url = f"{self.base_url}/{endpoint}"\n        response = self._session.get(url, params=params, timeout=self.timeout)\n        response.raise_for_status()\n        return response.json()\n\n    def post(self, endpoint: str, data: Dict = None) -> Dict[str, Any]:\n        """POST \uc694\uccad"""\n        url = f"{self.base_url}/{endpoint}"\n        response = self._session.post(url, json=data, timeout=self.timeout)\n        response.raise_for_status()\n        return response.json()\n\n    def put(self, endpoint: str, data: Dict = None) -> Dict[str, Any]:\n        """PUT \uc694\uccad"""\n        url = f"{self.base_url}/{endpoint}"\n        response = self._session.put(url, json=data, timeout=self.timeout)\n        response.raise_for_status()\n        return response.json()\n\n    def delete(self, endpoint: str) -> None:\n        """DELETE \uc694\uccad"""\n        url = f"{self.base_url}/{endpoint}"\n        response = self._session.delete(url, timeout=self.timeout)\n        response.raise_for_status()\n\n    def get_paginated(self, endpoint: str, page_size: int = 100) -> list:\n        """\ud398\uc774\uc9c0\ub124\uc774\uc158\ub41c \uacb0\uacfc \uc870\ud68c"""\n        all_results = []\n        page = 1\n\n        while True:\n            params = {"page": page, "page_size": page_size}\n            response = self.get(endpoint, params=params)\n\n            results = response.get("results", [])\n            all_results.extend(results)\n\n            if not response.get("next"):\n                break\n\n            page += 1\n\n        return all_results\n\n    def teardown_after_execution(self, context) -> None:\n        """\uc138\uc158 \uc885\ub8cc"""\n        self._session.close()\n        context.log.info("API session closed")\n\n@asset\ndef github_repositories(api: RESTAPIResource) -> list:\n    """GitHub API\uc5d0\uc11c \uc800\uc7a5\uc18c \ubaa9\ub85d \uc870\ud68c"""\n    return api.get("user/repos", params={"type": "owner", "sort": "updated"})\n\n@asset\ndef create_github_issue(api: RESTAPIResource) -> Dict[str, Any]:\n    """GitHub \uc774\uc288 \uc0dd\uc131"""\n    data = {\n        "title": "Automated issue from Dagster",\n        "body": "This issue was created by a Dagster asset",\n        "labels": ["automation"]\n    }\n    return api.post("repos/owner/repo/issues", data=data)\n\ndefs = Definitions(\n    assets=[github_repositories, create_github_issue],\n    resources={\n        "api": RESTAPIResource(\n            base_url="https://api.github.com",\n            api_key="github_token_here"\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"graphql-api-resource",children:"GraphQL API Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import Dict, Any, Optional\nimport requests\n\nclass GraphQLResource(ConfigurableResource):\n    """GraphQL API \ud074\ub77c\uc774\uc5b8\ud2b8 resource"""\n    endpoint: str\n    api_key: Optional[str] = None\n    timeout: int = 30\n\n    def setup_for_execution(self, context) -> None:\n        """\uc138\uc158 \ucd08\uae30\ud654"""\n        self._session = requests.Session()\n\n        if self.api_key:\n            self._session.headers.update({\n                "Authorization": f"Bearer {self.api_key}"\n            })\n\n        context.log.info(f"GraphQL client initialized: {self.endpoint}")\n\n    def query(self, query: str, variables: Dict = None) -> Dict[str, Any]:\n        """GraphQL \ucffc\ub9ac \uc2e4\ud589"""\n        payload = {"query": query}\n        if variables:\n            payload["variables"] = variables\n\n        response = self._session.post(\n            self.endpoint,\n            json=payload,\n            timeout=self.timeout\n        )\n        response.raise_for_status()\n\n        result = response.json()\n\n        if "errors" in result:\n            raise Exception(f"GraphQL errors: {result[\'errors\']}")\n\n        return result.get("data", {})\n\n    def mutation(self, mutation: str, variables: Dict = None) -> Dict[str, Any]:\n        """GraphQL \ubba4\ud14c\uc774\uc158 \uc2e4\ud589"""\n        return self.query(mutation, variables)\n\n    def teardown_after_execution(self, context) -> None:\n        """\uc138\uc158 \uc885\ub8cc"""\n        self._session.close()\n\n@asset\ndef github_user_data(graphql: GraphQLResource) -> Dict[str, Any]:\n    """GitHub GraphQL API\ub85c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc870\ud68c"""\n    query = """\n    query {\n        viewer {\n            login\n            name\n            email\n            repositories(first: 10, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                nodes {\n                    name\n                    description\n                    stargazerCount\n                    forkCount\n                }\n            }\n        }\n    }\n    """\n    return graphql.query(query)\n\n@asset\ndef create_github_repository(graphql: GraphQLResource) -> Dict[str, Any]:\n    """GitHub GraphQL API\ub85c \uc800\uc7a5\uc18c \uc0dd\uc131"""\n    mutation = """\n    mutation CreateRepository($name: String!, $description: String!) {\n        createRepository(input: {\n            name: $name,\n            description: $description,\n            visibility: PRIVATE\n        }) {\n            repository {\n                id\n                name\n                url\n            }\n        }\n    }\n    """\n    variables = {\n        "name": "new-repo",\n        "description": "Created from Dagster"\n    }\n    return graphql.mutation(mutation, variables)\n\ndefs = Definitions(\n    assets=[github_user_data, create_github_repository],\n    resources={\n        "graphql": GraphQLResource(\n            endpoint="https://api.github.com/graphql",\n            api_key="github_token_here"\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sdk-\uae30\ubc18-api-resource",children:"SDK \uae30\ubc18 API Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import List, Dict, Any\nimport stripe\nimport tweepy\n\nclass StripeResource(ConfigurableResource):\n    """Stripe API resource"""\n    api_key: str\n\n    def setup_for_execution(self, context) -> None:\n        """Stripe \ucd08\uae30\ud654"""\n        stripe.api_key = self.api_key\n        context.log.info("Stripe API initialized")\n\n    def get_customers(self, limit: int = 100) -> List[Dict[str, Any]]:\n        """\uace0\uac1d \ubaa9\ub85d \uc870\ud68c"""\n        customers = stripe.Customer.list(limit=limit)\n        return [customer.to_dict() for customer in customers.data]\n\n    def get_charges(self, limit: int = 100) -> List[Dict[str, Any]]:\n        """\uacb0\uc81c \ub0b4\uc5ed \uc870\ud68c"""\n        charges = stripe.Charge.list(limit=limit)\n        return [charge.to_dict() for charge in charges.data]\n\n    def create_customer(self, email: str, name: str) -> Dict[str, Any]:\n        """\uace0\uac1d \uc0dd\uc131"""\n        customer = stripe.Customer.create(email=email, name=name)\n        return customer.to_dict()\n\nclass TwitterResource(ConfigurableResource):\n    """Twitter API resource"""\n    api_key: str\n    api_secret: str\n    access_token: str\n    access_token_secret: str\n\n    def setup_for_execution(self, context) -> None:\n        """Twitter API \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd08\uae30\ud654"""\n        auth = tweepy.OAuthHandler(self.api_key, self.api_secret)\n        auth.set_access_token(self.access_token, self.access_token_secret)\n        self._client = tweepy.API(auth)\n        context.log.info("Twitter API initialized")\n\n    def get_user_timeline(self, username: str, count: int = 100) -> List[Dict]:\n        """\uc0ac\uc6a9\uc790 \ud0c0\uc784\ub77c\uc778 \uc870\ud68c"""\n        tweets = self._client.user_timeline(\n            screen_name=username,\n            count=count,\n            tweet_mode=\'extended\'\n        )\n        return [tweet._json for tweet in tweets]\n\n    def post_tweet(self, text: str) -> Dict[str, Any]:\n        """\ud2b8\uc717 \uac8c\uc2dc"""\n        tweet = self._client.update_status(text)\n        return tweet._json\n\n    def search_tweets(self, query: str, count: int = 100) -> List[Dict]:\n        """\ud2b8\uc717 \uac80\uc0c9"""\n        tweets = self._client.search_tweets(q=query, count=count, tweet_mode=\'extended\')\n        return [tweet._json for tweet in tweets]\n\n@asset\ndef stripe_customers(stripe_api: StripeResource) -> pd.DataFrame:\n    """Stripe \uace0\uac1d \ub370\uc774\ud130 \uc870\ud68c"""\n    customers = stripe_api.get_customers(limit=1000)\n    return pd.DataFrame(customers)\n\n@asset\ndef twitter_mentions(twitter_api: TwitterResource) -> pd.DataFrame:\n    """Twitter \uba58\uc158 \uc870\ud68c"""\n    mentions = twitter_api.get_user_timeline("mycompany", count=200)\n    return pd.DataFrame(mentions)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"47-cloud-resources-s3-bigquery",children:"4.7 Cloud Resources (S3, BigQuery)"}),"\n",(0,r.jsx)(n.p,{children:"\ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4\uc640 \ud1b5\ud569\ud558\ub294 resources\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"aws-s3-resource",children:"AWS S3 Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import Optional, List, BinaryIO\nimport boto3\nfrom botocore.exceptions import ClientError\nimport io\nimport pandas as pd\n\nclass S3Resource(ConfigurableResource):\n    """AWS S3 resource"""\n    aws_access_key_id: Optional[str] = None\n    aws_secret_access_key: Optional[str] = None\n    region_name: str = "us-east-1"\n    bucket_name: str\n\n    def setup_for_execution(self, context) -> None:\n        """S3 \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd08\uae30\ud654"""\n        session_kwargs = {"region_name": self.region_name}\n\n        if self.aws_access_key_id and self.aws_secret_access_key:\n            session_kwargs.update({\n                "aws_access_key_id": self.aws_access_key_id,\n                "aws_secret_access_key": self.aws_secret_access_key\n            })\n\n        self._s3_client = boto3.client(\'s3\', **session_kwargs)\n        self._s3_resource = boto3.resource(\'s3\', **session_kwargs)\n\n        context.log.info(f"S3 client initialized for bucket: {self.bucket_name}")\n\n    def upload_file(self, file_path: str, s3_key: str) -> None:\n        """\ud30c\uc77c \uc5c5\ub85c\ub4dc"""\n        self._s3_client.upload_file(file_path, self.bucket_name, s3_key)\n\n    def upload_fileobj(self, file_obj: BinaryIO, s3_key: str) -> None:\n        """\ud30c\uc77c \uac1d\uccb4 \uc5c5\ub85c\ub4dc"""\n        self._s3_client.upload_fileobj(file_obj, self.bucket_name, s3_key)\n\n    def download_file(self, s3_key: str, file_path: str) -> None:\n        """\ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc"""\n        self._s3_client.download_file(self.bucket_name, s3_key, file_path)\n\n    def download_fileobj(self, s3_key: str) -> bytes:\n        """\ud30c\uc77c \uac1d\uccb4\ub85c \ub2e4\uc6b4\ub85c\ub4dc"""\n        buffer = io.BytesIO()\n        self._s3_client.download_fileobj(self.bucket_name, s3_key, buffer)\n        buffer.seek(0)\n        return buffer.read()\n\n    def read_csv(self, s3_key: str) -> pd.DataFrame:\n        """S3\uc5d0\uc11c CSV \uc77d\uae30"""\n        obj = self._s3_client.get_object(Bucket=self.bucket_name, Key=s3_key)\n        return pd.read_csv(io.BytesIO(obj[\'Body\'].read()))\n\n    def write_csv(self, df: pd.DataFrame, s3_key: str) -> None:\n        """DataFrame\uc744 S3\uc5d0 CSV\ub85c \uc800\uc7a5"""\n        csv_buffer = io.StringIO()\n        df.to_csv(csv_buffer, index=False)\n        self._s3_client.put_object(\n            Bucket=self.bucket_name,\n            Key=s3_key,\n            Body=csv_buffer.getvalue()\n        )\n\n    def read_parquet(self, s3_key: str) -> pd.DataFrame:\n        """S3\uc5d0\uc11c Parquet \uc77d\uae30"""\n        obj = self._s3_client.get_object(Bucket=self.bucket_name, Key=s3_key)\n        return pd.read_parquet(io.BytesIO(obj[\'Body\'].read()))\n\n    def write_parquet(self, df: pd.DataFrame, s3_key: str) -> None:\n        """DataFrame\uc744 S3\uc5d0 Parquet\ub85c \uc800\uc7a5"""\n        parquet_buffer = io.BytesIO()\n        df.to_parquet(parquet_buffer, index=False)\n        parquet_buffer.seek(0)\n        self._s3_client.put_object(\n            Bucket=self.bucket_name,\n            Key=s3_key,\n            Body=parquet_buffer.getvalue()\n        )\n\n    def list_objects(self, prefix: str = "") -> List[str]:\n        """\ubc84\ud0b7\uc758 \uac1d\uccb4 \ubaa9\ub85d \uc870\ud68c"""\n        response = self._s3_client.list_objects_v2(\n            Bucket=self.bucket_name,\n            Prefix=prefix\n        )\n        return [obj[\'Key\'] for obj in response.get(\'Contents\', [])]\n\n    def delete_object(self, s3_key: str) -> None:\n        """\uac1d\uccb4 \uc0ad\uc81c"""\n        self._s3_client.delete_object(Bucket=self.bucket_name, Key=s3_key)\n\n    def object_exists(self, s3_key: str) -> bool:\n        """\uac1d\uccb4 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778"""\n        try:\n            self._s3_client.head_object(Bucket=self.bucket_name, Key=s3_key)\n            return True\n        except ClientError:\n            return False\n\n@asset\ndef daily_sales_to_s3(s3: S3Resource, sales_data: pd.DataFrame) -> None:\n    """\ud310\ub9e4 \ub370\uc774\ud130\ub97c S3\uc5d0 \uc800\uc7a5"""\n    from datetime import datetime\n\n    date_str = datetime.now().strftime("%Y-%m-%d")\n    s3_key = f"sales/daily/{date_str}.parquet"\n\n    s3.write_parquet(sales_data, s3_key)\n\n@asset\ndef aggregated_sales_from_s3(s3: S3Resource) -> pd.DataFrame:\n    """S3\uc5d0\uc11c \uc5ec\ub7ec \ud310\ub9e4 \ub370\uc774\ud130 \ud30c\uc77c\uc744 \uc77d\uc5b4 \uc9d1\uacc4"""\n    # \ubaa8\ub4e0 \ud310\ub9e4 \ud30c\uc77c \ubaa9\ub85d \uc870\ud68c\n    file_keys = s3.list_objects(prefix="sales/daily/")\n\n    # \ubaa8\ub4e0 \ud30c\uc77c \uc77d\uc5b4\uc11c \uacb0\ud569\n    dfs = []\n    for key in file_keys:\n        df = s3.read_parquet(key)\n        dfs.append(df)\n\n    combined_df = pd.concat(dfs, ignore_index=True)\n\n    # \uc9d1\uacc4\n    aggregated = combined_df.groupby(\'product_id\').agg({\n        \'quantity\': \'sum\',\n        \'revenue\': \'sum\'\n    }).reset_index()\n\n    # \uc9d1\uacc4 \uacb0\uacfc \uc800\uc7a5\n    s3.write_csv(aggregated, "sales/aggregated/total.csv")\n\n    return aggregated\n\ndefs = Definitions(\n    assets=[daily_sales_to_s3, aggregated_sales_from_s3],\n    resources={\n        "s3": S3Resource(\n            aws_access_key_id="YOUR_ACCESS_KEY",\n            aws_secret_access_key="YOUR_SECRET_KEY",\n            region_name="us-west-2",\n            bucket_name="my-data-bucket"\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"google-cloud-storage-resource",children:"Google Cloud Storage Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import Optional, List\nfrom google.cloud import storage\nfrom google.oauth2 import service_account\nimport pandas as pd\nimport io\n\nclass GCSResource(ConfigurableResource):\n    """Google Cloud Storage resource"""\n    bucket_name: str\n    credentials_path: Optional[str] = None\n    project_id: Optional[str] = None\n\n    def setup_for_execution(self, context) -> None:\n        """GCS \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd08\uae30\ud654"""\n        if self.credentials_path:\n            credentials = service_account.Credentials.from_service_account_file(\n                self.credentials_path\n            )\n            self._client = storage.Client(\n                credentials=credentials,\n                project=self.project_id\n            )\n        else:\n            # \uae30\ubcf8 \uc778\uc99d \uc0ac\uc6a9\n            self._client = storage.Client(project=self.project_id)\n\n        self._bucket = self._client.bucket(self.bucket_name)\n        context.log.info(f"GCS client initialized for bucket: {self.bucket_name}")\n\n    def upload_file(self, file_path: str, blob_name: str) -> None:\n        """\ud30c\uc77c \uc5c5\ub85c\ub4dc"""\n        blob = self._bucket.blob(blob_name)\n        blob.upload_from_filename(file_path)\n\n    def upload_from_string(self, content: str, blob_name: str) -> None:\n        """\ubb38\uc790\uc5f4 \uc5c5\ub85c\ub4dc"""\n        blob = self._bucket.blob(blob_name)\n        blob.upload_from_string(content)\n\n    def download_file(self, blob_name: str, file_path: str) -> None:\n        """\ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc"""\n        blob = self._bucket.blob(blob_name)\n        blob.download_to_filename(file_path)\n\n    def download_as_bytes(self, blob_name: str) -> bytes:\n        """\ubc14\uc774\ud2b8\ub85c \ub2e4\uc6b4\ub85c\ub4dc"""\n        blob = self._bucket.blob(blob_name)\n        return blob.download_as_bytes()\n\n    def download_as_string(self, blob_name: str) -> str:\n        """\ubb38\uc790\uc5f4\ub85c \ub2e4\uc6b4\ub85c\ub4dc"""\n        blob = self._bucket.blob(blob_name)\n        return blob.download_as_text()\n\n    def read_csv(self, blob_name: str) -> pd.DataFrame:\n        """CSV \uc77d\uae30"""\n        content = self.download_as_bytes(blob_name)\n        return pd.read_csv(io.BytesIO(content))\n\n    def write_csv(self, df: pd.DataFrame, blob_name: str) -> None:\n        """DataFrame\uc744 CSV\ub85c \uc800\uc7a5"""\n        csv_string = df.to_csv(index=False)\n        self.upload_from_string(csv_string, blob_name)\n\n    def read_parquet(self, blob_name: str) -> pd.DataFrame:\n        """Parquet \uc77d\uae30"""\n        content = self.download_as_bytes(blob_name)\n        return pd.read_parquet(io.BytesIO(content))\n\n    def write_parquet(self, df: pd.DataFrame, blob_name: str) -> None:\n        """DataFrame\uc744 Parquet\ub85c \uc800\uc7a5"""\n        parquet_buffer = io.BytesIO()\n        df.to_parquet(parquet_buffer, index=False)\n        parquet_buffer.seek(0)\n\n        blob = self._bucket.blob(blob_name)\n        blob.upload_from_file(parquet_buffer)\n\n    def list_blobs(self, prefix: str = "") -> List[str]:\n        """\ube14\ub86d \ubaa9\ub85d \uc870\ud68c"""\n        blobs = self._client.list_blobs(self.bucket_name, prefix=prefix)\n        return [blob.name for blob in blobs]\n\n    def delete_blob(self, blob_name: str) -> None:\n        """\ube14\ub86d \uc0ad\uc81c"""\n        blob = self._bucket.blob(blob_name)\n        blob.delete()\n\n    def blob_exists(self, blob_name: str) -> bool:\n        """\ube14\ub86d \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778"""\n        blob = self._bucket.blob(blob_name)\n        return blob.exists()\n\n@asset\ndef export_to_gcs(gcs: GCSResource, data: pd.DataFrame) -> None:\n    """\ub370\uc774\ud130\ub97c GCS\uc5d0 \ub0b4\ubcf4\ub0b4\uae30"""\n    gcs.write_parquet(data, "exports/data.parquet")\n\n@asset\ndef import_from_gcs(gcs: GCSResource) -> pd.DataFrame:\n    """GCS\uc5d0\uc11c \ub370\uc774\ud130 \uac00\uc838\uc624\uae30"""\n    return gcs.read_parquet("exports/data.parquet")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"google-bigquery-resource",children:"Google BigQuery Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset\nfrom typing import Optional, Dict, Any\nfrom google.cloud import bigquery\nfrom google.oauth2 import service_account\nimport pandas as pd\n\nclass BigQueryResource(ConfigurableResource):\n    """Google BigQuery resource"""\n    project_id: str\n    credentials_path: Optional[str] = None\n    dataset_id: Optional[str] = None\n    location: str = "US"\n\n    def setup_for_execution(self, context) -> None:\n        """BigQuery \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd08\uae30\ud654"""\n        if self.credentials_path:\n            credentials = service_account.Credentials.from_service_account_file(\n                self.credentials_path\n            )\n            self._client = bigquery.Client(\n                credentials=credentials,\n                project=self.project_id,\n                location=self.location\n            )\n        else:\n            self._client = bigquery.Client(\n                project=self.project_id,\n                location=self.location\n            )\n\n        context.log.info(f"BigQuery client initialized for project: {self.project_id}")\n\n    def query_to_dataframe(self, query: str) -> pd.DataFrame:\n        """\ucffc\ub9ac \uc2e4\ud589 \ubc0f DataFrame \ubc18\ud658"""\n        query_job = self._client.query(query)\n        return query_job.to_dataframe()\n\n    def execute_query(self, query: str) -> bigquery.QueryJob:\n        """\ucffc\ub9ac \uc2e4\ud589"""\n        return self._client.query(query)\n\n    def load_dataframe(self, df: pd.DataFrame, table_id: str,\n                       write_disposition: str = "WRITE_APPEND") -> None:\n        """DataFrame\uc744 BigQuery \ud14c\uc774\ube14\uc5d0 \ub85c\ub4dc"""\n        if self.dataset_id:\n            full_table_id = f"{self.project_id}.{self.dataset_id}.{table_id}"\n        else:\n            full_table_id = table_id\n\n        job_config = bigquery.LoadJobConfig(\n            write_disposition=write_disposition,\n        )\n\n        job = self._client.load_table_from_dataframe(\n            df, full_table_id, job_config=job_config\n        )\n        job.result()  # \uc644\ub8cc \ub300\uae30\n\n    def create_table(self, table_id: str, schema: list) -> None:\n        """\ud14c\uc774\ube14 \uc0dd\uc131"""\n        if self.dataset_id:\n            full_table_id = f"{self.project_id}.{self.dataset_id}.{table_id}"\n        else:\n            full_table_id = table_id\n\n        table = bigquery.Table(full_table_id, schema=schema)\n        self._client.create_table(table)\n\n    def delete_table(self, table_id: str) -> None:\n        """\ud14c\uc774\ube14 \uc0ad\uc81c"""\n        if self.dataset_id:\n            full_table_id = f"{self.project_id}.{self.dataset_id}.{table_id}"\n        else:\n            full_table_id = table_id\n\n        self._client.delete_table(full_table_id)\n\n    def table_exists(self, table_id: str) -> bool:\n        """\ud14c\uc774\ube14 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778"""\n        if self.dataset_id:\n            full_table_id = f"{self.project_id}.{self.dataset_id}.{table_id}"\n        else:\n            full_table_id = table_id\n\n        try:\n            self._client.get_table(full_table_id)\n            return True\n        except Exception:\n            return False\n\n    def get_table_schema(self, table_id: str) -> list:\n        """\ud14c\uc774\ube14 \uc2a4\ud0a4\ub9c8 \uc870\ud68c"""\n        if self.dataset_id:\n            full_table_id = f"{self.project_id}.{self.dataset_id}.{table_id}"\n        else:\n            full_table_id = table_id\n\n        table = self._client.get_table(full_table_id)\n        return table.schema\n\n    def copy_table(self, source_table_id: str, destination_table_id: str) -> None:\n        """\ud14c\uc774\ube14 \ubcf5\uc0ac"""\n        if self.dataset_id:\n            source_id = f"{self.project_id}.{self.dataset_id}.{source_table_id}"\n            dest_id = f"{self.project_id}.{self.dataset_id}.{destination_table_id}"\n        else:\n            source_id = source_table_id\n            dest_id = destination_table_id\n\n        job = self._client.copy_table(source_id, dest_id)\n        job.result()\n\n@asset\ndef user_analytics_from_bigquery(bigquery: BigQueryResource) -> pd.DataFrame:\n    """BigQuery\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ubd84\uc11d \ub370\uc774\ud130 \uc870\ud68c"""\n    query = """\n        SELECT\n            user_id,\n            COUNT(*) as event_count,\n            SUM(revenue) as total_revenue,\n            MAX(timestamp) as last_activity\n        FROM `project.dataset.user_events`\n        WHERE DATE(timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)\n        GROUP BY user_id\n        HAVING event_count > 10\n        ORDER BY total_revenue DESC\n        LIMIT 1000\n    """\n    return bigquery.query_to_dataframe(query)\n\n@asset\ndef save_analytics_to_bigquery(\n    bigquery: BigQueryResource,\n    user_analytics_from_bigquery: pd.DataFrame\n) -> None:\n    """\ubd84\uc11d \uacb0\uacfc\ub97c BigQuery\uc5d0 \uc800\uc7a5"""\n    # \ud14c\uc774\ube14\uc774 \uc5c6\uc73c\uba74 \uc0dd\uc131\n    if not bigquery.table_exists("user_analytics_summary"):\n        schema = [\n            bigquery.SchemaField("user_id", "STRING"),\n            bigquery.SchemaField("event_count", "INTEGER"),\n            bigquery.SchemaField("total_revenue", "FLOAT"),\n            bigquery.SchemaField("last_activity", "TIMESTAMP"),\n        ]\n        bigquery.create_table("user_analytics_summary", schema)\n\n    # \ub370\uc774\ud130 \ub85c\ub4dc (\uae30\uc874 \ub370\uc774\ud130 \ub36e\uc5b4\uc4f0\uae30)\n    bigquery.load_dataframe(\n        user_analytics_from_bigquery,\n        "user_analytics_summary",\n        write_disposition="WRITE_TRUNCATE"\n    )\n\n@asset\ndef cross_platform_analytics(\n    bigquery: BigQueryResource,\n    s3: S3Resource\n) -> pd.DataFrame:\n    """BigQuery\uc640 S3 \ub370\uc774\ud130 \uacb0\ud569"""\n    # BigQuery\uc5d0\uc11c \ub370\uc774\ud130 \uc870\ud68c\n    bq_data = bigquery.query_to_dataframe("""\n        SELECT user_id, platform, session_count\n        FROM `project.dataset.user_sessions`\n    """)\n\n    # S3\uc5d0\uc11c \ub370\uc774\ud130 \uc870\ud68c\n    s3_data = s3.read_csv("user_data/demographics.csv")\n\n    # \ub370\uc774\ud130 \uacb0\ud569\n    merged = pd.merge(bq_data, s3_data, on=\'user_id\', how=\'inner\')\n\n    # \uacb0\uacfc\ub97c \ub2e4\uc2dc BigQuery\uc5d0 \uc800\uc7a5\n    bigquery.load_dataframe(merged, "cross_platform_analytics")\n\n    return merged\n\ndefs = Definitions(\n    assets=[\n        user_analytics_from_bigquery,\n        save_analytics_to_bigquery,\n        cross_platform_analytics\n    ],\n    resources={\n        "bigquery": BigQueryResource(\n            project_id="my-project",\n            credentials_path="/path/to/credentials.json",\n            dataset_id="analytics"\n        ),\n        "s3": S3Resource(\n            bucket_name="my-bucket",\n            region_name="us-west-2"\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"48-\ud658\uacbd\ubcc4-resources",children:"4.8 \ud658\uacbd\ubcc4 Resources"}),"\n",(0,r.jsx)(n.p,{children:"\uac1c\ubc1c, \uc2a4\ud14c\uc774\uc9d5, \ud504\ub85c\ub355\uc158 \ub4f1 \ud658\uacbd\ubcc4\ub85c \ub2e4\ub978 resource \uc124\uc815\uc744 \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"\ud658\uacbd\ubcc4-\uc124\uc815-\ud30c\uc77c",children:"\ud658\uacbd\ubcc4 \uc124\uc815 \ud30c\uc77c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# config/dev.py\nfrom dagster import Definitions\nfrom resources import DatabaseConfig, S3Resource, APIResource\n\ndev_resources = {\n    "database": DatabaseConfig(\n        host="localhost",\n        port=5432,\n        database="dev_db",\n        username="dev_user",\n        password="dev_password"\n    ),\n    "s3": S3Resource(\n        bucket_name="dev-data-bucket",\n        region_name="us-west-2"\n    ),\n    "api": APIResource(\n        base_url="https://dev-api.example.com",\n        api_key="dev_api_key"\n    )\n}\n\n# config/staging.py\nstaging_resources = {\n    "database": DatabaseConfig(\n        host="staging-db.example.com",\n        port=5432,\n        database="staging_db",\n        username="staging_user",\n        password="staging_password"\n    ),\n    "s3": S3Resource(\n        bucket_name="staging-data-bucket",\n        region_name="us-west-2"\n    ),\n    "api": APIResource(\n        base_url="https://staging-api.example.com",\n        api_key="staging_api_key"\n    )\n}\n\n# config/prod.py\nfrom dagster import EnvVar\n\nprod_resources = {\n    "database": DatabaseConfig(\n        host=EnvVar("PROD_DB_HOST"),\n        port=5432,\n        database=EnvVar("PROD_DB_NAME"),\n        username=EnvVar("PROD_DB_USER"),\n        password=EnvVar("PROD_DB_PASSWORD")\n    ),\n    "s3": S3Resource(\n        bucket_name=EnvVar("PROD_S3_BUCKET"),\n        region_name="us-west-2",\n        aws_access_key_id=EnvVar("AWS_ACCESS_KEY_ID"),\n        aws_secret_access_key=EnvVar("AWS_SECRET_ACCESS_KEY")\n    ),\n    "api": APIResource(\n        base_url="https://api.example.com",\n        api_key=EnvVar("PROD_API_KEY")\n    )\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ud658\uacbd-\uc120\ud0dd-\ub85c\uc9c1",children:"\ud658\uacbd \uc120\ud0dd \ub85c\uc9c1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# definitions.py\nfrom dagster import Definitions\nimport os\nfrom config.dev import dev_resources\nfrom config.staging import staging_resources\nfrom config.prod import prod_resources\nfrom assets import all_assets\n\ndef get_resources_for_environment():\n    """\ud658\uacbd\uc5d0 \ub530\ub77c \uc801\uc808\ud55c resources \ubc18\ud658"""\n    env = os.getenv("DAGSTER_ENV", "dev")\n\n    if env == "prod":\n        return prod_resources\n    elif env == "staging":\n        return staging_resources\n    else:\n        return dev_resources\n\ndefs = Definitions(\n    assets=all_assets,\n    resources=get_resources_for_environment()\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ud658\uacbd\ubcc4-resource-\ud329\ud1a0\ub9ac",children:"\ud658\uacbd\ubcc4 Resource \ud329\ud1a0\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, EnvVar\nfrom typing import Literal\nimport os\n\nclass EnvironmentAwareDatabaseConfig(ConfigurableResource):\n    """\ud658\uacbd\uc744 \uc778\uc2dd\ud558\ub294 database resource"""\n    environment: Literal["dev", "staging", "prod"] = "dev"\n\n    def _get_config(self):\n        """\ud658\uacbd\uc5d0 \ub530\ub978 \uc124\uc815 \ubc18\ud658"""\n        configs = {\n            "dev": {\n                "host": "localhost",\n                "port": 5432,\n                "database": "dev_db",\n                "user": "dev_user",\n                "password": "dev_password"\n            },\n            "staging": {\n                "host": "staging-db.example.com",\n                "port": 5432,\n                "database": "staging_db",\n                "user": "staging_user",\n                "password": "staging_password"\n            },\n            "prod": {\n                "host": os.getenv("PROD_DB_HOST"),\n                "port": 5432,\n                "database": os.getenv("PROD_DB_NAME"),\n                "user": os.getenv("PROD_DB_USER"),\n                "password": os.getenv("PROD_DB_PASSWORD")\n            }\n        }\n        return configs[self.environment]\n\n    def get_connection(self):\n        """\ud658\uacbd\uc5d0 \ub9de\ub294 \uc5f0\uacb0 \ubc18\ud658"""\n        config = self._get_config()\n        import psycopg2\n        return psycopg2.connect(**config)\n\n# \uc0ac\uc6a9\ndefs = Definitions(\n    assets=all_assets,\n    resources={\n        "database": EnvironmentAwareDatabaseConfig(\n            environment=os.getenv("DAGSTER_ENV", "dev")\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-\uc624\ubc84\ub77c\uc774\ub4dc",children:"Resource \uc624\ubc84\ub77c\uc774\ub4dc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import Definitions, asset\n\n@asset\ndef my_data(database: DatabaseConfig):\n    return database.execute_query("SELECT * FROM users")\n\n# \uae30\ubcf8 \uc815\uc758\nbase_defs = Definitions(\n    assets=[my_data],\n    resources={\n        "database": DatabaseConfig(\n            host="localhost",\n            database="dev_db",\n            username="user",\n            password="password"\n        )\n    }\n)\n\n# \ud14c\uc2a4\ud2b8\uc6a9 \uc624\ubc84\ub77c\uc774\ub4dc\nclass MockDatabaseConfig(ConfigurableResource):\n    def execute_query(self, query: str):\n        return [{"id": 1, "name": "Test User"}]\n\ntest_defs = Definitions(\n    assets=[my_data],\n    resources={\n        "database": MockDatabaseConfig()\n    }\n)\n\n# \ud504\ub85c\ub355\uc158\uc6a9 \uc624\ubc84\ub77c\uc774\ub4dc\nprod_defs = Definitions(\n    assets=[my_data],\n    resources={\n        "database": DatabaseConfig(\n            host=EnvVar("PROD_DB_HOST"),\n            database=EnvVar("PROD_DB_NAME"),\n            username=EnvVar("PROD_DB_USER"),\n            password=EnvVar("PROD_DB_PASSWORD")\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc870\uac74\ubd80-resource-\ub85c\ub529",children:"\uc870\uac74\ubd80 Resource \ub85c\ub529"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import Definitions, ConfigurableResource\nimport os\n\nclass ConditionalStorageResource(ConfigurableResource):\n    """\uc870\uac74\ubd80\ub85c \ub85c\uceec \ub610\ub294 \ud074\ub77c\uc6b0\ub4dc \uc2a4\ud1a0\ub9ac\uc9c0 \uc0ac\uc6a9"""\n    use_cloud: bool = False\n    local_path: str = "/tmp/data"\n    s3_bucket: str = ""\n\n    def save_data(self, key: str, data: bytes):\n        if self.use_cloud:\n            # S3\uc5d0 \uc800\uc7a5\n            import boto3\n            s3 = boto3.client(\'s3\')\n            s3.put_object(Bucket=self.s3_bucket, Key=key, Body=data)\n        else:\n            # \ub85c\uceec\uc5d0 \uc800\uc7a5\n            import os\n            filepath = os.path.join(self.local_path, key)\n            os.makedirs(os.path.dirname(filepath), exist_ok=True)\n            with open(filepath, \'wb\') as f:\n                f.write(data)\n\n    def load_data(self, key: str) -> bytes:\n        if self.use_cloud:\n            # S3\uc5d0\uc11c \ub85c\ub4dc\n            import boto3\n            s3 = boto3.client(\'s3\')\n            obj = s3.get_object(Bucket=self.s3_bucket, Key=key)\n            return obj[\'Body\'].read()\n        else:\n            # \ub85c\uceec\uc5d0\uc11c \ub85c\ub4dc\n            import os\n            filepath = os.path.join(self.local_path, key)\n            with open(filepath, \'rb\') as f:\n                return f.read()\n\n# \ud658\uacbd\uc5d0 \ub530\ub77c \ub2e4\ub978 \uc124\uc815\nis_production = os.getenv("DAGSTER_ENV") == "prod"\n\ndefs = Definitions(\n    assets=all_assets,\n    resources={\n        "storage": ConditionalStorageResource(\n            use_cloud=is_production,\n            local_path="/tmp/data" if not is_production else "",\n            s3_bucket="prod-bucket" if is_production else ""\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"49-\uc2e4\uc2b5",children:"4.9 \uc2e4\uc2b5"}),"\n",(0,r.jsx)(n.p,{children:"\uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc885\ud569\uc801\uc778 \uc608\uc81c\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"\uc2e4\uc2b5-1-e-commerce-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778",children:"\uc2e4\uc2b5 1: E-Commerce \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import (\n    asset,\n    Definitions,\n    ConfigurableResource,\n    AssetExecutionContext,\n    EnvVar\n)\nfrom typing import Optional, List, Dict, Any\nimport pandas as pd\nimport psycopg2\nfrom contextlib import contextmanager\nimport boto3\nimport io\nfrom datetime import datetime, timedelta\n\n# Resources \uc815\uc758\n\nclass PostgresDB(ConfigurableResource):\n    """PostgreSQL database resource"""\n    host: str\n    port: int = 5432\n    database: str\n    user: str\n    password: str\n\n    @contextmanager\n    def get_connection(self):\n        conn = psycopg2.connect(\n            host=self.host,\n            port=self.port,\n            database=self.database,\n            user=self.user,\n            password=self.password\n        )\n        try:\n            yield conn\n            conn.commit()\n        except Exception:\n            conn.rollback()\n            raise\n        finally:\n            conn.close()\n\n    def query_to_dataframe(self, query: str) -> pd.DataFrame:\n        with self.get_connection() as conn:\n            return pd.read_sql(query, conn)\n\nclass S3Storage(ConfigurableResource):\n    """S3 storage resource"""\n    bucket_name: str\n    aws_access_key_id: Optional[str] = None\n    aws_secret_access_key: Optional[str] = None\n    region_name: str = "us-east-1"\n\n    def setup_for_execution(self, context) -> None:\n        session_kwargs = {"region_name": self.region_name}\n        if self.aws_access_key_id and self.aws_secret_access_key:\n            session_kwargs.update({\n                "aws_access_key_id": self.aws_access_key_id,\n                "aws_secret_access_key": self.aws_secret_access_key\n            })\n        self._s3_client = boto3.client(\'s3\', **session_kwargs)\n\n    def write_parquet(self, df: pd.DataFrame, key: str) -> None:\n        buffer = io.BytesIO()\n        df.to_parquet(buffer, index=False)\n        buffer.seek(0)\n        self._s3_client.put_object(\n            Bucket=self.bucket_name,\n            Key=key,\n            Body=buffer.getvalue()\n        )\n\n    def read_parquet(self, key: str) -> pd.DataFrame:\n        obj = self._s3_client.get_object(Bucket=self.bucket_name, Key=key)\n        return pd.read_parquet(io.BytesIO(obj[\'Body\'].read()))\n\nclass NotificationService(ConfigurableResource):\n    """\uc54c\ub9bc \uc11c\ube44\uc2a4 resource"""\n    webhook_url: str\n    enabled: bool = True\n\n    def send_notification(self, message: str, level: str = "info") -> None:\n        if not self.enabled:\n            return\n\n        import requests\n        payload = {\n            "text": message,\n            "level": level,\n            "timestamp": datetime.now().isoformat()\n        }\n        try:\n            requests.post(self.webhook_url, json=payload)\n        except Exception as e:\n            print(f"Failed to send notification: {e}")\n\n# Assets \uc815\uc758\n\n@asset\ndef raw_orders(\n    context: AssetExecutionContext,\n    postgres: PostgresDB\n) -> pd.DataFrame:\n    """PostgreSQL\uc5d0\uc11c \uc6d0\uc2dc \uc8fc\ubb38 \ub370\uc774\ud130 \ucd94\ucd9c"""\n    context.log.info("Extracting raw orders from PostgreSQL")\n\n    query = """\n        SELECT\n            order_id,\n            customer_id,\n            order_date,\n            total_amount,\n            status,\n            payment_method\n        FROM orders\n        WHERE order_date >= CURRENT_DATE - INTERVAL \'7 days\'\n    """\n\n    df = postgres.query_to_dataframe(query)\n    context.log.info(f"Extracted {len(df)} orders")\n\n    return df\n\n@asset\ndef raw_order_items(\n    context: AssetExecutionContext,\n    postgres: PostgresDB\n) -> pd.DataFrame:\n    """PostgreSQL\uc5d0\uc11c \uc8fc\ubb38 \ud56d\ubaa9 \ub370\uc774\ud130 \ucd94\ucd9c"""\n    context.log.info("Extracting order items from PostgreSQL")\n\n    query = """\n        SELECT\n            order_item_id,\n            order_id,\n            product_id,\n            quantity,\n            unit_price\n        FROM order_items\n        WHERE order_id IN (\n            SELECT order_id\n            FROM orders\n            WHERE order_date >= CURRENT_DATE - INTERVAL \'7 days\'\n        )\n    """\n\n    df = postgres.query_to_dataframe(query)\n    context.log.info(f"Extracted {len(df)} order items")\n\n    return df\n\n@asset\ndef raw_products(\n    context: AssetExecutionContext,\n    postgres: PostgresDB\n) -> pd.DataFrame:\n    """PostgreSQL\uc5d0\uc11c \uc81c\ud488 \ub370\uc774\ud130 \ucd94\ucd9c"""\n    context.log.info("Extracting products from PostgreSQL")\n\n    query = """\n        SELECT\n            product_id,\n            product_name,\n            category,\n            brand,\n            cost_price,\n            selling_price\n        FROM products\n    """\n\n    return postgres.query_to_dataframe(query)\n\n@asset\ndef enriched_orders(\n    context: AssetExecutionContext,\n    raw_orders: pd.DataFrame,\n    raw_order_items: pd.DataFrame,\n    raw_products: pd.DataFrame,\n    s3: S3Storage\n) -> pd.DataFrame:\n    """\uc8fc\ubb38 \ub370\uc774\ud130\uc5d0 \uc81c\ud488 \uc815\ubcf4 \uacb0\ud569"""\n    context.log.info("Enriching orders with product information")\n\n    # \uc8fc\ubb38 \ud56d\ubaa9\uc5d0 \uc81c\ud488 \uc815\ubcf4 \uc870\uc778\n    items_with_products = raw_order_items.merge(\n        raw_products,\n        on=\'product_id\',\n        how=\'left\'\n    )\n\n    # \uc8fc\ubb38\ubcc4 \uc9d1\uacc4\n    order_summary = items_with_products.groupby(\'order_id\').agg({\n        \'quantity\': \'sum\',\n        \'product_id\': \'count\',\n        \'category\': lambda x: \', \'.join(x.unique())\n    }).reset_index()\n\n    order_summary.columns = [\'order_id\', \'total_items\', \'product_count\', \'categories\']\n\n    # \uc6d0\ubcf8 \uc8fc\ubb38 \ub370\uc774\ud130\uc640 \uacb0\ud569\n    enriched = raw_orders.merge(\n        order_summary,\n        on=\'order_id\',\n        how=\'left\'\n    )\n\n    # S3\uc5d0 \uc800\uc7a5\n    date_str = datetime.now().strftime("%Y-%m-%d")\n    s3_key = f"enriched/orders/{date_str}.parquet"\n    s3.write_parquet(enriched, s3_key)\n    context.log.info(f"Saved enriched orders to S3: {s3_key}")\n\n    return enriched\n\n@asset\ndef sales_metrics(\n    context: AssetExecutionContext,\n    enriched_orders: pd.DataFrame,\n    raw_order_items: pd.DataFrame,\n    raw_products: pd.DataFrame,\n    s3: S3Storage,\n    notification: NotificationService\n) -> Dict[str, Any]:\n    """\ud310\ub9e4 \uc9c0\ud45c \uacc4\uc0b0"""\n    context.log.info("Calculating sales metrics")\n\n    # \uae30\ubcf8 \uc9c0\ud45c\n    total_revenue = enriched_orders[\'total_amount\'].sum()\n    total_orders = len(enriched_orders)\n    avg_order_value = total_revenue / total_orders if total_orders > 0 else 0\n\n    # \uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c\n    items_with_products = raw_order_items.merge(raw_products, on=\'product_id\')\n    category_sales = items_with_products.groupby(\'category\').agg({\n        \'quantity\': \'sum\',\n        \'unit_price\': lambda x: (x * items_with_products.loc[x.index, \'quantity\']).sum()\n    }).reset_index()\n    category_sales.columns = [\'category\', \'total_quantity\', \'total_revenue\']\n\n    # \uc0c1\uc704 \uc81c\ud488\n    top_products = items_with_products.groupby(\'product_name\').agg({\n        \'quantity\': \'sum\',\n        \'unit_price\': lambda x: (x * items_with_products.loc[x.index, \'quantity\']).sum()\n    }).reset_index()\n    top_products = top_products.nlargest(10, \'quantity\')\n\n    metrics = {\n        \'date\': datetime.now().strftime("%Y-%m-%d"),\n        \'total_revenue\': float(total_revenue),\n        \'total_orders\': int(total_orders),\n        \'avg_order_value\': float(avg_order_value),\n        \'category_sales\': category_sales.to_dict(\'records\'),\n        \'top_products\': top_products.to_dict(\'records\')\n    }\n\n    # S3\uc5d0 \uc800\uc7a5\n    import json\n    date_str = datetime.now().strftime("%Y-%m-%d")\n    s3_key = f"metrics/sales/{date_str}.json"\n\n    # JSON\uc744 S3\uc5d0 \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ud5ec\ud37c \ud568\uc218\n    json_data = json.dumps(metrics, indent=2)\n    s3._s3_client.put_object(\n        Bucket=s3.bucket_name,\n        Key=s3_key,\n        Body=json_data.encode(\'utf-8\')\n    )\n\n    # \uc54c\ub9bc \ubc1c\uc1a1\n    notification.send_notification(\n        f"Daily sales metrics calculated: ${total_revenue:.2f} revenue, {total_orders} orders",\n        level="info"\n    )\n\n    context.log.info(f"Calculated metrics - Revenue: ${total_revenue:.2f}, Orders: {total_orders}")\n\n    return metrics\n\n@asset\ndef customer_segmentation(\n    context: AssetExecutionContext,\n    enriched_orders: pd.DataFrame,\n    postgres: PostgresDB\n) -> pd.DataFrame:\n    """\uace0\uac1d \uc138\ubd84\ud654 \uc218\ud589"""\n    context.log.info("Performing customer segmentation")\n\n    # \uace0\uac1d\ubcc4 \uc9d1\uacc4\n    customer_stats = enriched_orders.groupby(\'customer_id\').agg({\n        \'order_id\': \'count\',\n        \'total_amount\': \'sum\',\n        \'order_date\': \'max\'\n    }).reset_index()\n\n    customer_stats.columns = [\'customer_id\', \'order_count\', \'total_spent\', \'last_order_date\']\n\n    # RFM \uc138\ubd84\ud654\n    today = datetime.now()\n    customer_stats[\'recency\'] = (today - pd.to_datetime(customer_stats[\'last_order_date\'])).dt.days\n\n    # \uc138\uadf8\uba3c\ud2b8 \ud560\ub2f9\n    def assign_segment(row):\n        if row[\'recency\'] <= 30 and row[\'total_spent\'] >= 1000:\n            return \'VIP\'\n        elif row[\'recency\'] <= 60 and row[\'order_count\'] >= 5:\n            return \'Loyal\'\n        elif row[\'recency\'] <= 90:\n            return \'Active\'\n        else:\n            return \'At Risk\'\n\n    customer_stats[\'segment\'] = customer_stats.apply(assign_segment, axis=1)\n\n    # \uacb0\uacfc\ub97c PostgreSQL\uc5d0 \uc800\uc7a5\n    with postgres.get_connection() as conn:\n        cursor = conn.cursor()\n\n        # \uae30\uc874 \ub370\uc774\ud130 \uc0ad\uc81c\n        cursor.execute("DELETE FROM customer_segments WHERE updated_at < CURRENT_DATE")\n\n        # \uc0c8 \ub370\uc774\ud130 \uc0bd\uc785\n        for _, row in customer_stats.iterrows():\n            cursor.execute("""\n                INSERT INTO customer_segments\n                (customer_id, segment, order_count, total_spent, last_order_date, updated_at)\n                VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP)\n                ON CONFLICT (customer_id)\n                DO UPDATE SET\n                    segment = EXCLUDED.segment,\n                    order_count = EXCLUDED.order_count,\n                    total_spent = EXCLUDED.total_spent,\n                    last_order_date = EXCLUDED.last_order_date,\n                    updated_at = CURRENT_TIMESTAMP\n            """, (\n                row[\'customer_id\'],\n                row[\'segment\'],\n                row[\'order_count\'],\n                row[\'total_spent\'],\n                row[\'last_order_date\']\n            ))\n\n        cursor.close()\n\n    context.log.info(f"Segmented {len(customer_stats)} customers")\n\n    return customer_stats\n\n# Definitions\n\n# \uac1c\ubc1c \ud658\uacbd\ndev_resources = {\n    "postgres": PostgresDB(\n        host="localhost",\n        port=5432,\n        database="ecommerce_dev",\n        user="dev_user",\n        password="dev_password"\n    ),\n    "s3": S3Storage(\n        bucket_name="ecommerce-dev-data",\n        region_name="us-west-2"\n    ),\n    "notification": NotificationService(\n        webhook_url="https://hooks.slack.com/services/DEV/WEBHOOK",\n        enabled=False  # \uac1c\ubc1c \ud658\uacbd\uc5d0\uc11c\ub294 \uc54c\ub9bc \ube44\ud65c\uc131\ud654\n    )\n}\n\n# \ud504\ub85c\ub355\uc158 \ud658\uacbd\nprod_resources = {\n    "postgres": PostgresDB(\n        host=EnvVar("PROD_DB_HOST"),\n        port=5432,\n        database=EnvVar("PROD_DB_NAME"),\n        user=EnvVar("PROD_DB_USER"),\n        password=EnvVar("PROD_DB_PASSWORD")\n    ),\n    "s3": S3Storage(\n        bucket_name=EnvVar("PROD_S3_BUCKET"),\n        aws_access_key_id=EnvVar("AWS_ACCESS_KEY_ID"),\n        aws_secret_access_key=EnvVar("AWS_SECRET_ACCESS_KEY"),\n        region_name="us-west-2"\n    ),\n    "notification": NotificationService(\n        webhook_url=EnvVar("SLACK_WEBHOOK_URL"),\n        enabled=True\n    )\n}\n\n# \ud658\uacbd\uc5d0 \ub530\ub77c resources \uc120\ud0dd\nimport os\nenvironment = os.getenv("DAGSTER_ENV", "dev")\nresources = prod_resources if environment == "prod" else dev_resources\n\ndefs = Definitions(\n    assets=[\n        raw_orders,\n        raw_order_items,\n        raw_products,\n        enriched_orders,\n        sales_metrics,\n        customer_segmentation\n    ],\n    resources=resources\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc2e4\uc2b5-2-\ub370\uc774\ud130-\ud488\uc9c8-\uac80\uc99d-resource",children:"\uc2e4\uc2b5 2: \ub370\uc774\ud130 \ud488\uc9c8 \uac80\uc99d Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dagster import ConfigurableResource, asset, AssetExecutionContext\nfrom typing import Dict, List, Any, Callable\nimport pandas as pd\nfrom dataclasses import dataclass\n\n@dataclass\nclass ValidationResult:\n    """\uac80\uc99d \uacb0\uacfc"""\n    passed: bool\n    message: str\n    details: Dict[str, Any]\n\nclass DataQualityResource(ConfigurableResource):\n    """\ub370\uc774\ud130 \ud488\uc9c8 \uac80\uc99d resource"""\n    fail_on_error: bool = False\n\n    def validate_not_null(self, df: pd.DataFrame, columns: List[str]) -> ValidationResult:\n        """NULL \uac12 \uac80\uc99d"""\n        null_counts = df[columns].isnull().sum()\n        null_columns = null_counts[null_counts > 0]\n\n        if len(null_columns) > 0:\n            return ValidationResult(\n                passed=False,\n                message=f"Found null values in columns: {\', \'.join(null_columns.index.tolist())}",\n                details=null_columns.to_dict()\n            )\n\n        return ValidationResult(\n            passed=True,\n            message="No null values found",\n            details={}\n        )\n\n    def validate_unique(self, df: pd.DataFrame, columns: List[str]) -> ValidationResult:\n        """\uace0\uc720\uc131 \uac80\uc99d"""\n        for col in columns:\n            duplicates = df[col].duplicated().sum()\n            if duplicates > 0:\n                return ValidationResult(\n                    passed=False,\n                    message=f"Found {duplicates} duplicate values in column {col}",\n                    details={"column": col, "duplicate_count": duplicates}\n                )\n\n        return ValidationResult(\n            passed=True,\n            message="All specified columns are unique",\n            details={}\n        )\n\n    def validate_range(self, df: pd.DataFrame, column: str,\n                      min_value: float = None, max_value: float = None) -> ValidationResult:\n        """\ubc94\uc704 \uac80\uc99d"""\n        issues = []\n\n        if min_value is not None:\n            below_min = (df[column] < min_value).sum()\n            if below_min > 0:\n                issues.append(f"{below_min} values below minimum {min_value}")\n\n        if max_value is not None:\n            above_max = (df[column] > max_value).sum()\n            if above_max > 0:\n                issues.append(f"{above_max} values above maximum {max_value}")\n\n        if issues:\n            return ValidationResult(\n                passed=False,\n                message=f"Range validation failed for {column}: {\'; \'.join(issues)}",\n                details={"column": column, "issues": issues}\n            )\n\n        return ValidationResult(\n            passed=True,\n            message=f"Column {column} values within valid range",\n            details={}\n        )\n\n    def validate_custom(self, df: pd.DataFrame,\n                       validation_fn: Callable[[pd.DataFrame], bool],\n                       error_message: str) -> ValidationResult:\n        """\uc0ac\uc6a9\uc790 \uc815\uc758 \uac80\uc99d"""\n        try:\n            passed = validation_fn(df)\n            if not passed:\n                return ValidationResult(\n                    passed=False,\n                    message=error_message,\n                    details={}\n                )\n            return ValidationResult(\n                passed=True,\n                message="Custom validation passed",\n                details={}\n            )\n        except Exception as e:\n            return ValidationResult(\n                passed=False,\n                message=f"Custom validation error: {str(e)}",\n                details={"error": str(e)}\n            )\n\n    def run_validations(self, df: pd.DataFrame,\n                       validations: List[Callable[[], ValidationResult]],\n                       context: AssetExecutionContext) -> bool:\n        """\uc5ec\ub7ec \uac80\uc99d \uc2e4\ud589"""\n        all_passed = True\n\n        for validation in validations:\n            result = validation()\n\n            if result.passed:\n                context.log.info(f"\u2713 {result.message}")\n            else:\n                context.log.warning(f"\u2717 {result.message}")\n                if result.details:\n                    context.log.warning(f"  Details: {result.details}")\n                all_passed = False\n\n                if self.fail_on_error:\n                    raise ValueError(f"Validation failed: {result.message}")\n\n        return all_passed\n\n# \uc0ac\uc6a9 \uc608\uc2dc\n\n@asset\ndef validated_customer_data(\n    context: AssetExecutionContext,\n    raw_customers: pd.DataFrame,\n    data_quality: DataQualityResource\n) -> pd.DataFrame:\n    """\ub370\uc774\ud130 \ud488\uc9c8 \uac80\uc99d\uc744 \ud3ec\ud568\ud55c \uace0\uac1d \ub370\uc774\ud130 \ucc98\ub9ac"""\n\n    # \uac80\uc99d \ubaa9\ub85d \uc815\uc758\n    validations = [\n        lambda: data_quality.validate_not_null(\n            raw_customers,\n            columns=[\'customer_id\', \'email\', \'signup_date\']\n        ),\n        lambda: data_quality.validate_unique(\n            raw_customers,\n            columns=[\'customer_id\', \'email\']\n        ),\n        lambda: data_quality.validate_range(\n            raw_customers,\n            column=\'age\',\n            min_value=0,\n            max_value=120\n        ),\n        lambda: data_quality.validate_custom(\n            raw_customers,\n            validation_fn=lambda df: (df[\'email\'].str.contains(\'@\')).all(),\n            error_message="Invalid email format found"\n        )\n    ]\n\n    # \uac80\uc99d \uc2e4\ud589\n    all_passed = data_quality.run_validations(raw_customers, validations, context)\n\n    if all_passed:\n        context.log.info("All data quality checks passed!")\n    else:\n        context.log.warning("Some data quality checks failed, but processing continues")\n\n    return raw_customers\n\ndefs = Definitions(\n    assets=[validated_customer_data],\n    resources={\n        "data_quality": DataQualityResource(\n            fail_on_error=False  # \uac80\uc99d \uc2e4\ud328 \uc2dc\uc5d0\ub3c4 \uacc4\uc18d \uc9c4\ud589\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"\uc774 \uac00\uc774\ub4dc\ub294 Dagster Resources\uc758 \ud575\uc2ec \uac1c\ub150\uacfc \uc2e4\uc81c \uc0ac\uc6a9 \ud328\ud134\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. Resources\ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \uc720\uc9c0\ubcf4\uc218\uc131, \ud14c\uc2a4\ud2b8 \uc6a9\uc774\uc131, \ud658\uacbd \ubd84\ub9ac\uac00 \ud06c\uac8c \ud5a5\uc0c1\ub429\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.p,{children:"\uc8fc\uc694 \ub0b4\uc6a9:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Resource\uc758 \uac1c\ub150\uacfc \uc7a5\uc810"}),"\n",(0,r.jsx)(n.li,{children:"@resource \ub370\ucf54\ub808\uc774\ud130\uc640 ConfigurableResource"}),"\n",(0,r.jsx)(n.li,{children:"Resource \uac04 \uc758\uc874\uc131 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.li,{children:"Database, API, Cloud \uc11c\ube44\uc2a4 \ud1b5\ud569"}),"\n",(0,r.jsx)(n.li,{children:"\ud658\uacbd\ubcc4 \uc124\uc815 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.li,{children:"\uc2e4\uc804 \uc608\uc81c \ubc0f \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);