"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5871],{2786:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"prometheus/grafana","title":"4. Grafana \uc5f0\ub3d9","description":"Grafana\ub294 Prometheus \uba54\ud2b8\ub9ad\uc744 \uc2dc\uac01\ud654\ud558\ub294 \uac00\uc7a5 \uc778\uae30 \uc788\ub294 \uc624\ud508\uc18c\uc2a4 \ub3c4\uad6c\uc785\ub2c8\ub2e4. \uac15\ub825\ud55c \ub300\uc2dc\ubcf4\ub4dc\uc640 \uc54c\ub9bc \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","source":"@site/docs/prometheus/grafana.md","sourceDirName":"prometheus","slug":"/prometheus/grafana","permalink":"/docs/prometheus/grafana","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/prometheus/grafana.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"prometheusSidebar","previous":{"title":"3. PromQL \ucffc\ub9ac","permalink":"/docs/prometheus/promql"},"next":{"title":"5. Alerting","permalink":"/docs/prometheus/alerting"}}');var r=t(4848),a=t(8453);const i={sidebar_position:4},o="4. Grafana \uc5f0\ub3d9",l={},d=[{value:"4.1 Grafana \uc124\uce58",id:"41-grafana-\uc124\uce58",level:2},{value:"Docker\ub85c Grafana \uc2e4\ud589",id:"docker\ub85c-grafana-\uc2e4\ud589",level:3},{value:"Docker Compose\ub85c Prometheus + Grafana",id:"docker-compose\ub85c-prometheus--grafana",level:3},{value:"\ucd08\uae30 \uc811\uc18d",id:"\ucd08\uae30-\uc811\uc18d",level:3},{value:"4.2 Prometheus \ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00",id:"42-prometheus-\ub370\uc774\ud130-\uc18c\uc2a4-\ucd94\uac00",level:2},{value:"UI\ub97c \ud1b5\ud55c \ucd94\uac00",id:"ui\ub97c-\ud1b5\ud55c-\ucd94\uac00",level:3},{value:"Provisioning\uc73c\ub85c \uc790\ub3d9 \ucd94\uac00",id:"provisioning\uc73c\ub85c-\uc790\ub3d9-\ucd94\uac00",level:3},{value:"Python\uc73c\ub85c \ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00",id:"python\uc73c\ub85c-\ub370\uc774\ud130-\uc18c\uc2a4-\ucd94\uac00",level:3},{value:"4.3 \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131 \uae30\ucd08",id:"43-\ub300\uc2dc\ubcf4\ub4dc-\uc0dd\uc131-\uae30\ucd08",level:2},{value:"\uccab \ub300\uc2dc\ubcf4\ub4dc \ub9cc\ub4e4\uae30",id:"\uccab-\ub300\uc2dc\ubcf4\ub4dc-\ub9cc\ub4e4\uae30",level:3},{value:"\ub300\uc2dc\ubcf4\ub4dc \uad6c\uc870",id:"\ub300\uc2dc\ubcf4\ub4dc-\uad6c\uc870",level:3},{value:"\uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc \uc608\uc81c",id:"\uae30\ubcf8-\ub300\uc2dc\ubcf4\ub4dc-\uc608\uc81c",level:3},{value:"4.4 \ud328\ub110 \ud0c0\uc785",id:"44-\ud328\ub110-\ud0c0\uc785",level:2},{value:"Graph Panel (\uc2dc\uacc4\uc5f4 \uadf8\ub798\ud504)",id:"graph-panel-\uc2dc\uacc4\uc5f4-\uadf8\ub798\ud504",level:3},{value:"Stat Panel (\ub2e8\uc77c \uac12)",id:"stat-panel-\ub2e8\uc77c-\uac12",level:3},{value:"Gauge Panel (\uac8c\uc774\uc9c0)",id:"gauge-panel-\uac8c\uc774\uc9c0",level:3},{value:"Table Panel (\ud14c\uc774\ube14)",id:"table-panel-\ud14c\uc774\ube14",level:3},{value:"Heatmap Panel (\ud788\ud2b8\ub9f5)",id:"heatmap-panel-\ud788\ud2b8\ub9f5",level:3},{value:"Bar Chart Panel (\ub9c9\ub300 \uadf8\ub798\ud504)",id:"bar-chart-panel-\ub9c9\ub300-\uadf8\ub798\ud504",level:3},{value:"Pie Chart Panel (\uc6d0\ud615 \ucc28\ud2b8)",id:"pie-chart-panel-\uc6d0\ud615-\ucc28\ud2b8",level:3},{value:"\ud328\ub110 \ud0c0\uc785 \ube44\uad50 \uc608\uc81c",id:"\ud328\ub110-\ud0c0\uc785-\ube44\uad50-\uc608\uc81c",level:3},{value:"4.5 \ubcc0\uc218(Variables) \uc0ac\uc6a9",id:"45-\ubcc0\uc218variables-\uc0ac\uc6a9",level:2},{value:"\ubcc0\uc218 \ud0c0\uc785",id:"\ubcc0\uc218-\ud0c0\uc785",level:3},{value:"Query Variable",id:"query-variable",level:4},{value:"Custom Variable",id:"custom-variable",level:4},{value:"Interval Variable",id:"interval-variable",level:4},{value:"\ubcc0\uc218 \uc0ac\uc6a9 \uc608\uc81c",id:"\ubcc0\uc218-\uc0ac\uc6a9-\uc608\uc81c",level:3},{value:"\ubcc0\uc218 \uccb4\uc778 (Chaining)",id:"\ubcc0\uc218-\uccb4\uc778-chaining",level:3},{value:"Python\uc73c\ub85c \ubcc0\uc218 \uc815\uc758",id:"python\uc73c\ub85c-\ubcc0\uc218-\uc815\uc758",level:3},{value:"4.6 \ud15c\ud50c\ub9bf \ub300\uc2dc\ubcf4\ub4dc",id:"46-\ud15c\ud50c\ub9bf-\ub300\uc2dc\ubcf4\ub4dc",level:2},{value:"Grafana Labs\uc5d0\uc11c \ub300\uc2dc\ubcf4\ub4dc \uac00\uc838\uc624\uae30",id:"grafana-labs\uc5d0\uc11c-\ub300\uc2dc\ubcf4\ub4dc-\uac00\uc838\uc624\uae30",level:3},{value:"\uc778\uae30 \uc788\ub294 \ub300\uc2dc\ubcf4\ub4dc",id:"\uc778\uae30-\uc788\ub294-\ub300\uc2dc\ubcf4\ub4dc",level:3},{value:"\ucee4\uc2a4\ud140 \ud15c\ud50c\ub9bf \ub9cc\ub4e4\uae30",id:"\ucee4\uc2a4\ud140-\ud15c\ud50c\ub9bf-\ub9cc\ub4e4\uae30",level:3},{value:"4.7 \uc54c\ub9bc \uc124\uc815 in Grafana",id:"47-\uc54c\ub9bc-\uc124\uc815-in-grafana",level:2},{value:"Contact Points \uc124\uc815",id:"contact-points-\uc124\uc815",level:3},{value:"Notification Policies",id:"notification-policies",level:3},{value:"Alert Rules \uc0dd\uc131",id:"alert-rules-\uc0dd\uc131",level:3},{value:"Python\uc73c\ub85c \uc54c\ub9bc \uaddc\uce59 \uc0dd\uc131",id:"python\uc73c\ub85c-\uc54c\ub9bc-\uaddc\uce59-\uc0dd\uc131",level:3},{value:"4.8 JSON \ubaa8\ub378\ub85c \ub300\uc2dc\ubcf4\ub4dc \uc815\uc758",id:"48-json-\ubaa8\ub378\ub85c-\ub300\uc2dc\ubcf4\ub4dc-\uc815\uc758",level:2},{value:"\ub300\uc2dc\ubcf4\ub4dc JSON \uad6c\uc870",id:"\ub300\uc2dc\ubcf4\ub4dc-json-\uad6c\uc870",level:3},{value:"GridPos \ub808\uc774\uc544\uc6c3",id:"gridpos-\ub808\uc774\uc544\uc6c3",level:3},{value:"\uc644\uc804\ud55c \ub300\uc2dc\ubcf4\ub4dc \uc608\uc81c",id:"\uc644\uc804\ud55c-\ub300\uc2dc\ubcf4\ub4dc-\uc608\uc81c",level:3},{value:"4.9 Python\uc73c\ub85c Grafana API \uc0ac\uc6a9",id:"49-python\uc73c\ub85c-grafana-api-\uc0ac\uc6a9",level:2},{value:"Grafana API \ud074\ub77c\uc774\uc5b8\ud2b8",id:"grafana-api-\ud074\ub77c\uc774\uc5b8\ud2b8",level:3},{value:"\ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \uc0dd\uc131 \uc2dc\uc2a4\ud15c",id:"\ub300\uc2dc\ubcf4\ub4dc-\uc790\ub3d9-\uc0dd\uc131-\uc2dc\uc2a4\ud15c",level:3},{value:"4.10 \uc2e4\uc804 \ub300\uc2dc\ubcf4\ub4dc \uc608\uc81c",id:"410-\uc2e4\uc804-\ub300\uc2dc\ubcf4\ub4dc-\uc608\uc81c",level:2},{value:"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub300\uc2dc\ubcf4\ub4dc",id:"\uc6f9-\uc560\ud50c\ub9ac\ucf00\uc774\uc158-\ub300\uc2dc\ubcf4\ub4dc",level:3},{value:"\uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc",id:"\uc2dc\uc2a4\ud15c-\ubaa8\ub2c8\ud130\ub9c1-\ub300\uc2dc\ubcf4\ub4dc",level:3},{value:"\ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ub300\uc2dc\ubcf4\ub4dc",id:"\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ub300\uc2dc\ubcf4\ub4dc",level:3},{value:"4.11 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"411-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:2},{value:"\ub300\uc2dc\ubcf4\ub4dc \uc124\uacc4 \uc6d0\uce59",id:"\ub300\uc2dc\ubcf4\ub4dc-\uc124\uacc4-\uc6d0\uce59",level:3},{value:"1. \ub808\uc774\uc544\uc6c3 \uad6c\uc870",id:"1-\ub808\uc774\uc544\uc6c3-\uad6c\uc870",level:4},{value:"2. \uc0c9\uc0c1 \uc0ac\uc6a9",id:"2-\uc0c9\uc0c1-\uc0ac\uc6a9",level:4},{value:"3. \ubcc0\uc218 \ud65c\uc6a9",id:"3-\ubcc0\uc218-\ud65c\uc6a9",level:4},{value:"4. \ud328\ub110 \uc81c\ubaa9\uacfc \uc124\uba85",id:"4-\ud328\ub110-\uc81c\ubaa9\uacfc-\uc124\uba85",level:4},{value:"5. \ub2e8\uc704 \uc124\uc815",id:"5-\ub2e8\uc704-\uc124\uc815",level:4},{value:"\uc131\ub2a5 \ucd5c\uc801\ud654",id:"\uc131\ub2a5-\ucd5c\uc801\ud654",level:3},{value:"\uc54c\ub9bc \ud1b5\ud569",id:"\uc54c\ub9bc-\ud1b5\ud569",level:3},{value:"\ubc84\uc804 \uad00\ub9ac",id:"\ubc84\uc804-\uad00\ub9ac",level:3},{value:"\uc5f0\uc2b5 \ubb38\uc81c",id:"\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc \ub9cc\ub4e4\uae30",id:"\ubb38\uc81c-1-\uae30\ubcf8-\ub300\uc2dc\ubcf4\ub4dc-\ub9cc\ub4e4\uae30",level:3},{value:"\ubb38\uc81c 2: \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc801 \ub300\uc2dc\ubcf4\ub4dc",id:"\ubb38\uc81c-2-\ubcc0\uc218\ub97c-\uc0ac\uc6a9\ud55c-\ub3d9\uc801-\ub300\uc2dc\ubcf4\ub4dc",level:3},{value:"\ubb38\uc81c 3: Python\uc73c\ub85c \ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \uc0dd\uc131",id:"\ubb38\uc81c-3-python\uc73c\ub85c-\ub300\uc2dc\ubcf4\ub4dc-\uc790\ub3d9-\uc0dd\uc131",level:3}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"4-grafana-\uc5f0\ub3d9",children:"4. Grafana \uc5f0\ub3d9"})}),"\n",(0,r.jsx)(e.p,{children:"Grafana\ub294 Prometheus \uba54\ud2b8\ub9ad\uc744 \uc2dc\uac01\ud654\ud558\ub294 \uac00\uc7a5 \uc778\uae30 \uc788\ub294 \uc624\ud508\uc18c\uc2a4 \ub3c4\uad6c\uc785\ub2c8\ub2e4. \uac15\ub825\ud55c \ub300\uc2dc\ubcf4\ub4dc\uc640 \uc54c\ub9bc \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"41-grafana-\uc124\uce58",children:"4.1 Grafana \uc124\uce58"}),"\n",(0,r.jsx)(e.h3,{id:"docker\ub85c-grafana-\uc2e4\ud589",children:"Docker\ub85c Grafana \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Grafana \ub2e8\ub3c5 \uc2e4\ud589\ndocker run -d \\\n  --name=grafana \\\n  -p 3000:3000 \\\n  grafana/grafana-oss:latest\n\n# \ubcfc\ub968 \ub9c8\uc6b4\ud2b8\ub85c \ub370\uc774\ud130 \ubcf4\uc874\ndocker run -d \\\n  --name=grafana \\\n  -p 3000:3000 \\\n  -v grafana-storage:/var/lib/grafana \\\n  grafana/grafana-oss:latest\n"})}),"\n",(0,r.jsx)(e.h3,{id:"docker-compose\ub85c-prometheus--grafana",children:"Docker Compose\ub85c Prometheus + Grafana"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# docker-compose.yml\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus-data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--web.enable-lifecycle'\n\n  grafana:\n    image: grafana/grafana-oss:latest\n    container_name: grafana\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n      - GF_USERS_ALLOW_SIGN_UP=false\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana/provisioning:/etc/grafana/provisioning\n    depends_on:\n      - prometheus\n\nvolumes:\n  prometheus-data:\n  grafana-data:\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# \uc2e4\ud589\ndocker-compose up -d\n\n# \ub85c\uadf8 \ud655\uc778\ndocker-compose logs -f grafana\n\n# \uc911\uc9c0\ndocker-compose down\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ucd08\uae30-\uc811\uc18d",children:"\ucd08\uae30 \uc811\uc18d"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"URL: http://localhost:3000\n\uae30\ubcf8 \uacc4\uc815: admin / admin\n"})}),"\n",(0,r.jsx)(e.p,{children:"\ucc98\uc74c \ub85c\uadf8\uc778\ud558\uba74 \ube44\ubc00\ubc88\ud638 \ubcc0\uacbd\uc744 \uc694\uccad\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsxs)(e.admonition,{title:"\uac1c\ubc1c \ud658\uacbd \uc124\uc815",type:"tip",children:[(0,r.jsx)(e.p,{children:"\uac1c\ubc1c \ud658\uacbd\uc5d0\uc11c\ub294 \ud658\uacbd \ubcc0\uc218\ub85c \ube44\ubc00\ubc88\ud638\ub97c \uadf8\ub300\ub85c \uc720\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"- GF_SECURITY_ADMIN_PASSWORD=admin\n- GF_AUTH_DISABLE_LOGIN_FORM=false\n"})})]}),"\n",(0,r.jsx)(e.h2,{id:"42-prometheus-\ub370\uc774\ud130-\uc18c\uc2a4-\ucd94\uac00",children:"4.2 Prometheus \ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00"}),"\n",(0,r.jsx)(e.h3,{id:"ui\ub97c-\ud1b5\ud55c-\ucd94\uac00",children:"UI\ub97c \ud1b5\ud55c \ucd94\uac00"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Configuration > Data Sources"})," \uba54\ub274 \uc120\ud0dd"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Add data source"})," \ud074\ub9ad"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Prometheus"})," \uc120\ud0dd"]}),"\n",(0,r.jsx)(e.li,{children:"\uc124\uc815 \uc785\ub825:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"Name: Prometheus\nURL: http://prometheus:9090  # Docker Compose \uc0ac\uc6a9\uc2dc\n    # \ub610\ub294 http://localhost:9090  # \ub85c\uceec \uc2e4\ud589\uc2dc\nAccess: Server (default)\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"5",children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Save & Test"})," \ud074\ub9ad"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"provisioning\uc73c\ub85c-\uc790\ub3d9-\ucd94\uac00",children:"Provisioning\uc73c\ub85c \uc790\ub3d9 \ucd94\uac00"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# grafana/provisioning/datasources/prometheus.yml\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n    editable: true\n    jsonData:\n      httpMethod: POST\n      timeInterval: 5s\n"})}),"\n",(0,r.jsx)(e.p,{children:"Docker Compose \ubcfc\ub968\uc5d0 \ud3ec\ud568:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"volumes:\n  - ./grafana/provisioning:/etc/grafana/provisioning\n"})}),"\n",(0,r.jsx)(e.h3,{id:"python\uc73c\ub85c-\ub370\uc774\ud130-\uc18c\uc2a4-\ucd94\uac00",children:"Python\uc73c\ub85c \ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import requests\nimport json\n\nGRAFANA_URL = "http://localhost:3000"\nGRAFANA_USER = "admin"\nGRAFANA_PASSWORD = "admin"\n\ndef add_prometheus_datasource():\n    """Prometheus \ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00"""\n\n    datasource = {\n        "name": "Prometheus",\n        "type": "prometheus",\n        "url": "http://localhost:9090",\n        "access": "proxy",\n        "isDefault": True,\n        "jsonData": {\n            "httpMethod": "POST",\n            "timeInterval": "5s"\n        }\n    }\n\n    response = requests.post(\n        f"{GRAFANA_URL}/api/datasources",\n        auth=(GRAFANA_USER, GRAFANA_PASSWORD),\n        headers={"Content-Type": "application/json"},\n        data=json.dumps(datasource)\n    )\n\n    if response.status_code == 200:\n        print("\ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00 \uc131\uacf5!")\n        print(response.json())\n    else:\n        print(f"\uc2e4\ud328: {response.status_code}")\n        print(response.text)\n\nif __name__ == "__main__":\n    add_prometheus_datasource()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"43-\ub300\uc2dc\ubcf4\ub4dc-\uc0dd\uc131-\uae30\ucd08",children:"4.3 \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131 \uae30\ucd08"}),"\n",(0,r.jsx)(e.h3,{id:"\uccab-\ub300\uc2dc\ubcf4\ub4dc-\ub9cc\ub4e4\uae30",children:"\uccab \ub300\uc2dc\ubcf4\ub4dc \ub9cc\ub4e4\uae30"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Create > Dashboard"})," \ud074\ub9ad"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Add new panel"})," \ud074\ub9ad"]}),"\n",(0,r.jsx)(e.li,{children:"\ucffc\ub9ac \uc785\ub825:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# \uc608: HTTP \uc694\uccad \ube44\uc728\nrate(http_requests_total[5m])\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"4",children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\ud328\ub110 \uc124\uc815:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Title"}),": HTTP Request Rate"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Description"}),": \ucd08\ub2f9 HTTP \uc694\uccad \uc218"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Unit"}),": requests/sec (ops/s)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Apply"})," \ud074\ub9ad"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Save dashboard"})," \ud074\ub9ad"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\ub300\uc2dc\ubcf4\ub4dc-\uad6c\uc870",children:"\ub300\uc2dc\ubcf4\ub4dc \uad6c\uc870"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Dashboard\n\u251c\u2500\u2500 Variables (\ubcc0\uc218)\n\u251c\u2500\u2500 Annotations (\uc8fc\uc11d)\n\u2514\u2500\u2500 Panels (\ud328\ub110)\n    \u251c\u2500\u2500 Row 1\n    \u2502   \u251c\u2500\u2500 Panel 1\n    \u2502   \u2514\u2500\u2500 Panel 2\n    \u2514\u2500\u2500 Row 2\n        \u2514\u2500\u2500 Panel 3\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uae30\ubcf8-\ub300\uc2dc\ubcf4\ub4dc-\uc608\uc81c",children:"\uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# app.py - \uba54\ud2b8\ub9ad\uc744 \uc0dd\uc131\ud558\ub294 \uc0d8\ud50c \uc571\nfrom prometheus_client import Counter, Histogram, Gauge, start_http_server\nimport time\nimport random\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nhttp_requests = Counter(\n    'http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status']\n)\n\nrequest_duration = Histogram(\n    'http_request_duration_seconds',\n    'HTTP request duration',\n    ['method', 'endpoint']\n)\n\nactive_users = Gauge(\n    'active_users',\n    'Number of active users'\n)\n\n# \uba54\ud2b8\ub9ad \uc218\uc9d1 \uc2dc\uc791\nstart_http_server(8000)\n\n# \uc2dc\ubbac\ub808\uc774\uc158\nwhile True:\n    # \ub79c\ub364 \uc694\uccad \uc0dd\uc131\n    methods = ['GET', 'POST', 'PUT', 'DELETE']\n    endpoints = ['/api/users', '/api/products', '/api/orders']\n    statuses = ['200', '201', '400', '404', '500']\n\n    method = random.choice(methods)\n    endpoint = random.choice(endpoints)\n    status = random.choices(statuses, weights=[70, 10, 10, 5, 5])[0]\n\n    # \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8\n    http_requests.labels(method=method, endpoint=endpoint, status=status).inc()\n\n    duration = random.uniform(0.01, 2.0)\n    request_duration.labels(method=method, endpoint=endpoint).observe(duration)\n\n    active_users.set(random.randint(50, 200))\n\n    time.sleep(0.1)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"44-\ud328\ub110-\ud0c0\uc785",children:"4.4 \ud328\ub110 \ud0c0\uc785"}),"\n",(0,r.jsx)(e.h3,{id:"graph-panel-\uc2dc\uacc4\uc5f4-\uadf8\ub798\ud504",children:"Graph Panel (\uc2dc\uacc4\uc5f4 \uadf8\ub798\ud504)"}),"\n",(0,r.jsx)(e.p,{children:"\uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ud328\ub110. \uc2dc\uac04\uc5d0 \ub530\ub978 \uba54\ud2b8\ub9ad \ubcc0\ud654\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# \uc694\uccad \ube44\uc728\nrate(http_requests_total[5m])\n\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\nprocess_resident_memory_bytes / 1024 / 1024\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc124\uc815:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Draw Modes"}),": Lines, Bars, Points"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Stack"}),": \uc5ec\ub7ec \uc2dc\ub9ac\uc988\ub97c \ub204\uc801 \ud45c\uc2dc"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fill"}),": \uc120 \uc544\ub798 \uc601\uc5ed \ucc44\uc6b0\uae30"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"stat-panel-\ub2e8\uc77c-\uac12",children:"Stat Panel (\ub2e8\uc77c \uac12)"}),"\n",(0,r.jsx)(e.p,{children:"\ud604\uc7ac \uac12\uc744 \ud06c\uac8c \ud45c\uc2dc\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# \ud604\uc7ac \ud65c\uc131 \uc0ac\uc6a9\uc790\nactive_users\n\n# \ucd1d \uc694\uccad \uc218\nsum(http_requests_total)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc124\uc815:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Value"}),": Last (\ucd5c\uc2e0\uac12), Min, Max, Mean"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Graph mode"}),": None, Area"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Text mode"}),": Value, Value and name"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Color mode"}),": Value, Background"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"gauge-panel-\uac8c\uc774\uc9c0",children:"Gauge Panel (\uac8c\uc774\uc9c0)"}),"\n",(0,r.jsx)(e.p,{children:"0-100% \ub610\ub294 min-max \ubc94\uc704\uc758 \uac12\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:'# CPU \uc0ac\uc6a9\ub960\n100 - (avg(rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)\n\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub960\n(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)\n/ node_memory_MemTotal_bytes * 100\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc124\uc815:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Min/Max"}),": \ubc94\uc704 \uc124\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Thresholds"}),": \uc0c9\uc0c1 \uc784\uacc4\uac12 (\ub179\uc0c9, \ub178\ub780\uc0c9, \ube68\uac04\uc0c9)"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"table-panel-\ud14c\uc774\ube14",children:"Table Panel (\ud14c\uc774\ube14)"}),"\n",(0,r.jsx)(e.p,{children:"\uc5ec\ub7ec \uba54\ud2b8\ub9ad\uc744 \ud45c \ud615\uc2dd\uc73c\ub85c \ud45c\uc2dc\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ubcc4 \uc694\uccad \uc218\nsum by (endpoint, method) (http_requests_total)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc124\uc815:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Transform"}),": \ub370\uc774\ud130 \ubcc0\ud658"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Column styles"}),": \uc5f4 \uc2a4\ud0c0\uc77c \uc9c0\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Cell display mode"}),": Color text, Gradient gauge"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"heatmap-panel-\ud788\ud2b8\ub9f5",children:"Heatmap Panel (\ud788\ud2b8\ub9f5)"}),"\n",(0,r.jsx)(e.p,{children:"\ud788\uc2a4\ud1a0\uadf8\ub7a8 \ubc84\ud0b7\uc744 \uc2dc\uac04\uc5d0 \ub530\ub77c \ud45c\uc2dc\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# \uc694\uccad \uc9c0\uc5f0 \uc2dc\uac04 \ubd84\ud3ec\nrate(http_request_duration_seconds_bucket[5m])\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc124\uc815:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Data format"}),": Time series buckets"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Y Axis"}),": Bucket bound"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Color scheme"}),": Spectrum, Greens, Blues"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"bar-chart-panel-\ub9c9\ub300-\uadf8\ub798\ud504",children:"Bar Chart Panel (\ub9c9\ub300 \uadf8\ub798\ud504)"}),"\n",(0,r.jsx)(e.p,{children:"\uce74\ud14c\uace0\ub9ac\ubcc4 \ube44\uad50\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# HTTP \uba54\uc18c\ub4dc\ubcc4 \uc694\uccad \uc218\nsum by (method) (http_requests_total)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"pie-chart-panel-\uc6d0\ud615-\ucc28\ud2b8",children:"Pie Chart Panel (\uc6d0\ud615 \ucc28\ud2b8)"}),"\n",(0,r.jsx)(e.p,{children:"\ube44\uc728\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# \uc0c1\ud0dc \ucf54\ub4dc \ubd84\ud3ec\nsum by (status) (http_requests_total)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ud328\ub110-\ud0c0\uc785-\ube44\uad50-\uc608\uc81c",children:"\ud328\ub110 \ud0c0\uc785 \ube44\uad50 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# dashboard_examples.py\n\"\"\"\ub2e4\uc591\ud55c \ud328\ub110 \ud0c0\uc785\uc744 \uc704\ud55c \uba54\ud2b8\ub9ad \uc608\uc81c\"\"\"\n\nfrom prometheus_client import Counter, Histogram, Gauge, Summary\nfrom prometheus_client import start_http_server\nimport time\nimport random\n\n# Stat Panel\uc6a9: \ub2e8\uc77c \uac12\nactive_connections = Gauge('active_connections', 'Active connections')\ntotal_users = Gauge('total_users', 'Total registered users')\n\n# Graph Panel\uc6a9: \uc2dc\uacc4\uc5f4\nrequests_per_second = Counter('requests_per_second', 'Requests')\ncpu_usage = Gauge('cpu_usage_percent', 'CPU usage percentage')\n\n# Gauge Panel\uc6a9: \ud37c\uc13c\ud2b8\ndisk_usage_percent = Gauge('disk_usage_percent', 'Disk usage')\nmemory_usage_percent = Gauge('memory_usage_percent', 'Memory usage')\n\n# Table Panel\uc6a9: \ub808\uc774\ube14\uc774 \uc788\ub294 \uba54\ud2b8\ub9ad\nendpoint_requests = Counter(\n    'endpoint_requests_total',\n    'Requests per endpoint',\n    ['endpoint', 'method', 'status']\n)\n\n# Heatmap Panel\uc6a9: Histogram\nresponse_time = Histogram(\n    'response_time_seconds',\n    'Response time',\n    buckets=[0.01, 0.05, 0.1, 0.5, 1.0, 2.0, 5.0]\n)\n\nstart_http_server(8000)\n\nwhile True:\n    # Stat \uba54\ud2b8\ub9ad\n    active_connections.set(random.randint(10, 100))\n    total_users.set(random.randint(1000, 5000))\n\n    # Graph \uba54\ud2b8\ub9ad\n    requests_per_second.inc(random.randint(1, 10))\n    cpu_usage.set(random.uniform(20, 80))\n\n    # Gauge \uba54\ud2b8\ub9ad\n    disk_usage_percent.set(random.uniform(50, 90))\n    memory_usage_percent.set(random.uniform(40, 85))\n\n    # Table \uba54\ud2b8\ub9ad\n    endpoints = ['/api/users', '/api/products', '/api/orders']\n    methods = ['GET', 'POST']\n    statuses = ['200', '400', '500']\n\n    endpoint_requests.labels(\n        endpoint=random.choice(endpoints),\n        method=random.choice(methods),\n        status=random.choice(statuses)\n    ).inc()\n\n    # Heatmap \uba54\ud2b8\ub9ad\n    response_time.observe(random.uniform(0.01, 3.0))\n\n    time.sleep(1)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"45-\ubcc0\uc218variables-\uc0ac\uc6a9",children:"4.5 \ubcc0\uc218(Variables) \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.p,{children:"\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ub300\uc2dc\ubcf4\ub4dc\ub97c \ub3d9\uc801\uc73c\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"\ubcc0\uc218-\ud0c0\uc785",children:"\ubcc0\uc218 \ud0c0\uc785"}),"\n",(0,r.jsx)(e.h4,{id:"query-variable",children:"Query Variable"}),"\n",(0,r.jsx)(e.p,{children:"Prometheus \ucffc\ub9ac \uacb0\uacfc\ub97c \ubcc0\uc218\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:"# \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ubaa9\ub85d\nlabel_values(http_requests_total, endpoint)\n\n# \uba54\uc18c\ub4dc \ubaa9\ub85d\nlabel_values(http_requests_total, method)\n\n# \uc778\uc2a4\ud134\uc2a4 \ubaa9\ub85d\nlabel_values(up, instance)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc124\uc815:"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Dashboard settings > Variables > Add variable"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Name"}),": endpoint"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Type"}),": Query"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Query"}),": ",(0,r.jsx)(e.code,{children:"label_values(http_requests_total, endpoint)"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Multi-value"}),": \uc5ec\ub7ec \uac12 \uc120\ud0dd \uac00\ub2a5"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Include All option"}),': "All" \uc635\uc158 \ucd94\uac00']}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"custom-variable",children:"Custom Variable"}),"\n",(0,r.jsx)(e.p,{children:"\uc218\ub3d9\uc73c\ub85c \uac12\uc744 \uc815\uc758\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"\ud658\uacbd: production, staging, development\n\uc9c0\uc5ed: us-east, us-west, eu-central, ap-northeast\n"})}),"\n",(0,r.jsx)(e.h4,{id:"interval-variable",children:"Interval Variable"}),"\n",(0,r.jsx)(e.p,{children:"\uc2dc\uac04 \uac04\uaca9\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"1m, 5m, 10m, 30m, 1h, 6h, 12h, 1d\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ubcc0\uc218-\uc0ac\uc6a9-\uc608\uc81c",children:"\ubcc0\uc218 \uc0ac\uc6a9 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:'# \ud328\ub110 \ucffc\ub9ac\uc5d0\uc11c \ubcc0\uc218 \uc0ac\uc6a9\nrate(http_requests_total{endpoint="$endpoint", method="$method"}[5m])\n\n# \uc5ec\ub7ec \uac12 \uc120\ud0dd\uc2dc (Multi-value)\nrate(http_requests_total{endpoint=~"$endpoint"}[5m])\n\n# All \uc635\uc158 \uc0ac\uc6a9\uc2dc\nrate(http_requests_total{endpoint=~"$endpoint|"}[5m])\n\n# Interval \ubcc0\uc218 \uc0ac\uc6a9\nrate(http_requests_total[$interval])\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubcc0\uc218-\uccb4\uc778-chaining",children:"\ubcc0\uc218 \uccb4\uc778 (Chaining)"}),"\n",(0,r.jsx)(e.p,{children:"\ud55c \ubcc0\uc218\uac00 \ub2e4\ub978 \ubcc0\uc218\uc5d0 \uc758\uc874\ud558\ub294 \uacbd\uc6b0:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:'# \ubcc0\uc218 1: environment\nlabel_values(http_requests_total, environment)\n\n# \ubcc0\uc218 2: instance (environment\uc5d0 \uc758\uc874)\nlabel_values(http_requests_total{environment="$environment"}, instance)\n\n# \ubcc0\uc218 3: endpoint (instance\uc5d0 \uc758\uc874)\nlabel_values(http_requests_total{environment="$environment", instance="$instance"}, endpoint)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"python\uc73c\ub85c-\ubcc0\uc218-\uc815\uc758",children:"Python\uc73c\ub85c \ubcc0\uc218 \uc815\uc758"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def create_dashboard_with_variables():\n    """\ubcc0\uc218\ub97c \ud3ec\ud568\ud55c \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131"""\n\n    dashboard = {\n        "dashboard": {\n            "title": "Application Metrics",\n            "templating": {\n                "list": [\n                    {\n                        "name": "environment",\n                        "type": "query",\n                        "datasource": "Prometheus",\n                        "query": "label_values(http_requests_total, environment)",\n                        "refresh": 1,\n                        "multi": False,\n                        "includeAll": False\n                    },\n                    {\n                        "name": "endpoint",\n                        "type": "query",\n                        "datasource": "Prometheus",\n                        "query": "label_values(http_requests_total{environment=\\"$environment\\"}, endpoint)",\n                        "refresh": 1,\n                        "multi": True,\n                        "includeAll": True\n                    },\n                    {\n                        "name": "interval",\n                        "type": "interval",\n                        "query": "1m,5m,10m,30m,1h,6h,12h,1d",\n                        "auto": True,\n                        "auto_count": 30,\n                        "auto_min": "1m"\n                    }\n                ]\n            },\n            "panels": [\n                {\n                    "title": "Request Rate",\n                    "targets": [\n                        {\n                            "expr": "rate(http_requests_total{endpoint=~\\"$endpoint\\"}[$interval])"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n\n    return dashboard\n'})}),"\n",(0,r.jsx)(e.h2,{id:"46-\ud15c\ud50c\ub9bf-\ub300\uc2dc\ubcf4\ub4dc",children:"4.6 \ud15c\ud50c\ub9bf \ub300\uc2dc\ubcf4\ub4dc"}),"\n",(0,r.jsx)(e.h3,{id:"grafana-labs\uc5d0\uc11c-\ub300\uc2dc\ubcf4\ub4dc-\uac00\uc838\uc624\uae30",children:"Grafana Labs\uc5d0\uc11c \ub300\uc2dc\ubcf4\ub4dc \uac00\uc838\uc624\uae30"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Dashboards > Import"})," \uba54\ub274"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Dashboard ID"})," \uc785\ub825:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Node Exporter Full"}),": 1860"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Prometheus Stats"}),": 2"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Kubernetes Cluster"}),": 7249"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"NGINX"}),": 12708"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Load"})," \ud074\ub9ad"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"\ub370\uc774\ud130 \uc18c\uc2a4 \uc120\ud0dd"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Import"})," \ud074\ub9ad"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\uc778\uae30-\uc788\ub294-\ub300\uc2dc\ubcf4\ub4dc",children:"\uc778\uae30 \uc788\ub294 \ub300\uc2dc\ubcf4\ub4dc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-markdown",children:"**\uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1**\n- Node Exporter Full (1860): \ub9ac\ub205\uc2a4 \uc11c\ubc84 \ubaa8\ub2c8\ud130\ub9c1\n- Windows Node (10467): Windows \uc11c\ubc84\n- Docker Monitoring (893): Docker \ucee8\ud14c\uc774\ub108\n\n**\uc560\ud50c\ub9ac\ucf00\uc774\uc158**\n- Spring Boot (4701): Java Spring Boot\n- NGINX (12708): NGINX \uc6f9 \uc11c\ubc84\n- PostgreSQL (9628): PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\n\n**Kubernetes**\n- Kubernetes Cluster (7249): \ud074\ub7ec\uc2a4\ud130 \uac1c\uc694\n- Kubernetes Pods (6417): Pod \uc0c1\uc138\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ucee4\uc2a4\ud140-\ud15c\ud50c\ub9bf-\ub9cc\ub4e4\uae30",children:"\ucee4\uc2a4\ud140 \ud15c\ud50c\ub9bf \ub9cc\ub4e4\uae30"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# custom_template.py\n"""\uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub300\uc2dc\ubcf4\ub4dc \ud15c\ud50c\ub9bf"""\n\ndef create_service_dashboard_template(service_name, port):\n    """\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4\uc6a9 \ud45c\uc900 \ub300\uc2dc\ubcf4\ub4dc"""\n\n    return {\n        "dashboard": {\n            "title": f"{service_name} Dashboard",\n            "tags": ["template", "microservice", service_name],\n            "timezone": "browser",\n            "refresh": "30s",\n\n            "templating": {\n                "list": [\n                    {\n                        "name": "instance",\n                        "type": "query",\n                        "query": f"label_values(up{{job=\\"{service_name}\\"}}, instance)",\n                        "refresh": 1,\n                        "multi": True,\n                        "includeAll": True\n                    },\n                    {\n                        "name": "interval",\n                        "type": "interval",\n                        "query": "1m,5m,10m,30m,1h",\n                        "auto": True,\n                        "auto_min": "1m"\n                    }\n                ]\n            },\n\n            "panels": [\n                # Row 1: \uac1c\uc694\n                {\n                    "type": "row",\n                    "title": "Overview",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 0}\n                },\n                {\n                    "id": 1,\n                    "title": "Service Up",\n                    "type": "stat",\n                    "gridPos": {"h": 4, "w": 6, "x": 0, "y": 1},\n                    "targets": [\n                        {\n                            "expr": f"up{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}"\n                        }\n                    ],\n                    "options": {\n                        "colorMode": "background",\n                        "graphMode": "none"\n                    },\n                    "fieldConfig": {\n                        "defaults": {\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "red"},\n                                    {"value": 1, "color": "green"}\n                                ]\n                            },\n                            "mappings": [\n                                {"value": 1, "text": "UP"},\n                                {"value": 0, "text": "DOWN"}\n                            ]\n                        }\n                    }\n                },\n                {\n                    "id": 2,\n                    "title": "Request Rate",\n                    "type": "stat",\n                    "gridPos": {"h": 4, "w": 6, "x": 6, "y": 1},\n                    "targets": [\n                        {\n                            "expr": f"sum(rate(http_requests_total{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval]))"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "reqps"\n                        }\n                    }\n                },\n                {\n                    "id": 3,\n                    "title": "Error Rate",\n                    "type": "stat",\n                    "gridPos": {"h": 4, "w": 6, "x": 12, "y": 1},\n                    "targets": [\n                        {\n                            "expr": f"sum(rate(http_requests_total{{job=\\"{service_name}\\", instance=~\\"$instance\\", status=~\\"5..\\", \\"4..\\"}}[$interval])) / sum(rate(http_requests_total{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval])) * 100"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "percent",\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 1, "color": "yellow"},\n                                    {"value": 5, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n                {\n                    "id": 4,\n                    "title": "P95 Latency",\n                    "type": "stat",\n                    "gridPos": {"h": 4, "w": 6, "x": 18, "y": 1},\n                    "targets": [\n                        {\n                            "expr": f"histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval])) by (le))"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "s",\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 0.5, "color": "yellow"},\n                                    {"value": 1, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n\n                # Row 2: \ud2b8\ub798\ud53d\n                {\n                    "type": "row",\n                    "title": "Traffic",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 5}\n                },\n                {\n                    "id": 5,\n                    "title": "Request Rate by Endpoint",\n                    "type": "graph",\n                    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 6},\n                    "targets": [\n                        {\n                            "expr": f"sum by (endpoint) (rate(http_requests_total{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval]))",\n                            "legendFormat": "{{endpoint}}"\n                        }\n                    ],\n                    "yaxes": [\n                        {"format": "reqps", "label": "Requests/sec"}\n                    ]\n                },\n                {\n                    "id": 6,\n                    "title": "Status Code Distribution",\n                    "type": "graph",\n                    "gridPos": {"h": 8, "w": 12, "x": 12, "y": 6},\n                    "targets": [\n                        {\n                            "expr": f"sum by (status) (rate(http_requests_total{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval]))",\n                            "legendFormat": "{{status}}"\n                        }\n                    ],\n                    "stack": True\n                },\n\n                # Row 3: \ub808\uc774\ud134\uc2dc\n                {\n                    "type": "row",\n                    "title": "Latency",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 14}\n                },\n                {\n                    "id": 7,\n                    "title": "Request Duration (Percentiles)",\n                    "type": "graph",\n                    "gridPos": {"h": 8, "w": 24, "x": 0, "y": 15},\n                    "targets": [\n                        {\n                            "expr": f"histogram_quantile(0.99, sum(rate(http_request_duration_seconds_bucket{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval])) by (le))",\n                            "legendFormat": "p99"\n                        },\n                        {\n                            "expr": f"histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval])) by (le))",\n                            "legendFormat": "p95"\n                        },\n                        {\n                            "expr": f"histogram_quantile(0.50, sum(rate(http_request_duration_seconds_bucket{{job=\\"{service_name}\\", instance=~\\"$instance\\"}}[$interval])) by (le))",\n                            "legendFormat": "p50"\n                        }\n                    ],\n                    "yaxes": [\n                        {"format": "s", "label": "Duration"}\n                    ]\n                }\n            ]\n        }\n    }\n\n\n# \uc0ac\uc6a9 \uc608\uc81c\nif __name__ == "__main__":\n    import json\n\n    # \uc5ec\ub7ec \uc11c\ube44\uc2a4\uc6a9 \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131\n    services = [\n        ("user-service", 8001),\n        ("product-service", 8002),\n        ("order-service", 8003)\n    ]\n\n    for service_name, port in services:\n        dashboard = create_service_dashboard_template(service_name, port)\n\n        # JSON \ud30c\uc77c\ub85c \uc800\uc7a5\n        with open(f"{service_name}-dashboard.json", "w") as f:\n            json.dump(dashboard, f, indent=2)\n\n        print(f"Created dashboard for {service_name}")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"47-\uc54c\ub9bc-\uc124\uc815-in-grafana",children:"4.7 \uc54c\ub9bc \uc124\uc815 in Grafana"}),"\n",(0,r.jsx)(e.p,{children:"Grafana\uc5d0\uc11c\ub3c4 \uc54c\ub9bc\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (Prometheus Alertmanager\uc640 \ubcc4\uac1c)."}),"\n",(0,r.jsx)(e.h3,{id:"contact-points-\uc124\uc815",children:"Contact Points \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Contact Point: Email\nName: Email Alerts\nType: Email\nAddresses: ops@example.com, dev@example.com\n\n# Contact Point: Slack\nName: Slack Alerts\nType: Slack\nWebhook URL: https://hooks.slack.com/services/YOUR/WEBHOOK/URL\n"})}),"\n",(0,r.jsx)(e.h3,{id:"notification-policies",children:"Notification Policies"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-markdown",children:"1. Alerting > Notification policies\n2. Default policy \ud3b8\uc9d1 \ub610\ub294 \uc0c8 \uc815\ucc45 \ucd94\uac00\n3. Contact point \uc120\ud0dd\n4. Group by, Timing \uc124\uc815\n"})}),"\n",(0,r.jsx)(e.h3,{id:"alert-rules-\uc0dd\uc131",children:"Alert Rules \uc0dd\uc131"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-promql",children:'# \uc608: \ub192\uc740 \uc5d0\ub7ec\uc728\nsum(rate(http_requests_total{status=~"5.."}[5m]))\n/\nsum(rate(http_requests_total[5m]))\n> 0.05\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc124\uc815:"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\ud328\ub110 \ud3b8\uc9d1"}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Alert"})," \ud0ed"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Create alert rule"})}),"\n",(0,r.jsxs)(e.li,{children:["\uc870\uac74 \uc124\uc815:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"WHEN"}),": avg()"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"OF"}),": query(A, 5m, now)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"IS ABOVE"}),": 0.05"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Evaluate every"}),": 1m"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"For"}),": 5m (5\ubd84 \uc774\uc0c1 \uc9c0\uc18d\uc2dc \uc54c\ub9bc)"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"python\uc73c\ub85c-\uc54c\ub9bc-\uaddc\uce59-\uc0dd\uc131",children:"Python\uc73c\ub85c \uc54c\ub9bc \uaddc\uce59 \uc0dd\uc131"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def create_alert_rule(dashboard_uid, panel_id):\n    """Grafana \uc54c\ub9bc \uaddc\uce59 \uc0dd\uc131"""\n\n    alert_rule = {\n        "dashboardUid": dashboard_uid,\n        "panelId": panel_id,\n        "name": "High Error Rate",\n        "message": "Error rate is above 5%",\n        "for": "5m",\n        "frequency": "1m",\n        "conditions": [\n            {\n                "type": "query",\n                "query": {\n                    "params": ["A", "5m", "now"]\n                },\n                "reducer": {\n                    "type": "avg",\n                    "params": []\n                },\n                "evaluator": {\n                    "type": "gt",\n                    "params": [0.05]\n                }\n            }\n        ],\n        "noDataState": "no_data",\n        "execErrState": "alerting",\n        "notifications": [\n            {\n                "uid": "email-contact-point"\n            }\n        ]\n    }\n\n    response = requests.post(\n        f"{GRAFANA_URL}/api/alerts",\n        auth=(GRAFANA_USER, GRAFANA_PASSWORD),\n        headers={"Content-Type": "application/json"},\n        data=json.dumps(alert_rule)\n    )\n\n    return response.json()\n'})}),"\n",(0,r.jsxs)(e.admonition,{title:"Prometheus vs Grafana \uc54c\ub9bc",type:"tip",children:[(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Prometheus Alertmanager"}),": \ubcf5\uc7a1\ud55c \uc54c\ub9bc \ub77c\uc6b0\ud305, \uadf8\ub8f9\ud654, \uc911\ubcf5 \uc81c\uac70\uc5d0 \uc801\ud569"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Grafana Alerts"}),": \uc2dc\uac01\ud654\uc640 \uc54c\ub9bc\uc744 \ud55c\uacf3\uc5d0\uc11c \uad00\ub9ac, UI\uac00 \ub354 \uc9c1\uad00\uc801"]}),"\n"]}),(0,r.jsx)(e.p,{children:"\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 Prometheus Alertmanager \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4."})]}),"\n",(0,r.jsx)(e.h2,{id:"48-json-\ubaa8\ub378\ub85c-\ub300\uc2dc\ubcf4\ub4dc-\uc815\uc758",children:"4.8 JSON \ubaa8\ub378\ub85c \ub300\uc2dc\ubcf4\ub4dc \uc815\uc758"}),"\n",(0,r.jsx)(e.h3,{id:"\ub300\uc2dc\ubcf4\ub4dc-json-\uad6c\uc870",children:"\ub300\uc2dc\ubcf4\ub4dc JSON \uad6c\uc870"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "My Dashboard",\n    "tags": ["prometheus", "monitoring"],\n    "timezone": "browser",\n    "schemaVersion": 16,\n    "version": 0,\n    "refresh": "30s",\n\n    "time": {\n      "from": "now-6h",\n      "to": "now"\n    },\n\n    "templating": {\n      "list": []\n    },\n\n    "panels": [\n      {\n        "id": 1,\n        "type": "graph",\n        "title": "Request Rate",\n        "gridPos": {\n          "h": 8,\n          "w": 12,\n          "x": 0,\n          "y": 0\n        },\n        "targets": [\n          {\n            "expr": "rate(http_requests_total[5m])",\n            "legendFormat": "{{method}} {{endpoint}}"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"gridpos-\ub808\uc774\uc544\uc6c3",children:"GridPos \ub808\uc774\uc544\uc6c3"}),"\n",(0,r.jsx)(e.p,{children:"Grafana\ub294 24\uce78 \uadf8\ub9ac\ub4dc \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub808\uc774\uc544\uc6c3 \uc608\uc81c\n"""\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Panel 1    \u2502  Panel 2    \u2502  y=0, h=8\n\u2502  (12\uce78)     \u2502  (12\uce78)     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Panel 3 (24\uce78)           \u2502  y=8, h=8\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"""\n\npanel_1 = {\n    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}\n}\n\npanel_2 = {\n    "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}\n}\n\npanel_3 = {\n    "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc644\uc804\ud55c-\ub300\uc2dc\ubcf4\ub4dc-\uc608\uc81c",children:"\uc644\uc804\ud55c \ub300\uc2dc\ubcf4\ub4dc \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# full_dashboard.py\n"""JSON \ubaa8\ub378\ub85c \uc644\uc804\ud55c \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131"""\n\nimport json\n\ndef create_complete_dashboard():\n    """\uc644\uc804\ud55c \ub300\uc2dc\ubcf4\ub4dc JSON"""\n\n    dashboard = {\n        "dashboard": {\n            "title": "Complete Monitoring Dashboard",\n            "tags": ["monitoring", "api"],\n            "timezone": "browser",\n            "refresh": "30s",\n            "time": {\n                "from": "now-6h",\n                "to": "now"\n            },\n\n            # \ubcc0\uc218 \uc815\uc758\n            "templating": {\n                "list": [\n                    {\n                        "name": "datasource",\n                        "type": "datasource",\n                        "query": "prometheus",\n                        "current": {\n                            "text": "Prometheus",\n                            "value": "Prometheus"\n                        }\n                    },\n                    {\n                        "name": "endpoint",\n                        "type": "query",\n                        "datasource": "$datasource",\n                        "query": "label_values(http_requests_total, endpoint)",\n                        "refresh": 1,\n                        "multi": True,\n                        "includeAll": True,\n                        "allValue": ".*"\n                    }\n                ]\n            },\n\n            # \ud328\ub110\ub4e4\n            "panels": [\n                # Row: Overview\n                {\n                    "type": "row",\n                    "title": "Overview",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 0},\n                    "id": 100\n                },\n\n                # Stat: Total Requests\n                {\n                    "id": 1,\n                    "type": "stat",\n                    "title": "Total Requests (24h)",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 4, "w": 6, "x": 0, "y": 1},\n                    "targets": [\n                        {\n                            "expr": "sum(increase(http_requests_total[24h]))",\n                            "refId": "A"\n                        }\n                    ],\n                    "options": {\n                        "colorMode": "value",\n                        "graphMode": "area",\n                        "justifyMode": "center",\n                        "orientation": "auto",\n                        "reduceOptions": {\n                            "values": False,\n                            "calcs": ["lastNotNull"],\n                            "fields": ""\n                        }\n                    },\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "short",\n                            "decimals": 0,\n                            "color": {"mode": "thresholds"},\n                            "thresholds": {\n                                "mode": "absolute",\n                                "steps": [\n                                    {"value": None, "color": "green"}\n                                ]\n                            }\n                        }\n                    }\n                },\n\n                # Stat: Request Rate\n                {\n                    "id": 2,\n                    "type": "stat",\n                    "title": "Request Rate",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 4, "w": 6, "x": 6, "y": 1},\n                    "targets": [\n                        {\n                            "expr": "sum(rate(http_requests_total[5m]))",\n                            "refId": "A"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "reqps",\n                            "decimals": 2,\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 100, "color": "yellow"},\n                                    {"value": 200, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n\n                # Gauge: Error Rate\n                {\n                    "id": 3,\n                    "type": "gauge",\n                    "title": "Error Rate",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 4, "w": 6, "x": 12, "y": 1},\n                    "targets": [\n                        {\n                            "expr": "sum(rate(http_requests_total{status=~\\"5..\\"}[5m])) / sum(rate(http_requests_total[5m])) * 100",\n                            "refId": "A"\n                        }\n                    ],\n                    "options": {\n                        "orientation": "auto",\n                        "showThresholdLabels": False,\n                        "showThresholdMarkers": True\n                    },\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "percent",\n                            "min": 0,\n                            "max": 100,\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 1, "color": "yellow"},\n                                    {"value": 5, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n\n                # Stat: Avg Latency\n                {\n                    "id": 4,\n                    "type": "stat",\n                    "title": "Avg Latency",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 4, "w": 6, "x": 18, "y": 1},\n                    "targets": [\n                        {\n                            "expr": "avg(rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m]))",\n                            "refId": "A"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "s",\n                            "decimals": 3,\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 0.5, "color": "yellow"},\n                                    {"value": 1, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n\n                # Row: Traffic\n                {\n                    "type": "row",\n                    "title": "Traffic Analysis",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 5},\n                    "id": 101\n                },\n\n                # Graph: Request Rate by Endpoint\n                {\n                    "id": 5,\n                    "type": "timeseries",\n                    "title": "Request Rate by Endpoint",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 6},\n                    "targets": [\n                        {\n                            "expr": "sum by (endpoint) (rate(http_requests_total{endpoint=~\\"$endpoint\\"}[5m]))",\n                            "legendFormat": "{{endpoint}}",\n                            "refId": "A"\n                        }\n                    ],\n                    "options": {\n                        "tooltip": {"mode": "multi"},\n                        "legend": {\n                            "displayMode": "table",\n                            "placement": "bottom",\n                            "calcs": ["mean", "max"]\n                        }\n                    },\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "reqps",\n                            "custom": {\n                                "drawStyle": "line",\n                                "lineInterpolation": "smooth",\n                                "fillOpacity": 10,\n                                "showPoints": "never"\n                            }\n                        }\n                    }\n                },\n\n                # Pie Chart: Status Code Distribution\n                {\n                    "id": 6,\n                    "type": "piechart",\n                    "title": "Status Code Distribution",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 8, "w": 12, "x": 12, "y": 6},\n                    "targets": [\n                        {\n                            "expr": "sum by (status) (increase(http_requests_total[1h]))",\n                            "legendFormat": "{{status}}",\n                            "refId": "A"\n                        }\n                    ],\n                    "options": {\n                        "legend": {\n                            "displayMode": "table",\n                            "placement": "right",\n                            "values": ["value", "percent"]\n                        },\n                        "pieType": "pie",\n                        "tooltip": {"mode": "single"}\n                    }\n                },\n\n                # Row: Latency\n                {\n                    "type": "row",\n                    "title": "Latency Analysis",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 14},\n                    "id": 102\n                },\n\n                # Heatmap: Response Time Distribution\n                {\n                    "id": 7,\n                    "type": "heatmap",\n                    "title": "Response Time Distribution",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 8, "w": 24, "x": 0, "y": 15},\n                    "targets": [\n                        {\n                            "expr": "sum(rate(http_request_duration_seconds_bucket[5m])) by (le)",\n                            "format": "heatmap",\n                            "legendFormat": "{{le}}",\n                            "refId": "A"\n                        }\n                    ],\n                    "options": {\n                        "calculate": False,\n                        "cellGap": 2,\n                        "color": {\n                            "mode": "scheme",\n                            "scheme": "Spectral",\n                            "steps": 128\n                        },\n                        "yAxis": {\n                            "unit": "s",\n                            "decimals": 2\n                        }\n                    }\n                },\n\n                # Row: Detailed Metrics\n                {\n                    "type": "row",\n                    "title": "Detailed Metrics",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 23},\n                    "id": 103\n                },\n\n                # Table: Endpoint Performance\n                {\n                    "id": 8,\n                    "type": "table",\n                    "title": "Endpoint Performance",\n                    "datasource": "$datasource",\n                    "gridPos": {"h": 8, "w": 24, "x": 0, "y": 24},\n                    "targets": [\n                        {\n                            "expr": "sum by (endpoint, method) (rate(http_requests_total[5m]))",\n                            "format": "table",\n                            "instant": True,\n                            "refId": "A"\n                        },\n                        {\n                            "expr": "sum by (endpoint, method) (rate(http_request_duration_seconds_sum[5m])) / sum by (endpoint, method) (rate(http_request_duration_seconds_count[5m]))",\n                            "format": "table",\n                            "instant": True,\n                            "refId": "B"\n                        }\n                    ],\n                    "transformations": [\n                        {\n                            "id": "merge",\n                            "options": {}\n                        }\n                    ],\n                    "options": {\n                        "showHeader": True,\n                        "sortBy": [\n                            {\n                                "displayName": "Value #A",\n                                "desc": True\n                            }\n                        ]\n                    },\n                    "fieldConfig": {\n                        "overrides": [\n                            {\n                                "matcher": {"id": "byName", "options": "Value #A"},\n                                "properties": [\n                                    {\n                                        "id": "displayName",\n                                        "value": "Request Rate"\n                                    },\n                                    {\n                                        "id": "unit",\n                                        "value": "reqps"\n                                    }\n                                ]\n                            },\n                            {\n                                "matcher": {"id": "byName", "options": "Value #B"},\n                                "properties": [\n                                    {\n                                        "id": "displayName",\n                                        "value": "Avg Latency"\n                                    },\n                                    {\n                                        "id": "unit",\n                                        "value": "s"\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        "overwrite": True\n    }\n\n    return dashboard\n\n\nif __name__ == "__main__":\n    dashboard = create_complete_dashboard()\n\n    # \ud30c\uc77c\ub85c \uc800\uc7a5\n    with open("complete-dashboard.json", "w") as f:\n        json.dump(dashboard, f, indent=2)\n\n    print("Dashboard JSON created successfully!")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"49-python\uc73c\ub85c-grafana-api-\uc0ac\uc6a9",children:"4.9 Python\uc73c\ub85c Grafana API \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.h3,{id:"grafana-api-\ud074\ub77c\uc774\uc5b8\ud2b8",children:"Grafana API \ud074\ub77c\uc774\uc5b8\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# grafana_client.py\n"""Grafana API \ud074\ub77c\uc774\uc5b8\ud2b8"""\n\nimport requests\nimport json\nfrom typing import Dict, List, Optional\n\nclass GrafanaClient:\n    """Grafana API\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub77c\uc774\uc5b8\ud2b8"""\n\n    def __init__(self, url: str, api_key: Optional[str] = None,\n                 username: str = "admin", password: str = "admin"):\n        """\n        Args:\n            url: Grafana URL (\uc608: http://localhost:3000)\n            api_key: API \ud0a4 (\uc120\ud0dd)\n            username: \uc0ac\uc6a9\uc790\uba85 (API \ud0a4 \uc5c6\uc744 \ub54c)\n            password: \ube44\ubc00\ubc88\ud638 (API \ud0a4 \uc5c6\uc744 \ub54c)\n        """\n        self.url = url.rstrip(\'/\')\n        self.api_key = api_key\n        self.auth = (username, password) if not api_key else None\n\n    def _headers(self) -> Dict[str, str]:\n        """HTTP \ud5e4\ub354 \uc0dd\uc131"""\n        headers = {"Content-Type": "application/json"}\n        if self.api_key:\n            headers["Authorization"] = f"Bearer {self.api_key}"\n        return headers\n\n    def _request(self, method: str, endpoint: str, **kwargs) -> requests.Response:\n        """API \uc694\uccad"""\n        url = f"{self.url}/api{endpoint}"\n\n        if self.api_key:\n            response = requests.request(\n                method, url,\n                headers=self._headers(),\n                **kwargs\n            )\n        else:\n            response = requests.request(\n                method, url,\n                auth=self.auth,\n                headers=self._headers(),\n                **kwargs\n            )\n\n        response.raise_for_status()\n        return response\n\n    # Datasources\n    def create_datasource(self, datasource: Dict) -> Dict:\n        """\ub370\uc774\ud130 \uc18c\uc2a4 \uc0dd\uc131"""\n        response = self._request(\'POST\', \'/datasources\', json=datasource)\n        return response.json()\n\n    def get_datasources(self) -> List[Dict]:\n        """\ubaa8\ub4e0 \ub370\uc774\ud130 \uc18c\uc2a4 \uc870\ud68c"""\n        response = self._request(\'GET\', \'/datasources\')\n        return response.json()\n\n    def delete_datasource(self, datasource_id: int):\n        """\ub370\uc774\ud130 \uc18c\uc2a4 \uc0ad\uc81c"""\n        self._request(\'DELETE\', f\'/datasources/{datasource_id}\')\n\n    # Dashboards\n    def create_dashboard(self, dashboard: Dict) -> Dict:\n        """\ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131"""\n        response = self._request(\'POST\', \'/dashboards/db\', json=dashboard)\n        return response.json()\n\n    def get_dashboard(self, uid: str) -> Dict:\n        """\ub300\uc2dc\ubcf4\ub4dc \uc870\ud68c"""\n        response = self._request(\'GET\', f\'/dashboards/uid/{uid}\')\n        return response.json()\n\n    def update_dashboard(self, dashboard: Dict) -> Dict:\n        """\ub300\uc2dc\ubcf4\ub4dc \uc5c5\ub370\uc774\ud2b8"""\n        return self.create_dashboard(dashboard)\n\n    def delete_dashboard(self, uid: str):\n        """\ub300\uc2dc\ubcf4\ub4dc \uc0ad\uc81c"""\n        self._request(\'DELETE\', f\'/dashboards/uid/{uid}\')\n\n    def search_dashboards(self, query: str = "", tag: str = "") -> List[Dict]:\n        """\ub300\uc2dc\ubcf4\ub4dc \uac80\uc0c9"""\n        params = {}\n        if query:\n            params[\'query\'] = query\n        if tag:\n            params[\'tag\'] = tag\n\n        response = self._request(\'GET\', \'/search\', params=params)\n        return response.json()\n\n    # Folders\n    def create_folder(self, title: str) -> Dict:\n        """\ud3f4\ub354 \uc0dd\uc131"""\n        response = self._request(\'POST\', \'/folders\', json={"title": title})\n        return response.json()\n\n    def get_folders(self) -> List[Dict]:\n        """\ubaa8\ub4e0 \ud3f4\ub354 \uc870\ud68c"""\n        response = self._request(\'GET\', \'/folders\')\n        return response.json()\n\n    # API Keys\n    def create_api_key(self, name: str, role: str = "Viewer",\n                       seconds_to_live: Optional[int] = None) -> Dict:\n        """API \ud0a4 \uc0dd\uc131"""\n        data = {"name": name, "role": role}\n        if seconds_to_live:\n            data["secondsToLive"] = seconds_to_live\n\n        response = self._request(\'POST\', \'/auth/keys\', json=data)\n        return response.json()\n\n    def get_api_keys(self) -> List[Dict]:\n        """\ubaa8\ub4e0 API \ud0a4 \uc870\ud68c"""\n        response = self._request(\'GET\', \'/auth/keys\')\n        return response.json()\n\n    # Organizations\n    def get_current_org(self) -> Dict:\n        """\ud604\uc7ac \uc870\uc9c1 \uc815\ubcf4"""\n        response = self._request(\'GET\', \'/org\')\n        return response.json()\n\n    # Health check\n    def health_check(self) -> Dict:\n        """Grafana \uc0c1\ud0dc \ud655\uc778"""\n        response = requests.get(f"{self.url}/api/health")\n        return response.json()\n\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndef example_usage():\n    """API \uc0ac\uc6a9 \uc608\uc81c"""\n\n    # \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd08\uae30\ud654\n    client = GrafanaClient(\n        url="http://localhost:3000",\n        username="admin",\n        password="admin"\n    )\n\n    # 1. \uc0c1\ud0dc \ud655\uc778\n    print("=== Health Check ===")\n    health = client.health_check()\n    print(json.dumps(health, indent=2))\n\n    # 2. Prometheus \ub370\uc774\ud130 \uc18c\uc2a4 \ucd94\uac00\n    print("\\n=== Creating Datasource ===")\n    datasource = {\n        "name": "Prometheus",\n        "type": "prometheus",\n        "url": "http://prometheus:9090",\n        "access": "proxy",\n        "isDefault": True\n    }\n\n    try:\n        result = client.create_datasource(datasource)\n        print(f"Created datasource: {result[\'id\']}")\n    except requests.exceptions.HTTPError as e:\n        print(f"Datasource may already exist: {e}")\n\n    # 3. \ud3f4\ub354 \uc0dd\uc131\n    print("\\n=== Creating Folder ===")\n    try:\n        folder = client.create_folder("Monitoring")\n        print(f"Created folder: {folder[\'uid\']}")\n        folder_uid = folder[\'uid\']\n    except requests.exceptions.HTTPError:\n        folders = client.get_folders()\n        folder_uid = next((f[\'uid\'] for f in folders if f[\'title\'] == \'Monitoring\'), None)\n        print(f"Using existing folder: {folder_uid}")\n\n    # 4. \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131\n    print("\\n=== Creating Dashboard ===")\n    dashboard = {\n        "dashboard": {\n            "title": "API Created Dashboard",\n            "tags": ["python", "api"],\n            "timezone": "browser",\n            "panels": [\n                {\n                    "id": 1,\n                    "type": "graph",\n                    "title": "Request Rate",\n                    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},\n                    "targets": [\n                        {\n                            "expr": "rate(http_requests_total[5m])"\n                        }\n                    ]\n                }\n            ]\n        },\n        "folderUid": folder_uid,\n        "overwrite": True\n    }\n\n    result = client.create_dashboard(dashboard)\n    print(f"Created dashboard: {result[\'url\']}")\n    dashboard_uid = result[\'uid\']\n\n    # 5. \ub300\uc2dc\ubcf4\ub4dc \uac80\uc0c9\n    print("\\n=== Searching Dashboards ===")\n    dashboards = client.search_dashboards(tag="python")\n    for dash in dashboards:\n        print(f"- {dash[\'title\']} ({dash[\'uid\']})")\n\n    # 6. API \ud0a4 \uc0dd\uc131\n    print("\\n=== Creating API Key ===")\n    try:\n        api_key = client.create_api_key(\n            name="Automation Key",\n            role="Editor",\n            seconds_to_live=86400  # 24\uc2dc\uac04\n        )\n        print(f"Created API key: {api_key[\'key\'][:20]}...")\n    except requests.exceptions.HTTPError as e:\n        print(f"API key creation failed: {e}")\n\n\nif __name__ == "__main__":\n    example_usage()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ub300\uc2dc\ubcf4\ub4dc-\uc790\ub3d9-\uc0dd\uc131-\uc2dc\uc2a4\ud15c",children:"\ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \uc0dd\uc131 \uc2dc\uc2a4\ud15c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# auto_dashboard.py\n"""\ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \uc0dd\uc131 \uc2dc\uc2a4\ud15c"""\n\nfrom grafana_client import GrafanaClient\nfrom typing import List, Dict\nimport json\n\nclass DashboardGenerator:\n    """\ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \uc0dd\uc131\uae30"""\n\n    def __init__(self, client: GrafanaClient):\n        self.client = client\n\n    def create_microservice_dashboard(\n        self,\n        service_name: str,\n        endpoints: List[str],\n        folder_uid: str = None\n    ) -> Dict:\n        """\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4\uc6a9 \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131"""\n\n        panels = []\n        panel_id = 1\n        y_pos = 0\n\n        # Overview Row\n        panels.append({\n            "type": "row",\n            "title": "Overview",\n            "gridPos": {"h": 1, "w": 24, "x": 0, "y": y_pos},\n            "id": panel_id\n        })\n        panel_id += 1\n        y_pos += 1\n\n        # Request Rate\n        panels.append({\n            "id": panel_id,\n            "type": "stat",\n            "title": "Request Rate",\n            "gridPos": {"h": 4, "w": 8, "x": 0, "y": y_pos},\n            "targets": [{\n                "expr": f"sum(rate(http_requests_total{{service=\\"{service_name}\\"}}[5m]))"\n            }],\n            "fieldConfig": {\n                "defaults": {"unit": "reqps"}\n            }\n        })\n        panel_id += 1\n\n        # Error Rate\n        panels.append({\n            "id": panel_id,\n            "type": "gauge",\n            "title": "Error Rate",\n            "gridPos": {"h": 4, "w": 8, "x": 8, "y": y_pos},\n            "targets": [{\n                "expr": f"sum(rate(http_requests_total{{service=\\"{service_name}\\",status=~\\"5..\\"}}[5m])) / sum(rate(http_requests_total{{service=\\"{service_name}\\"}}[5m])) * 100"\n            }],\n            "fieldConfig": {\n                "defaults": {\n                    "unit": "percent",\n                    "min": 0,\n                    "max": 100,\n                    "thresholds": {\n                        "steps": [\n                            {"value": 0, "color": "green"},\n                            {"value": 1, "color": "yellow"},\n                            {"value": 5, "color": "red"}\n                        ]\n                    }\n                }\n            }\n        })\n        panel_id += 1\n\n        # P95 Latency\n        panels.append({\n            "id": panel_id,\n            "type": "stat",\n            "title": "P95 Latency",\n            "gridPos": {"h": 4, "w": 8, "x": 16, "y": y_pos},\n            "targets": [{\n                "expr": f"histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{{service=\\"{service_name}\\"}}[5m])) by (le))"\n            }],\n            "fieldConfig": {\n                "defaults": {"unit": "s"}\n            }\n        })\n        panel_id += 1\n        y_pos += 4\n\n        # Endpoint Performance Row\n        panels.append({\n            "type": "row",\n            "title": "Endpoint Performance",\n            "gridPos": {"h": 1, "w": 24, "x": 0, "y": y_pos},\n            "id": panel_id\n        })\n        panel_id += 1\n        y_pos += 1\n\n        # \uac01 \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ubcc4 \uadf8\ub798\ud504\n        for idx, endpoint in enumerate(endpoints):\n            x_pos = (idx % 2) * 12\n            if idx > 0 and idx % 2 == 0:\n                y_pos += 8\n\n            panels.append({\n                "id": panel_id,\n                "type": "timeseries",\n                "title": f"{endpoint} - Request Rate",\n                "gridPos": {"h": 8, "w": 12, "x": x_pos, "y": y_pos},\n                "targets": [{\n                    "expr": f"sum by (status) (rate(http_requests_total{{service=\\"{service_name}\\",endpoint=\\"{endpoint}\\"}}[5m]))",\n                    "legendFormat": "{{status}}"\n                }],\n                "fieldConfig": {\n                    "defaults": {"unit": "reqps"}\n                }\n            })\n            panel_id += 1\n\n        # \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131\n        dashboard = {\n            "dashboard": {\n                "title": f"{service_name} Dashboard",\n                "tags": ["microservice", service_name, "auto-generated"],\n                "timezone": "browser",\n                "refresh": "30s",\n                "panels": panels,\n                "templating": {\n                    "list": [\n                        {\n                            "name": "interval",\n                            "type": "interval",\n                            "query": "1m,5m,10m,30m,1h",\n                            "auto": True,\n                            "auto_min": "1m"\n                        }\n                    ]\n                }\n            },\n            "folderUid": folder_uid,\n            "overwrite": True\n        }\n\n        return self.client.create_dashboard(dashboard)\n\n    def create_system_dashboard(self, hosts: List[str]) -> Dict:\n        """\uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131"""\n\n        panels = []\n        panel_id = 1\n\n        # CPU, Memory, Disk, Network \ud328\ub110\ub4e4 \uc0dd\uc131\n        metrics = [\n            ("CPU Usage", "100 - (avg(rate(node_cpu_seconds_total{mode=\\"idle\\"}[5m])) * 100)", "percent"),\n            ("Memory Usage", "(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100", "percent"),\n            ("Disk Usage", "(node_filesystem_size_bytes - node_filesystem_avail_bytes) / node_filesystem_size_bytes * 100", "percent"),\n            ("Network Traffic", "rate(node_network_receive_bytes_total[5m])", "Bps")\n        ]\n\n        for idx, (title, expr, unit) in enumerate(metrics):\n            panels.append({\n                "id": panel_id,\n                "type": "timeseries",\n                "title": title,\n                "gridPos": {"h": 6, "w": 12, "x": (idx % 2) * 12, "y": (idx // 2) * 6},\n                "targets": [{\n                    "expr": expr,\n                    "legendFormat": "{{instance}}"\n                }],\n                "fieldConfig": {\n                    "defaults": {"unit": unit}\n                }\n            })\n            panel_id += 1\n\n        dashboard = {\n            "dashboard": {\n                "title": "System Monitoring",\n                "tags": ["system", "auto-generated"],\n                "panels": panels\n            },\n            "overwrite": True\n        }\n\n        return self.client.create_dashboard(dashboard)\n\n    def bulk_create_dashboards(self, services: List[Dict]):\n        """\uc5ec\ub7ec \ub300\uc2dc\ubcf4\ub4dc \uc77c\uad04 \uc0dd\uc131"""\n\n        results = []\n\n        for service in services:\n            try:\n                result = self.create_microservice_dashboard(\n                    service_name=service[\'name\'],\n                    endpoints=service.get(\'endpoints\', []),\n                    folder_uid=service.get(\'folder_uid\')\n                )\n                results.append({\n                    \'service\': service[\'name\'],\n                    \'status\': \'success\',\n                    \'url\': result[\'url\']\n                })\n                print(f"\u2713 Created dashboard for {service[\'name\']}")\n            except Exception as e:\n                results.append({\n                    \'service\': service[\'name\'],\n                    \'status\': \'failed\',\n                    \'error\': str(e)\n                })\n                print(f"\u2717 Failed to create dashboard for {service[\'name\']}: {e}")\n\n        return results\n\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndef main():\n    """\ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \uc0dd\uc131 \uc608\uc81c"""\n\n    # Grafana \ud074\ub77c\uc774\uc5b8\ud2b8 \ucd08\uae30\ud654\n    client = GrafanaClient(\n        url="http://localhost:3000",\n        username="admin",\n        password="admin"\n    )\n\n    generator = DashboardGenerator(client)\n\n    # \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc815\uc758\n    services = [\n        {\n            \'name\': \'user-service\',\n            \'endpoints\': [\'/api/users\', \'/api/auth\', \'/api/profile\']\n        },\n        {\n            \'name\': \'product-service\',\n            \'endpoints\': [\'/api/products\', \'/api/categories\', \'/api/search\']\n        },\n        {\n            \'name\': \'order-service\',\n            \'endpoints\': [\'/api/orders\', \'/api/cart\', \'/api/checkout\']\n        }\n    ]\n\n    # \ud3f4\ub354 \uc0dd\uc131\n    try:\n        folder = client.create_folder("Microservices")\n        folder_uid = folder[\'uid\']\n    except:\n        folders = client.get_folders()\n        folder_uid = next((f[\'uid\'] for f in folders if f[\'title\'] == \'Microservices\'), None)\n\n    # \ud3f4\ub354 UID \ucd94\uac00\n    for service in services:\n        service[\'folder_uid\'] = folder_uid\n\n    # \ub300\uc2dc\ubcf4\ub4dc \uc77c\uad04 \uc0dd\uc131\n    print("Creating dashboards...")\n    results = generator.bulk_create_dashboards(services)\n\n    # \uacb0\uacfc \ucd9c\ub825\n    print("\\n=== Summary ===")\n    success = sum(1 for r in results if r[\'status\'] == \'success\')\n    print(f"Success: {success}/{len(results)}")\n\n    for result in results:\n        if result[\'status\'] == \'success\':\n            print(f"\u2713 {result[\'service\']}: {result[\'url\']}")\n        else:\n            print(f"\u2717 {result[\'service\']}: {result[\'error\']}")\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"410-\uc2e4\uc804-\ub300\uc2dc\ubcf4\ub4dc-\uc608\uc81c",children:"4.10 \uc2e4\uc804 \ub300\uc2dc\ubcf4\ub4dc \uc608\uc81c"}),"\n",(0,r.jsx)(e.h3,{id:"\uc6f9-\uc560\ud50c\ub9ac\ucf00\uc774\uc158-\ub300\uc2dc\ubcf4\ub4dc",children:"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub300\uc2dc\ubcf4\ub4dc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# web_app_dashboard.py\n"""\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc"""\n\ndef create_web_app_dashboard():\n    """\uc6f9 \uc571\uc6a9 \uc885\ud569 \ub300\uc2dc\ubcf4\ub4dc"""\n\n    return {\n        "dashboard": {\n            "title": "Web Application Monitoring",\n            "tags": ["web", "application", "production"],\n            "timezone": "browser",\n            "refresh": "30s",\n\n            "templating": {\n                "list": [\n                    {\n                        "name": "environment",\n                        "type": "custom",\n                        "query": "production,staging,development",\n                        "current": {"text": "production", "value": "production"}\n                    },\n                    {\n                        "name": "instance",\n                        "type": "query",\n                        "query": "label_values(up{job=\\"webapp\\",environment=\\"$environment\\"}, instance)",\n                        "multi": True,\n                        "includeAll": True\n                    }\n                ]\n            },\n\n            "panels": [\n                # === SLA Metrics (Golden Signals) ===\n                {\n                    "type": "row",\n                    "title": "SLA Metrics (Golden Signals)",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 0}\n                },\n\n                # Traffic\n                {\n                    "id": 1,\n                    "type": "stat",\n                    "title": "Traffic (req/s)",\n                    "gridPos": {"h": 5, "w": 6, "x": 0, "y": 1},\n                    "targets": [{\n                        "expr": "sum(rate(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m]))"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "reqps",\n                            "color": {"mode": "thresholds"},\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "blue"}\n                                ]\n                            }\n                        }\n                    },\n                    "options": {\n                        "graphMode": "area",\n                        "colorMode": "value"\n                    }\n                },\n\n                # Errors\n                {\n                    "id": 2,\n                    "type": "stat",\n                    "title": "Error Rate",\n                    "gridPos": {"h": 5, "w": 6, "x": 6, "y": 1},\n                    "targets": [{\n                        "expr": "sum(rate(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\",status=~\\"5..\\"}[5m])) / sum(rate(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m])) * 100"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "percent",\n                            "decimals": 2,\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 0.1, "color": "yellow"},\n                                    {"value": 1, "color": "red"}\n                                ]\n                            }\n                        }\n                    },\n                    "options": {\n                        "graphMode": "area",\n                        "colorMode": "background"\n                    }\n                },\n\n                # Latency (P50)\n                {\n                    "id": 3,\n                    "type": "stat",\n                    "title": "P50 Latency",\n                    "gridPos": {"h": 5, "w": 6, "x": 12, "y": 1},\n                    "targets": [{\n                        "expr": "histogram_quantile(0.50, sum(rate(http_request_duration_seconds_bucket{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m])) by (le))"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "s",\n                            "decimals": 3,\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 0.2, "color": "yellow"},\n                                    {"value": 0.5, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n\n                # Saturation (CPU)\n                {\n                    "id": 4,\n                    "type": "gauge",\n                    "title": "CPU Saturation",\n                    "gridPos": {"h": 5, "w": 6, "x": 18, "y": 1},\n                    "targets": [{\n                        "expr": "avg(rate(process_cpu_seconds_total{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m])) * 100"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "percent",\n                            "min": 0,\n                            "max": 100,\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 70, "color": "yellow"},\n                                    {"value": 90, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n\n                # === Traffic Details ===\n                {\n                    "type": "row",\n                    "title": "Traffic Analysis",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 6}\n                },\n\n                {\n                    "id": 5,\n                    "type": "timeseries",\n                    "title": "Requests by Endpoint",\n                    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 7},\n                    "targets": [{\n                        "expr": "sum by (endpoint) (rate(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m]))",\n                        "legendFormat": "{{endpoint}}"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {"unit": "reqps"}\n                    }\n                },\n\n                {\n                    "id": 6,\n                    "type": "piechart",\n                    "title": "Traffic Distribution",\n                    "gridPos": {"h": 8, "w": 12, "x": 12, "y": 7},\n                    "targets": [{\n                        "expr": "sum by (method) (rate(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m]))",\n                        "legendFormat": "{{method}}"\n                    }]\n                },\n\n                # === Error Analysis ===\n                {\n                    "type": "row",\n                    "title": "Error Analysis",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 15}\n                },\n\n                {\n                    "id": 7,\n                    "type": "timeseries",\n                    "title": "Errors Over Time",\n                    "gridPos": {"h": 8, "w": 16, "x": 0, "y": 16},\n                    "targets": [\n                        {\n                            "expr": "sum by (status) (rate(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\",status=~\\"4..\\"}[5m]))",\n                            "legendFormat": "4xx - {{status}}"\n                        },\n                        {\n                            "expr": "sum by (status) (rate(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\",status=~\\"5..\\"}[5m]))",\n                            "legendFormat": "5xx - {{status}}"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {"unit": "reqps"}\n                    }\n                },\n\n                {\n                    "id": 8,\n                    "type": "table",\n                    "title": "Top Errors",\n                    "gridPos": {"h": 8, "w": 8, "x": 16, "y": 16},\n                    "targets": [{\n                        "expr": "topk(10, sum by (endpoint, status) (increase(http_requests_total{environment=\\"$environment\\",instance=~\\"$instance\\",status=~\\"[45]..\\" }[1h])))",\n                        "format": "table",\n                        "instant": True\n                    }],\n                    "transformations": [\n                        {\n                            "id": "organize",\n                            "options": {\n                                "excludeByName": {"Time": True},\n                                "indexByName": {},\n                                "renameByName": {\n                                    "Value": "Count",\n                                    "endpoint": "Endpoint",\n                                    "status": "Status"\n                                }\n                            }\n                        }\n                    ]\n                },\n\n                # === Latency Analysis ===\n                {\n                    "type": "row",\n                    "title": "Latency Analysis",\n                    "gridPos": {"h": 1, "w": 24, "x": 0, "y": 24}\n                },\n\n                {\n                    "id": 9,\n                    "type": "timeseries",\n                    "title": "Response Time Percentiles",\n                    "gridPos": {"h": 8, "w": 24, "x": 0, "y": 25},\n                    "targets": [\n                        {\n                            "expr": "histogram_quantile(0.99, sum(rate(http_request_duration_seconds_bucket{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m])) by (le))",\n                            "legendFormat": "P99"\n                        },\n                        {\n                            "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m])) by (le))",\n                            "legendFormat": "P95"\n                        },\n                        {\n                            "expr": "histogram_quantile(0.50, sum(rate(http_request_duration_seconds_bucket{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m])) by (le))",\n                            "legendFormat": "P50"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {"unit": "s"}\n                    }\n                },\n\n                {\n                    "id": 10,\n                    "type": "heatmap",\n                    "title": "Response Time Heatmap",\n                    "gridPos": {"h": 8, "w": 24, "x": 0, "y": 33},\n                    "targets": [{\n                        "expr": "sum(rate(http_request_duration_seconds_bucket{environment=\\"$environment\\",instance=~\\"$instance\\"}[5m])) by (le)",\n                        "format": "heatmap"\n                    }]\n                }\n            ]\n        },\n        "overwrite": True\n    }\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2dc\uc2a4\ud15c-\ubaa8\ub2c8\ud130\ub9c1-\ub300\uc2dc\ubcf4\ub4dc",children:"\uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# system_dashboard.py\n"""\uc2dc\uc2a4\ud15c \ub9ac\uc18c\uc2a4 \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc"""\n\ndef create_system_dashboard():\n    """Node Exporter \uae30\ubc18 \uc2dc\uc2a4\ud15c \ub300\uc2dc\ubcf4\ub4dc"""\n\n    return {\n        "dashboard": {\n            "title": "System Resources",\n            "tags": ["system", "infrastructure"],\n\n            "templating": {\n                "list": [\n                    {\n                        "name": "host",\n                        "type": "query",\n                        "query": "label_values(node_uname_info, instance)",\n                        "multi": False\n                    }\n                ]\n            },\n\n            "panels": [\n                # CPU\n                {\n                    "id": 1,\n                    "type": "timeseries",\n                    "title": "CPU Usage",\n                    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},\n                    "targets": [{\n                        "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{instance=\\"$host\\",mode=\\"idle\\"}[5m])) * 100)",\n                        "legendFormat": "CPU %"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "percent",\n                            "min": 0,\n                            "max": 100\n                        }\n                    }\n                },\n\n                # Memory\n                {\n                    "id": 2,\n                    "type": "timeseries",\n                    "title": "Memory Usage",\n                    "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},\n                    "targets": [\n                        {\n                            "expr": "node_memory_MemTotal_bytes{instance=\\"$host\\"}",\n                            "legendFormat": "Total"\n                        },\n                        {\n                            "expr": "node_memory_MemTotal_bytes{instance=\\"$host\\"} - node_memory_MemAvailable_bytes{instance=\\"$host\\"}",\n                            "legendFormat": "Used"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {"unit": "bytes"}\n                    }\n                },\n\n                # Disk\n                {\n                    "id": 3,\n                    "type": "timeseries",\n                    "title": "Disk Usage",\n                    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},\n                    "targets": [{\n                        "expr": "(node_filesystem_size_bytes{instance=\\"$host\\",mountpoint=\\"/\\"} - node_filesystem_avail_bytes{instance=\\"$host\\",mountpoint=\\"/\\"}) / node_filesystem_size_bytes{instance=\\"$host\\",mountpoint=\\"/\\"} * 100",\n                        "legendFormat": "/ (root)"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {"unit": "percent"}\n                    }\n                },\n\n                # Network\n                {\n                    "id": 4,\n                    "type": "timeseries",\n                    "title": "Network Traffic",\n                    "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},\n                    "targets": [\n                        {\n                            "expr": "rate(node_network_receive_bytes_total{instance=\\"$host\\",device!~\\"lo\\"}[5m])",\n                            "legendFormat": "RX {{device}}"\n                        },\n                        {\n                            "expr": "rate(node_network_transmit_bytes_total{instance=\\"$host\\",device!~\\"lo\\"}[5m])",\n                            "legendFormat": "TX {{device}}"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {"unit": "Bps"}\n                    }\n                }\n            ]\n        }\n    }\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ub300\uc2dc\ubcf4\ub4dc",children:"\ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ub300\uc2dc\ubcf4\ub4dc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# business_dashboard.py\n"""\ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ub300\uc2dc\ubcf4\ub4dc"""\n\ndef create_business_dashboard():\n    """\ube44\uc988\ub2c8\uc2a4 KPI \ub300\uc2dc\ubcf4\ub4dc"""\n\n    return {\n        "dashboard": {\n            "title": "Business Metrics",\n            "tags": ["business", "kpi"],\n\n            "panels": [\n                # Revenue\n                {\n                    "id": 1,\n                    "type": "stat",\n                    "title": "Revenue (24h)",\n                    "gridPos": {"h": 6, "w": 8, "x": 0, "y": 0},\n                    "targets": [{\n                        "expr": "sum(increase(order_revenue_total[24h]))"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "currencyUSD",\n                            "decimals": 0\n                        }\n                    },\n                    "options": {\n                        "graphMode": "area",\n                        "colorMode": "value"\n                    }\n                },\n\n                # Orders\n                {\n                    "id": 2,\n                    "type": "stat",\n                    "title": "Orders (24h)",\n                    "gridPos": {"h": 6, "w": 8, "x": 8, "y": 0},\n                    "targets": [{\n                        "expr": "sum(increase(orders_total[24h]))"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {"unit": "short"}\n                    }\n                },\n\n                # Active Users\n                {\n                    "id": 3,\n                    "type": "stat",\n                    "title": "Active Users",\n                    "gridPos": {"h": 6, "w": 8, "x": 16, "y": 0},\n                    "targets": [{\n                        "expr": "active_users"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {"unit": "short"}\n                    }\n                },\n\n                # Revenue Trend\n                {\n                    "id": 4,\n                    "type": "timeseries",\n                    "title": "Revenue Trend",\n                    "gridPos": {"h": 8, "w": 16, "x": 0, "y": 6},\n                    "targets": [{\n                        "expr": "sum(rate(order_revenue_total[1h]))",\n                        "legendFormat": "Revenue/hour"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {"unit": "currencyUSD"}\n                    }\n                },\n\n                # Conversion Funnel\n                {\n                    "id": 5,\n                    "type": "bargauge",\n                    "title": "Conversion Funnel",\n                    "gridPos": {"h": 8, "w": 8, "x": 16, "y": 6},\n                    "targets": [\n                        {\n                            "expr": "page_views_total",\n                            "legendFormat": "Page Views"\n                        },\n                        {\n                            "expr": "add_to_cart_total",\n                            "legendFormat": "Add to Cart"\n                        },\n                        {\n                            "expr": "checkout_started_total",\n                            "legendFormat": "Checkout Started"\n                        },\n                        {\n                            "expr": "orders_total",\n                            "legendFormat": "Orders Completed"\n                        }\n                    ],\n                    "options": {\n                        "orientation": "horizontal",\n                        "displayMode": "gradient"\n                    }\n                },\n\n                # Top Products\n                {\n                    "id": 6,\n                    "type": "table",\n                    "title": "Top Products (24h)",\n                    "gridPos": {"h": 8, "w": 12, "x": 0, "y": 14},\n                    "targets": [{\n                        "expr": "topk(10, sum by (product_name) (increase(product_sales_total[24h])))",\n                        "format": "table",\n                        "instant": True\n                    }]\n                },\n\n                # User Activity\n                {\n                    "id": 7,\n                    "type": "timeseries",\n                    "title": "User Activity",\n                    "gridPos": {"h": 8, "w": 12, "x": 12, "y": 14},\n                    "targets": [\n                        {\n                            "expr": "sum(rate(user_login_total[5m]))",\n                            "legendFormat": "Logins"\n                        },\n                        {\n                            "expr": "sum(rate(user_signup_total[5m]))",\n                            "legendFormat": "Signups"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n'})}),"\n",(0,r.jsx)(e.h2,{id:"411-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"4.11 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(e.h3,{id:"\ub300\uc2dc\ubcf4\ub4dc-\uc124\uacc4-\uc6d0\uce59",children:"\ub300\uc2dc\ubcf4\ub4dc \uc124\uacc4 \uc6d0\uce59"}),"\n",(0,r.jsxs)(e.admonition,{title:"Golden Signal Dashboard",type:"tip",children:[(0,r.jsx)(e.p,{children:"\ubaa8\ub4e0 \uc11c\ube44\uc2a4 \ub300\uc2dc\ubcf4\ub4dc\ub294 4\uac00\uc9c0 Golden Signals\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4:"}),(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Traffic"}),": \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc694\uccad\uc744 \ubc1b\uace0 \uc788\ub294\uac00?"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Errors"}),": \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc694\uccad\uc774 \uc2e4\ud328\ud558\ub294\uac00?"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Latency"}),": \uc694\uccad\uc774 \uc5bc\ub9c8\ub098 \uc624\ub798 \uac78\ub9ac\ub294\uac00?"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Saturation"}),": \ub9ac\uc18c\uc2a4\uac00 \uc5bc\ub9c8\ub098 \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uac00?"]}),"\n"]})]}),"\n",(0,r.jsx)(e.h4,{id:"1-\ub808\uc774\uc544\uc6c3-\uad6c\uc870",children:"1. \ub808\uc774\uc544\uc6c3 \uad6c\uc870"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\uad8c\uc7a5 \ub300\uc2dc\ubcf4\ub4dc \ub808\uc774\uc544\uc6c3"""\n\n# Top: \uac00\uc7a5 \uc911\uc694\ud55c \uba54\ud2b8\ub9ad (SLA, Golden Signals)\n# - Stat \ud328\ub110\ub85c \ud55c\ub208\uc5d0 \ubcfc \uc218 \uc788\uac8c\n# - 4-6\uac1c\uc758 \ud575\uc2ec \uba54\ud2b8\ub9ad\n\n# Middle: \uc0c1\uc138 \ubd84\uc11d\n# - \uc2dc\uacc4\uc5f4 \uadf8\ub798\ud504\n# - \uce74\ud14c\uace0\ub9ac\ubcc4\ub85c Row\ub85c \ubd84\ub9ac\n\n# Bottom: \ucd94\uac00 \uc815\ubcf4\n# - \ud14c\uc774\ube14, \ub85c\uadf8, \uc0c1\uc138 \uba54\ud2b8\ub9ad\n'})}),"\n",(0,r.jsx)(e.h4,{id:"2-\uc0c9\uc0c1-\uc0ac\uc6a9",children:"2. \uc0c9\uc0c1 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc784\uacc4\uac12 \uc0c9\uc0c1 \ud45c\uc900\nTHRESHOLDS = {\n    "good": "#73BF69",      # \ub179\uc0c9\n    "warning": "#F2CC0C",   # \ub178\ub780\uc0c9\n    "critical": "#F2495C"   # \ube68\uac04\uc0c9\n}\n\n# \uc0ac\uc6a9 \uc608\n{\n    "thresholds": {\n        "steps": [\n            {"value": 0, "color": THRESHOLDS["good"]},\n            {"value": 70, "color": THRESHOLDS["warning"]},\n            {"value": 90, "color": THRESHOLDS["critical"]}\n        ]\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"3-\ubcc0\uc218-\ud65c\uc6a9",children:"3. \ubcc0\uc218 \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\ud6a8\uacfc\uc801\uc778 \ubcc0\uc218 \uc0ac\uc6a9"""\n\n# \ud658\uacbd \ubd84\ub9ac\n{\n    "name": "environment",\n    "type": "custom",\n    "query": "production,staging,development",\n    "current": {"value": "production"}\n}\n\n# \ub3d9\uc801 \uc778\uc2a4\ud134\uc2a4 \uc120\ud0dd\n{\n    "name": "instance",\n    "type": "query",\n    "query": "label_values(up{environment=\\"$environment\\"}, instance)",\n    "multi": True,\n    "includeAll": True\n}\n\n# Auto interval\n{\n    "name": "interval",\n    "type": "interval",\n    "auto": True,\n    "auto_min": "1m",\n    "auto_count": 30\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"4-\ud328\ub110-\uc81c\ubaa9\uacfc-\uc124\uba85",children:"4. \ud328\ub110 \uc81c\ubaa9\uacfc \uc124\uba85"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc88b\uc740 \uc608\n{\n    "title": "API Request Rate",\n    "description": "Number of HTTP requests per second. Sudden drops may indicate service issues."\n}\n\n# \ub098\uc05c \uc608\n{\n    "title": "Requests",  # \ub108\ubb34 \ubaa8\ud638\ud568\n    "description": ""     # \uc124\uba85 \uc5c6\uc74c\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"5-\ub2e8\uc704-\uc124\uc815",children:"5. \ub2e8\uc704 \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\uc62c\ubc14\ub978 \ub2e8\uc704 \uc0ac\uc6a9"""\n\nUNITS = {\n    "requests_per_second": "reqps",\n    "bytes": "bytes",\n    "bits_per_second": "bps",\n    "percent": "percent",\n    "seconds": "s",\n    "milliseconds": "ms",\n    "currency": "currencyUSD",\n    "count": "short"\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\ub300\uc2dc\ubcf4\ub4dc \uc131\ub2a5 \ucd5c\uc801\ud654"""\n\n# 1. \ucffc\ub9ac \ucd5c\uc801\ud654\n# \ub098\uc05c \uc608 - \ub108\ubb34 \ub9ce\uc740 \uc2dc\ub9ac\uc988\n"rate(http_requests_total[5m])"  # \ubaa8\ub4e0 \ub808\uc774\ube14\n\n# \uc88b\uc740 \uc608 - \ud544\uc694\ud55c \uac83\ub9cc\n"sum by (endpoint) (rate(http_requests_total{service=\\"api\\"}[5m]))"\n\n# 2. \uc801\uc808\ud55c Refresh \uac04\uaca9\n{\n    "refresh": "30s"  # \uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1\n    # \ub610\ub294\n    "refresh": "5m"   # \ud2b8\ub80c\ub4dc \ubd84\uc11d\n}\n\n# 3. Time Range \uc81c\ud55c\n{\n    "time": {\n        "from": "now-6h",  # 24h\ubcf4\ub2e4 \uc9e7\uac8c\n        "to": "now"\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc54c\ub9bc-\ud1b5\ud569",children:"\uc54c\ub9bc \ud1b5\ud569"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\ub300\uc2dc\ubcf4\ub4dc\uc640 \uc54c\ub9bc \uc5f0\ub3d9"""\n\n# \ud328\ub110\uc5d0 \uc54c\ub9bc \ub9c1\ud06c \ucd94\uac00\n{\n    "title": "High Error Rate",\n    "description": "Error rate > 5%. Alert: #alert-high-errors",\n    "links": [\n        {\n            "title": "View Alert",\n            "url": "/alerting/list?queryString=high-errors"\n        },\n        {\n            "title": "Runbook",\n            "url": "https://wiki.company.com/runbooks/high-errors"\n        }\n    ]\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubc84\uc804-\uad00\ub9ac",children:"\ubc84\uc804 \uad00\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# \ub300\uc2dc\ubcf4\ub4dc\ub97c Git\uc73c\ub85c \uad00\ub9ac\n\n# 1. JSON \ub0b4\ubcf4\ub0b4\uae30\ncurl -u admin:admin \\\n  "http://localhost:3000/api/dashboards/uid/abc123" \\\n  > dashboards/web-app.json\n\n# 2. Git \ucee4\ubc0b\ngit add dashboards/\ngit commit -m "Update web app dashboard"\ngit push\n\n# 3. \uc790\ub3d9 \ubc30\ud3ec\n# CI/CD \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c Grafana API\ub85c \uc5c5\ub85c\ub4dc\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# deploy_dashboards.py\n"""\ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \ubc30\ud3ec"""\n\nimport os\nimport json\nfrom pathlib import Path\nfrom grafana_client import GrafanaClient\n\ndef deploy_dashboards(dashboard_dir: str):\n    """\ub514\ub809\ud1a0\ub9ac\uc758 \ubaa8\ub4e0 \ub300\uc2dc\ubcf4\ub4dc \ubc30\ud3ec"""\n\n    client = GrafanaClient(\n        url=os.getenv("GRAFANA_URL", "http://localhost:3000"),\n        api_key=os.getenv("GRAFANA_API_KEY")\n    )\n\n    for dashboard_file in Path(dashboard_dir).glob("*.json"):\n        print(f"Deploying {dashboard_file.name}...")\n\n        with open(dashboard_file) as f:\n            dashboard = json.load(f)\n\n        try:\n            result = client.create_dashboard(dashboard)\n            print(f"\u2713 {dashboard_file.name}: {result[\'url\']}")\n        except Exception as e:\n            print(f"\u2717 {dashboard_file.name}: {e}")\n\n\nif __name__ == "__main__":\n    deploy_dashboards("./dashboards")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\uc5f0\uc2b5-\ubb38\uc81c",children:"\uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-1-\uae30\ubcf8-\ub300\uc2dc\ubcf4\ub4dc-\ub9cc\ub4e4\uae30",children:"\ubb38\uc81c 1: \uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc \ub9cc\ub4e4\uae30"}),"\n",(0,r.jsx)(e.p,{children:"\ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\ub294 \ub300\uc2dc\ubcf4\ub4dc\ub97c \uc0dd\uc131\ud558\uc138\uc694:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Request rate (Stat \ud328\ub110)"}),"\n",(0,r.jsx)(e.li,{children:"Error rate (Gauge \ud328\ub110)"}),"\n",(0,r.jsx)(e.li,{children:"Response time percentiles (Graph \ud328\ub110)"}),"\n"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def create_basic_dashboard():\n    return {\n        "dashboard": {\n            "title": "Basic Monitoring",\n            "panels": [\n                {\n                    "id": 1,\n                    "type": "stat",\n                    "title": "Request Rate",\n                    "gridPos": {"h": 4, "w": 8, "x": 0, "y": 0},\n                    "targets": [{\n                        "expr": "sum(rate(http_requests_total[5m]))"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {"unit": "reqps"}\n                    }\n                },\n                {\n                    "id": 2,\n                    "type": "gauge",\n                    "title": "Error Rate",\n                    "gridPos": {"h": 4, "w": 8, "x": 8, "y": 0},\n                    "targets": [{\n                        "expr": "sum(rate(http_requests_total{status=~\\"5..\\"}[5m])) / sum(rate(http_requests_total[5m])) * 100"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {\n                            "unit": "percent",\n                            "min": 0,\n                            "max": 100,\n                            "thresholds": {\n                                "steps": [\n                                    {"value": 0, "color": "green"},\n                                    {"value": 1, "color": "yellow"},\n                                    {"value": 5, "color": "red"}\n                                ]\n                            }\n                        }\n                    }\n                },\n                {\n                    "id": 3,\n                    "type": "timeseries",\n                    "title": "Response Time (Percentiles)",\n                    "gridPos": {"h": 8, "w": 16, "x": 0, "y": 4},\n                    "targets": [\n                        {\n                            "expr": "histogram_quantile(0.99, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))",\n                            "legendFormat": "P99"\n                        },\n                        {\n                            "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))",\n                            "legendFormat": "P95"\n                        },\n                        {\n                            "expr": "histogram_quantile(0.50, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))",\n                            "legendFormat": "P50"\n                        }\n                    ],\n                    "fieldConfig": {\n                        "defaults": {"unit": "s"}\n                    }\n                }\n            ]\n        },\n        "overwrite": True\n    }\n\n# Grafana\uc5d0 \uc5c5\ub85c\ub4dc\nclient = GrafanaClient("http://localhost:3000", username="admin", password="admin")\nresult = client.create_dashboard(create_basic_dashboard())\nprint(f"Dashboard created: {result[\'url\']}")\n'})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-2-\ubcc0\uc218\ub97c-\uc0ac\uc6a9\ud55c-\ub3d9\uc801-\ub300\uc2dc\ubcf4\ub4dc",children:"\ubb38\uc81c 2: \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc801 \ub300\uc2dc\ubcf4\ub4dc"}),"\n",(0,r.jsx)(e.p,{children:"environment\uc640 service \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ub300\uc2dc\ubcf4\ub4dc\ub97c \ub9cc\ub4dc\uc138\uc694."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def create_dynamic_dashboard():\n    return {\n        "dashboard": {\n            "title": "Dynamic Service Dashboard",\n            "templating": {\n                "list": [\n                    {\n                        "name": "environment",\n                        "type": "custom",\n                        "query": "production,staging,development",\n                        "current": {"value": "production"}\n                    },\n                    {\n                        "name": "service",\n                        "type": "query",\n                        "query": "label_values(http_requests_total{environment=\\"$environment\\"}, service)",\n                        "refresh": 1,\n                        "multi": False\n                    }\n                ]\n            },\n            "panels": [\n                {\n                    "id": 1,\n                    "type": "stat",\n                    "title": "$service Request Rate",\n                    "gridPos": {"h": 4, "w": 12, "x": 0, "y": 0},\n                    "targets": [{\n                        "expr": "sum(rate(http_requests_total{environment=\\"$environment\\",service=\\"$service\\"}[5m]))"\n                    }],\n                    "fieldConfig": {\n                        "defaults": {"unit": "reqps"}\n                    }\n                },\n                {\n                    "id": 2,\n                    "type": "timeseries",\n                    "title": "$service - Requests by Endpoint",\n                    "gridPos": {"h": 8, "w": 24, "x": 0, "y": 4},\n                    "targets": [{\n                        "expr": "sum by (endpoint) (rate(http_requests_total{environment=\\"$environment\\",service=\\"$service\\"}[5m]))",\n                        "legendFormat": "{{endpoint}}"\n                    }]\n                }\n            ]\n        },\n        "overwrite": True\n    }\n'})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-3-python\uc73c\ub85c-\ub300\uc2dc\ubcf4\ub4dc-\uc790\ub3d9-\uc0dd\uc131",children:"\ubb38\uc81c 3: Python\uc73c\ub85c \ub300\uc2dc\ubcf4\ub4dc \uc790\ub3d9 \uc0dd\uc131"}),"\n",(0,r.jsx)(e.p,{children:"3\uac1c\uc758 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4\uc5d0 \ub300\ud55c \ub300\uc2dc\ubcf4\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from grafana_client import GrafanaClient\n\ndef auto_generate_dashboards():\n    services = ["user-service", "product-service", "order-service"]\n\n    client = GrafanaClient("http://localhost:3000", username="admin", password="admin")\n\n    # \ud3f4\ub354 \uc0dd\uc131\n    try:\n        folder = client.create_folder("Auto-Generated")\n        folder_uid = folder[\'uid\']\n    except:\n        folders = client.get_folders()\n        folder_uid = next((f[\'uid\'] for f in folders if f[\'title\'] == \'Auto-Generated\'), None)\n\n    # \uac01 \uc11c\ube44\uc2a4\uc6a9 \ub300\uc2dc\ubcf4\ub4dc \uc0dd\uc131\n    for service in services:\n        dashboard = {\n            "dashboard": {\n                "title": f"{service} Dashboard",\n                "tags": ["auto-generated", service],\n                "panels": [\n                    {\n                        "id": 1,\n                        "type": "stat",\n                        "title": "Request Rate",\n                        "gridPos": {"h": 4, "w": 8, "x": 0, "y": 0},\n                        "targets": [{\n                            "expr": f"sum(rate(http_requests_total{{service=\\"{service}\\"}}[5m]))"\n                        }],\n                        "fieldConfig": {"defaults": {"unit": "reqps"}}\n                    },\n                    {\n                        "id": 2,\n                        "type": "gauge",\n                        "title": "Error Rate",\n                        "gridPos": {"h": 4, "w": 8, "x": 8, "y": 0},\n                        "targets": [{\n                            "expr": f"sum(rate(http_requests_total{{service=\\"{service}\\",status=~\\"5..\\"}}[5m])) / sum(rate(http_requests_total{{service=\\"{service}\\"}}[5m])) * 100"\n                        }],\n                        "fieldConfig": {\n                            "defaults": {\n                                "unit": "percent",\n                                "thresholds": {\n                                    "steps": [\n                                        {"value": 0, "color": "green"},\n                                        {"value": 1, "color": "yellow"},\n                                        {"value": 5, "color": "red"}\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    {\n                        "id": 3,\n                        "type": "timeseries",\n                        "title": "Traffic Over Time",\n                        "gridPos": {"h": 8, "w": 16, "x": 0, "y": 4},\n                        "targets": [{\n                            "expr": f"sum by (endpoint) (rate(http_requests_total{{service=\\"{service}\\"}}[5m]))",\n                            "legendFormat": "{{endpoint}}"\n                        }]\n                    }\n                ]\n            },\n            "folderUid": folder_uid,\n            "overwrite": True\n        }\n\n        result = client.create_dashboard(dashboard)\n        print(f"\u2713 Created dashboard for {service}: {result[\'url\']}")\n\nif __name__ == "__main__":\n    auto_generate_dashboards()\n'})})]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:["\ub2e4\uc74c: ",(0,r.jsx)(e.a,{href:"./alerting",children:"Alerting"})," - Prometheus \uc54c\ub9bc \uc2dc\uc2a4\ud15c \uad6c\ucd95\ud558\uae30"]})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(n){const e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);