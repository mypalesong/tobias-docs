"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[9503],{4723:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"python/advanced/testing","title":"6. \ud14c\uc2a4\ud305","description":"\ud14c\uc2a4\ud305\uc740 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \ubd80\ubd84 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \uc774 \uc139\uc158\uc5d0\uc11c\ub294 Python\uc758 \ub2e4\uc591\ud55c \ud14c\uc2a4\ud305 \ub3c4\uad6c\uc640 \uae30\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.","source":"@site/docs/python/advanced/testing.md","sourceDirName":"python/advanced","slug":"/python/advanced/testing","permalink":"/tobias-docs/comp-2/docs/python/advanced/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/advanced/testing.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"pythonSidebar","previous":{"title":"5. \ud0c0\uc785 \ud78c\ud305","permalink":"/tobias-docs/comp-2/docs/python/advanced/typing"},"next":{"title":"1. Python \uc18c\uac1c \ubc0f \uc124\uce58","permalink":"/tobias-docs/comp-2/docs/python/basics/intro"}}');var r=s(4848),a=s(8453);const i={sidebar_position:6},l="6. \ud14c\uc2a4\ud305",c={},o=[{value:"6.1 \ud14c\uc2a4\ud305\uc758 \uc911\uc694\uc131",id:"61-\ud14c\uc2a4\ud305\uc758-\uc911\uc694\uc131",level:2},{value:"6.1.1 \uc65c \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud574\uc57c \ud558\ub294\uac00?",id:"611-\uc65c-\ud14c\uc2a4\ud2b8\ub97c-\uc791\uc131\ud574\uc57c-\ud558\ub294\uac00",level:3},{value:"6.1.2 \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c (TDD)",id:"612-\ud14c\uc2a4\ud2b8-\uc8fc\ub3c4-\uac1c\ubc1c-tdd",level:3},{value:"6.2 unittest \ubaa8\ub4c8",id:"62-unittest-\ubaa8\ub4c8",level:2},{value:"6.2.1 \uae30\ubcf8 \uad6c\uc870",id:"621-\uae30\ubcf8-\uad6c\uc870",level:3},{value:"6.2.2 \uc8fc\uc694 Assertion \uba54\uc11c\ub4dc",id:"622-\uc8fc\uc694-assertion-\uba54\uc11c\ub4dc",level:3},{value:"6.2.3 setUp\uacfc tearDown",id:"623-setup\uacfc-teardown",level:3},{value:"6.2.4 \ud074\ub798\uc2a4 \ub808\ubca8 setUp/tearDown",id:"624-\ud074\ub798\uc2a4-\ub808\ubca8-setupteardown",level:3},{value:"6.3 pytest",id:"63-pytest",level:2},{value:"6.3.1 \uc124\uce58 \ubc0f \uae30\ubcf8 \uc0ac\uc6a9",id:"631-\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc0ac\uc6a9",level:3},{value:"6.3.2 pytest Fixtures",id:"632-pytest-fixtures",level:3},{value:"6.3.3 Fixture Scope",id:"633-fixture-scope",level:3},{value:"6.3.4 Fixture\uc758 setUp/tearDown",id:"634-fixture\uc758-setupteardown",level:3},{value:"6.3.5 Parametrize",id:"635-parametrize",level:3},{value:"6.3.6 pytest Marks",id:"636-pytest-marks",level:3},{value:"6.4 \ud14c\uc2a4\ud2b8 \uad6c\uc870\uc640 \ud328\ud134",id:"64-\ud14c\uc2a4\ud2b8-\uad6c\uc870\uc640-\ud328\ud134",level:2},{value:"6.4.1 AAA \ud328\ud134 (Arrange-Act-Assert)",id:"641-aaa-\ud328\ud134-arrange-act-assert",level:3},{value:"6.4.2 Given-When-Then \ud328\ud134",id:"642-given-when-then-\ud328\ud134",level:3},{value:"6.4.3 \ud14c\uc2a4\ud2b8 \uaca9\ub9ac (Test Isolation)",id:"643-\ud14c\uc2a4\ud2b8-\uaca9\ub9ac-test-isolation",level:3},{value:"6.5 \uc608\uc678 \ud14c\uc2a4\ud305",id:"65-\uc608\uc678-\ud14c\uc2a4\ud305",level:2},{value:"6.5.1 unittest\ub85c \uc608\uc678 \ud14c\uc2a4\ud2b8",id:"651-unittest\ub85c-\uc608\uc678-\ud14c\uc2a4\ud2b8",level:3},{value:"6.5.2 pytest\ub85c \uc608\uc678 \ud14c\uc2a4\ud2b8",id:"652-pytest\ub85c-\uc608\uc678-\ud14c\uc2a4\ud2b8",level:3},{value:"6.6 Mocking",id:"66-mocking",level:2},{value:"6.6.1 unittest.mock \uae30\ubcf8",id:"661-unittestmock-\uae30\ubcf8",level:3},{value:"6.6.2 patch \ub370\ucf54\ub808\uc774\ud130",id:"662-patch-\ub370\ucf54\ub808\uc774\ud130",level:3},{value:"6.6.3 patch\ub97c \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub85c \uc0ac\uc6a9",id:"663-patch\ub97c-\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800\ub85c-\uc0ac\uc6a9",level:3},{value:"6.6.4 \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc Mocking",id:"664-\ud074\ub798\uc2a4-\uba54\uc11c\ub4dc-mocking",level:3},{value:"6.6.5 pytest-mock",id:"665-pytest-mock",level:3},{value:"6.7 \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0",id:"67-\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",level:2},{value:"6.7.1 coverage.py \uc124\uce58 \ubc0f \uc0ac\uc6a9",id:"671-coveragepy-\uc124\uce58-\ubc0f-\uc0ac\uc6a9",level:3},{value:"6.7.2 \uc124\uc815 \ud30c\uc77c",id:"672-\uc124\uc815-\ud30c\uc77c",level:3},{value:"6.7.3 \ucee4\ubc84\ub9ac\uc9c0 \ud574\uc11d",id:"673-\ucee4\ubc84\ub9ac\uc9c0-\ud574\uc11d",level:3},{value:"6.8 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 vs \ud1b5\ud569 \ud14c\uc2a4\ud2b8",id:"68-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-vs-\ud1b5\ud569-\ud14c\uc2a4\ud2b8",level:2},{value:"6.8.1 \ud14c\uc2a4\ud2b8 \ud53c\ub77c\ubbf8\ub4dc",id:"681-\ud14c\uc2a4\ud2b8-\ud53c\ub77c\ubbf8\ub4dc",level:3},{value:"6.8.2 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 (Unit Test)",id:"682-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-unit-test",level:3},{value:"6.8.3 \ud1b5\ud569 \ud14c\uc2a4\ud2b8 (Integration Test)",id:"683-\ud1b5\ud569-\ud14c\uc2a4\ud2b8-integration-test",level:3},{value:"6.8.4 E2E \ud14c\uc2a4\ud2b8 \uc608\uc2dc",id:"684-e2e-\ud14c\uc2a4\ud2b8-\uc608\uc2dc",level:3},{value:"6.9 \ube44\ub3d9\uae30 \ucf54\ub4dc \ud14c\uc2a4\ud305",id:"69-\ube44\ub3d9\uae30-\ucf54\ub4dc-\ud14c\uc2a4\ud305",level:2},{value:"6.9.1 pytest-asyncio",id:"691-pytest-asyncio",level:3},{value:"6.9.2 aiohttp \ud14c\uc2a4\ud305",id:"692-aiohttp-\ud14c\uc2a4\ud305",level:3},{value:"6.9.3 \ube44\ub3d9\uae30 Mock",id:"693-\ube44\ub3d9\uae30-mock",level:3},{value:"6.10 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc2a4\ud305",id:"610-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ud14c\uc2a4\ud305",level:2},{value:"6.10.1 SQLite \uc778\uba54\ubaa8\ub9ac \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"6101-sqlite-\uc778\uba54\ubaa8\ub9ac-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:3},{value:"6.10.2 SQLAlchemy \ud14c\uc2a4\ud305",id:"6102-sqlalchemy-\ud14c\uc2a4\ud305",level:3},{value:"6.10.3 \ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31 \ud328\ud134",id:"6103-\ud2b8\ub79c\uc7ad\uc158-\ub864\ubc31-\ud328\ud134",level:3},{value:"6.11 API \ud14c\uc2a4\ud305",id:"611-api-\ud14c\uc2a4\ud305",level:2},{value:"6.11.1 FastAPI \ud14c\uc2a4\ud305",id:"6111-fastapi-\ud14c\uc2a4\ud305",level:3},{value:"6.11.2 Flask \ud14c\uc2a4\ud305",id:"6112-flask-\ud14c\uc2a4\ud305",level:3},{value:"6.11.3 requests-mock",id:"6113-requests-mock",level:3},{value:"6.12 \ud14c\uc2a4\ud2b8 \ubaa8\ubc94 \uc0ac\ub840",id:"612-\ud14c\uc2a4\ud2b8-\ubaa8\ubc94-\uc0ac\ub840",level:2},{value:"6.12.1 \ud14c\uc2a4\ud2b8 \uba85\uba85 \uaddc\uce59",id:"6121-\ud14c\uc2a4\ud2b8-\uba85\uba85-\uaddc\uce59",level:3},{value:"6.12.2 DRY \uc6d0\uce59 (Don&#39;t Repeat Yourself)",id:"6122-dry-\uc6d0\uce59-dont-repeat-yourself",level:3},{value:"6.12.3 \ud558\ub098\uc758 \uac1c\ub150\ub9cc \ud14c\uc2a4\ud2b8",id:"6123-\ud558\ub098\uc758-\uac1c\ub150\ub9cc-\ud14c\uc2a4\ud2b8",level:3},{value:"6.12.4 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uba85\ud655\uc131",id:"6124-\ud14c\uc2a4\ud2b8-\ub370\uc774\ud130-\uba85\ud655\uc131",level:3},{value:"6.12.5 \ub3c5\ub9bd\uc801\uc778 \ud14c\uc2a4\ud2b8",id:"6125-\ub3c5\ub9bd\uc801\uc778-\ud14c\uc2a4\ud2b8",level:3},{value:"6.13 TDD \uc2e4\uc804 \uc608\uc81c",id:"613-tdd-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"6.13.1 TDD\ub85c Stack \uad6c\ud604\ud558\uae30",id:"6131-tdd\ub85c-stack-\uad6c\ud604\ud558\uae30",level:3},{value:"6.13.2 TDD\ub85c \uc740\ud589 \uacc4\uc88c \uc2dc\uc2a4\ud15c \uad6c\ud604",id:"6132-tdd\ub85c-\uc740\ud589-\uacc4\uc88c-\uc2dc\uc2a4\ud15c-\uad6c\ud604",level:3},{value:"6.14 \uc9c0\uc18d\uc801 \ud1b5\ud569 (CI)",id:"614-\uc9c0\uc18d\uc801-\ud1b5\ud569-ci",level:2},{value:"6.14.1 GitHub Actions \uc608\uc81c",id:"6141-github-actions-\uc608\uc81c",level:3},{value:"6.14.2 pytest.ini \uc124\uc815",id:"6142-pytestini-\uc124\uc815",level:3},{value:"6.14.3 tox\ub97c \uc774\uc6a9\ud55c \ub2e4\uc911 \ud658\uacbd \ud14c\uc2a4\ud2b8",id:"6143-tox\ub97c-\uc774\uc6a9\ud55c-\ub2e4\uc911-\ud658\uacbd-\ud14c\uc2a4\ud2b8",level:3},{value:"6.15 \uc2e4\uc804 \uc608\uc81c",id:"615-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"6.15.1 URL \ub2e8\ucd95 \uc11c\ube44\uc2a4 \ud14c\uc2a4\ud2b8",id:"6151-url-\ub2e8\ucd95-\uc11c\ube44\uc2a4-\ud14c\uc2a4\ud2b8",level:3},{value:"6.15.2 \uce90\uc2dc \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8",id:"6152-\uce90\uc2dc-\uc2dc\uc2a4\ud15c-\ud14c\uc2a4\ud2b8",level:3},{value:"6.15.3 \uc774\uba54\uc77c \ubc1c\ub9ac\ub370\uc774\ud130 \ud14c\uc2a4\ud2b8",id:"6153-\uc774\uba54\uc77c-\ubc1c\ub9ac\ub370\uc774\ud130-\ud14c\uc2a4\ud2b8",level:3},{value:"6.16 \uc5f0\uc2b5 \ubb38\uc81c",id:"616-\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\uc5f0\uc2b5 1: \uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8 \uc791\uc131",id:"\uc5f0\uc2b5-1-\uacc4\uc0b0\uae30-\ud14c\uc2a4\ud2b8-\uc791\uc131",level:3},{value:"\uc5f0\uc2b5 2: Mock\uc744 \uc0ac\uc6a9\ud55c API \ud074\ub77c\uc774\uc5b8\ud2b8 \ud14c\uc2a4\ud2b8",id:"\uc5f0\uc2b5-2-mock\uc744-\uc0ac\uc6a9\ud55c-api-\ud074\ub77c\uc774\uc5b8\ud2b8-\ud14c\uc2a4\ud2b8",level:3},{value:"\uc5f0\uc2b5 3: TDD\ub85c Queue \uad6c\ud604",id:"\uc5f0\uc2b5-3-tdd\ub85c-queue-\uad6c\ud604",level:3},{value:"6.17 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"617-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:2},{value:"\ud14c\uc2a4\ud2b8 \uc791\uc131 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ud14c\uc2a4\ud2b8-\uc791\uc131-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"\ucf54\ub4dc \ub9ac\ubdf0 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ucf54\ub4dc-\ub9ac\ubdf0-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"6.18 \ud301\uacfc \ud2b8\ub9ad",id:"618-\ud301\uacfc-\ud2b8\ub9ad",level:2},{value:"6.19 \ucd94\uac00 \ub9ac\uc18c\uc2a4",id:"619-\ucd94\uac00-\ub9ac\uc18c\uc2a4",level:2},{value:"\ucd94\ucc9c \ub3c4\uc11c",id:"\ucd94\ucc9c-\ub3c4\uc11c",level:3},{value:"\uc720\uc6a9\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac",id:"\uc720\uc6a9\ud55c-\ub77c\uc774\ube0c\ub7ec\ub9ac",level:3},{value:"\uc815\ub9ac",id:"\uc815\ub9ac",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"6-\ud14c\uc2a4\ud305",children:"6. \ud14c\uc2a4\ud305"})}),"\n",(0,r.jsx)(n.p,{children:"\ud14c\uc2a4\ud305\uc740 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \ubd80\ubd84 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \uc774 \uc139\uc158\uc5d0\uc11c\ub294 Python\uc758 \ub2e4\uc591\ud55c \ud14c\uc2a4\ud305 \ub3c4\uad6c\uc640 \uae30\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"61-\ud14c\uc2a4\ud305\uc758-\uc911\uc694\uc131",children:"6.1 \ud14c\uc2a4\ud305\uc758 \uc911\uc694\uc131"}),"\n",(0,r.jsx)(n.h3,{id:"611-\uc65c-\ud14c\uc2a4\ud2b8\ub97c-\uc791\uc131\ud574\uc57c-\ud558\ub294\uac00",children:"6.1.1 \uc65c \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud574\uc57c \ud558\ub294\uac00?"}),"\n",(0,r.jsx)(n.p,{children:"\ud14c\uc2a4\ud2b8\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc810\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ubc84\uadf8 \uc870\uae30 \ubc1c\uacac"}),": \ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0 \ubc30\ud3ec\ub418\uae30 \uc804\uc5d0 \ubb38\uc81c\ub97c \ubc1c\uacac"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub9ac\ud329\ud1a0\ub9c1 \uc548\uc815\uc131"}),": \ucf54\ub4dc \ubcc0\uacbd \uc2dc \uae30\uc874 \uae30\ub2a5\uc774 \uae68\uc9c0\uc9c0 \uc54a\uc558\uc74c\uc744 \ud655\uc778"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ubb38\uc11c\ud654"}),": \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub294 \uc0ac\uc6a9 \uc608\uc2dc\uc774\uc790 \ubb38\uc11c \uc5ed\ud560"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc124\uacc4 \uac1c\uc120"}),": \ud14c\uc2a4\ud2b8 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub354 \ub098\uc740 \uc124\uacc4"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc790\uc2e0\uac10"}),": \ubc30\ud3ec \uc2dc \ud655\uc2e0\uc744 \uac00\uc9c8 \uc218 \uc788\uc74c"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"612-\ud14c\uc2a4\ud2b8-\uc8fc\ub3c4-\uac1c\ubc1c-tdd",children:"6.1.2 \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c (TDD)"}),"\n",(0,r.jsx)(n.p,{children:"TDD\ub294 \ub2e4\uc74c \uc0ac\uc774\ud074\uc744 \ub530\ub985\ub2c8\ub2e4:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1. Red (\uc2e4\ud328\ud558\ub294 \ud14c\uc2a4\ud2b8 \uc791\uc131)\n   \u2193\n2. Green (\ud14c\uc2a4\ud2b8\ub97c \ud1b5\uacfc\ud558\ub294 \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc \uc791\uc131)\n   \u2193\n3. Refactor (\ucf54\ub4dc \uac1c\uc120)\n   \u2193\n   (\ubc18\ubcf5)\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"TDD\uc758 \uc774\uc810",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uc694\uad6c\uc0ac\ud56d\uc744 \uba85\ud655\ud788 \uc774\ud574\ud558\uac8c \ub428"}),"\n",(0,r.jsx)(n.li,{children:"\uacfc\ub3c4\ud55c \uad6c\ud604\uc744 \ubc29\uc9c0"}),"\n",(0,r.jsx)(n.li,{children:"\ub192\uc740 \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0 \ub2ec\uc131"}),"\n",(0,r.jsx)(n.li,{children:"\uc124\uacc4\uac00 \uc790\uc5f0\uc2a4\ub7fd\uac8c \uac1c\uc120\ub428"}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"62-unittest-\ubaa8\ub4c8",children:"6.2 unittest \ubaa8\ub4c8"}),"\n",(0,r.jsx)(n.p,{children:"Python \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud14c\uc2a4\ud305 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"621-\uae30\ubcf8-\uad6c\uc870",children:"6.2.1 \uae30\ubcf8 \uad6c\uc870"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import unittest\n\nclass TestCalculator(unittest.TestCase):\n    def test_addition(self):\n        result = 2 + 2\n        self.assertEqual(result, 4)\n\n    def test_subtraction(self):\n        result = 5 - 3\n        self.assertEqual(result, 2)\n\nif __name__ == '__main__':\n    unittest.main()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"622-\uc8fc\uc694-assertion-\uba54\uc11c\ub4dc",children:"6.2.2 \uc8fc\uc694 Assertion \uba54\uc11c\ub4dc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import unittest\n\nclass TestAssertions(unittest.TestCase):\n    def test_equality(self):\n        self.assertEqual(1 + 1, 2)\n        self.assertNotEqual(1 + 1, 3)\n\n    def test_boolean(self):\n        self.assertTrue(True)\n        self.assertFalse(False)\n\n    def test_none(self):\n        result = None\n        self.assertIsNone(result)\n        self.assertIsNotNone("value")\n\n    def test_membership(self):\n        self.assertIn(1, [1, 2, 3])\n        self.assertNotIn(4, [1, 2, 3])\n\n    def test_type(self):\n        self.assertIsInstance(42, int)\n        self.assertIsInstance("hello", str)\n\n    def test_comparison(self):\n        self.assertGreater(5, 3)\n        self.assertLess(3, 5)\n        self.assertGreaterEqual(5, 5)\n        self.assertLessEqual(3, 5)\n\n    def test_almost_equal(self):\n        # \ubd80\ub3d9\uc18c\uc218\uc810 \ube44\uad50\n        self.assertAlmostEqual(1.1 + 2.2, 3.3, places=7)\n\n    def test_regex(self):\n        self.assertRegex("hello world", r"h.*d")\n\n    def test_raises(self):\n        # \uc608\uc678 \ubc1c\uc0dd \ud14c\uc2a4\ud2b8\n        with self.assertRaises(ZeroDivisionError):\n            1 / 0\n'})}),"\n",(0,r.jsx)(n.h3,{id:"623-setup\uacfc-teardown",children:"6.2.3 setUp\uacfc tearDown"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import unittest\nimport tempfile\nimport os\n\nclass TestFileOperations(unittest.TestCase):\n    def setUp(self):\n        """\uac01 \ud14c\uc2a4\ud2b8 \uba54\uc11c\ub4dc \uc2e4\ud589 \uc804\uc5d0 \ud638\ucd9c"""\n        self.test_dir = tempfile.mkdtemp()\n        self.test_file = os.path.join(self.test_dir, \'test.txt\')\n        print(f"\\nSetUp: \ud14c\uc2a4\ud2b8 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131 {self.test_dir}")\n\n    def tearDown(self):\n        """\uac01 \ud14c\uc2a4\ud2b8 \uba54\uc11c\ub4dc \uc2e4\ud589 \ud6c4\uc5d0 \ud638\ucd9c"""\n        import shutil\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n        print(f"TearDown: \ud14c\uc2a4\ud2b8 \ub514\ub809\ud1a0\ub9ac \uc0ad\uc81c")\n\n    def test_file_creation(self):\n        with open(self.test_file, \'w\') as f:\n            f.write("test content")\n\n        self.assertTrue(os.path.exists(self.test_file))\n\n    def test_file_reading(self):\n        with open(self.test_file, \'w\') as f:\n            f.write("test content")\n\n        with open(self.test_file, \'r\') as f:\n            content = f.read()\n\n        self.assertEqual(content, "test content")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"624-\ud074\ub798\uc2a4-\ub808\ubca8-setupteardown",children:"6.2.4 \ud074\ub798\uc2a4 \ub808\ubca8 setUp/tearDown"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import unittest\n\nclass TestDatabaseOperations(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        """\ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4 \uc2e4\ud589 \uc804 \ud55c \ubc88\ub9cc \ud638\ucd9c"""\n        print("\\nsetUpClass: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc124\uc815")\n        cls.db_connection = "database_connection_object"\n\n    @classmethod\n    def tearDownClass(cls):\n        """\ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4 \uc2e4\ud589 \ud6c4 \ud55c \ubc88\ub9cc \ud638\ucd9c"""\n        print("\\ntearDownClass: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc885\ub8cc")\n        cls.db_connection = None\n\n    def setUp(self):\n        """\uac01 \ud14c\uc2a4\ud2b8 \uc804\uc5d0 \uc2e4\ud589"""\n        print("  setUp: \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791")\n\n    def tearDown(self):\n        """\uac01 \ud14c\uc2a4\ud2b8 \ud6c4\uc5d0 \uc2e4\ud589"""\n        print("  tearDown: \ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31")\n\n    def test_insert(self):\n        print("    test_insert \uc2e4\ud589")\n        self.assertIsNotNone(self.db_connection)\n\n    def test_select(self):\n        print("    test_select \uc2e4\ud589")\n        self.assertIsNotNone(self.db_connection)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"63-pytest",children:"6.3 pytest"}),"\n",(0,r.jsx)(n.p,{children:"pytest\ub294 \ub354 \uac04\uacb0\ud558\uace0 \uac15\ub825\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \uc11c\ub4dc\ud30c\ud2f0 \ud14c\uc2a4\ud305 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"631-\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc0ac\uc6a9",children:"6.3.1 \uc124\uce58 \ubc0f \uae30\ubcf8 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install pytest\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# test_calculator.py\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\n# \ud14c\uc2a4\ud2b8 \ud568\uc218\ub294 test_\ub85c \uc2dc\uc791\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n    assert subtract(0, 0) == 0\n"})}),"\n",(0,r.jsx)(n.p,{children:"\uc2e4\ud589:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pytest test_calculator.py\npytest -v  # \uc0c1\uc138 \ucd9c\ub825\npytest -s  # print \ucd9c\ub825 \ud45c\uc2dc\n"})}),"\n",(0,r.jsx)(n.h3,{id:"632-pytest-fixtures",children:"6.3.2 pytest Fixtures"}),"\n",(0,r.jsx)(n.p,{children:"Fixture\ub294 \ud14c\uc2a4\ud2b8\uc5d0 \ud544\uc694\ud55c \ub370\uc774\ud130\ub098 \ub9ac\uc18c\uc2a4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\n@pytest.fixture\ndef sample_data():\n    """\ud14c\uc2a4\ud2b8\uc6a9 \uc0d8\ud50c \ub370\uc774\ud130"""\n    return [1, 2, 3, 4, 5]\n\n@pytest.fixture\ndef empty_list():\n    return []\n\ndef test_sum_with_fixture(sample_data):\n    assert sum(sample_data) == 15\n\ndef test_length_with_fixture(sample_data):\n    assert len(sample_data) == 5\n\ndef test_empty_list(empty_list):\n    assert len(empty_list) == 0\n'})}),"\n",(0,r.jsx)(n.h3,{id:"633-fixture-scope",children:"6.3.3 Fixture Scope"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\n@pytest.fixture(scope="function")  # \uae30\ubcf8\uac12: \uac01 \ud14c\uc2a4\ud2b8\ub9c8\ub2e4\ndef function_scope():\n    print("\\n  Function scope fixture")\n    return "function"\n\n@pytest.fixture(scope="class")  # \ud074\ub798\uc2a4\ub2f9 \ud55c \ubc88\ndef class_scope():\n    print("\\n  Class scope fixture")\n    return "class"\n\n@pytest.fixture(scope="module")  # \ubaa8\ub4c8\ub2f9 \ud55c \ubc88\ndef module_scope():\n    print("\\n  Module scope fixture")\n    return "module"\n\n@pytest.fixture(scope="session")  # \uc138\uc158\ub2f9 \ud55c \ubc88\ndef session_scope():\n    print("\\n  Session scope fixture")\n    return "session"\n\nclass TestScope:\n    def test_one(self, function_scope, class_scope):\n        print("    test_one")\n\n    def test_two(self, function_scope, class_scope):\n        print("    test_two")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"634-fixture\uc758-setupteardown",children:"6.3.4 Fixture\uc758 setUp/tearDown"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\n@pytest.fixture\ndef database_connection():\n    # Setup\n    print("\\n\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc124\uc815")\n    db = {"connected": True, "data": {}}\n\n    yield db  # \ud14c\uc2a4\ud2b8\uc5d0 \uc804\ub2ec\n\n    # Teardown\n    print("\\n\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc885\ub8cc")\n    db["connected"] = False\n\ndef test_insert(database_connection):\n    database_connection["data"]["key"] = "value"\n    assert database_connection["data"]["key"] == "value"\n\ndef test_connection_status(database_connection):\n    assert database_connection["connected"] == True\n'})}),"\n",(0,r.jsx)(n.h3,{id:"635-parametrize",children:"6.3.5 Parametrize"}),"\n",(0,r.jsx)(n.p,{children:"\uc5ec\ub7ec \uc785\ub825\uac12\uc73c\ub85c \ub3d9\uc77c\ud55c \ud14c\uc2a4\ud2b8\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\ndef is_palindrome(s):\n    s = s.lower().replace(" ", "")\n    return s == s[::-1]\n\n@pytest.mark.parametrize("word, expected", [\n    ("level", True),\n    ("radar", True),\n    ("hello", False),\n    ("A man a plan a canal Panama", True),\n    ("race car", True),\n    ("python", False),\n])\ndef test_is_palindrome(word, expected):\n    assert is_palindrome(word) == expected\n\n# \uc5ec\ub7ec \ub9e4\uac1c\ubcc0\uc218 \uc870\ud569\n@pytest.mark.parametrize("x", [0, 1, 2])\n@pytest.mark.parametrize("y", [0, 1, 2])\ndef test_addition(x, y):\n    assert x + y == y + x  # \uad50\ud658\ubc95\uce59\n'})}),"\n",(0,r.jsx)(n.h3,{id:"636-pytest-marks",children:"6.3.6 pytest Marks"}),"\n",(0,r.jsx)(n.p,{children:"\ud14c\uc2a4\ud2b8\ub97c \ubd84\ub958\ud558\uace0 \uc120\ud0dd\uc801\uc73c\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\n@pytest.mark.slow\ndef test_slow_operation():\n    import time\n    time.sleep(1)\n    assert True\n\n@pytest.mark.fast\ndef test_fast_operation():\n    assert 1 + 1 == 2\n\n@pytest.mark.skip(reason="\uc544\uc9c1 \uad6c\ud604\ub418\uc9c0 \uc54a\uc74c")\ndef test_not_implemented():\n    assert False\n\n@pytest.mark.skipif(pytest.__version__ < "7.0", reason="pytest 7.0 \uc774\uc0c1 \ud544\uc694")\ndef test_new_feature():\n    assert True\n\n@pytest.mark.xfail(reason="\uc54c\ub824\uc9c4 \ubc84\uadf8")\ndef test_known_bug():\n    assert 1 / 0  # \uc2e4\ud328 \uc608\uc0c1\n\n@pytest.mark.integration\n@pytest.mark.slow\ndef test_database_integration():\n    """\uc5ec\ub7ec \ub9c8\ud06c \uc0ac\uc6a9 \uac00\ub2a5"""\n    assert True\n'})}),"\n",(0,r.jsx)(n.p,{children:"\uc2e4\ud589:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pytest -m fast          # fast \ub9c8\ud06c\ub9cc \uc2e4\ud589\npytest -m "not slow"    # slow \uc81c\uc678\npytest -m "slow and integration"  # \ub450 \ub9c8\ud06c \ubaa8\ub450 \ud3ec\ud568\n'})}),"\n",(0,r.jsx)(n.h2,{id:"64-\ud14c\uc2a4\ud2b8-\uad6c\uc870\uc640-\ud328\ud134",children:"6.4 \ud14c\uc2a4\ud2b8 \uad6c\uc870\uc640 \ud328\ud134"}),"\n",(0,r.jsx)(n.h3,{id:"641-aaa-\ud328\ud134-arrange-act-assert",children:"6.4.1 AAA \ud328\ud134 (Arrange-Act-Assert)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_user_registration():\n    # Arrange (\uc900\ube44): \ud14c\uc2a4\ud2b8\uc5d0 \ud544\uc694\ud55c \ub370\uc774\ud130\uc640 \ud658\uacbd \uc124\uc815\n    username = "testuser"\n    email = "test@example.com"\n    password = "securepass123"\n    user_repository = UserRepository()\n\n    # Act (\uc2e4\ud589): \ud14c\uc2a4\ud2b8\ud560 \ub3d9\uc791 \uc218\ud589\n    user = user_repository.create_user(username, email, password)\n\n    # Assert (\uac80\uc99d): \uacb0\uacfc \ud655\uc778\n    assert user.username == username\n    assert user.email == email\n    assert user.is_active == True\n    assert user.created_at is not None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"642-given-when-then-\ud328\ud134",children:"6.4.2 Given-When-Then \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_shopping_cart_total():\n    # Given (\uc8fc\uc5b4\uc9c4 \uc0c1\ud669)\n    cart = ShoppingCart()\n    cart.add_item(Item("Book", 10.00), quantity=2)\n    cart.add_item(Item("Pen", 1.50), quantity=3)\n\n    # When (\uc5b4\ub5a4 \ub3d9\uc791\uc744 \uc218\ud589\ud558\uba74)\n    total = cart.calculate_total()\n\n    # Then (\uc774\ub7f0 \uacb0\uacfc\uac00 \ub098\uc640\uc57c \ud568)\n    expected_total = (10.00 * 2) + (1.50 * 3)\n    assert total == expected_total\n'})}),"\n",(0,r.jsx)(n.h3,{id:"643-\ud14c\uc2a4\ud2b8-\uaca9\ub9ac-test-isolation",children:"6.4.3 \ud14c\uc2a4\ud2b8 \uaca9\ub9ac (Test Isolation)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\nclass TestUserService:\n    @pytest.fixture(autouse=True)\n    def setup(self):\n        """\uac01 \ud14c\uc2a4\ud2b8\ub9c8\ub2e4 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589"""\n        self.user_service = UserService()\n        self.user_service.clear_all()  # \ub370\uc774\ud130 \ucd08\uae30\ud654\n\n    def test_create_user(self):\n        user = self.user_service.create("john")\n        assert self.user_service.count() == 1\n\n    def test_delete_user(self):\n        # \uc774\uc804 \ud14c\uc2a4\ud2b8\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uc74c\n        user = self.user_service.create("jane")\n        self.user_service.delete(user.id)\n        assert self.user_service.count() == 0\n'})}),"\n",(0,r.jsx)(n.h2,{id:"65-\uc608\uc678-\ud14c\uc2a4\ud305",children:"6.5 \uc608\uc678 \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.h3,{id:"651-unittest\ub85c-\uc608\uc678-\ud14c\uc2a4\ud2b8",children:"6.5.1 unittest\ub85c \uc608\uc678 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import unittest\n\ndef divide(a, b):\n    if b == 0:\n        raise ValueError("0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    return a / b\n\nclass TestExceptions(unittest.TestCase):\n    def test_divide_by_zero(self):\n        with self.assertRaises(ValueError):\n            divide(10, 0)\n\n    def test_exception_message(self):\n        with self.assertRaises(ValueError) as context:\n            divide(10, 0)\n\n        self.assertEqual(str(context.exception), "0\uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n    def test_no_exception(self):\n        # \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc544\uc57c \ud568\n        try:\n            result = divide(10, 2)\n            self.assertEqual(result, 5)\n        except Exception as e:\n            self.fail(f"\uc608\uc0c1\uce58 \ubabb\ud55c \uc608\uc678 \ubc1c\uc0dd: {e}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"652-pytest\ub85c-\uc608\uc678-\ud14c\uc2a4\ud2b8",children:"6.5.2 pytest\ub85c \uc608\uc678 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\ndef validate_age(age):\n    if age < 0:\n        raise ValueError("\ub098\uc774\ub294 \uc74c\uc218\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n    if age > 150:\n        raise ValueError("\ub098\uc774\uac00 \ub108\ubb34 \ub9ce\uc2b5\ub2c8\ub2e4")\n    return True\n\ndef test_negative_age():\n    with pytest.raises(ValueError):\n        validate_age(-1)\n\ndef test_exception_message():\n    with pytest.raises(ValueError, match="\uc74c\uc218\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4"):\n        validate_age(-5)\n\ndef test_multiple_exceptions():\n    with pytest.raises((ValueError, TypeError)):\n        validate_age("invalid")\n\ndef test_exception_details():\n    with pytest.raises(ValueError) as exc_info:\n        validate_age(200)\n\n    assert "\ub108\ubb34 \ub9ce\uc2b5\ub2c8\ub2e4" in str(exc_info.value)\n    assert exc_info.type is ValueError\n'})}),"\n",(0,r.jsx)(n.h2,{id:"66-mocking",children:"6.6 Mocking"}),"\n",(0,r.jsx)(n.p,{children:"Mock\uc740 \uc2e4\uc81c \uac1d\uccb4\ub97c \ub300\uc2e0\ud558\ub294 \ud14c\uc2a4\ud2b8\uc6a9 \uac1d\uccb4\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"661-unittestmock-\uae30\ubcf8",children:"6.6.1 unittest.mock \uae30\ubcf8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from unittest.mock import Mock, MagicMock\n\ndef test_mock_basic():\n    # Mock \uac1d\uccb4 \uc0dd\uc131\n    mock = Mock()\n\n    # \ubc18\ud658\uac12 \uc124\uc815\n    mock.some_method.return_value = 42\n\n    # \ud14c\uc2a4\ud2b8\n    result = mock.some_method()\n    assert result == 42\n\n    # \ud638\ucd9c \uc5ec\ubd80 \ud655\uc778\n    mock.some_method.assert_called_once()\n\ndef test_mock_side_effect():\n    mock = Mock()\n\n    # \ud638\ucd9c\ub9c8\ub2e4 \ub2e4\ub978 \uac12 \ubc18\ud658\n    mock.get_value.side_effect = [1, 2, 3]\n\n    assert mock.get_value() == 1\n    assert mock.get_value() == 2\n    assert mock.get_value() == 3\n\ndef test_mock_exception():\n    mock = Mock()\n\n    # \uc608\uc678 \ubc1c\uc0dd \uc124\uc815\n    mock.error_method.side_effect = ValueError("\uc5d0\ub7ec \ubc1c\uc0dd")\n\n    with pytest.raises(ValueError):\n        mock.error_method()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"662-patch-\ub370\ucf54\ub808\uc774\ud130",children:"6.6.2 patch \ub370\ucf54\ub808\uc774\ud130"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from unittest.mock import patch, MagicMock\nimport requests\n\n# \ud14c\uc2a4\ud2b8\ud560 \ud568\uc218\ndef get_user_data(user_id):\n    response = requests.get(f\"https://api.example.com/users/{user_id}\")\n    return response.json()\n\n@patch('requests.get')\ndef test_get_user_data(mock_get):\n    # Mock \uc751\ub2f5 \uc124\uc815\n    mock_response = MagicMock()\n    mock_response.json.return_value = {\n        'id': 1,\n        'name': 'John Doe',\n        'email': 'john@example.com'\n    }\n    mock_get.return_value = mock_response\n\n    # \ud14c\uc2a4\ud2b8\n    result = get_user_data(1)\n\n    # \uac80\uc99d\n    assert result['name'] == 'John Doe'\n    mock_get.assert_called_once_with('https://api.example.com/users/1')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"663-patch\ub97c-\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800\ub85c-\uc0ac\uc6a9",children:"6.6.3 patch\ub97c \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub85c \uc0ac\uc6a9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from unittest.mock import patch\nimport os\n\ndef get_environment_variable(key):\n    return os.getenv(key)\n\ndef test_environment_variable():\n    with patch.dict(os.environ, {'API_KEY': 'test_key_123'}):\n        assert get_environment_variable('API_KEY') == 'test_key_123'\n\n    # patch \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\uba74 \uc6d0\ub798\ub300\ub85c \ubcf5\uc6d0\n    assert get_environment_variable('API_KEY') != 'test_key_123'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"664-\ud074\ub798\uc2a4-\uba54\uc11c\ub4dc-mocking",children:"6.6.4 \ud074\ub798\uc2a4 \uba54\uc11c\ub4dc Mocking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from unittest.mock import patch, Mock\n\nclass EmailService:\n    def send_email(self, to, subject, body):\n        # \uc2e4\uc81c\ub85c\ub294 \uc774\uba54\uc77c\uc744 \ubcf4\ub0c4\n        print(f\"Sending email to {to}\")\n        return True\n\nclass UserRegistration:\n    def __init__(self, email_service):\n        self.email_service = email_service\n\n    def register(self, username, email):\n        # \uc0ac\uc6a9\uc790 \ub4f1\ub85d \ub85c\uc9c1\n        user = {'username': username, 'email': email}\n\n        # \ud658\uc601 \uc774\uba54\uc77c \ubc1c\uc1a1\n        self.email_service.send_email(\n            to=email,\n            subject=\"Welcome!\",\n            body=f\"Welcome {username}!\"\n        )\n\n        return user\n\ndef test_user_registration():\n    # EmailService\ub97c Mock\uc73c\ub85c \ub300\uccb4\n    mock_email_service = Mock()\n    registration = UserRegistration(mock_email_service)\n\n    # \ud14c\uc2a4\ud2b8\n    user = registration.register('john', 'john@example.com')\n\n    # \uac80\uc99d\n    assert user['username'] == 'john'\n    mock_email_service.send_email.assert_called_once_with(\n        to='john@example.com',\n        subject='Welcome!',\n        body='Welcome john!'\n    )\n"})}),"\n",(0,r.jsx)(n.h3,{id:"665-pytest-mock",children:"6.6.5 pytest-mock"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install pytest-mock\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pytest\n\ndef test_with_mocker(mocker):\n    # mocker fixture \uc0ac\uc6a9\n    mock = mocker.Mock()\n    mock.return_value = 42\n\n    assert mock() == 42\n\ndef test_patch_with_mocker(mocker):\n    # patch \uc0ac\uc6a9\n    mocker.patch('os.path.exists', return_value=True)\n\n    import os\n    assert os.path.exists('/fake/path') == True\n\nclass Database:\n    def get_user(self, user_id):\n        # \uc2e4\uc81c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac\n        pass\n\ndef test_database_mock(mocker):\n    # \uba54\uc11c\ub4dc spy\n    db = Database()\n    spy = mocker.spy(db, 'get_user')\n\n    db.get_user(123)\n\n    spy.assert_called_once_with(123)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"67-\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",children:"6.7 \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0"}),"\n",(0,r.jsx)(n.h3,{id:"671-coveragepy-\uc124\uce58-\ubc0f-\uc0ac\uc6a9",children:"6.7.1 coverage.py \uc124\uce58 \ubc0f \uc0ac\uc6a9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install coverage pytest-cov\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# coverage.py \uc9c1\uc811 \uc0ac\uc6a9\ncoverage run -m pytest\ncoverage report\ncoverage html  # HTML \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n\n# pytest-cov \ud50c\ub7ec\uadf8\uc778 \uc0ac\uc6a9\npytest --cov=myproject\npytest --cov=myproject --cov-report=html\npytest --cov=myproject --cov-report=term-missing\n"})}),"\n",(0,r.jsx)(n.h3,{id:"672-\uc124\uc815-\ud30c\uc77c",children:"6.7.2 \uc124\uc815 \ud30c\uc77c"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".coveragerc"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[run]\nsource = myproject\nomit =\n    */tests/*\n    */venv/*\n    */__pycache__/*\n\n[report]\nprecision = 2\nshow_missing = True\nskip_covered = False\n\n[html]\ndirectory = htmlcov\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pyproject.toml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[tool.pytest.ini_options]\naddopts = "--cov=myproject --cov-report=html --cov-report=term-missing"\n\n[tool.coverage.run]\nsource = ["myproject"]\nomit = ["*/tests/*", "*/venv/*"]\n\n[tool.coverage.report]\nprecision = 2\nshow_missing = true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"673-\ucee4\ubc84\ub9ac\uc9c0-\ud574\uc11d",children:"6.7.3 \ucee4\ubc84\ub9ac\uc9c0 \ud574\uc11d"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# calculator.py\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\ndef multiply(a, b):\n    return a * b\n\ndef divide(a, b):\n    if b == 0:\n        raise ValueError("Cannot divide by zero")\n    return a / b\n\n# test_calculator.py\ndef test_add():\n    assert add(2, 3) == 5\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n\n# multiply\uc640 divide\ub294 \ud14c\uc2a4\ud2b8\ub418\uc9c0 \uc54a\uc74c\n# \ucee4\ubc84\ub9ac\uc9c0: 50% (4\uac1c \ud568\uc218 \uc911 2\uac1c\ub9cc \ud14c\uc2a4\ud2b8)\n'})}),"\n",(0,r.jsxs)(n.admonition,{title:"\ucee4\ubc84\ub9ac\uc9c0 \ud568\uc815",type:"warning",children:[(0,r.jsx)(n.p,{children:"\ub192\uc740 \ucee4\ubc84\ub9ac\uc9c0\uac00 \ubc18\ub4dc\uc2dc \uc88b\uc740 \ud14c\uc2a4\ud2b8\ub97c \uc758\ubbf8\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"100% \ucee4\ubc84\ub9ac\uc9c0\ub3c4 \ubaa8\ub4e0 \ubc84\uadf8\ub97c \ucc3e\uc9c0 \ubabb\ud568"}),"\n",(0,r.jsx)(n.li,{children:"\uc5e3\uc9c0 \ucf00\uc774\uc2a4\ub97c \ub193\uce60 \uc218 \uc788\uc74c"}),"\n",(0,r.jsx)(n.li,{children:"\ud14c\uc2a4\ud2b8 \ud488\uc9c8\uc774 \ub354 \uc911\uc694\ud568"}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"68-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-vs-\ud1b5\ud569-\ud14c\uc2a4\ud2b8",children:"6.8 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 vs \ud1b5\ud569 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"681-\ud14c\uc2a4\ud2b8-\ud53c\ub77c\ubbf8\ub4dc",children:"6.8.1 \ud14c\uc2a4\ud2b8 \ud53c\ub77c\ubbf8\ub4dc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        /\\\n       /  \\      E2E Tests (\uc801\uc74c, \ub290\ub9bc, \ube44\uc308)\n      /____\\\n     /      \\    Integration Tests (\ubcf4\ud1b5)\n    /________\\\n   /          \\  Unit Tests (\ub9ce\uc74c, \ube60\ub984, \uc800\ub834)\n  /__________\\\n"})}),"\n",(0,r.jsx)(n.h3,{id:"682-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-unit-test",children:"6.8.2 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 (Unit Test)"}),"\n",(0,r.jsx)(n.p,{children:"\uac1c\ubcc4 \ud568\uc218\ub098 \ud074\ub798\uc2a4\ub97c \ub3c5\ub9bd\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# user.py\nclass User:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n\n    def validate_email(self):\n        return \'@\' in self.email and \'.\' in self.email\n\n    def get_display_name(self):\n        return f"{self.username} ({self.email})"\n\n# test_user.py\nimport pytest\n\nclass TestUser:\n    def test_validate_email_valid(self):\n        user = User("john", "john@example.com")\n        assert user.validate_email() == True\n\n    def test_validate_email_invalid(self):\n        user = User("john", "invalid-email")\n        assert user.validate_email() == False\n\n    def test_get_display_name(self):\n        user = User("john", "john@example.com")\n        assert user.get_display_name() == "john (john@example.com)"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"683-\ud1b5\ud569-\ud14c\uc2a4\ud2b8-integration-test",children:"6.8.3 \ud1b5\ud569 \ud14c\uc2a4\ud2b8 (Integration Test)"}),"\n",(0,r.jsx)(n.p,{children:"\uc5ec\ub7ec \ucef4\ud3ec\ub10c\ud2b8\uac00 \ud568\uaed8 \uc791\ub3d9\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# database.py\nclass Database:\n    def __init__(self):\n        self.users = {}\n\n    def save_user(self, user):\n        self.users[user.username] = user\n\n    def get_user(self, username):\n        return self.users.get(username)\n\n# user_service.py\nclass UserService:\n    def __init__(self, database):\n        self.database = database\n\n    def register_user(self, username, email):\n        if not self._is_valid_email(email):\n            raise ValueError("Invalid email")\n\n        user = User(username, email)\n        self.database.save_user(user)\n        return user\n\n    def _is_valid_email(self, email):\n        return \'@\' in email and \'.\' in email\n\n# test_user_service_integration.py\nimport pytest\n\n@pytest.fixture\ndef user_service():\n    db = Database()\n    return UserService(db)\n\ndef test_register_and_retrieve_user(user_service):\n    # \uc0ac\uc6a9\uc790 \ub4f1\ub85d\n    user = user_service.register_user("john", "john@example.com")\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc870\ud68c\n    retrieved_user = user_service.database.get_user("john")\n\n    # \uac80\uc99d\n    assert retrieved_user is not None\n    assert retrieved_user.username == "john"\n    assert retrieved_user.email == "john@example.com"\n\ndef test_register_invalid_email(user_service):\n    with pytest.raises(ValueError, match="Invalid email"):\n        user_service.register_user("john", "invalid")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"684-e2e-\ud14c\uc2a4\ud2b8-\uc608\uc2dc",children:"6.8.4 E2E \ud14c\uc2a4\ud2b8 \uc608\uc2dc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# test_api_e2e.py (FastAPI \uc608\uc2dc)\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef test_full_user_workflow():\n    # 1. \uc0ac\uc6a9\uc790 \ub4f1\ub85d\n    response = client.post("/users", json={\n        "username": "john",\n        "email": "john@example.com"\n    })\n    assert response.status_code == 201\n    user_id = response.json()["id"]\n\n    # 2. \uc0ac\uc6a9\uc790 \uc870\ud68c\n    response = client.get(f"/users/{user_id}")\n    assert response.status_code == 200\n    assert response.json()["username"] == "john"\n\n    # 3. \uc0ac\uc6a9\uc790 \uc5c5\ub370\uc774\ud2b8\n    response = client.put(f"/users/{user_id}", json={\n        "email": "newemail@example.com"\n    })\n    assert response.status_code == 200\n\n    # 4. \uc5c5\ub370\uc774\ud2b8 \ud655\uc778\n    response = client.get(f"/users/{user_id}")\n    assert response.json()["email"] == "newemail@example.com"\n\n    # 5. \uc0ac\uc6a9\uc790 \uc0ad\uc81c\n    response = client.delete(f"/users/{user_id}")\n    assert response.status_code == 204\n\n    # 6. \uc0ad\uc81c \ud655\uc778\n    response = client.get(f"/users/{user_id}")\n    assert response.status_code == 404\n'})}),"\n",(0,r.jsx)(n.h2,{id:"69-\ube44\ub3d9\uae30-\ucf54\ub4dc-\ud14c\uc2a4\ud305",children:"6.9 \ube44\ub3d9\uae30 \ucf54\ub4dc \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.h3,{id:"691-pytest-asyncio",children:"6.9.1 pytest-asyncio"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install pytest-asyncio\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nimport asyncio\n\n# \ube44\ub3d9\uae30 \ud568\uc218\nasync def fetch_data(delay=0.1):\n    await asyncio.sleep(delay)\n    return {"data": "fetched"}\n\nasync def process_data(data):\n    await asyncio.sleep(0.1)\n    return data.upper()\n\n# \ud14c\uc2a4\ud2b8\n@pytest.mark.asyncio\nasync def test_fetch_data():\n    result = await fetch_data()\n    assert result == {"data": "fetched"}\n\n@pytest.mark.asyncio\nasync def test_process_data():\n    data = "hello"\n    result = await process_data(data)\n    assert result == "HELLO"\n\n@pytest.mark.asyncio\nasync def test_concurrent_operations():\n    # \ub3d9\uc2dc\uc5d0 \uc5ec\ub7ec \uc791\uc5c5 \uc2e4\ud589\n    results = await asyncio.gather(\n        fetch_data(),\n        fetch_data(),\n        fetch_data()\n    )\n    assert len(results) == 3\n    assert all(r == {"data": "fetched"} for r in results)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"692-aiohttp-\ud14c\uc2a4\ud305",children:"6.9.2 aiohttp \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install aiohttp pytest-aiohttp\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pytest\nfrom aiohttp import web\nfrom aiohttp.test_utils import AioHTTPTestCase\n\nasync def hello(request):\n    return web.Response(text='Hello')\n\nasync def get_user(request):\n    user_id = request.match_info['user_id']\n    return web.json_response({'id': user_id, 'name': 'John'})\n\nclass TestApp(AioHTTPTestCase):\n    async def get_application(self):\n        app = web.Application()\n        app.router.add_get('/', hello)\n        app.router.add_get('/users/{user_id}', get_user)\n        return app\n\n    async def test_hello(self):\n        resp = await self.client.request(\"GET\", \"/\")\n        assert resp.status == 200\n        text = await resp.text()\n        assert text == \"Hello\"\n\n    async def test_get_user(self):\n        resp = await self.client.request(\"GET\", \"/users/123\")\n        assert resp.status == 200\n        data = await resp.json()\n        assert data['id'] == '123'\n        assert data['name'] == 'John'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"693-\ube44\ub3d9\uae30-mock",children:"6.9.3 \ube44\ub3d9\uae30 Mock"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom unittest.mock import AsyncMock, patch\n\nclass AsyncDataFetcher:\n    async def fetch(self, url):\n        # \uc2e4\uc81c\ub85c\ub294 HTTP \uc694\uccad\n        await asyncio.sleep(0.1)\n        return {"url": url, "status": "success"}\n\nclass DataProcessor:\n    def __init__(self, fetcher):\n        self.fetcher = fetcher\n\n    async def process(self, url):\n        data = await self.fetcher.fetch(url)\n        return data[\'status\'].upper()\n\n@pytest.mark.asyncio\nasync def test_data_processor():\n    # AsyncMock \uc0ac\uc6a9\n    mock_fetcher = AsyncMock()\n    mock_fetcher.fetch.return_value = {"url": "test", "status": "success"}\n\n    processor = DataProcessor(mock_fetcher)\n    result = await processor.process("http://example.com")\n\n    assert result == "SUCCESS"\n    mock_fetcher.fetch.assert_called_once_with("http://example.com")\n\n@pytest.mark.asyncio\nasync def test_with_patch():\n    with patch(\'asyncio.sleep\', new=AsyncMock()):\n        fetcher = AsyncDataFetcher()\n        result = await fetcher.fetch("http://example.com")\n        # sleep\uc774 mock\ub418\uc5b4 \uc989\uc2dc \uc2e4\ud589\ub428\n'})}),"\n",(0,r.jsx)(n.h2,{id:"610-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ud14c\uc2a4\ud305",children:"6.10 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.h3,{id:"6101-sqlite-\uc778\uba54\ubaa8\ub9ac-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"6.10.1 SQLite \uc778\uba54\ubaa8\ub9ac \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import sqlite3\nimport pytest\n\nclass UserRepository:\n    def __init__(self, connection):\n        self.conn = connection\n        self._create_table()\n\n    def _create_table(self):\n        self.conn.execute('''\n            CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                email TEXT NOT NULL\n            )\n        ''')\n        self.conn.commit()\n\n    def create_user(self, username, email):\n        cursor = self.conn.execute(\n            'INSERT INTO users (username, email) VALUES (?, ?)',\n            (username, email)\n        )\n        self.conn.commit()\n        return cursor.lastrowid\n\n    def get_user(self, user_id):\n        cursor = self.conn.execute(\n            'SELECT id, username, email FROM users WHERE id = ?',\n            (user_id,)\n        )\n        row = cursor.fetchone()\n        if row:\n            return {'id': row[0], 'username': row[1], 'email': row[2]}\n        return None\n\n@pytest.fixture\ndef db_connection():\n    # \uc778\uba54\ubaa8\ub9ac \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0ac\uc6a9\n    conn = sqlite3.connect(':memory:')\n    yield conn\n    conn.close()\n\n@pytest.fixture\ndef user_repo(db_connection):\n    return UserRepository(db_connection)\n\ndef test_create_user(user_repo):\n    user_id = user_repo.create_user('john', 'john@example.com')\n    assert user_id is not None\n\n    user = user_repo.get_user(user_id)\n    assert user['username'] == 'john'\n    assert user['email'] == 'john@example.com'\n\ndef test_get_nonexistent_user(user_repo):\n    user = user_repo.get_user(999)\n    assert user is None\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6102-sqlalchemy-\ud14c\uc2a4\ud305",children:"6.10.2 SQLAlchemy \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nimport pytest\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(100), nullable=False)\n\n@pytest.fixture(scope='function')\ndef db_session():\n    # \ud14c\uc2a4\ud2b8\uc6a9 \uc778\uba54\ubaa8\ub9ac \ub370\uc774\ud130\ubca0\uc774\uc2a4\n    engine = create_engine('sqlite:///:memory:')\n    Base.metadata.create_all(engine)\n\n    Session = sessionmaker(bind=engine)\n    session = Session()\n\n    yield session\n\n    session.close()\n\ndef test_create_user(db_session):\n    user = User(username='john', email='john@example.com')\n    db_session.add(user)\n    db_session.commit()\n\n    assert user.id is not None\n\n    retrieved_user = db_session.query(User).filter_by(username='john').first()\n    assert retrieved_user is not None\n    assert retrieved_user.email == 'john@example.com'\n\ndef test_unique_username(db_session):\n    user1 = User(username='john', email='john1@example.com')\n    db_session.add(user1)\n    db_session.commit()\n\n    user2 = User(username='john', email='john2@example.com')\n    db_session.add(user2)\n\n    with pytest.raises(Exception):  # IntegrityError\n        db_session.commit()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6103-\ud2b8\ub79c\uc7ad\uc158-\ub864\ubc31-\ud328\ud134",children:"6.10.3 \ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31 \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n@pytest.fixture(scope='session')\ndef engine():\n    return create_engine('sqlite:///:memory:')\n\n@pytest.fixture(scope='session')\ndef tables(engine):\n    Base.metadata.create_all(engine)\n    yield\n    Base.metadata.drop_all(engine)\n\n@pytest.fixture\ndef db_session(engine, tables):\n    \"\"\"\uac01 \ud14c\uc2a4\ud2b8\ub9c8\ub2e4 \ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31\"\"\"\n    connection = engine.connect()\n    transaction = connection.begin()\n\n    Session = sessionmaker(bind=connection)\n    session = Session()\n\n    yield session\n\n    session.close()\n    transaction.rollback()\n    connection.close()\n\ndef test_user_creation(db_session):\n    user = User(username='test', email='test@example.com')\n    db_session.add(user)\n    db_session.commit()\n\n    assert db_session.query(User).count() == 1\n\ndef test_isolated_test(db_session):\n    # \uc774\uc804 \ud14c\uc2a4\ud2b8\uc758 \ub370\uc774\ud130\uac00 \uc5c6\uc74c (\ub864\ubc31\ub428)\n    assert db_session.query(User).count() == 0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"611-api-\ud14c\uc2a4\ud305",children:"6.11 API \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.h3,{id:"6111-fastapi-\ud14c\uc2a4\ud305",children:"6.11.1 FastAPI \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, HTTPException\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\nimport pytest\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\nitems_db = {}\n\n@app.post("/items", status_code=201)\ndef create_item(item: Item):\n    item_id = len(items_db) + 1\n    items_db[item_id] = item\n    return {"id": item_id, **item.dict()}\n\n@app.get("/items/{item_id}")\ndef get_item(item_id: int):\n    if item_id not in items_db:\n        raise HTTPException(status_code=404, detail="Item not found")\n    return items_db[item_id]\n\n# \ud14c\uc2a4\ud2b8\nclient = TestClient(app)\n\n@pytest.fixture(autouse=True)\ndef clear_db():\n    items_db.clear()\n\ndef test_create_item():\n    response = client.post("/items", json={\n        "name": "Book",\n        "price": 19.99\n    })\n    assert response.status_code == 201\n    data = response.json()\n    assert data["name"] == "Book"\n    assert data["price"] == 19.99\n    assert "id" in data\n\ndef test_get_item():\n    # \uc544\uc774\ud15c \uc0dd\uc131\n    create_response = client.post("/items", json={\n        "name": "Pen",\n        "price": 1.99\n    })\n    item_id = create_response.json()["id"]\n\n    # \uc544\uc774\ud15c \uc870\ud68c\n    response = client.get(f"/items/{item_id}")\n    assert response.status_code == 200\n    assert response.json()["name"] == "Pen"\n\ndef test_get_nonexistent_item():\n    response = client.get("/items/999")\n    assert response.status_code == 404\n    assert response.json()["detail"] == "Item not found"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6112-flask-\ud14c\uc2a4\ud305",children:"6.11.2 Flask \ud14c\uc2a4\ud305"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from flask import Flask, jsonify, request\nimport pytest\n\napp = Flask(__name__)\n\nusers = {}\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    user_id = len(users) + 1\n    users[user_id] = data\n    return jsonify({'id': user_id, **data}), 201\n\n@app.route('/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    if user_id not in users:\n        return jsonify({'error': 'User not found'}), 404\n    return jsonify(users[user_id])\n\n@pytest.fixture\ndef client():\n    app.config['TESTING'] = True\n    with app.test_client() as client:\n        yield client\n    users.clear()\n\ndef test_create_user(client):\n    response = client.post('/users', json={\n        'username': 'john',\n        'email': 'john@example.com'\n    })\n    assert response.status_code == 201\n    data = response.get_json()\n    assert data['username'] == 'john'\n\ndef test_get_user(client):\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    create_response = client.post('/users', json={\n        'username': 'jane',\n        'email': 'jane@example.com'\n    })\n    user_id = create_response.get_json()['id']\n\n    # \uc0ac\uc6a9\uc790 \uc870\ud68c\n    response = client.get(f'/users/{user_id}')\n    assert response.status_code == 200\n    assert response.get_json()['username'] == 'jane'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6113-requests-mock",children:"6.11.3 requests-mock"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import requests\nimport requests_mock\nimport pytest\n\ndef get_weather(city):\n    response = requests.get(f'https://api.weather.com/v1/weather?city={city}')\n    return response.json()\n\ndef test_get_weather():\n    with requests_mock.Mocker() as m:\n        m.get(\n            'https://api.weather.com/v1/weather?city=Seoul',\n            json={'temperature': 20, 'condition': 'sunny'}\n        )\n\n        result = get_weather('Seoul')\n\n        assert result['temperature'] == 20\n        assert result['condition'] == 'sunny'\n\ndef test_api_error():\n    with requests_mock.Mocker() as m:\n        m.get(\n            'https://api.weather.com/v1/weather?city=Invalid',\n            status_code=404\n        )\n\n        response = requests.get('https://api.weather.com/v1/weather?city=Invalid')\n        assert response.status_code == 404\n"})}),"\n",(0,r.jsx)(n.h2,{id:"612-\ud14c\uc2a4\ud2b8-\ubaa8\ubc94-\uc0ac\ub840",children:"6.12 \ud14c\uc2a4\ud2b8 \ubaa8\ubc94 \uc0ac\ub840"}),"\n",(0,r.jsx)(n.h3,{id:"6121-\ud14c\uc2a4\ud2b8-\uba85\uba85-\uaddc\uce59",children:"6.12.1 \ud14c\uc2a4\ud2b8 \uba85\uba85 \uaddc\uce59"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \uc88b\uc740 \uc608: \uba85\ud655\ud558\uace0 \uad6c\uccb4\uc801\ndef test_user_registration_with_valid_email_succeeds():\n    pass\n\ndef test_user_registration_with_invalid_email_raises_ValueError():\n    pass\n\ndef test_empty_shopping_cart_has_zero_total():\n    pass\n\n# \ub098\uc05c \uc608: \ubaa8\ud638\ud568\ndef test_user():\n    pass\n\ndef test_1():\n    pass\n\ndef test_works():\n    pass\n\n# \ub2e4\ub978 \uc2a4\ud0c0\uc77c: BDD \uc2a4\ud0c0\uc77c\ndef test_given_valid_credentials_when_login_then_returns_token():\n    pass\n\ndef test_given_empty_cart_when_checkout_then_raises_error():\n    pass\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6122-dry-\uc6d0\uce59-dont-repeat-yourself",children:"6.12.2 DRY \uc6d0\uce59 (Don't Repeat Yourself)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \ub098\uc05c \uc608: \uc911\ubcf5 \ucf54\ub4dc\ndef test_user_creation_1():\n    db = Database()\n    db.connect()\n    user = User('john', 'john@example.com')\n    db.save(user)\n    assert db.count() == 1\n    db.close()\n\ndef test_user_creation_2():\n    db = Database()\n    db.connect()\n    user = User('jane', 'jane@example.com')\n    db.save(user)\n    assert db.count() == 1\n    db.close()\n\n# \uc88b\uc740 \uc608: fixture \uc0ac\uc6a9\n@pytest.fixture\ndef db():\n    database = Database()\n    database.connect()\n    yield database\n    database.close()\n\ndef test_user_creation_1(db):\n    user = User('john', 'john@example.com')\n    db.save(user)\n    assert db.count() == 1\n\ndef test_user_creation_2(db):\n    user = User('jane', 'jane@example.com')\n    db.save(user)\n    assert db.count() == 1\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6123-\ud558\ub098\uc758-\uac1c\ub150\ub9cc-\ud14c\uc2a4\ud2b8",children:"6.12.3 \ud558\ub098\uc758 \uac1c\ub150\ub9cc \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \ub098\uc05c \uc608: \uc5ec\ub7ec \uac1c\ub150\uc744 \ud55c \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ndef test_user_operations():\n    user = User('john', 'john@example.com')\n    assert user.username == 'john'  # \uc0dd\uc131 \ud14c\uc2a4\ud2b8\n\n    user.update_email('new@example.com')\n    assert user.email == 'new@example.com'  # \uc5c5\ub370\uc774\ud2b8 \ud14c\uc2a4\ud2b8\n\n    user.delete()\n    assert user.is_deleted == True  # \uc0ad\uc81c \ud14c\uc2a4\ud2b8\n\n# \uc88b\uc740 \uc608: \uac01 \uac1c\ub150\uc744 \ubcc4\ub3c4 \ud14c\uc2a4\ud2b8\ub85c\ndef test_user_creation():\n    user = User('john', 'john@example.com')\n    assert user.username == 'john'\n    assert user.email == 'john@example.com'\n\ndef test_user_email_update():\n    user = User('john', 'john@example.com')\n    user.update_email('new@example.com')\n    assert user.email == 'new@example.com'\n\ndef test_user_deletion():\n    user = User('john', 'john@example.com')\n    user.delete()\n    assert user.is_deleted == True\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6124-\ud14c\uc2a4\ud2b8-\ub370\uc774\ud130-\uba85\ud655\uc131",children:"6.12.4 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uba85\ud655\uc131"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \ub098\uc05c \uc608: \ub9e4\uc9c1 \ub118\ubc84/\ubb38\uc790\uc5f4\ndef test_discount_calculation():\n    price = calculate_discount(100, 0.2)\n    assert price == 80\n\n# \uc88b\uc740 \uc608: \uba85\ud655\ud55c \ubcc0\uc218\uba85\ndef test_discount_calculation():\n    original_price = 100\n    discount_percentage = 0.2\n    expected_discounted_price = 80\n\n    actual_price = calculate_discount(original_price, discount_percentage)\n\n    assert actual_price == expected_discounted_price\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6125-\ub3c5\ub9bd\uc801\uc778-\ud14c\uc2a4\ud2b8",children:"6.12.5 \ub3c5\ub9bd\uc801\uc778 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \ub098\uc05c \uc608: \ud14c\uc2a4\ud2b8 \uac04 \uc758\uc874\uc131\nclass TestUserWorkflow:\n    user_id = None\n\n    def test_1_create_user(self):\n        self.user_id = create_user('john')\n        assert self.user_id is not None\n\n    def test_2_update_user(self):\n        # test_1\uc774 \uba3c\uc800 \uc2e4\ud589\ub418\uc5b4\uc57c \ud568\n        update_user(self.user_id, email='new@example.com')\n        assert True\n\n# \uc88b\uc740 \uc608: \uac01 \ud14c\uc2a4\ud2b8\uac00 \ub3c5\ub9bd\uc801\nclass TestUserOperations:\n    @pytest.fixture\n    def user_id(self):\n        user_id = create_user('john')\n        yield user_id\n        delete_user(user_id)\n\n    def test_create_user(self):\n        user_id = create_user('john')\n        assert user_id is not None\n        delete_user(user_id)\n\n    def test_update_user(self, user_id):\n        update_user(user_id, email='new@example.com')\n        user = get_user(user_id)\n        assert user.email == 'new@example.com'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"613-tdd-\uc2e4\uc804-\uc608\uc81c",children:"6.13 TDD \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,r.jsx)(n.h3,{id:"6131-tdd\ub85c-stack-\uad6c\ud604\ud558\uae30",children:"6.13.1 TDD\ub85c Stack \uad6c\ud604\ud558\uae30"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# 1\ub2e8\uacc4: \uc2e4\ud328\ud558\ub294 \ud14c\uc2a4\ud2b8 \uc791\uc131\nimport pytest\n\ndef test_stack_is_empty_when_created():\n    stack = Stack()\n    assert stack.is_empty() == True\n\n# \uc2e4\ud589\ud558\uba74 \uc2e4\ud328 (Stack \ud074\ub798\uc2a4\uac00 \uc5c6\uc74c)\n\n# 2\ub2e8\uacc4: \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc\ub85c \ud14c\uc2a4\ud2b8 \ud1b5\uacfc\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n# 3\ub2e8\uacc4: \ub2e4\uc74c \ud14c\uc2a4\ud2b8 \uc791\uc131\ndef test_push_adds_item_to_stack():\n    stack = Stack()\n    stack.push(1)\n    assert stack.is_empty() == False\n\n# 4\ub2e8\uacc4: \uad6c\ud604\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n# 5\ub2e8\uacc4: \ub354 \ub9ce\uc740 \ud14c\uc2a4\ud2b8\ndef test_pop_removes_and_returns_last_item():\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    item = stack.pop()\n    assert item == 2\n    assert stack.size() == 1\n\ndef test_pop_on_empty_stack_raises_error():\n    stack = Stack()\n    with pytest.raises(IndexError):\n        stack.pop()\n\ndef test_peek_returns_last_item_without_removing():\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    item = stack.peek()\n    assert item == 2\n    assert stack.size() == 2\n\n# 6\ub2e8\uacc4: \uc644\uc804\ud55c \uad6c\ud604\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            raise IndexError("Stack is empty")\n        return self.items.pop()\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError("Stack is empty")\n        return self.items[-1]\n\n    def size(self):\n        return len(self.items)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6132-tdd\ub85c-\uc740\ud589-\uacc4\uc88c-\uc2dc\uc2a4\ud15c-\uad6c\ud604",children:"6.13.2 TDD\ub85c \uc740\ud589 \uacc4\uc88c \uc2dc\uc2a4\ud15c \uad6c\ud604"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\n# \ud14c\uc2a4\ud2b8 1: \uacc4\uc88c \uc0dd\uc131\ndef test_account_creation():\n    account = BankAccount(account_number="123456", initial_balance=1000)\n    assert account.get_balance() == 1000\n\n# \uad6c\ud604\nclass BankAccount:\n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number\n        self.balance = initial_balance\n\n    def get_balance(self):\n        return self.balance\n\n# \ud14c\uc2a4\ud2b8 2: \uc785\uae08\ndef test_deposit():\n    account = BankAccount("123456", 1000)\n    account.deposit(500)\n    assert account.get_balance() == 1500\n\n# \uad6c\ud604 \ucd94\uac00\nclass BankAccount:\n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number\n        self.balance = initial_balance\n\n    def get_balance(self):\n        return self.balance\n\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError("Deposit amount must be positive")\n        self.balance += amount\n\n# \ud14c\uc2a4\ud2b8 3: \ucd9c\uae08\ndef test_withdrawal():\n    account = BankAccount("123456", 1000)\n    account.withdraw(300)\n    assert account.get_balance() == 700\n\ndef test_withdrawal_insufficient_funds():\n    account = BankAccount("123456", 1000)\n    with pytest.raises(ValueError, match="Insufficient funds"):\n        account.withdraw(1500)\n\n# \uad6c\ud604 \ucd94\uac00\nclass BankAccount:\n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number\n        self.balance = initial_balance\n        self.transactions = []\n\n    def get_balance(self):\n        return self.balance\n\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError("Deposit amount must be positive")\n        self.balance += amount\n        self.transactions.append(f"Deposit: +{amount}")\n\n    def withdraw(self, amount):\n        if amount <= 0:\n            raise ValueError("Withdrawal amount must be positive")\n        if amount > self.balance:\n            raise ValueError("Insufficient funds")\n        self.balance -= amount\n        self.transactions.append(f"Withdrawal: -{amount}")\n\n    def get_transaction_history(self):\n        return self.transactions.copy()\n\n# \ud14c\uc2a4\ud2b8 4: \uac70\ub798 \ub0b4\uc5ed\ndef test_transaction_history():\n    account = BankAccount("123456", 1000)\n    account.deposit(500)\n    account.withdraw(200)\n\n    history = account.get_transaction_history()\n    assert len(history) == 2\n    assert "Deposit: +500" in history\n    assert "Withdrawal: -200" in history\n'})}),"\n",(0,r.jsx)(n.h2,{id:"614-\uc9c0\uc18d\uc801-\ud1b5\ud569-ci",children:"6.14 \uc9c0\uc18d\uc801 \ud1b5\ud569 (CI)"}),"\n",(0,r.jsx)(n.h3,{id:"6141-github-actions-\uc608\uc81c",children:"6.14.1 GitHub Actions \uc608\uc81c"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".github/workflows/tests.yml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'name: Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, "3.10", "3.11"]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pytest pytest-cov\n        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n\n    - name: Run tests with coverage\n      run: |\n        pytest --cov=myproject --cov-report=xml --cov-report=term\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        fail_ci_if_error: true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6142-pytestini-\uc124\uc815",children:"6.14.2 pytest.ini \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts =\n    -v\n    --strict-markers\n    --cov=myproject\n    --cov-report=html\n    --cov-report=term-missing\n    --cov-fail-under=80\n\nmarkers =\n    slow: marks tests as slow\n    fast: marks tests as fast\n    integration: marks tests as integration tests\n    unit: marks tests as unit tests\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6143-tox\ub97c-\uc774\uc6a9\ud55c-\ub2e4\uc911-\ud658\uacbd-\ud14c\uc2a4\ud2b8",children:"6.14.3 tox\ub97c \uc774\uc6a9\ud55c \ub2e4\uc911 \ud658\uacbd \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install tox\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"tox.ini"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[tox]\nenvlist = py38,py39,py310,py311,lint\n\n[testenv]\ndeps =\n    pytest\n    pytest-cov\ncommands =\n    pytest --cov=myproject\n\n[testenv:lint]\ndeps =\n    flake8\n    black\n    mypy\ncommands =\n    flake8 myproject tests\n    black --check myproject tests\n    mypy myproject\n"})}),"\n",(0,r.jsx)(n.p,{children:"\uc2e4\ud589:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"tox              # \ubaa8\ub4e0 \ud658\uacbd\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ntox -e py310     # Python 3.10\ub9cc\ntox -e lint      # \ub9b0\ud305\ub9cc\n"})}),"\n",(0,r.jsx)(n.h2,{id:"615-\uc2e4\uc804-\uc608\uc81c",children:"6.15 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,r.jsx)(n.h3,{id:"6151-url-\ub2e8\ucd95-\uc11c\ube44\uc2a4-\ud14c\uc2a4\ud2b8",children:"6.15.1 URL \ub2e8\ucd95 \uc11c\ube44\uc2a4 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nimport hashlib\nfrom datetime import datetime\n\nclass URLShortener:\n    def __init__(self):\n        self.url_mapping = {}\n        self.stats = {}\n\n    def shorten(self, long_url):\n        # URL \ud574\uc2dc \uc0dd\uc131\n        hash_object = hashlib.md5(long_url.encode())\n        short_code = hash_object.hexdigest()[:6]\n\n        self.url_mapping[short_code] = long_url\n        self.stats[short_code] = {\n            \'created_at\': datetime.now(),\n            \'clicks\': 0\n        }\n\n        return short_code\n\n    def expand(self, short_code):\n        if short_code not in self.url_mapping:\n            raise ValueError("Short code not found")\n\n        # \ud074\ub9ad \uc218 \uc99d\uac00\n        self.stats[short_code][\'clicks\'] += 1\n\n        return self.url_mapping[short_code]\n\n    def get_stats(self, short_code):\n        if short_code not in self.stats:\n            raise ValueError("Short code not found")\n        return self.stats[short_code]\n\n# \ud14c\uc2a4\ud2b8\nclass TestURLShortener:\n    @pytest.fixture\n    def shortener(self):\n        return URLShortener()\n\n    def test_shorten_url(self, shortener):\n        long_url = "https://www.example.com/very/long/url"\n        short_code = shortener.shorten(long_url)\n\n        assert short_code is not None\n        assert len(short_code) == 6\n\n    def test_expand_url(self, shortener):\n        long_url = "https://www.example.com"\n        short_code = shortener.shorten(long_url)\n\n        expanded_url = shortener.expand(short_code)\n        assert expanded_url == long_url\n\n    def test_expand_nonexistent_code(self, shortener):\n        with pytest.raises(ValueError, match="Short code not found"):\n            shortener.expand("invalid")\n\n    def test_click_tracking(self, shortener):\n        long_url = "https://www.example.com"\n        short_code = shortener.shorten(long_url)\n\n        # \uc5ec\ub7ec \ubc88 \ud074\ub9ad\n        shortener.expand(short_code)\n        shortener.expand(short_code)\n        shortener.expand(short_code)\n\n        stats = shortener.get_stats(short_code)\n        assert stats[\'clicks\'] == 3\n\n    def test_same_url_returns_same_code(self, shortener):\n        url = "https://www.example.com"\n        code1 = shortener.shorten(url)\n        code2 = shortener.shorten(url)\n\n        assert code1 == code2\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6152-\uce90\uc2dc-\uc2dc\uc2a4\ud15c-\ud14c\uc2a4\ud2b8",children:"6.15.2 \uce90\uc2dc \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import time\nimport pytest\n\nclass Cache:\n    def __init__(self, max_size=100, ttl=None):\n        self.max_size = max_size\n        self.ttl = ttl  # Time to live in seconds\n        self.cache = {}\n        self.timestamps = {}\n\n    def set(self, key, value):\n        # \uce90\uc2dc \ud06c\uae30 \uc81c\ud55c\n        if len(self.cache) >= self.max_size and key not in self.cache:\n            # LRU: \uac00\uc7a5 \uc624\ub798\ub41c \ud56d\ubaa9 \uc81c\uac70\n            oldest_key = min(self.timestamps, key=self.timestamps.get)\n            del self.cache[oldest_key]\n            del self.timestamps[oldest_key]\n\n        self.cache[key] = value\n        self.timestamps[key] = time.time()\n\n    def get(self, key):\n        if key not in self.cache:\n            return None\n\n        # TTL \ud655\uc778\n        if self.ttl:\n            age = time.time() - self.timestamps[key]\n            if age > self.ttl:\n                del self.cache[key]\n                del self.timestamps[key]\n                return None\n\n        return self.cache[key]\n\n    def delete(self, key):\n        if key in self.cache:\n            del self.cache[key]\n            del self.timestamps[key]\n\n    def clear(self):\n        self.cache.clear()\n        self.timestamps.clear()\n\n    def size(self):\n        return len(self.cache)\n\nclass TestCache:\n    def test_set_and_get(self):\n        cache = Cache()\n        cache.set('key1', 'value1')\n        assert cache.get('key1') == 'value1'\n\n    def test_get_nonexistent_key(self):\n        cache = Cache()\n        assert cache.get('nonexistent') is None\n\n    def test_max_size_limit(self):\n        cache = Cache(max_size=3)\n        cache.set('key1', 'value1')\n        cache.set('key2', 'value2')\n        cache.set('key3', 'value3')\n        cache.set('key4', 'value4')  # key1\uc774 \uc81c\uac70\ub418\uc5b4\uc57c \ud568\n\n        assert cache.size() == 3\n        assert cache.get('key1') is None\n        assert cache.get('key4') == 'value4'\n\n    def test_ttl_expiration(self):\n        cache = Cache(ttl=0.1)  # 0.1\ucd08 TTL\n        cache.set('key1', 'value1')\n\n        # \uc989\uc2dc \uc870\ud68c - \uc788\uc5b4\uc57c \ud568\n        assert cache.get('key1') == 'value1'\n\n        # TTL \uc774\ud6c4 \uc870\ud68c - \uc5c6\uc5b4\uc57c \ud568\n        time.sleep(0.15)\n        assert cache.get('key1') is None\n\n    def test_delete(self):\n        cache = Cache()\n        cache.set('key1', 'value1')\n        cache.delete('key1')\n        assert cache.get('key1') is None\n\n    def test_clear(self):\n        cache = Cache()\n        cache.set('key1', 'value1')\n        cache.set('key2', 'value2')\n        cache.clear()\n\n        assert cache.size() == 0\n        assert cache.get('key1') is None\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6153-\uc774\uba54\uc77c-\ubc1c\ub9ac\ub370\uc774\ud130-\ud14c\uc2a4\ud2b8",children:"6.15.3 \uc774\uba54\uc77c \ubc1c\ub9ac\ub370\uc774\ud130 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import re\nimport pytest\n\nclass EmailValidator:\n    @staticmethod\n    def is_valid(email):\n        if not email:\n            return False\n\n        # \uae30\ubcf8 \ud328\ud134 \uac80\uc99d\n        pattern = r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\'\n        if not re.match(pattern, email):\n            return False\n\n        # \ucd94\uac00 \uac80\uc99d\n        local, domain = email.split(\'@\')\n\n        # \ub85c\uceec \ubd80\ubd84 \uac80\uc99d\n        if len(local) > 64:\n            return False\n        if local.startswith(\'.\') or local.endswith(\'.\'):\n            return False\n        if \'..\' in local:\n            return False\n\n        # \ub3c4\uba54\uc778 \uac80\uc99d\n        if len(domain) > 255:\n            return False\n        if domain.startswith(\'-\') or domain.endswith(\'-\'):\n            return False\n\n        return True\n\nclass TestEmailValidator:\n    @pytest.mark.parametrize("email", [\n        "user@example.com",\n        "user.name@example.com",\n        "user+tag@example.co.uk",\n        "user_name@example-domain.com",\n        "123@example.com",\n        "user@subdomain.example.com",\n    ])\n    def test_valid_emails(self, email):\n        assert EmailValidator.is_valid(email) == True\n\n    @pytest.mark.parametrize("email", [\n        "",\n        "invalid",\n        "@example.com",\n        "user@",\n        "user @example.com",\n        "user@example",\n        ".user@example.com",\n        "user.@example.com",\n        "user..name@example.com",\n        "user@.example.com",\n        "user@example..com",\n        "a" * 65 + "@example.com",  # \ub85c\uceec \ubd80\ubd84 \ub108\ubb34 \uae40\n        "user@" + "a" * 256,  # \ub3c4\uba54\uc778 \ub108\ubb34 \uae40\n    ])\n    def test_invalid_emails(self, email):\n        assert EmailValidator.is_valid(email) == False\n'})}),"\n",(0,r.jsx)(n.h2,{id:"616-\uc5f0\uc2b5-\ubb38\uc81c",children:"6.16 \uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uc2b5-1-\uacc4\uc0b0\uae30-\ud14c\uc2a4\ud2b8-\uc791\uc131",children:"\uc5f0\uc2b5 1: \uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8 \uc791\uc131"}),"\n",(0,r.jsx)(n.p,{children:"\ub2e4\uc74c \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uad04\uc801\uc778 \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError("Cannot divide by zero")\n        return a / b\n\n    def power(self, base, exponent):\n        return base ** exponent\n'})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\nclass TestCalculator:\n    @pytest.fixture\n    def calc(self):\n        return Calculator()\n\n    def test_add(self, calc):\n        assert calc.add(2, 3) == 5\n        assert calc.add(-1, 1) == 0\n        assert calc.add(0, 0) == 0\n\n    def test_subtract(self, calc):\n        assert calc.subtract(5, 3) == 2\n        assert calc.subtract(0, 5) == -5\n        assert calc.subtract(-3, -3) == 0\n\n    def test_multiply(self, calc):\n        assert calc.multiply(3, 4) == 12\n        assert calc.multiply(-2, 3) == -6\n        assert calc.multiply(0, 100) == 0\n\n    def test_divide(self, calc):\n        assert calc.divide(10, 2) == 5\n        assert calc.divide(7, 2) == 3.5\n        assert calc.divide(-10, 2) == -5\n\n    def test_divide_by_zero(self, calc):\n        with pytest.raises(ValueError, match="Cannot divide by zero"):\n            calc.divide(10, 0)\n\n    def test_power(self, calc):\n        assert calc.power(2, 3) == 8\n        assert calc.power(5, 0) == 1\n        assert calc.power(2, -1) == 0.5\n\n    @pytest.mark.parametrize("a, b, expected", [\n        (1, 1, 2),\n        (0, 0, 0),\n        (-1, -1, -2),\n        (100, 200, 300),\n    ])\n    def test_add_parametrized(self, calc, a, b, expected):\n        assert calc.add(a, b) == expected\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uc2b5-2-mock\uc744-\uc0ac\uc6a9\ud55c-api-\ud074\ub77c\uc774\uc5b8\ud2b8-\ud14c\uc2a4\ud2b8",children:"\uc5f0\uc2b5 2: Mock\uc744 \uc0ac\uc6a9\ud55c API \ud074\ub77c\uc774\uc5b8\ud2b8 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\n\nclass WeatherAPI:\n    BASE_URL = "https://api.weather.com/v1"\n\n    def __init__(self, api_key):\n        self.api_key = api_key\n\n    def get_current_weather(self, city):\n        response = requests.get(\n            f"{self.BASE_URL}/current",\n            params={"city": city, "api_key": self.api_key}\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def get_forecast(self, city, days=7):\n        response = requests.get(\n            f"{self.BASE_URL}/forecast",\n            params={"city": city, "days": days, "api_key": self.api_key}\n        )\n        response.raise_for_status()\n        return response.json()\n'})}),"\n",(0,r.jsx)(n.p,{children:"\uc774 \ud074\ub798\uc2a4\ub97c \ud14c\uc2a4\ud2b8\ud558\uc138\uc694. (\uc2e4\uc81c API \ud638\ucd9c \uc5c6\uc774)"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pytest\nfrom unittest.mock import Mock, patch\n\nclass TestWeatherAPI:\n    @pytest.fixture\n    def api(self):\n        return WeatherAPI(api_key=\"test_key_123\")\n\n    @patch('requests.get')\n    def test_get_current_weather_success(self, mock_get, api):\n        # Mock \uc751\ub2f5 \uc124\uc815\n        mock_response = Mock()\n        mock_response.json.return_value = {\n            'city': 'Seoul',\n            'temperature': 20,\n            'condition': 'sunny'\n        }\n        mock_get.return_value = mock_response\n\n        # \ud14c\uc2a4\ud2b8\n        result = api.get_current_weather('Seoul')\n\n        # \uac80\uc99d\n        assert result['city'] == 'Seoul'\n        assert result['temperature'] == 20\n        mock_get.assert_called_once_with(\n            'https://api.weather.com/v1/current',\n            params={'city': 'Seoul', 'api_key': 'test_key_123'}\n        )\n\n    @patch('requests.get')\n    def test_get_current_weather_http_error(self, mock_get, api):\n        # HTTP \uc5d0\ub7ec \uc124\uc815\n        mock_response = Mock()\n        mock_response.raise_for_status.side_effect = requests.HTTPError(\"404\")\n        mock_get.return_value = mock_response\n\n        # \ud14c\uc2a4\ud2b8\n        with pytest.raises(requests.HTTPError):\n            api.get_current_weather('InvalidCity')\n\n    @patch('requests.get')\n    def test_get_forecast(self, mock_get, api):\n        mock_response = Mock()\n        mock_response.json.return_value = {\n            'city': 'Seoul',\n            'days': 7,\n            'forecast': [...]\n        }\n        mock_get.return_value = mock_response\n\n        result = api.get_forecast('Seoul', days=7)\n\n        assert result['city'] == 'Seoul'\n        mock_get.assert_called_once_with(\n            'https://api.weather.com/v1/forecast',\n            params={'city': 'Seoul', 'days': 7, 'api_key': 'test_key_123'}\n        )\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uc2b5-3-tdd\ub85c-queue-\uad6c\ud604",children:"\uc5f0\uc2b5 3: TDD\ub85c Queue \uad6c\ud604"}),"\n",(0,r.jsx)(n.p,{children:"TDD \ubc29\uc2dd\uc73c\ub85c Queue \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\uc138\uc694. \ub2e4\uc74c \uae30\ub2a5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"enqueue(item)"}),": \uc544\uc774\ud15c \ucd94\uac00"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dequeue()"}),": \uc544\uc774\ud15c \uc81c\uac70 \ubc0f \ubc18\ud658"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"peek()"}),": \uccab \ubc88\uc9f8 \uc544\uc774\ud15c \ubc18\ud658 (\uc81c\uac70\ud558\uc9c0 \uc54a\uc74c)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"is_empty()"}),": \ube44\uc5b4\uc788\ub294\uc9c0 \ud655\uc778"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"size()"}),": \ud06c\uae30 \ubc18\ud658"]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\n\n# 1\ub2e8\uacc4: \ud14c\uc2a4\ud2b8 \uc791\uc131\ndef test_queue_is_empty_when_created():\n    queue = Queue()\n    assert queue.is_empty() == True\n\ndef test_enqueue_adds_item():\n    queue = Queue()\n    queue.enqueue(1)\n    assert queue.is_empty() == False\n    assert queue.size() == 1\n\ndef test_dequeue_removes_and_returns_first_item():\n    queue = Queue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n    queue.enqueue(3)\n\n    item = queue.dequeue()\n    assert item == 1\n    assert queue.size() == 2\n\ndef test_dequeue_on_empty_queue_raises_error():\n    queue = Queue()\n    with pytest.raises(IndexError):\n        queue.dequeue()\n\ndef test_peek_returns_first_item_without_removing():\n    queue = Queue()\n    queue.enqueue(1)\n    queue.enqueue(2)\n\n    item = queue.peek()\n    assert item == 1\n    assert queue.size() == 2\n\ndef test_fifo_order():\n    queue = Queue()\n    items = [1, 2, 3, 4, 5]\n\n    for item in items:\n        queue.enqueue(item)\n\n    for expected in items:\n        actual = queue.dequeue()\n        assert actual == expected\n\n# 2\ub2e8\uacc4: \uad6c\ud604\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError("Queue is empty")\n        return self.items.pop(0)\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError("Queue is empty")\n        return self.items[0]\n\n    def size(self):\n        return len(self.items)\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"617-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"6.17 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"\ud14c\uc2a4\ud2b8-\uc791\uc131-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ud14c\uc2a4\ud2b8 \uc791\uc131 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ubaa8\ub4e0 public \uba54\uc11c\ub4dc\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8\uac00 \uc788\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc5e3\uc9c0 \ucf00\uc774\uc2a4(\ube48 \uc785\ub825, null, \uacbd\uacc4\uac12 \ub4f1)\ub97c \ud14c\uc2a4\ud2b8\ud588\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc608\uc678 \ucc98\ub9ac\ub97c \ud14c\uc2a4\ud2b8\ud588\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8 \uc774\ub984\uc774 \uba85\ud655\ud558\uace0 \uc124\uba85\uc801\uc778\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uac01 \ud14c\uc2a4\ud2b8\uac00 \ud558\ub098\uc758 \uac1c\ub150\ub9cc \ud14c\uc2a4\ud2b8\ud558\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8\uac00 \uc11c\ub85c \ub3c5\ub9bd\uc801\uc778\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Setup/teardown\uc774 \uc801\uc808\ud788 \uc0ac\uc6a9\ub418\uc5c8\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Mock/Stub\uc774 \ud544\uc694\ud55c \uacf3\uc5d0 \uc0ac\uc6a9\ub418\uc5c8\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0\uac00 \uc801\uc808\ud55c\uac00?"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ucf54\ub4dc-\ub9ac\ubdf0-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ucf54\ub4dc \ub9ac\ubdf0 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8\uac00 \uc2e4\uc81c\ub85c \ud14c\uc2a4\ud2b8\ud558\uace0\uc790 \ud558\ub294 \uac83\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8\uac00 \uc2e4\ud328\ud560 \uc218 \uc788\ub294\uac00? (\ud56d\uc0c1 \uc131\uacf5\ud558\ub294 \ud14c\uc2a4\ud2b8\ub294 \ubb34\uc758\ubbf8)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8\uac00 \ube60\ub974\uac8c \uc2e4\ud589\ub418\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc678\ubd80 \uc758\uc874\uc131\uc774 \uc801\uc808\ud788 \uaca9\ub9ac\ub418\uc5c8\ub294\uac00?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uac00 \uba85\ud655\ud558\uace0 \uc758\ubbf8\uc788\ub294\uac00?"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"618-\ud301\uacfc-\ud2b8\ub9ad",children:"6.18 \ud301\uacfc \ud2b8\ub9ad"}),"\n",(0,r.jsx)(n.admonition,{title:"\ube60\ub978 \ud14c\uc2a4\ud2b8 \uc791\uc131",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"IDE\uc758 \ud14c\uc2a4\ud2b8 \uc0dd\uc131 \uae30\ub2a5 \ud65c\uc6a9"}),"\n",(0,r.jsx)(n.li,{children:"\ud14c\uc2a4\ud2b8 \ud15c\ud50c\ub9bf \uc0ac\uc6a9"}),"\n",(0,r.jsx)(n.li,{children:"Parametrize\ub85c \uc5ec\ub7ec \ucf00\uc774\uc2a4\ub97c \ud55c \ubc88\uc5d0"}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{title:"\ub514\ubc84\uae45",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# pytest\uc5d0\uc11c print \ucd9c\ub825 \ubcf4\uae30\npytest -s\n\n# \uc2e4\ud328\ud55c \ud14c\uc2a4\ud2b8\ub9cc \uc7ac\uc2e4\ud589\npytest --lf  # last failed\n\n# \ud2b9\uc815 \ud14c\uc2a4\ud2b8\ub9cc \uc2e4\ud589\npytest tests/test_user.py::test_create_user\npytest -k "test_user"  # \uc774\ub984 \ud328\ud134 \ub9e4\uce6d\n\n# \uc0c1\uc138 \ucd9c\ub825\npytest -vv\n\n# PDB\ub85c \ub514\ubc84\uae45\npytest --pdb  # \uc2e4\ud328 \uc2dc \ub514\ubc84\uac70 \uc9c4\uc785\npytest --trace  # \uc2dc\uc791\ubd80\ud130 \ub514\ubc84\uac70\n'})})}),"\n",(0,r.jsx)(n.admonition,{title:"\ud754\ud55c \uc2e4\uc218",type:"warning",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud14c\uc2a4\ud2b8 \uac04 \uc0c1\ud0dc \uacf5\uc720"}),": \uac01 \ud14c\uc2a4\ud2b8\ub294 \ub3c5\ub9bd\uc801\uc774\uc5b4\uc57c \ud568"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc2e4\uc81c \uc678\ubd80 \uc11c\ube44\uc2a4 \ud638\ucd9c"}),": Mock \uc0ac\uc6a9"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub108\ubb34 \ub9ce\uc740 \uac83\uc744 \ud55c \ud14c\uc2a4\ud2b8\uc5d0\uc11c"}),": \ud558\ub098\uc758 \ud14c\uc2a4\ud2b8\ub294 \ud558\ub098\uc758 \uac1c\ub150\ub9cc"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud14c\uc2a4\ud2b8 \uc21c\uc11c \uc758\uc874"}),": \ud14c\uc2a4\ud2b8 \uc21c\uc11c\ub294 \ubb34\uc791\uc704\uc77c \uc218 \uc788\uc74c"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub9e4\uc9c1 \ub118\ubc84/\ubb38\uc790\uc5f4"}),": \ubcc0\uc218\ub85c \uc758\ubbf8\ub97c \uba85\ud655\ud788"]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"619-\ucd94\uac00-\ub9ac\uc18c\uc2a4",children:"6.19 \ucd94\uac00 \ub9ac\uc18c\uc2a4"}),"\n",(0,r.jsx)(n.h3,{id:"\ucd94\ucc9c-\ub3c4\uc11c",children:"\ucd94\ucc9c \ub3c4\uc11c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Test Driven Development: By Example" - Kent Beck'}),"\n",(0,r.jsx)(n.li,{children:'"Growing Object-Oriented Software, Guided by Tests" - Steve Freeman'}),"\n",(0,r.jsx)(n.li,{children:'"Python Testing with pytest" - Brian Okken'}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\uc720\uc6a9\ud55c-\ub77c\uc774\ube0c\ub7ec\ub9ac",children:"\uc720\uc6a9\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \ud14c\uc2a4\ud305 \ud504\ub808\uc784\uc6cc\ud06c\npytest                  # \uac00\uc7a5 \uc778\uae30\uc788\ub294 \ud14c\uc2a4\ud305 \ud504\ub808\uc784\uc6cc\ud06c\nunittest               # \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\nnose2                  # unittest \ud655\uc7a5\n\n# Mock/Stub\nunittest.mock          # \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\npytest-mock            # pytest\uc6a9 mock\nresponses              # requests \ub77c\uc774\ube0c\ub7ec\ub9ac mock\nfreezegun              # \uc2dc\uac04 mock\n\n# \ucee4\ubc84\ub9ac\uc9c0\npytest-cov             # pytest \ucee4\ubc84\ub9ac\uc9c0 \ud50c\ub7ec\uadf8\uc778\ncoverage               # \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\n\n# \ube44\ub3d9\uae30 \ud14c\uc2a4\ud305\npytest-asyncio         # \ube44\ub3d9\uae30 \ud14c\uc2a4\ud2b8\naioresponses           # aiohttp mock\n\n# \uae30\ud0c0\nhypothesis             # Property-based testing\nfaker                  # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131\nfactory-boy            # \ud14c\uc2a4\ud2b8 \ud53d\uc2a4\ucc98 \uc0dd\uc131\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\uc815\ub9ac",children:"\uc815\ub9ac"}),"\n",(0,r.jsx)(n.p,{children:"\ud14c\uc2a4\ud305\uc740 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uae30\ubcf8 \uac1c\ub150"}),": unittest\uc640 pytest \ub9c8\uc2a4\ud130"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud14c\uc2a4\ud2b8 \uad6c\uc870"}),": AAA \ud328\ud134, \uaca9\ub9ac, \ub3c5\ub9bd\uc131"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mock\uacfc Stub"}),": \uc678\ubd80 \uc758\uc874\uc131 \uc81c\uac70"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ucee4\ubc84\ub9ac\uc9c0"}),": \uce21\uc815\ud558\ub418 \ub9f9\uc2e0\ud558\uc9c0 \ub9d0 \uac83"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TDD"}),": Red-Green-Refactor \uc0ac\uc774\ud074"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI/CD"}),": \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8 \uc2e4\ud589"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ubaa8\ubc94 \uc0ac\ub840"}),": \uba85\ud655\ud55c \ud14c\uc2a4\ud2b8, DRY \uc6d0\uce59"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\ub2e4\uc74c \uc139\uc158\uc5d0\uc11c\ub294 \uc2e4\uc804 \uacfc\uc815\uc73c\ub85c \uc6f9 \uc2a4\ud06c\ub798\ud551\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"../practical/web-scraping",children:"\uc2e4\uc804 \uacfc\uc815"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);