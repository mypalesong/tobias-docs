"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1684],{5929:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"apscheduler/jobs","title":"4. Job \uad00\ub9ac","description":"Job\uc740 APScheduler\uc5d0\uc11c \uc2e4\ud589\ub420 \uc791\uc5c5\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Job\uc744 \ucd94\uac00, \uc218\uc815, \uc81c\uac70, \uc870\ud68c\ud558\uace0 \uc77c\uc2dc\uc815\uc9c0/\uc7ac\uac1c\ud558\ub294 \ubc29\ubc95\uacfc Misfire \ucc98\ub9ac\uc5d0 \ub300\ud574 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/apscheduler/jobs.md","sourceDirName":"apscheduler","slug":"/apscheduler/jobs","permalink":"/tobias-docs/comp-2/docs/apscheduler/jobs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/apscheduler/jobs.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"apschedulerSidebar","previous":{"title":"3. \ud2b8\ub9ac\uac70","permalink":"/tobias-docs/comp-2/docs/apscheduler/triggers"},"next":{"title":"5. Executors","permalink":"/tobias-docs/comp-2/docs/apscheduler/executors"}}');var s=r(4848),o=r(8453);const i={sidebar_position:5},d="4. Job \uad00\ub9ac",a={},l=[{value:"Job \ucd94\uac00",id:"job-\ucd94\uac00",level:2},{value:"\uae30\ubcf8 \ucd94\uac00 \ubc29\ubc95",id:"\uae30\ubcf8-\ucd94\uac00-\ubc29\ubc95",level:3},{value:"\ub370\ucf54\ub808\uc774\ud130\ub97c \uc0ac\uc6a9\ud55c \ucd94\uac00",id:"\ub370\ucf54\ub808\uc774\ud130\ub97c-\uc0ac\uc6a9\ud55c-\ucd94\uac00",level:3},{value:"kwargs\ub97c \uc0ac\uc6a9\ud55c \ucd94\uac00",id:"kwargs\ub97c-\uc0ac\uc6a9\ud55c-\ucd94\uac00",level:3},{value:"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc\ub97c Job\uc73c\ub85c \ucd94\uac00",id:"\ud074\ub798\uc2a4-\uba54\uc11c\ub4dc\ub97c-job\uc73c\ub85c-\ucd94\uac00",level:3},{value:"\ub78c\ub2e4\uc640 partial \ud568\uc218 \uc0ac\uc6a9",id:"\ub78c\ub2e4\uc640-partial-\ud568\uc218-\uc0ac\uc6a9",level:3},{value:"\ub3d9\uc801 Job \ucd94\uac00",id:"\ub3d9\uc801-job-\ucd94\uac00",level:3},{value:"Job \uc218\uc815",id:"job-\uc218\uc815",level:2},{value:"\uae30\ubcf8 \uc218\uc815 \ubc29\ubc95",id:"\uae30\ubcf8-\uc218\uc815-\ubc29\ubc95",level:3},{value:"Job \uac1d\uccb4\ub97c \ud1b5\ud55c \uc218\uc815",id:"job-\uac1d\uccb4\ub97c-\ud1b5\ud55c-\uc218\uc815",level:3},{value:"\ud2b8\ub9ac\uac70 \ubcc0\uacbd",id:"\ud2b8\ub9ac\uac70-\ubcc0\uacbd",level:3},{value:"\uc870\uac74\ubd80 Job \uc218\uc815",id:"\uc870\uac74\ubd80-job-\uc218\uc815",level:3},{value:"\uc77c\uad04 Job \uc218\uc815",id:"\uc77c\uad04-job-\uc218\uc815",level:3},{value:"Job \uc81c\uac70",id:"job-\uc81c\uac70",level:2},{value:"\uae30\ubcf8 \uc81c\uac70 \ubc29\ubc95",id:"\uae30\ubcf8-\uc81c\uac70-\ubc29\ubc95",level:3},{value:"\uc870\uac74\ubd80 \uc81c\uac70",id:"\uc870\uac74\ubd80-\uc81c\uac70",level:3},{value:"\ud328\ud134\uc73c\ub85c Job \uc81c\uac70",id:"\ud328\ud134\uc73c\ub85c-job-\uc81c\uac70",level:3},{value:"\ubaa8\ub4e0 Job \uc81c\uac70",id:"\ubaa8\ub4e0-job-\uc81c\uac70",level:3},{value:"Job Store\ubcc4 \uc81c\uac70",id:"job-store\ubcc4-\uc81c\uac70",level:3},{value:"Job \uc870\ud68c",id:"job-\uc870\ud68c",level:2},{value:"\uae30\ubcf8 \uc870\ud68c",id:"\uae30\ubcf8-\uc870\ud68c",level:3},{value:"Job \uc0c1\uc138 \uc815\ubcf4",id:"job-\uc0c1\uc138-\uc815\ubcf4",level:3},{value:"Job \uac80\uc0c9 \ubc0f \ud544\ud130\ub9c1",id:"job-\uac80\uc0c9-\ubc0f-\ud544\ud130\ub9c1",level:3},{value:"Job \ud1b5\uacc4",id:"job-\ud1b5\uacc4",level:3},{value:"Job \uc77c\uc2dc\uc815\uc9c0 \ubc0f \uc7ac\uac1c",id:"job-\uc77c\uc2dc\uc815\uc9c0-\ubc0f-\uc7ac\uac1c",level:2},{value:"\uae30\ubcf8 \uc77c\uc2dc\uc815\uc9c0/\uc7ac\uac1c",id:"\uae30\ubcf8-\uc77c\uc2dc\uc815\uc9c0\uc7ac\uac1c",level:3},{value:"\uc870\uac74\ubd80 \uc77c\uc2dc\uc815\uc9c0",id:"\uc870\uac74\ubd80-\uc77c\uc2dc\uc815\uc9c0",level:3},{value:"\uc2a4\ucf00\uc904\ub7ec \uc804\uccb4 \uc77c\uc2dc\uc815\uc9c0",id:"\uc2a4\ucf00\uc904\ub7ec-\uc804\uccb4-\uc77c\uc2dc\uc815\uc9c0",level:3},{value:"\uc77c\uc2dc\uc815\uc9c0 \uc0c1\ud0dc \ud655\uc778",id:"\uc77c\uc2dc\uc815\uc9c0-\uc0c1\ud0dc-\ud655\uc778",level:3},{value:"Misfire \ucc98\ub9ac",id:"misfire-\ucc98\ub9ac",level:2},{value:"Misfire Grace Time",id:"misfire-grace-time",level:3},{value:"Coalesce \uc124\uc815",id:"coalesce-\uc124\uc815",level:3},{value:"Misfire \uc774\ubca4\ud2b8 \ucc98\ub9ac",id:"misfire-\uc774\ubca4\ud2b8-\ucc98\ub9ac",level:3},{value:"Max Instances \uc81c\uc5b4",id:"max-instances-\uc81c\uc5b4",level:3},{value:"Misfire \ubcf5\uad6c \uc804\ub7b5",id:"misfire-\ubcf5\uad6c-\uc804\ub7b5",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"4-job-\uad00\ub9ac",children:"4. Job \uad00\ub9ac"})}),"\n",(0,s.jsx)(n.p,{children:"Job\uc740 APScheduler\uc5d0\uc11c \uc2e4\ud589\ub420 \uc791\uc5c5\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Job\uc744 \ucd94\uac00, \uc218\uc815, \uc81c\uac70, \uc870\ud68c\ud558\uace0 \uc77c\uc2dc\uc815\uc9c0/\uc7ac\uac1c\ud558\ub294 \ubc29\ubc95\uacfc Misfire \ucc98\ub9ac\uc5d0 \ub300\ud574 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h2,{id:"job-\ucd94\uac00",children:"Job \ucd94\uac00"}),"\n",(0,s.jsx)(n.p,{children:"Job\uc744 \uc2a4\ucf00\uc904\ub7ec\uc5d0 \ucd94\uac00\ud558\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"\uae30\ubcf8-\ucd94\uac00-\ubc29\ubc95",children:"\uae30\ubcf8 \ucd94\uac00 \ubc29\ubc95"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef my_job(name, value):\n    \"\"\"\uc791\uc5c5 \ud568\uc218\"\"\"\n    print(f\"\uc791\uc5c5 \uc2e4\ud589: {name} = {value}, \uc2dc\uac04: {datetime.now()}\")\n\n# add_job \uba54\uc11c\ub4dc \uc0ac\uc6a9\njob = scheduler.add_job(\n    func=my_job,\n    trigger='interval',\n    seconds=10,\n    args=['param1', 42],\n    id='job_1',\n    name='My First Job',\n    replace_existing=True\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ub370\ucf54\ub808\uc774\ud130\ub97c-\uc0ac\uc6a9\ud55c-\ucd94\uac00",children:"\ub370\ucf54\ub808\uc774\ud130\ub97c \uc0ac\uc6a9\ud55c \ucd94\uac00"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\n@scheduler.scheduled_job(\'interval\', seconds=30, id=\'decorated_job\')\ndef scheduled_task():\n    """\ub370\ucf54\ub808\uc774\ud130\ub85c \ucd94\uac00\ub41c \uc791\uc5c5"""\n    print(f"\ub370\ucf54\ub808\uc774\ud130 \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n\n@scheduler.scheduled_job(\'cron\', hour=9, minute=0, id=\'morning_job\')\ndef morning_routine():\n    """\ub9e4\uc77c \uc544\uce68 \uc791\uc5c5"""\n    print(f"\uc88b\uc740 \uc544\uce68\uc785\ub2c8\ub2e4! {datetime.now()}")\n\nscheduler.start()\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"kwargs\ub97c-\uc0ac\uc6a9\ud55c-\ucd94\uac00",children:"kwargs\ub97c \uc0ac\uc6a9\ud55c \ucd94\uac00"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\n\nscheduler = BackgroundScheduler()\n\ndef send_email(recipient, subject, body):\n    \"\"\"\uc774\uba54\uc77c \uc804\uc1a1\"\"\"\n    print(f\"\uc774\uba54\uc77c \uc804\uc1a1: {recipient}\")\n    print(f\"\uc81c\ubaa9: {subject}\")\n    print(f\"\ub0b4\uc6a9: {body}\")\n\n# kwargs \uc0ac\uc6a9\nscheduler.add_job(\n    send_email,\n    'interval',\n    minutes=5,\n    kwargs={\n        'recipient': 'user@example.com',\n        'subject': '\uc8fc\uac04 \ub9ac\ud3ec\ud2b8',\n        'body': '\uc774\ubc88 \uc8fc \uc694\uc57d\uc785\ub2c8\ub2e4.'\n    },\n    id='email_job'\n)\n\nscheduler.start()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ud074\ub798\uc2a4-\uba54\uc11c\ub4dc\ub97c-job\uc73c\ub85c-\ucd94\uac00",children:"\ud074\ub798\uc2a4 \uba54\uc11c\ub4dc\ub97c Job\uc73c\ub85c \ucd94\uac00"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nclass DataProcessor:\n    """\ub370\uc774\ud130 \ucc98\ub9ac \ud074\ub798\uc2a4"""\n\n    def __init__(self, name):\n        self.name = name\n        self.processed_count = 0\n\n    def process(self):\n        """\ub370\uc774\ud130 \ucc98\ub9ac"""\n        self.processed_count += 1\n        print(f"[{self.name}] \ub370\uc774\ud130 \ucc98\ub9ac #{self.processed_count}: {datetime.now()}")\n\n    def cleanup(self):\n        """\uc815\ub9ac \uc791\uc5c5"""\n        print(f"[{self.name}] \uc815\ub9ac \uc791\uc5c5 \uc2e4\ud589")\n\nscheduler = BackgroundScheduler()\n\n# \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\nprocessor1 = DataProcessor("Processor-1")\nprocessor2 = DataProcessor("Processor-2")\n\n# \uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc\ub97c Job\uc73c\ub85c \ucd94\uac00\nscheduler.add_job(processor1.process, \'interval\', seconds=5, id=\'process_1\')\nscheduler.add_job(processor2.process, \'interval\', seconds=10, id=\'process_2\')\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\ub78c\ub2e4\uc640-partial-\ud568\uc218-\uc0ac\uc6a9",children:"\ub78c\ub2e4\uc640 partial \ud568\uc218 \uc0ac\uc6a9"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom functools import partial\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef generic_task(task_type, priority, data):\n    \"\"\"\ubc94\uc6a9 \uc791\uc5c5 \ud568\uc218\"\"\"\n    print(f\"[{task_type}] \uc6b0\uc120\uc21c\uc704: {priority}, \ub370\uc774\ud130: {data}\")\n\n# partial \ud568\uc218 \uc0ac\uc6a9\nhigh_priority_task = partial(generic_task, 'urgent', 1)\nscheduler.add_job(\n    high_priority_task,\n    'interval',\n    seconds=10,\n    args=['\uc911\uc694\ud55c \ub370\uc774\ud130'],\n    id='high_priority'\n)\n\n# \ub78c\ub2e4 \uc0ac\uc6a9 (\uac04\ub2e8\ud55c \uacbd\uc6b0\uc5d0\ub9cc \uad8c\uc7a5)\nscheduler.add_job(\n    lambda: print(f\"\ub78c\ub2e4 \uc791\uc5c5: {datetime.now()}\"),\n    'interval',\n    seconds=15,\n    id='lambda_job'\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ub3d9\uc801-job-\ucd94\uac00",children:"\ub3d9\uc801 Job \ucd94\uac00"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime, timedelta\nimport time\n\nclass DynamicJobManager:\n    """\ub3d9\uc801\uc73c\ub85c Job\uc744 \ucd94\uac00\ud558\ub294 \ub9e4\ub2c8\uc800"""\n\n    def __init__(self):\n        self.scheduler = BackgroundScheduler()\n        self.job_counter = 0\n\n    def start(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc2dc\uc791"""\n        self.scheduler.start()\n\n    def add_temporary_job(self, func, duration_seconds, interval_seconds=1):\n        """\uc784\uc2dc Job \ucd94\uac00 (\uc77c\uc815 \uc2dc\uac04 \ud6c4 \uc790\ub3d9 \uc81c\uac70)"""\n        self.job_counter += 1\n        job_id = f\'temp_job_{self.job_counter}\'\n\n        # Job \ucd94\uac00\n        end_time = datetime.now() + timedelta(seconds=duration_seconds)\n        self.scheduler.add_job(\n            func,\n            \'interval\',\n            seconds=interval_seconds,\n            end_date=end_time,\n            id=job_id,\n            name=f\'Temporary Job {self.job_counter}\'\n        )\n\n        print(f"\uc784\uc2dc Job \ucd94\uac00: {job_id} (\uc885\ub8cc: {end_time})")\n        return job_id\n\n    def add_delayed_job(self, func, delay_seconds, *args, **kwargs):\n        """\uc9c0\uc5f0 \uc2e4\ud589 Job \ucd94\uac00"""\n        self.job_counter += 1\n        job_id = f\'delayed_job_{self.job_counter}\'\n\n        run_time = datetime.now() + timedelta(seconds=delay_seconds)\n        self.scheduler.add_job(\n            func,\n            \'date\',\n            run_date=run_time,\n            args=args,\n            kwargs=kwargs,\n            id=job_id\n        )\n\n        print(f"\uc9c0\uc5f0 Job \ucd94\uac00: {job_id} (\uc2e4\ud589: {run_time})")\n        return job_id\n\n    def add_countdown_job(self, func, count, interval_seconds=1):\n        """\uce74\uc6b4\ud2b8\ub2e4\uc6b4 Job (\uc9c0\uc815 \ud69f\uc218\ub9cc \uc2e4\ud589)"""\n        self.job_counter += 1\n        job_id = f\'countdown_job_{self.job_counter}\'\n\n        def countdown_wrapper():\n            nonlocal count\n            count -= 1\n            print(f"\uce74\uc6b4\ud2b8\ub2e4\uc6b4: {count}")\n            func()\n\n            if count <= 0:\n                print(f"\uce74\uc6b4\ud2b8\ub2e4\uc6b4 \uc644\ub8cc, Job \uc81c\uac70: {job_id}")\n                self.scheduler.remove_job(job_id)\n\n        self.scheduler.add_job(\n            countdown_wrapper,\n            \'interval\',\n            seconds=interval_seconds,\n            id=job_id\n        )\n\n        return job_id\n\n    def shutdown(self):\n        """\uc2a4\ucf00\uc904\ub7ec \uc885\ub8cc"""\n        self.scheduler.shutdown()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nmanager = DynamicJobManager()\nmanager.start()\n\ndef task():\n    print(f"  \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n\n# 30\ucd08 \ub3d9\uc548\ub9cc \uc2e4\ud589\ub418\ub294 \uc784\uc2dc Job\nmanager.add_temporary_job(task, duration_seconds=30, interval_seconds=5)\n\n# 10\ucd08 \ud6c4\uc5d0 \uc2e4\ud589\ub418\ub294 \uc9c0\uc5f0 Job\nmanager.add_delayed_job(lambda: print("\uc9c0\uc5f0\ub41c \uc791\uc5c5 \uc2e4\ud589!"), delay_seconds=10)\n\n# 5\ubc88\ub9cc \uc2e4\ud589\ub418\ub294 \uce74\uc6b4\ud2b8\ub2e4\uc6b4 Job\nmanager.add_countdown_job(task, count=5, interval_seconds=3)\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    manager.shutdown()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"job-\uc218\uc815",children:"Job \uc218\uc815"}),"\n",(0,s.jsx)(n.p,{children:"\uc2e4\ud589 \uc911\uc778 Job\uc758 \uc124\uc815\uc744 \ubcc0\uacbd\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"\uae30\ubcf8-\uc218\uc815-\ubc29\ubc95",children:"\uae30\ubcf8 \uc218\uc815 \ubc29\ubc95"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef my_job():\n    print(f\"\uc791\uc5c5 \uc2e4\ud589: {datetime.now()}\")\n\n# Job \ucd94\uac00\njob = scheduler.add_job(my_job, 'interval', seconds=10, id='modifiable_job')\n\nscheduler.start()\n\nprint(f\"\ucd08\uae30 \uac04\uaca9: 10\ucd08\")\ntime.sleep(25)\n\n# Job \uc218\uc815: \uac04\uaca9\uc744 5\ucd08\ub85c \ubcc0\uacbd\nscheduler.reschedule_job('modifiable_job', trigger='interval', seconds=5)\nprint(f\"\uc218\uc815\ub41c \uac04\uaca9: 5\ucd08\")\n\ntime.sleep(25)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"job-\uac1d\uccb4\ub97c-\ud1b5\ud55c-\uc218\uc815",children:"Job \uac1d\uccb4\ub97c \ud1b5\ud55c \uc218\uc815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef adjustable_job(message):\n    print(f\"{message}: {datetime.now()}\")\n\n# Job \ucd94\uac00\njob = scheduler.add_job(\n    adjustable_job,\n    'interval',\n    seconds=10,\n    args=['\uc6d0\ub798 \uba54\uc2dc\uc9c0'],\n    id='adjustable'\n)\n\nscheduler.start()\n\ntime.sleep(15)\n\n# Job \uac1d\uccb4 \uc870\ud68c\njob = scheduler.get_job('adjustable')\n\n# modify() \uba54\uc11c\ub4dc\ub85c args \ubcc0\uacbd\njob.modify(args=['\uc218\uc815\ub41c \uba54\uc2dc\uc9c0'])\nprint(\"Job \uc778\uc790 \uc218\uc815\ub428\")\n\ntime.sleep(15)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ud2b8\ub9ac\uac70-\ubcc0\uacbd",children:"\ud2b8\ub9ac\uac70 \ubcc0\uacbd"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef flexible_job():\n    print(f\"\uc720\uc5f0\ud55c \uc791\uc5c5: {datetime.now()}\")\n\n# \uc778\ud130\ubc8c\ub85c \uc2dc\uc791\nscheduler.add_job(flexible_job, 'interval', seconds=5, id='flexible')\n\nscheduler.start()\n\nprint(\"\uc778\ud130\ubc8c \ubaa8\ub4dc (5\ucd08\ub9c8\ub2e4)\")\ntime.sleep(20)\n\n# Cron\uc73c\ub85c \ubcc0\uacbd\ncron_trigger = CronTrigger(second='*/10')  # 10\ucd08\ub9c8\ub2e4\nscheduler.reschedule_job('flexible', trigger=cron_trigger)\nprint(\"Cron \ubaa8\ub4dc (10\ucd08\ub9c8\ub2e4)\")\n\ntime.sleep(30)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\uc870\uac74\ubd80-job-\uc218\uc815",children:"\uc870\uac74\ubd80 Job \uc218\uc815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\nimport random\n\nclass AdaptiveJob:\n    """\uc131\ub2a5\uc5d0 \ub530\ub77c \uac04\uaca9\uc744 \uc870\uc815\ud558\ub294 Job"""\n\n    def __init__(self, scheduler, job_id):\n        self.scheduler = scheduler\n        self.job_id = job_id\n        self.execution_times = []\n        self.min_interval = 3\n        self.max_interval = 30\n        self.current_interval = 10\n\n    def execute(self):\n        """\uc791\uc5c5 \uc2e4\ud589 \ubc0f \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1"""\n        start_time = time.time()\n\n        # \uc791\uc5c5 \uc218\ud589\n        print(f"\uc791\uc5c5 \uc2e4\ud589 (\uac04\uaca9: {self.current_interval}\ucd08)")\n        time.sleep(random.uniform(0.1, 1.0))  # \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n\n        # \uc2e4\ud589 \uc2dc\uac04 \uae30\ub85d\n        execution_time = time.time() - start_time\n        self.execution_times.append(execution_time)\n\n        # \ucd5c\uadfc 5\ubc88\uc758 \ud3c9\uade0 \uc2e4\ud589 \uc2dc\uac04 \uacc4\uc0b0\n        if len(self.execution_times) > 5:\n            self.execution_times.pop(0)\n\n        avg_time = sum(self.execution_times) / len(self.execution_times)\n\n        # \uc2e4\ud589 \uc2dc\uac04\uc5d0 \ub530\ub77c \uac04\uaca9 \uc870\uc815\n        if avg_time > 0.5 and self.current_interval < self.max_interval:\n            # \ub290\ub9ac\uba74 \uac04\uaca9 \uc99d\uac00\n            self.current_interval = min(self.current_interval + 2, self.max_interval)\n            self._reschedule()\n            print(f"  -> \uac04\uaca9 \uc99d\uac00: {self.current_interval}\ucd08")\n        elif avg_time < 0.3 and self.current_interval > self.min_interval:\n            # \ube60\ub974\uba74 \uac04\uaca9 \uac10\uc18c\n            self.current_interval = max(self.current_interval - 2, self.min_interval)\n            self._reschedule()\n            print(f"  -> \uac04\uaca9 \uac10\uc18c: {self.current_interval}\ucd08")\n\n    def _reschedule(self):\n        """Job \uc7ac\uc2a4\ucf00\uc904"""\n        self.scheduler.reschedule_job(\n            self.job_id,\n            trigger=\'interval\',\n            seconds=self.current_interval\n        )\n\nscheduler = BackgroundScheduler()\nadaptive = AdaptiveJob(scheduler, \'adaptive_job\')\n\nscheduler.add_job(\n    adaptive.execute,\n    \'interval\',\n    seconds=10,\n    id=\'adaptive_job\'\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\uc77c\uad04-job-\uc218\uc815",children:"\uc77c\uad04 Job \uc218\uc815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef task(name):\n    print(f\"\uc791\uc5c5 {name}: {datetime.now()}\")\n\n# \uc5ec\ub7ec Job \ucd94\uac00\nfor i in range(5):\n    scheduler.add_job(\n        task,\n        'interval',\n        seconds=10,\n        args=[f'Task-{i}'],\n        id=f'task_{i}',\n        tags=['group_a']\n    )\n\nscheduler.start()\n\nprint(\"\ucd08\uae30 \uac04\uaca9: 10\ucd08\")\ntime.sleep(25)\n\n# \ud0dc\uadf8\ub85c Job\uc744 \ucc3e\uc544 \uc77c\uad04 \uc218\uc815\nprint(\"\ubaa8\ub4e0 Job\uc758 \uac04\uaca9\uc744 5\ucd08\ub85c \ubcc0\uacbd\")\nfor job in scheduler.get_jobs():\n    if 'group_a' in job.tags:\n        scheduler.reschedule_job(job.id, trigger='interval', seconds=5)\n\ntime.sleep(25)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"job-\uc81c\uac70",children:"Job \uc81c\uac70"}),"\n",(0,s.jsx)(n.p,{children:"Job\uc744 \uc2a4\ucf00\uc904\ub7ec\uc5d0\uc11c \uc81c\uac70\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"\uae30\ubcf8-\uc81c\uac70-\ubc29\ubc95",children:"\uae30\ubcf8 \uc81c\uac70 \ubc29\ubc95"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef temporary_job():\n    print(f\"\uc784\uc2dc \uc791\uc5c5: {datetime.now()}\")\n\n# Job \ucd94\uac00\nscheduler.add_job(temporary_job, 'interval', seconds=3, id='temp_job')\n\nscheduler.start()\n\nprint(\"Job \uc2e4\ud589 \uc911...\")\ntime.sleep(10)\n\n# Job \uc81c\uac70\nscheduler.remove_job('temp_job')\nprint(\"Job \uc81c\uac70\ub428\")\n\ntime.sleep(10)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\uc870\uac74\ubd80-\uc81c\uac70",children:"\uc870\uac74\ubd80 \uc81c\uac70"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nclass SelfRemovingJob:\n    """\uc870\uac74 \ub9cc\uc871 \uc2dc \uc790\ub3d9\uc73c\ub85c \uc81c\uac70\ub418\ub294 Job"""\n\n    def __init__(self, scheduler, job_id, max_executions=5):\n        self.scheduler = scheduler\n        self.job_id = job_id\n        self.max_executions = max_executions\n        self.execution_count = 0\n\n    def execute(self):\n        """\uc791\uc5c5 \uc2e4\ud589 \ubc0f \uce74\uc6b4\ud2b8"""\n        self.execution_count += 1\n        print(f"\uc2e4\ud589 {self.execution_count}/{self.max_executions}: {datetime.now()}")\n\n        if self.execution_count >= self.max_executions:\n            print("\ucd5c\ub300 \uc2e4\ud589 \ud69f\uc218 \ub3c4\ub2ec, Job \uc81c\uac70")\n            self.scheduler.remove_job(self.job_id)\n\nscheduler = BackgroundScheduler()\nself_removing = SelfRemovingJob(scheduler, \'self_removing\', max_executions=5)\n\nscheduler.add_job(\n    self_removing.execute,\n    \'interval\',\n    seconds=2,\n    id=\'self_removing\'\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(20)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\ud328\ud134\uc73c\ub85c-job-\uc81c\uac70",children:"\ud328\ud134\uc73c\ub85c Job \uc81c\uac70"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef task(name):\n    print(f\"{name}: {datetime.now()}\")\n\n# \ub2e4\uc591\ud55c Job \ucd94\uac00\nscheduler.add_job(task, 'interval', seconds=5, args=['User-1'], id='user_1_task')\nscheduler.add_job(task, 'interval', seconds=5, args=['User-2'], id='user_2_task')\nscheduler.add_job(task, 'interval', seconds=5, args=['Admin'], id='admin_task')\nscheduler.add_job(task, 'interval', seconds=5, args=['System'], id='system_task')\n\nscheduler.start()\n\nprint(\"\ubaa8\ub4e0 Job \uc2e4\ud589 \uc911...\")\ntime.sleep(10)\n\n# \ud328\ud134\uc5d0 \ub9de\ub294 Job \uc81c\uac70\nprint(\"\uc0ac\uc6a9\uc790 \uad00\ub828 Job \uc81c\uac70...\")\njobs_to_remove = [job.id for job in scheduler.get_jobs() if 'user_' in job.id]\nfor job_id in jobs_to_remove:\n    scheduler.remove_job(job_id)\n    print(f\"  - {job_id} \uc81c\uac70\ub428\")\n\nprint(\"\ub0a8\uc740 Job:\")\nfor job in scheduler.get_jobs():\n    print(f\"  - {job.id}\")\n\ntime.sleep(10)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ubaa8\ub4e0-job-\uc81c\uac70",children:"\ubaa8\ub4e0 Job \uc81c\uac70"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef task(n):\n    print(f"\uc791\uc5c5 {n}: {datetime.now()}")\n\n# \uc5ec\ub7ec Job \ucd94\uac00\nfor i in range(10):\n    scheduler.add_job(task, \'interval\', seconds=5, args=[i], id=f\'task_{i}\')\n\nscheduler.start()\n\nprint(f"\ucd1d {len(scheduler.get_jobs())}\uac1c\uc758 Job \uc2e4\ud589 \uc911")\ntime.sleep(10)\n\n# \ubaa8\ub4e0 Job \uc81c\uac70\nprint("\ubaa8\ub4e0 Job \uc81c\uac70...")\nscheduler.remove_all_jobs()\n\nprint(f"\ub0a8\uc740 Job: {len(scheduler.get_jobs())}\uac1c")\n\ntime.sleep(5)\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"job-store\ubcc4-\uc81c\uac70",children:"Job Store\ubcc4 \uc81c\uac70"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.memory import MemoryJobStore\nfrom datetime import datetime\nimport time\n\n# \uc5ec\ub7ec Job Store \uc124\uc815\njobstores = {\n    'default': MemoryJobStore(),\n    'critical': MemoryJobStore()\n}\n\nscheduler = BackgroundScheduler(jobstores=jobstores)\n\ndef task(name):\n    print(f\"{name}: {datetime.now()}\")\n\n# \ub2e4\ub978 Job Store\uc5d0 Job \ucd94\uac00\nscheduler.add_job(task, 'interval', seconds=5, args=['\uc77c\ubc18 \uc791\uc5c5'],\n                  id='normal_1', jobstore='default')\nscheduler.add_job(task, 'interval', seconds=5, args=['\uc911\uc694 \uc791\uc5c5'],\n                  id='critical_1', jobstore='critical')\n\nscheduler.start()\n\ntime.sleep(10)\n\n# \ud2b9\uc815 Job Store\uc758 \ubaa8\ub4e0 Job \uc81c\uac70\nprint(\"\uc77c\ubc18 Job \uc81c\uac70...\")\nscheduler.remove_all_jobs(jobstore='default')\n\nprint(\"\ub0a8\uc740 Job:\")\nfor job in scheduler.get_jobs():\n    print(f\"  - {job.id} (jobstore: {job._jobstore_alias})\")\n\ntime.sleep(10)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"job-\uc870\ud68c",children:"Job \uc870\ud68c"}),"\n",(0,s.jsx)(n.p,{children:"\uc2e4\ud589 \uc911\uc778 Job\uc758 \uc815\ubcf4\ub97c \uc870\ud68c\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"\uae30\ubcf8-\uc870\ud68c",children:"\uae30\ubcf8 \uc870\ud68c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef task(name):\n    print(f\"{name}: {datetime.now()}\")\n\n# Job \ucd94\uac00\nscheduler.add_job(task, 'interval', seconds=10, args=['\uc791\uc5c5-1'], id='job_1')\nscheduler.add_job(task, 'cron', hour=9, minute=0, args=['\uc791\uc5c5-2'], id='job_2')\n\nscheduler.start()\n\n# \ud2b9\uc815 Job \uc870\ud68c\njob = scheduler.get_job('job_1')\nprint(f\"Job ID: {job.id}\")\nprint(f\"Job \uc774\ub984: {job.name}\")\nprint(f\"\ub2e4\uc74c \uc2e4\ud589: {job.next_run_time}\")\nprint(f\"\ud2b8\ub9ac\uac70: {job.trigger}\")\n\n# \ubaa8\ub4e0 Job \uc870\ud68c\nprint(\"\\n\ubaa8\ub4e0 Job:\")\nfor job in scheduler.get_jobs():\n    print(f\"  - {job.id}: \ub2e4\uc74c \uc2e4\ud589 {job.next_run_time}\")\n\ntime.sleep(5)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"job-\uc0c1\uc138-\uc815\ubcf4",children:"Job \uc0c1\uc138 \uc815\ubcf4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\ndef detailed_job_info(job):\n    """Job\uc758 \uc0c1\uc138 \uc815\ubcf4 \ucd9c\ub825"""\n    print(f"\\n{\'=\'*50}")\n    print(f"Job ID: {job.id}")\n    print(f"\uc774\ub984: {job.name}")\n    print(f"\ud568\uc218: {job.func.__name__}")\n    print(f"Args: {job.args}")\n    print(f"Kwargs: {job.kwargs}")\n    print(f"\ud2b8\ub9ac\uac70: {job.trigger}")\n    print(f"\ub2e4\uc74c \uc2e4\ud589: {job.next_run_time}")\n    print(f"Executor: {job.executor}")\n    print(f"\ucd5c\ub300 \uc778\uc2a4\ud134\uc2a4: {job.max_instances}")\n    print(f"Misfire grace time: {job.misfire_grace_time}\ucd08")\n    print(f"Coalesce: {job.coalesce}")\n    print(f"{\'=\'*50}")\n\nscheduler = BackgroundScheduler()\n\ndef my_task(x, y):\n    print(f"\uc791\uc5c5 \uc2e4\ud589: {x} + {y} = {x+y}")\n\njob = scheduler.add_job(\n    my_task,\n    \'interval\',\n    seconds=30,\n    args=[10, 20],\n    id=\'detailed_job\',\n    name=\'\uc0c1\uc138 \uc815\ubcf4 \uc791\uc5c5\',\n    max_instances=3,\n    misfire_grace_time=60,\n    coalesce=True\n)\n\nscheduler.start()\n\n# Job \uc0c1\uc138 \uc815\ubcf4 \ucd9c\ub825\ndetailed_job_info(job)\n\ntime.sleep(5)\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"job-\uac80\uc0c9-\ubc0f-\ud544\ud130\ub9c1",children:"Job \uac80\uc0c9 \ubc0f \ud544\ud130\ub9c1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef task(category, name):\n    print(f\"[{category}] {name}: {datetime.now()}\")\n\n# \ub2e4\uc591\ud55c \uce74\ud14c\uace0\ub9ac\uc758 Job \ucd94\uac00\nscheduler.add_job(task, 'interval', seconds=10, args=['data', 'Backup'],\n                  id='data_backup', tags=['data', 'critical'])\nscheduler.add_job(task, 'interval', seconds=15, args=['data', 'Sync'],\n                  id='data_sync', tags=['data'])\nscheduler.add_job(task, 'interval', seconds=20, args=['report', 'Daily'],\n                  id='report_daily', tags=['report'])\nscheduler.add_job(task, 'interval', seconds=25, args=['report', 'Weekly'],\n                  id='report_weekly', tags=['report', 'critical'])\n\nscheduler.start()\n\n# \ud0dc\uadf8\ub85c \ud544\ud130\ub9c1\nprint(\"\uc911\uc694(critical) Job:\")\nfor job in scheduler.get_jobs():\n    if 'critical' in getattr(job, 'tags', []):\n        print(f\"  - {job.id}\")\n\n# ID \ud328\ud134\uc73c\ub85c \ud544\ud130\ub9c1\nprint(\"\\n\ub370\uc774\ud130 \uad00\ub828 Job:\")\nfor job in scheduler.get_jobs():\n    if 'data_' in job.id:\n        print(f\"  - {job.id}: \ub2e4\uc74c \uc2e4\ud589 {job.next_run_time}\")\n\n# \ud2b8\ub9ac\uac70 \ud0c0\uc785\uc73c\ub85c \ud544\ud130\ub9c1\nprint(\"\\nInterval \ud2b8\ub9ac\uac70 Job:\")\nfor job in scheduler.get_jobs():\n    if 'interval' in str(type(job.trigger).__name__).lower():\n        print(f\"  - {job.id}\")\n\ntime.sleep(5)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"job-\ud1b5\uacc4",children:"Job \ud1b5\uacc4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom collections import defaultdict\nfrom datetime import datetime\nimport time\n\nclass JobStatistics:\n    """Job \ud1b5\uacc4 \uc218\uc9d1"""\n\n    def __init__(self, scheduler):\n        self.scheduler = scheduler\n        self.execution_counts = defaultdict(int)\n        self.error_counts = defaultdict(int)\n\n    def get_statistics(self):\n        """Job \ud1b5\uacc4 \uc870\ud68c"""\n        stats = {\n            \'total_jobs\': len(self.scheduler.get_jobs()),\n            \'jobs_by_trigger\': self._count_by_trigger(),\n            \'next_executions\': self._get_next_executions(),\n            \'execution_counts\': dict(self.execution_counts),\n            \'error_counts\': dict(self.error_counts)\n        }\n        return stats\n\n    def _count_by_trigger(self):\n        """\ud2b8\ub9ac\uac70 \ud0c0\uc785\ubcc4 Job \uc218"""\n        counts = defaultdict(int)\n        for job in self.scheduler.get_jobs():\n            trigger_type = type(job.trigger).__name__\n            counts[trigger_type] += 1\n        return dict(counts)\n\n    def _get_next_executions(self):\n        """\ub2e4\uc74c \uc2e4\ud589 \uc2dc\uac04 \ubaa9\ub85d"""\n        executions = []\n        for job in self.scheduler.get_jobs():\n            if job.next_run_time:\n                executions.append({\n                    \'job_id\': job.id,\n                    \'next_run\': job.next_run_time\n                })\n        return sorted(executions, key=lambda x: x[\'next_run\'])\n\n    def print_statistics(self):\n        """\ud1b5\uacc4 \ucd9c\ub825"""\n        stats = self.get_statistics()\n\n        print("\\n" + "="*60)\n        print("Job \ud1b5\uacc4")\n        print("="*60)\n        print(f"\ucd1d Job \uc218: {stats[\'total_jobs\']}")\n\n        print("\\n\ud2b8\ub9ac\uac70 \ud0c0\uc785\ubcc4:")\n        for trigger_type, count in stats[\'jobs_by_trigger\'].items():\n            print(f"  - {trigger_type}: {count}\uac1c")\n\n        print("\\n\ub2e4\uc74c \uc2e4\ud589 \uc608\uc815:")\n        for item in stats[\'next_executions\'][:5]:\n            print(f"  - {item[\'job_id\']}: {item[\'next_run\']}")\n\n        print("="*60)\n\nscheduler = BackgroundScheduler()\nstatistics = JobStatistics(scheduler)\n\ndef task(n):\n    print(f"\uc791\uc5c5 {n}")\n\n# \ub2e4\uc591\ud55c Job \ucd94\uac00\nfor i in range(3):\n    scheduler.add_job(task, \'interval\', seconds=10+i*5, args=[i], id=f\'interval_{i}\')\n\nfor i in range(2):\n    scheduler.add_job(task, \'cron\', minute=f\'*/{i+1}\', args=[i], id=f\'cron_{i}\')\n\nscheduler.start()\n\n# \ud1b5\uacc4 \ucd9c\ub825\nstatistics.print_statistics()\n\ntime.sleep(5)\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"job-\uc77c\uc2dc\uc815\uc9c0-\ubc0f-\uc7ac\uac1c",children:"Job \uc77c\uc2dc\uc815\uc9c0 \ubc0f \uc7ac\uac1c"}),"\n",(0,s.jsx)(n.p,{children:"Job\uc744 \uc77c\uc2dc\uc801\uc73c\ub85c \uc815\uc9c0\ud558\uace0 \ub098\uc911\uc5d0 \uc7ac\uac1c\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"\uae30\ubcf8-\uc77c\uc2dc\uc815\uc9c0\uc7ac\uac1c",children:"\uae30\ubcf8 \uc77c\uc2dc\uc815\uc9c0/\uc7ac\uac1c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef pausable_job():\n    print(f\"\uc77c\uc2dc\uc815\uc9c0 \uac00\ub2a5 \uc791\uc5c5: {datetime.now()}\")\n\nscheduler.add_job(pausable_job, 'interval', seconds=3, id='pausable')\n\nscheduler.start()\n\nprint(\"Job \uc2e4\ud589 \uc911...\")\ntime.sleep(10)\n\n# Job \uc77c\uc2dc\uc815\uc9c0\nscheduler.pause_job('pausable')\nprint(\"Job \uc77c\uc2dc\uc815\uc9c0\ub428\")\n\ntime.sleep(10)\n\n# Job \uc7ac\uac1c\nscheduler.resume_job('pausable')\nprint(\"Job \uc7ac\uac1c\ub428\")\n\ntime.sleep(10)\n\nscheduler.shutdown()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\uc870\uac74\ubd80-\uc77c\uc2dc\uc815\uc9c0",children:"\uc870\uac74\ubd80 \uc77c\uc2dc\uc815\uc9c0"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime, time as dt_time\nimport time\n\nclass ConditionalPauseJob:\n    """\uc870\uac74\uc5d0 \ub530\ub77c \uc790\ub3d9\uc73c\ub85c \uc77c\uc2dc\uc815\uc9c0/\uc7ac\uac1c\ub418\ub294 Job"""\n\n    def __init__(self, scheduler, job_id, work_start=9, work_end=18):\n        self.scheduler = scheduler\n        self.job_id = job_id\n        self.work_start = work_start\n        self.work_end = work_end\n        self.is_paused = False\n\n    def execute(self):\n        """\uc791\uc5c5 \uc2e4\ud589"""\n        current_hour = datetime.now().hour\n\n        # \uc5c5\ubb34 \uc2dc\uac04 \ud655\uc778\n        if self.work_start <= current_hour < self.work_end:\n            if self.is_paused:\n                print(f"\uc5c5\ubb34 \uc2dc\uac04 \uc2dc\uc791 ({current_hour}\uc2dc), Job \uc7ac\uac1c")\n                self.scheduler.resume_job(self.job_id)\n                self.is_paused = False\n        else:\n            if not self.is_paused:\n                print(f"\uc5c5\ubb34 \uc2dc\uac04 \uc885\ub8cc ({current_hour}\uc2dc), Job \uc77c\uc2dc\uc815\uc9c0")\n                self.scheduler.pause_job(self.job_id)\n                self.is_paused = True\n\n        if not self.is_paused:\n            print(f"\uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n\nscheduler = BackgroundScheduler()\nconditional = ConditionalPauseJob(scheduler, \'conditional_job\', work_start=9, work_end=18)\n\nscheduler.add_job(\n    conditional.execute,\n    \'interval\',\n    seconds=5,\n    id=\'conditional_job\'\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\uc2a4\ucf00\uc904\ub7ec-\uc804\uccb4-\uc77c\uc2dc\uc815\uc9c0",children:"\uc2a4\ucf00\uc904\ub7ec \uc804\uccb4 \uc77c\uc2dc\uc815\uc9c0"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef task(n):\n    print(f"\uc791\uc5c5 {n}: {datetime.now()}")\n\n# \uc5ec\ub7ec Job \ucd94\uac00\nfor i in range(3):\n    scheduler.add_job(task, \'interval\', seconds=5, args=[i], id=f\'task_{i}\')\n\nscheduler.start()\n\nprint("\ubaa8\ub4e0 Job \uc2e4\ud589 \uc911...")\ntime.sleep(15)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc77c\uc2dc\uc815\uc9c0\nscheduler.pause()\nprint("\uc2a4\ucf00\uc904\ub7ec \uc77c\uc2dc\uc815\uc9c0\ub428")\n\ntime.sleep(15)\n\n# \uc2a4\ucf00\uc904\ub7ec \uc7ac\uac1c\nscheduler.resume()\nprint("\uc2a4\ucf00\uc904\ub7ec \uc7ac\uac1c\ub428")\n\ntime.sleep(15)\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\uc77c\uc2dc\uc815\uc9c0-\uc0c1\ud0dc-\ud655\uc778",children:"\uc77c\uc2dc\uc815\uc9c0 \uc0c1\ud0dc \ud655\uc778"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef monitored_job():\n    print(f"\ubaa8\ub2c8\ud130\ub9c1 \uc791\uc5c5: {datetime.now()}")\n\nscheduler.add_job(monitored_job, \'interval\', seconds=5, id=\'monitored\')\n\nscheduler.start()\n\ndef check_job_status(job_id):\n    """Job \uc0c1\ud0dc \ud655\uc778"""\n    job = scheduler.get_job(job_id)\n    if job:\n        # Job\uc758 next_run_time\uc774 None\uc774\uba74 \uc77c\uc2dc\uc815\uc9c0 \uc0c1\ud0dc\n        if job.next_run_time is None:\n            return "\uc77c\uc2dc\uc815\uc9c0"\n        else:\n            return "\uc2e4\ud589 \uc911"\n    return "\uc5c6\uc74c"\n\nprint(f"Job \uc0c1\ud0dc: {check_job_status(\'monitored\')}")\ntime.sleep(10)\n\nscheduler.pause_job(\'monitored\')\nprint(f"Job \uc0c1\ud0dc: {check_job_status(\'monitored\')}")\ntime.sleep(10)\n\nscheduler.resume_job(\'monitored\')\nprint(f"Job \uc0c1\ud0dc: {check_job_status(\'monitored\')}")\ntime.sleep(10)\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"misfire-\ucc98\ub9ac",children:"Misfire \ucc98\ub9ac"}),"\n",(0,s.jsx)(n.p,{children:"Misfire\ub294 Job\uc774 \uc608\uc815\ub41c \uc2dc\uac04\uc5d0 \uc2e4\ud589\ub418\uc9c0 \ubabb\ud55c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"misfire-grace-time",children:"Misfire Grace Time"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef slow_job():\n    """\uc624\ub798 \uac78\ub9ac\ub294 \uc791\uc5c5"""\n    print(f"\uc791\uc5c5 \uc2dc\uc791: {datetime.now()}")\n    time.sleep(8)  # 8\ucd08 \uc18c\uc694\n    print(f"\uc791\uc5c5 \uc644\ub8cc: {datetime.now()}")\n\n# misfire_grace_time\uc774 \uc9e7\uc740 Job\nscheduler.add_job(\n    slow_job,\n    \'interval\',\n    seconds=5,\n    id=\'strict_job\',\n    misfire_grace_time=2,  # 2\ucd08 \uc774\uc0c1 \ub2a6\uc73c\uba74 \uac74\ub108\ub700\n    max_instances=1\n)\n\n# misfire_grace_time\uc774 \uae34 Job\nscheduler.add_job(\n    slow_job,\n    \'interval\',\n    seconds=5,\n    id=\'lenient_job\',\n    misfire_grace_time=10,  # 10\ucd08\uae4c\uc9c0\ub294 \uc2e4\ud589\n    max_instances=1\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    scheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"coalesce-\uc124\uc815",children:"Coalesce \uc124\uc815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\ndef batch_job():\n    """\ubc30\uce58 \uc791\uc5c5"""\n    print(f"\ubc30\uce58 \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n    time.sleep(15)  # 15\ucd08 \uc18c\uc694\n\n# coalesce=True: \ub204\uc801\ub41c \uc2e4\ud589\uc744 \ud558\ub098\ub85c \ud569\uce68\nscheduler.add_job(\n    batch_job,\n    \'interval\',\n    seconds=5,\n    id=\'coalesced_job\',\n    coalesce=True,  # \ub204\uc801\ub41c \uc2e4\ud589\uc744 \ud558\ub098\ub85c\n    max_instances=1\n)\n\n# coalesce=False: \ub204\uc801\ub41c \uc2e4\ud589\uc744 \ubaa8\ub450 \uc2e4\ud589\nscheduler.add_job(\n    batch_job,\n    \'interval\',\n    seconds=5,\n    id=\'non_coalesced_job\',\n    coalesce=False,  # \ub204\uc801\ub41c \uc2e4\ud589\uc744 \ubaa8\ub450 \uc2e4\ud589\n    max_instances=1\n)\n\nscheduler.start()\n\nprint("\uc2a4\ucf00\uc904\ub7ec \uc77c\uc2dc\uc815\uc9c0\ub85c Misfire \ubc1c\uc0dd\uc2dc\ud0a4\uae30...")\nscheduler.pause()\ntime.sleep(20)\n\nprint("\uc2a4\ucf00\uc904\ub7ec \uc7ac\uac1c...")\nscheduler.resume()\n\ntime.sleep(40)\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"misfire-\uc774\ubca4\ud2b8-\ucc98\ub9ac",children:"Misfire \uc774\ubca4\ud2b8 \ucc98\ub9ac"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_MISSED, EVENT_JOB_ERROR, EVENT_JOB_EXECUTED\nfrom datetime import datetime\nimport time\n\nscheduler = BackgroundScheduler()\n\n# Misfire \uce74\uc6b4\ud130\nmisfire_count = {}\n\ndef misfire_listener(event):\n    """Misfire \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108"""\n    job_id = event.job_id\n    misfire_count[job_id] = misfire_count.get(job_id, 0) + 1\n    print(f"[MISFIRE] Job {job_id} \ub193\uce68 (\ucd1d {misfire_count[job_id]}\ud68c)")\n    print(f"  \uc608\uc815 \uc2dc\uac04: {event.scheduled_run_time}")\n\ndef error_listener(event):\n    """\uc5d0\ub7ec \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108"""\n    print(f"[ERROR] Job {event.job_id}: {event.exception}")\n\ndef executed_listener(event):\n    """\uc2e4\ud589 \uc644\ub8cc \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108"""\n    print(f"[SUCCESS] Job {event.job_id} \uc2e4\ud589 \uc644\ub8cc")\n\n# \ub9ac\uc2a4\ub108 \ub4f1\ub85d\nscheduler.add_listener(misfire_listener, EVENT_JOB_MISSED)\nscheduler.add_listener(error_listener, EVENT_JOB_ERROR)\nscheduler.add_listener(executed_listener, EVENT_JOB_EXECUTED)\n\ndef unreliable_job():\n    """\ubd88\uc548\uc815\ud55c \uc791\uc5c5"""\n    print(f"\uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n    time.sleep(7)  # 7\ucd08 \uc18c\uc694\n\nscheduler.add_job(\n    unreliable_job,\n    \'interval\',\n    seconds=5,\n    id=\'unreliable\',\n    misfire_grace_time=3,\n    max_instances=1\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    pass\n\n# \ucd5c\uc885 \ud1b5\uacc4\nprint("\\n=== Misfire \ud1b5\uacc4 ===")\nfor job_id, count in misfire_count.items():\n    print(f"Job {job_id}: {count}\ud68c \ub193\uce68")\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"max-instances-\uc81c\uc5b4",children:"Max Instances \uc81c\uc5b4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_MAX_INSTANCES\nfrom datetime import datetime\nimport time\nimport random\n\nscheduler = BackgroundScheduler()\n\nmax_instances_violations = []\n\ndef max_instances_listener(event):\n    """Max instances \uc704\ubc18 \ub9ac\uc2a4\ub108"""\n    violation = {\n        \'job_id\': event.job_id,\n        \'time\': datetime.now()\n    }\n    max_instances_violations.append(violation)\n    print(f"[WARNING] Job {event.job_id} max_instances \ub3c4\ub2ec")\n\nscheduler.add_listener(max_instances_listener, EVENT_JOB_MAX_INSTANCES)\n\ndef variable_duration_job():\n    """\uc2e4\ud589 \uc2dc\uac04\uc774 \uac00\ubcc0\uc801\uc778 \uc791\uc5c5"""\n    duration = random.randint(5, 15)\n    print(f"\uc791\uc5c5 \uc2dc\uc791 (\uc608\uc0c1 \uc18c\uc694: {duration}\ucd08): {datetime.now()}")\n    time.sleep(duration)\n    print(f"\uc791\uc5c5 \uc644\ub8cc: {datetime.now()}")\n\n# max_instances=1: \ub3d9\uc2dc\uc5d0 \ud558\ub098\ub9cc \uc2e4\ud589\nscheduler.add_job(\n    variable_duration_job,\n    \'interval\',\n    seconds=8,\n    id=\'limited_job\',\n    max_instances=1\n)\n\n# max_instances=3: \ub3d9\uc2dc\uc5d0 \ucd5c\ub300 3\uac1c\uae4c\uc9c0\nscheduler.add_job(\n    variable_duration_job,\n    \'interval\',\n    seconds=8,\n    id=\'flexible_job\',\n    max_instances=3\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(60)\nexcept KeyboardInterrupt:\n    pass\n\n# \ud1b5\uacc4 \ucd9c\ub825\nprint(f"\\n=== Max Instances \uc704\ubc18: {len(max_instances_violations)}\ud68c ===")\nfor violation in max_instances_violations:\n    print(f"  - Job {violation[\'job_id\']}: {violation[\'time\']}")\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"misfire-\ubcf5\uad6c-\uc804\ub7b5",children:"Misfire \ubcf5\uad6c \uc804\ub7b5"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.events import EVENT_JOB_MISSED\nfrom datetime import datetime, timedelta\nimport time\n\nclass MisfireRecovery:\n    """Misfire \ubcf5\uad6c \uc804\ub7b5"""\n\n    def __init__(self, scheduler):\n        self.scheduler = scheduler\n        self.missed_jobs = []\n\n    def misfire_handler(self, event):\n        """Misfire \ubc1c\uc0dd \uc2dc \ubcf5\uad6c \ucc98\ub9ac"""\n        print(f"[MISFIRE] Job {event.job_id} \ub193\uce68")\n\n        # \ub193\uce5c \uc791\uc5c5 \uae30\ub85d\n        self.missed_jobs.append({\n            \'job_id\': event.job_id,\n            \'scheduled_time\': event.scheduled_run_time,\n            \'detected_time\': datetime.now()\n        })\n\n        # \uc989\uc2dc \uc7ac\uc2e4\ud589 \uc2a4\ucf00\uc904\n        job = self.scheduler.get_job(event.job_id)\n        if job:\n            print(f"  -> 5\ucd08 \ud6c4 \uc7ac\uc2e4\ud589 \uc2a4\ucf00\uc904")\n            retry_time = datetime.now() + timedelta(seconds=5)\n            self.scheduler.add_job(\n                job.func,\n                \'date\',\n                run_date=retry_time,\n                args=job.args,\n                kwargs=job.kwargs,\n                id=f\'{event.job_id}_retry_{len(self.missed_jobs)}\'\n            )\n\n    def get_missed_jobs_report(self):\n        """\ub193\uce5c \uc791\uc5c5 \ub9ac\ud3ec\ud2b8"""\n        print("\\n=== Misfire \ub9ac\ud3ec\ud2b8 ===")\n        for missed in self.missed_jobs:\n            delay = (missed[\'detected_time\'] - missed[\'scheduled_time\']).total_seconds()\n            print(f"Job {missed[\'job_id\']}:")\n            print(f"  \uc608\uc815: {missed[\'scheduled_time\']}")\n            print(f"  \uac10\uc9c0: {missed[\'detected_time\']}")\n            print(f"  \uc9c0\uc5f0: {delay:.1f}\ucd08")\n\nscheduler = BackgroundScheduler()\nrecovery = MisfireRecovery(scheduler)\n\nscheduler.add_listener(recovery.misfire_handler, EVENT_JOB_MISSED)\n\ndef important_job():\n    """\uc911\uc694\ud55c \uc791\uc5c5"""\n    print(f"\uc911\uc694 \uc791\uc5c5 \uc2e4\ud589: {datetime.now()}")\n    time.sleep(8)\n\nscheduler.add_job(\n    important_job,\n    \'interval\',\n    seconds=5,\n    id=\'important\',\n    misfire_grace_time=2,\n    max_instances=1\n)\n\nscheduler.start()\n\ntry:\n    time.sleep(30)\nexcept KeyboardInterrupt:\n    pass\n\nrecovery.get_missed_jobs_report()\n\nscheduler.shutdown()\n'})}),"\n",(0,s.jsx)(n.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 APScheduler\uc758 Job \uad00\ub9ac \ubc29\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \uc791\uc5c5\uc744 \uc2e4\ud589\ud558\ub294 Executor\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);