"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[8758],{4879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"webapp/testing","title":"13. \ud14c\uc2a4\ud2b8","description":"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud558\uace0 \uc548\uc815\uc801\uc778 \uc11c\ube44\uc2a4\ub97c \uc81c\uacf5\ud558\uae30 \uc704\ud574\uc11c\ub294 \uccb4\uacc4\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc804\ub7b5\uc774 \ud544\uc218\uc801\uc785\ub2c8\ub2e4. \uc774 \uc7a5\uc5d0\uc11c\ub294 Backend\uc640 Frontend\uc758 \ub2e4\uc591\ud55c \ud14c\uc2a4\ud2b8 \uae30\ubc95\uacfc \ub3c4\uad6c\ub97c \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/webapp/testing.md","sourceDirName":"webapp","slug":"/webapp/testing","permalink":"/tobias-docs/comp-2/docs/webapp/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/webapp/testing.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14},"sidebar":"webappSidebar","previous":{"title":"12. \uc131\ub2a5 \ucd5c\uc801\ud654","permalink":"/tobias-docs/comp-2/docs/webapp/performance"},"next":{"title":"14. \ubc30\ud3ec","permalink":"/tobias-docs/comp-2/docs/webapp/deployment"}}');var r=t(4848),a=t(8453);const i={sidebar_position:14},o="13. \ud14c\uc2a4\ud2b8",c={},d=[{value:"13.1 \ud14c\uc2a4\ud2b8\uc758 \uc911\uc694\uc131",id:"131-\ud14c\uc2a4\ud2b8\uc758-\uc911\uc694\uc131",level:2},{value:"\ud14c\uc2a4\ud2b8\uac00 \ud544\uc694\ud55c \uc774\uc720",id:"\ud14c\uc2a4\ud2b8\uac00-\ud544\uc694\ud55c-\uc774\uc720",level:3},{value:"\ud14c\uc2a4\ud2b8 \ud53c\ub77c\ubbf8\ub4dc",id:"\ud14c\uc2a4\ud2b8-\ud53c\ub77c\ubbf8\ub4dc",level:3},{value:"\ud14c\uc2a4\ud2b8 \uc6d0\uce59",id:"\ud14c\uc2a4\ud2b8-\uc6d0\uce59",level:3},{value:"\ud14c\uc2a4\ud2b8 \ubc94\uc704 \uacb0\uc815",id:"\ud14c\uc2a4\ud2b8-\ubc94\uc704-\uacb0\uc815",level:3},{value:"13.2 Backend \ub2e8\uc704 \ud14c\uc2a4\ud2b8 (pytest)",id:"132-backend-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-pytest",level:2},{value:"pytest \uc124\uce58 \ubc0f \uc124\uc815",id:"pytest-\uc124\uce58-\ubc0f-\uc124\uc815",level:3},{value:"\uae30\ubcf8 \ud14c\uc2a4\ud2b8 \uc791\uc131",id:"\uae30\ubcf8-\ud14c\uc2a4\ud2b8-\uc791\uc131",level:3},{value:"Fixtures \ud65c\uc6a9",id:"fixtures-\ud65c\uc6a9",level:3},{value:"\ubaa8\ub378 \ud14c\uc2a4\ud2b8",id:"\ubaa8\ub378-\ud14c\uc2a4\ud2b8",level:3},{value:"\uc11c\ube44\uc2a4 \ub808\uc774\uc5b4 \ud14c\uc2a4\ud2b8",id:"\uc11c\ube44\uc2a4-\ub808\uc774\uc5b4-\ud14c\uc2a4\ud2b8",level:3},{value:"\ube44\ub3d9\uae30 \ucf54\ub4dc \ud14c\uc2a4\ud2b8",id:"\ube44\ub3d9\uae30-\ucf54\ub4dc-\ud14c\uc2a4\ud2b8",level:3},{value:"13.3 Backend \ud1b5\ud569 \ud14c\uc2a4\ud2b8",id:"133-backend-\ud1b5\ud569-\ud14c\uc2a4\ud2b8",level:2},{value:"FastAPI \ud14c\uc2a4\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8",id:"fastapi-\ud14c\uc2a4\ud2b8-\ud074\ub77c\uc774\uc5b8\ud2b8",level:3},{value:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \ud14c\uc2a4\ud2b8",id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ud2b8\ub79c\uc7ad\uc158-\ud14c\uc2a4\ud2b8",level:3},{value:"13.4 Frontend \ub2e8\uc704 \ud14c\uc2a4\ud2b8 (Vitest)",id:"134-frontend-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-vitest",level:2},{value:"Vitest \uc124\uc815",id:"vitest-\uc124\uc815",level:3},{value:"\uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \ud14c\uc2a4\ud2b8",id:"\uc720\ud2f8\ub9ac\ud2f0-\ud568\uc218-\ud14c\uc2a4\ud2b8",level:3},{value:"Hooks \ud14c\uc2a4\ud2b8",id:"hooks-\ud14c\uc2a4\ud2b8",level:3},{value:"13.5 \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8",id:"135-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",level:2},{value:"\ub2e8\uc21c \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8",id:"\ub2e8\uc21c-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",level:3},{value:"\ud3fc \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8",id:"\ud3fc-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",level:3},{value:"\ub9ac\uc2a4\ud2b8 \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8",id:"\ub9ac\uc2a4\ud2b8-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",level:3},{value:"Context \uc0ac\uc6a9 \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8",id:"context-\uc0ac\uc6a9-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",level:3},{value:"13.6 E2E \ud14c\uc2a4\ud2b8 (Playwright)",id:"136-e2e-\ud14c\uc2a4\ud2b8-playwright",level:2},{value:"Playwright \uc124\uc815",id:"playwright-\uc124\uc815",level:3},{value:"\uae30\ubcf8 E2E \ud14c\uc2a4\ud2b8",id:"\uae30\ubcf8-e2e-\ud14c\uc2a4\ud2b8",level:3},{value:"Page Object Model",id:"page-object-model",level:3},{value:"13.7 API \ud14c\uc2a4\ud2b8",id:"137-api-\ud14c\uc2a4\ud2b8",level:2},{value:"REST API \ud14c\uc2a4\ud2b8",id:"rest-api-\ud14c\uc2a4\ud2b8",level:3},{value:"13.8 \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0",id:"138-\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",level:2},{value:"\ucee4\ubc84\ub9ac\uc9c0 \uc124\uc815",id:"\ucee4\ubc84\ub9ac\uc9c0-\uc124\uc815",level:3},{value:"\ucee4\ubc84\ub9ac\uc9c0 \ubcf4\uace0\uc11c \ud574\uc11d",id:"\ucee4\ubc84\ub9ac\uc9c0-\ubcf4\uace0\uc11c-\ud574\uc11d",level:3},{value:"13.9 Mocking",id:"139-mocking",level:2},{value:"Backend Mocking",id:"backend-mocking",level:3},{value:"Frontend Mocking",id:"frontend-mocking",level:3},{value:"13.10 TDD (Test-Driven Development)",id:"1310-tdd-test-driven-development",level:2},{value:"TDD \uc0ac\uc774\ud074",id:"tdd-\uc0ac\uc774\ud074",level:3},{value:"TDD \uc608\uc81c: \uacc4\uc0b0\uae30 \uad6c\ud604",id:"tdd-\uc608\uc81c-\uacc4\uc0b0\uae30-\uad6c\ud604",level:3},{value:"TDD \uc2e4\uc804: \uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4",id:"tdd-\uc2e4\uc804-\uc0ac\uc6a9\uc790-\uc11c\ube44\uc2a4",level:3},{value:"13.11 CI/CD \ud1b5\ud569",id:"1311-cicd-\ud1b5\ud569",level:2},{value:"GitHub Actions \uc6cc\ud06c\ud50c\ub85c\uc6b0",id:"github-actions-\uc6cc\ud06c\ud50c\ub85c\uc6b0",level:3},{value:"13.12 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8",id:"1312-\uc2e4\uc2b5-\ud504\ub85c\uc81d\ud2b8",level:2},{value:"\uc2e4\uc2b5 1: \uc0ac\uc6a9\uc790 \uad00\ub9ac \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8",id:"\uc2e4\uc2b5-1-\uc0ac\uc6a9\uc790-\uad00\ub9ac-\uc2dc\uc2a4\ud15c-\ud14c\uc2a4\ud2b8",level:3},{value:"\uc2e4\uc2b5 2: \uc1fc\ud551\ubab0 E2E \ud14c\uc2a4\ud2b8",id:"\uc2e4\uc2b5-2-\uc1fc\ud551\ubab0-e2e-\ud14c\uc2a4\ud2b8",level:3},{value:"\uc694\uc57d",id:"\uc694\uc57d",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"13-\ud14c\uc2a4\ud2b8",children:"13. \ud14c\uc2a4\ud2b8"})}),"\n",(0,r.jsx)(n.p,{children:"\uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud558\uace0 \uc548\uc815\uc801\uc778 \uc11c\ube44\uc2a4\ub97c \uc81c\uacf5\ud558\uae30 \uc704\ud574\uc11c\ub294 \uccb4\uacc4\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc804\ub7b5\uc774 \ud544\uc218\uc801\uc785\ub2c8\ub2e4. \uc774 \uc7a5\uc5d0\uc11c\ub294 Backend\uc640 Frontend\uc758 \ub2e4\uc591\ud55c \ud14c\uc2a4\ud2b8 \uae30\ubc95\uacfc \ub3c4\uad6c\ub97c \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"131-\ud14c\uc2a4\ud2b8\uc758-\uc911\uc694\uc131",children:"13.1 \ud14c\uc2a4\ud2b8\uc758 \uc911\uc694\uc131"}),"\n",(0,r.jsx)(n.h3,{id:"\ud14c\uc2a4\ud2b8\uac00-\ud544\uc694\ud55c-\uc774\uc720",children:"\ud14c\uc2a4\ud2b8\uac00 \ud544\uc694\ud55c \uc774\uc720"}),"\n",(0,r.jsx)(n.p,{children:"\ud14c\uc2a4\ud2b8\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720\ub85c \uc911\uc694\ud569\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ubc84\uadf8 \uc870\uae30 \ubc1c\uacac"}),": \uac1c\ubc1c \ub2e8\uacc4\uc5d0\uc11c \ubc84\uadf8\ub97c \ubc1c\uacac\ud558\uace0 \uc218\uc815"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub9ac\ud329\ud1a0\ub9c1 \uc548\uc815\uc131"}),": \ucf54\ub4dc \ubcc0\uacbd \uc2dc \uae30\uc874 \uae30\ub2a5\uc774 \uc815\uc0c1 \uc791\ub3d9\ud558\ub294\uc9c0 \ud655\uc778"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ubb38\uc11c\ud654 \uc5ed\ud560"}),": \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uac00 \ucf54\ub4dc\uc758 \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uc5ec\uc90c"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uac1c\ubc1c \uc18d\ub3c4 \ud5a5\uc0c1"}),": \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8\ub85c \ubc18\ubcf5 \uc791\uc5c5 \uac10\uc18c"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud488\uc9c8 \ubcf4\uc99d"}),": \uc77c\uc815 \uc218\uc900 \uc774\uc0c1\uc758 \ucf54\ub4dc \ud488\uc9c8 \uc720\uc9c0"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud14c\uc2a4\ud2b8-\ud53c\ub77c\ubbf8\ub4dc",children:"\ud14c\uc2a4\ud2b8 \ud53c\ub77c\ubbf8\ub4dc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        /\\\n       /  \\\n      / E2E \\\n     /________\\\n    /          \\\n   / Integration\\\n  /______________\\\n /                \\\n/   Unit Tests     \\\n/____________________\\\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unit Tests (\ub2e8\uc704 \ud14c\uc2a4\ud2b8)"}),": \uac00\uc7a5 \ub9ce\uc740 \uc218, \ube60\ub978 \uc2e4\ud589, \uac1c\ubcc4 \ud568\uc218/\uba54\uc11c\ub4dc \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Tests (\ud1b5\ud569 \ud14c\uc2a4\ud2b8)"}),": \uc911\uac04 \uc218\uc900, \uc5ec\ub7ec \ubaa8\ub4c8 \uac04 \uc0c1\ud638\uc791\uc6a9 \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"E2E Tests (\uc885\ub2e8\uac04 \ud14c\uc2a4\ud2b8)"}),": \uac00\uc7a5 \uc801\uc740 \uc218, \uc2e4\uc81c \uc0ac\uc6a9\uc790 \uc2dc\ub098\ub9ac\uc624 \ud14c\uc2a4\ud2b8"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud14c\uc2a4\ud2b8-\uc6d0\uce59",children:"\ud14c\uc2a4\ud2b8 \uc6d0\uce59"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"FIRST \uc6d0\uce59"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast"}),": \ube60\ub974\uac8c \uc2e4\ud589\ub418\uc5b4\uc57c \ud568"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Independent"}),": \ud14c\uc2a4\ud2b8 \uac04 \ub3c5\ub9bd\uc801\uc774\uc5b4\uc57c \ud568"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repeatable"}),": \uc5b4\ub5a4 \ud658\uacbd\uc5d0\uc11c\ub3c4 \ubc18\ubcf5 \uac00\ub2a5\ud574\uc57c \ud568"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Self-Validating"}),": \uc790\ub3d9\uc73c\ub85c \uc131\uacf5/\uc2e4\ud328\ub97c \ud310\ub2e8\ud574\uc57c \ud568"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timely"}),": \uc801\uc2dc\uc5d0 \uc791\uc131\ub418\uc5b4\uc57c \ud568"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud14c\uc2a4\ud2b8-\ubc94\uc704-\uacb0\uc815",children:"\ud14c\uc2a4\ud2b8 \ubc94\uc704 \uacb0\uc815"}),"\n",(0,r.jsx)(n.p,{children:"\uc6b0\uc120\uc21c\uc704\uc5d0 \ub530\ub978 \ud14c\uc2a4\ud2b8 \ubc94\uc704:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ub192\uc740 \uc6b0\uc120\uc21c\uc704"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ube44\uc988\ub2c8\uc2a4 \ud575\uc2ec \ub85c\uc9c1"}),"\n",(0,r.jsx)(n.li,{children:"\ubcf4\uc548 \uad00\ub828 \uae30\ub2a5"}),"\n",(0,r.jsx)(n.li,{children:"\uacb0\uc81c \ub4f1 \uc911\uc694\ud55c \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,r.jsx)(n.li,{children:"\uc790\uc8fc \ubcc0\uacbd\ub418\ub294 \ucf54\ub4dc"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc911\uac04 \uc6b0\uc120\uc21c\uc704"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218"}),"\n",(0,r.jsx)(n.li,{children:"API \uc5d4\ub4dc\ud3ec\uc778\ud2b8"}),"\n",(0,r.jsx)(n.li,{children:"\ud3fc \uac80\uc99d \ub85c\uc9c1"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ub0ae\uc740 \uc6b0\uc120\uc21c\uc704"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ub2e8\uc21c\ud55c getter/setter"}),"\n",(0,r.jsx)(n.li,{children:"\uc0c1\uc218 \uac12"}),"\n",(0,r.jsx)(n.li,{children:"\uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub798\ud37c"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"132-backend-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-pytest",children:"13.2 Backend \ub2e8\uc704 \ud14c\uc2a4\ud2b8 (pytest)"}),"\n",(0,r.jsx)(n.h3,{id:"pytest-\uc124\uce58-\ubc0f-\uc124\uc815",children:"pytest \uc124\uce58 \ubc0f \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# pytest \ubc0f \uad00\ub828 \ud328\ud0a4\uc9c0 \uc124\uce58\npip install pytest pytest-cov pytest-asyncio pytest-mock\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pytest.ini \uc124\uc815"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[pytest]\n# \ud14c\uc2a4\ud2b8 \ud30c\uc77c \ud328\ud134\npython_files = test_*.py *_test.py\n\n# \ud14c\uc2a4\ud2b8 \ud074\ub798\uc2a4 \ud328\ud134\npython_classes = Test* *Tests\n\n# \ud14c\uc2a4\ud2b8 \ud568\uc218 \ud328\ud134\npython_functions = test_*\n\n# \ucd5c\uc18c Python \ubc84\uc804\nminversion = 3.8\n\n# \ucd94\uac00 \uc635\uc158\naddopts =\n    -v\n    --strict-markers\n    --tb=short\n    --cov=app\n    --cov-report=html\n    --cov-report=term-missing\n\n# \ud14c\uc2a4\ud2b8 \uacbd\ub85c\ntestpaths = tests\n\n# \ub9c8\ucee4 \uc815\uc758\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    slow: Slow running tests\n    database: Tests that require database\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\ud14c\uc2a4\ud2b8-\uc791\uc131",children:"\uae30\ubcf8 \ud14c\uc2a4\ud2b8 \uc791\uc131"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"tests/test_math_utils.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom app.utils.math_utils import add, divide, calculate_discount\n\nclass TestMathUtils:\n    """\uc218\ud559 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \ud14c\uc2a4\ud2b8"""\n\n    def test_add_positive_numbers(self):\n        """\uc591\uc218 \ub367\uc148 \ud14c\uc2a4\ud2b8"""\n        result = add(2, 3)\n        assert result == 5\n\n    def test_add_negative_numbers(self):\n        """\uc74c\uc218 \ub367\uc148 \ud14c\uc2a4\ud2b8"""\n        result = add(-2, -3)\n        assert result == -5\n\n    def test_add_mixed_numbers(self):\n        """\uc591\uc218\uc640 \uc74c\uc218 \ub367\uc148 \ud14c\uc2a4\ud2b8"""\n        result = add(5, -3)\n        assert result == 2\n\n    def test_divide_normal(self):\n        """\uc815\uc0c1\uc801\uc778 \ub098\ub217\uc148 \ud14c\uc2a4\ud2b8"""\n        result = divide(10, 2)\n        assert result == 5.0\n\n    def test_divide_by_zero(self):\n        """0\uc73c\ub85c \ub098\ub204\uae30 \uc608\uc678 \ud14c\uc2a4\ud2b8"""\n        with pytest.raises(ValueError, match="Cannot divide by zero"):\n            divide(10, 0)\n\n    @pytest.mark.parametrize("price,discount,expected", [\n        (100, 10, 90),\n        (200, 20, 160),\n        (50, 0, 50),\n        (1000, 50, 500),\n    ])\n    def test_calculate_discount(self, price, discount, expected):\n        """\ud560\uc778 \uacc4\uc0b0 \ud30c\ub77c\ubbf8\ud130\ud654 \ud14c\uc2a4\ud2b8"""\n        result = calculate_discount(price, discount)\n        assert result == expected\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fixtures-\ud65c\uc6a9",children:"Fixtures \ud65c\uc6a9"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"conftest.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom app.database import Base\nfrom app.models import User, Product\nfrom datetime import datetime\n\n@pytest.fixture(scope="session")\ndef engine():\n    """\ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5d4\uc9c4"""\n    engine = create_engine("sqlite:///:memory:")\n    Base.metadata.create_all(engine)\n    yield engine\n    engine.dispose()\n\n@pytest.fixture(scope="function")\ndef db_session(engine):\n    """\uac01 \ud14c\uc2a4\ud2b8\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158"""\n    Session = sessionmaker(bind=engine)\n    session = Session()\n\n    yield session\n\n    session.rollback()\n    session.close()\n\n@pytest.fixture\ndef sample_user():\n    """\uc0d8\ud50c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130"""\n    return {\n        "email": "test@example.com",\n        "username": "testuser",\n        "password": "Test1234!",\n        "full_name": "Test User"\n    }\n\n@pytest.fixture\ndef sample_product():\n    """\uc0d8\ud50c \uc0c1\ud488 \ub370\uc774\ud130"""\n    return {\n        "name": "Test Product",\n        "description": "Test Description",\n        "price": 29.99,\n        "stock": 100,\n        "category": "electronics"\n    }\n\n@pytest.fixture\ndef created_user(db_session, sample_user):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\ub41c \uc0ac\uc6a9\uc790"""\n    user = User(**sample_user)\n    db_session.add(user)\n    db_session.commit()\n    db_session.refresh(user)\n    return user\n\n@pytest.fixture\ndef created_products(db_session):\n    """\uc5ec\ub7ec \uc0c1\ud488 \uc0dd\uc131"""\n    products = [\n        Product(name=f"Product {i}", price=10.0 * i, stock=50)\n        for i in range(1, 6)\n    ]\n    db_session.add_all(products)\n    db_session.commit()\n    return products\n\n@pytest.fixture\ndef mock_datetime(monkeypatch):\n    """datetime.now() \ubaa8\ud0b9"""\n    class MockDatetime:\n        @classmethod\n        def now(cls):\n            return datetime(2024, 1, 1, 12, 0, 0)\n\n    monkeypatch.setattr("datetime.datetime", MockDatetime)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ubaa8\ub378-\ud14c\uc2a4\ud2b8",children:"\ubaa8\ub378 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"tests/test_models.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom app.models import User, Product, Order, OrderItem\nfrom sqlalchemy.exc import IntegrityError\n\nclass TestUserModel:\n    """User \ubaa8\ub378 \ud14c\uc2a4\ud2b8"""\n\n    def test_create_user(self, db_session, sample_user):\n        """\uc0ac\uc6a9\uc790 \uc0dd\uc131 \ud14c\uc2a4\ud2b8"""\n        user = User(**sample_user)\n        db_session.add(user)\n        db_session.commit()\n\n        assert user.id is not None\n        assert user.email == sample_user["email"]\n        assert user.username == sample_user["username"]\n\n    def test_user_unique_email(self, db_session, created_user, sample_user):\n        """\uc774\uba54\uc77c \uc911\ubcf5 \ud14c\uc2a4\ud2b8"""\n        duplicate_user = User(**sample_user)\n        db_session.add(duplicate_user)\n\n        with pytest.raises(IntegrityError):\n            db_session.commit()\n\n    def test_user_password_hashing(self, db_session, sample_user):\n        """\ube44\ubc00\ubc88\ud638 \ud574\uc2f1 \ud14c\uc2a4\ud2b8"""\n        user = User(**sample_user)\n        db_session.add(user)\n        db_session.commit()\n\n        assert user.hashed_password != sample_user["password"]\n        assert user.verify_password(sample_user["password"]) is True\n        assert user.verify_password("wrongpassword") is False\n\n    def test_user_full_name_property(self, created_user):\n        """\uc0ac\uc6a9\uc790 \uc804\uccb4 \uc774\ub984 \uc18d\uc131 \ud14c\uc2a4\ud2b8"""\n        assert created_user.full_name == "Test User"\n\nclass TestProductModel:\n    """Product \ubaa8\ub378 \ud14c\uc2a4\ud2b8"""\n\n    def test_create_product(self, db_session, sample_product):\n        """\uc0c1\ud488 \uc0dd\uc131 \ud14c\uc2a4\ud2b8"""\n        product = Product(**sample_product)\n        db_session.add(product)\n        db_session.commit()\n\n        assert product.id is not None\n        assert product.name == sample_product["name"]\n        assert product.price == sample_product["price"]\n\n    def test_product_in_stock(self, db_session, sample_product):\n        """\uc7ac\uace0 \ud655\uc778 \ud14c\uc2a4\ud2b8"""\n        product = Product(**sample_product)\n        db_session.add(product)\n        db_session.commit()\n\n        assert product.in_stock() is True\n\n        product.stock = 0\n        assert product.in_stock() is False\n\n    def test_product_discount_price(self, db_session):\n        """\ud560\uc778\uac00 \uacc4\uc0b0 \ud14c\uc2a4\ud2b8"""\n        product = Product(\n            name="Test",\n            price=100.0,\n            discount_percent=20\n        )\n        db_session.add(product)\n        db_session.commit()\n\n        assert product.discount_price() == 80.0\n\nclass TestOrderModel:\n    """Order \ubaa8\ub378 \ud14c\uc2a4\ud2b8"""\n\n    def test_create_order(self, db_session, created_user, created_products):\n        """\uc8fc\ubb38 \uc0dd\uc131 \ud14c\uc2a4\ud2b8"""\n        order = Order(user_id=created_user.id)\n        db_session.add(order)\n        db_session.commit()\n\n        assert order.id is not None\n        assert order.user_id == created_user.id\n        assert order.status == "pending"\n\n    def test_order_total_amount(self, db_session, created_user, created_products):\n        """\uc8fc\ubb38 \ucd1d\uc561 \uacc4\uc0b0 \ud14c\uc2a4\ud2b8"""\n        order = Order(user_id=created_user.id)\n        db_session.add(order)\n\n        # \uc8fc\ubb38 \uc544\uc774\ud15c \ucd94\uac00\n        for product in created_products[:3]:\n            order_item = OrderItem(\n                order=order,\n                product=product,\n                quantity=2,\n                price=product.price\n            )\n            db_session.add(order_item)\n\n        db_session.commit()\n\n        expected_total = sum(p.price * 2 for p in created_products[:3])\n        assert order.total_amount == expected_total\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc11c\ube44\uc2a4-\ub808\uc774\uc5b4-\ud14c\uc2a4\ud2b8",children:"\uc11c\ube44\uc2a4 \ub808\uc774\uc5b4 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"tests/test_services.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom app.services.user_service import UserService\nfrom app.services.product_service import ProductService\nfrom app.exceptions import UserNotFoundError, InsufficientStockError\n\nclass TestUserService:\n    """UserService \ud14c\uc2a4\ud2b8"""\n\n    def test_create_user(self, db_session, sample_user):\n        """\uc0ac\uc6a9\uc790 \uc0dd\uc131 \uc11c\ube44\uc2a4 \ud14c\uc2a4\ud2b8"""\n        service = UserService(db_session)\n        user = service.create_user(**sample_user)\n\n        assert user.id is not None\n        assert user.email == sample_user["email"]\n\n    def test_get_user_by_id(self, db_session, created_user):\n        """ID\ub85c \uc0ac\uc6a9\uc790 \uc870\ud68c \ud14c\uc2a4\ud2b8"""\n        service = UserService(db_session)\n        user = service.get_user_by_id(created_user.id)\n\n        assert user.id == created_user.id\n        assert user.email == created_user.email\n\n    def test_get_user_by_id_not_found(self, db_session):\n        """\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0ac\uc6a9\uc790 \uc870\ud68c \ud14c\uc2a4\ud2b8"""\n        service = UserService(db_session)\n\n        with pytest.raises(UserNotFoundError):\n            service.get_user_by_id(9999)\n\n    def test_update_user(self, db_session, created_user):\n        """\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8 \ud14c\uc2a4\ud2b8"""\n        service = UserService(db_session)\n        updated_data = {"full_name": "Updated Name"}\n\n        user = service.update_user(created_user.id, **updated_data)\n\n        assert user.full_name == "Updated Name"\n\n    def test_delete_user(self, db_session, created_user):\n        """\uc0ac\uc6a9\uc790 \uc0ad\uc81c \ud14c\uc2a4\ud2b8"""\n        service = UserService(db_session)\n        user_id = created_user.id\n\n        service.delete_user(user_id)\n\n        with pytest.raises(UserNotFoundError):\n            service.get_user_by_id(user_id)\n\nclass TestProductService:\n    """ProductService \ud14c\uc2a4\ud2b8"""\n\n    def test_reduce_stock(self, db_session, sample_product):\n        """\uc7ac\uace0 \uac10\uc18c \ud14c\uc2a4\ud2b8"""\n        service = ProductService(db_session)\n\n        product = Product(**sample_product)\n        db_session.add(product)\n        db_session.commit()\n\n        service.reduce_stock(product.id, 10)\n\n        db_session.refresh(product)\n        assert product.stock == 90\n\n    def test_reduce_stock_insufficient(self, db_session, sample_product):\n        """\uc7ac\uace0 \ubd80\uc871 \uc608\uc678 \ud14c\uc2a4\ud2b8"""\n        service = ProductService(db_session)\n\n        product = Product(**sample_product)\n        product.stock = 5\n        db_session.add(product)\n        db_session.commit()\n\n        with pytest.raises(InsufficientStockError):\n            service.reduce_stock(product.id, 10)\n\n    def test_search_products(self, db_session, created_products):\n        """\uc0c1\ud488 \uac80\uc0c9 \ud14c\uc2a4\ud2b8"""\n        service = ProductService(db_session)\n\n        results = service.search_products(query="Product 2")\n\n        assert len(results) == 1\n        assert results[0].name == "Product 2"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ube44\ub3d9\uae30-\ucf54\ub4dc-\ud14c\uc2a4\ud2b8",children:"\ube44\ub3d9\uae30 \ucf54\ub4dc \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"tests/test_async_services.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom app.services.email_service import EmailService\nfrom app.services.notification_service import NotificationService\n\n@pytest.mark.asyncio\nclass TestEmailService:\n    """\ube44\ub3d9\uae30 \uc774\uba54\uc77c \uc11c\ube44\uc2a4 \ud14c\uc2a4\ud2b8"""\n\n    async def test_send_email(self, mocker):\n        """\uc774\uba54\uc77c \ubc1c\uc1a1 \ud14c\uc2a4\ud2b8"""\n        mock_smtp = mocker.patch("app.services.email_service.aiosmtplib.send")\n\n        service = EmailService()\n        result = await service.send_email(\n            to="test@example.com",\n            subject="Test",\n            body="Test body"\n        )\n\n        assert result is True\n        mock_smtp.assert_called_once()\n\n    async def test_send_bulk_emails(self, mocker):\n        """\ub300\ub7c9 \uc774\uba54\uc77c \ubc1c\uc1a1 \ud14c\uc2a4\ud2b8"""\n        mock_smtp = mocker.patch("app.services.email_service.aiosmtplib.send")\n\n        service = EmailService()\n        recipients = ["user1@example.com", "user2@example.com", "user3@example.com"]\n\n        results = await service.send_bulk_emails(\n            recipients=recipients,\n            subject="Bulk Test",\n            body="Bulk test body"\n        )\n\n        assert len(results) == 3\n        assert all(r is True for r in results)\n        assert mock_smtp.call_count == 3\n\n@pytest.mark.asyncio\nclass TestNotificationService:\n    """\ube44\ub3d9\uae30 \uc54c\ub9bc \uc11c\ube44\uc2a4 \ud14c\uc2a4\ud2b8"""\n\n    async def test_send_notification(self, db_session, created_user, mocker):\n        """\uc54c\ub9bc \ubc1c\uc1a1 \ud14c\uc2a4\ud2b8"""\n        mock_websocket = mocker.patch("app.services.notification_service.broadcast")\n\n        service = NotificationService(db_session)\n        await service.send_notification(\n            user_id=created_user.id,\n            message="Test notification"\n        )\n\n        mock_websocket.assert_called_once()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"133-backend-\ud1b5\ud569-\ud14c\uc2a4\ud2b8",children:"13.3 Backend \ud1b5\ud569 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"fastapi-\ud14c\uc2a4\ud2b8-\ud074\ub77c\uc774\uc5b8\ud2b8",children:"FastAPI \ud14c\uc2a4\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"tests/test_api_integration.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\nfrom app.database import get_db\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\nTEST_DATABASE_URL = "sqlite:///:memory:"\nengine = create_engine(TEST_DATABASE_URL, connect_args={"check_same_thread": False})\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\ndef override_get_db():\n    """\ud14c\uc2a4\ud2b8\uc6a9 DB \uc138\uc158"""\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\napp.dependency_overrides[get_db] = override_get_db\n\n@pytest.fixture\ndef client():\n    """\ud14c\uc2a4\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8"""\n    return TestClient(app)\n\n@pytest.fixture\ndef auth_headers(client):\n    """\uc778\uc99d\ub41c \ud5e4\ub354"""\n    # \ud14c\uc2a4\ud2b8 \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ubc0f \ub85c\uadf8\uc778\n    response = client.post("/api/auth/register", json={\n        "email": "test@example.com",\n        "username": "testuser",\n        "password": "Test1234!"\n    })\n\n    login_response = client.post("/api/auth/login", data={\n        "username": "test@example.com",\n        "password": "Test1234!"\n    })\n\n    token = login_response.json()["access_token"]\n    return {"Authorization": f"Bearer {token}"}\n\nclass TestAuthAPI:\n    """\uc778\uc99d API \ud1b5\ud569 \ud14c\uc2a4\ud2b8"""\n\n    def test_register_user(self, client):\n        """\uc0ac\uc6a9\uc790 \ub4f1\ub85d API \ud14c\uc2a4\ud2b8"""\n        response = client.post("/api/auth/register", json={\n            "email": "newuser@example.com",\n            "username": "newuser",\n            "password": "New1234!",\n            "full_name": "New User"\n        })\n\n        assert response.status_code == 201\n        data = response.json()\n        assert data["email"] == "newuser@example.com"\n        assert data["username"] == "newuser"\n        assert "password" not in data\n\n    def test_register_duplicate_email(self, client):\n        """\uc911\ubcf5 \uc774\uba54\uc77c \ub4f1\ub85d \ud14c\uc2a4\ud2b8"""\n        user_data = {\n            "email": "duplicate@example.com",\n            "username": "user1",\n            "password": "Test1234!"\n        }\n\n        # \uccab \ubc88\uc9f8 \ub4f1\ub85d\n        response1 = client.post("/api/auth/register", json=user_data)\n        assert response1.status_code == 201\n\n        # \uc911\ubcf5 \ub4f1\ub85d \uc2dc\ub3c4\n        response2 = client.post("/api/auth/register", json=user_data)\n        assert response2.status_code == 400\n        assert "already exists" in response2.json()["detail"]\n\n    def test_login_success(self, client):\n        """\ub85c\uadf8\uc778 \uc131\uacf5 \ud14c\uc2a4\ud2b8"""\n        # \uc0ac\uc6a9\uc790 \ub4f1\ub85d\n        client.post("/api/auth/register", json={\n            "email": "login@example.com",\n            "username": "loginuser",\n            "password": "Login1234!"\n        })\n\n        # \ub85c\uadf8\uc778\n        response = client.post("/api/auth/login", data={\n            "username": "login@example.com",\n            "password": "Login1234!"\n        })\n\n        assert response.status_code == 200\n        data = response.json()\n        assert "access_token" in data\n        assert data["token_type"] == "bearer"\n\n    def test_login_invalid_credentials(self, client):\n        """\uc798\ubabb\ub41c \uc778\uc99d \uc815\ubcf4\ub85c \ub85c\uadf8\uc778 \ud14c\uc2a4\ud2b8"""\n        response = client.post("/api/auth/login", data={\n            "username": "nonexistent@example.com",\n            "password": "Wrong1234!"\n        })\n\n        assert response.status_code == 401\n        assert "Incorrect" in response.json()["detail"]\n\nclass TestProductAPI:\n    """\uc0c1\ud488 API \ud1b5\ud569 \ud14c\uc2a4\ud2b8"""\n\n    def test_get_products(self, client):\n        """\uc0c1\ud488 \ubaa9\ub85d \uc870\ud68c \ud14c\uc2a4\ud2b8"""\n        response = client.get("/api/products")\n\n        assert response.status_code == 200\n        data = response.json()\n        assert isinstance(data["items"], list)\n        assert "total" in data\n        assert "page" in data\n\n    def test_create_product(self, client, auth_headers):\n        """\uc0c1\ud488 \uc0dd\uc131 \ud14c\uc2a4\ud2b8"""\n        response = client.post(\n            "/api/products",\n            json={\n                "name": "New Product",\n                "description": "Product description",\n                "price": 49.99,\n                "stock": 100,\n                "category": "electronics"\n            },\n            headers=auth_headers\n        )\n\n        assert response.status_code == 201\n        data = response.json()\n        assert data["name"] == "New Product"\n        assert data["price"] == 49.99\n\n    def test_get_product_by_id(self, client, auth_headers):\n        """\ud2b9\uc815 \uc0c1\ud488 \uc870\ud68c \ud14c\uc2a4\ud2b8"""\n        # \uc0c1\ud488 \uc0dd\uc131\n        create_response = client.post(\n            "/api/products",\n            json={\n                "name": "Test Product",\n                "price": 29.99,\n                "stock": 50\n            },\n            headers=auth_headers\n        )\n        product_id = create_response.json()["id"]\n\n        # \uc870\ud68c\n        response = client.get(f"/api/products/{product_id}")\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data["id"] == product_id\n        assert data["name"] == "Test Product"\n\n    def test_update_product(self, client, auth_headers):\n        """\uc0c1\ud488 \uc218\uc815 \ud14c\uc2a4\ud2b8"""\n        # \uc0c1\ud488 \uc0dd\uc131\n        create_response = client.post(\n            "/api/products",\n            json={"name": "Original", "price": 10.0, "stock": 10},\n            headers=auth_headers\n        )\n        product_id = create_response.json()["id"]\n\n        # \uc218\uc815\n        response = client.put(\n            f"/api/products/{product_id}",\n            json={"name": "Updated", "price": 20.0},\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data["name"] == "Updated"\n        assert data["price"] == 20.0\n\n    def test_delete_product(self, client, auth_headers):\n        """\uc0c1\ud488 \uc0ad\uc81c \ud14c\uc2a4\ud2b8"""\n        # \uc0c1\ud488 \uc0dd\uc131\n        create_response = client.post(\n            "/api/products",\n            json={"name": "To Delete", "price": 10.0, "stock": 10},\n            headers=auth_headers\n        )\n        product_id = create_response.json()["id"]\n\n        # \uc0ad\uc81c\n        response = client.delete(\n            f"/api/products/{product_id}",\n            headers=auth_headers\n        )\n\n        assert response.status_code == 204\n\n        # \uc0ad\uc81c \ud655\uc778\n        get_response = client.get(f"/api/products/{product_id}")\n        assert get_response.status_code == 404\n\nclass TestOrderAPI:\n    """\uc8fc\ubb38 API \ud1b5\ud569 \ud14c\uc2a4\ud2b8"""\n\n    def test_create_order(self, client, auth_headers):\n        """\uc8fc\ubb38 \uc0dd\uc131 \ud14c\uc2a4\ud2b8"""\n        # \uc0c1\ud488 \uc0dd\uc131\n        product_response = client.post(\n            "/api/products",\n            json={"name": "Product", "price": 50.0, "stock": 100},\n            headers=auth_headers\n        )\n        product_id = product_response.json()["id"]\n\n        # \uc8fc\ubb38 \uc0dd\uc131\n        response = client.post(\n            "/api/orders",\n            json={\n                "items": [\n                    {"product_id": product_id, "quantity": 2}\n                ]\n            },\n            headers=auth_headers\n        )\n\n        assert response.status_code == 201\n        data = response.json()\n        assert data["status"] == "pending"\n        assert len(data["items"]) == 1\n        assert data["total_amount"] == 100.0\n\n    def test_get_my_orders(self, client, auth_headers):\n        """\ub0b4 \uc8fc\ubb38 \ubaa9\ub85d \uc870\ud68c \ud14c\uc2a4\ud2b8"""\n        response = client.get("/api/orders/me", headers=auth_headers)\n\n        assert response.status_code == 200\n        data = response.json()\n        assert isinstance(data, list)\n\n    def test_cancel_order(self, client, auth_headers):\n        """\uc8fc\ubb38 \ucde8\uc18c \ud14c\uc2a4\ud2b8"""\n        # \uc8fc\ubb38 \uc0dd\uc131 (\uc774\uc804 \ud14c\uc2a4\ud2b8\uc5d0\uc11c \uc0dd\uc131\ub41c \uc0c1\ud488 \uc0ac\uc6a9)\n        # ... \uc8fc\ubb38 \uc0dd\uc131 \ub85c\uc9c1 ...\n\n        response = client.post(\n            f"/api/orders/{order_id}/cancel",\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data["status"] == "cancelled"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ud2b8\ub79c\uc7ad\uc158-\ud14c\uc2a4\ud2b8",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"tests/test_transactions.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom app.services.order_service import OrderService\nfrom app.models import Product, Order\nfrom app.exceptions import InsufficientStockError\n\nclass TestOrderTransactions:\n    """\uc8fc\ubb38 \ud2b8\ub79c\uc7ad\uc158 \ud14c\uc2a4\ud2b8"""\n\n    def test_order_creation_rollback_on_error(self, db_session, created_user):\n        """\uc8fc\ubb38 \uc0dd\uc131 \uc2e4\ud328 \uc2dc \ub864\ubc31 \ud14c\uc2a4\ud2b8"""\n        # \uc7ac\uace0\uac00 \ubd80\uc871\ud55c \uc0c1\ud488 \uc0dd\uc131\n        product = Product(name="Limited", price=10.0, stock=1)\n        db_session.add(product)\n        db_session.commit()\n\n        service = OrderService(db_session)\n\n        # \uc7ac\uace0\ubcf4\ub2e4 \ub9ce\uc740 \uc218\ub7c9\uc73c\ub85c \uc8fc\ubb38 \uc2dc\ub3c4\n        with pytest.raises(InsufficientStockError):\n            service.create_order(\n                user_id=created_user.id,\n                items=[{"product_id": product.id, "quantity": 5}]\n            )\n\n        # \uc8fc\ubb38\uc774 \uc0dd\uc131\ub418\uc9c0 \uc54a\uc558\ub294\uc9c0 \ud655\uc778\n        orders = db_session.query(Order).filter_by(user_id=created_user.id).all()\n        assert len(orders) == 0\n\n        # \uc7ac\uace0\uac00 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc558\ub294\uc9c0 \ud655\uc778\n        db_session.refresh(product)\n        assert product.stock == 1\n\n    def test_concurrent_order_handling(self, db_session, created_user):\n        """\ub3d9\uc2dc \uc8fc\ubb38 \ucc98\ub9ac \ud14c\uc2a4\ud2b8"""\n        product = Product(name="Popular", price=10.0, stock=10)\n        db_session.add(product)\n        db_session.commit()\n\n        service = OrderService(db_session)\n\n        # \uccab \ubc88\uc9f8 \uc8fc\ubb38\n        order1 = service.create_order(\n            user_id=created_user.id,\n            items=[{"product_id": product.id, "quantity": 6}]\n        )\n\n        # \ub450 \ubc88\uc9f8 \uc8fc\ubb38 (\uc7ac\uace0 \ubd80\uc871 \uc608\uc0c1)\n        with pytest.raises(InsufficientStockError):\n            service.create_order(\n                user_id=created_user.id,\n                items=[{"product_id": product.id, "quantity": 6}]\n            )\n\n        # \uc7ac\uace0 \ud655\uc778\n        db_session.refresh(product)\n        assert product.stock == 4  # 10 - 6\n'})}),"\n",(0,r.jsx)(n.h2,{id:"134-frontend-\ub2e8\uc704-\ud14c\uc2a4\ud2b8-vitest",children:"13.4 Frontend \ub2e8\uc704 \ud14c\uc2a4\ud2b8 (Vitest)"}),"\n",(0,r.jsx)(n.h3,{id:"vitest-\uc124\uc815",children:"Vitest \uc124\uc815"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"vite.config.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    setupFiles: './src/test/setup.ts',\n    css: true,\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'html', 'json'],\n      exclude: [\n        'node_modules/',\n        'src/test/',\n        '**/*.spec.ts',\n        '**/*.test.ts'\n      ]\n    }\n  }\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"src/test/setup.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { expect, afterEach } from 'vitest'\nimport { cleanup } from '@testing-library/react'\nimport matchers from '@testing-library/jest-dom/matchers'\n\n// Extend Vitest's expect with jest-dom matchers\nexpect.extend(matchers)\n\n// Cleanup after each test\nafterEach(() => {\n  cleanup()\n})\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(),\n    removeListener: vi.fn(),\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n})\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = class IntersectionObserver {\n  constructor() {}\n  disconnect() {}\n  observe() {}\n  takeRecords() {\n    return []\n  }\n  unobserve() {}\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc720\ud2f8\ub9ac\ud2f0-\ud568\uc218-\ud14c\uc2a4\ud2b8",children:"\uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/utils/",(0,r.jsx)(n.strong,{children:"tests"}),"/format.test.ts"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect } from 'vitest'\nimport { formatCurrency, formatDate, truncateText, slugify } from '../format'\n\ndescribe('formatCurrency', () => {\n  it('should format number as currency', () => {\n    expect(formatCurrency(1234.56)).toBe('$1,234.56')\n    expect(formatCurrency(0)).toBe('$0.00')\n    expect(formatCurrency(999999.99)).toBe('$999,999.99')\n  })\n\n  it('should handle negative numbers', () => {\n    expect(formatCurrency(-100)).toBe('-$100.00')\n  })\n\n  it('should support different currencies', () => {\n    expect(formatCurrency(1000, 'EUR')).toBe('\u20ac1,000.00')\n    expect(formatCurrency(1000, 'GBP')).toBe('\xa31,000.00')\n  })\n})\n\ndescribe('formatDate', () => {\n  it('should format date correctly', () => {\n    const date = new Date('2024-01-15T10:30:00')\n    expect(formatDate(date)).toBe('Jan 15, 2024')\n  })\n\n  it('should handle different formats', () => {\n    const date = new Date('2024-01-15')\n    expect(formatDate(date, 'full')).toBe('January 15, 2024')\n    expect(formatDate(date, 'short')).toBe('01/15/2024')\n  })\n\n  it('should handle invalid dates', () => {\n    expect(formatDate(new Date('invalid'))).toBe('Invalid Date')\n  })\n})\n\ndescribe('truncateText', () => {\n  it('should truncate long text', () => {\n    const text = 'This is a very long text that needs to be truncated'\n    expect(truncateText(text, 20)).toBe('This is a very long...')\n  })\n\n  it('should not truncate short text', () => {\n    const text = 'Short text'\n    expect(truncateText(text, 20)).toBe('Short text')\n  })\n\n  it('should handle custom ellipsis', () => {\n    const text = 'This is a long text'\n    expect(truncateText(text, 10, '\u2026')).toBe('This is a\u2026')\n  })\n})\n\ndescribe('slugify', () => {\n  it('should convert text to slug', () => {\n    expect(slugify('Hello World')).toBe('hello-world')\n    expect(slugify('  Multiple   Spaces  ')).toBe('multiple-spaces')\n  })\n\n  it('should handle special characters', () => {\n    expect(slugify('Hello & World!')).toBe('hello-world')\n    expect(slugify('Product #123')).toBe('product-123')\n  })\n\n  it('should handle unicode characters', () => {\n    expect(slugify('Caf\xe9 M\xfcnch\xebn')).toBe('cafe-munchen')\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"hooks-\ud14c\uc2a4\ud2b8",children:"Hooks \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/hooks/",(0,r.jsx)(n.strong,{children:"tests"}),"/useCounter.test.ts"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect } from 'vitest'\nimport { renderHook, act } from '@testing-library/react'\nimport { useCounter } from '../useCounter'\n\ndescribe('useCounter', () => {\n  it('should initialize with default value', () => {\n    const { result } = renderHook(() => useCounter())\n    expect(result.current.count).toBe(0)\n  })\n\n  it('should initialize with custom value', () => {\n    const { result } = renderHook(() => useCounter(10))\n    expect(result.current.count).toBe(10)\n  })\n\n  it('should increment count', () => {\n    const { result } = renderHook(() => useCounter(0))\n\n    act(() => {\n      result.current.increment()\n    })\n\n    expect(result.current.count).toBe(1)\n  })\n\n  it('should decrement count', () => {\n    const { result } = renderHook(() => useCounter(5))\n\n    act(() => {\n      result.current.decrement()\n    })\n\n    expect(result.current.count).toBe(4)\n  })\n\n  it('should reset count', () => {\n    const { result } = renderHook(() => useCounter(0))\n\n    act(() => {\n      result.current.increment()\n      result.current.increment()\n    })\n\n    expect(result.current.count).toBe(2)\n\n    act(() => {\n      result.current.reset()\n    })\n\n    expect(result.current.count).toBe(0)\n  })\n\n  it('should respect min and max values', () => {\n    const { result } = renderHook(() => useCounter(5, { min: 0, max: 10 }))\n\n    // Try to go below min\n    act(() => {\n      for (let i = 0; i < 10; i++) {\n        result.current.decrement()\n      }\n    })\n    expect(result.current.count).toBe(0)\n\n    // Try to go above max\n    act(() => {\n      for (let i = 0; i < 20; i++) {\n        result.current.increment()\n      }\n    })\n    expect(result.current.count).toBe(10)\n  })\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/hooks/",(0,r.jsx)(n.strong,{children:"tests"}),"/useFetch.test.ts"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, vi, beforeEach } from 'vitest'\nimport { renderHook, waitFor } from '@testing-library/react'\nimport { useFetch } from '../useFetch'\n\ndescribe('useFetch', () => {\n  beforeEach(() => {\n    vi.clearAllMocks()\n  })\n\n  it('should fetch data successfully', async () => {\n    const mockData = { id: 1, name: 'Test' }\n\n    global.fetch = vi.fn().mockResolvedValue({\n      ok: true,\n      json: async () => mockData\n    })\n\n    const { result } = renderHook(() => useFetch('/api/test'))\n\n    expect(result.current.loading).toBe(true)\n    expect(result.current.data).toBe(null)\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    expect(result.current.data).toEqual(mockData)\n    expect(result.current.error).toBe(null)\n  })\n\n  it('should handle fetch errors', async () => {\n    global.fetch = vi.fn().mockRejectedValue(new Error('Network error'))\n\n    const { result } = renderHook(() => useFetch('/api/test'))\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    expect(result.current.error).toBeTruthy()\n    expect(result.current.data).toBe(null)\n  })\n\n  it('should refetch on demand', async () => {\n    const mockData1 = { value: 1 }\n    const mockData2 = { value: 2 }\n\n    global.fetch = vi.fn()\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData1\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData2\n      })\n\n    const { result } = renderHook(() => useFetch('/api/test'))\n\n    await waitFor(() => {\n      expect(result.current.data).toEqual(mockData1)\n    })\n\n    act(() => {\n      result.current.refetch()\n    })\n\n    await waitFor(() => {\n      expect(result.current.data).toEqual(mockData2)\n    })\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"135-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",children:"13.5 \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"\ub2e8\uc21c-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",children:"\ub2e8\uc21c \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/components/",(0,r.jsx)(n.strong,{children:"tests"}),"/Button.test.tsx"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, vi } from 'vitest'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { Button } from '../Button'\n\ndescribe('Button', () => {\n  it('should render with text', () => {\n    render(<Button>Click me</Button>)\n    expect(screen.getByText('Click me')).toBeInTheDocument()\n  })\n\n  it('should handle click events', () => {\n    const handleClick = vi.fn()\n    render(<Button onClick={handleClick}>Click me</Button>)\n\n    fireEvent.click(screen.getByText('Click me'))\n    expect(handleClick).toHaveBeenCalledTimes(1)\n  })\n\n  it('should be disabled when disabled prop is true', () => {\n    render(<Button disabled>Disabled</Button>)\n\n    const button = screen.getByText('Disabled')\n    expect(button).toBeDisabled()\n  })\n\n  it('should apply variant classes', () => {\n    const { rerender } = render(<Button variant=\"primary\">Primary</Button>)\n    expect(screen.getByText('Primary')).toHaveClass('btn-primary')\n\n    rerender(<Button variant=\"secondary\">Secondary</Button>)\n    expect(screen.getByText('Secondary')).toHaveClass('btn-secondary')\n  })\n\n  it('should render loading state', () => {\n    render(<Button loading>Loading</Button>)\n\n    expect(screen.getByRole('button')).toBeDisabled()\n    expect(screen.getByTestId('spinner')).toBeInTheDocument()\n  })\n\n  it('should render with icon', () => {\n    const Icon = () => <span data-testid=\"icon\">Icon</span>\n    render(<Button icon={<Icon />}>With Icon</Button>)\n\n    expect(screen.getByTestId('icon')).toBeInTheDocument()\n    expect(screen.getByText('With Icon')).toBeInTheDocument()\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ud3fc-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",children:"\ud3fc \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/components/",(0,r.jsx)(n.strong,{children:"tests"}),"/LoginForm.test.tsx"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, vi } from 'vitest'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { LoginForm } from '../LoginForm'\n\ndescribe('LoginForm', () => {\n  it('should render login form fields', () => {\n    render(<LoginForm onSubmit={vi.fn()} />)\n\n    expect(screen.getByLabelText(/email/i)).toBeInTheDocument()\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: /login/i })).toBeInTheDocument()\n  })\n\n  it('should show validation errors for empty fields', async () => {\n    const handleSubmit = vi.fn()\n    render(<LoginForm onSubmit={handleSubmit} />)\n\n    const submitButton = screen.getByRole('button', { name: /login/i })\n    fireEvent.click(submitButton)\n\n    await waitFor(() => {\n      expect(screen.getByText(/email is required/i)).toBeInTheDocument()\n      expect(screen.getByText(/password is required/i)).toBeInTheDocument()\n    })\n\n    expect(handleSubmit).not.toHaveBeenCalled()\n  })\n\n  it('should show validation error for invalid email', async () => {\n    render(<LoginForm onSubmit={vi.fn()} />)\n\n    const emailInput = screen.getByLabelText(/email/i)\n    await userEvent.type(emailInput, 'invalid-email')\n\n    const submitButton = screen.getByRole('button', { name: /login/i })\n    fireEvent.click(submitButton)\n\n    await waitFor(() => {\n      expect(screen.getByText(/invalid email/i)).toBeInTheDocument()\n    })\n  })\n\n  it('should submit form with valid data', async () => {\n    const handleSubmit = vi.fn()\n    render(<LoginForm onSubmit={handleSubmit} />)\n\n    const emailInput = screen.getByLabelText(/email/i)\n    const passwordInput = screen.getByLabelText(/password/i)\n\n    await userEvent.type(emailInput, 'test@example.com')\n    await userEvent.type(passwordInput, 'password123')\n\n    const submitButton = screen.getByRole('button', { name: /login/i })\n    fireEvent.click(submitButton)\n\n    await waitFor(() => {\n      expect(handleSubmit).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password123'\n      })\n    })\n  })\n\n  it('should show loading state during submission', async () => {\n    const handleSubmit = vi.fn(() => new Promise(resolve => setTimeout(resolve, 100)))\n    render(<LoginForm onSubmit={handleSubmit} />)\n\n    const emailInput = screen.getByLabelText(/email/i)\n    const passwordInput = screen.getByLabelText(/password/i)\n\n    await userEvent.type(emailInput, 'test@example.com')\n    await userEvent.type(passwordInput, 'password123')\n\n    const submitButton = screen.getByRole('button', { name: /login/i })\n    fireEvent.click(submitButton)\n\n    expect(submitButton).toBeDisabled()\n    expect(screen.getByText(/logging in/i)).toBeInTheDocument()\n  })\n\n  it('should toggle password visibility', async () => {\n    render(<LoginForm onSubmit={vi.fn()} />)\n\n    const passwordInput = screen.getByLabelText(/password/i) as HTMLInputElement\n    expect(passwordInput.type).toBe('password')\n\n    const toggleButton = screen.getByLabelText(/show password/i)\n    await userEvent.click(toggleButton)\n\n    expect(passwordInput.type).toBe('text')\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ub9ac\uc2a4\ud2b8-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",children:"\ub9ac\uc2a4\ud2b8 \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/components/",(0,r.jsx)(n.strong,{children:"tests"}),"/ProductList.test.tsx"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, vi } from 'vitest'\nimport { render, screen, within } from '@testing-library/react'\nimport { ProductList } from '../ProductList'\n\nconst mockProducts = [\n  { id: 1, name: 'Product 1', price: 10.99, stock: 100 },\n  { id: 2, name: 'Product 2', price: 20.99, stock: 50 },\n  { id: 3, name: 'Product 3', price: 30.99, stock: 0 }\n]\n\ndescribe('ProductList', () => {\n  it('should render product items', () => {\n    render(<ProductList products={mockProducts} />)\n\n    expect(screen.getByText('Product 1')).toBeInTheDocument()\n    expect(screen.getByText('Product 2')).toBeInTheDocument()\n    expect(screen.getByText('Product 3')).toBeInTheDocument()\n  })\n\n  it('should display product prices', () => {\n    render(<ProductList products={mockProducts} />)\n\n    expect(screen.getByText('$10.99')).toBeInTheDocument()\n    expect(screen.getByText('$20.99')).toBeInTheDocument()\n    expect(screen.getByText('$30.99')).toBeInTheDocument()\n  })\n\n  it('should show out of stock badge', () => {\n    render(<ProductList products={mockProducts} />)\n\n    const product3 = screen.getByText('Product 3').closest('.product-item')\n    expect(within(product3!).getByText(/out of stock/i)).toBeInTheDocument()\n  })\n\n  it('should render empty state when no products', () => {\n    render(<ProductList products={[]} />)\n\n    expect(screen.getByText(/no products found/i)).toBeInTheDocument()\n  })\n\n  it('should call onProductClick when product is clicked', () => {\n    const handleClick = vi.fn()\n    render(<ProductList products={mockProducts} onProductClick={handleClick} />)\n\n    fireEvent.click(screen.getByText('Product 1'))\n    expect(handleClick).toHaveBeenCalledWith(mockProducts[0])\n  })\n\n  it('should render loading state', () => {\n    render(<ProductList products={[]} loading />)\n\n    expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"context-\uc0ac\uc6a9-\ucef4\ud3ec\ub10c\ud2b8-\ud14c\uc2a4\ud2b8",children:"Context \uc0ac\uc6a9 \ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/components/",(0,r.jsx)(n.strong,{children:"tests"}),"/CartButton.test.tsx"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, vi } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport { CartProvider } from '../../contexts/CartContext'\nimport { CartButton } from '../CartButton'\n\nconst renderWithCart = (ui: React.ReactElement, initialCart = []) => {\n  return render(\n    <CartProvider initialCart={initialCart}>\n      {ui}\n    </CartProvider>\n  )\n}\n\ndescribe('CartButton', () => {\n  it('should show cart item count', () => {\n    const cartItems = [\n      { id: 1, name: 'Item 1', quantity: 2 },\n      { id: 2, name: 'Item 2', quantity: 1 }\n    ]\n\n    renderWithCart(<CartButton />, cartItems)\n\n    expect(screen.getByText('3')).toBeInTheDocument() // 2 + 1\n  })\n\n  it('should not show badge when cart is empty', () => {\n    renderWithCart(<CartButton />, [])\n\n    expect(screen.queryByTestId('cart-badge')).not.toBeInTheDocument()\n  })\n\n  it('should navigate to cart page on click', () => {\n    const mockNavigate = vi.fn()\n    vi.mock('react-router-dom', () => ({\n      useNavigate: () => mockNavigate\n    }))\n\n    renderWithCart(<CartButton />)\n\n    fireEvent.click(screen.getByRole('button'))\n    expect(mockNavigate).toHaveBeenCalledWith('/cart')\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"136-e2e-\ud14c\uc2a4\ud2b8-playwright",children:"13.6 E2E \ud14c\uc2a4\ud2b8 (Playwright)"}),"\n",(0,r.jsx)(n.h3,{id:"playwright-\uc124\uc815",children:"Playwright \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Playwright \uc124\uce58\nnpm init playwright@latest\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"playwright.config.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { defineConfig, devices } from '@playwright/test'\n\nexport default defineConfig({\n  testDir: './e2e',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: [\n    ['html'],\n    ['json', { outputFile: 'test-results/results.json' }],\n    ['junit', { outputFile: 'test-results/junit.xml' }]\n  ],\n  use: {\n    baseURL: 'http://localhost:3000',\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n    video: 'retain-on-failure'\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n  ],\n  webServer: {\n    command: 'npm run dev',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-e2e-\ud14c\uc2a4\ud2b8",children:"\uae30\ubcf8 E2E \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"e2e/auth.spec.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { test, expect } from '@playwright/test'\n\ntest.describe('Authentication', () => {\n  test('should register new user', async ({ page }) => {\n    await page.goto('/register')\n\n    await page.fill('input[name=\"email\"]', 'newuser@example.com')\n    await page.fill('input[name=\"username\"]', 'newuser')\n    await page.fill('input[name=\"password\"]', 'Password123!')\n    await page.fill('input[name=\"confirmPassword\"]', 'Password123!')\n\n    await page.click('button[type=\"submit\"]')\n\n    await expect(page).toHaveURL('/dashboard')\n    await expect(page.locator('text=Welcome, newuser')).toBeVisible()\n  })\n\n  test('should login existing user', async ({ page }) => {\n    await page.goto('/login')\n\n    await page.fill('input[name=\"email\"]', 'test@example.com')\n    await page.fill('input[name=\"password\"]', 'Test1234!')\n\n    await page.click('button:has-text(\"Login\")')\n\n    await expect(page).toHaveURL('/dashboard')\n    await expect(page.locator('.user-menu')).toBeVisible()\n  })\n\n  test('should show error for invalid credentials', async ({ page }) => {\n    await page.goto('/login')\n\n    await page.fill('input[name=\"email\"]', 'wrong@example.com')\n    await page.fill('input[name=\"password\"]', 'wrongpassword')\n\n    await page.click('button:has-text(\"Login\")')\n\n    await expect(page.locator('.error-message')).toContainText('Invalid credentials')\n  })\n\n  test('should logout user', async ({ page }) => {\n    // Login first\n    await page.goto('/login')\n    await page.fill('input[name=\"email\"]', 'test@example.com')\n    await page.fill('input[name=\"password\"]', 'Test1234!')\n    await page.click('button:has-text(\"Login\")')\n\n    // Logout\n    await page.click('.user-menu')\n    await page.click('text=Logout')\n\n    await expect(page).toHaveURL('/login')\n  })\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"e2e/product.spec.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { test, expect } from '@playwright/test'\n\ntest.describe('Product Management', () => {\n  test.beforeEach(async ({ page }) => {\n    // Login before each test\n    await page.goto('/login')\n    await page.fill('input[name=\"email\"]', 'admin@example.com')\n    await page.fill('input[name=\"password\"]', 'Admin1234!')\n    await page.click('button:has-text(\"Login\")')\n    await expect(page).toHaveURL('/dashboard')\n  })\n\n  test('should display product list', async ({ page }) => {\n    await page.goto('/products')\n\n    await expect(page.locator('.product-item')).toHaveCount(10)\n  })\n\n  test('should search products', async ({ page }) => {\n    await page.goto('/products')\n\n    await page.fill('input[placeholder=\"Search products\"]', 'Laptop')\n    await page.press('input[placeholder=\"Search products\"]', 'Enter')\n\n    await expect(page.locator('.product-item')).toHaveCount(3)\n    await expect(page.locator('.product-item').first()).toContainText('Laptop')\n  })\n\n  test('should filter products by category', async ({ page }) => {\n    await page.goto('/products')\n\n    await page.click('select[name=\"category\"]')\n    await page.click('option:has-text(\"Electronics\")')\n\n    await expect(page.locator('.product-item')).toHaveCount(5)\n  })\n\n  test('should view product details', async ({ page }) => {\n    await page.goto('/products')\n\n    await page.click('.product-item:first-child')\n\n    await expect(page).toHaveURL(/\\/products\\/\\d+/)\n    await expect(page.locator('h1.product-title')).toBeVisible()\n    await expect(page.locator('.product-description')).toBeVisible()\n    await expect(page.locator('.product-price')).toBeVisible()\n  })\n\n  test('should create new product', async ({ page }) => {\n    await page.goto('/products/new')\n\n    await page.fill('input[name=\"name\"]', 'New Product')\n    await page.fill('textarea[name=\"description\"]', 'Product description')\n    await page.fill('input[name=\"price\"]', '99.99')\n    await page.fill('input[name=\"stock\"]', '100')\n    await page.selectOption('select[name=\"category\"]', 'electronics')\n\n    await page.click('button:has-text(\"Create Product\")')\n\n    await expect(page).toHaveURL('/products')\n    await expect(page.locator('text=Product created successfully')).toBeVisible()\n  })\n\n  test('should edit product', async ({ page }) => {\n    await page.goto('/products/1/edit')\n\n    await page.fill('input[name=\"name\"]', 'Updated Product Name')\n    await page.fill('input[name=\"price\"]', '149.99')\n\n    await page.click('button:has-text(\"Save Changes\")')\n\n    await expect(page.locator('text=Product updated successfully')).toBeVisible()\n  })\n\n  test('should delete product', async ({ page }) => {\n    await page.goto('/products')\n\n    const productCount = await page.locator('.product-item').count()\n\n    await page.click('.product-item:first-child .delete-button')\n    await page.click('button:has-text(\"Confirm\")')\n\n    await expect(page.locator('text=Product deleted successfully')).toBeVisible()\n    await expect(page.locator('.product-item')).toHaveCount(productCount - 1)\n  })\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"e2e/shopping-cart.spec.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { test, expect } from '@playwright/test'\n\ntest.describe('Shopping Cart', () => {\n  test.beforeEach(async ({ page }) => {\n    await page.goto('/login')\n    await page.fill('input[name=\"email\"]', 'test@example.com')\n    await page.fill('input[name=\"password\"]', 'Test1234!')\n    await page.click('button:has-text(\"Login\")')\n  })\n\n  test('should add product to cart', async ({ page }) => {\n    await page.goto('/products')\n\n    await page.click('.product-item:first-child .add-to-cart')\n\n    await expect(page.locator('.cart-badge')).toContainText('1')\n    await expect(page.locator('.toast-success')).toContainText('Added to cart')\n  })\n\n  test('should update quantity in cart', async ({ page }) => {\n    // Add product to cart\n    await page.goto('/products')\n    await page.click('.product-item:first-child .add-to-cart')\n\n    // Go to cart\n    await page.click('.cart-button')\n    await expect(page).toHaveURL('/cart')\n\n    // Increase quantity\n    await page.click('.quantity-increase')\n    await expect(page.locator('.quantity-input')).toHaveValue('2')\n\n    // Check total price updated\n    const priceText = await page.locator('.cart-item-price').first().textContent()\n    const totalText = await page.locator('.cart-total').textContent()\n    // Verify total is double the single price\n  })\n\n  test('should remove item from cart', async ({ page }) => {\n    await page.goto('/products')\n    await page.click('.product-item:first-child .add-to-cart')\n\n    await page.click('.cart-button')\n\n    const itemCount = await page.locator('.cart-item').count()\n\n    await page.click('.remove-item-button')\n\n    await expect(page.locator('.cart-item')).toHaveCount(itemCount - 1)\n  })\n\n  test('should complete checkout process', async ({ page }) => {\n    // Add products to cart\n    await page.goto('/products')\n    await page.click('.product-item:nth-child(1) .add-to-cart')\n    await page.click('.product-item:nth-child(2) .add-to-cart')\n\n    // Go to cart and checkout\n    await page.click('.cart-button')\n    await page.click('button:has-text(\"Proceed to Checkout\")')\n\n    // Fill shipping information\n    await expect(page).toHaveURL('/checkout')\n    await page.fill('input[name=\"address\"]', '123 Main St')\n    await page.fill('input[name=\"city\"]', 'New York')\n    await page.fill('input[name=\"zipCode\"]', '10001')\n\n    // Fill payment information\n    await page.fill('input[name=\"cardNumber\"]', '4242424242424242')\n    await page.fill('input[name=\"expiry\"]', '12/25')\n    await page.fill('input[name=\"cvv\"]', '123')\n\n    // Complete order\n    await page.click('button:has-text(\"Place Order\")')\n\n    await expect(page).toHaveURL(/\\/orders\\/\\d+/)\n    await expect(page.locator('text=Order placed successfully')).toBeVisible()\n  })\n\n  test('should apply discount code', async ({ page }) => {\n    await page.goto('/products')\n    await page.click('.product-item:first-child .add-to-cart')\n\n    await page.click('.cart-button')\n\n    const originalTotal = await page.locator('.cart-total').textContent()\n\n    await page.fill('input[name=\"discountCode\"]', 'SAVE10')\n    await page.click('button:has-text(\"Apply\")')\n\n    await expect(page.locator('.discount-applied')).toContainText('10% discount')\n\n    const newTotal = await page.locator('.cart-total').textContent()\n    // Verify newTotal is less than originalTotal\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"page-object-model",children:"Page Object Model"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"e2e/pages/LoginPage.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Page, Locator } from '@playwright/test'\n\nexport class LoginPage {\n  readonly page: Page\n  readonly emailInput: Locator\n  readonly passwordInput: Locator\n  readonly loginButton: Locator\n  readonly errorMessage: Locator\n\n  constructor(page: Page) {\n    this.page = page\n    this.emailInput = page.locator('input[name=\"email\"]')\n    this.passwordInput = page.locator('input[name=\"password\"]')\n    this.loginButton = page.locator('button:has-text(\"Login\")')\n    this.errorMessage = page.locator('.error-message')\n  }\n\n  async goto() {\n    await this.page.goto('/login')\n  }\n\n  async login(email: string, password: string) {\n    await this.emailInput.fill(email)\n    await this.passwordInput.fill(password)\n    await this.loginButton.click()\n  }\n\n  async getErrorMessage() {\n    return await this.errorMessage.textContent()\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"e2e/auth-with-pom.spec.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { test, expect } from '@playwright/test'\nimport { LoginPage } from './pages/LoginPage'\n\ntest.describe('Authentication with POM', () => {\n  test('should login successfully', async ({ page }) => {\n    const loginPage = new LoginPage(page)\n\n    await loginPage.goto()\n    await loginPage.login('test@example.com', 'Test1234!')\n\n    await expect(page).toHaveURL('/dashboard')\n  })\n\n  test('should show error for invalid credentials', async ({ page }) => {\n    const loginPage = new LoginPage(page)\n\n    await loginPage.goto()\n    await loginPage.login('wrong@example.com', 'wrongpass')\n\n    const error = await loginPage.getErrorMessage()\n    expect(error).toContain('Invalid credentials')\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"137-api-\ud14c\uc2a4\ud2b8",children:"13.7 API \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"rest-api-\ud14c\uc2a4\ud2b8",children:"REST API \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"e2e/api/products.spec.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { test, expect } from '@playwright/test'\n\nlet authToken: string\n\ntest.beforeAll(async ({ request }) => {\n  // Get auth token\n  const response = await request.post('/api/auth/login', {\n    data: {\n      email: 'test@example.com',\n      password: 'Test1234!'\n    }\n  })\n\n  const data = await response.json()\n  authToken = data.access_token\n})\n\ntest.describe('Products API', () => {\n  test('GET /api/products - should return products list', async ({ request }) => {\n    const response = await request.get('/api/products')\n\n    expect(response.ok()).toBeTruthy()\n    expect(response.status()).toBe(200)\n\n    const data = await response.json()\n    expect(data).toHaveProperty('items')\n    expect(Array.isArray(data.items)).toBeTruthy()\n    expect(data).toHaveProperty('total')\n  })\n\n  test('GET /api/products/:id - should return single product', async ({ request }) => {\n    const response = await request.get('/api/products/1')\n\n    expect(response.ok()).toBeTruthy()\n\n    const data = await response.json()\n    expect(data).toHaveProperty('id')\n    expect(data).toHaveProperty('name')\n    expect(data).toHaveProperty('price')\n  })\n\n  test('POST /api/products - should create product', async ({ request }) => {\n    const response = await request.post('/api/products', {\n      headers: {\n        'Authorization': `Bearer ${authToken}`\n      },\n      data: {\n        name: 'New API Product',\n        description: 'Created via API',\n        price: 59.99,\n        stock: 50\n      }\n    })\n\n    expect(response.status()).toBe(201)\n\n    const data = await response.json()\n    expect(data.name).toBe('New API Product')\n    expect(data.price).toBe(59.99)\n  })\n\n  test('PUT /api/products/:id - should update product', async ({ request }) => {\n    const response = await request.put('/api/products/1', {\n      headers: {\n        'Authorization': `Bearer ${authToken}`\n      },\n      data: {\n        name: 'Updated Product',\n        price: 79.99\n      }\n    })\n\n    expect(response.ok()).toBeTruthy()\n\n    const data = await response.json()\n    expect(data.name).toBe('Updated Product')\n    expect(data.price).toBe(79.99)\n  })\n\n  test('DELETE /api/products/:id - should delete product', async ({ request }) => {\n    // Create a product first\n    const createResponse = await request.post('/api/products', {\n      headers: {\n        'Authorization': `Bearer ${authToken}`\n      },\n      data: {\n        name: 'To Delete',\n        price: 10.0,\n        stock: 10\n      }\n    })\n    const created = await createResponse.json()\n\n    // Delete it\n    const deleteResponse = await request.delete(`/api/products/${created.id}`, {\n      headers: {\n        'Authorization': `Bearer ${authToken}`\n      }\n    })\n\n    expect(deleteResponse.status()).toBe(204)\n\n    // Verify it's deleted\n    const getResponse = await request.get(`/api/products/${created.id}`)\n    expect(getResponse.status()).toBe(404)\n  })\n\n  test('should handle validation errors', async ({ request }) => {\n    const response = await request.post('/api/products', {\n      headers: {\n        'Authorization': `Bearer ${authToken}`\n      },\n      data: {\n        name: '',  // Invalid: empty name\n        price: -10  // Invalid: negative price\n      }\n    })\n\n    expect(response.status()).toBe(422)\n\n    const data = await response.json()\n    expect(data).toHaveProperty('detail')\n    expect(Array.isArray(data.detail)).toBeTruthy()\n  })\n\n  test('should require authentication', async ({ request }) => {\n    const response = await request.post('/api/products', {\n      data: {\n        name: 'Test',\n        price: 10.0\n      }\n    })\n\n    expect(response.status()).toBe(401)\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"138-\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",children:"13.8 \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0"}),"\n",(0,r.jsx)(n.h3,{id:"\ucee4\ubc84\ub9ac\uc9c0-\uc124\uc815",children:"\ucee4\ubc84\ub9ac\uc9c0 \uc124\uc815"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Backend (pytest-cov)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815 \uc2e4\ud589\npytest --cov=app --cov-report=html --cov-report=term-missing\n\n# \ucd5c\uc18c \ucee4\ubc84\ub9ac\uc9c0 \uc694\uad6c\uc0ac\ud56d \uc124\uc815\npytest --cov=app --cov-fail-under=80\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:".coveragerc"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"[run]\nsource = app\nomit =\n    */tests/*\n    */migrations/*\n    */__pycache__/*\n    */venv/*\n\n[report]\nprecision = 2\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise AssertionError\n    raise NotImplementedError\n    if __name__ == .__main__.:\n    if TYPE_CHECKING:\n    @abstractmethod\n\n[html]\ndirectory = htmlcov\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Frontend (Vitest)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// vitest.config.ts\nexport default defineConfig({\n  test: {\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'html', 'json', 'lcov'],\n      exclude: [\n        'node_modules/',\n        'src/test/',\n        '**/*.spec.ts',\n        '**/*.test.ts',\n        '**/*.config.ts',\n        '**/types/',\n        '**/*.d.ts'\n      ],\n      thresholds: {\n        lines: 80,\n        functions: 80,\n        branches: 80,\n        statements: 80\n      }\n    }\n  }\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ucee4\ubc84\ub9ac\uc9c0-\ubcf4\uace0\uc11c-\ud574\uc11d",children:"\ucee4\ubc84\ub9ac\uc9c0 \ubcf4\uace0\uc11c \ud574\uc11d"}),"\n",(0,r.jsx)(n.p,{children:"\ucee4\ubc84\ub9ac\uc9c0 \uba54\ud2b8\ub9ad:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Line Coverage"}),": \uc2e4\ud589\ub41c \ucf54\ub4dc \ub77c\uc778\uc758 \ube44\uc728"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Function Coverage"}),": \ud638\ucd9c\ub41c \ud568\uc218\uc758 \ube44\uc728"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Branch Coverage"}),": \uc2e4\ud589\ub41c \ubd84\uae30(if/else)\uc758 \ube44\uc728"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Statement Coverage"}),": \uc2e4\ud589\ub41c \uad6c\ubb38\uc758 \ube44\uc728"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\uc88b\uc740 \ucee4\ubc84\ub9ac\uc9c0 \ubaa9\ud45c"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uc804\uccb4: 80% \uc774\uc0c1"}),"\n",(0,r.jsx)(n.li,{children:"\ud575\uc2ec \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1: 90% \uc774\uc0c1"}),"\n",(0,r.jsx)(n.li,{children:"\uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218: 95% \uc774\uc0c1"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"139-mocking",children:"13.9 Mocking"}),"\n",(0,r.jsx)(n.h3,{id:"backend-mocking",children:"Backend Mocking"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"tests/test_with_mocks.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pytest\nfrom unittest.mock import Mock, patch, MagicMock\nfrom app.services.email_service import EmailService\nfrom app.services.payment_service import PaymentService\n\nclass TestEmailServiceMocking:\n    \"\"\"\uc774\uba54\uc77c \uc11c\ube44\uc2a4 \ubaa8\ud0b9 \ud14c\uc2a4\ud2b8\"\"\"\n\n    @patch('app.services.email_service.smtplib.SMTP')\n    def test_send_email_with_mock(self, mock_smtp):\n        \"\"\"SMTP \ubaa8\ud0b9\"\"\"\n        # Mock \uc124\uc815\n        mock_server = Mock()\n        mock_smtp.return_value = mock_server\n\n        service = EmailService()\n        result = service.send_email(\n            to='test@example.com',\n            subject='Test',\n            body='Test body'\n        )\n\n        # \uac80\uc99d\n        assert result is True\n        mock_server.sendmail.assert_called_once()\n\n    def test_send_email_with_mocker(self, mocker):\n        \"\"\"pytest-mock \uc0ac\uc6a9\"\"\"\n        mock_smtp = mocker.patch('app.services.email_service.smtplib.SMTP')\n\n        service = EmailService()\n        service.send_email(\n            to='test@example.com',\n            subject='Test',\n            body='Test'\n        )\n\n        mock_smtp.assert_called_once()\n\nclass TestPaymentServiceMocking:\n    \"\"\"\uacb0\uc81c \uc11c\ube44\uc2a4 \ubaa8\ud0b9\"\"\"\n\n    def test_process_payment_success(self, mocker):\n        \"\"\"\uacb0\uc81c \uc131\uacf5 \ubaa8\ud0b9\"\"\"\n        mock_stripe = mocker.patch('app.services.payment_service.stripe')\n        mock_stripe.Charge.create.return_value = {\n            'id': 'ch_123',\n            'status': 'succeeded'\n        }\n\n        service = PaymentService()\n        result = service.process_payment(\n            amount=1000,\n            token='tok_visa'\n        )\n\n        assert result['success'] is True\n        assert result['charge_id'] == 'ch_123'\n\n    def test_process_payment_failure(self, mocker):\n        \"\"\"\uacb0\uc81c \uc2e4\ud328 \ubaa8\ud0b9\"\"\"\n        mock_stripe = mocker.patch('app.services.payment_service.stripe')\n        mock_stripe.Charge.create.side_effect = Exception('Card declined')\n\n        service = PaymentService()\n        result = service.process_payment(\n            amount=1000,\n            token='tok_declined'\n        )\n\n        assert result['success'] is False\n        assert 'Card declined' in result['error']\n\nclass TestDatabaseMocking:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ud0b9\"\"\"\n\n    def test_with_mock_db(self, mocker):\n        \"\"\"DB \uc138\uc158 \ubaa8\ud0b9\"\"\"\n        mock_session = MagicMock()\n        mock_query = MagicMock()\n\n        mock_session.query.return_value = mock_query\n        mock_query.filter.return_value = mock_query\n        mock_query.first.return_value = Mock(id=1, name='Test')\n\n        from app.services.user_service import UserService\n        service = UserService(mock_session)\n\n        user = service.get_user_by_id(1)\n\n        assert user.name == 'Test'\n        mock_session.query.assert_called_once()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"frontend-mocking",children:"Frontend Mocking"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["src/services/",(0,r.jsx)(n.strong,{children:"tests"}),"/api.test.ts"]}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, vi, beforeEach } from 'vitest'\nimport { productApi } from '../productApi'\n\ndescribe('Product API with Mocking', () => {\n  beforeEach(() => {\n    vi.clearAllMocks()\n  })\n\n  it('should fetch products', async () => {\n    const mockProducts = [\n      { id: 1, name: 'Product 1', price: 10 },\n      { id: 2, name: 'Product 2', price: 20 }\n    ]\n\n    global.fetch = vi.fn().mockResolvedValue({\n      ok: true,\n      json: async () => ({ items: mockProducts, total: 2 })\n    })\n\n    const result = await productApi.getProducts()\n\n    expect(result.items).toHaveLength(2)\n    expect(fetch).toHaveBeenCalledWith('/api/products')\n  })\n\n  it('should handle API errors', async () => {\n    global.fetch = vi.fn().mockRejectedValue(new Error('Network error'))\n\n    await expect(productApi.getProducts()).rejects.toThrow('Network error')\n  })\n\n  it('should mock axios', async () => {\n    const axios = await import('axios')\n    vi.spyOn(axios.default, 'get').mockResolvedValue({\n      data: { items: [], total: 0 }\n    })\n\n    const result = await productApi.getProducts()\n\n    expect(result.total).toBe(0)\n    expect(axios.default.get).toHaveBeenCalled()\n  })\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mock Service Worker (MSW)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/test/mocks/handlers.ts\nimport { rest } from 'msw'\n\nexport const handlers = [\n  rest.get('/api/products', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        items: [\n          { id: 1, name: 'Mocked Product 1', price: 10 },\n          { id: 2, name: 'Mocked Product 2', price: 20 }\n        ],\n        total: 2\n      })\n    )\n  }),\n\n  rest.post('/api/products', (req, res, ctx) => {\n    return res(\n      ctx.status(201),\n      ctx.json({\n        id: 3,\n        ...req.body\n      })\n    )\n  }),\n\n  rest.post('/api/auth/login', (req, res, ctx) => {\n    const { email, password } = req.body as any\n\n    if (email === 'test@example.com' && password === 'Test1234!') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          access_token: 'mock-token',\n          token_type: 'bearer'\n        })\n      )\n    }\n\n    return res(\n      ctx.status(401),\n      ctx.json({ detail: 'Invalid credentials' })\n    )\n  })\n]\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/test/mocks/server.ts\nimport { setupServer } from 'msw/node'\nimport { handlers } from './handlers'\n\nexport const server = setupServer(...handlers)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/test/setup.ts\nimport { beforeAll, afterEach, afterAll } from 'vitest'\nimport { server } from './mocks/server'\n\nbeforeAll(() => server.listen())\nafterEach(() => server.resetHandlers())\nafterAll(() => server.close())\n"})}),"\n",(0,r.jsx)(n.h2,{id:"1310-tdd-test-driven-development",children:"13.10 TDD (Test-Driven Development)"}),"\n",(0,r.jsx)(n.h3,{id:"tdd-\uc0ac\uc774\ud074",children:"TDD \uc0ac\uc774\ud074"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1. Red: \uc2e4\ud328\ud558\ub294 \ud14c\uc2a4\ud2b8 \uc791\uc131\n2. Green: \ud14c\uc2a4\ud2b8\ub97c \ud1b5\uacfc\ud558\ub294 \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc \uc791\uc131\n3. Refactor: \ucf54\ub4dc \uac1c\uc120\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tdd-\uc608\uc81c-\uacc4\uc0b0\uae30-\uad6c\ud604",children:"TDD \uc608\uc81c: \uacc4\uc0b0\uae30 \uad6c\ud604"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 1: Red - \ud14c\uc2a4\ud2b8 \uc791\uc131"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# tests/test_calculator.py\nimport pytest\nfrom app.utils.calculator import Calculator\n\nclass TestCalculator:\n    def test_add_two_numbers(self):\n        calc = Calculator()\n        result = calc.add(2, 3)\n        assert result == 5\n\n    def test_subtract_two_numbers(self):\n        calc = Calculator()\n        result = calc.subtract(5, 3)\n        assert result == 2\n\n    def test_multiply_two_numbers(self):\n        calc = Calculator()\n        result = calc.multiply(4, 3)\n        assert result == 12\n\n    def test_divide_two_numbers(self):\n        calc = Calculator()\n        result = calc.divide(10, 2)\n        assert result == 5.0\n\n    def test_divide_by_zero_raises_error(self):\n        calc = Calculator()\n        with pytest.raises(ValueError, match="Cannot divide by zero"):\n            calc.divide(10, 0)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 2: Green - \uad6c\ud604"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# app/utils/calculator.py\nclass Calculator:\n    def add(self, a: float, b: float) -> float:\n        return a + b\n\n    def subtract(self, a: float, b: float) -> float:\n        return a - b\n\n    def multiply(self, a: float, b: float) -> float:\n        return a * b\n\n    def divide(self, a: float, b: float) -> float:\n        if b == 0:\n            raise ValueError("Cannot divide by zero")\n        return a / b\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 3: Refactor - \uac1c\uc120"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# app/utils/calculator.py\nfrom typing import Union\n\nNumber = Union[int, float]\n\nclass Calculator:\n    """\uae30\ubcf8 \uacc4\uc0b0\uae30 \ud074\ub798\uc2a4"""\n\n    def add(self, a: Number, b: Number) -> Number:\n        """\ub450 \uc218\ub97c \ub354\ud569\ub2c8\ub2e4"""\n        return a + b\n\n    def subtract(self, a: Number, b: Number) -> Number:\n        """\ub450 \uc218\ub97c \ube8d\ub2c8\ub2e4"""\n        return a - b\n\n    def multiply(self, a: Number, b: Number) -> Number:\n        """\ub450 \uc218\ub97c \uacf1\ud569\ub2c8\ub2e4"""\n        return a * b\n\n    def divide(self, a: Number, b: Number) -> float:\n        """\ub450 \uc218\ub97c \ub098\ub215\ub2c8\ub2e4\n\n        Args:\n            a: \ud53c\uc81c\uc218\n            b: \uc81c\uc218\n\n        Returns:\n            \ub098\ub217\uc148 \uacb0\uacfc\n\n        Raises:\n            ValueError: b\uac00 0\uc778 \uacbd\uc6b0\n        """\n        if b == 0:\n            raise ValueError("Cannot divide by zero")\n        return float(a) / float(b)\n\n    def power(self, base: Number, exponent: Number) -> Number:\n        """\uac70\ub4ed\uc81c\uacf1\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4"""\n        return base ** exponent\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tdd-\uc2e4\uc804-\uc0ac\uc6a9\uc790-\uc11c\ube44\uc2a4",children:"TDD \uc2e4\uc804: \uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# tests/test_user_service_tdd.py\nimport pytest\nfrom app.services.user_service import UserService\nfrom app.exceptions import InvalidEmailError, WeakPasswordError\n\nclass TestUserServiceTDD:\n    """TDD\ub85c \uc791\uc131\ud558\ub294 \uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4"""\n\n    def test_validate_email_valid(self):\n        service = UserService()\n        assert service.validate_email("test@example.com") is True\n\n    def test_validate_email_invalid(self):\n        service = UserService()\n        with pytest.raises(InvalidEmailError):\n            service.validate_email("invalid-email")\n\n    def test_validate_password_strong(self):\n        service = UserService()\n        assert service.validate_password("Strong1234!") is True\n\n    def test_validate_password_too_short(self):\n        service = UserService()\n        with pytest.raises(WeakPasswordError, match="at least 8 characters"):\n            service.validate_password("Weak1!")\n\n    def test_validate_password_no_uppercase(self):\n        service = UserService()\n        with pytest.raises(WeakPasswordError, match="uppercase letter"):\n            service.validate_password("weak1234!")\n\n    def test_hash_password(self):\n        service = UserService()\n        password = "Test1234!"\n        hashed = service.hash_password(password)\n\n        assert hashed != password\n        assert len(hashed) > 50\n\n    def test_verify_password(self):\n        service = UserService()\n        password = "Test1234!"\n        hashed = service.hash_password(password)\n\n        assert service.verify_password(password, hashed) is True\n        assert service.verify_password("wrong", hashed) is False\n'})}),"\n",(0,r.jsx)(n.h2,{id:"1311-cicd-\ud1b5\ud569",children:"13.11 CI/CD \ud1b5\ud569"}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-\uc6cc\ud06c\ud50c\ub85c\uc6b0",children:"GitHub Actions \uc6cc\ud06c\ud50c\ub85c\uc6b0"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:".github/workflows/test.yml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"name: Test Suite\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  backend-tests:\n    name: Backend Tests\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_USER: testuser\n          POSTGRES_PASSWORD: testpass\n          POSTGRES_DB: testdb\n        ports:\n          - 5432:5432\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n          cache: 'pip'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n          pip install pytest pytest-cov pytest-asyncio\n\n      - name: Run linting\n        run: |\n          pip install flake8 black mypy\n          flake8 app tests\n          black --check app tests\n          mypy app\n\n      - name: Run tests\n        env:\n          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb\n        run: |\n          pytest --cov=app --cov-report=xml --cov-report=html\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage.xml\n          flags: backend\n          name: backend-coverage\n\n      - name: Archive coverage report\n        uses: actions/upload-artifact@v3\n        with:\n          name: coverage-report-backend\n          path: htmlcov/\n\n  frontend-tests:\n    name: Frontend Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run linting\n        run: npm run lint\n\n      - name: Run type checking\n        run: npm run type-check\n\n      - name: Run unit tests\n        run: npm run test:unit -- --coverage\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/coverage-final.json\n          flags: frontend\n          name: frontend-coverage\n\n      - name: Archive coverage report\n        uses: actions/upload-artifact@v3\n        with:\n          name: coverage-report-frontend\n          path: coverage/\n\n  e2e-tests:\n    name: E2E Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Install Playwright\n        run: npx playwright install --with-deps\n\n      - name: Run E2E tests\n        run: npm run test:e2e\n\n      - name: Upload test results\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: playwright-report\n          path: playwright-report/\n\n      - name: Upload test videos\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: playwright-videos\n          path: test-results/\n\n  integration-tests:\n    name: Integration Tests\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_USER: testuser\n          POSTGRES_PASSWORD: testpass\n          POSTGRES_DB: testdb\n        ports:\n          - 5432:5432\n\n      redis:\n        image: redis:7\n        ports:\n          - 6379:6379\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install pytest pytest-asyncio\n\n      - name: Run integration tests\n        env:\n          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb\n          REDIS_URL: redis://localhost:6379\n        run: |\n          pytest tests/integration -v\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:".github/workflows/pr-checks.yml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"name: PR Checks\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  check-tests:\n    name: Verify Tests Pass\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n\n      - name: Run all tests\n        run: |\n          pip install -r requirements.txt\n          npm ci\n          pytest\n          npm test\n\n  check-coverage:\n    name: Verify Coverage Threshold\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Check coverage\n        run: |\n          pip install -r requirements.txt\n          pytest --cov=app --cov-fail-under=80\n\n  comment-coverage:\n    name: Comment Coverage Report\n    runs-on: ubuntu-latest\n    needs: check-coverage\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Generate coverage report\n        run: |\n          pip install -r requirements.txt\n          pytest --cov=app --cov-report=term > coverage.txt\n\n      - name: Comment PR\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const fs = require('fs')\n            const coverage = fs.readFileSync('coverage.txt', 'utf8')\n\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `## Coverage Report\\n\\n\\`\\`\\`\\n${coverage}\\n\\`\\`\\``\n            })\n"})}),"\n",(0,r.jsx)(n.h2,{id:"1312-\uc2e4\uc2b5-\ud504\ub85c\uc81d\ud2b8",children:"13.12 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"\uc2e4\uc2b5-1-\uc0ac\uc6a9\uc790-\uad00\ub9ac-\uc2dc\uc2a4\ud15c-\ud14c\uc2a4\ud2b8",children:"\uc2e4\uc2b5 1: \uc0ac\uc6a9\uc790 \uad00\ub9ac \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\uc694\uad6c\uc0ac\ud56d"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\uc0ac\uc6a9\uc790 \uc0dd\uc131, \uc870\ud68c, \uc218\uc815, \uc0ad\uc81c \uae30\ub2a5"}),"\n",(0,r.jsx)(n.li,{children:"\uc774\uba54\uc77c \uc911\ubcf5 \uac80\uc99d"}),"\n",(0,r.jsx)(n.li,{children:"\ube44\ubc00\ubc88\ud638 \uac15\ub3c4 \uac80\uc99d"}),"\n",(0,r.jsx)(n.li,{children:"\ubaa8\ub4e0 \uae30\ub2a5\uc5d0 \ub300\ud55c \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131"}),"\n",(0,r.jsx)(n.li,{children:"\ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc791\uc131"}),"\n",(0,r.jsx)(n.li,{children:"80% \uc774\uc0c1 \ucee4\ubc84\ub9ac\uc9c0 \ub2ec\uc131"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\uad6c\ud604"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# app/services/user_service.py\nimport re\nfrom typing import Optional, List\nfrom sqlalchemy.orm import Session\nfrom app.models import User\nfrom app.schemas import UserCreate, UserUpdate\nfrom app.exceptions import (\n    InvalidEmailError,\n    WeakPasswordError,\n    UserNotFoundError,\n    DuplicateEmailError\n)\n\nclass UserService:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def validate_email(self, email: str) -> bool:\n        pattern = r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\'\n        if not re.match(pattern, email):\n            raise InvalidEmailError(f"Invalid email format: {email}")\n        return True\n\n    def validate_password(self, password: str) -> bool:\n        if len(password) < 8:\n            raise WeakPasswordError("Password must be at least 8 characters")\n        if not re.search(r\'[A-Z]\', password):\n            raise WeakPasswordError("Password must contain uppercase letter")\n        if not re.search(r\'[a-z]\', password):\n            raise WeakPasswordError("Password must contain lowercase letter")\n        if not re.search(r\'\\d\', password):\n            raise WeakPasswordError("Password must contain digit")\n        if not re.search(r\'[!@#$%^&*(),.?":{}|<>]\', password):\n            raise WeakPasswordError("Password must contain special character")\n        return True\n\n    def create_user(self, user_data: UserCreate) -> User:\n        # \uc774\uba54\uc77c \uac80\uc99d\n        self.validate_email(user_data.email)\n\n        # \ube44\ubc00\ubc88\ud638 \uac80\uc99d\n        self.validate_password(user_data.password)\n\n        # \uc911\ubcf5 \ud655\uc778\n        existing = self.db.query(User).filter_by(email=user_data.email).first()\n        if existing:\n            raise DuplicateEmailError(f"Email already exists: {user_data.email}")\n\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(**user_data.dict())\n        self.db.add(user)\n        self.db.commit()\n        self.db.refresh(user)\n\n        return user\n\n    def get_user(self, user_id: int) -> User:\n        user = self.db.query(User).filter_by(id=user_id).first()\n        if not user:\n            raise UserNotFoundError(f"User not found: {user_id}")\n        return user\n\n    def list_users(self, skip: int = 0, limit: int = 100) -> List[User]:\n        return self.db.query(User).offset(skip).limit(limit).all()\n\n    def update_user(self, user_id: int, user_data: UserUpdate) -> User:\n        user = self.get_user(user_id)\n\n        for field, value in user_data.dict(exclude_unset=True).items():\n            if field == \'email\':\n                self.validate_email(value)\n            if field == \'password\':\n                self.validate_password(value)\n            setattr(user, field, value)\n\n        self.db.commit()\n        self.db.refresh(user)\n\n        return user\n\n    def delete_user(self, user_id: int) -> None:\n        user = self.get_user(user_id)\n        self.db.delete(user)\n        self.db.commit()\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\ud14c\uc2a4\ud2b8"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# tests/test_user_service_complete.py\nimport pytest\nfrom app.services.user_service import UserService\nfrom app.schemas import UserCreate, UserUpdate\nfrom app.exceptions import (\n    InvalidEmailError,\n    WeakPasswordError,\n    UserNotFoundError,\n    DuplicateEmailError\n)\n\nclass TestUserServiceComplete:\n    """\uc644\uc804\ud55c \uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4 \ud14c\uc2a4\ud2b8"""\n\n    # Email validation tests\n    @pytest.mark.parametrize("email", [\n        "valid@example.com",\n        "user.name@domain.co.uk",\n        "user+tag@example.org"\n    ])\n    def test_validate_email_valid(self, email):\n        service = UserService(None)\n        assert service.validate_email(email) is True\n\n    @pytest.mark.parametrize("email", [\n        "invalid",\n        "@example.com",\n        "user@",\n        "user @example.com"\n    ])\n    def test_validate_email_invalid(self, email):\n        service = UserService(None)\n        with pytest.raises(InvalidEmailError):\n            service.validate_email(email)\n\n    # Password validation tests\n    def test_validate_password_strong(self):\n        service = UserService(None)\n        assert service.validate_password("Strong1234!") is True\n\n    def test_validate_password_too_short(self):\n        service = UserService(None)\n        with pytest.raises(WeakPasswordError, match="at least 8"):\n            service.validate_password("Short1!")\n\n    def test_validate_password_no_uppercase(self):\n        service = UserService(None)\n        with pytest.raises(WeakPasswordError, match="uppercase"):\n            service.validate_password("weak1234!")\n\n    def test_validate_password_no_digit(self):\n        service = UserService(None)\n        with pytest.raises(WeakPasswordError, match="digit"):\n            service.validate_password("WeakPassword!")\n\n    # CRUD tests\n    def test_create_user(self, db_session):\n        service = UserService(db_session)\n        user_data = UserCreate(\n            email="test@example.com",\n            username="testuser",\n            password="Test1234!"\n        )\n\n        user = service.create_user(user_data)\n\n        assert user.id is not None\n        assert user.email == "test@example.com"\n\n    def test_create_user_duplicate_email(self, db_session):\n        service = UserService(db_session)\n        user_data = UserCreate(\n            email="duplicate@example.com",\n            username="user1",\n            password="Test1234!"\n        )\n\n        service.create_user(user_data)\n\n        with pytest.raises(DuplicateEmailError):\n            service.create_user(user_data)\n\n    def test_get_user(self, db_session, created_user):\n        service = UserService(db_session)\n        user = service.get_user(created_user.id)\n\n        assert user.id == created_user.id\n        assert user.email == created_user.email\n\n    def test_get_user_not_found(self, db_session):\n        service = UserService(db_session)\n\n        with pytest.raises(UserNotFoundError):\n            service.get_user(9999)\n\n    def test_list_users(self, db_session, created_users):\n        service = UserService(db_session)\n        users = service.list_users()\n\n        assert len(users) == len(created_users)\n\n    def test_update_user(self, db_session, created_user):\n        service = UserService(db_session)\n        update_data = UserUpdate(username="updated")\n\n        user = service.update_user(created_user.id, update_data)\n\n        assert user.username == "updated"\n\n    def test_delete_user(self, db_session, created_user):\n        service = UserService(db_session)\n        user_id = created_user.id\n\n        service.delete_user(user_id)\n\n        with pytest.raises(UserNotFoundError):\n            service.get_user(user_id)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc2e4\uc2b5-2-\uc1fc\ud551\ubab0-e2e-\ud14c\uc2a4\ud2b8",children:"\uc2e4\uc2b5 2: \uc1fc\ud551\ubab0 E2E \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// e2e/shopping-flow.spec.ts\nimport { test, expect } from '@playwright/test'\n\ntest.describe('Complete Shopping Flow', () => {\n  test('user can browse, add to cart, and checkout', async ({ page }) => {\n    // 1. \ud648\ud398\uc774\uc9c0 \ubc29\ubb38\n    await page.goto('/')\n    await expect(page.locator('h1')).toContainText('Welcome')\n\n    // 2. \uc0c1\ud488 \uac80\uc0c9\n    await page.fill('input[placeholder=\"Search products\"]', 'laptop')\n    await page.press('input[placeholder=\"Search products\"]', 'Enter')\n    await expect(page.locator('.product-item')).toHaveCount(5)\n\n    // 3. \uc0c1\ud488 \uc0c1\uc138 \ud398\uc774\uc9c0\n    await page.click('.product-item:first-child')\n    await expect(page.locator('h1.product-title')).toBeVisible()\n\n    // 4. \uc7a5\ubc14\uad6c\ub2c8 \ucd94\uac00\n    await page.click('button:has-text(\"Add to Cart\")')\n    await expect(page.locator('.toast-success')).toContainText('Added to cart')\n    await expect(page.locator('.cart-badge')).toContainText('1')\n\n    // 5. \ub354 \ub9ce\uc740 \uc0c1\ud488 \ucd94\uac00\n    await page.goto('/products')\n    await page.click('.product-item:nth-child(2) .add-to-cart')\n    await expect(page.locator('.cart-badge')).toContainText('2')\n\n    // 6. \uc7a5\ubc14\uad6c\ub2c8 \ud655\uc778\n    await page.click('.cart-button')\n    await expect(page).toHaveURL('/cart')\n    await expect(page.locator('.cart-item')).toHaveCount(2)\n\n    // 7. \uc218\ub7c9 \uc870\uc815\n    await page.click('.quantity-increase')\n    await expect(page.locator('.quantity-input').first()).toHaveValue('2')\n\n    // 8. \ud560\uc778 \ucf54\ub4dc \uc801\uc6a9\n    await page.fill('input[name=\"discountCode\"]', 'SAVE10')\n    await page.click('button:has-text(\"Apply\")')\n    await expect(page.locator('.discount-message')).toContainText('10% off')\n\n    // 9. \uccb4\ud06c\uc544\uc6c3\n    await page.click('button:has-text(\"Proceed to Checkout\")')\n    await expect(page).toHaveURL('/checkout')\n\n    // 10. \ubc30\uc1a1 \uc815\ubcf4 \uc785\ub825\n    await page.fill('input[name=\"fullName\"]', 'John Doe')\n    await page.fill('input[name=\"address\"]', '123 Main St')\n    await page.fill('input[name=\"city\"]', 'New York')\n    await page.fill('input[name=\"zipCode\"]', '10001')\n    await page.fill('input[name=\"phone\"]', '555-1234')\n\n    // 11. \uacb0\uc81c \uc815\ubcf4 \uc785\ub825\n    await page.fill('input[name=\"cardNumber\"]', '4242424242424242')\n    await page.fill('input[name=\"expiry\"]', '12/25')\n    await page.fill('input[name=\"cvv\"]', '123')\n\n    // 12. \uc8fc\ubb38 \uc644\ub8cc\n    await page.click('button:has-text(\"Place Order\")')\n\n    // 13. \uc8fc\ubb38 \ud655\uc778\n    await expect(page).toHaveURL(/\\/orders\\/\\d+/)\n    await expect(page.locator('.success-message')).toContainText('Order placed successfully')\n    await expect(page.locator('.order-number')).toBeVisible()\n\n    // 14. \uc8fc\ubb38 \ub0b4\uc5ed \ud655\uc778\n    const orderNumber = await page.locator('.order-number').textContent()\n    await page.goto('/orders')\n    await expect(page.locator(`text=${orderNumber}`)).toBeVisible()\n  })\n})\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\uc694\uc57d",children:"\uc694\uc57d"}),"\n",(0,r.jsx)(n.p,{children:"\uc774 \uc7a5\uc5d0\uc11c\ub294 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud3ec\uad04\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc804\ub7b5\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud14c\uc2a4\ud2b8 \uc911\uc694\uc131"}),": \ud14c\uc2a4\ud2b8 \ud53c\ub77c\ubbf8\ub4dc\uc640 \uc6d0\uce59"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend \ub2e8\uc704 \ud14c\uc2a4\ud2b8"}),": pytest, fixtures, \ubaa8\ub378/\uc11c\ube44\uc2a4 \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend \ud1b5\ud569 \ud14c\uc2a4\ud2b8"}),": FastAPI TestClient, \ud2b8\ub79c\uc7ad\uc158 \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Frontend \ub2e8\uc704 \ud14c\uc2a4\ud2b8"}),": Vitest, \uc720\ud2f8\ub9ac\ud2f0/Hooks/\ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ucef4\ud3ec\ub10c\ud2b8 \ud14c\uc2a4\ud2b8"}),": React Testing Library, \uc0ac\uc6a9\uc790 \uc0c1\ud638\uc791\uc6a9 \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"E2E \ud14c\uc2a4\ud2b8"}),": Playwright, Page Object Model"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API \ud14c\uc2a4\ud2b8"}),": REST API \uc790\ub3d9\ud654 \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0"}),": \uce21\uc815 \ubc0f \ubaa9\ud45c \uc124\uc815"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mocking"}),": Backend/Frontend \ubaa8\ud0b9 \uc804\ub7b5"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TDD"}),": Red-Green-Refactor \uc0ac\uc774\ud074"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI \ud1b5\ud569"}),": GitHub Actions \uc790\ub3d9\ud654"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\uccb4\uacc4\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc804\ub7b5\uc744 \ud1b5\ud574 \uc548\uc815\uc801\uc774\uace0 \uc720\uc9c0\ubcf4\uc218 \uac00\ub2a5\ud55c \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);