"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1645],{7074:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>_,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"dagster/assets","title":"1. Assets","description":"Dagster\uc758 Assets\uc740 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \ud575\uc2ec \uac1c\ub150\uc73c\ub85c, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14, \ud30c\uc77c, \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub4f1 \uc2e4\uc81c \ub370\uc774\ud130 \uac1d\uccb4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. Asset \uae30\ubc18 \uc811\uadfc \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uba74 \ub370\uc774\ud130 \uacc4\ubcf4(lineage)\ub97c \ucd94\uc801\ud558\uace0, \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uba70, \ub370\uc774\ud130 \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","source":"@site/docs/dagster/assets.md","sourceDirName":"dagster","slug":"/dagster/assets","permalink":"/docs/dagster/assets","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dagster/assets.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"dagsterSidebar","previous":{"title":"Dagster \uc6cc\ud06c\ud50c\ub85c\uc6b0 \uac00\uc774\ub4dc","permalink":"/docs/dagster/intro"},"next":{"title":"Dagster \uc124\uce58 \ubc0f \uc124\uc815","permalink":"/docs/dagster/setup"}}');var s=t(4848),i=t(8453);const r={sidebar_position:2},o="1. Assets",d={},l=[{value:"1.1 Asset \uac1c\ub150",id:"11-asset-\uac1c\ub150",level:2},{value:"Asset vs Op",id:"asset-vs-op",level:3},{value:"Asset\uc758 \uad6c\uc131\uc694\uc18c",id:"asset\uc758-\uad6c\uc131\uc694\uc18c",level:3},{value:"1.2 @asset \ub370\ucf54\ub808\uc774\ud130",id:"12-asset-\ub370\ucf54\ub808\uc774\ud130",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"\uc8fc\uc694 \ub9e4\uac1c\ubcc0\uc218",id:"\uc8fc\uc694-\ub9e4\uac1c\ubcc0\uc218",level:3},{value:"\ud0c0\uc785 \ud78c\ud2b8\uc640 \uac80\uc99d",id:"\ud0c0\uc785-\ud78c\ud2b8\uc640-\uac80\uc99d",level:3},{value:"1.3 Asset \uc758\uc874\uc131",id:"13-asset-\uc758\uc874\uc131",level:2},{value:"\uba85\uc2dc\uc801 \uc758\uc874\uc131 (\ud568\uc218 \uc778\uc790)",id:"\uba85\uc2dc\uc801-\uc758\uc874\uc131-\ud568\uc218-\uc778\uc790",level:3},{value:"\uc554\uc2dc\uc801 \uc758\uc874\uc131 (deps \ub9e4\uac1c\ubcc0\uc218)",id:"\uc554\uc2dc\uc801-\uc758\uc874\uc131-deps-\ub9e4\uac1c\ubcc0\uc218",level:3},{value:"AssetKey\ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131",id:"assetkey\ub97c-\uc0ac\uc6a9\ud55c-\uc758\uc874\uc131",level:3},{value:"\ubcf5\uc7a1\ud55c \uc758\uc874\uc131 \uadf8\ub798\ud504",id:"\ubcf5\uc7a1\ud55c-\uc758\uc874\uc131-\uadf8\ub798\ud504",level:3},{value:"1.4 Asset \uadf8\ub8f9",id:"14-asset-\uadf8\ub8f9",level:2},{value:"\uae30\ubcf8 \uadf8\ub8f9\ud654",id:"\uae30\ubcf8-\uadf8\ub8f9\ud654",level:3},{value:"load_assets_from_modules\ub85c \uadf8\ub8f9 \uc801\uc6a9",id:"load_assets_from_modules\ub85c-\uadf8\ub8f9-\uc801\uc6a9",level:3},{value:"\uadf8\ub8f9\ubcc4 \uc2e4\ud589",id:"\uadf8\ub8f9\ubcc4-\uc2e4\ud589",level:3},{value:"1.5 Multi-asset",id:"15-multi-asset",level:2},{value:"\uae30\ubcf8 Multi-asset",id:"\uae30\ubcf8-multi-asset",level:3},{value:"Multi-asset with Dependencies",id:"multi-asset-with-dependencies",level:3},{value:"Multi-asset with Internal Dependencies",id:"multi-asset-with-internal-dependencies",level:3},{value:"\uc870\uac74\ubd80 Multi-asset",id:"\uc870\uac74\ubd80-multi-asset",level:3},{value:"1.6 Partitioned Assets",id:"16-partitioned-assets",level:2},{value:"\uc2dc\uac04 \uae30\ubc18 \ud30c\ud2f0\uc158 (\uc77c\ubcc4)",id:"\uc2dc\uac04-\uae30\ubc18-\ud30c\ud2f0\uc158-\uc77c\ubcc4",level:3},{value:"\uc2dc\uac04 \uae30\ubc18 \ud30c\ud2f0\uc158 (\uc2dc\uac04\ubcc4, \uc8fc\ubcc4, \uc6d4\ubcc4)",id:"\uc2dc\uac04-\uae30\ubc18-\ud30c\ud2f0\uc158-\uc2dc\uac04\ubcc4-\uc8fc\ubcc4-\uc6d4\ubcc4",level:3},{value:"\uc815\uc801 \ud30c\ud2f0\uc158",id:"\uc815\uc801-\ud30c\ud2f0\uc158",level:3},{value:"\ub2e4\ucc28\uc6d0 \ud30c\ud2f0\uc158",id:"\ub2e4\ucc28\uc6d0-\ud30c\ud2f0\uc158",level:3},{value:"\ud30c\ud2f0\uc158 \ub9e4\ud551",id:"\ud30c\ud2f0\uc158-\ub9e4\ud551",level:3},{value:"1.7 Dynamic Partitions",id:"17-dynamic-partitions",level:2},{value:"\uae30\ubcf8 Dynamic Partitions",id:"\uae30\ubcf8-dynamic-partitions",level:3},{value:"Dynamic Partitions \uad00\ub9ac",id:"dynamic-partitions-\uad00\ub9ac",level:3},{value:"\uc870\uac74\ubd80 Dynamic Partitions",id:"\uc870\uac74\ubd80-dynamic-partitions",level:3},{value:"1.8 Asset Checks",id:"18-asset-checks",level:2},{value:"\uae30\ubcf8 Asset Check",id:"\uae30\ubcf8-asset-check",level:3},{value:"\ub2e4\uc911 Asset Checks",id:"\ub2e4\uc911-asset-checks",level:3},{value:"\uc870\uac74\ubd80 Asset Checks",id:"\uc870\uac74\ubd80-asset-checks",level:3},{value:"1.9 Asset Metadata",id:"19-asset-metadata",level:2},{value:"\uc815\uc801 \uba54\ud0c0\ub370\uc774\ud130",id:"\uc815\uc801-\uba54\ud0c0\ub370\uc774\ud130",level:3},{value:"\ub3d9\uc801 \uba54\ud0c0\ub370\uc774\ud130",id:"\ub3d9\uc801-\uba54\ud0c0\ub370\uc774\ud130",level:3},{value:"\uc2dc\uac01\ud654 \uba54\ud0c0\ub370\uc774\ud130",id:"\uc2dc\uac01\ud654-\uba54\ud0c0\ub370\uc774\ud130",level:3},{value:"\ub370\uc774\ud130 \ud488\uc9c8 \uba54\ud0c0\ub370\uc774\ud130",id:"\ub370\uc774\ud130-\ud488\uc9c8-\uba54\ud0c0\ub370\uc774\ud130",level:3},{value:"1.10 Asset Selection",id:"110-asset-selection",level:2},{value:"\uae30\ubcf8 \uc120\ud0dd \ubc29\ubc95",id:"\uae30\ubcf8-\uc120\ud0dd-\ubc29\ubc95",level:3},{value:"\uace0\uae09 \uc120\ud0dd \ud328\ud134",id:"\uace0\uae09-\uc120\ud0dd-\ud328\ud134",level:3},{value:"\ubcf5\uc7a1\ud55c \uc120\ud0dd \ub85c\uc9c1",id:"\ubcf5\uc7a1\ud55c-\uc120\ud0dd-\ub85c\uc9c1",level:3},{value:"\ub3d9\uc801 Asset Selection",id:"\ub3d9\uc801-asset-selection",level:3},{value:"1.11 \uc2e4\uc2b5",id:"111-\uc2e4\uc2b5",level:2},{value:"\uc2e4\uc2b5 1: \uae30\ubcf8 Asset \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95",id:"\uc2e4\uc2b5-1-\uae30\ubcf8-asset-\ud30c\uc774\ud504\ub77c\uc778-\uad6c\ucd95",level:3},{value:"\uc2e4\uc2b5 2: \ud30c\ud2f0\uc158\ub41c Asset\uc73c\ub85c \uc99d\ubd84 \ucc98\ub9ac",id:"\uc2e4\uc2b5-2-\ud30c\ud2f0\uc158\ub41c-asset\uc73c\ub85c-\uc99d\ubd84-\ucc98\ub9ac",level:3},{value:"\uc2e4\uc2b5 3: Multi-asset\uacfc Asset Checks",id:"\uc2e4\uc2b5-3-multi-asset\uacfc-asset-checks",level:3},{value:"\uc2e4\uc2b5 4: Dynamic Partitions\uc640 \uc13c\uc11c",id:"\uc2e4\uc2b5-4-dynamic-partitions\uc640-\uc13c\uc11c",level:3},{value:"\uc2e4\uc2b5 5: \uc885\ud569 \ud504\ub85c\uc81d\ud2b8 - E-commerce \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778",id:"\uc2e4\uc2b5-5-\uc885\ud569-\ud504\ub85c\uc81d\ud2b8---e-commerce-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778",level:3},{value:"\uc694\uc57d",id:"\uc694\uc57d",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"1-assets",children:"1. Assets"})}),"\n",(0,s.jsx)(e.p,{children:"Dagster\uc758 Assets\uc740 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \ud575\uc2ec \uac1c\ub150\uc73c\ub85c, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14, \ud30c\uc77c, \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub4f1 \uc2e4\uc81c \ub370\uc774\ud130 \uac1d\uccb4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. Asset \uae30\ubc18 \uc811\uadfc \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uba74 \ub370\uc774\ud130 \uacc4\ubcf4(lineage)\ub97c \ucd94\uc801\ud558\uace0, \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uba70, \ub370\uc774\ud130 \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h2,{id:"11-asset-\uac1c\ub150",children:"1.1 Asset \uac1c\ub150"}),"\n",(0,s.jsx)(e.p,{children:"Asset\uc740 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c \uc0dd\uc131\ub418\uace0 \uad00\ub9ac\ub418\ub294 \ub370\uc774\ud130 \uac1d\uccb4\uc785\ub2c8\ub2e4. Dagster\uc5d0\uc11c Asset\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\uc744 \uac00\uc9d1\ub2c8\ub2e4:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc120\uc5b8\uc801(Declarative)"}),': Asset\uc740 "\uc5b4\ub5bb\uac8c" \ub9cc\ub4e4\uc5b4\uc9c0\ub294\uc9c0\uac00 \uc544\ub2cc "\ubb34\uc5c7"\uc778\uc9c0\ub97c \uc815\uc758\ud569\ub2c8\ub2e4']}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ucd94\uc801 \uac00\ub2a5(Trackable)"}),": \uac01 Asset\uc758 materialization \uc774\ub825\uc774 \uc790\ub3d9\uc73c\ub85c \uae30\ub85d\ub429\ub2c8\ub2e4"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc758\uc874\uc131 \uad00\ub9ac"}),": Asset \uac04\uc758 \uad00\uacc4\uac00 \uba85\uc2dc\uc801\uc73c\ub85c \uc815\uc758\ub429\ub2c8\ub2e4"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc7ac\uc0ac\uc6a9 \uac00\ub2a5"}),": Asset\uc740 \uc5ec\ub7ec \ud30c\uc774\ud504\ub77c\uc778\uc5d0\uc11c \uacf5\uc720\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"asset-vs-op",children:"Asset vs Op"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"\ud2b9\uc131"}),(0,s.jsx)(e.th,{children:"Asset"}),(0,s.jsx)(e.th,{children:"Op"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\ucd08\uc810"}),(0,s.jsx)(e.td,{children:"\ub370\uc774\ud130 \uc790\uccb4 (What)"}),(0,s.jsx)(e.td,{children:"\uc791\uc5c5/\ud504\ub85c\uc138\uc2a4 (How)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\ucd94\uc801"}),(0,s.jsx)(e.td,{children:"\uc790\ub3d9 materialization \ucd94\uc801"}),(0,s.jsx)(e.td,{children:"\uc218\ub3d9 \ucd94\uc801 \ud544\uc694"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\uc758\uc874\uc131"}),(0,s.jsx)(e.td,{children:"\uc554\uc2dc\uc801, \uc120\uc5b8\uc801"}),(0,s.jsx)(e.td,{children:"\uba85\uc2dc\uc801, \uadf8\ub798\ud504 \uae30\ubc18"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"\uc0ac\uc6a9 \uc0ac\ub840"}),(0,s.jsx)(e.td,{children:"\ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778, \ubd84\uc11d"}),(0,s.jsx)(e.td,{children:"\uc6cc\ud06c\ud50c\ub85c\uc6b0, ETL \uc791\uc5c5"})]})]})]}),"\n",(0,s.jsx)(e.h3,{id:"asset\uc758-\uad6c\uc131\uc694\uc18c",children:"Asset\uc758 \uad6c\uc131\uc694\uc18c"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetExecutionContext\nimport pandas as pd\n\n@asset(\n    # Asset \uba54\ud0c0\ub370\uc774\ud130\n    description="\uc77c\ubcc4 \uc0ac\uc6a9\uc790 \ud65c\ub3d9 \uc9d1\uacc4 \ub370\uc774\ud130",\n    group_name="analytics",\n    compute_kind="pandas",\n    # Asset \uc124\uc815\n    metadata={\n        "owner": "data-team",\n        "sla": "24h"\n    }\n)\ndef daily_user_activity(context: AssetExecutionContext) -> pd.DataFrame:\n    """\n    \uc0ac\uc6a9\uc790 \ud65c\ub3d9 \ub85c\uadf8\ub97c \uc77c\ubcc4\ub85c \uc9d1\uacc4\ud569\ub2c8\ub2e4.\n\n    Returns:\n        pd.DataFrame: \uc77c\ubcc4 \uc0ac\uc6a9\uc790 \ud65c\ub3d9 \ud1b5\uacc4\n    """\n    # Asset \uc0dd\uc131 \ub85c\uc9c1\n    df = pd.DataFrame({\n        \'date\': [\'2024-01-01\', \'2024-01-02\'],\n        \'active_users\': [1000, 1200],\n        \'sessions\': [5000, 6000]\n    })\n\n    context.log.info(f"\uc9d1\uacc4\ub41c \ub808\ucf54\ub4dc \uc218: {len(df)}")\n\n    return df\n'})}),"\n",(0,s.jsx)(e.h2,{id:"12-asset-\ub370\ucf54\ub808\uc774\ud130",children:"1.2 @asset \ub370\ucf54\ub808\uc774\ud130"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"@asset"})," \ub370\ucf54\ub808\uc774\ud130\ub294 Python \ud568\uc218\ub97c Dagster Asset\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \ub2e4\uc591\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \ud1b5\ud574 Asset\uc758 \ub3d9\uc791\uc744 \uc81c\uc5b4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset\nimport pandas as pd\n\n@asset\ndef raw_sales_data() -> pd.DataFrame:\n    \"\"\"\uc6d0\uc2dc \ud310\ub9e4 \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud569\ub2c8\ub2e4.\"\"\"\n    return pd.DataFrame({\n        'product_id': [1, 2, 3],\n        'quantity': [10, 20, 15],\n        'price': [100, 200, 150]\n    })\n\n@asset\ndef processed_sales_data(raw_sales_data: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\ud310\ub9e4 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\"\"\"\n    df = raw_sales_data.copy()\n    df['total'] = df['quantity'] * df['price']\n    return df\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc8fc\uc694-\ub9e4\uac1c\ubcc0\uc218",children:"\uc8fc\uc694 \ub9e4\uac1c\ubcc0\uc218"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetExecutionContext, AutoMaterializePolicy\nfrom typing import Dict, Any\n\n@asset(\n    # Asset \uc2dd\ubcc4\n    name="user_metrics",  # Asset \uc774\ub984 (\uae30\ubcf8\uac12: \ud568\uc218\uba85)\n    key_prefix=["analytics", "users"],  # Asset \ud0a4 \uc811\ub450\uc0ac\n\n    # Asset \uc870\uc9c1\ud654\n    group_name="user_analytics",  # Asset \uadf8\ub8f9\n    description="\uc0ac\uc6a9\uc790 \ud589\ub3d9 \uc9c0\ud45c",\n\n    # \uc758\uc874\uc131\n    deps=["raw_events"],  # \ube44-\uc778\uc218 \uc758\uc874\uc131\n\n    # \uba54\ud0c0\ub370\uc774\ud130\n    metadata={\n        "partition_expr": "date",\n        "table_name": "user_metrics"\n    },\n\n    # \uc2e4\ud589 \uc124\uc815\n    compute_kind="dbt",  # \uc5f0\uc0b0 \uc885\ub958 \ud45c\uc2dc\n    code_version="v1",  # \ucf54\ub4dc \ubc84\uc804\n\n    # \uc790\ub3d9 materialization\n    auto_materialize_policy=AutoMaterializePolicy.eager(),\n\n    # IO \uad00\ub9ac\n    io_manager_key="warehouse_io_manager",\n\n    # \ub9ac\uc18c\uc2a4\n    required_resource_keys={"database", "s3"},\n\n    # \ud30c\ud2f0\uc154\ub2dd\n    partitions_def=None,  # \ud30c\ud2f0\uc158 \uc815\uc758\n\n    # \uc7ac\uc2dc\ub3c4\n    retry_policy=None,\n\n    # \ud0dc\uadf8\n    tags={"team": "data-engineering", "priority": "high"}\n)\ndef user_metrics(context: AssetExecutionContext) -> Dict[str, Any]:\n    """\uc0ac\uc6a9\uc790 \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4."""\n    return {\n        \'daily_active_users\': 10000,\n        \'retention_rate\': 0.75\n    }\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ud0c0\uc785-\ud78c\ud2b8\uc640-\uac80\uc99d",children:"\ud0c0\uc785 \ud78c\ud2b8\uc640 \uac80\uc99d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset, AssetExecutionContext\nfrom typing import List, Dict\nfrom pydantic import BaseModel\nimport pandas as pd\n\n# Pydantic \ubaa8\ub378\ub85c \ud0c0\uc785 \uc548\uc804\uc131 \ubcf4\uc7a5\nclass UserMetrics(BaseModel):\n    user_id: int\n    login_count: int\n    last_login: str\n\n@asset\ndef validated_user_metrics(context: AssetExecutionContext) -> List[UserMetrics]:\n    \"\"\"\ud0c0\uc785 \uac80\uc99d\uc774 \uc801\uc6a9\ub41c \uc0ac\uc6a9\uc790 \uc9c0\ud45c\"\"\"\n    raw_data = [\n        {'user_id': 1, 'login_count': 5, 'last_login': '2024-01-01'},\n        {'user_id': 2, 'login_count': 3, 'last_login': '2024-01-02'}\n    ]\n\n    # Pydantic \uac80\uc99d\n    validated_metrics = [UserMetrics(**record) for record in raw_data]\n\n    context.log.info(f\"\uac80\uc99d\ub41c \ub808\ucf54\ub4dc: {len(validated_metrics)}\uac1c\")\n\n    return validated_metrics\n\n# DataFrame \ud0c0\uc785 \ud78c\ud2b8\n@asset\ndef user_dataframe(validated_user_metrics: List[UserMetrics]) -> pd.DataFrame:\n    \"\"\"\uac80\uc99d\ub41c \ub370\uc774\ud130\ub97c DataFrame\uc73c\ub85c \ubcc0\ud658\"\"\"\n    return pd.DataFrame([m.dict() for m in validated_user_metrics])\n"})}),"\n",(0,s.jsx)(e.h2,{id:"13-asset-\uc758\uc874\uc131",children:"1.3 Asset \uc758\uc874\uc131"}),"\n",(0,s.jsx)(e.p,{children:"Asset \uac04\uc758 \uc758\uc874\uc131\uc740 \ub370\uc774\ud130 \uacc4\ubcf4(lineage)\ub97c \ud615\uc131\ud558\uace0, \uc2e4\ud589 \uc21c\uc11c\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uba85\uc2dc\uc801-\uc758\uc874\uc131-\ud568\uc218-\uc778\uc790",children:"\uba85\uc2dc\uc801 \uc758\uc874\uc131 (\ud568\uc218 \uc778\uc790)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset\nimport pandas as pd\n\n@asset\ndef raw_customers() -> pd.DataFrame:\n    \"\"\"\uc6d0\uc2dc \uace0\uac1d \ub370\uc774\ud130\"\"\"\n    return pd.DataFrame({\n        'customer_id': [1, 2, 3],\n        'name': ['Alice', 'Bob', 'Charlie'],\n        'country': ['US', 'UK', 'US']\n    })\n\n@asset\ndef raw_orders() -> pd.DataFrame:\n    \"\"\"\uc6d0\uc2dc \uc8fc\ubb38 \ub370\uc774\ud130\"\"\"\n    return pd.DataFrame({\n        'order_id': [101, 102, 103],\n        'customer_id': [1, 2, 1],\n        'amount': [100, 200, 150]\n    })\n\n@asset\ndef customer_orders(\n    raw_customers: pd.DataFrame,\n    raw_orders: pd.DataFrame\n) -> pd.DataFrame:\n    \"\"\"\uace0\uac1d\uacfc \uc8fc\ubb38\uc744 \uc870\uc778\ud569\ub2c8\ub2e4.\"\"\"\n    return raw_orders.merge(\n        raw_customers,\n        on='customer_id',\n        how='left'\n    )\n\n@asset\ndef customer_lifetime_value(customer_orders: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\uace0\uac1d \uc0dd\uc560 \uac00\uce58\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\"\"\"\n    clv = customer_orders.groupby('customer_id').agg({\n        'amount': 'sum',\n        'order_id': 'count'\n    }).rename(columns={'amount': 'total_spend', 'order_id': 'order_count'})\n\n    return clv.reset_index()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc554\uc2dc\uc801-\uc758\uc874\uc131-deps-\ub9e4\uac1c\ubcc0\uc218",children:"\uc554\uc2dc\uc801 \uc758\uc874\uc131 (deps \ub9e4\uac1c\ubcc0\uc218)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetExecutionContext\n\n@asset\ndef external_api_sync(context: AssetExecutionContext) -> None:\n    """\uc678\ubd80 API \ub370\uc774\ud130\ub97c \ub3d9\uae30\ud654\ud569\ub2c8\ub2e4."""\n    context.log.info("API \ub3d9\uae30\ud654 \uc644\ub8cc")\n    # \ub370\uc774\ud130\ub97c \uc678\ubd80 \uc2dc\uc2a4\ud15c\uc5d0 \uc800\uc7a5\n    return None\n\n@asset(\n    deps=["external_api_sync"]  # \ub370\uc774\ud130\ub97c \uc9c1\uc811 \ubc1b\uc9c0 \uc54a\uc9c0\ub9cc \uc758\uc874\uc131 \uc124\uc815\n)\ndef analysis_report(context: AssetExecutionContext) -> dict:\n    """\n    \ub3d9\uae30\ud654\ub41c \ub370\uc774\ud130\ub97c \uae30\ubc18\uc73c\ub85c \ubd84\uc11d \ubcf4\uace0\uc11c\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    external_api_sync\uac00 \uba3c\uc800 \uc2e4\ud589\ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc, \ubc18\ud658\uac12\uc740 \ud544\uc694 \uc5c6\uc2b5\ub2c8\ub2e4.\n    """\n    # \uc678\ubd80 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ub370\uc774\ud130 \uc77d\uae30\n    context.log.info("\ubd84\uc11d \ubcf4\uace0\uc11c \uc0dd\uc131")\n    return {"status": "completed"}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"assetkey\ub97c-\uc0ac\uc6a9\ud55c-\uc758\uc874\uc131",children:"AssetKey\ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetKey, AssetIn\nimport pandas as pd\n\n@asset(key_prefix=["raw", "sales"])\ndef daily_sales() -> pd.DataFrame:\n    """\uc77c\ubcc4 \ud310\ub9e4 \ub370\uc774\ud130"""\n    return pd.DataFrame({\'sales\': [100, 200, 300]})\n\n# \ubc29\ubc95 1: AssetIn \uc0ac\uc6a9\n@asset(\n    ins={\n        "sales": AssetIn(key=AssetKey(["raw", "sales", "daily_sales"]))\n    }\n)\ndef sales_analysis(sales: pd.DataFrame) -> dict:\n    """\ud310\ub9e4 \ubd84\uc11d"""\n    return {\'total\': sales[\'sales\'].sum()}\n\n# \ubc29\ubc95 2: \ubb38\uc790\uc5f4 \uacbd\ub85c \uc0ac\uc6a9\n@asset(\n    ins={\n        "sales": AssetIn(key_prefix=["raw", "sales"])\n    }\n)\ndef sales_summary(sales: pd.DataFrame) -> dict:\n    """\ud310\ub9e4 \uc694\uc57d"""\n    return {\'avg\': sales[\'sales\'].mean()}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ubcf5\uc7a1\ud55c-\uc758\uc874\uc131-\uadf8\ub798\ud504",children:"\ubcf5\uc7a1\ud55c \uc758\uc874\uc131 \uadf8\ub798\ud504"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset, AssetExecutionContext\nimport pandas as pd\n\n# \ub370\uc774\ud130 \uc18c\uc2a4\n@asset\ndef raw_transactions() -> pd.DataFrame:\n    return pd.DataFrame({\n        'tx_id': [1, 2, 3],\n        'user_id': [101, 102, 101],\n        'amount': [50, 100, 75]\n    })\n\n@asset\ndef raw_users() -> pd.DataFrame:\n    return pd.DataFrame({\n        'user_id': [101, 102],\n        'segment': ['premium', 'standard']\n    })\n\n@asset\ndef raw_products() -> pd.DataFrame:\n    return pd.DataFrame({\n        'tx_id': [1, 2, 3],\n        'product_id': [1001, 1002, 1001]\n    })\n\n# \uc911\uac04 \ub808\uc774\uc5b4\n@asset\ndef enriched_transactions(\n    raw_transactions: pd.DataFrame,\n    raw_users: pd.DataFrame,\n    raw_products: pd.DataFrame\n) -> pd.DataFrame:\n    \"\"\"\ubaa8\ub4e0 \uc6d0\uc2dc \ub370\uc774\ud130\ub97c \uacb0\ud569\ud569\ub2c8\ub2e4.\"\"\"\n    df = raw_transactions.merge(raw_users, on='user_id')\n    df = df.merge(raw_products, on='tx_id')\n    return df\n\n@asset\ndef user_metrics(raw_transactions: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\uc0ac\uc6a9\uc790\ubcc4 \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\"\"\"\n    return raw_transactions.groupby('user_id').agg({\n        'amount': ['sum', 'mean', 'count']\n    })\n\n# \ucd5c\uc885 \ub808\uc774\uc5b4\n@asset\ndef business_dashboard(\n    enriched_transactions: pd.DataFrame,\n    user_metrics: pd.DataFrame\n) -> dict:\n    \"\"\"\ube44\uc988\ub2c8\uc2a4 \ub300\uc2dc\ubcf4\ub4dc \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\"\"\"\n    return {\n        'total_revenue': enriched_transactions['amount'].sum(),\n        'active_users': len(user_metrics),\n        'avg_transaction': enriched_transactions['amount'].mean()\n    }\n"})}),"\n",(0,s.jsx)(e.h2,{id:"14-asset-\uadf8\ub8f9",children:"1.4 Asset \uadf8\ub8f9"}),"\n",(0,s.jsx)(e.p,{children:"Asset \uadf8\ub8f9\uc740 \uad00\ub828\ub41c Asset\ub4e4\uc744 \ub17c\ub9ac\uc801\uc73c\ub85c \uc870\uc9c1\ud654\ud558\uc5ec \uad00\ub9ac\uc640 \uc2e4\ud589\uc744 \uc6a9\uc774\ud558\uac8c \ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-\uadf8\ub8f9\ud654",children:"\uae30\ubcf8 \uadf8\ub8f9\ud654"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset\nimport pandas as pd\n\n# \uc6d0\uc2dc \ub370\uc774\ud130 \uadf8\ub8f9\n@asset(group_name=\"raw_data\")\ndef raw_events() -> pd.DataFrame:\n    return pd.DataFrame({'event': ['login', 'click', 'purchase']})\n\n@asset(group_name=\"raw_data\")\ndef raw_users() -> pd.DataFrame:\n    return pd.DataFrame({'user_id': [1, 2, 3]})\n\n# \ucc98\ub9ac\ub41c \ub370\uc774\ud130 \uadf8\ub8f9\n@asset(group_name=\"processed_data\")\ndef processed_events(raw_events: pd.DataFrame) -> pd.DataFrame:\n    return raw_events.copy()\n\n@asset(group_name=\"processed_data\")\ndef processed_users(raw_users: pd.DataFrame) -> pd.DataFrame:\n    return raw_users.copy()\n\n# \ubd84\uc11d \uadf8\ub8f9\n@asset(group_name=\"analytics\")\ndef user_analytics(\n    processed_events: pd.DataFrame,\n    processed_users: pd.DataFrame\n) -> dict:\n    return {'total_events': len(processed_events)}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"load_assets_from_modules\ub85c-\uadf8\ub8f9-\uc801\uc6a9",children:"load_assets_from_modules\ub85c \uadf8\ub8f9 \uc801\uc6a9"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# assets/raw_data.py\nfrom dagster import asset\nimport pandas as pd\n\n@asset\ndef customers() -> pd.DataFrame:\n    return pd.DataFrame({'id': [1, 2, 3]})\n\n@asset\ndef orders() -> pd.DataFrame:\n    return pd.DataFrame({'order_id': [101, 102]})\n\n# assets/analytics.py\nfrom dagster import asset\nimport pandas as pd\n\n@asset\ndef customer_analysis(customers: pd.DataFrame) -> dict:\n    return {'count': len(customers)}\n\n# definitions.py\nfrom dagster import Definitions, load_assets_from_modules\nfrom . import assets\n\nraw_data_assets = load_assets_from_modules(\n    [assets.raw_data],\n    group_name=\"raw_data\"\n)\n\nanalytics_assets = load_assets_from_modules(\n    [assets.analytics],\n    group_name=\"analytics\"\n)\n\ndefs = Definitions(\n    assets=[*raw_data_assets, *analytics_assets]\n)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uadf8\ub8f9\ubcc4-\uc2e4\ud589",children:"\uadf8\ub8f9\ubcc4 \uc2e4\ud589"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    define_asset_job,\n    AssetSelection,\n    Definitions\n)\nimport pandas as pd\n\n# Assets\n@asset(group_name="bronze")\ndef bronze_sales() -> pd.DataFrame:\n    return pd.DataFrame({\'sales\': [100, 200]})\n\n@asset(group_name="silver")\ndef silver_sales(bronze_sales: pd.DataFrame) -> pd.DataFrame:\n    return bronze_sales.copy()\n\n@asset(group_name="gold")\ndef gold_sales_summary(silver_sales: pd.DataFrame) -> dict:\n    return {\'total\': silver_sales[\'sales\'].sum()}\n\n# \uadf8\ub8f9\ubcc4 Job \uc815\uc758\nbronze_job = define_asset_job(\n    name="bronze_job",\n    selection=AssetSelection.groups("bronze")\n)\n\nsilver_gold_job = define_asset_job(\n    name="silver_gold_job",\n    selection=AssetSelection.groups("silver", "gold")\n)\n\n# \uc804\uccb4 \ud30c\uc774\ud504\ub77c\uc778\nfull_pipeline = define_asset_job(\n    name="full_pipeline",\n    selection=AssetSelection.groups("bronze", "silver", "gold")\n)\n\ndefs = Definitions(\n    assets=[bronze_sales, silver_sales, gold_sales_summary],\n    jobs=[bronze_job, silver_gold_job, full_pipeline]\n)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"15-multi-asset",children:"1.5 Multi-asset"}),"\n",(0,s.jsx)(e.p,{children:"Multi-asset\uc740 \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc5ec\ub7ec Asset\uc744 \uc0dd\uc131\ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud6a8\uc728\uc131\uc774 \uc911\uc694\ud558\uac70\ub098 Asset\ub4e4\uc774 \uae34\ubc00\ud558\uac8c \uc5f0\uad00\ub41c \uacbd\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-multi-asset",children:"\uae30\ubcf8 Multi-asset"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import multi_asset, AssetOut, AssetExecutionContext\nimport pandas as pd\nfrom typing import Tuple\n\n@multi_asset(\n    outs={\n        \"users\": AssetOut(),\n        \"transactions\": AssetOut(),\n        \"products\": AssetOut()\n    }\n)\ndef extract_database_tables(\n    context: AssetExecutionContext\n) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n    \"\"\"\n    \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc5ec\ub7ec \ud14c\uc774\ube14\uc744 \ud55c \ubc88\uc5d0 \ucd94\ucd9c\ud569\ub2c8\ub2e4.\n    \"\"\"\n    # \ub2e8\uc77c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\ub85c \ubaa8\ub4e0 \ud14c\uc774\ube14 \ub85c\ub4dc\n    users = pd.DataFrame({\n        'user_id': [1, 2, 3],\n        'name': ['Alice', 'Bob', 'Charlie']\n    })\n\n    transactions = pd.DataFrame({\n        'tx_id': [101, 102, 103],\n        'user_id': [1, 2, 1],\n        'amount': [100, 200, 150]\n    })\n\n    products = pd.DataFrame({\n        'product_id': [1001, 1002],\n        'name': ['Widget', 'Gadget']\n    })\n\n    context.log.info(\"\ubaa8\ub4e0 \ud14c\uc774\ube14 \ucd94\ucd9c \uc644\ub8cc\")\n\n    return users, transactions, products\n"})}),"\n",(0,s.jsx)(e.h3,{id:"multi-asset-with-dependencies",children:"Multi-asset with Dependencies"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import multi_asset, AssetOut, AssetIn\nimport pandas as pd\n\n@multi_asset(\n    ins={\n        "raw_data": AssetIn()\n    },\n    outs={\n        "clean_data": AssetOut(),\n        "data_quality_report": AssetOut()\n    }\n)\ndef process_and_validate(raw_data: pd.DataFrame) -> Tuple[pd.DataFrame, dict]:\n    """\n    \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\uba74\uc11c \ub3d9\uc2dc\uc5d0 \ud488\uc9c8 \ubcf4\uace0\uc11c\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    """\n    # \ub370\uc774\ud130 \uc815\uc81c\n    clean_data = raw_data.dropna()\n\n    # \ud488\uc9c8 \ubcf4\uace0\uc11c\n    quality_report = {\n        \'original_rows\': len(raw_data),\n        \'clean_rows\': len(clean_data),\n        \'dropped_rows\': len(raw_data) - len(clean_data),\n        \'null_percentage\': (len(raw_data) - len(clean_data)) / len(raw_data) * 100\n    }\n\n    return clean_data, quality_report\n\n# Multi-asset\uc758 \ucd9c\ub825\uc744 \uc758\uc874\uc131\uc73c\ub85c \uc0ac\uc6a9\n@asset\ndef final_analysis(clean_data: pd.DataFrame) -> dict:\n    """\uc815\uc81c\ub41c \ub370\uc774\ud130\ub85c \ubd84\uc11d\uc744 \uc218\ud589\ud569\ub2c8\ub2e4."""\n    return {\'mean\': clean_data.mean().to_dict()}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"multi-asset-with-internal-dependencies",children:"Multi-asset with Internal Dependencies"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import multi_asset, AssetOut\nimport pandas as pd\n\n@multi_asset(\n    outs={\n        "step1_output": AssetOut(),\n        "step2_output": AssetOut(),\n        "step3_output": AssetOut()\n    },\n    internal_asset_deps={\n        "step1_output": set(),\n        "step2_output": {"step1_output"},\n        "step3_output": {"step1_output", "step2_output"}\n    }\n)\ndef multi_step_pipeline(context):\n    """\n    \ub0b4\ubd80 \uc758\uc874\uc131\uc774 \uc788\ub294 \ub2e4\ub2e8\uacc4 \ud30c\uc774\ud504\ub77c\uc778\n    """\n    # Step 1\n    step1_data = pd.DataFrame({\'value\': [1, 2, 3]})\n    context.log.info("Step 1 \uc644\ub8cc")\n\n    # Step 2 (Step 1\uc5d0 \uc758\uc874)\n    step2_data = step1_data.copy()\n    step2_data[\'doubled\'] = step2_data[\'value\'] * 2\n    context.log.info("Step 2 \uc644\ub8cc")\n\n    # Step 3 (Step 1\uacfc Step 2\uc5d0 \uc758\uc874)\n    step3_data = pd.DataFrame({\n        \'original\': step1_data[\'value\'],\n        \'doubled\': step2_data[\'doubled\'],\n        \'tripled\': step1_data[\'value\'] * 3\n    })\n    context.log.info("Step 3 \uc644\ub8cc")\n\n    return step1_data, step2_data, step3_data\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc870\uac74\ubd80-multi-asset",children:"\uc870\uac74\ubd80 Multi-asset"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import multi_asset, AssetOut, Output\nimport pandas as pd\n\n@multi_asset(\n    outs={\n        "valid_records": AssetOut(),\n        "invalid_records": AssetOut(is_required=False)\n    },\n    can_subset=True\n)\ndef validate_records(context):\n    """\n    \ub808\ucf54\ub4dc\ub97c \uac80\uc99d\ud558\uace0 \uc720\ud6a8/\ubb34\ud6a8 \ub808\ucf54\ub4dc\ub85c \ubd84\ub9ac\ud569\ub2c8\ub2e4.\n    """\n    raw_data = pd.DataFrame({\n        \'id\': [1, 2, 3, 4],\n        \'value\': [100, -50, 200, -100]\n    })\n\n    valid = raw_data[raw_data[\'value\'] > 0]\n    invalid = raw_data[raw_data[\'value\'] <= 0]\n\n    # \ud56d\uc0c1 valid_records \ucd9c\ub825\n    yield Output(valid, output_name="valid_records")\n\n    # \ubb34\ud6a8 \ub808\ucf54\ub4dc\uac00 \uc788\uc744 \ub54c\ub9cc \ucd9c\ub825\n    if len(invalid) > 0:\n        context.log.warning(f"\ubb34\ud6a8 \ub808\ucf54\ub4dc {len(invalid)}\uac1c \ubc1c\uacac")\n        yield Output(invalid, output_name="invalid_records")\n'})}),"\n",(0,s.jsx)(e.h2,{id:"16-partitioned-assets",children:"1.6 Partitioned Assets"}),"\n",(0,s.jsx)(e.p,{children:"\ud30c\ud2f0\uc158\ub41c Asset\uc740 \ub370\uc774\ud130\ub97c \ub17c\ub9ac\uc801 \ub2e8\uc704(\uc2dc\uac04, \uc9c0\uc5ed \ub4f1)\ub85c \ubd84\ud560\ud558\uc5ec \uad00\ub9ac\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc99d\ubd84 \ucc98\ub9ac\uac00 \uac00\ub2a5\ud558\uace0 \ubc31\ud544(backfill)\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uc2dc\uac04-\uae30\ubc18-\ud30c\ud2f0\uc158-\uc77c\ubcc4",children:"\uc2dc\uac04 \uae30\ubc18 \ud30c\ud2f0\uc158 (\uc77c\ubcc4)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset, DailyPartitionsDefinition, AssetExecutionContext\nimport pandas as pd\nfrom datetime import datetime\n\ndaily_partitions = DailyPartitionsDefinition(start_date=\"2024-01-01\")\n\n@asset(partitions_def=daily_partitions)\ndef daily_sales(context: AssetExecutionContext) -> pd.DataFrame:\n    \"\"\"\n    \uc77c\ubcc4 \ud310\ub9e4 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n    \"\"\"\n    partition_date = context.partition_key\n    context.log.info(f\"\ucc98\ub9ac \uc911\uc778 \ub0a0\uc9dc: {partition_date}\")\n\n    # \ud2b9\uc815 \ub0a0\uc9dc\uc758 \ub370\uc774\ud130\ub9cc \ub85c\ub4dc\n    df = pd.DataFrame({\n        'date': [partition_date] * 3,\n        'product': ['A', 'B', 'C'],\n        'sales': [100, 200, 150]\n    })\n\n    return df\n\n@asset(partitions_def=daily_partitions)\ndef daily_sales_summary(\n    context: AssetExecutionContext,\n    daily_sales: pd.DataFrame\n) -> dict:\n    \"\"\"\n    \uc77c\ubcc4 \ud310\ub9e4 \uc694\uc57d\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    \"\"\"\n    partition_date = context.partition_key\n\n    summary = {\n        'date': partition_date,\n        'total_sales': daily_sales['sales'].sum(),\n        'product_count': len(daily_sales)\n    }\n\n    context.log.info(f\"{partition_date} \ucd1d \ub9e4\ucd9c: {summary['total_sales']}\")\n\n    return summary\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2dc\uac04-\uae30\ubc18-\ud30c\ud2f0\uc158-\uc2dc\uac04\ubcc4-\uc8fc\ubcc4-\uc6d4\ubcc4",children:"\uc2dc\uac04 \uae30\ubc18 \ud30c\ud2f0\uc158 (\uc2dc\uac04\ubcc4, \uc8fc\ubcc4, \uc6d4\ubcc4)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    HourlyPartitionsDefinition,\n    WeeklyPartitionsDefinition,\n    MonthlyPartitionsDefinition,\n    AssetExecutionContext\n)\nimport pandas as pd\n\n# \uc2dc\uac04\ubcc4 \ud30c\ud2f0\uc158\nhourly_partitions = HourlyPartitionsDefinition(start_date="2024-01-01-00:00")\n\n@asset(partitions_def=hourly_partitions)\ndef hourly_metrics(context: AssetExecutionContext) -> dict:\n    """\uc2dc\uac04\ubcc4 \uc9c0\ud45c"""\n    hour = context.partition_key\n    return {\'hour\': hour, \'requests\': 1000}\n\n# \uc8fc\ubcc4 \ud30c\ud2f0\uc158\nweekly_partitions = WeeklyPartitionsDefinition(start_date="2024-01-01")\n\n@asset(partitions_def=weekly_partitions)\ndef weekly_report(context: AssetExecutionContext) -> dict:\n    """\uc8fc\ubcc4 \ubcf4\uace0\uc11c"""\n    week = context.partition_key\n    return {\'week\': week, \'summary\': \'completed\'}\n\n# \uc6d4\ubcc4 \ud30c\ud2f0\uc158\nmonthly_partitions = MonthlyPartitionsDefinition(start_date="2024-01-01")\n\n@asset(partitions_def=monthly_partitions)\ndef monthly_aggregation(context: AssetExecutionContext) -> pd.DataFrame:\n    """\uc6d4\ubcc4 \uc9d1\uacc4"""\n    month = context.partition_key\n    context.log.info(f"\ucc98\ub9ac \uc911\uc778 \uc6d4: {month}")\n\n    return pd.DataFrame({\n        \'month\': [month],\n        \'total_revenue\': [100000],\n        \'customer_count\': [500]\n    })\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc815\uc801-\ud30c\ud2f0\uc158",children:"\uc815\uc801 \ud30c\ud2f0\uc158"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset, StaticPartitionsDefinition, AssetExecutionContext\nimport pandas as pd\n\n# \uc9c0\uc5ed\ubcc4 \ud30c\ud2f0\uc158\nregion_partitions = StaticPartitionsDefinition(\n    [\"us-east\", \"us-west\", \"eu-west\", \"ap-south\"]\n)\n\n@asset(partitions_def=region_partitions)\ndef regional_sales(context: AssetExecutionContext) -> pd.DataFrame:\n    \"\"\"\n    \uc9c0\uc5ed\ubcc4 \ud310\ub9e4 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n    \"\"\"\n    region = context.partition_key\n    context.log.info(f\"\ucc98\ub9ac \uc911\uc778 \uc9c0\uc5ed: {region}\")\n\n    # \uc9c0\uc5ed\ubcc4 \ub370\uc774\ud130 \ub85c\ub4dc\n    df = pd.DataFrame({\n        'region': [region] * 5,\n        'product': ['A', 'B', 'C', 'D', 'E'],\n        'sales': [100, 200, 150, 300, 250]\n    })\n\n    return df\n\n# \ud658\uacbd\ubcc4 \ud30c\ud2f0\uc158\nenv_partitions = StaticPartitionsDefinition([\"dev\", \"staging\", \"prod\"])\n\n@asset(partitions_def=env_partitions)\ndef deploy_config(context: AssetExecutionContext) -> dict:\n    \"\"\"\ud658\uacbd\ubcc4 \ubc30\ud3ec \uc124\uc815\"\"\"\n    env = context.partition_key\n\n    configs = {\n        'dev': {'replicas': 1, 'resources': 'small'},\n        'staging': {'replicas': 2, 'resources': 'medium'},\n        'prod': {'replicas': 5, 'resources': 'large'}\n    }\n\n    return configs[env]\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ub2e4\ucc28\uc6d0-\ud30c\ud2f0\uc158",children:"\ub2e4\ucc28\uc6d0 \ud30c\ud2f0\uc158"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    MultiPartitionsDefinition,\n    DailyPartitionsDefinition,\n    StaticPartitionsDefinition,\n    AssetExecutionContext\n)\nimport pandas as pd\n\n# \ub0a0\uc9dc x \uc9c0\uc5ed \ud30c\ud2f0\uc158\ndate_region_partitions = MultiPartitionsDefinition({\n    "date": DailyPartitionsDefinition(start_date="2024-01-01"),\n    "region": StaticPartitionsDefinition(["us", "eu", "asia"])\n})\n\n@asset(partitions_def=date_region_partitions)\ndef regional_daily_metrics(context: AssetExecutionContext) -> dict:\n    """\n    \uc9c0\uc5ed\ubcc4, \uc77c\ubcc4 \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    """\n    partition_key = context.partition_key\n    date = partition_key.keys_by_dimension["date"]\n    region = partition_key.keys_by_dimension["region"]\n\n    context.log.info(f"\ucc98\ub9ac \uc911: {date} / {region}")\n\n    return {\n        \'date\': date,\n        \'region\': region,\n        \'revenue\': 10000,\n        \'users\': 500\n    }\n\n@asset(partitions_def=date_region_partitions)\ndef regional_daily_summary(\n    context: AssetExecutionContext,\n    regional_daily_metrics: dict\n) -> dict:\n    """\uc9c0\uc5ed\ubcc4, \uc77c\ubcc4 \uc694\uc57d"""\n    partition_key = context.partition_key\n\n    return {\n        **regional_daily_metrics,\n        \'processed\': True,\n        \'partition\': str(partition_key)\n    }\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ud30c\ud2f0\uc158-\ub9e4\ud551",children:"\ud30c\ud2f0\uc158 \ub9e4\ud551"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    DailyPartitionsDefinition,\n    TimeWindowPartitionMapping,\n    AssetExecutionContext\n)\nimport pandas as pd\n\ndaily_partition = DailyPartitionsDefinition(start_date="2024-01-01")\n\n@asset(partitions_def=daily_partition)\ndef daily_events(context: AssetExecutionContext) -> pd.DataFrame:\n    """\uc77c\ubcc4 \uc774\ubca4\ud2b8 \ub370\uc774\ud130"""\n    date = context.partition_key\n    return pd.DataFrame({\n        \'date\': [date] * 10,\n        \'event\': [\'click\'] * 10,\n        \'count\': range(10)\n    })\n\n@asset(\n    partitions_def=daily_partition,\n    ins={\n        "daily_events": AssetIn(\n            partition_mapping=TimeWindowPartitionMapping(start_offset=-7, end_offset=0)\n        )\n    }\n)\ndef weekly_rolling_average(\n    context: AssetExecutionContext,\n    daily_events: pd.DataFrame\n) -> dict:\n    """\n    7\uc77c \uc774\ub3d9 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    \ud604\uc7ac \ud30c\ud2f0\uc158 \ub0a0\uc9dc\ub97c \ud3ec\ud568\ud55c \uc9c0\ub09c 7\uc77c\uc758 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n    """\n    date = context.partition_key\n    avg_events = daily_events.groupby(\'date\')[\'count\'].sum().mean()\n\n    context.log.info(f"{date} \uae30\uc900 7\uc77c \ud3c9\uade0: {avg_events}")\n\n    return {\n        \'date\': date,\n        \'rolling_avg_7d\': avg_events\n    }\n'})}),"\n",(0,s.jsx)(e.h2,{id:"17-dynamic-partitions",children:"1.7 Dynamic Partitions"}),"\n",(0,s.jsx)(e.p,{children:"Dynamic Partitions\ub294 \ub7f0\ud0c0\uc784\uc5d0 \ud30c\ud2f0\uc158\uc744 \ucd94\uac00\ud558\uac70\ub098 \uc81c\uac70\ud560 \uc218 \uc788\uc5b4, \ub3d9\uc801\uc73c\ub85c \ubcc0\ud558\ub294 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ucc98\ub9ac\ud558\ub294 \ub370 \uc720\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-dynamic-partitions",children:"\uae30\ubcf8 Dynamic Partitions"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    DynamicPartitionsDefinition,\n    AssetExecutionContext,\n    sensor,\n    RunRequest,\n    SensorEvaluationContext,\n    Definitions\n)\nimport pandas as pd\n\n# Dynamic \ud30c\ud2f0\uc158 \uc815\uc758\ncustomers_partitions = DynamicPartitionsDefinition(name="customers")\n\n@asset(partitions_def=customers_partitions)\ndef customer_data(context: AssetExecutionContext) -> pd.DataFrame:\n    """\n    \uace0\uac1d\ubcc4 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n    """\n    customer_id = context.partition_key\n    context.log.info(f"\ucc98\ub9ac \uc911\uc778 \uace0\uac1d: {customer_id}")\n\n    # \ud2b9\uc815 \uace0\uac1d\uc758 \ub370\uc774\ud130 \ub85c\ub4dc\n    df = pd.DataFrame({\n        \'customer_id\': [customer_id] * 5,\n        \'transaction_id\': range(1, 6),\n        \'amount\': [100, 200, 150, 300, 250]\n    })\n\n    return df\n\n@asset(partitions_def=customers_partitions)\ndef customer_metrics(\n    context: AssetExecutionContext,\n    customer_data: pd.DataFrame\n) -> dict:\n    """\uace0\uac1d\ubcc4 \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4."""\n    customer_id = context.partition_key\n\n    return {\n        \'customer_id\': customer_id,\n        \'total_spent\': customer_data[\'amount\'].sum(),\n        \'transaction_count\': len(customer_data)\n    }\n\n# \uc0c8 \uace0\uac1d \uac10\uc9c0 \ubc0f \ud30c\ud2f0\uc158 \ucd94\uac00 \uc13c\uc11c\n@sensor(\n    name="new_customer_sensor",\n    minimum_interval_seconds=60\n)\ndef detect_new_customers(context: SensorEvaluationContext):\n    """\n    \uc0c8 \uace0\uac1d\uc744 \uac10\uc9c0\ud558\uace0 \ub3d9\uc801 \ud30c\ud2f0\uc158\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n    """\n    # \uc0c8 \uace0\uac1d ID \ubaa9\ub85d (\uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc870\ud68c)\n    new_customers = ["customer_123", "customer_124", "customer_125"]\n\n    # \uae30\uc874 \ud30c\ud2f0\uc158 \uc870\ud68c\n    existing_partitions = context.instance.get_dynamic_partitions(\n        partitions_def_name="customers"\n    )\n\n    # \uc0c8 \ud30c\ud2f0\uc158\ub9cc \ucd94\uac00\n    customers_to_add = [\n        c for c in new_customers\n        if c not in existing_partitions\n    ]\n\n    if customers_to_add:\n        # \ud30c\ud2f0\uc158 \ucd94\uac00\n        context.instance.add_dynamic_partitions(\n            partitions_def_name="customers",\n            partition_keys=customers_to_add\n        )\n\n        context.log.info(f"\uc0c8 \uace0\uac1d \ud30c\ud2f0\uc158 \ucd94\uac00: {customers_to_add}")\n\n        # \uc0c8 \ud30c\ud2f0\uc158\uc5d0 \ub300\ud55c \uc2e4\ud589 \uc694\uccad\n        for customer_id in customers_to_add:\n            yield RunRequest(\n                partition_key=customer_id,\n                tags={"customer_id": customer_id}\n            )\n'})}),"\n",(0,s.jsx)(e.h3,{id:"dynamic-partitions-\uad00\ub9ac",children:"Dynamic Partitions \uad00\ub9ac"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    DynamicPartitionsDefinition,\n    AssetExecutionContext,\n    op,\n    job\n)\n\nprojects_partitions = DynamicPartitionsDefinition(name="projects")\n\n@asset(partitions_def=projects_partitions)\ndef project_analysis(context: AssetExecutionContext) -> dict:\n    """\ud504\ub85c\uc81d\ud2b8\ubcc4 \ubd84\uc11d"""\n    project_id = context.partition_key\n\n    return {\n        \'project_id\': project_id,\n        \'status\': \'analyzed\',\n        \'score\': 85.5\n    }\n\n# \ud30c\ud2f0\uc158 \ucd94\uac00 \uc791\uc5c5\n@op\ndef add_project_partitions(context):\n    """\uc0c8 \ud504\ub85c\uc81d\ud2b8\ub97c \ud30c\ud2f0\uc158\uc73c\ub85c \ucd94\uac00"""\n    new_projects = ["project_001", "project_002", "project_003"]\n\n    context.instance.add_dynamic_partitions(\n        partitions_def_name="projects",\n        partition_keys=new_projects\n    )\n\n    context.log.info(f"{len(new_projects)}\uac1c \ud504\ub85c\uc81d\ud2b8 \ud30c\ud2f0\uc158 \ucd94\uac00")\n    return new_projects\n\n# \ud30c\ud2f0\uc158 \uc81c\uac70 \uc791\uc5c5\n@op\ndef remove_completed_projects(context):\n    """\uc644\ub8cc\ub41c \ud504\ub85c\uc81d\ud2b8 \ud30c\ud2f0\uc158 \uc81c\uac70"""\n    completed_projects = ["project_000"]  # \uc644\ub8cc\ub41c \ud504\ub85c\uc81d\ud2b8\n\n    context.instance.delete_dynamic_partitions(\n        partitions_def_name="projects",\n        partition_keys=completed_projects\n    )\n\n    context.log.info(f"{len(completed_projects)}\uac1c \ud504\ub85c\uc81d\ud2b8 \ud30c\ud2f0\uc158 \uc81c\uac70")\n\n@job\ndef manage_project_partitions():\n    """\ud504\ub85c\uc81d\ud2b8 \ud30c\ud2f0\uc158 \uad00\ub9ac \uc791\uc5c5"""\n    add_project_partitions()\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc870\uac74\ubd80-dynamic-partitions",children:"\uc870\uac74\ubd80 Dynamic Partitions"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    DynamicPartitionsDefinition,\n    AssetExecutionContext,\n    sensor,\n    RunRequest,\n    SkipReason,\n    SensorEvaluationContext\n)\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\n# \ud65c\uc131 \ucea0\ud398\uc778 \ud30c\ud2f0\uc158\ncampaigns_partitions = DynamicPartitionsDefinition(name="active_campaigns")\n\n@asset(partitions_def=campaigns_partitions)\ndef campaign_performance(context: AssetExecutionContext) -> dict:\n    """\ucea0\ud398\uc778 \uc131\uacfc\ub97c \ubd84\uc11d\ud569\ub2c8\ub2e4."""\n    campaign_id = context.partition_key\n\n    # \ucea0\ud398\uc778 \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \ubd84\uc11d\n    performance = {\n        \'campaign_id\': campaign_id,\n        \'impressions\': 10000,\n        \'clicks\': 500,\n        \'conversions\': 50,\n        \'ctr\': 5.0,\n        \'conversion_rate\': 10.0\n    }\n\n    context.log.info(f"\ucea0\ud398\uc778 {campaign_id} \ubd84\uc11d \uc644\ub8cc")\n\n    return performance\n\n@sensor(\n    name="campaign_lifecycle_sensor",\n    minimum_interval_seconds=3600  # 1\uc2dc\uac04\ub9c8\ub2e4 \uccb4\ud06c\n)\ndef manage_campaign_partitions(context: SensorEvaluationContext):\n    """\n    \ud65c\uc131 \ucea0\ud398\uc778\uc744 \uac10\uc9c0\ud558\uace0, \uc885\ub8cc\ub41c \ucea0\ud398\uc778\uc740 \uc81c\uac70\ud569\ub2c8\ub2e4.\n    """\n    # \ud65c\uc131 \ucea0\ud398\uc778 \uc870\ud68c (\uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4/API\uc5d0\uc11c)\n    active_campaigns = get_active_campaigns()\n    ended_campaigns = get_ended_campaigns()\n\n    existing_partitions = set(context.instance.get_dynamic_partitions(\n        partitions_def_name="active_campaigns"\n    ))\n\n    # \uc0c8 \ucea0\ud398\uc778 \ucd94\uac00\n    new_campaigns = set(active_campaigns) - existing_partitions\n    if new_campaigns:\n        context.instance.add_dynamic_partitions(\n            partitions_def_name="active_campaigns",\n            partition_keys=list(new_campaigns)\n        )\n        context.log.info(f"\uc0c8 \ucea0\ud398\uc778 \ucd94\uac00: {new_campaigns}")\n\n    # \uc885\ub8cc\ub41c \ucea0\ud398\uc778 \uc81c\uac70\n    to_remove = set(ended_campaigns) & existing_partitions\n    if to_remove:\n        context.instance.delete_dynamic_partitions(\n            partitions_def_name="active_campaigns",\n            partition_keys=list(to_remove)\n        )\n        context.log.info(f"\uc885\ub8cc\ub41c \ucea0\ud398\uc778 \uc81c\uac70: {to_remove}")\n\n    # \uc0c8 \ucea0\ud398\uc778\uc5d0 \ub300\ud55c \uc2e4\ud589 \uc694\uccad\n    if new_campaigns:\n        for campaign_id in new_campaigns:\n            yield RunRequest(\n                partition_key=campaign_id,\n                tags={"campaign_id": campaign_id}\n            )\n    else:\n        yield SkipReason("\uc0c8 \ucea0\ud398\uc778 \uc5c6\uc74c")\n\ndef get_active_campaigns():\n    """\ud65c\uc131 \ucea0\ud398\uc778 \ubaa9\ub85d \ubc18\ud658 (\uc608\uc2dc)"""\n    return ["campaign_001", "campaign_002", "campaign_003"]\n\ndef get_ended_campaigns():\n    """\uc885\ub8cc\ub41c \ucea0\ud398\uc778 \ubaa9\ub85d \ubc18\ud658 (\uc608\uc2dc)"""\n    return ["campaign_000"]\n'})}),"\n",(0,s.jsx)(e.h2,{id:"18-asset-checks",children:"1.8 Asset Checks"}),"\n",(0,s.jsx)(e.p,{children:"Asset Checks\ub294 Asset\uc758 \ub370\uc774\ud130 \ud488\uc9c8\uacfc \ubb34\uacb0\uc131\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4. Asset\uc774 \uc0dd\uc131\ub41c \ud6c4 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ub418\uc5b4 \ub370\uc774\ud130 \ud488\uc9c8\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-asset-check",children:"\uae30\ubcf8 Asset Check"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, asset_check, AssetCheckResult, AssetExecutionContext\nimport pandas as pd\n\n@asset\ndef sales_data(context: AssetExecutionContext) -> pd.DataFrame:\n    """\ud310\ub9e4 \ub370\uc774\ud130"""\n    df = pd.DataFrame({\n        \'date\': [\'2024-01-01\', \'2024-01-02\', \'2024-01-03\'],\n        \'revenue\': [1000, 1500, 2000],\n        \'orders\': [10, 15, 20]\n    })\n\n    context.log.info(f"\ud310\ub9e4 \ub370\uc774\ud130 \ub85c\ub4dc: {len(df)} \ud589")\n    return df\n\n@asset_check(asset=sales_data)\ndef check_revenue_positive(context: AssetExecutionContext, sales_data: pd.DataFrame):\n    """\n    \ubaa8\ub4e0 \ub9e4\ucd9c \uac12\uc774 \uc591\uc218\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n    """\n    negative_revenues = sales_data[sales_data[\'revenue\'] < 0]\n\n    if len(negative_revenues) > 0:\n        return AssetCheckResult(\n            passed=False,\n            description=f"\uc74c\uc218 \ub9e4\ucd9c \ubc1c\uacac: {len(negative_revenues)}\uac74",\n            metadata={\n                "negative_count": len(negative_revenues),\n                "affected_dates": negative_revenues[\'date\'].tolist()\n            }\n        )\n\n    return AssetCheckResult(\n        passed=True,\n        description="\ubaa8\ub4e0 \ub9e4\ucd9c \uac12\uc774 \uc591\uc218\uc785\ub2c8\ub2e4.",\n        metadata={\n            "total_records": len(sales_data),\n            "min_revenue": float(sales_data[\'revenue\'].min()),\n            "max_revenue": float(sales_data[\'revenue\'].max())\n        }\n    )\n\n@asset_check(asset=sales_data)\ndef check_no_missing_dates(context: AssetExecutionContext, sales_data: pd.DataFrame):\n    """\n    \ub0a0\uc9dc\uc5d0 \ub204\ub77d\uc774 \uc5c6\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n    """\n    sales_data[\'date\'] = pd.to_datetime(sales_data[\'date\'])\n    date_range = pd.date_range(\n        start=sales_data[\'date\'].min(),\n        end=sales_data[\'date\'].max(),\n        freq=\'D\'\n    )\n\n    missing_dates = set(date_range) - set(sales_data[\'date\'])\n\n    if missing_dates:\n        return AssetCheckResult(\n            passed=False,\n            description=f"\ub204\ub77d\ub41c \ub0a0\uc9dc: {len(missing_dates)}\uc77c",\n            metadata={\n                "missing_dates": [d.strftime(\'%Y-%m-%d\') for d in missing_dates]\n            }\n        )\n\n    return AssetCheckResult(\n        passed=True,\n        description="\ub0a0\uc9dc\uc5d0 \ub204\ub77d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4."\n    )\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ub2e4\uc911-asset-checks",children:"\ub2e4\uc911 Asset Checks"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, asset_check, AssetCheckResult, AssetCheckSeverity\nimport pandas as pd\n\n@asset\ndef customer_data() -> pd.DataFrame:\n    """\uace0\uac1d \ub370\uc774\ud130"""\n    return pd.DataFrame({\n        \'customer_id\': [1, 2, 3, 4],\n        \'email\': [\'a@test.com\', \'b@test.com\', None, \'d@test.com\'],\n        \'age\': [25, 30, 35, 150],  # \ube44\uc815\uc0c1 \ub098\uc774\n        \'revenue\': [1000, 2000, 1500, 3000]\n    })\n\n@asset_check(asset=customer_data, description="\uc774\uba54\uc77c \ud544\ub4dc \uac80\uc99d")\ndef check_email_not_null(customer_data: pd.DataFrame):\n    """\uc774\uba54\uc77c\uc774 null\uc774 \uc544\ub2cc\uc9c0 \ud655\uc778"""\n    null_emails = customer_data[\'email\'].isnull().sum()\n\n    return AssetCheckResult(\n        passed=null_emails == 0,\n        description=f"Null \uc774\uba54\uc77c: {null_emails}\uac74",\n        metadata={"null_count": int(null_emails)}\n    )\n\n@asset_check(asset=customer_data, description="\ub098\uc774 \ubc94\uc704 \uac80\uc99d")\ndef check_age_range(customer_data: pd.DataFrame):\n    """\ub098\uc774\uac00 \uc720\ud6a8\ud55c \ubc94\uc704\uc778\uc9c0 \ud655\uc778"""\n    invalid_ages = customer_data[\n        (customer_data[\'age\'] < 0) | (customer_data[\'age\'] > 120)\n    ]\n\n    return AssetCheckResult(\n        passed=len(invalid_ages) == 0,\n        description=f"\ube44\uc815\uc0c1 \ub098\uc774: {len(invalid_ages)}\uac74",\n        severity=AssetCheckSeverity.WARN,  # \uacbd\uace0 \uc218\uc900\n        metadata={\n            "invalid_count": len(invalid_ages),\n            "invalid_ages": invalid_ages[\'age\'].tolist()\n        }\n    )\n\n@asset_check(asset=customer_data, description="\uace0\uc720 ID \uac80\uc99d")\ndef check_unique_customer_ids(customer_data: pd.DataFrame):\n    """\uace0\uac1d ID\uac00 \uace0\uc720\ud55c\uc9c0 \ud655\uc778"""\n    duplicates = customer_data[\'customer_id\'].duplicated().sum()\n\n    return AssetCheckResult(\n        passed=duplicates == 0,\n        description=f"\uc911\ubcf5 ID: {duplicates}\uac74",\n        severity=AssetCheckSeverity.ERROR,  # \uc5d0\ub7ec \uc218\uc900\n        metadata={"duplicate_count": int(duplicates)}\n    )\n\n@asset_check(asset=customer_data, description="\ub9e4\ucd9c \uc77c\uad00\uc131 \uac80\uc99d")\ndef check_revenue_consistency(customer_data: pd.DataFrame):\n    """\ub9e4\ucd9c \ub370\uc774\ud130\uc758 \uc77c\uad00\uc131 \ud655\uc778"""\n    mean_revenue = customer_data[\'revenue\'].mean()\n    std_revenue = customer_data[\'revenue\'].std()\n\n    # \ud3c9\uade0\uc5d0\uc11c 3 \ud45c\uc900\ud3b8\ucc28 \uc774\uc0c1 \ubc97\uc5b4\ub09c \uac12 \ucc3e\uae30\n    outliers = customer_data[\n        abs(customer_data[\'revenue\'] - mean_revenue) > 3 * std_revenue\n    ]\n\n    return AssetCheckResult(\n        passed=len(outliers) == 0,\n        description=f"\uc774\uc0c1\uce58: {len(outliers)}\uac74",\n        severity=AssetCheckSeverity.WARN,\n        metadata={\n            "outlier_count": len(outliers),\n            "mean_revenue": float(mean_revenue),\n            "std_revenue": float(std_revenue)\n        }\n    )\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc870\uac74\ubd80-asset-checks",children:"\uc870\uac74\ubd80 Asset Checks"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, asset_check, AssetCheckResult, AssetExecutionContext\nimport pandas as pd\nfrom datetime import datetime\n\n@asset\ndef daily_transactions(context: AssetExecutionContext) -> pd.DataFrame:\n    """\uc77c\ubcc4 \uac70\ub798 \ub370\uc774\ud130"""\n    return pd.DataFrame({\n        \'date\': [\'2024-01-01\', \'2024-01-02\'],\n        \'transaction_count\': [100, 150],\n        \'total_amount\': [10000, 15000]\n    })\n\n@asset_check(asset=daily_transactions, description="\ube44\uc988\ub2c8\uc2a4 \uc2dc\uac04\ub300 \ub370\uc774\ud130 \uac80\uc99d")\ndef check_business_hours_data(\n    context: AssetExecutionContext,\n    daily_transactions: pd.DataFrame\n):\n    """\n    \ube44\uc988\ub2c8\uc2a4 \uc2dc\uac04\ub300(\uc6d4-\uae08)\uc5d0\ub9cc \ud2b9\uc815 \uac80\uc99d\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\n    """\n    current_day = datetime.now().weekday()  # 0 = \uc6d4\uc694\uc77c, 6 = \uc77c\uc694\uc77c\n\n    # \uc8fc\ub9d0\uc5d0\ub294 \uac80\uc0ac \uc2a4\ud0b5\n    if current_day >= 5:\n        return AssetCheckResult(\n            passed=True,\n            description="\uc8fc\ub9d0: \uac80\uc0ac \uc2a4\ud0b5\ub428"\n        )\n\n    # \ube44\uc988\ub2c8\uc2a4 \uc2dc\uac04\ub300 \uac80\uc99d\n    min_expected_transactions = 50\n    actual_transactions = daily_transactions[\'transaction_count\'].min()\n\n    passed = actual_transactions >= min_expected_transactions\n\n    return AssetCheckResult(\n        passed=passed,\n        description=f"\ucd5c\uc18c \uac70\ub798 \uc218 \uac80\uc99d: {actual_transactions} >= {min_expected_transactions}",\n        metadata={\n            "min_transactions": int(actual_transactions),\n            "threshold": min_expected_transactions\n        }\n    )\n\n@asset_check(asset=daily_transactions, description="\uc99d\uac10 \ucd94\uc138 \uac80\uc99d")\ndef check_transaction_trend(\n    context: AssetExecutionContext,\n    daily_transactions: pd.DataFrame\n):\n    """\n    \uac70\ub798\ub7c9\uc774 \uae09\uaca9\ud788 \uac10\uc18c\ud558\uc9c0 \uc54a\uc558\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n    """\n    if len(daily_transactions) < 2:\n        return AssetCheckResult(\n            passed=True,\n            description="\ub370\uc774\ud130 \ubd80\uc871: \ucd94\uc138 \uac80\uc99d \ubd88\uac00"\n        )\n\n    # \ucd5c\uadfc 2\uc77c \ube44\uad50\n    latest = daily_transactions.iloc[-1][\'transaction_count\']\n    previous = daily_transactions.iloc[-2][\'transaction_count\']\n\n    decrease_pct = ((previous - latest) / previous) * 100 if previous > 0 else 0\n\n    # 30% \uc774\uc0c1 \uac10\uc18c \uc2dc \uacbd\uace0\n    threshold = 30\n    passed = decrease_pct < threshold\n\n    return AssetCheckResult(\n        passed=passed,\n        description=f"\uac70\ub798\ub7c9 \ubcc0\ud654: {decrease_pct:.2f}%",\n        severity=AssetCheckSeverity.WARN if not passed else AssetCheckSeverity.INFO,\n        metadata={\n            "latest_count": int(latest),\n            "previous_count": int(previous),\n            "decrease_percentage": float(decrease_pct),\n            "threshold": threshold\n        }\n    )\n'})}),"\n",(0,s.jsx)(e.h2,{id:"19-asset-metadata",children:"1.9 Asset Metadata"}),"\n",(0,s.jsx)(e.p,{children:"Asset Metadata\ub294 Asset\uc5d0 \ub300\ud55c \ucd94\uac00 \uc815\ubcf4\ub97c \uc81c\uacf5\ud558\uc5ec \ubb38\uc11c\ud654, \ubaa8\ub2c8\ud130\ub9c1, \ub514\ubc84\uae45\uc744 \uc6a9\uc774\ud558\uac8c \ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uc815\uc801-\uba54\ud0c0\ub370\uc774\ud130",children:"\uc815\uc801 \uba54\ud0c0\ub370\uc774\ud130"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetExecutionContext, MetadataValue\nimport pandas as pd\n\n@asset(\n    metadata={\n        # \ubb38\uc790\uc5f4 \uba54\ud0c0\ub370\uc774\ud130\n        "owner": "data-engineering-team",\n        "tier": "gold",\n        "sla": "24h",\n\n        # \uc22b\uc790 \uba54\ud0c0\ub370\uc774\ud130\n        "priority": MetadataValue.int(1),\n\n        # URL \uba54\ud0c0\ub370\uc774\ud130\n        "documentation": MetadataValue.url("https://docs.example.com/sales"),\n        "dashboard": MetadataValue.url("https://dashboard.example.com/sales"),\n\n        # \ud14c\uc774\ube14 \uba54\ud0c0\ub370\uc774\ud130\n        "schema": MetadataValue.table_schema(\n            schema={\n                "columns": [\n                    {"name": "date", "type": "date"},\n                    {"name": "revenue", "type": "float"},\n                    {"name": "orders", "type": "int"}\n                ]\n            }\n        ),\n\n        # \ub9c8\ud06c\ub2e4\uc6b4 \uba54\ud0c0\ub370\uc774\ud130\n        "description": MetadataValue.md(\n            """\n            # Sales Data Asset\n\n            This asset contains daily sales data including:\n            - Revenue\n            - Order count\n            - Customer metrics\n\n            **Update Frequency**: Daily at 2 AM UTC\n            """\n        )\n    }\n)\ndef sales_data(context: AssetExecutionContext) -> pd.DataFrame:\n    """\ud310\ub9e4 \ub370\uc774\ud130"""\n    return pd.DataFrame({\n        \'date\': [\'2024-01-01\', \'2024-01-02\'],\n        \'revenue\': [10000, 15000],\n        \'orders\': [100, 150]\n    })\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ub3d9\uc801-\uba54\ud0c0\ub370\uc774\ud130",children:"\ub3d9\uc801 \uba54\ud0c0\ub370\uc774\ud130"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset, Output, AssetExecutionContext, MetadataValue\nimport pandas as pd\nimport json\n\n@asset\ndef dynamic_metadata_example(context: AssetExecutionContext) -> Output[pd.DataFrame]:\n    \"\"\"\n    \uc2e4\ud589 \uc2dc\uc810\uc5d0 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    \"\"\"\n    # \ub370\uc774\ud130 \uc0dd\uc131\n    df = pd.DataFrame({\n        'product_id': range(1, 101),\n        'sales': [100 + i * 10 for i in range(100)],\n        'category': ['A' if i % 2 == 0 else 'B' for i in range(100)]\n    })\n\n    # \ud1b5\uacc4 \uacc4\uc0b0\n    stats = {\n        'row_count': len(df),\n        'total_sales': df['sales'].sum(),\n        'avg_sales': df['sales'].mean(),\n        'category_counts': df['category'].value_counts().to_dict()\n    }\n\n    # \uce74\ud14c\uace0\ub9ac\ubcc4 \ubd84\uc11d\n    category_analysis = df.groupby('category')['sales'].agg(['sum', 'mean', 'count'])\n\n    return Output(\n        value=df,\n        metadata={\n            # \ud589 \uc218\n            \"row_count\": MetadataValue.int(len(df)),\n\n            # \ud1b5\uacc4\n            \"total_sales\": MetadataValue.float(stats['total_sales']),\n            \"avg_sales\": MetadataValue.float(stats['avg_sales']),\n\n            # JSON \uba54\ud0c0\ub370\uc774\ud130\n            \"statistics\": MetadataValue.json(stats),\n\n            # \ud14c\uc774\ube14 \uba54\ud0c0\ub370\uc774\ud130\n            \"category_breakdown\": MetadataValue.md(\n                category_analysis.to_markdown()\n            ),\n\n            # \uacbd\ub85c \uba54\ud0c0\ub370\uc774\ud130\n            \"output_path\": MetadataValue.path(\"/data/output/sales.csv\"),\n\n            # \ud14d\uc2a4\ud2b8 \uba54\ud0c0\ub370\uc774\ud130\n            \"processing_notes\": MetadataValue.text(\n                f\"Processed {len(df)} records at {context.run.run_id}\"\n            )\n        }\n    )\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2dc\uac01\ud654-\uba54\ud0c0\ub370\uc774\ud130",children:"\uc2dc\uac01\ud654 \uba54\ud0c0\ub370\uc774\ud130"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset, Output, MetadataValue\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport io\nimport base64\n\n@asset\ndef sales_visualization() -> Output[pd.DataFrame]:\n    \"\"\"\n    \ub370\uc774\ud130\uc640 \ud568\uaed8 \uc2dc\uac01\ud654\ub97c \uba54\ud0c0\ub370\uc774\ud130\ub85c \ucca8\ubd80\ud569\ub2c8\ub2e4.\n    \"\"\"\n    # \ub370\uc774\ud130 \uc0dd\uc131\n    df = pd.DataFrame({\n        'month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n        'sales': [10000, 12000, 15000, 13000, 16000]\n    })\n\n    # \ucc28\ud2b8 \uc0dd\uc131\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df['month'], df['sales'], marker='o')\n    ax.set_title('Monthly Sales Trend')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Sales ($)')\n    ax.grid(True)\n\n    # \uc774\ubbf8\uc9c0\ub97c \ubc14\uc774\ud2b8\ub85c \ubcc0\ud658\n    buf = io.BytesIO()\n    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')\n    buf.seek(0)\n    plt.close()\n\n    # Base64 \uc778\ucf54\ub529\n    image_data = base64.b64encode(buf.read()).decode()\n\n    return Output(\n        value=df,\n        metadata={\n            \"row_count\": len(df),\n            \"total_sales\": df['sales'].sum(),\n            # \ub9c8\ud06c\ub2e4\uc6b4\uc5d0 \uc774\ubbf8\uc9c0 \uc784\ubca0\ub529\n            \"sales_chart\": MetadataValue.md(\n                f\"![Sales Chart](data:image/png;base64,{image_data})\"\n            ),\n            # \uc694\uc57d \ud14c\uc774\ube14\n            \"summary\": MetadataValue.md(df.to_markdown(index=False))\n        }\n    )\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ub370\uc774\ud130-\ud488\uc9c8-\uba54\ud0c0\ub370\uc774\ud130",children:"\ub370\uc774\ud130 \ud488\uc9c8 \uba54\ud0c0\ub370\uc774\ud130"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, Output, MetadataValue, AssetExecutionContext\nimport pandas as pd\nimport numpy as np\n\n@asset\ndef quality_checked_data(context: AssetExecutionContext) -> Output[pd.DataFrame]:\n    """\n    \ub370\uc774\ud130 \ud488\uc9c8 \uc9c0\ud45c\ub97c \uba54\ud0c0\ub370\uc774\ud130\ub85c \uae30\ub85d\ud569\ub2c8\ub2e4.\n    """\n    # \ub370\uc774\ud130 \uc0dd\uc131 (\uc77c\ubd80 \ud488\uc9c8 \uc774\uc288 \ud3ec\ud568)\n    df = pd.DataFrame({\n        \'id\': range(1, 1001),\n        \'value\': np.random.randn(1000),\n        \'category\': np.random.choice([\'A\', \'B\', \'C\', None], 1000),\n        \'amount\': np.random.uniform(-100, 1000, 1000)  # \uc74c\uc218 \ud3ec\ud568\n    })\n\n    # \ud488\uc9c8 \uac80\uc0ac\n    null_counts = df.isnull().sum()\n    duplicate_count = df.duplicated(subset=[\'id\']).sum()\n    negative_amounts = (df[\'amount\'] < 0).sum()\n\n    # \uc774\uc0c1\uce58 \ud0d0\uc9c0 (IQR \ubc29\ubc95)\n    Q1 = df[\'value\'].quantile(0.25)\n    Q3 = df[\'value\'].quantile(0.75)\n    IQR = Q3 - Q1\n    outliers = ((df[\'value\'] < (Q1 - 1.5 * IQR)) | (df[\'value\'] > (Q3 + 1.5 * IQR))).sum()\n\n    # \ud488\uc9c8 \ubcf4\uace0\uc11c\n    quality_report = {\n        "total_records": len(df),\n        "null_counts": null_counts.to_dict(),\n        "duplicate_ids": int(duplicate_count),\n        "negative_amounts": int(negative_amounts),\n        "outliers": int(outliers),\n        "completeness_pct": float((1 - null_counts.sum() / (len(df) * len(df.columns))) * 100)\n    }\n\n    # \ud488\uc9c8 \uc810\uc218 \uacc4\uc0b0 (0-100)\n    quality_score = 100\n    quality_score -= (null_counts.sum() / len(df)) * 10\n    quality_score -= (duplicate_count / len(df)) * 20\n    quality_score -= (outliers / len(df)) * 10\n    quality_score = max(0, quality_score)\n\n    context.log.info(f"\ub370\uc774\ud130 \ud488\uc9c8 \uc810\uc218: {quality_score:.2f}/100")\n\n    return Output(\n        value=df,\n        metadata={\n            # \ud488\uc9c8 \uc810\uc218\n            "quality_score": MetadataValue.float(quality_score),\n\n            # \uc0c1\uc138 \ud488\uc9c8 \ubcf4\uace0\uc11c\n            "quality_report": MetadataValue.json(quality_report),\n\n            # Null \uac12 \uc694\uc57d\n            "null_summary": MetadataValue.md(\n                f"""\n                ### Null Values\n                - category: {null_counts[\'category\']} ({null_counts[\'category\']/len(df)*100:.2f}%)\n                """\n            ),\n\n            # \ub370\uc774\ud130 \ud504\ub85c\ud30c\uc77c\n            "data_profile": MetadataValue.json({\n                "value_stats": {\n                    "mean": float(df[\'value\'].mean()),\n                    "std": float(df[\'value\'].std()),\n                    "min": float(df[\'value\'].min()),\n                    "max": float(df[\'value\'].max())\n                },\n                "amount_stats": {\n                    "mean": float(df[\'amount\'].mean()),\n                    "median": float(df[\'amount\'].median()),\n                    "negative_count": int(negative_amounts)\n                }\n            }),\n\n            # \uacbd\uace0 \uba54\uc2dc\uc9c0\n            "warnings": MetadataValue.text(\n                f"\u26a0 {negative_amounts} negative amounts found\\n"\n                f"\u26a0 {outliers} outliers detected\\n"\n                f"\u26a0 {null_counts[\'category\']} missing categories"\n            )\n        }\n    )\n'})}),"\n",(0,s.jsx)(e.h2,{id:"110-asset-selection",children:"1.10 Asset Selection"}),"\n",(0,s.jsx)(e.p,{children:"Asset Selection\uc740 \ud2b9\uc815 Asset\ub4e4\uc744 \uc120\ud0dd\ud558\uc5ec \uc2e4\ud589\ud558\uac70\ub098 Job\uc744 \uc815\uc758\ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(e.h3,{id:"\uae30\ubcf8-\uc120\ud0dd-\ubc29\ubc95",children:"\uae30\ubcf8 \uc120\ud0dd \ubc29\ubc95"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetSelection, define_asset_job, Definitions\nimport pandas as pd\n\n# Assets \uc815\uc758\n@asset(group_name="raw")\ndef raw_customers() -> pd.DataFrame:\n    return pd.DataFrame({\'id\': [1, 2, 3]})\n\n@asset(group_name="raw")\ndef raw_orders() -> pd.DataFrame:\n    return pd.DataFrame({\'order_id\': [101, 102]})\n\n@asset(group_name="processed")\ndef processed_customers(raw_customers: pd.DataFrame) -> pd.DataFrame:\n    return raw_customers.copy()\n\n@asset(group_name="processed")\ndef processed_orders(raw_orders: pd.DataFrame) -> pd.DataFrame:\n    return raw_orders.copy()\n\n@asset(group_name="analytics")\ndef customer_analytics(processed_customers: pd.DataFrame) -> dict:\n    return {\'count\': len(processed_customers)}\n\n# \uc120\ud0dd \ubc29\ubc95\ub4e4\n\n# 1. \ud2b9\uc815 Asset \uc120\ud0dd\nsingle_asset_job = define_asset_job(\n    name="single_asset",\n    selection=AssetSelection.assets(raw_customers)\n)\n\n# 2. \uc5ec\ub7ec Asset \uc120\ud0dd\nmultiple_assets_job = define_asset_job(\n    name="multiple_assets",\n    selection=AssetSelection.assets(raw_customers, raw_orders)\n)\n\n# 3. \uadf8\ub8f9\ubcc4 \uc120\ud0dd\nraw_data_job = define_asset_job(\n    name="raw_data",\n    selection=AssetSelection.groups("raw")\n)\n\n# 4. \uc5ec\ub7ec \uadf8\ub8f9 \uc120\ud0dd\nraw_and_processed_job = define_asset_job(\n    name="raw_and_processed",\n    selection=AssetSelection.groups("raw", "processed")\n)\n\n# 5. \ubaa8\ub4e0 Asset \uc120\ud0dd\nall_assets_job = define_asset_job(\n    name="all_assets",\n    selection=AssetSelection.all()\n)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uace0\uae09-\uc120\ud0dd-\ud328\ud134",children:"\uace0\uae09 \uc120\ud0dd \ud328\ud134"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetSelection, define_asset_job\nimport pandas as pd\n\n@asset(group_name="ingestion", key_prefix=["raw", "sales"])\ndef daily_sales() -> pd.DataFrame:\n    return pd.DataFrame({\'sales\': [100, 200]})\n\n@asset(group_name="ingestion", key_prefix=["raw", "marketing"])\ndef campaign_data() -> pd.DataFrame:\n    return pd.DataFrame({\'campaign\': [\'A\', \'B\']})\n\n@asset(group_name="transformation", key_prefix=["processed", "sales"])\ndef clean_sales(daily_sales: pd.DataFrame) -> pd.DataFrame:\n    return daily_sales.copy()\n\n@asset(group_name="transformation", key_prefix=["processed", "marketing"])\ndef clean_campaigns(campaign_data: pd.DataFrame) -> pd.DataFrame:\n    return campaign_data.copy()\n\n@asset(group_name="analytics")\ndef sales_analysis(clean_sales: pd.DataFrame) -> dict:\n    return {\'total\': clean_sales[\'sales\'].sum()}\n\n@asset(group_name="analytics")\ndef marketing_analysis(clean_campaigns: pd.DataFrame) -> dict:\n    return {\'campaigns\': len(clean_campaigns)}\n\n@asset(group_name="reporting")\ndef final_report(sales_analysis: dict, marketing_analysis: dict) -> dict:\n    return {**sales_analysis, **marketing_analysis}\n\n# 1. \ud0a4 \uc811\ub450\uc0ac\ub85c \uc120\ud0dd\nsales_pipeline = define_asset_job(\n    name="sales_pipeline",\n    selection=AssetSelection.key_prefixes(["raw", "sales"]) |\n              AssetSelection.key_prefixes(["processed", "sales"])\n)\n\n# 2. \uc0c1\uc704/\ud558\uc704 \uc758\uc874\uc131 \uc120\ud0dd\n# daily_sales\uc640 \uadf8 \ud558\uc704 \ubaa8\ub4e0 Asset\ndownstream_sales = define_asset_job(\n    name="downstream_sales",\n    selection=AssetSelection.assets(daily_sales).downstream()\n)\n\n# sales_analysis\uc640 \uadf8 \uc0c1\uc704 \ubaa8\ub4e0 Asset\nupstream_analytics = define_asset_job(\n    name="upstream_analytics",\n    selection=AssetSelection.assets(sales_analysis).upstream()\n)\n\n# 3. \uc870\ud569 \uc120\ud0dd (AND, OR, NOT)\n# raw \uadf8\ub8f9 \ub610\ub294 transformation \uadf8\ub8f9\nraw_or_transform = define_asset_job(\n    name="raw_or_transform",\n    selection=AssetSelection.groups("ingestion") | AssetSelection.groups("transformation")\n)\n\n# raw \uadf8\ub8f9\uc774\uc9c0\ub9cc marketing \uc81c\uc678\nraw_except_marketing = define_asset_job(\n    name="raw_except_marketing",\n    selection=AssetSelection.groups("ingestion") -\n              AssetSelection.key_prefixes(["raw", "marketing"])\n)\n\n# 4. \ud0dc\uadf8 \uae30\ubc18 \uc120\ud0dd (\ud0dc\uadf8\uac00 \uc788\ub294 \uacbd\uc6b0)\n@asset(tags={"priority": "high", "team": "data"})\ndef high_priority_asset() -> dict:\n    return {"status": "complete"}\n\n# \ud0dc\uadf8 \uc120\ud0dd (Dagster 1.3+)\nhigh_priority_job = define_asset_job(\n    name="high_priority",\n    selection=AssetSelection.tag("priority", "high")\n)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ubcf5\uc7a1\ud55c-\uc120\ud0dd-\ub85c\uc9c1",children:"\ubcf5\uc7a1\ud55c \uc120\ud0dd \ub85c\uc9c1"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import asset, AssetSelection, define_asset_job\nimport pandas as pd\n\n# Bronze \ub808\uc774\uc5b4\n@asset(group_name="bronze", tags={"layer": "bronze", "source": "database"})\ndef bronze_customers() -> pd.DataFrame:\n    return pd.DataFrame({\'id\': [1, 2, 3]})\n\n@asset(group_name="bronze", tags={"layer": "bronze", "source": "api"})\ndef bronze_events() -> pd.DataFrame:\n    return pd.DataFrame({\'event\': [\'click\', \'view\']})\n\n# Silver \ub808\uc774\uc5b4\n@asset(group_name="silver", tags={"layer": "silver"})\ndef silver_customers(bronze_customers: pd.DataFrame) -> pd.DataFrame:\n    return bronze_customers.copy()\n\n@asset(group_name="silver", tags={"layer": "silver"})\ndef silver_events(bronze_events: pd.DataFrame) -> pd.DataFrame:\n    return bronze_events.copy()\n\n# Gold \ub808\uc774\uc5b4\n@asset(group_name="gold", tags={"layer": "gold", "critical": "true"})\ndef gold_customer_metrics(silver_customers: pd.DataFrame, silver_events: pd.DataFrame) -> dict:\n    return {\'customer_count\': len(silver_customers), \'event_count\': len(silver_events)}\n\n# \ubcf5\uc7a1\ud55c \uc120\ud0dd \ud328\ud134\n\n# 1. Bronze\uc5d0\uc11c Gold\uae4c\uc9c0 \uc804\uccb4 \ud30c\uc774\ud504\ub77c\uc778\nfull_pipeline = define_asset_job(\n    name="full_pipeline",\n    selection=AssetSelection.assets(bronze_customers).downstream(depth=10)\n)\n\n# 2. Silver\uc640 Gold\ub9cc\nsilver_gold_pipeline = define_asset_job(\n    name="silver_gold",\n    selection=AssetSelection.groups("silver", "gold")\n)\n\n# 3. \ud2b9\uc815 Asset\uc758 \uc0c1\uc704 1\ub2e8\uacc4\ub9cc\nimmediate_upstream = define_asset_job(\n    name="immediate_upstream",\n    selection=AssetSelection.assets(gold_customer_metrics).upstream(depth=1)\n)\n\n# 4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc18c\uc2a4\ub9cc\ndatabase_sources = define_asset_job(\n    name="database_sources",\n    selection=AssetSelection.tag("source", "database")\n)\n\n# 5. Critical Asset\uacfc \uadf8 \uc758\uc874\uc131\ncritical_pipeline = define_asset_job(\n    name="critical_pipeline",\n    selection=AssetSelection.tag("critical", "true").upstream()\n)\n\n# 6. Bronze\uc640 Silver\ub9cc (Gold \uc81c\uc678)\nbronze_silver_only = define_asset_job(\n    name="bronze_silver_only",\n    selection=AssetSelection.groups("bronze", "silver") &\n              ~AssetSelection.groups("gold")\n)\n\n# 7. \ud2b9\uc815 Asset\uc758 \uc9c1\uc811 \uc758\uc874\uc131\ub9cc\ndirect_deps = define_asset_job(\n    name="direct_deps",\n    selection=(\n        AssetSelection.assets(gold_customer_metrics) |\n        AssetSelection.assets(gold_customer_metrics).upstream(depth=1)\n    )\n)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\ub3d9\uc801-asset-selection",children:"\ub3d9\uc801 Asset Selection"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    AssetSelection,\n    define_asset_job,\n    sensor,\n    RunRequest,\n    SensorEvaluationContext,\n    Definitions\n)\nimport pandas as pd\n\n@asset(group_name="data", tags={"priority": "high"})\ndef critical_data() -> pd.DataFrame:\n    return pd.DataFrame({\'value\': [1, 2, 3]})\n\n@asset(group_name="data", tags={"priority": "low"})\ndef optional_data() -> pd.DataFrame:\n    return pd.DataFrame({\'value\': [4, 5, 6]})\n\n@asset(group_name="analytics")\ndef analysis(critical_data: pd.DataFrame, optional_data: pd.DataFrame) -> dict:\n    return {\'total\': len(critical_data) + len(optional_data)}\n\n# Job \uc815\uc758\nhigh_priority_job = define_asset_job(\n    name="high_priority_job",\n    selection=AssetSelection.tag("priority", "high")\n)\n\nall_data_job = define_asset_job(\n    name="all_data_job",\n    selection=AssetSelection.groups("data", "analytics")\n)\n\n# \uc13c\uc11c\ub85c \uc870\uac74\ubd80 \uc2e4\ud589\n@sensor(\n    name="conditional_asset_sensor",\n    job=all_data_job,\n    minimum_interval_seconds=60\n)\ndef conditional_run_sensor(context: SensorEvaluationContext):\n    """\n    \uc2dc\uac04\ub300\uc5d0 \ub530\ub77c \ub2e4\ub978 Asset\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\n    """\n    from datetime import datetime\n\n    current_hour = datetime.now().hour\n\n    # \uc5c5\ubb34 \uc2dc\uac04(9-18\uc2dc)\uc5d0\ub294 high priority\ub9cc\n    if 9 <= current_hour < 18:\n        yield RunRequest(\n            job_name="high_priority_job",\n            tags={"triggered_by": "sensor", "time": "business_hours"}\n        )\n    # \ube44\uc5c5\ubb34 \uc2dc\uac04\uc5d0\ub294 \uc804\uccb4 \uc2e4\ud589\n    else:\n        yield RunRequest(\n            job_name="all_data_job",\n            tags={"triggered_by": "sensor", "time": "off_hours"}\n        )\n\ndefs = Definitions(\n    assets=[critical_data, optional_data, analysis],\n    jobs=[high_priority_job, all_data_job],\n    sensors=[conditional_run_sensor]\n)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"111-\uc2e4\uc2b5",children:"1.11 \uc2e4\uc2b5"}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-1-\uae30\ubcf8-asset-\ud30c\uc774\ud504\ub77c\uc778-\uad6c\ucd95",children:"\uc2e4\uc2b5 1: \uae30\ubcf8 Asset \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\ubb38\uc81c"}),": \ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\ub294 Asset \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ucd95\ud558\uc138\uc694."]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"raw_users"})," Asset: \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 (id, name, country)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"raw_transactions"})," Asset: \uac70\ub798 \ub370\uc774\ud130 (tx_id, user_id, amount, date)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"enriched_transactions"})," Asset: \uc0ac\uc6a9\uc790 \uc815\ubcf4\uac00 \ud3ec\ud568\ub41c \uac70\ub798 \ub370\uc774\ud130"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"country_summary"})," Asset: \uad6d\uac00\ubcc4 \uac70\ub798 \uc694\uc57d (\uac70\ub798 \uc218, \ucd1d\uc561, \ud3c9\uade0)"]}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import asset, AssetExecutionContext, Definitions\nimport pandas as pd\n\n@asset(\n    group_name=\"raw_data\",\n    description=\"\uc6d0\uc2dc \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\"\n)\ndef raw_users(context: AssetExecutionContext) -> pd.DataFrame:\n    \"\"\"\uc0ac\uc6a9\uc790 \uae30\ubcf8 \uc815\ubcf4\"\"\"\n    df = pd.DataFrame({\n        'id': [1, 2, 3, 4, 5],\n        'name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],\n        'country': ['US', 'UK', 'US', 'CA', 'UK']\n    })\n\n    context.log.info(f\"\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ub85c\ub4dc: {len(df)}\uba85\")\n    return df\n\n@asset(\n    group_name=\"raw_data\",\n    description=\"\uc6d0\uc2dc \uac70\ub798 \ub370\uc774\ud130\"\n)\ndef raw_transactions(context: AssetExecutionContext) -> pd.DataFrame:\n    \"\"\"\uac70\ub798 \uae30\ub85d\"\"\"\n    df = pd.DataFrame({\n        'tx_id': [101, 102, 103, 104, 105, 106, 107],\n        'user_id': [1, 2, 1, 3, 2, 4, 5],\n        'amount': [100, 200, 150, 300, 250, 400, 180],\n        'date': ['2024-01-01', '2024-01-01', '2024-01-02',\n                 '2024-01-02', '2024-01-03', '2024-01-03', '2024-01-03']\n    })\n\n    context.log.info(f\"\uac70\ub798 \ub370\uc774\ud130 \ub85c\ub4dc: {len(df)}\uac74\")\n    return df\n\n@asset(\n    group_name=\"processed\",\n    description=\"\uc0ac\uc6a9\uc790 \uc815\ubcf4\uac00 \ud3ec\ud568\ub41c \uac70\ub798 \ub370\uc774\ud130\"\n)\ndef enriched_transactions(\n    context: AssetExecutionContext,\n    raw_users: pd.DataFrame,\n    raw_transactions: pd.DataFrame\n) -> pd.DataFrame:\n    \"\"\"\uac70\ub798 \ub370\uc774\ud130\uc5d0 \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uacb0\ud569\"\"\"\n    df = raw_transactions.merge(\n        raw_users[['id', 'name', 'country']],\n        left_on='user_id',\n        right_on='id',\n        how='left'\n    ).drop('id', axis=1)\n\n    context.log.info(f\"Enriched \uac70\ub798: {len(df)}\uac74\")\n    return df\n\n@asset(\n    group_name=\"analytics\",\n    description=\"\uad6d\uac00\ubcc4 \uac70\ub798 \uc694\uc57d\"\n)\ndef country_summary(\n    context: AssetExecutionContext,\n    enriched_transactions: pd.DataFrame\n) -> pd.DataFrame:\n    \"\"\"\uad6d\uac00\ubcc4 \uc9d1\uacc4\"\"\"\n    summary = enriched_transactions.groupby('country').agg({\n        'tx_id': 'count',\n        'amount': ['sum', 'mean']\n    }).round(2)\n\n    summary.columns = ['transaction_count', 'total_amount', 'avg_amount']\n    summary = summary.reset_index()\n\n    context.log.info(f\"\uad6d\uac00\ubcc4 \uc694\uc57d:\\n{summary}\")\n    return summary\n\n# Definitions\ndefs = Definitions(\n    assets=[raw_users, raw_transactions, enriched_transactions, country_summary]\n)\n"})})]}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-2-\ud30c\ud2f0\uc158\ub41c-asset\uc73c\ub85c-\uc99d\ubd84-\ucc98\ub9ac",children:"\uc2e4\uc2b5 2: \ud30c\ud2f0\uc158\ub41c Asset\uc73c\ub85c \uc99d\ubd84 \ucc98\ub9ac"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\ubb38\uc81c"}),": \uc77c\ubcc4 \ub85c\uadf8 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \ud30c\ud2f0\uc158\ub41c Asset\uc744 \ub9cc\ub4dc\uc138\uc694."]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"daily_logs"}),": \uc77c\ubcc4 \ub85c\uadf8 \ub370\uc774\ud130 (\ud30c\ud2f0\uc158\ub428)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"daily_metrics"}),": \uc77c\ubcc4 \uc9c0\ud45c \uacc4\uc0b0 (\ud30c\ud2f0\uc158\ub428)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"weekly_rollup"}),": \uc8fc\uac04 \uc9d1\uacc4 (7\uc77c \ub370\uc774\ud130 \uc0ac\uc6a9)"]}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    AssetExecutionContext,\n    DailyPartitionsDefinition,\n    AssetIn,\n    TimeWindowPartitionMapping,\n    Output,\n    MetadataValue,\n    Definitions\n)\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\n# \ud30c\ud2f0\uc158 \uc815\uc758\ndaily_partition = DailyPartitionsDefinition(start_date="2024-01-01")\n\n@asset(\n    partitions_def=daily_partition,\n    group_name="raw",\n    metadata={\n        "description": "\uc77c\ubcc4 \uc6d0\uc2dc \ub85c\uadf8 \ub370\uc774\ud130"\n    }\n)\ndef daily_logs(context: AssetExecutionContext) -> Output[pd.DataFrame]:\n    """\n    \ud2b9\uc815 \ub0a0\uc9dc\uc758 \ub85c\uadf8 \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud569\ub2c8\ub2e4.\n    """\n    partition_date = context.partition_key\n    context.log.info(f"\ub85c\uadf8 \ub85c\ub4dc \ub0a0\uc9dc: {partition_date}")\n\n    # \uc2dc\ubbac\ub808\uc774\uc158: \uc2e4\uc81c\ub85c\ub294 S3, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1\uc5d0\uc11c \ub85c\ub4dc\n    import random\n    random.seed(hash(partition_date))\n\n    df = pd.DataFrame({\n        \'timestamp\': [f"{partition_date} {h:02d}:00:00" for h in range(24)],\n        \'user_id\': [random.randint(1, 100) for _ in range(24)],\n        \'action\': [random.choice([\'login\', \'click\', \'purchase\', \'logout\']) for _ in range(24)],\n        \'duration_sec\': [random.randint(1, 300) for _ in range(24)]\n    })\n\n    return Output(\n        value=df,\n        metadata={\n            "record_count": len(df),\n            "partition_date": partition_date,\n            "preview": MetadataValue.md(df.head().to_markdown())\n        }\n    )\n\n@asset(\n    partitions_def=daily_partition,\n    group_name="metrics",\n    metadata={\n        "description": "\uc77c\ubcc4 \uc9c0\ud45c \uacc4\uc0b0"\n    }\n)\ndef daily_metrics(\n    context: AssetExecutionContext,\n    daily_logs: pd.DataFrame\n) -> Output[dict]:\n    """\n    \uc77c\ubcc4 \ub85c\uadf8\uc5d0\uc11c \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    """\n    partition_date = context.partition_key\n\n    metrics = {\n        \'date\': partition_date,\n        \'total_events\': len(daily_logs),\n        \'unique_users\': daily_logs[\'user_id\'].nunique(),\n        \'avg_duration\': daily_logs[\'duration_sec\'].mean(),\n        \'action_counts\': daily_logs[\'action\'].value_counts().to_dict()\n    }\n\n    context.log.info(f"{partition_date} \uc9c0\ud45c: {metrics}")\n\n    return Output(\n        value=metrics,\n        metadata={\n            "date": partition_date,\n            "total_events": metrics[\'total_events\'],\n            "unique_users": metrics[\'unique_users\'],\n            "avg_duration": MetadataValue.float(metrics[\'avg_duration\'])\n        }\n    )\n\n@asset(\n    partitions_def=daily_partition,\n    ins={\n        "daily_metrics": AssetIn(\n            partition_mapping=TimeWindowPartitionMapping(\n                start_offset=-6,  # 6\uc77c \uc804\ubd80\ud130\n                end_offset=0      # \uc624\ub298\uae4c\uc9c0 (\ucd1d 7\uc77c)\n            )\n        )\n    },\n    group_name="analytics",\n    metadata={\n        "description": "7\uc77c \uc774\ub3d9 \uc9d1\uacc4"\n    }\n)\ndef weekly_rollup(\n    context: AssetExecutionContext,\n    daily_metrics: list\n) -> Output[dict]:\n    """\n    \uc9c0\ub09c 7\uc77c\uac04\uc758 \uc9c0\ud45c\ub97c \uc9d1\uacc4\ud569\ub2c8\ub2e4.\n    """\n    partition_date = context.partition_key\n\n    # daily_metrics\ub294 7\uc77c\uce58 \ub370\uc774\ud130\uc758 \ub9ac\uc2a4\ud2b8\n    total_events = sum(m[\'total_events\'] for m in daily_metrics)\n    avg_users = sum(m[\'unique_users\'] for m in daily_metrics) / len(daily_metrics)\n    avg_duration = sum(m[\'avg_duration\'] for m in daily_metrics) / len(daily_metrics)\n\n    rollup = {\n        \'week_ending\': partition_date,\n        \'total_events_7d\': total_events,\n        \'avg_daily_users\': avg_users,\n        \'avg_duration_7d\': avg_duration,\n        \'days_included\': len(daily_metrics)\n    }\n\n    context.log.info(f"\uc8fc\uac04 \uc9d1\uacc4 ({partition_date}): {rollup}")\n\n    return Output(\n        value=rollup,\n        metadata={\n            "week_ending": partition_date,\n            "total_events": total_events,\n            "avg_users": MetadataValue.float(avg_users),\n            "days_included": len(daily_metrics)\n        }\n    )\n\ndefs = Definitions(\n    assets=[daily_logs, daily_metrics, weekly_rollup]\n)\n'})})]}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-3-multi-asset\uacfc-asset-checks",children:"\uc2e4\uc2b5 3: Multi-asset\uacfc Asset Checks"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\ubb38\uc81c"}),": \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc5ec\ub7ec \ud14c\uc774\ube14\uc744 \ucd94\ucd9c\ud558\uace0 \ud488\uc9c8 \uac80\uc0ac\ub97c \uc218\ud589\ud558\ub294 \ud30c\uc774\ud504\ub77c\uc778\uc744 \ub9cc\ub4dc\uc138\uc694."]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Multi-asset\uc73c\ub85c ",(0,s.jsx)(e.code,{children:"users"}),", ",(0,s.jsx)(e.code,{children:"orders"}),", ",(0,s.jsx)(e.code,{children:"products"})," \ud14c\uc774\ube14 \ucd94\ucd9c"]}),"\n",(0,s.jsx)(e.li,{children:"\uac01 \ud14c\uc774\ube14\uc5d0 \ub300\ud55c Asset Checks (null \uac80\uc0ac, \uc911\ubcf5 \uac80\uc0ac)"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"order_analysis"})," Asset\uc73c\ub85c \ubd84\uc11d \uc218\ud589"]}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    multi_asset,\n    asset,\n    asset_check,\n    AssetOut,\n    AssetCheckResult,\n    AssetCheckSeverity,\n    AssetExecutionContext,\n    Output,\n    MetadataValue,\n    Definitions\n)\nimport pandas as pd\nfrom typing import Tuple\n\n@multi_asset(\n    outs={\n        "users": AssetOut(\n            description="\uc0ac\uc6a9\uc790 \ud14c\uc774\ube14",\n            group_name="database_tables"\n        ),\n        "orders": AssetOut(\n            description="\uc8fc\ubb38 \ud14c\uc774\ube14",\n            group_name="database_tables"\n        ),\n        "products": AssetOut(\n            description="\uc81c\ud488 \ud14c\uc774\ube14",\n            group_name="database_tables"\n        )\n    }\n)\ndef extract_database_tables(\n    context: AssetExecutionContext\n) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n    """\n    \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc5ec\ub7ec \ud14c\uc774\ube14\uc744 \ud55c \ubc88\uc5d0 \ucd94\ucd9c\ud569\ub2c8\ub2e4.\n    """\n    context.log.info("\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc911...")\n\n    # \uc0ac\uc6a9\uc790 \ud14c\uc774\ube14\n    users = pd.DataFrame({\n        \'user_id\': [1, 2, 3, 4, 5],\n        \'email\': [\'a@test.com\', \'b@test.com\', None, \'d@test.com\', \'e@test.com\'],\n        \'name\': [\'Alice\', \'Bob\', \'Charlie\', \'Diana\', \'Eve\'],\n        \'country\': [\'US\', \'UK\', \'US\', \'CA\', \'UK\']\n    })\n\n    # \uc8fc\ubb38 \ud14c\uc774\ube14\n    orders = pd.DataFrame({\n        \'order_id\': [101, 102, 103, 104, 105, 106],\n        \'user_id\': [1, 2, 1, 3, 2, 999],  # 999\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0ac\uc6a9\uc790\n        \'product_id\': [1, 2, 1, 3, 2, 1],\n        \'quantity\': [1, 2, 1, 1, 3, 0],  # 0\uc740 \ube44\uc815\uc0c1\n        \'total_price\': [100, 200, 100, 150, 300, -50]  # \uc74c\uc218\ub294 \ube44\uc815\uc0c1\n    })\n\n    # \uc81c\ud488 \ud14c\uc774\ube14\n    products = pd.DataFrame({\n        \'product_id\': [1, 2, 3, 3],  # \uc911\ubcf5 \uc874\uc7ac\n        \'name\': [\'Widget\', \'Gadget\', \'Tool\', \'Tool\'],\n        \'price\': [100, 100, 150, 150],\n        \'stock\': [50, 30, 20, 20]\n    })\n\n    context.log.info(f"\ucd94\ucd9c \uc644\ub8cc: Users={len(users)}, Orders={len(orders)}, Products={len(products)}")\n\n    return users, orders, products\n\n# Users \ud14c\uc774\ube14 \uac80\uc0ac\n@asset_check(\n    asset="users",\n    description="\uc774\uba54\uc77c \ud544\ub4dc null \uac80\uc0ac"\n)\ndef check_users_email_not_null(users: pd.DataFrame) -> AssetCheckResult:\n    """\uc0ac\uc6a9\uc790 \uc774\uba54\uc77c\uc774 null\uc774 \uc544\ub2cc\uc9c0 \ud655\uc778"""\n    null_count = users[\'email\'].isnull().sum()\n    total_count = len(users)\n\n    passed = null_count == 0\n\n    return AssetCheckResult(\n        passed=passed,\n        description=f"Null \uc774\uba54\uc77c: {null_count}/{total_count}",\n        severity=AssetCheckSeverity.ERROR if not passed else None,\n        metadata={\n            "null_count": int(null_count),\n            "total_count": int(total_count),\n            "null_percentage": float(null_count / total_count * 100)\n        }\n    )\n\n@asset_check(\n    asset="users",\n    description="\uc0ac\uc6a9\uc790 ID \uc911\ubcf5 \uac80\uc0ac"\n)\ndef check_users_unique_ids(users: pd.DataFrame) -> AssetCheckResult:\n    """\uc0ac\uc6a9\uc790 ID\uac00 \uace0\uc720\ud55c\uc9c0 \ud655\uc778"""\n    duplicate_count = users[\'user_id\'].duplicated().sum()\n\n    return AssetCheckResult(\n        passed=duplicate_count == 0,\n        description=f"\uc911\ubcf5 ID: {duplicate_count}\uac1c",\n        severity=AssetCheckSeverity.ERROR if duplicate_count > 0 else None,\n        metadata={"duplicate_count": int(duplicate_count)}\n    )\n\n# Orders \ud14c\uc774\ube14 \uac80\uc0ac\n@asset_check(\n    asset="orders",\n    description="\uc8fc\ubb38 \uc218\ub7c9 \uc720\ud6a8\uc131 \uac80\uc0ac"\n)\ndef check_orders_quantity_positive(orders: pd.DataFrame) -> AssetCheckResult:\n    """\uc8fc\ubb38 \uc218\ub7c9\uc774 \uc591\uc218\uc778\uc9c0 \ud655\uc778"""\n    invalid_quantities = orders[orders[\'quantity\'] <= 0]\n\n    return AssetCheckResult(\n        passed=len(invalid_quantities) == 0,\n        description=f"\ube44\uc815\uc0c1 \uc218\ub7c9: {len(invalid_quantities)}\uac74",\n        severity=AssetCheckSeverity.ERROR if len(invalid_quantities) > 0 else None,\n        metadata={\n            "invalid_count": len(invalid_quantities),\n            "invalid_orders": invalid_quantities[\'order_id\'].tolist() if len(invalid_quantities) > 0 else []\n        }\n    )\n\n@asset_check(\n    asset="orders",\n    description="\uc8fc\ubb38 \uac00\uaca9 \uc720\ud6a8\uc131 \uac80\uc0ac"\n)\ndef check_orders_price_positive(orders: pd.DataFrame) -> AssetCheckResult:\n    """\uc8fc\ubb38 \uac00\uaca9\uc774 \uc591\uc218\uc778\uc9c0 \ud655\uc778"""\n    negative_prices = orders[orders[\'total_price\'] < 0]\n\n    return AssetCheckResult(\n        passed=len(negative_prices) == 0,\n        description=f"\uc74c\uc218 \uac00\uaca9: {len(negative_prices)}\uac74",\n        severity=AssetCheckSeverity.ERROR if len(negative_prices) > 0 else None,\n        metadata={\n            "negative_count": len(negative_prices),\n            "affected_orders": negative_prices[\'order_id\'].tolist() if len(negative_prices) > 0 else []\n        }\n    )\n\n@asset_check(\n    asset="orders",\n    description="\uc0ac\uc6a9\uc790 \ucc38\uc870 \ubb34\uacb0\uc131 \uac80\uc0ac"\n)\ndef check_orders_user_integrity(orders: pd.DataFrame, users: pd.DataFrame) -> AssetCheckResult:\n    """\ubaa8\ub4e0 \uc8fc\ubb38\uc758 \uc0ac\uc6a9\uc790\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778"""\n    valid_user_ids = set(users[\'user_id\'])\n    invalid_orders = orders[~orders[\'user_id\'].isin(valid_user_ids)]\n\n    return AssetCheckResult(\n        passed=len(invalid_orders) == 0,\n        description=f"\uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0ac\uc6a9\uc790: {len(invalid_orders)}\uac74",\n        severity=AssetCheckSeverity.ERROR if len(invalid_orders) > 0 else None,\n        metadata={\n            "invalid_count": len(invalid_orders),\n            "invalid_user_ids": invalid_orders[\'user_id\'].unique().tolist() if len(invalid_orders) > 0 else []\n        }\n    )\n\n# Products \ud14c\uc774\ube14 \uac80\uc0ac\n@asset_check(\n    asset="products",\n    description="\uc81c\ud488 ID \uc911\ubcf5 \uac80\uc0ac"\n)\ndef check_products_unique_ids(products: pd.DataFrame) -> AssetCheckResult:\n    """\uc81c\ud488 ID\uac00 \uace0\uc720\ud55c\uc9c0 \ud655\uc778"""\n    duplicate_count = products[\'product_id\'].duplicated().sum()\n    duplicates = products[products[\'product_id\'].duplicated(keep=False)]\n\n    return AssetCheckResult(\n        passed=duplicate_count == 0,\n        description=f"\uc911\ubcf5 \uc81c\ud488 ID: {duplicate_count}\uac1c",\n        severity=AssetCheckSeverity.ERROR if duplicate_count > 0 else None,\n        metadata={\n            "duplicate_count": int(duplicate_count),\n            "duplicate_ids": duplicates[\'product_id\'].unique().tolist() if duplicate_count > 0 else []\n        }\n    )\n\n# \ubd84\uc11d Asset\n@asset(\n    group_name="analytics",\n    description="\uc8fc\ubb38 \ubd84\uc11d"\n)\ndef order_analysis(\n    context: AssetExecutionContext,\n    users: pd.DataFrame,\n    orders: pd.DataFrame,\n    products: pd.DataFrame\n) -> Output[dict]:\n    """\n    \uc8fc\ubb38 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud569\ub2c8\ub2e4.\n    """\n    # \ub370\uc774\ud130 \uc815\uc81c (\ud488\uc9c8 \uac80\uc0ac\uc5d0\uc11c \ubc1c\uacac\ub41c \ubb38\uc81c \uc81c\uac70)\n    clean_orders = orders[\n        (orders[\'quantity\'] > 0) &\n        (orders[\'total_price\'] > 0) &\n        (orders[\'user_id\'].isin(users[\'user_id\']))\n    ]\n\n    clean_products = products.drop_duplicates(subset=[\'product_id\'])\n\n    # \ubd84\uc11d \uc218\ud589\n    total_revenue = clean_orders[\'total_price\'].sum()\n    total_orders = len(clean_orders)\n    avg_order_value = total_revenue / total_orders if total_orders > 0 else 0\n\n    # \uc0ac\uc6a9\uc790\ubcc4 \ubd84\uc11d\n    user_stats = clean_orders.groupby(\'user_id\').agg({\n        \'order_id\': \'count\',\n        \'total_price\': \'sum\'\n    }).rename(columns={\n        \'order_id\': \'order_count\',\n        \'total_price\': \'total_spent\'\n    })\n\n    analysis = {\n        \'total_revenue\': float(total_revenue),\n        \'total_orders\': int(total_orders),\n        \'avg_order_value\': float(avg_order_value),\n        \'unique_customers\': int(clean_orders[\'user_id\'].nunique()),\n        \'top_customers\': user_stats.nlargest(3, \'total_spent\').to_dict()\n    }\n\n    context.log.info(f"\ubd84\uc11d \uc644\ub8cc: \ucd1d \ub9e4\ucd9c ${total_revenue:,.2f}")\n\n    return Output(\n        value=analysis,\n        metadata={\n            "total_revenue": MetadataValue.float(total_revenue),\n            "total_orders": total_orders,\n            "avg_order_value": MetadataValue.float(avg_order_value),\n            "data_quality_note": MetadataValue.text(\n                f"\uc6d0\ubcf8 \uc8fc\ubb38: {len(orders)}\uac74, \uc815\uc81c \ud6c4: {len(clean_orders)}\uac74"\n            )\n        }\n    )\n\ndefs = Definitions(\n    assets=[\n        extract_database_tables,\n        order_analysis\n    ],\n    asset_checks=[\n        check_users_email_not_null,\n        check_users_unique_ids,\n        check_orders_quantity_positive,\n        check_orders_price_positive,\n        check_orders_user_integrity,\n        check_products_unique_ids\n    ]\n)\n'})})]}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-4-dynamic-partitions\uc640-\uc13c\uc11c",children:"\uc2e4\uc2b5 4: Dynamic Partitions\uc640 \uc13c\uc11c"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\ubb38\uc81c"}),": \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ud30c\uc77c\uc774 \uac10\uc9c0\ub418\uba74 \uc790\ub3d9\uc73c\ub85c \ud30c\ud2f0\uc158\uc744 \ucd94\uac00\ud558\uace0 \ucc98\ub9ac\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4dc\uc138\uc694."]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"Dynamic Partitions\ub85c \ud30c\uc77c\ubcc4 Asset \uc0dd\uc131"}),"\n",(0,s.jsx)(e.li,{children:"\uc13c\uc11c\ub85c \uc0c8 \ud30c\uc77c \uac10\uc9c0 \ubc0f \ud30c\ud2f0\uc158 \ucd94\uac00"}),"\n",(0,s.jsx)(e.li,{children:"\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \uc9d1\uacc4\ud558\ub294 Asset"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from dagster import (\n    asset,\n    sensor,\n    DynamicPartitionsDefinition,\n    AssetExecutionContext,\n    SensorEvaluationContext,\n    RunRequest,\n    SkipReason,\n    Output,\n    MetadataValue,\n    Definitions\n)\nimport pandas as pd\nimport os\nfrom pathlib import Path\n\n# Dynamic \ud30c\ud2f0\uc158 \uc815\uc758\ndata_files_partitions = DynamicPartitionsDefinition(name="data_files")\n\n@asset(\n    partitions_def=data_files_partitions,\n    group_name="file_processing",\n    description="\ud30c\uc77c\ubcc4 \ub370\uc774\ud130 \ucc98\ub9ac"\n)\ndef processed_file_data(\n    context: AssetExecutionContext\n) -> Output[pd.DataFrame]:\n    """\n    \uac1c\ubcc4 \ud30c\uc77c\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n    """\n    file_name = context.partition_key\n    context.log.info(f"\ucc98\ub9ac \uc911\uc778 \ud30c\uc77c: {file_name}")\n\n    # \uc2dc\ubbac\ub808\uc774\uc158: \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\uc744 \uc77d\uc74c\n    # file_path = f"/data/input/{file_name}"\n    # df = pd.read_csv(file_path)\n\n    # \uc608\uc2dc \ub370\uc774\ud130 \uc0dd\uc131\n    import random\n    random.seed(hash(file_name))\n\n    df = pd.DataFrame({\n        \'id\': range(1, 101),\n        \'value\': [random.randint(1, 1000) for _ in range(100)],\n        \'category\': [random.choice([\'A\', \'B\', \'C\']) for _ in range(100)]\n    })\n\n    df[\'source_file\'] = file_name\n\n    # \ud1b5\uacc4 \uacc4\uc0b0\n    stats = {\n        \'file_name\': file_name,\n        \'record_count\': len(df),\n        \'total_value\': df[\'value\'].sum(),\n        \'avg_value\': df[\'value\'].mean(),\n        \'category_counts\': df[\'category\'].value_counts().to_dict()\n    }\n\n    context.log.info(f"{file_name} \ucc98\ub9ac \uc644\ub8cc: {len(df)} \ub808\ucf54\ub4dc")\n\n    return Output(\n        value=df,\n        metadata={\n            "file_name": file_name,\n            "record_count": len(df),\n            "total_value": MetadataValue.float(stats[\'total_value\']),\n            "avg_value": MetadataValue.float(stats[\'avg_value\']),\n            "preview": MetadataValue.md(df.head(5).to_markdown())\n        }\n    )\n\n@asset(\n    group_name="aggregation",\n    description="\ubaa8\ub4e0 \ucc98\ub9ac\ub41c \ud30c\uc77c\uc758 \uc9d1\uacc4"\n)\ndef aggregated_data(\n    context: AssetExecutionContext\n) -> Output[dict]:\n    """\n    \ubaa8\ub4e0 \ud30c\ud2f0\uc158\uc758 \ub370\uc774\ud130\ub97c \uc9d1\uacc4\ud569\ub2c8\ub2e4.\n    """\n    # \ud604\uc7ac \uc874\uc7ac\ud558\ub294 \ubaa8\ub4e0 \ud30c\ud2f0\uc158 \uc870\ud68c\n    partition_keys = context.instance.get_dynamic_partitions(\n        partitions_def_name="data_files"\n    )\n\n    if not partition_keys:\n        context.log.warning("\ucc98\ub9ac\ub41c \ud30c\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.")\n        return Output(\n            value={\'total_files\': 0},\n            metadata={"status": "no_data"}\n        )\n\n    context.log.info(f"\uc9d1\uacc4 \uc911\uc778 \ud30c\uc77c: {len(partition_keys)}\uac1c")\n\n    # \uac01 \ud30c\ud2f0\uc158\uc758 \ub370\uc774\ud130\ub97c \uc2dc\ubbac\ub808\uc774\uc158\n    all_data = []\n    for file_name in partition_keys:\n        # \uc2e4\uc81c\ub85c\ub294 \uac01 \ud30c\ud2f0\uc158\uc758 Asset\uc744 \ub85c\ub4dc\n        import random\n        random.seed(hash(file_name))\n\n        file_stats = {\n            \'file_name\': file_name,\n            \'record_count\': random.randint(50, 150),\n            \'total_value\': random.randint(10000, 50000)\n        }\n        all_data.append(file_stats)\n\n    # \uc9d1\uacc4\n    aggregation = {\n        \'total_files\': len(partition_keys),\n        \'total_records\': sum(d[\'record_count\'] for d in all_data),\n        \'total_value\': sum(d[\'total_value\'] for d in all_data),\n        \'files\': partition_keys\n    }\n\n    context.log.info(\n        f"\uc9d1\uacc4 \uc644\ub8cc: {aggregation[\'total_files\']}\uac1c \ud30c\uc77c, "\n        f"{aggregation[\'total_records\']}\uac1c \ub808\ucf54\ub4dc"\n    )\n\n    return Output(\n        value=aggregation,\n        metadata={\n            "total_files": aggregation[\'total_files\'],\n            "total_records": aggregation[\'total_records\'],\n            "total_value": MetadataValue.float(aggregation[\'total_value\']),\n            "file_list": MetadataValue.md(\n                "### \ucc98\ub9ac\ub41c \ud30c\uc77c\\n" +\n                "\\n".join(f"- {f}" for f in partition_keys)\n            )\n        }\n    )\n\n# \uc0c8 \ud30c\uc77c \uac10\uc9c0 \uc13c\uc11c\n@sensor(\n    name="new_file_detector",\n    minimum_interval_seconds=30,\n    description="\uc0c8 \ub370\uc774\ud130 \ud30c\uc77c\uc744 \uac10\uc9c0\ud558\uace0 \ucc98\ub9ac\ud569\ub2c8\ub2e4."\n)\ndef detect_new_files(context: SensorEvaluationContext):\n    """\n    \uc0c8 \ud30c\uc77c\uc744 \uac10\uc9c0\ud558\uace0 \ub3d9\uc801 \ud30c\ud2f0\uc158\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n    """\n    # \uc2dc\ubbac\ub808\uc774\uc158: \uc0c8 \ud30c\uc77c \ubaa9\ub85d\n    # \uc2e4\uc81c\ub85c\ub294 \ub514\ub809\ud1a0\ub9ac \uc2a4\uce94, S3 \ubc84\ud0b7 \uc870\ud68c \ub4f1\n    available_files = [\n        "data_2024_01_01.csv",\n        "data_2024_01_02.csv",\n        "data_2024_01_03.csv",\n        "data_2024_01_04.csv"\n    ]\n\n    # \uae30\uc874 \ud30c\ud2f0\uc158 \uc870\ud68c\n    existing_partitions = set(context.instance.get_dynamic_partitions(\n        partitions_def_name="data_files"\n    ))\n\n    # \uc0c8 \ud30c\uc77c\ub9cc \ud544\ud130\ub9c1\n    new_files = [f for f in available_files if f not in existing_partitions]\n\n    if not new_files:\n        yield SkipReason(f"\uc0c8 \ud30c\uc77c \uc5c6\uc74c (\uae30\uc874: {len(existing_partitions)}\uac1c)")\n        return\n\n    # \uc0c8 \ud30c\ud2f0\uc158 \ucd94\uac00\n    context.instance.add_dynamic_partitions(\n        partitions_def_name="data_files",\n        partition_keys=new_files\n    )\n\n    context.log.info(f"\uc0c8 \ud30c\uc77c {len(new_files)}\uac1c \ubc1c\uacac: {new_files}")\n\n    # \uac01 \uc0c8 \ud30c\uc77c\uc5d0 \ub300\ud55c \uc2e4\ud589 \uc694\uccad\n    for file_name in new_files:\n        yield RunRequest(\n            partition_key=file_name,\n            tags={\n                "file_name": file_name,\n                "detected_at": context.cursor or "initial"\n            }\n        )\n\n    # \ucee4\uc11c \uc5c5\ub370\uc774\ud2b8 (\ub9c8\uc9c0\ub9c9 \ucc98\ub9ac \uc2dc\uac04 \ub4f1)\n    context.update_cursor(str(len(existing_partitions) + len(new_files)))\n\n# \ud30c\uc77c \uc0ad\uc81c \uc13c\uc11c (\uc120\ud0dd\uc801)\n@sensor(\n    name="cleanup_old_files",\n    minimum_interval_seconds=3600,  # 1\uc2dc\uac04\ub9c8\ub2e4\n    description="\uc624\ub798\ub41c \ud30c\uc77c \ud30c\ud2f0\uc158\uc744 \uc815\ub9ac\ud569\ub2c8\ub2e4."\n)\ndef cleanup_old_partitions(context: SensorEvaluationContext):\n    """\n    \uc624\ub798\ub41c \ud30c\ud2f0\uc158\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4.\n    """\n    from datetime import datetime, timedelta\n\n    # \ud604\uc7ac \ud30c\ud2f0\uc158\n    all_partitions = context.instance.get_dynamic_partitions(\n        partitions_def_name="data_files"\n    )\n\n    if not all_partitions:\n        yield SkipReason("\ud30c\ud2f0\uc158 \uc5c6\uc74c")\n        return\n\n    # 30\uc77c \uc774\uc804 \ud30c\uc77c \ucc3e\uae30 (\ud30c\uc77c\uba85\uc5d0\uc11c \ub0a0\uc9dc \ucd94\ucd9c)\n    cutoff_date = datetime.now() - timedelta(days=30)\n    old_partitions = []\n\n    for partition in all_partitions:\n        # \ud30c\uc77c\uba85\uc5d0\uc11c \ub0a0\uc9dc \ucd94\ucd9c (\uc608: data_2024_01_01.csv)\n        try:\n            date_str = partition.replace("data_", "").replace(".csv", "")\n            file_date = datetime.strptime(date_str, "%Y_%m_%d")\n\n            if file_date < cutoff_date:\n                old_partitions.append(partition)\n        except ValueError:\n            continue\n\n    if not old_partitions:\n        yield SkipReason(f"\uc81c\uac70\ud560 \uc624\ub798\ub41c \ud30c\ud2f0\uc158 \uc5c6\uc74c (\uc804\uccb4: {len(all_partitions)}\uac1c)")\n        return\n\n    # \ud30c\ud2f0\uc158 \uc81c\uac70\n    context.instance.delete_dynamic_partitions(\n        partitions_def_name="data_files",\n        partition_keys=old_partitions\n    )\n\n    context.log.info(f"\uc624\ub798\ub41c \ud30c\ud2f0\uc158 {len(old_partitions)}\uac1c \uc81c\uac70")\n\n    yield SkipReason(f"{len(old_partitions)}\uac1c \ud30c\ud2f0\uc158 \uc81c\uac70\ub428")\n\ndefs = Definitions(\n    assets=[processed_file_data, aggregated_data],\n    sensors=[detect_new_files, cleanup_old_partitions]\n)\n'})})]}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-5-\uc885\ud569-\ud504\ub85c\uc81d\ud2b8---e-commerce-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778",children:"\uc2e4\uc2b5 5: \uc885\ud569 \ud504\ub85c\uc81d\ud2b8 - E-commerce \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\ubb38\uc81c"}),": \uc644\uc804\ud55c e-commerce \ubd84\uc11d \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ucd95\ud558\uc138\uc694."]}),"\n",(0,s.jsx)(e.p,{children:"\uc694\uad6c\uc0ac\ud56d:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"Bronze \ub808\uc774\uc5b4: \uc6d0\uc2dc \ub370\uc774\ud130 (customers, orders, products)"}),"\n",(0,s.jsx)(e.li,{children:"Silver \ub808\uc774\uc5b4: \uc815\uc81c\ub41c \ub370\uc774\ud130 (\uc911\ubcf5 \uc81c\uac70, null \ucc98\ub9ac)"}),"\n",(0,s.jsx)(e.li,{children:"Gold \ub808\uc774\uc5b4: \ube44\uc988\ub2c8\uc2a4 \uc9c0\ud45c (\ub9e4\ucd9c, \uace0\uac1d \uc138\uadf8\uba3c\ud2b8, \uc81c\ud488 \uc131\uacfc)"}),"\n",(0,s.jsx)(e.li,{children:"\uac01 \ub808\uc774\uc5b4\uc5d0 \uc801\uc808\ud55c Asset Checks \ucd94\uac00"}),"\n",(0,s.jsx)(e.li,{children:"\uc77c\ubcc4 \ud30c\ud2f0\uc158\uc73c\ub85c \uc99d\ubd84 \ucc98\ub9ac"}),"\n",(0,s.jsx)(e.li,{children:"\uba54\ud0c0\ub370\uc774\ud130\uc640 \ubb38\uc11c\ud654 \ud3ec\ud568"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from dagster import (\n    asset,\n    multi_asset,\n    asset_check,\n    AssetOut,\n    AssetCheckResult,\n    AssetCheckSeverity,\n    DailyPartitionsDefinition,\n    AssetExecutionContext,\n    Output,\n    MetadataValue,\n    define_asset_job,\n    AssetSelection,\n    Definitions\n)\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Tuple\n\n# \ud30c\ud2f0\uc158 \uc815\uc758\ndaily_partition = DailyPartitionsDefinition(start_date=\"2024-01-01\")\n\n# ========== Bronze Layer ==========\n\n@multi_asset(\n    outs={\n        \"bronze_customers\": AssetOut(\n            description=\"\uc6d0\uc2dc \uace0\uac1d \ub370\uc774\ud130\",\n            group_name=\"bronze\",\n            metadata={\"layer\": \"bronze\", \"source\": \"oltp_db\"}\n        ),\n        \"bronze_orders\": AssetOut(\n            description=\"\uc6d0\uc2dc \uc8fc\ubb38 \ub370\uc774\ud130\",\n            group_name=\"bronze\",\n            metadata={\"layer\": \"bronze\", \"source\": \"oltp_db\"}\n        ),\n        \"bronze_products\": AssetOut(\n            description=\"\uc6d0\uc2dc \uc81c\ud488 \ub370\uc774\ud130\",\n            group_name=\"bronze\",\n            metadata={\"layer\": \"bronze\", \"source\": \"oltp_db\"}\n        )\n    },\n    partitions_def=daily_partition\n)\ndef extract_bronze_data(\n    context: AssetExecutionContext\n) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n    \"\"\"\n    OLTP \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc6d0\uc2dc \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4.\n    \"\"\"\n    partition_date = context.partition_key\n    context.log.info(f\"Bronze \ub370\uc774\ud130 \ucd94\ucd9c: {partition_date}\")\n\n    # \uace0\uac1d \ub370\uc774\ud130\n    customers = pd.DataFrame({\n        'customer_id': [1, 2, 3, 4, 5, 5],  # \uc911\ubcf5 \ud3ec\ud568\n        'name': ['Alice', 'Bob', 'Charlie', None, 'Eve', 'Eve'],\n        'email': ['alice@test.com', 'bob@test.com', 'charlie@test.com',\n                  'd@test.com', 'eve@test.com', 'eve@test.com'],\n        'country': ['US', 'UK', 'US', 'CA', 'UK', 'UK'],\n        'signup_date': ['2024-01-01', '2024-01-01', '2024-01-02',\n                        '2024-01-02', '2024-01-03', '2024-01-03']\n    })\n\n    # \uc8fc\ubb38 \ub370\uc774\ud130\n    import random\n    random.seed(hash(partition_date))\n\n    orders = pd.DataFrame({\n        'order_id': range(100, 120),\n        'customer_id': [random.randint(1, 5) for _ in range(20)],\n        'product_id': [random.randint(1, 5) for _ in range(20)],\n        'quantity': [random.randint(0, 5) for _ in range(20)],  # 0 \ud3ec\ud568\n        'unit_price': [random.uniform(10, 100) for _ in range(20)],\n        'order_date': [partition_date] * 20\n    })\n    orders['total_price'] = orders['quantity'] * orders['unit_price']\n\n    # \uc81c\ud488 \ub370\uc774\ud130\n    products = pd.DataFrame({\n        'product_id': [1, 2, 3, 4, 5],\n        'name': ['Widget', 'Gadget', 'Tool', 'Device', 'Accessory'],\n        'category': ['Electronics', 'Electronics', 'Hardware', None, 'Electronics'],\n        'cost': [50, 60, 70, 80, 30],\n        'price': [100, 120, 140, 160, 60]\n    })\n\n    context.log.info(\n        f\"\ucd94\ucd9c \uc644\ub8cc - Customers: {len(customers)}, \"\n        f\"Orders: {len(orders)}, Products: {len(products)}\"\n    )\n\n    return customers, orders, products\n\n# ========== Silver Layer ==========\n\n@asset(\n    partitions_def=daily_partition,\n    group_name=\"silver\",\n    description=\"\uc815\uc81c\ub41c \uace0\uac1d \ub370\uc774\ud130\",\n    metadata={\"layer\": \"silver\"}\n)\ndef silver_customers(\n    context: AssetExecutionContext,\n    bronze_customers: pd.DataFrame\n) -> Output[pd.DataFrame]:\n    \"\"\"\n    \uace0\uac1d \ub370\uc774\ud130\ub97c \uc815\uc81c\ud569\ub2c8\ub2e4.\n    \"\"\"\n    df = bronze_customers.copy()\n\n    # \uc911\ubcf5 \uc81c\uac70\n    duplicates_before = df.duplicated(subset=['customer_id']).sum()\n    df = df.drop_duplicates(subset=['customer_id'], keep='first')\n\n    # Null \ucc98\ub9ac\n    nulls_before = df['name'].isnull().sum()\n    df['name'] = df['name'].fillna('Unknown')\n\n    context.log.info(\n        f\"\uc815\uc81c \uc644\ub8cc - \uc911\ubcf5 \uc81c\uac70: {duplicates_before}, Null \ucc98\ub9ac: {nulls_before}\"\n    )\n\n    return Output(\n        value=df,\n        metadata={\n            \"record_count\": len(df),\n            \"duplicates_removed\": int(duplicates_before),\n            \"nulls_filled\": int(nulls_before)\n        }\n    )\n\n@asset(\n    partitions_def=daily_partition,\n    group_name=\"silver\",\n    description=\"\uc815\uc81c\ub41c \uc8fc\ubb38 \ub370\uc774\ud130\",\n    metadata={\"layer\": \"silver\"}\n)\ndef silver_orders(\n    context: AssetExecutionContext,\n    bronze_orders: pd.DataFrame,\n    silver_customers: pd.DataFrame\n) -> Output[pd.DataFrame]:\n    \"\"\"\n    \uc8fc\ubb38 \ub370\uc774\ud130\ub97c \uc815\uc81c\ud569\ub2c8\ub2e4.\n    \"\"\"\n    df = bronze_orders.copy()\n\n    # \ube44\uc815\uc0c1 \uc218\ub7c9 \uc81c\uac70\n    invalid_quantity = (df['quantity'] <= 0).sum()\n    df = df[df['quantity'] > 0]\n\n    # \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uace0\uac1d \uc81c\uac70\n    valid_customer_ids = set(silver_customers['customer_id'])\n    invalid_customers = (~df['customer_id'].isin(valid_customer_ids)).sum()\n    df = df[df['customer_id'].isin(valid_customer_ids)]\n\n    # total_price \uc7ac\uacc4\uc0b0\n    df['total_price'] = df['quantity'] * df['unit_price']\n\n    context.log.info(\n        f\"\uc815\uc81c \uc644\ub8cc - \ube44\uc815\uc0c1 \uc218\ub7c9: {invalid_quantity}, \"\n        f\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uace0\uac1d: {invalid_customers}\"\n    )\n\n    return Output(\n        value=df,\n        metadata={\n            \"record_count\": len(df),\n            \"invalid_quantity_removed\": int(invalid_quantity),\n            \"invalid_customers_removed\": int(invalid_customers),\n            \"total_revenue\": MetadataValue.float(df['total_price'].sum())\n        }\n    )\n\n@asset(\n    group_name=\"silver\",\n    description=\"\uc815\uc81c\ub41c \uc81c\ud488 \ub370\uc774\ud130\",\n    metadata={\"layer\": \"silver\"}\n)\ndef silver_products(\n    context: AssetExecutionContext,\n    bronze_products: pd.DataFrame\n) -> Output[pd.DataFrame]:\n    \"\"\"\n    \uc81c\ud488 \ub370\uc774\ud130\ub97c \uc815\uc81c\ud569\ub2c8\ub2e4.\n    \"\"\"\n    df = bronze_products.copy()\n\n    # Category null \ucc98\ub9ac\n    nulls_before = df['category'].isnull().sum()\n    df['category'] = df['category'].fillna('Uncategorized')\n\n    # \ub9c8\uc9c4 \uacc4\uc0b0\n    df['margin'] = df['price'] - df['cost']\n    df['margin_pct'] = (df['margin'] / df['price']) * 100\n\n    return Output(\n        value=df,\n        metadata={\n            \"record_count\": len(df),\n            \"categories_filled\": int(nulls_before),\n            \"avg_margin_pct\": MetadataValue.float(df['margin_pct'].mean())\n        }\n    )\n\n# ========== Gold Layer ==========\n\n@asset(\n    partitions_def=daily_partition,\n    group_name=\"gold\",\n    description=\"\uc77c\ubcc4 \ub9e4\ucd9c \uc9c0\ud45c\",\n    metadata={\"layer\": \"gold\", \"business_metric\": \"revenue\"}\n)\ndef gold_daily_revenue(\n    context: AssetExecutionContext,\n    silver_orders: pd.DataFrame\n) -> Output[dict]:\n    \"\"\"\n    \uc77c\ubcc4 \ub9e4\ucd9c \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n    \"\"\"\n    partition_date = context.partition_key\n\n    metrics = {\n        'date': partition_date,\n        'total_revenue': float(silver_orders['total_price'].sum()),\n        'order_count': int(len(silver_orders)),\n        'avg_order_value': float(silver_orders['total_price'].mean()),\n        'unique_customers': int(silver_orders['customer_id'].nunique()),\n        'total_units_sold': int(silver_orders['quantity'].sum())\n    }\n\n    context.log.info(\n        f\"{partition_date} \ub9e4\ucd9c: ${metrics['total_revenue']:,.2f}, \"\n        f\"\uc8fc\ubb38: {metrics['order_count']}\uac74\"\n    )\n\n    return Output(\n        value=metrics,\n        metadata={\n            \"date\": partition_date,\n            \"total_revenue\": MetadataValue.float(metrics['total_revenue']),\n            \"order_count\": metrics['order_count'],\n            \"avg_order_value\": MetadataValue.float(metrics['avg_order_value'])\n        }\n    )\n\n@asset(\n    partitions_def=daily_partition,\n    group_name=\"gold\",\n    description=\"\uace0\uac1d \uc138\uadf8\uba3c\ud2b8 \ubd84\uc11d\",\n    metadata={\"layer\": \"gold\", \"business_metric\": \"customer_segmentation\"}\n)\ndef gold_customer_segments(\n    context: AssetExecutionContext,\n    silver_customers: pd.DataFrame,\n    silver_orders: pd.DataFrame\n) -> Output[pd.DataFrame]:\n    \"\"\"\n    \uace0\uac1d \uc138\uadf8\uba3c\ud2b8\ub97c \ubd84\uc11d\ud569\ub2c8\ub2e4.\n    \"\"\"\n    # \uace0\uac1d\ubcc4 \uc8fc\ubb38 \ud1b5\uacc4\n    customer_stats = silver_orders.groupby('customer_id').agg({\n        'order_id': 'count',\n        'total_price': 'sum',\n        'quantity': 'sum'\n    }).rename(columns={\n        'order_id': 'order_count',\n        'total_price': 'total_spent',\n        'quantity': 'total_units'\n    })\n\n    # \uace0\uac1d \uc815\ubcf4 \uacb0\ud569\n    segments = silver_customers.merge(\n        customer_stats,\n        on='customer_id',\n        how='left'\n    ).fillna(0)\n\n    # \uc138\uadf8\uba3c\ud2b8 \ubd84\ub958\n    def classify_segment(row):\n        if row['total_spent'] >= 500:\n            return 'VIP'\n        elif row['total_spent'] >= 200:\n            return 'Regular'\n        else:\n            return 'Casual'\n\n    segments['segment'] = segments.apply(classify_segment, axis=1)\n\n    # \uc138\uadf8\uba3c\ud2b8 \uc694\uc57d\n    segment_summary = segments.groupby('segment').agg({\n        'customer_id': 'count',\n        'total_spent': 'sum'\n    }).rename(columns={'customer_id': 'customer_count'})\n\n    context.log.info(f\"\uace0\uac1d \uc138\uadf8\uba3c\ud2b8:\\n{segment_summary}\")\n\n    return Output(\n        value=segments,\n        metadata={\n            \"total_customers\": len(segments),\n            \"segment_distribution\": MetadataValue.json(\n                segments['segment'].value_counts().to_dict()\n            ),\n            \"segment_summary\": MetadataValue.md(segment_summary.to_markdown())\n        }\n    )\n\n@asset(\n    partitions_def=daily_partition,\n    group_name=\"gold\",\n    description=\"\uc81c\ud488 \uc131\uacfc \ubd84\uc11d\",\n    metadata={\"layer\": \"gold\", \"business_metric\": \"product_performance\"}\n)\ndef gold_product_performance(\n    context: AssetExecutionContext,\n    silver_orders: pd.DataFrame,\n    silver_products: pd.DataFrame\n) -> Output[pd.DataFrame]:\n    \"\"\"\n    \uc81c\ud488 \uc131\uacfc\ub97c \ubd84\uc11d\ud569\ub2c8\ub2e4.\n    \"\"\"\n    # \uc81c\ud488\ubcc4 \ud310\ub9e4 \ud1b5\uacc4\n    product_sales = silver_orders.groupby('product_id').agg({\n        'order_id': 'count',\n        'quantity': 'sum',\n        'total_price': 'sum'\n    }).rename(columns={\n        'order_id': 'order_count',\n        'quantity': 'units_sold',\n        'total_price': 'revenue'\n    })\n\n    # \uc81c\ud488 \uc815\ubcf4 \uacb0\ud569\n    performance = silver_products.merge(\n        product_sales,\n        on='product_id',\n        how='left'\n    ).fillna(0)\n\n    # \uc218\uc775\uc131 \uacc4\uc0b0\n    performance['total_cost'] = performance['cost'] * performance['units_sold']\n    performance['total_profit'] = performance['revenue'] - performance['total_cost']\n    performance['roi'] = (performance['total_profit'] / performance['total_cost'] * 100).fillna(0)\n\n    # \uc21c\uc704\n    performance = performance.sort_values('revenue', ascending=False)\n    performance['rank'] = range(1, len(performance) + 1)\n\n    context.log.info(f\"\uc81c\ud488 \uc131\uacfc \ubd84\uc11d \uc644\ub8cc: {len(performance)}\uac1c \uc81c\ud488\")\n\n    return Output(\n        value=performance,\n        metadata={\n            \"product_count\": len(performance),\n            \"total_revenue\": MetadataValue.float(performance['revenue'].sum()),\n            \"total_profit\": MetadataValue.float(performance['total_profit'].sum()),\n            \"top_products\": MetadataValue.md(\n                performance[['name', 'revenue', 'units_sold']].head(3).to_markdown()\n            )\n        }\n    )\n\n# ========== Asset Checks ==========\n\n@asset_check(\n    asset=\"silver_customers\",\n    description=\"\uace0\uac1d \uc774\uba54\uc77c \uc720\ud6a8\uc131 \uac80\uc0ac\"\n)\ndef check_customer_emails(silver_customers: pd.DataFrame) -> AssetCheckResult:\n    \"\"\"\uc774\uba54\uc77c\uc774 \uc720\ud6a8\ud55c \ud615\uc2dd\uc778\uc9c0 \ud655\uc778\"\"\"\n    import re\n    email_pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n\n    invalid_emails = silver_customers[\n        ~silver_customers['email'].str.match(email_pattern, na=False)\n    ]\n\n    return AssetCheckResult(\n        passed=len(invalid_emails) == 0,\n        description=f\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uc774\uba54\uc77c: {len(invalid_emails)}\uac1c\",\n        severity=AssetCheckSeverity.WARN if len(invalid_emails) > 0 else None,\n        metadata={\"invalid_count\": len(invalid_emails)}\n    )\n\n@asset_check(\n    asset=\"silver_orders\",\n    description=\"\uc77c\ubcc4 \ub9e4\ucd9c \uc784\uacc4\uac12 \uac80\uc0ac\"\n)\ndef check_daily_revenue_threshold(silver_orders: pd.DataFrame) -> AssetCheckResult:\n    \"\"\"\uc77c\ubcc4 \ub9e4\ucd9c\uc774 \ucd5c\uc18c \uc784\uacc4\uac12\uc744 \ub118\ub294\uc9c0 \ud655\uc778\"\"\"\n    total_revenue = silver_orders['total_price'].sum()\n    threshold = 100  # \ucd5c\uc18c $100\n\n    return AssetCheckResult(\n        passed=total_revenue >= threshold,\n        description=f\"\uc77c\ubcc4 \ub9e4\ucd9c: ${total_revenue:.2f} (\ucd5c\uc18c: ${threshold})\",\n        severity=AssetCheckSeverity.WARN if total_revenue < threshold else None,\n        metadata={\n            \"total_revenue\": float(total_revenue),\n            \"threshold\": threshold\n        }\n    )\n\n@asset_check(\n    asset=\"gold_product_performance\",\n    description=\"\uc81c\ud488 \uc218\uc775\uc131 \uac80\uc0ac\"\n)\ndef check_product_profitability(gold_product_performance: pd.DataFrame) -> AssetCheckResult:\n    \"\"\"\ubaa8\ub4e0 \uc81c\ud488\uc774 \uc218\uc775\uc131\uc774 \uc788\ub294\uc9c0 \ud655\uc778\"\"\"\n    unprofitable = gold_product_performance[gold_product_performance['total_profit'] < 0]\n\n    return AssetCheckResult(\n        passed=len(unprofitable) == 0,\n        description=f\"\uc190\uc2e4 \uc81c\ud488: {len(unprofitable)}\uac1c\",\n        severity=AssetCheckSeverity.WARN if len(unprofitable) > 0 else None,\n        metadata={\n            \"unprofitable_count\": len(unprofitable),\n            \"unprofitable_products\": unprofitable['name'].tolist() if len(unprofitable) > 0 else []\n        }\n    )\n\n# ========== Jobs ==========\n\n# \ub808\uc774\uc5b4\ubcc4 Job\nbronze_job = define_asset_job(\n    name=\"bronze_layer_job\",\n    selection=AssetSelection.groups(\"bronze\"),\n    description=\"Bronze \ub808\uc774\uc5b4 \ub370\uc774\ud130 \ucd94\ucd9c\"\n)\n\nsilver_job = define_asset_job(\n    name=\"silver_layer_job\",\n    selection=AssetSelection.groups(\"silver\"),\n    description=\"Silver \ub808\uc774\uc5b4 \ub370\uc774\ud130 \uc815\uc81c\"\n)\n\ngold_job = define_asset_job(\n    name=\"gold_layer_job\",\n    selection=AssetSelection.groups(\"gold\"),\n    description=\"Gold \ub808\uc774\uc5b4 \ube44\uc988\ub2c8\uc2a4 \uc9c0\ud45c\"\n)\n\n# \uc804\uccb4 \ud30c\uc774\ud504\ub77c\uc778\nfull_pipeline_job = define_asset_job(\n    name=\"full_pipeline_job\",\n    selection=AssetSelection.groups(\"bronze\", \"silver\", \"gold\"),\n    description=\"\uc804\uccb4 E-commerce \ud30c\uc774\ud504\ub77c\uc778\"\n)\n\n# Definitions\ndefs = Definitions(\n    assets=[\n        extract_bronze_data,\n        silver_customers,\n        silver_orders,\n        silver_products,\n        gold_daily_revenue,\n        gold_customer_segments,\n        gold_product_performance\n    ],\n    asset_checks=[\n        check_customer_emails,\n        check_daily_revenue_threshold,\n        check_product_profitability\n    ],\n    jobs=[\n        bronze_job,\n        silver_job,\n        gold_job,\n        full_pipeline_job\n    ]\n)\n"})})]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\uc694\uc57d",children:"\uc694\uc57d"}),"\n",(0,s.jsx)(e.p,{children:"\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Dagster Assets\uc758 \ud575\uc2ec \uac1c\ub150\uacfc \uc2e4\uc6a9\uc801\uc778 \uc0ac\uc6a9 \ubc29\ubc95\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Asset \uac1c\ub150"}),": \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \ub370\uc774\ud130 \uac1d\uccb4\ub97c \uc120\uc5b8\uc801\uc73c\ub85c \uc815\uc758"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"@asset \ub370\ucf54\ub808\uc774\ud130"}),": Asset \uc0dd\uc131\uacfc \uc124\uc815 \ubc29\ubc95"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Asset \uc758\uc874\uc131"}),": \uba85\uc2dc\uc801/\uc554\uc2dc\uc801 \uc758\uc874\uc131 \uad00\ub9ac"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Asset \uadf8\ub8f9"}),": \ub17c\ub9ac\uc801 \uc870\uc9c1\ud654\uc640 \uad00\ub9ac"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Multi-asset"}),": \uc5ec\ub7ec Asset\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc0dd\uc131"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Partitioned Assets"}),": \uc2dc\uac04/\ubc94\uc8fc\ubcc4 \ub370\uc774\ud130 \ubd84\ud560 \ucc98\ub9ac"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Dynamic Partitions"}),": \ub7f0\ud0c0\uc784 \ud30c\ud2f0\uc158 \uad00\ub9ac"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Asset Checks"}),": \ub370\uc774\ud130 \ud488\uc9c8 \uac80\uc99d"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Asset Metadata"}),": \ubb38\uc11c\ud654\uc640 \ubaa8\ub2c8\ud130\ub9c1"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Asset Selection"}),": \uc720\uc5f0\ud55c Asset \uc120\ud0dd\uacfc \uc2e4\ud589"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc2e4\uc2b5"}),": \uc2e4\uc804 \ud504\ub85c\uc81d\ud2b8\uc640 \ud574\ub2f5"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Asset \uae30\ubc18 \uc811\uadfc\uc740 \ub370\uc774\ud130 \uacc4\ubcf4 \ucd94\uc801, \uc99d\ubd84 \ucc98\ub9ac, \ub370\uc774\ud130 \ud488\uc9c8 \ubcf4\uc7a5\uc744 \uac00\ub2a5\ud558\uac8c \ud558\uba70, \ud604\ub300\uc801\uc778 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95\uc758 \uae30\ucd08\uac00 \ub429\ub2c8\ub2e4."})]})}function _(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);