"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1160],{8453:(n,t,e)=>{e.d(t,{R:()=>o,x:()=>s});var i=e(6540);const a={},r=i.createContext(a);function o(n){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(r.Provider,{value:t},n.children)}},8940:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"dagster/partitions","title":"6. Partitions","description":"\ub370\uc774\ud130\ub97c \ubd84\ud560\ud558\uc5ec \uad00\ub9ac\ud558\uace0 \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4.","source":"@site/docs/dagster/partitions.md","sourceDirName":"dagster","slug":"/dagster/partitions","permalink":"/tobias-docs/comp-2/docs/dagster/partitions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dagster/partitions.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"dagsterSidebar","previous":{"title":"5. I/O Managers","permalink":"/tobias-docs/comp-2/docs/dagster/io-managers"},"next":{"title":"7. \ud14c\uc2a4\ud2b8","permalink":"/tobias-docs/comp-2/docs/dagster/testing"}}');var a=e(4848),r=e(8453);const o={sidebar_position:7},s="6. Partitions",l={},d=[{value:"6.1 Partition \uac1c\ub150",id:"61-partition-\uac1c\ub150",level:2},{value:"6.2 Daily Partitions",id:"62-daily-partitions",level:2},{value:"6.2.1 \uae30\ubcf8 Daily Partition",id:"621-\uae30\ubcf8-daily-partition",level:3},{value:"6.2.2 Partition \uc758\uc874\uc131",id:"622-partition-\uc758\uc874\uc131",level:3},{value:"6.3 Time-based Partitions",id:"63-time-based-partitions",level:2},{value:"6.3.1 Hourly Partitions",id:"631-hourly-partitions",level:3},{value:"6.3.2 Weekly Partitions",id:"632-weekly-partitions",level:3},{value:"6.3.3 Monthly Partitions",id:"633-monthly-partitions",level:3},{value:"6.4 Static Partitions",id:"64-static-partitions",level:2},{value:"6.4.1 \uae30\ubcf8 Static Partition",id:"641-\uae30\ubcf8-static-partition",level:3},{value:"6.4.2 \uce74\ud14c\uace0\ub9ac Partition",id:"642-\uce74\ud14c\uace0\ub9ac-partition",level:3},{value:"6.5 Multi-dimensional Partitions",id:"65-multi-dimensional-partitions",level:2},{value:"6.6 Partition Mapping",id:"66-partition-mapping",level:2},{value:"6.6.1 TimeWindow Partition Mapping",id:"661-timewindow-partition-mapping",level:3},{value:"6.6.2 Identity Partition Mapping",id:"662-identity-partition-mapping",level:3},{value:"6.7 Backfills",id:"67-backfills",level:2},{value:"6.7.1 UI\uc5d0\uc11c Backfill",id:"671-ui\uc5d0\uc11c-backfill",level:3},{value:"6.7.2 \ucf54\ub4dc\ub85c Backfill",id:"672-\ucf54\ub4dc\ub85c-backfill",level:3},{value:"6.8 Incremental Loading",id:"68-incremental-loading",level:2},{value:"6.9 Dynamic Partitions",id:"69-dynamic-partitions",level:2},{value:"6.10 \uc2e4\uc2b5 \ubb38\uc81c",id:"610-\uc2e4\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c: \uc6d4\ubcc4 \ub9e4\ucd9c \ud30c\uc774\ud504\ub77c\uc778",id:"\ubb38\uc81c-\uc6d4\ubcc4-\ub9e4\ucd9c-\ud30c\uc774\ud504\ub77c\uc778",level:3}];function c(n){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components},{Details:e}=t;return e||function(n,t){throw new Error("Expected "+(t?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"6-partitions",children:"6. Partitions"})}),"\n",(0,a.jsx)(t.p,{children:"\ub370\uc774\ud130\ub97c \ubd84\ud560\ud558\uc5ec \uad00\ub9ac\ud558\uace0 \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4."}),"\n",(0,a.jsx)(t.h2,{id:"61-partition-\uac1c\ub150",children:"6.1 Partition \uac1c\ub150"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Partition"}),"\uc740 \ub370\uc774\ud130\ub97c \ub17c\ub9ac\uc801\uc73c\ub85c \ubd84\ud560\ud558\uc5ec \ub3c5\ub9bd\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-markdown",children:"**\uc0ac\uc6a9 \uc0ac\ub840:**\n- \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 (\uc77c\ubcc4, \uc6d4\ubcc4 \ucc98\ub9ac)\n- \uc9c0\uc5ed\ubcc4 \ub370\uc774\ud130 (\uad6d\uac00, \ub3c4\uc2dc\ubcc4)\n- \uc81c\ud488\ubcc4 \ub370\uc774\ud130 (\uce74\ud14c\uace0\ub9ac\ubcc4)\n- \uc810\uc9c4\uc801 \uc5c5\ub370\uc774\ud2b8 (\uc804\uccb4\uac00 \uc544\ub2cc \uc77c\ubd80\ub9cc)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"\uc7a5\uc810:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"\uc7ac\uacc4\uc0b0 \ubc94\uc704 \ucd5c\uc18c\ud654"}),"\n",(0,a.jsx)(t.li,{children:"\ubcd1\ub82c \ucc98\ub9ac \uac00\ub2a5"}),"\n",(0,a.jsx)(t.li,{children:"\uc2e4\ud328 \uc2dc \uc77c\ubd80\ub9cc \uc7ac\uc2e4\ud589"}),"\n",(0,a.jsx)(t.li,{children:"\ubc31\ud544 (\uacfc\uac70 \ub370\uc774\ud130 \uc7ac\ucc98\ub9ac) \uc6a9\uc774"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"62-daily-partitions",children:"6.2 Daily Partitions"}),"\n",(0,a.jsx)(t.h3,{id:"621-\uae30\ubcf8-daily-partition",children:"6.2.1 \uae30\ubcf8 Daily Partition"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import asset, DailyPartitionsDefinition\nimport pandas as pd\nfrom datetime import datetime\n\n# Daily partition \uc815\uc758\ndaily_partitions = DailyPartitionsDefinition(start_date="2024-01-01")\n\n@asset(partitions_def=daily_partitions)\ndef daily_sales(context) -> pd.DataFrame:\n    partition_date = context.partition_key\n    context.log.info(f"Processing data for {partition_date}")\n\n    # \ud574\ub2f9 \ub0a0\uc9dc\uc758 \ub370\uc774\ud130\ub9cc \ucc98\ub9ac\n    df = pd.read_csv(f"sales_{partition_date}.csv")\n    return df\n'})}),"\n",(0,a.jsx)(t.h3,{id:"622-partition-\uc758\uc874\uc131",children:"6.2.2 Partition \uc758\uc874\uc131"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'@asset(partitions_def=daily_partitions)\ndef raw_logs(context) -> pd.DataFrame:\n    date = context.partition_key\n    return load_logs_for_date(date)\n\n@asset(partitions_def=daily_partitions)\ndef processed_logs(context, raw_logs: pd.DataFrame) -> pd.DataFrame:\n    """\uac19\uc740 partition\uc758 raw_logs\uc5d0 \uc758\uc874"""\n    date = context.partition_key\n    context.log.info(f"Processing logs for {date}")\n\n    return raw_logs[raw_logs[\'status\'] == \'success\']\n\n@asset(partitions_def=daily_partitions)\ndef daily_summary(context, processed_logs: pd.DataFrame) -> dict:\n    """\uc77c\ubcc4 \uc694\uc57d"""\n    return {\n        "date": context.partition_key,\n        "total_count": len(processed_logs),\n        "success_rate": len(processed_logs) / len(processed_logs) * 100\n    }\n'})}),"\n",(0,a.jsx)(t.h2,{id:"63-time-based-partitions",children:"6.3 Time-based Partitions"}),"\n",(0,a.jsx)(t.h3,{id:"631-hourly-partitions",children:"6.3.1 Hourly Partitions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import HourlyPartitionsDefinition\n\nhourly_partitions = HourlyPartitionsDefinition(\n    start_date="2024-01-01-00:00"\n)\n\n@asset(partitions_def=hourly_partitions)\ndef hourly_metrics(context) -> dict:\n    hour = context.partition_key  # "2024-01-01-15:00"\n    context.log.info(f"Processing hour: {hour}")\n\n    return {\n        "hour": hour,\n        "requests": calculate_requests(hour),\n        "errors": calculate_errors(hour)\n    }\n'})}),"\n",(0,a.jsx)(t.h3,{id:"632-weekly-partitions",children:"6.3.2 Weekly Partitions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import WeeklyPartitionsDefinition\n\nweekly_partitions = WeeklyPartitionsDefinition(\n    start_date="2024-01-01"\n)\n\n@asset(partitions_def=weekly_partitions)\ndef weekly_report(context) -> pd.DataFrame:\n    week_start = context.partition_key\n    context.log.info(f"Processing week starting: {week_start}")\n\n    # \uc8fc\uac04 \ub370\uc774\ud130 \uc9d1\uacc4\n    return generate_weekly_report(week_start)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"633-monthly-partitions",children:"6.3.3 Monthly Partitions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import MonthlyPartitionsDefinition\n\nmonthly_partitions = MonthlyPartitionsDefinition(\n    start_date="2024-01-01"\n)\n\n@asset(partitions_def=monthly_partitions)\ndef monthly_sales_report(context) -> pd.DataFrame:\n    month = context.partition_key  # "2024-01"\n    context.log.info(f"Processing month: {month}")\n\n    return aggregate_monthly_sales(month)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"64-static-partitions",children:"6.4 Static Partitions"}),"\n",(0,a.jsx)(t.h3,{id:"641-\uae30\ubcf8-static-partition",children:"6.4.1 \uae30\ubcf8 Static Partition"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import StaticPartitionsDefinition, asset\n\nregions = StaticPartitionsDefinition(\n    ["north", "south", "east", "west"]\n)\n\n@asset(partitions_def=regions)\ndef regional_data(context) -> pd.DataFrame:\n    region = context.partition_key\n    context.log.info(f"Processing region: {region}")\n\n    return load_data_for_region(region)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"642-\uce74\ud14c\uace0\ub9ac-partition",children:"6.4.2 \uce74\ud14c\uace0\ub9ac Partition"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'product_categories = StaticPartitionsDefinition([\n    "electronics",\n    "clothing",\n    "food",\n    "books"\n])\n\n@asset(partitions_def=product_categories)\ndef category_sales(context) -> pd.DataFrame:\n    category = context.partition_key\n\n    df = pd.read_csv("sales.csv")\n    return df[df[\'category\'] == category]\n\n@asset(partitions_def=product_categories)\ndef category_metrics(\n    context,\n    category_sales: pd.DataFrame\n) -> dict:\n    """\uce74\ud14c\uace0\ub9ac\ubcc4 \uba54\ud2b8\ub9ad"""\n    return {\n        "category": context.partition_key,\n        "total_sales": category_sales[\'amount\'].sum(),\n        "num_transactions": len(category_sales)\n    }\n'})}),"\n",(0,a.jsx)(t.h2,{id:"65-multi-dimensional-partitions",children:"6.5 Multi-dimensional Partitions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import MultiPartitionsDefinition\n\n# \ub0a0\uc9dc x \uc9c0\uc5ed\ndate_region_partitions = MultiPartitionsDefinition({\n    "date": daily_partitions,\n    "region": regions\n})\n\n@asset(partitions_def=date_region_partitions)\ndef regional_daily_sales(context) -> pd.DataFrame:\n    date = context.partition_key.keys_by_dimension["date"]\n    region = context.partition_key.keys_by_dimension["region"]\n\n    context.log.info(f"Processing {date} for {region}")\n\n    return load_sales(date=date, region=region)\n\n@asset(partitions_def=date_region_partitions)\ndef regional_daily_summary(\n    context,\n    regional_daily_sales: pd.DataFrame\n) -> dict:\n    """\ub0a0\uc9dc\ubcc4, \uc9c0\uc5ed\ubcc4 \uc694\uc57d"""\n    return {\n        "date": context.partition_key.keys_by_dimension["date"],\n        "region": context.partition_key.keys_by_dimension["region"],\n        "total": regional_daily_sales[\'amount\'].sum()\n    }\n'})}),"\n",(0,a.jsx)(t.h2,{id:"66-partition-mapping",children:"6.6 Partition Mapping"}),"\n",(0,a.jsx)(t.h3,{id:"661-timewindow-partition-mapping",children:"6.6.1 TimeWindow Partition Mapping"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import TimeWindowPartitionMapping\n\n@asset(partitions_def=daily_partitions)\ndef daily_data(context) -> pd.DataFrame:\n    return load_daily_data(context.partition_key)\n\n# \uc8fc\uac04 partition\uc774 \uc77c\ubcc4 partition\uc5d0 \uc758\uc874\n@asset(\n    partitions_def=weekly_partitions,\n    ins={\n        "daily_data": AssetIn(\n            partition_mapping=TimeWindowPartitionMapping()\n        )\n    }\n)\ndef weekly_summary(context, daily_data: dict) -> pd.DataFrame:\n    """\uc77c\uc8fc\uc77c\uce58 daily_data\ub97c \ubaa8\ub450 \ubc1b\uc544\uc11c \uc9d1\uacc4"""\n    # daily_data\ub294 \ud574\ub2f9 \uc8fc\uc758 \ubaa8\ub4e0 \uc77c\ubcc4 \ub370\uc774\ud130\n    all_dfs = [df for df in daily_data.values()]\n    return pd.concat(all_dfs)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"662-identity-partition-mapping",children:"6.6.2 Identity Partition Mapping"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import IdentityPartitionMapping, AssetIn\n\n@asset(partitions_def=regions)\ndef raw_regional_data(context) -> pd.DataFrame:\n    return load_data(context.partition_key)\n\n@asset(\n    partitions_def=regions,\n    ins={\n        "raw_regional_data": AssetIn(\n            partition_mapping=IdentityPartitionMapping()\n        )\n    }\n)\ndef processed_regional_data(\n    context,\n    raw_regional_data: pd.DataFrame\n) -> pd.DataFrame:\n    """\uac19\uc740 partition\uc5d0 \ub300\uc751"""\n    return process_data(raw_regional_data)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"67-backfills",children:"6.7 Backfills"}),"\n",(0,a.jsx)(t.h3,{id:"671-ui\uc5d0\uc11c-backfill",children:"6.7.1 UI\uc5d0\uc11c Backfill"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-markdown",children:'1. Dagit UI\uc5d0\uc11c Asset \uc120\ud0dd\n2. "Materialize" \ud074\ub9ad\n3. "Partition selection" \uc120\ud0dd\n4. \ub0a0\uc9dc \ubc94\uc704 \uc9c0\uc815 (\uc608: 2024-01-01 ~ 2024-01-31)\n5. "Launch backfill" \ud074\ub9ad\n'})}),"\n",(0,a.jsx)(t.h3,{id:"672-\ucf54\ub4dc\ub85c-backfill",children:"6.7.2 \ucf54\ub4dc\ub85c Backfill"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import build_asset_context, materialize\nfrom datetime import datetime, timedelta\n\n# \ud2b9\uc815 \uae30\uac04 backfill\ndef backfill_assets(start_date: str, end_date: str):\n    """\uc9c0\uc815\ub41c \uae30\uac04\uc758 \ubaa8\ub4e0 partition \uc2e4\ud589"""\n    start = datetime.strptime(start_date, "%Y-%m-%d")\n    end = datetime.strptime(end_date, "%Y-%m-%d")\n\n    current = start\n    while current <= end:\n        partition_key = current.strftime("%Y-%m-%d")\n\n        context = build_asset_context(\n            partition_key=partition_key\n        )\n\n        materialize(\n            [daily_sales, daily_summary],\n            partition_key=partition_key\n        )\n\n        current += timedelta(days=1)\n\n# \uc2e4\ud589\nbackfill_assets("2024-01-01", "2024-01-31")\n'})}),"\n",(0,a.jsx)(t.h2,{id:"68-incremental-loading",children:"6.8 Incremental Loading"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import asset, OpExecutionContext\nimport pandas as pd\n\n@asset(partitions_def=daily_partitions)\ndef incremental_sales(context: OpExecutionContext) -> pd.DataFrame:\n    """\uc99d\ubd84 \ub85c\ub4dc: \ud574\ub2f9 \ub0a0\uc9dc \ub370\uc774\ud130\ub9cc \ucc98\ub9ac"""\n    date = context.partition_key\n\n    # \uc774\uc804 \ub370\uc774\ud130\ub294 \uac74\ub4dc\ub9ac\uc9c0 \uc54a\uc74c\n    # \ud574\ub2f9 \ub0a0\uc9dc \ub370\uc774\ud130\ub9cc \ub85c\ub4dc\n    new_data = pd.read_csv(f"sales_{date}.csv")\n\n    context.log.info(\n        f"Loaded {len(new_data)} new records for {date}"\n    )\n\n    return new_data\n\n@asset(partitions_def=daily_partitions)\ndef cumulative_sales(\n    context: OpExecutionContext,\n    incremental_sales: pd.DataFrame\n) -> pd.DataFrame:\n    """\ub204\uc801 \ub370\uc774\ud130: \ubaa8\ub4e0 \uc774\uc804 partition \ub370\uc774\ud130\uc640 \uacb0\ud569"""\n    date = context.partition_key\n\n    # \uc774\uc804 partition\ub4e4\uc758 \ub370\uc774\ud130 \ub85c\ub4dc\n    all_data = []\n\n    # \ud604\uc7ac \ub0a0\uc9dc\uae4c\uc9c0\uc758 \ubaa8\ub4e0 partition\n    for partition_key in daily_partitions.get_partition_keys_in_range(\n        start=daily_partitions.start,\n        end=date\n    ):\n        data = load_partition_data(partition_key)\n        all_data.append(data)\n\n    # \ubaa8\ub4e0 \ub370\uc774\ud130 \uacb0\ud569\n    cumulative = pd.concat(all_data, ignore_index=True)\n\n    return cumulative\n'})}),"\n",(0,a.jsx)(t.h2,{id:"69-dynamic-partitions",children:"6.9 Dynamic Partitions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import (\n    DynamicPartitionsDefinition,\n    asset,\n    sensor,\n    RunRequest\n)\n\n# \ub3d9\uc801 partition \uc815\uc758\nfile_partitions = DynamicPartitionsDefinition(name="files")\n\n@asset(partitions_def=file_partitions)\ndef process_file(context) -> dict:\n    filename = context.partition_key\n    context.log.info(f"Processing {filename}")\n\n    data = load_file(filename)\n    return process_data(data)\n\n# \uc0c8 \ud30c\uc77c \uac10\uc9c0 \uc2dc partition \ucd94\uac00\n@sensor(jobs=[process_file_job])\ndef file_sensor(context):\n    # \uc0c8 \ud30c\uc77c \ud655\uc778\n    new_files = check_for_new_files()\n\n    for filename in new_files:\n        # \uc0c8 partition \ucd94\uac00\n        context.instance.add_dynamic_partitions(\n            partitions_def_name="files",\n            partition_keys=[filename]\n        )\n\n        # \uc2e4\ud589 \uc694\uccad\n        yield RunRequest(\n            run_key=filename,\n            partition_key=filename\n        )\n'})}),"\n",(0,a.jsx)(t.h2,{id:"610-\uc2e4\uc2b5-\ubb38\uc81c",children:"6.10 \uc2e4\uc2b5 \ubb38\uc81c"}),"\n",(0,a.jsx)(t.h3,{id:"\ubb38\uc81c-\uc6d4\ubcc4-\ub9e4\ucd9c-\ud30c\uc774\ud504\ub77c\uc778",children:"\ubb38\uc81c: \uc6d4\ubcc4 \ub9e4\ucd9c \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,a.jsx)(t.p,{children:"\uc6d4\ubcc4\ub85c partitioning\ub41c \ub9e4\ucd9c \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ud604\ud558\uc138\uc694."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"\uc694\uad6c\uc0ac\ud56d:"})}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"\uc6d4\ubcc4 \uc6d0\uc2dc \ub370\uc774\ud130 \ub85c\ub4dc"}),"\n",(0,a.jsx)(t.li,{children:"\ub370\uc774\ud130 \uc815\uc81c (\uacb0\uce21\uce58, \uc911\ubcf5 \uc81c\uac70)"}),"\n",(0,a.jsx)(t.li,{children:"\uc6d4\ubcc4 \uc9d1\uacc4 (\ucd1d \ub9e4\ucd9c, \ud3c9\uade0, \uc81c\ud488\ubcc4)"}),"\n",(0,a.jsx)(t.li,{children:"\ubd84\uae30\ubcc4 \uc694\uc57d (3\uac1c\uc6d4 \ub370\uc774\ud130 \uacb0\ud569)"}),"\n"]}),"\n",(0,a.jsxs)(e,{children:[(0,a.jsx)("summary",{children:"\ud574\ub2f5"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from dagster import (\n    asset,\n    MonthlyPartitionsDefinition,\n    TimeWindowPartitionMapping,\n    AssetIn,\n    Definitions\n)\nimport pandas as pd\nfrom datetime import datetime\n\n# Monthly partition\nmonthly = MonthlyPartitionsDefinition(start_date="2024-01-01")\n\n# Quarterly partition (3\uac1c\uc6d4)\nfrom dagster import PartitionsDefinition\n\nclass QuarterlyPartitionsDefinition(PartitionsDefinition):\n    def get_partition_keys(self, current_time=None):\n        return [\n            "2024-Q1",\n            "2024-Q2",\n            "2024-Q3",\n            "2024-Q4"\n        ]\n\nquarterly = QuarterlyPartitionsDefinition()\n\n# 1. \uc6d4\ubcc4 \uc6d0\uc2dc \ub370\uc774\ud130\n@asset(partitions_def=monthly)\ndef raw_monthly_sales(context) -> pd.DataFrame:\n    month = context.partition_key  # "2024-01"\n    context.log.info(f"Loading sales for {month}")\n\n    # CSV \ub85c\ub4dc\n    df = pd.read_csv(f"sales_{month}.csv")\n\n    context.add_output_metadata({\n        "num_rows": len(df),\n        "month": month\n    })\n\n    return df\n\n# 2. \ub370\uc774\ud130 \uc815\uc81c\n@asset(partitions_def=monthly)\ndef cleaned_monthly_sales(\n    context,\n    raw_monthly_sales: pd.DataFrame\n) -> pd.DataFrame:\n    """\uacb0\uce21\uce58 \ubc0f \uc911\ubcf5 \uc81c\uac70"""\n    df = raw_monthly_sales.copy()\n\n    # \uacb0\uce21\uce58 \uc81c\uac70\n    df = df.dropna()\n\n    # \uc911\ubcf5 \uc81c\uac70\n    df = df.drop_duplicates(subset=[\'order_id\'])\n\n    context.log.info(\n        f"Cleaned: {len(raw_monthly_sales)} -> {len(df)} rows"\n    )\n\n    context.add_output_metadata({\n        "removed_rows": len(raw_monthly_sales) - len(df),\n        "final_rows": len(df)\n    })\n\n    return df\n\n# 3. \uc6d4\ubcc4 \uc9d1\uacc4\n@asset(partitions_def=monthly)\ndef monthly_summary(\n    context,\n    cleaned_monthly_sales: pd.DataFrame\n) -> pd.DataFrame:\n    """\uc6d4\ubcc4 \uc694\uc57d \ud1b5\uacc4"""\n    month = context.partition_key\n\n    summary = pd.DataFrame({\n        "month": [month],\n        "total_sales": [cleaned_monthly_sales[\'amount\'].sum()],\n        "avg_order": [cleaned_monthly_sales[\'amount\'].mean()],\n        "num_orders": [len(cleaned_monthly_sales)],\n        "num_customers": [cleaned_monthly_sales[\'customer_id\'].nunique()]\n    })\n\n    # \uc81c\ud488\ubcc4 \uc9d1\uacc4\n    by_product = cleaned_monthly_sales.groupby(\'product\').agg({\n        \'amount\': [\'sum\', \'count\']\n    }).reset_index()\n\n    context.add_output_metadata({\n        "total_sales": float(summary[\'total_sales\'].iloc[0]),\n        "num_products": len(by_product)\n    })\n\n    return summary\n\n# 4. \ubd84\uae30\ubcc4 \uc694\uc57d (3\uac1c\uc6d4 \ub370\uc774\ud130)\n@asset(\n    partitions_def=quarterly,\n    ins={\n        "monthly_summary": AssetIn(\n            partition_mapping=TimeWindowPartitionMapping()\n        )\n    }\n)\ndef quarterly_report(\n    context,\n    monthly_summary: dict\n) -> pd.DataFrame:\n    """\ubd84\uae30\ubcc4 \ub9ac\ud3ec\ud2b8: 3\uac1c\uc6d4 \ub370\uc774\ud130 \uacb0\ud569"""\n    quarter = context.partition_key  # "2024-Q1"\n\n    # \ubaa8\ub4e0 \uc6d4\ubcc4 \ub370\uc774\ud130 \uacb0\ud569\n    all_months = []\n    for month_df in monthly_summary.values():\n        all_months.append(month_df)\n\n    quarterly_data = pd.concat(all_months, ignore_index=True)\n\n    # \ubd84\uae30 \uc9d1\uacc4\n    report = pd.DataFrame({\n        "quarter": [quarter],\n        "total_sales": [quarterly_data[\'total_sales\'].sum()],\n        "avg_monthly_sales": [quarterly_data[\'total_sales\'].mean()],\n        "total_orders": [quarterly_data[\'num_orders\'].sum()],\n        "total_customers": [quarterly_data[\'num_customers\'].sum()]\n    })\n\n    context.log.info(\n        f"Quarterly report for {quarter}: "\n        f"${report[\'total_sales\'].iloc[0]:,.2f}"\n    )\n\n    return report\n\n# Definitions\ndefs = Definitions(\n    assets=[\n        raw_monthly_sales,\n        cleaned_monthly_sales,\n        monthly_summary,\n        quarterly_report\n    ]\n)\n'})})]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.p,{children:["\ub2e4\uc74c: ",(0,a.jsx)(t.a,{href:"./testing",children:"\ud14c\uc2a4\ud2b8"})]}),"\n",(0,a.jsx)(t.admonition,{title:"Partition \ubaa8\ubc94 \uc0ac\ub840",type:"tip",children:(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"\uc801\uc808\ud55c \ud06c\uae30"}),": \ub108\ubb34 \uc791\uc73c\uba74 \uc624\ubc84\ud5e4\ub4dc, \ub108\ubb34 \ud06c\uba74 \uc7ac\uacc4\uc0b0 \ube44\uc6a9 \uc99d\uac00"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"\uc77c\uad00\ub41c \ud0a4"}),": \ub0a0\uc9dc\ub294 ISO \ud615\uc2dd (YYYY-MM-DD)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"\uc758\uc874\uc131 \uba85\uc2dc"}),": Partition mapping\uc73c\ub85c \uba85\ud655\ud788 \ud45c\ud604"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"\ubc31\ud544 \uacc4\ud68d"}),": \uacfc\uac70 \ub370\uc774\ud130 \uc7ac\ucc98\ub9ac \uc804\ub7b5 \uc218\ub9bd"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"\ubaa8\ub2c8\ud130\ub9c1"}),": \uc2e4\ud328\ud55c partition \ucd94\uc801"]}),"\n"]})})]})}function p(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}}}]);