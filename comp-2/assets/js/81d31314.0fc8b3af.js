"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2190],{6900:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"webapp/database","title":"4. \ub370\uc774\ud130\ubca0\uc774\uc2a4","description":"SQLAlchemy\ub97c \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud1b5\ud569\uacfc \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \uad00\ub9ac \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.","source":"@site/docs/webapp/database.md","sourceDirName":"webapp","slug":"/webapp/database","permalink":"/docs/webapp/database","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/webapp/database.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"webappSidebar","previous":{"title":"3. API \uc124\uacc4","permalink":"/docs/webapp/api-design"},"next":{"title":"5. Frontend \uae30\ucd08","permalink":"/docs/webapp/frontend-basics"}}');var r=s(4848),a=s(8453);const i={sidebar_position:5},l="4. \ub370\uc774\ud130\ubca0\uc774\uc2a4",o={},d=[{value:"4.1 ORM vs Raw SQL",id:"41-orm-vs-raw-sql",level:2},{value:"ORM (Object-Relational Mapping)",id:"orm-object-relational-mapping",level:3},{value:"Raw SQL",id:"raw-sql",level:3},{value:"\uc5b8\uc81c \ubb34\uc5c7\uc744 \uc0ac\uc6a9\ud560\uae4c?",id:"\uc5b8\uc81c-\ubb34\uc5c7\uc744-\uc0ac\uc6a9\ud560\uae4c",level:3},{value:"4.2 SQLAlchemy \uae30\ubcf8 \uac1c\ub150",id:"42-sqlalchemy-\uae30\ubcf8-\uac1c\ub150",level:2},{value:"Core vs ORM",id:"core-vs-orm",level:3},{value:"SQLAlchemy 2.0 \uc2a4\ud0c0\uc77c",id:"sqlalchemy-20-\uc2a4\ud0c0\uc77c",level:3},{value:"4.3 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc124\uc815",id:"43-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\uacb0-\uc124\uc815",level:2},{value:"\uae30\ubcf8 \uc5f0\uacb0 \uc124\uc815",id:"\uae30\ubcf8-\uc5f0\uacb0-\uc124\uc815",level:3},{value:"\ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 URL \uc608\uc81c",id:"\ub2e4\uc591\ud55c-\ub370\uc774\ud130\ubca0\uc774\uc2a4-url-\uc608\uc81c",level:3},{value:"FastAPI\uc640 \ud1b5\ud569",id:"fastapi\uc640-\ud1b5\ud569",level:3},{value:"4.4 \ubaa8\ub378 \uc815\uc758 (Table, Column, \ub370\uc774\ud130 \ud0c0\uc785)",id:"44-\ubaa8\ub378-\uc815\uc758-table-column-\ub370\uc774\ud130-\ud0c0\uc785",level:2},{value:"\uae30\ubcf8 \ubaa8\ub378 \uc815\uc758",id:"\uae30\ubcf8-\ubaa8\ub378-\uc815\uc758",level:3},{value:"\uc8fc\uc694 \ub370\uc774\ud130 \ud0c0\uc785",id:"\uc8fc\uc694-\ub370\uc774\ud130-\ud0c0\uc785",level:3},{value:"\uc81c\uc57d \uc870\uac74 (Constraints)",id:"\uc81c\uc57d-\uc870\uac74-constraints",level:3},{value:"4.5 \uad00\uacc4 \uc815\uc758 (1, N, 1:1)",id:"45-\uad00\uacc4-\uc815\uc758-1-n-11",level:2},{value:"One-to-Many (1) \uad00\uacc4",id:"one-to-many-1-\uad00\uacc4",level:3},{value:"Many-to-Many (N) \uad00\uacc4",id:"many-to-many-n-\uad00\uacc4",level:3},{value:"Association Object Pattern (\ucd94\uac00 \uc18d\uc131\uc774 \uc788\ub294 N)",id:"association-object-pattern-\ucd94\uac00-\uc18d\uc131\uc774-\uc788\ub294-n",level:3},{value:"One-to-One (1:1) \uad00\uacc4",id:"one-to-one-11-\uad00\uacc4",level:3},{value:"Cascade \uc635\uc158",id:"cascade-\uc635\uc158",level:3},{value:"4.6 CRUD \uc791\uc5c5 (Create, Read, Update, Delete)",id:"46-crud-\uc791\uc5c5-create-read-update-delete",level:2},{value:"Create (\uc0dd\uc131)",id:"create-\uc0dd\uc131",level:3},{value:"Read (\uc870\ud68c)",id:"read-\uc870\ud68c",level:3},{value:"Update (\uc218\uc815)",id:"update-\uc218\uc815",level:3},{value:"Delete (\uc0ad\uc81c)",id:"delete-\uc0ad\uc81c",level:3},{value:"\ud2b8\ub79c\uc7ad\uc158\uacfc \ud568\uaed8 \uc0ac\uc6a9",id:"\ud2b8\ub79c\uc7ad\uc158\uacfc-\ud568\uaed8-\uc0ac\uc6a9",level:3},{value:"4.7 \ucffc\ub9ac \uc791\uc131 \ubc0f \ucd5c\uc801\ud654",id:"47-\ucffc\ub9ac-\uc791\uc131-\ubc0f-\ucd5c\uc801\ud654",level:2},{value:"\uae30\ubcf8 \ucffc\ub9ac \ud328\ud134",id:"\uae30\ubcf8-\ucffc\ub9ac-\ud328\ud134",level:3},{value:"JOIN \ucffc\ub9ac",id:"join-\ucffc\ub9ac",level:3},{value:"\uc9d1\uacc4 \ubc0f \uadf8\ub8f9\ud654",id:"\uc9d1\uacc4-\ubc0f-\uadf8\ub8f9\ud654",level:3},{value:"\uc11c\ube0c\ucffc\ub9ac",id:"\uc11c\ube0c\ucffc\ub9ac",level:3},{value:"\ucffc\ub9ac \ucd5c\uc801\ud654 \uae30\ubc95",id:"\ucffc\ub9ac-\ucd5c\uc801\ud654-\uae30\ubc95",level:3},{value:"\ucffc\ub9ac \ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ucffc\ub9ac-\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"4.8 Alembic \ub9c8\uc774\uadf8\ub808\uc774\uc158",id:"48-alembic-\ub9c8\uc774\uadf8\ub808\uc774\uc158",level:2},{value:"Alembic \ucd08\uae30\ud654",id:"alembic-\ucd08\uae30\ud654",level:3},{value:"Alembic \uc124\uc815",id:"alembic-\uc124\uc815",level:3},{value:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc0dd\uc131 \ubc0f \uc2e4\ud589",id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc0dd\uc131-\ubc0f-\uc2e4\ud589",level:3},{value:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2a4\ud06c\ub9bd\ud2b8 \uc608\uc81c",id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc2a4\ud06c\ub9bd\ud2b8-\uc608\uc81c",level:3},{value:"\ubcf5\uc7a1\ud55c \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc608\uc81c",id:"\ubcf5\uc7a1\ud55c-\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc608\uc81c",level:3},{value:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:3},{value:"\uc5ec\ub7ec \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub9ac",id:"\uc5ec\ub7ec-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uad00\ub9ac",level:3},{value:"4.9 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac",id:"49-\ud2b8\ub79c\uc7ad\uc158-\uad00\ub9ac",level:2},{value:"\uae30\ubcf8 \ud2b8\ub79c\uc7ad\uc158",id:"\uae30\ubcf8-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"\uba85\uc2dc\uc801 \ud2b8\ub79c\uc7ad\uc158",id:"\uba85\uc2dc\uc801-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"\uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158 (Savepoint)",id:"\uc911\ucca9-\ud2b8\ub79c\uc7ad\uc158-savepoint",level:3},{value:"\ud2b8\ub79c\uc7ad\uc158 \uaca9\ub9ac \uc218\uc900",id:"\ud2b8\ub79c\uc7ad\uc158-\uaca9\ub9ac-\uc218\uc900",level:3},{value:"\ub099\uad00\uc801 \uc7a0\uae08 (Optimistic Locking)",id:"\ub099\uad00\uc801-\uc7a0\uae08-optimistic-locking",level:3},{value:"\ube44\uad00\uc801 \uc7a0\uae08 (Pessimistic Locking)",id:"\ube44\uad00\uc801-\uc7a0\uae08-pessimistic-locking",level:3},{value:"\ub370\ub4dc\ub77d \ucc98\ub9ac",id:"\ub370\ub4dc\ub77d-\ucc98\ub9ac",level:3},{value:"\ud2b8\ub79c\uc7ad\uc158 \ubaa8\ub2c8\ud130\ub9c1",id:"\ud2b8\ub79c\uc7ad\uc158-\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"4.10 \uc138\uc158 \uad00\ub9ac \ud328\ud134",id:"410-\uc138\uc158-\uad00\ub9ac-\ud328\ud134",level:2},{value:"FastAPI Dependency Injection",id:"fastapi-dependency-injection",level:3},{value:"Context Manager \ud328\ud134",id:"context-manager-\ud328\ud134",level:3},{value:"Repository \ud328\ud134",id:"repository-\ud328\ud134",level:3},{value:"Unit of Work \ud328\ud134",id:"unit-of-work-\ud328\ud134",level:3},{value:"\ube44\ub3d9\uae30 \uc138\uc158 \uad00\ub9ac",id:"\ube44\ub3d9\uae30-\uc138\uc158-\uad00\ub9ac",level:3},{value:"\uc138\uc158 \uc2a4\ucf54\ud504 \uad00\ub9ac",id:"\uc138\uc158-\uc2a4\ucf54\ud504-\uad00\ub9ac",level:3},{value:"4.11 N+1 \ubb38\uc81c \ud574\uacb0 (Eager Loading)",id:"411-n1-\ubb38\uc81c-\ud574\uacb0-eager-loading",level:2},{value:"N+1 \ubb38\uc81c\ub780?",id:"n1-\ubb38\uc81c\ub780",level:3},{value:"Eager Loading \uc804\ub7b5",id:"eager-loading-\uc804\ub7b5",level:3},{value:"1. Selectin Loading",id:"1-selectin-loading",level:4},{value:"2. Joined Loading",id:"2-joined-loading",level:4},{value:"3. Subquery Loading",id:"3-subquery-loading",level:4},{value:"\uc911\ucca9\ub41c \uad00\uacc4 \ub85c\ub529",id:"\uc911\ucca9\ub41c-\uad00\uacc4-\ub85c\ub529",level:3},{value:"\ub85c\ub529 \uc804\ub7b5 \ube44\uad50",id:"\ub85c\ub529-\uc804\ub7b5-\ube44\uad50",level:3},{value:"\uc870\uac74\ubd80 \ub85c\ub529",id:"\uc870\uac74\ubd80-\ub85c\ub529",level:3},{value:"\ub85c\ub529 \ucd5c\uc801\ud654 \ud328\ud134",id:"\ub85c\ub529-\ucd5c\uc801\ud654-\ud328\ud134",level:3},{value:"\uc131\ub2a5 \uce21\uc815",id:"\uc131\ub2a5-\uce21\uc815",level:3},{value:"\ub85c\ub529 \uc804\ub7b5 \uc120\ud0dd \uac00\uc774\ub4dc",id:"\ub85c\ub529-\uc804\ub7b5-\uc120\ud0dd-\uac00\uc774\ub4dc",level:3},{value:"4.12 \uc2e4\uc2b5 \ubb38\uc81c",id:"412-\uc2e4\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c \ubaa8\ub378 \uc124\uacc4",id:"\ubb38\uc81c-1-\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c-\ubaa8\ub378-\uc124\uacc4",level:3},{value:"\ubb38\uc81c 2: \ubcf5\uc7a1\ud55c \ucffc\ub9ac \uc791\uc131",id:"\ubb38\uc81c-2-\ubcf5\uc7a1\ud55c-\ucffc\ub9ac-\uc791\uc131",level:3},{value:"\ubb38\uc81c 3: N+1 \ubb38\uc81c \ud574\uacb0",id:"\ubb38\uc81c-3-n1-\ubb38\uc81c-\ud574\uacb0",level:3},{value:"\ubb38\uc81c 4: \ud2b8\ub79c\uc7ad\uc158\uacfc \uc5d0\ub7ec \ucc98\ub9ac",id:"\ubb38\uc81c-4-\ud2b8\ub79c\uc7ad\uc158\uacfc-\uc5d0\ub7ec-\ucc98\ub9ac",level:3},{value:"\ubb38\uc81c 5: Repository \ud328\ud134 \uad6c\ud604",id:"\ubb38\uc81c-5-repository-\ud328\ud134-\uad6c\ud604",level:3},{value:"\ucc38\uace0 \uc790\ub8cc",id:"\ucc38\uace0-\uc790\ub8cc",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"4-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"4. \ub370\uc774\ud130\ubca0\uc774\uc2a4"})}),"\n",(0,r.jsx)(n.p,{children:"SQLAlchemy\ub97c \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud1b5\ud569\uacfc \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \uad00\ub9ac \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"41-orm-vs-raw-sql",children:"4.1 ORM vs Raw SQL"}),"\n",(0,r.jsx)(n.h3,{id:"orm-object-relational-mapping",children:"ORM (Object-Relational Mapping)"}),"\n",(0,r.jsx)(n.p,{children:"ORM\uc740 \uac1d\uccb4 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc758 \uac1d\uccb4\uc640 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ub370\uc774\ud130\ub97c \uc790\ub3d9\uc73c\ub85c \ub9e4\ud551\ud574\uc8fc\ub294 \uae30\uc220\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ORM\uc758 \uc7a5\uc810:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub3c5\ub9bd\uc131: \ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5d4\uc9c4 \uc9c0\uc6d0"}),"\n",(0,r.jsx)(n.li,{children:"\ucf54\ub4dc \uc7ac\uc0ac\uc6a9\uc131: \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc5d0 \uc9d1\uc911 \uac00\ub2a5"}),"\n",(0,r.jsx)(n.li,{children:"\ud0c0\uc785 \uc548\uc815\uc131: IDE \uc790\ub3d9\uc644\uc131 \ubc0f \ud0c0\uc785 \uccb4\ud06c"}),"\n",(0,r.jsx)(n.li,{children:"SQL \uc778\uc81d\uc158 \ubc29\uc9c0: \uc790\ub3d9\uc73c\ub85c \ud30c\ub77c\ubbf8\ud130\ud654\ub41c \ucffc\ub9ac \uc0dd\uc131"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ORM\uc758 \ub2e8\uc810:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uc131\ub2a5 \uc624\ubc84\ud5e4\ub4dc: \ubcf5\uc7a1\ud55c \ucffc\ub9ac\uc5d0\uc11c \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\uc74c"}),"\n",(0,r.jsx)(n.li,{children:"\ud559\uc2b5 \uace1\uc120: ORM \ubb38\ubc95\uacfc \ub0b4\ubd80 \ub3d9\uc791 \uc774\ud574 \ud544\uc694"}),"\n",(0,r.jsx)(n.li,{children:"\uc81c\ud55c\uc801\uc778 \uc81c\uc5b4: \ud2b9\uc218\ud55c SQL \uae30\ub2a5 \uc0ac\uc6a9 \uc5b4\ub824\uc6c0"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"raw-sql",children:"Raw SQL"}),"\n",(0,r.jsx)(n.p,{children:"Raw SQL\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc9c1\uc811 SQL \ucffc\ub9ac\ub97c \uc791\uc131\ud558\uc5ec \uc2e4\ud589\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Raw SQL \uc608\uc81c\nfrom sqlalchemy import text\n\n# \uc7a5\uc810: \uc9c1\uad00\uc801\uc774\uace0 \uc131\ub2a5 \ucd5c\uc801\ud654 \uc6a9\uc774\nresult = session.execute(\n    text("SELECT * FROM users WHERE age > :age"),\n    {"age": 18}\n)\n\n# \ub2e8\uc810: SQL \uc778\uc81d\uc158 \uc704\ud5d8, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc885\uc18d\uc801\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc5b8\uc81c-\ubb34\uc5c7\uc744-\uc0ac\uc6a9\ud560\uae4c",children:"\uc5b8\uc81c \ubb34\uc5c7\uc744 \uc0ac\uc6a9\ud560\uae4c?"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"\uc0c1\ud669"}),(0,r.jsx)(n.th,{children:"\uad8c\uc7a5 \ubc29\ubc95"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"\uae30\ubcf8 CRUD \uc791\uc5c5"}),(0,r.jsx)(n.td,{children:"ORM"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"\ubcf5\uc7a1\ud55c \uc9d1\uacc4 \ucffc\ub9ac"}),(0,r.jsx)(n.td,{children:"Raw SQL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"\ud504\ub85c\ud1a0\ud0c0\uc785 \uac1c\ubc1c"}),(0,r.jsx)(n.td,{children:"ORM"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"\uc131\ub2a5 \ucd5c\uc801\ud654 \ud544\uc694"}),(0,r.jsx)(n.td,{children:"Raw SQL (\ub610\ub294 ORM + \ucd5c\uc801\ud654)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158"}),(0,r.jsx)(n.td,{children:"ORM + Alembic"})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"SQLAlchemy\ub294 ORM\uacfc Raw SQL\uc744 \ud568\uaed8 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4 \uc0c1\ud669\uc5d0 \ub530\ub77c \uc720\uc5f0\ud558\uac8c \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."})}),"\n",(0,r.jsx)(n.h2,{id:"42-sqlalchemy-\uae30\ubcf8-\uac1c\ub150",children:"4.2 SQLAlchemy \uae30\ubcf8 \uac1c\ub150"}),"\n",(0,r.jsx)(n.p,{children:"SQLAlchemy\ub294 \ub450 \uac00\uc9c0 \uc8fc\uc694 \ucef4\ud3ec\ub10c\ud2b8\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4:"}),"\n",(0,r.jsx)(n.h3,{id:"core-vs-orm",children:"Core vs ORM"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Core: \ub0ae\uc740 \uc218\uc900\uc758 SQL \ucd94\uc0c1\ud654\nfrom sqlalchemy import Table, Column, Integer, String, MetaData\n\nmetadata = MetaData()\nusers = Table('users', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('name', String)\n)\n\n# ORM: \ub192\uc740 \uc218\uc900\uc758 \uac1d\uccb4 \ub9e4\ud551\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"sqlalchemy-20-\uc2a4\ud0c0\uc77c",children:"SQLAlchemy 2.0 \uc2a4\ud0c0\uc77c"}),"\n",(0,r.jsx)(n.p,{children:"SQLAlchemy 2.0\uc740 \ud0c0\uc785 \uc548\uc815\uc131\uacfc \uba85\ud655\uc131\uc744 \uac15\ud654\ud55c \uc0c8\ub85c\uc6b4 API\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from typing import Optional\nfrom sqlalchemy import String, select\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    # \ud0c0\uc785 \ud78c\ud2b8\ub97c \uc0ac\uc6a9\ud55c \uba85\uc2dc\uc801 \ub9e4\ud551\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n    email: Mapped[Optional[str]]  # NULL \ud5c8\uc6a9\n\n# 2.0 \uc2a4\ud0c0\uc77c \ucffc\ub9ac\nstmt = select(User).where(User.username == 'john')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"43-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\uacb0-\uc124\uc815",children:"4.3 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc124\uc815"}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\uc5f0\uacb0-\uc124\uc815",children:"\uae30\ubcf8 \uc5f0\uacb0 \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 URL \ud615\uc2dd: dialect+driver://username:password@host:port/database\nDATABASE_URL = "postgresql://user:password@localhost:5432/mydb"\n\n# \uc5d4\uc9c4 \uc0dd\uc131\nengine = create_engine(\n    DATABASE_URL,\n    echo=True,  # SQL \ub85c\uae45 \ud65c\uc131\ud654\n    pool_size=5,  # \ucee4\ub125\uc158 \ud480 \ud06c\uae30\n    max_overflow=10  # \ud480 \ucd08\uacfc \uc2dc \ucd94\uac00 \uc5f0\uacb0 \uc218\n)\n\n# \uc138\uc158 \ud329\ud1a0\ub9ac \uc0dd\uc131\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub2e4\uc591\ud55c-\ub370\uc774\ud130\ubca0\uc774\uc2a4-url-\uc608\uc81c",children:"\ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 URL \uc608\uc81c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# SQLite (\ud30c\uc77c \uae30\ubc18)\nsqlite_url = "sqlite:///./app.db"\n\n# SQLite (\uba54\ubaa8\ub9ac)\nsqlite_memory = "sqlite:///:memory:"\n\n# PostgreSQL\npostgresql_url = "postgresql://user:pass@localhost/dbname"\npostgresql_psycopg3 = "postgresql+psycopg://user:pass@localhost/dbname"\n\n# MySQL\nmysql_url = "mysql+pymysql://user:pass@localhost/dbname"\n\n# MariaDB\nmariadb_url = "mariadb+pymysql://user:pass@localhost/dbname"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fastapi\uc640-\ud1b5\ud569",children:"FastAPI\uc640 \ud1b5\ud569"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from contextlib import asynccontextmanager\nfrom fastapi import FastAPI, Depends\nfrom sqlalchemy.orm import Session\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd08\uae30\ud654\ndef init_db():\n    Base.metadata.create_all(bind=engine)\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # \uc2dc\uc791 \uc2dc \uc2e4\ud589\n    init_db()\n    yield\n    # \uc885\ub8cc \uc2dc \uc2e4\ud589\n    engine.dispose()\n\napp = FastAPI(lifespan=lifespan)\n\n# \uc758\uc874\uc131 \uc8fc\uc785\uc744 \ud1b5\ud55c \uc138\uc158 \uad00\ub9ac\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.get("/users/{user_id}")\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    return db.query(User).filter(User.id == user_id).first()\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"echo=True"}),"\ub294 \uac1c\ubc1c \ud658\uacbd\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud558\uc138\uc694. \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 \uc131\ub2a5\uc5d0 \uc601\ud5a5\uc744 \uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(n.h2,{id:"44-\ubaa8\ub378-\uc815\uc758-table-column-\ub370\uc774\ud130-\ud0c0\uc785",children:"4.4 \ubaa8\ub378 \uc815\uc758 (Table, Column, \ub370\uc774\ud130 \ud0c0\uc785)"}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\ubaa8\ub378-\uc815\uc758",children:"\uae30\ubcf8 \ubaa8\ub378 \uc815\uc758"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from datetime import datetime\nfrom typing import Optional\nfrom sqlalchemy import String, Text, DateTime, func\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    # \uae30\ubcf8 \ud0a4\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # \ubb38\uc790\uc5f4 \ud544\ub4dc\n    username: Mapped[str] = mapped_column(String(50), unique=True, index=True)\n    email: Mapped[str] = mapped_column(String(100), unique=True)\n\n    # NULL \ud5c8\uc6a9 \ud544\ub4dc\n    bio: Mapped[Optional[str]] = mapped_column(Text)\n\n    # \uae30\ubcf8\uac12 \uc124\uc815\n    is_active: Mapped[bool] = mapped_column(default=True)\n\n    # \ud0c0\uc784\uc2a4\ud0ec\ud504 (\uc790\ub3d9 \uc0dd\uc131)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now(),\n        onupdate=func.now()\n    )\n\n    def __repr__(self):\n        return f\"<User(id={self.id}, username='{self.username}')>\"\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc8fc\uc694-\ub370\uc774\ud130-\ud0c0\uc785",children:"\uc8fc\uc694 \ub370\uc774\ud130 \ud0c0\uc785"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from decimal import Decimal\nfrom sqlalchemy import (\n    Integer, BigInteger, SmallInteger,\n    String, Text,\n    Float, Numeric,\n    Boolean,\n    Date, DateTime, Time,\n    JSON, ARRAY\n)\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    # \uc22b\uc790 \ud0c0\uc785\n    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)\n    stock: Mapped[int] = mapped_column(SmallInteger)\n\n    # \ubb38\uc790\uc5f4 \ud0c0\uc785\n    name: Mapped[str] = mapped_column(String(200))\n    description: Mapped[Optional[str]] = mapped_column(Text)\n\n    # \uc815\ubc00\ud55c \uc22b\uc790 (\uae08\uc561 \ub4f1)\n    price: Mapped[Decimal] = mapped_column(Numeric(10, 2))\n\n    # \ubd88\ub9ac\uc5b8\n    in_stock: Mapped[bool]\n\n    # \ub0a0\uc9dc/\uc2dc\uac04\n    manufactured_date: Mapped[datetime] = mapped_column(Date)\n\n    # JSON \ub370\uc774\ud130 (PostgreSQL, SQLite 3.9+)\n    metadata_: Mapped[dict] = mapped_column(JSON)\n\n    # \ubc30\uc5f4 (PostgreSQL)\n    tags: Mapped[list[str]] = mapped_column(ARRAY(String))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc81c\uc57d-\uc870\uac74-constraints",children:"\uc81c\uc57d \uc870\uac74 (Constraints)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import CheckConstraint, UniqueConstraint, Index\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    category: Mapped[str] = mapped_column(String(50))\n    views: Mapped[int] = mapped_column(default=0)\n    rating: Mapped[float]\n\n    # \ud14c\uc774\ube14 \uc218\uc900 \uc81c\uc57d \uc870\uac74\n    __table_args__ = (\n        # \uccb4\ud06c \uc81c\uc57d: rating\uc740 0\uacfc 5 \uc0ac\uc774\n        CheckConstraint('rating >= 0 AND rating <= 5', name='check_rating'),\n\n        # \uc720\ub2c8\ud06c \uc81c\uc57d: title\uacfc category \uc870\ud569\uc774 \uc720\uc77c\ud574\uc57c \ud568\n        UniqueConstraint('title', 'category', name='unique_title_category'),\n\n        # \ubcf5\ud569 \uc778\ub371\uc2a4\n        Index('idx_category_views', 'category', 'views'),\n    )\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"String"}),"\uc758 \uae38\uc774\ub294 \ud56d\uc0c1 \uba85\uc2dc\ud558\uc138\uc694. \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ub530\ub77c \uae30\ubcf8\uac12\uc774 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4."]})}),"\n",(0,r.jsxs)(n.h2,{id:"45-\uad00\uacc4-\uc815\uc758-1-n-11",children:["4.5 \uad00\uacc4 \uc815\uc758 (1",":N",", N",":M",", 1:1)"]}),"\n",(0,r.jsxs)(n.h3,{id:"one-to-many-1-\uad00\uacc4",children:["One-to-Many (1",":N",") \uad00\uacc4"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from typing import List\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n\n    # \uad00\uacc4: \ud55c \uc0ac\uc6a9\uc790\ub294 \uc5ec\ub7ec \uac8c\uc2dc\uae00\uc744 \uac00\uc9c8 \uc218 \uc788\uc74c\n    posts: Mapped[List["Post"]] = relationship(\n        back_populates="author",\n        cascade="all, delete-orphan"\n    )\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(Text)\n\n    # \uc678\ub798 \ud0a4\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n\n    # \uad00\uacc4: \uac01 \uac8c\uc2dc\uae00\uc740 \ud55c \uba85\uc758 \uc791\uc131\uc790\ub97c \uac00\uc9d0\n    author: Mapped["User"] = relationship(back_populates="posts")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nuser = User(username="john")\npost1 = Post(title="First Post", content="Hello World")\npost2 = Post(title="Second Post", content="Learning SQLAlchemy")\n\nuser.posts.append(post1)\nuser.posts.append(post2)\n\nsession.add(user)\nsession.commit()\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"many-to-many-n-\uad00\uacc4",children:["Many-to-Many (N",":M",") \uad00\uacc4"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Table\n\n# \uc5f0\uacb0 \ud14c\uc774\ube14 (Association Table)\npost_tags = Table(\n    'post_tags',\n    Base.metadata,\n    Column('post_id', ForeignKey('posts.id'), primary_key=True),\n    Column('tag_id', ForeignKey('tags.id'), primary_key=True)\n)\n\nclass Post(Base):\n    __tablename__ = 'posts'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n\n    # Many-to-Many \uad00\uacc4\n    tags: Mapped[List[\"Tag\"]] = relationship(\n        secondary=post_tags,\n        back_populates=\"posts\"\n    )\n\nclass Tag(Base):\n    __tablename__ = 'tags'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50), unique=True)\n\n    posts: Mapped[List[\"Post\"]] = relationship(\n        secondary=post_tags,\n        back_populates=\"tags\"\n    )\n\n# \uc0ac\uc6a9 \uc608\uc81c\npost = Post(title=\"Python Tutorial\")\ntag1 = Tag(name=\"python\")\ntag2 = Tag(name=\"tutorial\")\n\npost.tags.extend([tag1, tag2])\nsession.add(post)\nsession.commit()\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"association-object-pattern-\ucd94\uac00-\uc18d\uc131\uc774-\uc788\ub294-n",children:["Association Object Pattern (\ucd94\uac00 \uc18d\uc131\uc774 \uc788\ub294 N",":M",")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\n\nclass PostTag(Base):\n    __tablename__ = \'post_tags\'\n\n    post_id: Mapped[int] = mapped_column(\n        ForeignKey(\'posts.id\'),\n        primary_key=True\n    )\n    tag_id: Mapped[int] = mapped_column(\n        ForeignKey(\'tags.id\'),\n        primary_key=True\n    )\n\n    # \ucd94\uac00 \uc18d\uc131\n    created_at: Mapped[datetime] = mapped_column(default=datetime.utcnow)\n    created_by: Mapped[Optional[int]] = mapped_column(ForeignKey(\'users.id\'))\n\n    # \uad00\uacc4\n    post: Mapped["Post"] = relationship(back_populates="post_tags")\n    tag: Mapped["Tag"] = relationship(back_populates="post_tags")\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n\n    post_tags: Mapped[List["PostTag"]] = relationship(\n        back_populates="post",\n        cascade="all, delete-orphan"\n    )\n\nclass Tag(Base):\n    __tablename__ = \'tags\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n\n    post_tags: Mapped[List["PostTag"]] = relationship(\n        back_populates="tag",\n        cascade="all, delete-orphan"\n    )\n'})}),"\n",(0,r.jsx)(n.h3,{id:"one-to-one-11-\uad00\uacc4",children:"One-to-One (1:1) \uad00\uacc4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n\n    # One-to-One \uad00\uacc4 (uselist=False)\n    profile: Mapped["UserProfile"] = relationship(\n        back_populates="user",\n        uselist=False,\n        cascade="all, delete-orphan"\n    )\n\nclass UserProfile(Base):\n    __tablename__ = \'user_profiles\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    bio: Mapped[Optional[str]] = mapped_column(Text)\n    avatar_url: Mapped[Optional[str]]\n\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'), unique=True)\n\n    user: Mapped["User"] = relationship(back_populates="profile")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nuser = User(username="john")\nprofile = UserProfile(bio="Python developer")\nuser.profile = profile\n\nsession.add(user)\nsession.commit()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cascade-\uc635\uc158",children:"Cascade \uc635\uc158"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# cascade \uc635\uc158 \uc124\uba85\nposts: Mapped[List["Post"]] = relationship(\n    cascade="all, delete-orphan"\n    # all: save-update, merge, refresh-expire, expunge, delete\n    # delete-orphan: \ubd80\ubaa8\uc640\uc758 \uc5f0\uacb0\uc774 \ub04a\uc5b4\uc9c4 \uc790\uc2dd \uac1d\uccb4 \uc0ad\uc81c\n)\n\n# \uc8fc\uc694 cascade \uc635\uc158\n# - save-update: \ubd80\ubaa8 \uc800\uc7a5 \uc2dc \uc790\uc2dd\ub3c4 \uc800\uc7a5\n# - delete: \ubd80\ubaa8 \uc0ad\uc81c \uc2dc \uc790\uc2dd\ub3c4 \uc0ad\uc81c\n# - delete-orphan: \uad00\uacc4\uc5d0\uc11c \uc81c\uac70\ub41c \uc790\uc2dd \uc0ad\uc81c\n# - merge: \ubd80\ubaa8 \ubcd1\ud569 \uc2dc \uc790\uc2dd\ub3c4 \ubcd1\ud569\n# - all: \uc704 \ubaa8\ub4e0 \uc635\uc158 (delete-orphan \uc81c\uc678)\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'cascade="all, delete-orphan"'}),"\uc744 \uc0ac\uc6a9\ud560 \ub54c\ub294 \uc2e0\uc911\ud558\uc138\uc694. \ubd80\ubaa8 \uc0ad\uc81c \uc2dc \ubaa8\ub4e0 \uc790\uc2dd\uc774 \ud568\uaed8 \uc0ad\uc81c\ub429\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(n.h2,{id:"46-crud-\uc791\uc5c5-create-read-update-delete",children:"4.6 CRUD \uc791\uc5c5 (Create, Read, Update, Delete)"}),"\n",(0,r.jsx)(n.h3,{id:"create-\uc0dd\uc131",children:"Create (\uc0dd\uc131)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import Session\n\ndef create_user(db: Session, username: str, email: str):\n    """\uc0c8 \uc0ac\uc6a9\uc790 \uc0dd\uc131"""\n    user = User(username=username, email=email)\n    db.add(user)\n    db.commit()\n    db.refresh(user)  # DB\uc5d0\uc11c \uc0dd\uc131\ub41c \uac12(id \ub4f1) \uac00\uc838\uc624\uae30\n    return user\n\ndef create_users_bulk(db: Session, users_data: list[dict]):\n    """\uc5ec\ub7ec \uc0ac\uc6a9\uc790 \ud55c\ubc88\uc5d0 \uc0dd\uc131"""\n    users = [User(**data) for data in users_data]\n    db.add_all(users)\n    db.commit()\n    return users\n\n# \uc0ac\uc6a9 \uc608\uc81c\nuser = create_user(db, "john", "john@example.com")\nprint(f"Created user with id: {user.id}")\n\n# \uad00\uacc4\uc640 \ud568\uaed8 \uc0dd\uc131\nuser = User(username="alice")\npost = Post(title="Hello", content="World")\nuser.posts.append(post)\ndb.add(user)\ndb.commit()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"read-\uc870\ud68c",children:"Read (\uc870\ud68c)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import select, and_, or_, func\n\ndef get_user_by_id(db: Session, user_id: int) -> User | None:\n    """ID\ub85c \uc0ac\uc6a9\uc790 \uc870\ud68c"""\n    return db.get(User, user_id)\n\ndef get_user_by_username(db: Session, username: str) -> User | None:\n    """username\uc73c\ub85c \uc0ac\uc6a9\uc790 \uc870\ud68c"""\n    stmt = select(User).where(User.username == username)\n    return db.scalars(stmt).first()\n\ndef get_all_users(db: Session, skip: int = 0, limit: int = 100):\n    """\ubaa8\ub4e0 \uc0ac\uc6a9\uc790 \uc870\ud68c (\ud398\uc774\uc9c0\ub124\uc774\uc158)"""\n    stmt = select(User).offset(skip).limit(limit)\n    return db.scalars(stmt).all()\n\ndef search_users(db: Session, keyword: str):\n    """\uc0ac\uc6a9\uc790 \uac80\uc0c9"""\n    stmt = select(User).where(\n        or_(\n            User.username.ilike(f"%{keyword}%"),\n            User.email.ilike(f"%{keyword}%")\n        )\n    )\n    return db.scalars(stmt).all()\n\ndef get_active_users_with_posts(db: Session):\n    """\uac8c\uc2dc\uae00\uc774 \uc788\ub294 \ud65c\uc131 \uc0ac\uc6a9\uc790 \uc870\ud68c"""\n    stmt = (\n        select(User)\n        .join(User.posts)\n        .where(User.is_active == True)\n        .distinct()\n    )\n    return db.scalars(stmt).all()\n\n# \uc9d1\uacc4 \ucffc\ub9ac\ndef count_users(db: Session) -> int:\n    """\uc804\uccb4 \uc0ac\uc6a9\uc790 \uc218"""\n    return db.query(func.count(User.id)).scalar()\n\ndef get_user_post_counts(db: Session):\n    """\uc0ac\uc6a9\uc790\ubcc4 \uac8c\uc2dc\uae00 \uc218"""\n    stmt = (\n        select(User.username, func.count(Post.id).label(\'post_count\'))\n        .join(User.posts)\n        .group_by(User.id)\n        .order_by(func.count(Post.id).desc())\n    )\n    return db.execute(stmt).all()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-\uc218\uc815",children:"Update (\uc218\uc815)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def update_user(db: Session, user_id: int, **kwargs):\n    """\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc218\uc815"""\n    user = db.get(User, user_id)\n    if user:\n        for key, value in kwargs.items():\n            setattr(user, key, value)\n        db.commit()\n        db.refresh(user)\n    return user\n\ndef update_users_bulk(db: Session, user_ids: list[int], is_active: bool):\n    """\uc5ec\ub7ec \uc0ac\uc6a9\uc790 \ud55c\ubc88\uc5d0 \uc218\uc815"""\n    stmt = (\n        update(User)\n        .where(User.id.in_(user_ids))\n        .values(is_active=is_active)\n    )\n    db.execute(stmt)\n    db.commit()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nuser = update_user(db, 1, email="newemail@example.com", bio="Updated bio")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"delete-\uc0ad\uc81c",children:"Delete (\uc0ad\uc81c)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def delete_user(db: Session, user_id: int) -> bool:\n    """\uc0ac\uc6a9\uc790 \uc0ad\uc81c"""\n    user = db.get(User, user_id)\n    if user:\n        db.delete(user)\n        db.commit()\n        return True\n    return False\n\ndef delete_inactive_users(db: Session):\n    """\ube44\ud65c\uc131 \uc0ac\uc6a9\uc790 \uc0ad\uc81c"""\n    stmt = delete(User).where(User.is_active == False)\n    result = db.execute(stmt)\n    db.commit()\n    return result.rowcount\n\n# Soft Delete \ud328\ud134\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n    deleted_at: Mapped[Optional[datetime]]\n\ndef soft_delete_user(db: Session, user_id: int):\n    """\ub17c\ub9ac \uc0ad\uc81c"""\n    user = db.get(User, user_id)\n    if user:\n        user.deleted_at = datetime.utcnow()\n        db.commit()\n    return user\n\ndef get_active_users_only(db: Session):\n    """\uc0ad\uc81c\ub418\uc9c0 \uc54a\uc740 \uc0ac\uc6a9\uc790\ub9cc \uc870\ud68c"""\n    stmt = select(User).where(User.deleted_at.is_(None))\n    return db.scalars(stmt).all()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ud2b8\ub79c\uc7ad\uc158\uacfc-\ud568\uaed8-\uc0ac\uc6a9",children:"\ud2b8\ub79c\uc7ad\uc158\uacfc \ud568\uaed8 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def transfer_post(db: Session, post_id: int, from_user_id: int, to_user_id: int):\n    """\uac8c\uc2dc\uae00 \uc18c\uc720\uad8c \uc774\uc804 (\ud2b8\ub79c\uc7ad\uc158)"""\n    try:\n        post = db.get(Post, post_id)\n        if post and post.user_id == from_user_id:\n            post.user_id = to_user_id\n            db.commit()\n            return True\n        db.rollback()\n        return False\n    except Exception as e:\n        db.rollback()\n        raise e\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"db.refresh(obj)"}),"\ub97c \uc0ac\uc6a9\ud558\uba74 \ucee4\ubc0b \ud6c4 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc0dd\uc131\ub41c \uac12(\uc790\ub3d9 \uc99d\uac00 ID, \ud0c0\uc784\uc2a4\ud0ec\ud504 \ub4f1)\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(n.h2,{id:"47-\ucffc\ub9ac-\uc791\uc131-\ubc0f-\ucd5c\uc801\ud654",children:"4.7 \ucffc\ub9ac \uc791\uc131 \ubc0f \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\ucffc\ub9ac-\ud328\ud134",children:"\uae30\ubcf8 \ucffc\ub9ac \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, and_, or_, not_, func\n\n# \uae30\ubcf8 SELECT\nstmt = select(User)\nusers = db.scalars(stmt).all()\n\n# WHERE \uc870\uac74\nstmt = select(User).where(User.is_active == True)\n\n# \ubcf5\ud569 \uc870\uac74\nstmt = select(User).where(\n    and_(\n        User.is_active == True,\n        User.email.like('%@gmail.com')\n    )\n)\n\n# OR \uc870\uac74\nstmt = select(User).where(\n    or_(\n        User.username == 'john',\n        User.email == 'john@example.com'\n    )\n)\n\n# NOT \uc870\uac74\nstmt = select(User).where(not_(User.is_active))\n\n# IN \uc870\uac74\nstmt = select(User).where(User.id.in_([1, 2, 3, 4, 5]))\n\n# BETWEEN\nstmt = select(Post).where(Post.created_at.between(start_date, end_date))\n\n# ORDER BY\nstmt = select(User).order_by(User.created_at.desc())\n\n# LIMIT & OFFSET\nstmt = select(User).limit(10).offset(20)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"join-\ucffc\ub9ac",children:"JOIN \ucffc\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# INNER JOIN\nstmt = (\n    select(User, Post)\n    .join(Post, User.id == Post.user_id)\n)\n\n# LEFT OUTER JOIN\nstmt = (\n    select(User)\n    .outerjoin(Post)\n    .where(Post.id.is_(None))  # \uac8c\uc2dc\uae00\uc774 \uc5c6\ub294 \uc0ac\uc6a9\uc790\n)\n\n# \uad00\uacc4\ub97c \ud1b5\ud55c JOIN\nstmt = (\n    select(User)\n    .join(User.posts)\n    .where(Post.title.like('%Python%'))\n)\n\n# \uc5ec\ub7ec \ud14c\uc774\ube14 JOIN\nstmt = (\n    select(User, Post, Comment)\n    .join(User.posts)\n    .join(Post.comments)\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc9d1\uacc4-\ubc0f-\uadf8\ub8f9\ud654",children:"\uc9d1\uacc4 \ubc0f \uadf8\ub8f9\ud654"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# COUNT\nstmt = select(func.count(User.id))\nuser_count = db.scalar(stmt)\n\n# GROUP BY\nstmt = (\n    select(User.id, User.username, func.count(Post.id).label('post_count'))\n    .join(User.posts)\n    .group_by(User.id)\n)\n\n# HAVING\nstmt = (\n    select(User.id, func.count(Post.id).label('post_count'))\n    .join(User.posts)\n    .group_by(User.id)\n    .having(func.count(Post.id) > 5)\n)\n\n# \uc5ec\ub7ec \uc9d1\uacc4 \ud568\uc218\nstmt = (\n    select(\n        func.count(Post.id).label('total_posts'),\n        func.avg(Post.views).label('avg_views'),\n        func.max(Post.views).label('max_views'),\n        func.min(Post.created_at).label('oldest_post')\n    )\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc11c\ube0c\ucffc\ub9ac",children:"\uc11c\ube0c\ucffc\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \uc2a4\uce7c\ub77c \uc11c\ube0c\ucffc\ub9ac\nsubq = (\n    select(func.count(Post.id))\n    .where(Post.user_id == User.id)\n    .correlate(User)\n    .scalar_subquery()\n)\n\nstmt = select(User, subq.label('post_count'))\n\n# EXISTS \uc11c\ube0c\ucffc\ub9ac\nsubq = (\n    select(Post.id)\n    .where(Post.user_id == User.id)\n    .exists()\n)\n\nstmt = select(User).where(subq)\n\n# IN \uc11c\ube0c\ucffc\ub9ac\nsubq = (\n    select(Post.user_id)\n    .where(Post.views > 1000)\n    .subquery()\n)\n\nstmt = select(User).where(User.id.in_(select(subq)))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ucffc\ub9ac-\ucd5c\uc801\ud654-\uae30\ubc95",children:"\ucffc\ub9ac \ucd5c\uc801\ud654 \uae30\ubc95"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# 1. \ud544\uc694\ud55c \uceec\ub7fc\ub9cc \uc120\ud0dd\nstmt = select(User.id, User.username)  # \ubaa8\ub4e0 \uceec\ub7fc \ub300\uc2e0 \ud544\uc694\ud55c \uac83\ub9cc\n\n# 2. \uc778\ub371\uc2a4 \ud65c\uc6a9\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(index=True)  # \uc778\ub371\uc2a4 \ucd94\uac00\n    email: Mapped[str] = mapped_column(index=True)\n\n# 3. EXPLAIN\uc73c\ub85c \ucffc\ub9ac \ubd84\uc11d\nfrom sqlalchemy import text\n\nresult = db.execute(\n    text(\"EXPLAIN ANALYZE SELECT * FROM users WHERE username = 'john'\")\n)\nprint(result.fetchall())\n\n# 4. \ucffc\ub9ac \uacb0\uacfc \uce90\uc2f1\nfrom functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef get_user_by_id_cached(user_id: int):\n    return db.get(User, user_id)\n\n# 5. \ubc30\uce58 \ucc98\ub9ac\ndef process_users_in_batches(db: Session, batch_size: int = 100):\n    offset = 0\n    while True:\n        stmt = select(User).offset(offset).limit(batch_size)\n        users = db.scalars(stmt).all()\n\n        if not users:\n            break\n\n        for user in users:\n            # \ucc98\ub9ac \ub85c\uc9c1\n            pass\n\n        offset += batch_size\n        db.commit()  # \ubc30\uce58\ub9c8\ub2e4 \ucee4\ubc0b\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ucffc\ub9ac-\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ucffc\ub9ac \ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# BAD: N+1 \ubb38\uc81c \ubc1c\uc0dd\nusers = db.scalars(select(User)).all()\nfor user in users:\n    print(len(user.posts))  # \uac01 \uc0ac\uc6a9\uc790\ub9c8\ub2e4 \ucffc\ub9ac \uc2e4\ud589\n\n# GOOD: Eager Loading \uc0ac\uc6a9\nfrom sqlalchemy.orm import selectinload\n\nstmt = select(User).options(selectinload(User.posts))\nusers = db.scalars(stmt).all()\nfor user in users:\n    print(len(user.posts))  # \ucd94\uac00 \ucffc\ub9ac \uc5c6\uc74c\n\n# BAD: \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uba54\ubaa8\ub9ac\uc5d0 \ub85c\ub4dc\nall_users = db.scalars(select(User)).all()  # 100\ub9cc \ud589\uc774\uba74?\n\n# GOOD: \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc870\ud68c\nstmt = select(User).limit(100)\nusers = db.scalars(stmt).all()\n\n# BAD: \ubc18\ubcf5\uc801\uc778 \ucffc\ub9ac\nfor user_id in user_ids:\n    user = db.get(User, user_id)\n\n# GOOD: IN \uc808 \uc0ac\uc6a9\nstmt = select(User).where(User.id.in_(user_ids))\nusers = db.scalars(stmt).all()\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"select(*)"}),"\ub294 \ud53c\ud558\uace0, \ud544\uc694\ud55c \uceec\ub7fc\ub9cc \uba85\uc2dc\uc801\uc73c\ub85c \uc120\ud0dd\ud558\uc138\uc694. \ud2b9\ud788 \ud070 TEXT \ud544\ub4dc\uac00 \uc788\ub294 \uacbd\uc6b0 \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \uc90d\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(n.h2,{id:"48-alembic-\ub9c8\uc774\uadf8\ub808\uc774\uc158",children:"4.8 Alembic \ub9c8\uc774\uadf8\ub808\uc774\uc158"}),"\n",(0,r.jsx)(n.h3,{id:"alembic-\ucd08\uae30\ud654",children:"Alembic \ucd08\uae30\ud654"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Alembic \uc124\uce58\npip install alembic\n\n# Alembic \ucd08\uae30\ud654\nalembic init alembic\n\n# \uc0dd\uc131\ub41c \ud30c\uc77c \uad6c\uc870\n# alembic/\n# \u251c\u2500\u2500 env.py\n# \u251c\u2500\u2500 script.py.mako\n# \u2514\u2500\u2500 versions/\n# alembic.ini\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alembic-\uc124\uc815",children:"Alembic \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# alembic.ini\n[alembic]\nscript_location = alembic\nsqlalchemy.url = postgresql://user:pass@localhost/dbname\n\n# \ub610\ub294 \ud658\uacbd\ubcc0\uc218 \uc0ac\uc6a9\n# sqlalchemy.url = ${DATABASE_URL}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# alembic/env.py\nfrom logging.config import fileConfig\nfrom sqlalchemy import engine_from_config, pool\nfrom alembic import context\n\n# \ubaa8\ub378 \uba54\ud0c0\ub370\uc774\ud130 \uac00\uc838\uc624\uae30\nfrom app.models import Base\ntarget_metadata = Base.metadata\n\ndef run_migrations_offline():\n    """\uc624\ud504\ub77c\uc778 \ubaa8\ub4dc\uc5d0\uc11c \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2e4\ud589"""\n    url = config.get_main_option("sqlalchemy.url")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={"paramstyle": "named"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\ndef run_migrations_online():\n    """\uc628\ub77c\uc778 \ubaa8\ub4dc\uc5d0\uc11c \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2e4\ud589"""\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix="sqlalchemy.",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc0dd\uc131-\ubc0f-\uc2e4\ud589",children:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc0dd\uc131 \ubc0f \uc2e4\ud589"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# \uc790\ub3d9 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc0dd\uc131\nalembic revision --autogenerate -m "Create users table"\n\n# \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2e4\ud589\nalembic upgrade head\n\n# \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31\nalembic downgrade -1  # 1\ub2e8\uacc4 \ub864\ubc31\nalembic downgrade base  # \ucc98\uc74c\uc73c\ub85c \ub864\ubc31\n\n# \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud788\uc2a4\ud1a0\ub9ac \ud655\uc778\nalembic history\n\n# \ud604\uc7ac \ub9ac\ube44\uc804 \ud655\uc778\nalembic current\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc2a4\ud06c\ub9bd\ud2b8-\uc608\uc81c",children:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2a4\ud06c\ub9bd\ud2b8 \uc608\uc81c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# alembic/versions/xxxx_create_users_table.py\n\"\"\"Create users table\n\nRevision ID: xxxx\nRevises:\nCreate Date: 2024-01-01 00:00:00.000000\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n# revision identifiers\nrevision = 'xxxx'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\ndef upgrade():\n    \"\"\"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc801\uc6a9\"\"\"\n    op.create_table(\n        'users',\n        sa.Column('id', sa.Integer(), nullable=False),\n        sa.Column('username', sa.String(length=50), nullable=False),\n        sa.Column('email', sa.String(length=100), nullable=False),\n        sa.Column('is_active', sa.Boolean(), nullable=False, server_default='1'),\n        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),\n        sa.PrimaryKeyConstraint('id'),\n        sa.UniqueConstraint('username'),\n        sa.UniqueConstraint('email')\n    )\n    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)\n\ndef downgrade():\n    \"\"\"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31\"\"\"\n    op.drop_index(op.f('ix_users_username'), table_name='users')\n    op.drop_table('users')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ubcf5\uc7a1\ud55c-\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc608\uc81c",children:"\ubcf5\uc7a1\ud55c \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc608\uc81c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \uceec\ub7fc \ucd94\uac00/\uc0ad\uc81c\ndef upgrade():\n    # \uceec\ub7fc \ucd94\uac00\n    op.add_column('users', sa.Column('bio', sa.Text(), nullable=True))\n\n    # \uceec\ub7fc \uc774\ub984 \ubcc0\uacbd\n    op.alter_column('users', 'username', new_column_name='user_name')\n\n    # \uceec\ub7fc \ud0c0\uc785 \ubcc0\uacbd\n    op.alter_column('users', 'bio',\n                    existing_type=sa.Text(),\n                    type_=sa.String(length=500),\n                    existing_nullable=True)\n\ndef downgrade():\n    op.alter_column('users', 'bio',\n                    existing_type=sa.String(length=500),\n                    type_=sa.Text(),\n                    existing_nullable=True)\n    op.alter_column('users', 'user_name', new_column_name='username')\n    op.drop_column('users', 'bio')\n\n# \ub370\uc774\ud130 \ub9c8\uc774\uadf8\ub808\uc774\uc158\ndef upgrade():\n    # \ud14c\uc774\ube14 \ucc38\uc870\n    users = sa.table('users',\n        sa.column('id', sa.Integer),\n        sa.column('username', sa.String),\n        sa.column('display_name', sa.String)\n    )\n\n    # \ub370\uc774\ud130 \ubcc0\ud658\n    op.execute(\n        users.update().values(display_name=users.c.username)\n    )\n\n# \uc678\ub798 \ud0a4 \ucd94\uac00\ndef upgrade():\n    op.create_foreign_key(\n        'fk_posts_user_id',\n        'posts', 'users',\n        ['user_id'], ['id'],\n        ondelete='CASCADE'\n    )\n\ndef downgrade():\n    op.drop_constraint('fk_posts_user_id', 'posts', type_='foreignkey')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# 1. \ud56d\uc0c1 autogenerate \ud6c4 \uac80\ud1a0\nalembic revision --autogenerate -m "message"\n# \uc0dd\uc131\ub41c \ud30c\uc77c\uc744 \uc5f4\uc5b4\uc11c \ud655\uc778\ud558\uace0 \ud544\uc694\uc2dc \uc218\uc815\n\n# 2. \ud14c\uc2a4\ud2b8 \ud658\uacbd\uc5d0\uc11c \uba3c\uc800 \uc2e4\ud589\nalembic upgrade head  # \ud14c\uc2a4\ud2b8 DB\uc5d0\uc11c\nalembic downgrade -1  # \ub864\ubc31 \ud14c\uc2a4\ud2b8\nalembic upgrade head  # \ub2e4\uc2dc \uc801\uc6a9\n\n# 3. \ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uc804 \ubc31\uc5c5\npg_dump dbname > backup.sql\n\n# 4. \ub2e8\uacc4\ubcc4 \uc801\uc6a9\nalembic upgrade +1  # \ud55c \ub2e8\uacc4\uc529 \uc801\uc6a9\n\n# 5. \ubc84\uc804 \uad00\ub9ac\n# \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud30c\uc77c\uc744 Git\uc5d0 \ucee4\ubc0b\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc5ec\ub7ec-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uad00\ub9ac",children:"\uc5ec\ub7ec \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# alembic.ini\n[main]\ndatabases = db1,db2\n\n[db1]\nsqlalchemy.url = postgresql://user:pass@localhost/db1\n\n[db2]\nsqlalchemy.url = postgresql://user:pass@localhost/db2\n\n# \uc2e4\ud589\nalembic -n db1 upgrade head\nalembic -n db2 upgrade head\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"autogenerate"}),"\ub294 \ubaa8\ub4e0 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uac10\uc9c0\ud558\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \ud2b9\ud788 \ud14c\uc774\ube14/\uceec\ub7fc \uc774\ub984 \ubcc0\uacbd, \uc81c\uc57d\uc870\uac74 \ubcc0\uacbd\uc740 \uc9c1\uc811 \uc791\uc131\ud574\uc57c \ud569\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(n.h2,{id:"49-\ud2b8\ub79c\uc7ad\uc158-\uad00\ub9ac",children:"4.9 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\ud2b8\ub79c\uc7ad\uc158",children:"\uae30\ubcf8 \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import Session\n\ndef create_user_with_profile(db: Session, username: str, bio: str):\n    """\ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \uc0ac\uc6a9\uc790\uc640 \ud504\ub85c\ud544 \uc0dd\uc131"""\n    try:\n        # \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791 (autocommit=False\uc778 \uacbd\uc6b0 \uc790\ub3d9)\n        user = User(username=username)\n        db.add(user)\n        db.flush()  # user.id \uc0dd\uc131 (\ucee4\ubc0b \uc804)\n\n        profile = UserProfile(user_id=user.id, bio=bio)\n        db.add(profile)\n\n        db.commit()  # \ubaa8\ub450 \uc131\uacf5\ud558\uba74 \ucee4\ubc0b\n        return user\n    except Exception as e:\n        db.rollback()  # \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \ub864\ubc31\n        raise e\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uba85\uc2dc\uc801-\ud2b8\ub79c\uc7ad\uc158",children:"\uba85\uc2dc\uc801 \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import text\n\ndef transfer_money(db: Session, from_id: int, to_id: int, amount: float):\n    """\uacc4\uc88c \uc774\uccb4 (\ud2b8\ub79c\uc7ad\uc158)"""\n    with db.begin():  # \uba85\uc2dc\uc801 \ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791\n        # \ucd9c\uae08\n        stmt = text(\n            "UPDATE accounts SET balance = balance - :amount WHERE id = :id"\n        )\n        db.execute(stmt, {"amount": amount, "id": from_id})\n\n        # \uc785\uae08\n        stmt = text(\n            "UPDATE accounts SET balance = balance + :amount WHERE id = :id"\n        )\n        db.execute(stmt, {"amount": amount, "id": to_id})\n\n        # with \ube14\ub85d \uc885\ub8cc \uc2dc \uc790\ub3d9 \ucee4\ubc0b (\uc5d0\ub7ec \uc2dc \uc790\ub3d9 \ub864\ubc31)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc911\ucca9-\ud2b8\ub79c\uc7ad\uc158-savepoint",children:"\uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158 (Savepoint)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def complex_operation(db: Session):\n    """\uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158\uc744 \uc0ac\uc6a9\ud55c \ubcf5\uc7a1\ud55c \uc791\uc5c5"""\n    try:\n        user = User(username="john")\n        db.add(user)\n\n        # Savepoint \uc0dd\uc131\n        with db.begin_nested():\n            post = Post(title="Test", user_id=user.id)\n            db.add(post)\n            # \uc774 \ube14\ub85d\uc5d0\uc11c \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \uc774 \ubd80\ubd84\ub9cc \ub864\ubc31\n\n        # \uc5ec\uae30\uc11c\ub294 user\ub294 \ub0a8\uc544\uc788\uc74c\n        db.commit()\n    except Exception as e:\n        db.rollback()\n        raise e\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ud2b8\ub79c\uc7ad\uc158-\uaca9\ub9ac-\uc218\uc900",children:"\ud2b8\ub79c\uc7ad\uc158 \uaca9\ub9ac \uc218\uc900"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine\n\n# \uaca9\ub9ac \uc218\uc900 \uc124\uc815\nengine = create_engine(\n    DATABASE_URL,\n    isolation_level="REPEATABLE READ"\n    # READ UNCOMMITTED\n    # READ COMMITTED (\uae30\ubcf8\uac12)\n    # REPEATABLE READ\n    # SERIALIZABLE\n)\n\n# \uc138\uc158\ubcc4 \uaca9\ub9ac \uc218\uc900 \uc124\uc815\nfrom sqlalchemy.orm import Session\n\ndef with_serializable_isolation(db: Session):\n    """SERIALIZABLE \uaca9\ub9ac \uc218\uc900\uc73c\ub85c \uc2e4\ud589"""\n    db.connection(\n        execution_options={"isolation_level": "SERIALIZABLE"}\n    )\n    # \uc791\uc5c5 \uc218\ud589\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub099\uad00\uc801-\uc7a0\uae08-optimistic-locking",children:"\ub099\uad00\uc801 \uc7a0\uae08 (Optimistic Locking)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Article(Base):\n    __tablename__ = \'articles\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    content: Mapped[str]\n    version: Mapped[int] = mapped_column(default=0)  # \ubc84\uc804 \uad00\ub9ac\n\ndef update_article_optimistic(db: Session, article_id: int, new_content: str):\n    """\ub099\uad00\uc801 \uc7a0\uae08\uc744 \uc0ac\uc6a9\ud55c \uc5c5\ub370\uc774\ud2b8"""\n    article = db.get(Article, article_id)\n    if not article:\n        return None\n\n    old_version = article.version\n    article.content = new_content\n    article.version += 1\n\n    # WHERE \uc808\uc5d0 \ubc84\uc804 \uc870\uac74 \ucd94\uac00\n    stmt = (\n        update(Article)\n        .where(and_(\n            Article.id == article_id,\n            Article.version == old_version\n        ))\n        .values(content=new_content, version=article.version)\n    )\n\n    result = db.execute(stmt)\n\n    if result.rowcount == 0:\n        # \ub2e4\ub978 \ud2b8\ub79c\uc7ad\uc158\uc774 \uba3c\uc800 \uc218\uc815\ud568\n        db.rollback()\n        raise ConcurrentUpdateError("Article was modified by another transaction")\n\n    db.commit()\n    return article\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ube44\uad00\uc801-\uc7a0\uae08-pessimistic-locking",children:"\ube44\uad00\uc801 \uc7a0\uae08 (Pessimistic Locking)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import select\n\ndef update_article_pessimistic(db: Session, article_id: int, new_content: str):\n    """\ube44\uad00\uc801 \uc7a0\uae08\uc744 \uc0ac\uc6a9\ud55c \uc5c5\ub370\uc774\ud2b8"""\n    # FOR UPDATE\ub85c \ud589 \uc7a0\uae08\n    stmt = (\n        select(Article)\n        .where(Article.id == article_id)\n        .with_for_update()  # SELECT ... FOR UPDATE\n    )\n\n    article = db.scalars(stmt).first()\n    if article:\n        article.content = new_content\n        db.commit()\n\n    return article\n\n# \uc7a0\uae08 \uc635\uc158\n# with_for_update()  # FOR UPDATE\n# with_for_update(read=True)  # FOR SHARE (\uc77d\uae30 \uc7a0\uae08)\n# with_for_update(nowait=True)  # FOR UPDATE NOWAIT\n# with_for_update(skip_locked=True)  # FOR UPDATE SKIP LOCKED\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub370\ub4dc\ub77d-\ucc98\ub9ac",children:"\ub370\ub4dc\ub77d \ucc98\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.exc import OperationalError\nimport time\n\ndef retry_on_deadlock(max_retries=3):\n    """\ub370\ub4dc\ub77d \ubc1c\uc0dd \uc2dc \uc7ac\uc2dc\ub3c4 \ub370\ucf54\ub808\uc774\ud130"""\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_retries):\n                try:\n                    return func(*args, **kwargs)\n                except OperationalError as e:\n                    if "deadlock" in str(e).lower():\n                        if attempt < max_retries - 1:\n                            time.sleep(0.1 * (attempt + 1))  # \uc9c0\uc218 \ubc31\uc624\ud504\n                            continue\n                    raise\n        return wrapper\n    return decorator\n\n@retry_on_deadlock(max_retries=3)\ndef update_with_deadlock_handling(db: Session, article_id: int):\n    """\ub370\ub4dc\ub77d \ucc98\ub9ac\uac00 \ud3ec\ud568\ub41c \uc5c5\ub370\uc774\ud2b8"""\n    article = db.get(Article, article_id)\n    article.views += 1\n    db.commit()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ud2b8\ub79c\uc7ad\uc158-\ubaa8\ub2c8\ud130\ub9c1",children:"\ud2b8\ub79c\uc7ad\uc158 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import event\nfrom sqlalchemy.engine import Engine\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@event.listens_for(Engine, "before_cursor_execute")\ndef before_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    """\ucffc\ub9ac \uc2e4\ud589 \uc804 \ub85c\uae45"""\n    conn.info.setdefault(\'query_start_time\', []).append(time.time())\n    logger.debug(f"Start Query: {statement}")\n\n@event.listens_for(Engine, "after_cursor_execute")\ndef after_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    """\ucffc\ub9ac \uc2e4\ud589 \ud6c4 \ub85c\uae45"""\n    total = time.time() - conn.info[\'query_start_time\'].pop()\n    logger.debug(f"Query Complete! Total Time: {total:.2f}s")\n\n@event.listens_for(Session, "after_begin")\ndef after_begin(session, transaction, connection):\n    """\ud2b8\ub79c\uc7ad\uc158 \uc2dc\uc791 \ub85c\uae45"""\n    logger.info("Transaction started")\n\n@event.listens_for(Session, "after_commit")\ndef after_commit(session):\n    """\ucee4\ubc0b \ub85c\uae45"""\n    logger.info("Transaction committed")\n\n@event.listens_for(Session, "after_rollback")\ndef after_rollback(session):\n    """\ub864\ubc31 \ub85c\uae45"""\n    logger.warning("Transaction rolled back")\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"\ud2b8\ub79c\uc7ad\uc158\uc740 \ucd5c\ub300\ud55c \uc9e7\uac8c \uc720\uc9c0\ud558\uc138\uc694. \uae34 \ud2b8\ub79c\uc7ad\uc158\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub77d\uc744 \uc720\ubc1c\ud558\uace0 \uc131\ub2a5\uc744 \uc800\ud558\uc2dc\ud0b5\ub2c8\ub2e4."})}),"\n",(0,r.jsx)(n.h2,{id:"410-\uc138\uc158-\uad00\ub9ac-\ud328\ud134",children:"4.10 \uc138\uc158 \uad00\ub9ac \ud328\ud134"}),"\n",(0,r.jsx)(n.h3,{id:"fastapi-dependency-injection",children:"FastAPI Dependency Injection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Depends, FastAPI\nfrom sqlalchemy.orm import Session\n\napp = FastAPI()\n\n# \uc138\uc158 \uc0dd\uc131 \ud568\uc218\ndef get_db():\n    """\uc138\uc158 \uc758\uc874\uc131"""\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\n@app.get("/users/{user_id}")\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    user = db.get(User, user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    return user\n\n@app.post("/users/")\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    db_user = User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n'})}),"\n",(0,r.jsx)(n.h3,{id:"context-manager-\ud328\ud134",children:"Context Manager \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from contextlib import contextmanager\n\n@contextmanager\ndef get_db_context():\n    """Context manager\ub85c \uc138\uc158 \uad00\ub9ac"""\n    db = SessionLocal()\n    try:\n        yield db\n        db.commit()\n    except Exception:\n        db.rollback()\n        raise\n    finally:\n        db.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndef create_user(username: str, email: str):\n    with get_db_context() as db:\n        user = User(username=username, email=email)\n        db.add(user)\n        # with \ube14\ub85d \uc885\ub8cc \uc2dc \uc790\ub3d9 \ucee4\ubc0b\n    return user\n'})}),"\n",(0,r.jsx)(n.h3,{id:"repository-\ud328\ud134",children:"Repository \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar, Type, List, Optional\n\nT = TypeVar(\'T\')\n\nclass BaseRepository(ABC, Generic[T]):\n    """\uae30\ubcf8 \ub9ac\ud3ec\uc9c0\ud1a0\ub9ac \uc778\ud130\ud398\uc774\uc2a4"""\n\n    def __init__(self, db: Session, model: Type[T]):\n        self.db = db\n        self.model = model\n\n    def get(self, id: int) -> Optional[T]:\n        return self.db.get(self.model, id)\n\n    def get_all(self, skip: int = 0, limit: int = 100) -> List[T]:\n        stmt = select(self.model).offset(skip).limit(limit)\n        return self.db.scalars(stmt).all()\n\n    def create(self, **kwargs) -> T:\n        obj = self.model(**kwargs)\n        self.db.add(obj)\n        self.db.commit()\n        self.db.refresh(obj)\n        return obj\n\n    def update(self, id: int, **kwargs) -> Optional[T]:\n        obj = self.get(id)\n        if obj:\n            for key, value in kwargs.items():\n                setattr(obj, key, value)\n            self.db.commit()\n            self.db.refresh(obj)\n        return obj\n\n    def delete(self, id: int) -> bool:\n        obj = self.get(id)\n        if obj:\n            self.db.delete(obj)\n            self.db.commit()\n            return True\n        return False\n\nclass UserRepository(BaseRepository[User]):\n    """\uc0ac\uc6a9\uc790 \ub9ac\ud3ec\uc9c0\ud1a0\ub9ac"""\n\n    def __init__(self, db: Session):\n        super().__init__(db, User)\n\n    def get_by_username(self, username: str) -> Optional[User]:\n        stmt = select(User).where(User.username == username)\n        return self.db.scalars(stmt).first()\n\n    def get_active_users(self) -> List[User]:\n        stmt = select(User).where(User.is_active == True)\n        return self.db.scalars(stmt).all()\n\n# \uc0ac\uc6a9 \uc608\uc81c\n@app.get("/users/{user_id}")\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    repo = UserRepository(db)\n    user = repo.get(user_id)\n    if not user:\n        raise HTTPException(status_code=404)\n    return user\n'})}),"\n",(0,r.jsx)(n.h3,{id:"unit-of-work-\ud328\ud134",children:"Unit of Work \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class UnitOfWork:\n    """\uc791\uc5c5 \ub2e8\uc704 \ud328\ud134"""\n\n    def __init__(self):\n        self.session: Session = None\n\n    def __enter__(self):\n        self.session = SessionLocal()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type is not None:\n            self.rollback()\n        self.session.close()\n\n    def commit(self):\n        self.session.commit()\n\n    def rollback(self):\n        self.session.rollback()\n\n    @property\n    def users(self) -> UserRepository:\n        return UserRepository(self.session)\n\n    @property\n    def posts(self) -> PostRepository:\n        return PostRepository(self.session)\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndef create_user_with_post(username: str, post_title: str):\n    """\uc0ac\uc6a9\uc790\uc640 \uac8c\uc2dc\uae00\uc744 \ud558\ub098\uc758 \uc791\uc5c5 \ub2e8\uc704\ub85c \uc0dd\uc131"""\n    with UnitOfWork() as uow:\n        user = uow.users.create(username=username)\n        post = uow.posts.create(title=post_title, user_id=user.id)\n        uow.commit()\n    return user, post\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ube44\ub3d9\uae30-\uc138\uc158-\uad00\ub9ac",children:"\ube44\ub3d9\uae30 \uc138\uc158 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker\n\n# \ube44\ub3d9\uae30 \uc5d4\uc9c4 \uc0dd\uc131\nasync_engine = create_async_engine(\n    "postgresql+asyncpg://user:pass@localhost/dbname",\n    echo=True\n)\n\n# \ube44\ub3d9\uae30 \uc138\uc158 \ud329\ud1a0\ub9ac\nAsyncSessionLocal = async_sessionmaker(\n    async_engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n\n# \ube44\ub3d9\uae30 \uc758\uc874\uc131\nasync def get_async_db():\n    async with AsyncSessionLocal() as session:\n        yield session\n\n# \ube44\ub3d9\uae30 API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.get("/users/{user_id}")\nasync def read_user_async(\n    user_id: int,\n    db: AsyncSession = Depends(get_async_db)\n):\n    stmt = select(User).where(User.id == user_id)\n    result = await db.execute(stmt)\n    user = result.scalar_one_or_none()\n\n    if not user:\n        raise HTTPException(status_code=404)\n    return user\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc138\uc158-\uc2a4\ucf54\ud504-\uad00\ub9ac",children:"\uc138\uc158 \uc2a4\ucf54\ud504 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import scoped_session\n\n# \uc2a4\ub808\ub4dc \ub85c\uceec \uc138\uc158\nthread_local_session = scoped_session(SessionLocal)\n\ndef get_scoped_session():\n    """\uc2a4\ub808\ub4dc\ubcc4 \uc138\uc158"""\n    return thread_local_session()\n\n# \uc0ac\uc6a9 \ud6c4 \uc815\ub9ac\ndef cleanup_session():\n    thread_local_session.remove()\n\n# \uc694\uccad\ubcc4 \uc138\uc158 (FastAPI \ubbf8\ub4e4\uc6e8\uc5b4)\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nclass DBSessionMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        request.state.db = SessionLocal()\n        try:\n            response = await call_next(request)\n        finally:\n            request.state.db.close()\n        return response\n\napp.add_middleware(DBSessionMiddleware)\n\n# \uc5d4\ub4dc\ud3ec\uc778\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\n@app.get("/users")\ndef get_users(request: Request):\n    db = request.state.db\n    return db.query(User).all()\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0\uc11c\ub294 Repository \ud328\ud134\uc774\ub098 Unit of Work \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\uc5ec \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uacfc \ub370\uc774\ud130 \uc561\uc138\uc2a4\ub97c \ubd84\ub9ac\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4."})}),"\n",(0,r.jsx)(n.h2,{id:"411-n1-\ubb38\uc81c-\ud574\uacb0-eager-loading",children:"4.11 N+1 \ubb38\uc81c \ud574\uacb0 (Eager Loading)"}),"\n",(0,r.jsx)(n.h3,{id:"n1-\ubb38\uc81c\ub780",children:"N+1 \ubb38\uc81c\ub780?"}),"\n",(0,r.jsx)(n.p,{children:"N+1 \ubb38\uc81c\ub294 \uc5f0\uad00\ub41c \ub370\uc774\ud130\ub97c \uc870\ud68c\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294 \uc131\ub2a5 \ubb38\uc81c\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# BAD: N+1 \ubb38\uc81c \ubc1c\uc0dd\nusers = db.query(User).all()  # 1 \ucffc\ub9ac\nfor user in users:\n    print(len(user.posts))  # N \ucffc\ub9ac (\uc0ac\uc6a9\uc790 \uc218\ub9cc\ud07c)\n\n# \ucd1d 1 + N \ucffc\ub9ac \uc2e4\ud589\n# \uc0ac\uc6a9\uc790\uac00 100\uba85\uc774\uba74 101\uac1c\uc758 \ucffc\ub9ac!\n"})}),"\n",(0,r.jsx)(n.h3,{id:"eager-loading-\uc804\ub7b5",children:"Eager Loading \uc804\ub7b5"}),"\n",(0,r.jsx)(n.h4,{id:"1-selectin-loading",children:"1. Selectin Loading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import selectinload\n\n# GOOD: Selectin Loading \uc0ac\uc6a9\nstmt = select(User).options(selectinload(User.posts))\nusers = db.scalars(stmt).all()\n\nfor user in users:\n    print(len(user.posts))  # \ucd94\uac00 \ucffc\ub9ac \uc5c6\uc74c\n\n# \ucd1d 2 \ucffc\ub9ac\ub9cc \uc2e4\ud589:\n# SELECT * FROM users\n# SELECT * FROM posts WHERE user_id IN (...)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-joined-loading",children:"2. Joined Loading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import joinedload\n\n# Joined Loading: LEFT OUTER JOIN \uc0ac\uc6a9\nstmt = select(User).options(joinedload(User.posts))\nusers = db.scalars(stmt).unique().all()\n\n# \ucd1d 1 \ucffc\ub9ac\ub9cc \uc2e4\ud589:\n# SELECT * FROM users LEFT OUTER JOIN posts ON ...\n\n# \uc8fc\uc758: unique() \ud544\uc218! (\uc911\ubcf5 \uc81c\uac70)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-subquery-loading",children:"3. Subquery Loading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import subqueryload\n\n# Subquery Loading: \uc11c\ube0c\ucffc\ub9ac \uc0ac\uc6a9\nstmt = select(User).options(subqueryload(User.posts))\nusers = db.scalars(stmt).all()\n\n# \ucd1d 2 \ucffc\ub9ac \uc2e4\ud589:\n# SELECT * FROM users\n# SELECT * FROM posts WHERE user_id IN (SELECT id FROM users)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc911\ucca9\ub41c-\uad00\uacc4-\ub85c\ub529",children:"\uc911\ucca9\ub41c \uad00\uacc4 \ub85c\ub529"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \uc5ec\ub7ec \ub2e8\uacc4\uc758 \uad00\uacc4\ub97c \ud55c\ubc88\uc5d0 \ub85c\ub4dc\nstmt = (\n    select(User)\n    .options(\n        selectinload(User.posts)\n        .selectinload(Post.comments)\n        .selectinload(Comment.author)\n    )\n)\nusers = db.scalars(stmt).all()\n\n# \uc0ac\uc6a9\uc790 -> \uac8c\uc2dc\uae00 -> \ub313\uae00 -> \uc791\uc131\uc790\uae4c\uc9c0 \ubaa8\ub450 \ub85c\ub4dc\nfor user in users:\n    for post in user.posts:\n        for comment in post.comments:\n            print(comment.author.username)  # \ucd94\uac00 \ucffc\ub9ac \uc5c6\uc74c\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ub85c\ub529-\uc804\ub7b5-\ube44\uad50",children:"\ub85c\ub529 \uc804\ub7b5 \ube44\uad50"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# 1. Lazy Loading (\uae30\ubcf8\uac12)\nclass User(Base):\n    posts: Mapped[List["Post"]] = relationship()\n    # \uc811\uadfc \uc2dc\ub9c8\ub2e4 \ucffc\ub9ac \uc2e4\ud589\n\n# 2. Eager Loading (\ud56d\uc0c1 \ub85c\ub4dc)\nclass User(Base):\n    posts: Mapped[List["Post"]] = relationship(lazy=\'selectin\')\n    # \ud56d\uc0c1 selectin \ub85c\ub529\n\n# 3. Immediate Loading\nclass User(Base):\n    posts: Mapped[List["Post"]] = relationship(lazy=\'immediate\')\n    # \ubd80\ubaa8 \ub85c\ub4dc \uc2dc \uc989\uc2dc \ub85c\ub4dc\n\n# 4. No Loading\nclass User(Base):\n    posts: Mapped[List["Post"]] = relationship(lazy=\'noload\')\n    # \ub85c\ub4dc\ud558\uc9c0 \uc54a\uc74c\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc870\uac74\ubd80-\ub85c\ub529",children:"\uc870\uac74\ubd80 \ub85c\ub529"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import Load\n\n# \ud2b9\uc815 \uceec\ub7fc\ub9cc \ub85c\ub4dc\nstmt = (\n    select(User)\n    .options(\n        selectinload(User.posts)\n        .load_only(Post.id, Post.title)  # content\ub294 \uc81c\uc678\n    )\n)\n\n# \ud2b9\uc815 \uc870\uac74\uc73c\ub85c \ud544\ud130\ub9c1\nfrom sqlalchemy import and_\n\nstmt = (\n    select(User)\n    .options(\n        selectinload(User.posts).where(Post.is_published == True)\n    )\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ub85c\ub529-\ucd5c\uc801\ud654-\ud328\ud134",children:"\ub85c\ub529 \ucd5c\uc801\ud654 \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def get_users_with_posts(db: Session, include_posts: bool = False):\n    """\uc870\uac74\uc5d0 \ub530\ub978 \ub85c\ub529 \ucd5c\uc801\ud654"""\n    stmt = select(User)\n\n    if include_posts:\n        stmt = stmt.options(selectinload(User.posts))\n\n    return db.scalars(stmt).all()\n\ndef get_user_feed(db: Session, user_id: int):\n    """\ubcf5\uc7a1\ud55c \ub85c\ub529 \ucd5c\uc801\ud654"""\n    stmt = (\n        select(User)\n        .where(User.id == user_id)\n        .options(\n            # \ucd5c\uadfc \uac8c\uc2dc\uae00\ub9cc \ub85c\ub4dc\n            selectinload(User.posts)\n            .where(Post.created_at > datetime.now() - timedelta(days=30))\n            .options(\n                # \uac8c\uc2dc\uae00\uc758 \ub313\uae00 \ub85c\ub4dc (\ucd5c\ub300 10\uac1c)\n                selectinload(Post.comments).limit(10),\n                # \uac8c\uc2dc\uae00\uc758 \ud0dc\uadf8 \ub85c\ub4dc\n                selectinload(Post.tags)\n            )\n        )\n    )\n\n    return db.scalars(stmt).first()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc131\ub2a5-\uce21\uc815",children:"\uc131\ub2a5 \uce21\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import event\nfrom sqlalchemy.engine import Engine\nimport time\n\nclass QueryCounter:\n    """\ucffc\ub9ac \uce74\uc6b4\ud130"""\n    def __init__(self):\n        self.count = 0\n        self.queries = []\n\n    def reset(self):\n        self.count = 0\n        self.queries = []\n\ncounter = QueryCounter()\n\n@event.listens_for(Engine, "before_cursor_execute")\ndef before_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    counter.count += 1\n    counter.queries.append(statement)\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndef test_n_plus_one():\n    counter.reset()\n\n    # N+1 \ubb38\uc81c\n    users = db.query(User).all()\n    for user in users:\n        len(user.posts)\n\n    print(f"N+1 \ubb38\uc81c: {counter.count} \ucffc\ub9ac")\n\n    counter.reset()\n\n    # Eager Loading\n    stmt = select(User).options(selectinload(User.posts))\n    users = db.scalars(stmt).all()\n    for user in users:\n        len(user.posts)\n\n    print(f"Eager Loading: {counter.count} \ucffc\ub9ac")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ub85c\ub529-\uc804\ub7b5-\uc120\ud0dd-\uac00\uc774\ub4dc",children:"\ub85c\ub529 \uc804\ub7b5 \uc120\ud0dd \uac00\uc774\ub4dc"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"\uc804\ub7b5"}),(0,r.jsx)(n.th,{children:"\uc7a5\uc810"}),(0,r.jsx)(n.th,{children:"\ub2e8\uc810"}),(0,r.jsx)(n.th,{children:"\uc0ac\uc6a9 \uc2dc\uae30"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Lazy"}),(0,r.jsx)(n.td,{children:"\uba54\ubaa8\ub9ac \ud6a8\uc728\uc801"}),(0,r.jsx)(n.td,{children:"N+1 \ubb38\uc81c"}),(0,r.jsx)(n.td,{children:"\uad00\uacc4\ub97c \uac70\uc758 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \ub54c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Selectin"}),(0,r.jsx)(n.td,{children:"\uade0\ud615\uc788\ub294 \uc131\ub2a5"}),(0,r.jsx)(n.td,{children:"\ucffc\ub9ac 2\uac1c"}),(0,r.jsx)(n.td,{children:"\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 (\uad8c\uc7a5)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Joined"}),(0,r.jsx)(n.td,{children:"\ucffc\ub9ac 1\uac1c"}),(0,r.jsx)(n.td,{children:"\uc911\ubcf5 \ub370\uc774\ud130, \uba54\ubaa8\ub9ac \uc0ac\uc6a9"}),(0,r.jsx)(n.td,{children:"1:1 \uad00\uacc4"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Subquery"}),(0,r.jsx)(n.td,{children:"\ubcf5\uc7a1\ud55c \ud544\ud130\ub9c1"}),(0,r.jsx)(n.td,{children:"\uc11c\ube0c\ucffc\ub9ac \uc624\ubc84\ud5e4\ub4dc"}),(0,r.jsx)(n.td,{children:"\ubcf5\uc7a1\ud55c \uc870\uac74\uc774 \ud544\uc694\ud560 \ub54c"})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"joinedload"}),"\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \ubc18\ub4dc\uc2dc ",(0,r.jsx)(n.code,{children:"unique()"}),"\ub97c \ud638\ucd9c\ud558\uc138\uc694. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc911\ubcf5\ub41c \uac1d\uccb4\uac00 \ubc18\ud658\ub429\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(n.h2,{id:"412-\uc2e4\uc2b5-\ubb38\uc81c",children:"4.12 \uc2e4\uc2b5 \ubb38\uc81c"}),"\n",(0,r.jsx)(n.h3,{id:"\ubb38\uc81c-1-\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c-\ubaa8\ub378-\uc124\uacc4",children:"\ubb38\uc81c 1: \ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c \ubaa8\ub378 \uc124\uacc4"}),"\n",(0,r.jsx)(n.p,{children:"\ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\ub294 \ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c\uc758 \ubaa8\ub378\uc744 \uc124\uacc4\ud558\uc138\uc694:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User: \uc0ac\uc6a9\uc790 (username, email, password_hash, created_at)"}),"\n",(0,r.jsx)(n.li,{children:"Post: \uac8c\uc2dc\uae00 (title, content, published_at, views, user_id)"}),"\n",(0,r.jsx)(n.li,{children:"Comment: \ub313\uae00 (content, created_at, user_id, post_id)"}),"\n",(0,r.jsx)(n.li,{children:"Tag: \ud0dc\uadf8 (name)"}),"\n",(0,r.jsxs)(n.li,{children:["Post\uc640 Tag\ub294 N",":M"," \uad00\uacc4"]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\nfrom typing import List, Optional\nfrom sqlalchemy import String, Text, DateTime, ForeignKey, Table, Column, func\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship\n\nclass Base(DeclarativeBase):\n    pass\n\n# N:M \uc5f0\uacb0 \ud14c\uc774\ube14\npost_tags = Table(\n    \'post_tags\',\n    Base.metadata,\n    Column(\'post_id\', ForeignKey(\'posts.id\'), primary_key=True),\n    Column(\'tag_id\', ForeignKey(\'tags.id\'), primary_key=True)\n)\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50), unique=True, index=True)\n    email: Mapped[str] = mapped_column(String(100), unique=True, index=True)\n    password_hash: Mapped[str] = mapped_column(String(255))\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n\n    # \uad00\uacc4\n    posts: Mapped[List["Post"]] = relationship(\n        back_populates="author",\n        cascade="all, delete-orphan"\n    )\n    comments: Mapped[List["Comment"]] = relationship(\n        back_populates="author",\n        cascade="all, delete-orphan"\n    )\n\n    def __repr__(self):\n        return f"<User(id={self.id}, username=\'{self.username}\')>"\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(Text)\n    published_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))\n    views: Mapped[int] = mapped_column(default=0)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n\n    # \uad00\uacc4\n    author: Mapped["User"] = relationship(back_populates="posts")\n    comments: Mapped[List["Comment"]] = relationship(\n        back_populates="post",\n        cascade="all, delete-orphan"\n    )\n    tags: Mapped[List["Tag"]] = relationship(\n        secondary=post_tags,\n        back_populates="posts"\n    )\n\n    def __repr__(self):\n        return f"<Post(id={self.id}, title=\'{self.title}\')>"\n\nclass Comment(Base):\n    __tablename__ = \'comments\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    content: Mapped[str] = mapped_column(Text)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n    post_id: Mapped[int] = mapped_column(ForeignKey(\'posts.id\'))\n\n    # \uad00\uacc4\n    author: Mapped["User"] = relationship(back_populates="comments")\n    post: Mapped["Post"] = relationship(back_populates="comments")\n\n    def __repr__(self):\n        return f"<Comment(id={self.id}, post_id={self.post_id})>"\n\nclass Tag(Base):\n    __tablename__ = \'tags\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50), unique=True, index=True)\n\n    # \uad00\uacc4\n    posts: Mapped[List["Post"]] = relationship(\n        secondary=post_tags,\n        back_populates="tags"\n    )\n\n    def __repr__(self):\n        return f"<Tag(id={self.id}, name=\'{self.name}\')>"\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"\ubb38\uc81c-2-\ubcf5\uc7a1\ud55c-\ucffc\ub9ac-\uc791\uc131",children:"\ubb38\uc81c 2: \ubcf5\uc7a1\ud55c \ucffc\ub9ac \uc791\uc131"}),"\n",(0,r.jsx)(n.p,{children:"\uc704 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c \ucffc\ub9ac\ub97c \uc791\uc131\ud558\uc138\uc694:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\ucd5c\uadfc 7\uc77c\uac04 \uac00\uc7a5 \ub9ce\uc774 \uc870\ud68c\ub41c \uac8c\uc2dc\uae00 \uc0c1\uc704 10\uac1c"}),"\n",(0,r.jsx)(n.li,{children:"\ud2b9\uc815 \uc0ac\uc6a9\uc790\uac00 \uc791\uc131\ud55c \uac8c\uc2dc\uae00\uc758 \ucd1d \uc870\ud68c\uc218\uc640 \ub313\uae00 \uc218"}),"\n",(0,r.jsx)(n.li,{children:"\ud0dc\uadf8\ubcc4 \uac8c\uc2dc\uae00 \uc218\uc640 \ucd1d \uc870\ud68c\uc218"}),"\n",(0,r.jsx)(n.li,{children:"\ub313\uae00\uc774 5\uac1c \uc774\uc0c1\uc778 \uac8c\uc2dc\uae00\uacfc \uc791\uc131\uc790 \uc815\ubcf4"}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func, desc\nfrom datetime import datetime, timedelta\n\n# 1. \ucd5c\uadfc 7\uc77c\uac04 \uac00\uc7a5 \ub9ce\uc774 \uc870\ud68c\ub41c \uac8c\uc2dc\uae00 \uc0c1\uc704 10\uac1c\ndef get_top_posts(db: Session):\n    seven_days_ago = datetime.now() - timedelta(days=7)\n\n    stmt = (\n        select(Post)\n        .where(Post.created_at >= seven_days_ago)\n        .order_by(desc(Post.views))\n        .limit(10)\n    )\n\n    return db.scalars(stmt).all()\n\n# 2. \ud2b9\uc815 \uc0ac\uc6a9\uc790\uac00 \uc791\uc131\ud55c \uac8c\uc2dc\uae00\uc758 \ucd1d \uc870\ud68c\uc218\uc640 \ub313\uae00 \uc218\ndef get_user_stats(db: Session, user_id: int):\n    stmt = (\n        select(\n            func.count(Post.id).label('total_posts'),\n            func.sum(Post.views).label('total_views'),\n            func.count(Comment.id).label('total_comments')\n        )\n        .select_from(User)\n        .join(User.posts)\n        .outerjoin(Post.comments)\n        .where(User.id == user_id)\n        .group_by(User.id)\n    )\n\n    result = db.execute(stmt).first()\n    return {\n        'total_posts': result.total_posts or 0,\n        'total_views': result.total_views or 0,\n        'total_comments': result.total_comments or 0\n    }\n\n# 3. \ud0dc\uadf8\ubcc4 \uac8c\uc2dc\uae00 \uc218\uc640 \ucd1d \uc870\ud68c\uc218\ndef get_tag_statistics(db: Session):\n    stmt = (\n        select(\n            Tag.name,\n            func.count(Post.id).label('post_count'),\n            func.sum(Post.views).label('total_views')\n        )\n        .join(Tag.posts)\n        .group_by(Tag.id)\n        .order_by(desc(func.count(Post.id)))\n    )\n\n    results = db.execute(stmt).all()\n    return [\n        {\n            'tag_name': r.name,\n            'post_count': r.post_count,\n            'total_views': r.total_views or 0\n        }\n        for r in results\n    ]\n\n# 4. \ub313\uae00\uc774 5\uac1c \uc774\uc0c1\uc778 \uac8c\uc2dc\uae00\uacfc \uc791\uc131\uc790 \uc815\ubcf4\ndef get_popular_posts_with_authors(db: Session):\n    stmt = (\n        select(Post, User, func.count(Comment.id).label('comment_count'))\n        .join(Post.author)\n        .join(Post.comments)\n        .group_by(Post.id, User.id)\n        .having(func.count(Comment.id) >= 5)\n        .order_by(desc(func.count(Comment.id)))\n    )\n\n    results = db.execute(stmt).all()\n    return [\n        {\n            'post': r.Post,\n            'author': r.User,\n            'comment_count': r.comment_count\n        }\n        for r in results\n    ]\n\n# \uc0ac\uc6a9 \uc608\uc81c\n# stats = get_user_stats(db, user_id=1)\n# print(f\"\ucd1d \uac8c\uc2dc\uae00: {stats['total_posts']}\")\n# print(f\"\ucd1d \uc870\ud68c\uc218: {stats['total_views']}\")\n# print(f\"\ucd1d \ub313\uae00\uc218: {stats['total_comments']}\")\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"\ubb38\uc81c-3-n1-\ubb38\uc81c-\ud574\uacb0",children:"\ubb38\uc81c 3: N+1 \ubb38\uc81c \ud574\uacb0"}),"\n",(0,r.jsx)(n.p,{children:"\ub2e4\uc74c \ucf54\ub4dc\uc758 \uc131\ub2a5 \ubb38\uc81c\ub97c \ucc3e\uace0 \ucd5c\uc801\ud654\ud558\uc138\uc694:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_posts_with_details(db: Session):\n    posts = db.query(Post).all()\n\n    result = []\n    for post in posts:\n        result.append({\n            'title': post.title,\n            'author': post.author.username,\n            'comment_count': len(post.comments),\n            'tags': [tag.name for tag in post.tags]\n        })\n\n    return result\n"})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import selectinload\n\n# \ubb38\uc81c: N+1 \ucffc\ub9ac \ubc1c\uc0dd\n# - posts \uc870\ud68c: 1 \ucffc\ub9ac\n# - \uac01 post\uc758 author: N \ucffc\ub9ac\n# - \uac01 post\uc758 comments: N \ucffc\ub9ac\n# - \uac01 post\uc758 tags: N \ucffc\ub9ac\n# \ucd1d: 1 + 3N \ucffc\ub9ac\n\n# \ud574\uacb0: Eager Loading \uc0ac\uc6a9\ndef get_posts_with_details_optimized(db: Session):\n    stmt = (\n        select(Post)\n        .options(\n            selectinload(Post.author),  # author \ubbf8\ub9ac \ub85c\ub4dc\n            selectinload(Post.comments),  # comments \ubbf8\ub9ac \ub85c\ub4dc\n            selectinload(Post.tags)  # tags \ubbf8\ub9ac \ub85c\ub4dc\n        )\n    )\n\n    posts = db.scalars(stmt).all()\n\n    result = []\n    for post in posts:\n        result.append({\n            'title': post.title,\n            'author': post.author.username,  # \ucd94\uac00 \ucffc\ub9ac \uc5c6\uc74c\n            'comment_count': len(post.comments),  # \ucd94\uac00 \ucffc\ub9ac \uc5c6\uc74c\n            'tags': [tag.name for tag in post.tags]  # \ucd94\uac00 \ucffc\ub9ac \uc5c6\uc74c\n        })\n\n    return result\n\n# \ucd1d 4 \ucffc\ub9ac\ub9cc \uc2e4\ud589:\n# 1. SELECT * FROM posts\n# 2. SELECT * FROM users WHERE id IN (...)\n# 3. SELECT * FROM comments WHERE post_id IN (...)\n# 4. SELECT * FROM tags JOIN post_tags ...\n\n# \ucd94\uac00 \ucd5c\uc801\ud654: \ud544\uc694\ud55c \uceec\ub7fc\ub9cc \uc120\ud0dd\nfrom sqlalchemy.orm import load_only\n\ndef get_posts_with_details_ultra_optimized(db: Session):\n    stmt = (\n        select(Post)\n        .options(\n            selectinload(Post.author).load_only(User.username),\n            selectinload(Post.comments).load_only(Comment.id),\n            selectinload(Post.tags).load_only(Tag.name)\n        )\n    )\n\n    posts = db.scalars(stmt).all()\n\n    result = []\n    for post in posts:\n        result.append({\n            'title': post.title,\n            'author': post.author.username,\n            'comment_count': len(post.comments),\n            'tags': [tag.name for tag in post.tags]\n        })\n\n    return result\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"\ubb38\uc81c-4-\ud2b8\ub79c\uc7ad\uc158\uacfc-\uc5d0\ub7ec-\ucc98\ub9ac",children:"\ubb38\uc81c 4: \ud2b8\ub79c\uc7ad\uc158\uacfc \uc5d0\ub7ec \ucc98\ub9ac"}),"\n",(0,r.jsx)(n.p,{children:"\uac8c\uc2dc\uae00 \ubc1c\ud589 \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uc138\uc694. \ub2e4\uc74c \uc870\uac74\uc744 \ub9cc\uc871\ud574\uc57c \ud569\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\uac8c\uc2dc\uae00\uc758 ",(0,r.jsx)(n.code,{children:"published_at"}),"\uc744 \ud604\uc7ac \uc2dc\uac04\uc73c\ub85c \uc124\uc815"]}),"\n",(0,r.jsx)(n.li,{children:"\uac8c\uc2dc\uae00\uc5d0 \ud0dc\uadf8\uac00 \uc5c6\uc73c\uba74 \uc5d0\ub7ec \ubc1c\uc0dd"}),"\n",(0,r.jsxs)(n.li,{children:["\ubaa8\ub4e0 \ud0dc\uadf8\uc758 \uc0ac\uc6a9 \ud69f\uc218\ub97c 1\uc529 \uc99d\uac00 (Tag \ubaa8\ub378\uc5d0 ",(0,r.jsx)(n.code,{children:"usage_count"})," \ud544\ub4dc \ucd94\uac00 \uac00\uc815)"]}),"\n",(0,r.jsx)(n.li,{children:"\uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \ubaa8\ub4e0 \ubcc0\uacbd\uc0ac\ud56d \ub864\ubc31"}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\nfrom sqlalchemy.exc import IntegrityError\n\nclass PublishError(Exception):\n    """\uac8c\uc2dc\uae00 \ubc1c\ud589 \uc5d0\ub7ec"""\n    pass\n\ndef publish_post(db: Session, post_id: int) -> Post:\n    """\uac8c\uc2dc\uae00 \ubc1c\ud589 (\ud2b8\ub79c\uc7ad\uc158)"""\n    try:\n        # \uac8c\uc2dc\uae00 \uc870\ud68c\n        post = db.get(Post, post_id)\n        if not post:\n            raise PublishError("\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.")\n\n        # \uc774\ubbf8 \ubc1c\ud589\ub41c \uac8c\uc2dc\uae00\uc778\uc9c0 \ud655\uc778\n        if post.published_at:\n            raise PublishError("\uc774\ubbf8 \ubc1c\ud589\ub41c \uac8c\uc2dc\uae00\uc785\ub2c8\ub2e4.")\n\n        # \ud0dc\uadf8 \ud655\uc778 (Eager Loading\uc73c\ub85c \ud0dc\uadf8 \ubbf8\ub9ac \ub85c\ub4dc)\n        stmt = (\n            select(Post)\n            .where(Post.id == post_id)\n            .options(selectinload(Post.tags))\n        )\n        post = db.scalars(stmt).first()\n\n        if not post.tags:\n            raise PublishError("\uac8c\uc2dc\uae00\uc5d0 \ucd5c\uc18c 1\uac1c \uc774\uc0c1\uc758 \ud0dc\uadf8\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.")\n\n        # \ubc1c\ud589 \uc2dc\uac04 \uc124\uc815\n        post.published_at = datetime.now()\n\n        # \ubaa8\ub4e0 \ud0dc\uadf8\uc758 \uc0ac\uc6a9 \ud69f\uc218 \uc99d\uac00\n        for tag in post.tags:\n            tag.usage_count = (tag.usage_count or 0) + 1\n\n        # \ucee4\ubc0b\n        db.commit()\n        db.refresh(post)\n\n        return post\n\n    except PublishError:\n        # \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \uc5d0\ub7ec\n        db.rollback()\n        raise\n    except IntegrityError as e:\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc81c\uc57d\uc870\uac74 \uc704\ubc18\n        db.rollback()\n        raise PublishError(f"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc624\ub958: {str(e)}")\n    except Exception as e:\n        # \uae30\ud0c0 \uc608\uc678\n        db.rollback()\n        raise PublishError(f"\uc54c \uc218 \uc5c6\ub294 \uc624\ub958: {str(e)}")\n\n# \uc0ac\uc6a9 \uc608\uc81c\ntry:\n    post = publish_post(db, post_id=1)\n    print(f"\uac8c\uc2dc\uae00 \'{post.title}\'\uc774(\uac00) \ubc1c\ud589\ub418\uc5c8\uc2b5\ub2c8\ub2e4.")\nexcept PublishError as e:\n    print(f"\ubc1c\ud589 \uc2e4\ud328: {e}")\n\n# \uace0\uae09: \ub370\ucf54\ub808\uc774\ud130\ub97c \uc0ac\uc6a9\ud55c \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac\nfrom functools import wraps\n\ndef transactional(func):\n    """\ud2b8\ub79c\uc7ad\uc158 \ub370\ucf54\ub808\uc774\ud130"""\n    @wraps(func)\n    def wrapper(db: Session, *args, **kwargs):\n        try:\n            result = func(db, *args, **kwargs)\n            db.commit()\n            return result\n        except Exception:\n            db.rollback()\n            raise\n    return wrapper\n\n@transactional\ndef publish_post_decorated(db: Session, post_id: int) -> Post:\n    """\ub370\ucf54\ub808\uc774\ud130\ub97c \uc0ac\uc6a9\ud55c \uac8c\uc2dc\uae00 \ubc1c\ud589"""\n    post = db.get(Post, post_id)\n    if not post:\n        raise PublishError("\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.")\n\n    if not post.tags:\n        raise PublishError("\ud0dc\uadf8\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.")\n\n    post.published_at = datetime.now()\n\n    for tag in post.tags:\n        tag.usage_count = (tag.usage_count or 0) + 1\n\n    return post\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"\ubb38\uc81c-5-repository-\ud328\ud134-\uad6c\ud604",children:"\ubb38\uc81c 5: Repository \ud328\ud134 \uad6c\ud604"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"PostRepository"}),"\ub97c \uad6c\ud604\ud558\uc138\uc694. \ub2e4\uc74c \uba54\uc11c\ub4dc\ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_published_posts()"}),": \ubc1c\ud589\ub41c \uac8c\uc2dc\uae00 \ubaa9\ub85d"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_posts_by_tag()"}),": \ud2b9\uc815 \ud0dc\uadf8\uc758 \uac8c\uc2dc\uae00 \ubaa9\ub85d"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"increment_views()"}),": \uc870\ud68c\uc218 \uc99d\uac00"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"add_comment()"}),": \ub313\uae00 \ucd94\uac00"]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from typing import List, Optional\nfrom sqlalchemy import select, update\n\nclass PostRepository:\n    """\uac8c\uc2dc\uae00 \ub9ac\ud3ec\uc9c0\ud1a0\ub9ac"""\n\n    def __init__(self, db: Session):\n        self.db = db\n\n    def get(self, post_id: int) -> Optional[Post]:\n        """\uac8c\uc2dc\uae00 \uc870\ud68c"""\n        return self.db.get(Post, post_id)\n\n    def get_published_posts(\n        self,\n        skip: int = 0,\n        limit: int = 100,\n        order_by: str = \'published_at\'\n    ) -> List[Post]:\n        """\ubc1c\ud589\ub41c \uac8c\uc2dc\uae00 \ubaa9\ub85d"""\n        stmt = (\n            select(Post)\n            .where(Post.published_at.isnot(None))\n            .order_by(desc(getattr(Post, order_by)))\n            .offset(skip)\n            .limit(limit)\n            .options(\n                selectinload(Post.author),\n                selectinload(Post.tags)\n            )\n        )\n\n        return self.db.scalars(stmt).all()\n\n    def get_posts_by_tag(\n        self,\n        tag_name: str,\n        skip: int = 0,\n        limit: int = 100\n    ) -> List[Post]:\n        """\ud2b9\uc815 \ud0dc\uadf8\uc758 \uac8c\uc2dc\uae00 \ubaa9\ub85d"""\n        stmt = (\n            select(Post)\n            .join(Post.tags)\n            .where(Tag.name == tag_name)\n            .where(Post.published_at.isnot(None))\n            .order_by(desc(Post.published_at))\n            .offset(skip)\n            .limit(limit)\n            .options(\n                selectinload(Post.author),\n                selectinload(Post.tags)\n            )\n        )\n\n        return self.db.scalars(stmt).all()\n\n    def increment_views(self, post_id: int) -> bool:\n        """\uc870\ud68c\uc218 \uc99d\uac00"""\n        stmt = (\n            update(Post)\n            .where(Post.id == post_id)\n            .values(views=Post.views + 1)\n        )\n\n        result = self.db.execute(stmt)\n        self.db.commit()\n\n        return result.rowcount > 0\n\n    def add_comment(\n        self,\n        post_id: int,\n        user_id: int,\n        content: str\n    ) -> Comment:\n        """\ub313\uae00 \ucd94\uac00"""\n        # \uac8c\uc2dc\uae00 \uc874\uc7ac \ud655\uc778\n        post = self.get(post_id)\n        if not post:\n            raise ValueError("\uac8c\uc2dc\uae00\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.")\n\n        # \ub313\uae00 \uc0dd\uc131\n        comment = Comment(\n            post_id=post_id,\n            user_id=user_id,\n            content=content\n        )\n\n        self.db.add(comment)\n        self.db.commit()\n        self.db.refresh(comment)\n\n        return comment\n\n    def search(\n        self,\n        keyword: str,\n        skip: int = 0,\n        limit: int = 100\n    ) -> List[Post]:\n        """\uac8c\uc2dc\uae00 \uac80\uc0c9"""\n        stmt = (\n            select(Post)\n            .where(\n                or_(\n                    Post.title.ilike(f\'%{keyword}%\'),\n                    Post.content.ilike(f\'%{keyword}%\')\n                )\n            )\n            .where(Post.published_at.isnot(None))\n            .order_by(desc(Post.published_at))\n            .offset(skip)\n            .limit(limit)\n        )\n\n        return self.db.scalars(stmt).all()\n\n# \uc0ac\uc6a9 \uc608\uc81c\n@app.get("/posts")\ndef list_posts(\n    skip: int = 0,\n    limit: int = 10,\n    db: Session = Depends(get_db)\n):\n    repo = PostRepository(db)\n    posts = repo.get_published_posts(skip=skip, limit=limit)\n    return posts\n\n@app.get("/posts/tag/{tag_name}")\ndef posts_by_tag(\n    tag_name: str,\n    skip: int = 0,\n    limit: int = 10,\n    db: Session = Depends(get_db)\n):\n    repo = PostRepository(db)\n    posts = repo.get_posts_by_tag(tag_name, skip=skip, limit=limit)\n    return posts\n\n@app.post("/posts/{post_id}/view")\ndef increment_post_view(post_id: int, db: Session = Depends(get_db)):\n    repo = PostRepository(db)\n    success = repo.increment_views(post_id)\n    if not success:\n        raise HTTPException(status_code=404, detail="Post not found")\n    return {"message": "View count incremented"}\n\n@app.post("/posts/{post_id}/comments")\ndef add_comment(\n    post_id: int,\n    content: str,\n    user_id: int,\n    db: Session = Depends(get_db)\n):\n    repo = PostRepository(db)\n    comment = repo.add_comment(post_id, user_id, content)\n    return comment\n'})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ucc38\uace0-\uc790\ub8cc",children:"\ucc38\uace0 \uc790\ub8cc"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.sqlalchemy.org/",children:"SQLAlchemy \uacf5\uc2dd \ubb38\uc11c"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/20/changelog/migration_20.html",children:"SQLAlchemy 2.0 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uac00\uc774\ub4dc"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://alembic.sqlalchemy.org/",children:"Alembic \ubb38\uc11c"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://fastapi.tiangolo.com/tutorial/sql-databases/",children:"FastAPI\uc640 SQLAlchemy"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);