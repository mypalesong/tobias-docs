"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1116],{4004:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"python/advanced/performance","title":"4. \uc131\ub2a5 \ucd5c\uc801\ud654","description":"Python \ud504\ub85c\uadf8\ub7a8\uc758 \uc131\ub2a5\uc744 \uce21\uc815\ud558\uace0 \ucd5c\uc801\ud654\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. \ud504\ub85c\ud30c\uc77c\ub9c1 \ub3c4\uad6c \uc0ac\uc6a9\ubc95, \uc54c\uace0\ub9ac\uc998 \ubcf5\uc7a1\ub3c4 \ubd84\uc11d, \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654, \uadf8\ub9ac\uace0 \uc2e4\uc804 \ucd5c\uc801\ud654 \uae30\ubc95\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/python/advanced/performance.md","sourceDirName":"python/advanced","slug":"/python/advanced/performance","permalink":"/docs/python/advanced/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/advanced/performance.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"pythonSidebar","previous":{"title":"3. \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","permalink":"/docs/python/advanced/context-managers"},"next":{"title":"5. \ud0c0\uc785 \ud78c\ud305","permalink":"/docs/python/advanced/typing"}}');var r=t(4848),s=t(8453);const a={sidebar_position:4},l="4. \uc131\ub2a5 \ucd5c\uc801\ud654",d={},o=[{value:"4.1 \ud504\ub85c\ud30c\uc77c\ub9c1 \uae30\ucd08",id:"41-\ud504\ub85c\ud30c\uc77c\ub9c1-\uae30\ucd08",level:2},{value:"cProfile \uc0ac\uc6a9\ud558\uae30",id:"cprofile-\uc0ac\uc6a9\ud558\uae30",level:3},{value:"line_profiler\ub85c \ub77c\uc778\ubcc4 \ubd84\uc11d",id:"line_profiler\ub85c-\ub77c\uc778\ubcc4-\ubd84\uc11d",level:3},{value:"4.2 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 \ubd84\uc11d (Big O)",id:"42-\uc2dc\uac04-\ubcf5\uc7a1\ub3c4-\ubd84\uc11d-big-o",level:2},{value:"Big O \ud45c\uae30\ubc95 \uc774\ud574\ud558\uae30",id:"big-o-\ud45c\uae30\ubc95-\uc774\ud574\ud558\uae30",level:3},{value:"\ubcf5\uc7a1\ub3c4 \ube44\uad50\ud45c",id:"\ubcf5\uc7a1\ub3c4-\ube44\uad50\ud45c",level:3},{value:"4.3 \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1",id:"43-\uba54\ubaa8\ub9ac-\ud504\ub85c\ud30c\uc77c\ub9c1",level:2},{value:"memory_profiler \uc0ac\uc6a9\ud558\uae30",id:"memory_profiler-\uc0ac\uc6a9\ud558\uae30",level:3},{value:"\uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc \uc791\uc131",id:"\uba54\ubaa8\ub9ac-\ud6a8\uc728\uc801\uc778-\ucf54\ub4dc-\uc791\uc131",level:3},{value:"4.4 timeit \ubaa8\ub4c8",id:"44-timeit-\ubaa8\ub4c8",level:2},{value:"\uc815\ud655\ud55c \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815",id:"\uc815\ud655\ud55c-\uc2e4\ud589-\uc2dc\uac04-\uce21\uc815",level:3},{value:"\uba85\ub839\uc904\uc5d0\uc11c timeit \uc0ac\uc6a9",id:"\uba85\ub839\uc904\uc5d0\uc11c-timeit-\uc0ac\uc6a9",level:3},{value:"4.5 \uc790\ub8cc\uad6c\uc870 \uc120\ud0dd",id:"45-\uc790\ub8cc\uad6c\uc870-\uc120\ud0dd",level:2},{value:"\uc131\ub2a5 \ube44\uad50: List vs Set vs Dict",id:"\uc131\ub2a5-\ube44\uad50-list-vs-set-vs-dict",level:3},{value:"\uc790\ub8cc\uad6c\uc870 \uc120\ud0dd \uac00\uc774\ub4dc",id:"\uc790\ub8cc\uad6c\uc870-\uc120\ud0dd-\uac00\uc774\ub4dc",level:3},{value:"4.6 \uc54c\uace0\ub9ac\uc998 \ucd5c\uc801\ud654",id:"46-\uc54c\uace0\ub9ac\uc998-\ucd5c\uc801\ud654",level:2},{value:"\uc608\uc81c 1: \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 \ucd5c\uc801\ud654",id:"\uc608\uc81c-1-\ud53c\ubcf4\ub098\uce58-\uc218\uc5f4-\ucd5c\uc801\ud654",level:3},{value:"\uc608\uc81c 2: \uc911\ubcf5 \ucc3e\uae30 \ucd5c\uc801\ud654",id:"\uc608\uc81c-2-\uc911\ubcf5-\ucc3e\uae30-\ucd5c\uc801\ud654",level:3},{value:"4.7 \uce90\uc2f1\uacfc \uba54\ubaa8\uc774\uc81c\uc774\uc158",id:"47-\uce90\uc2f1\uacfc-\uba54\ubaa8\uc774\uc81c\uc774\uc158",level:2},{value:"functools.lru_cache \ud65c\uc6a9",id:"functoolslru_cache-\ud65c\uc6a9",level:3},{value:"\uc218\ub3d9 \uce90\uc2f1 \uad6c\ud604",id:"\uc218\ub3d9-\uce90\uc2f1-\uad6c\ud604",level:3},{value:"\uc2e4\uc804 \uce90\uc2f1 \uc608\uc81c",id:"\uc2e4\uc804-\uce90\uc2f1-\uc608\uc81c",level:3},{value:"4.8 \uc81c\ub108\ub808\uc774\ud130 vs \ub9ac\uc2a4\ud2b8 \uc131\ub2a5",id:"48-\uc81c\ub108\ub808\uc774\ud130-vs-\ub9ac\uc2a4\ud2b8-\uc131\ub2a5",level:2},{value:"\uba54\ubaa8\ub9ac \ud6a8\uc728\uc131 \ube44\uad50",id:"\uba54\ubaa8\ub9ac-\ud6a8\uc728\uc131-\ube44\uad50",level:3},{value:"\uc81c\ub108\ub808\uc774\ud130 \ud65c\uc6a9 \uc608\uc81c",id:"\uc81c\ub108\ub808\uc774\ud130-\ud65c\uc6a9-\uc608\uc81c",level:3},{value:"\uc81c\ub108\ub808\uc774\ud130 \uba54\uc11c\ub4dc",id:"\uc81c\ub108\ub808\uc774\ud130-\uba54\uc11c\ub4dc",level:3},{value:"4.9 \ubb38\uc790\uc5f4 \uc5f0\uacb0 \ucd5c\uc801\ud654",id:"49-\ubb38\uc790\uc5f4-\uc5f0\uacb0-\ucd5c\uc801\ud654",level:2},{value:"\uc131\ub2a5 \ube44\uad50",id:"\uc131\ub2a5-\ube44\uad50",level:3},{value:"\ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305 \uc131\ub2a5",id:"\ubb38\uc790\uc5f4-\ud3ec\ub9f7\ud305-\uc131\ub2a5",level:3},{value:"\ub300\uc6a9\ub7c9 \ubb38\uc790\uc5f4 \ucc98\ub9ac",id:"\ub300\uc6a9\ub7c9-\ubb38\uc790\uc5f4-\ucc98\ub9ac",level:3},{value:"4.10 NumPy \uc218\uce58 \uc5f0\uc0b0",id:"410-numpy-\uc218\uce58-\uc5f0\uc0b0",level:2},{value:"NumPy vs \uc21c\uc218 Python",id:"numpy-vs-\uc21c\uc218-python",level:3},{value:"NumPy \ucd5c\uc801\ud654 \uae30\ubc95",id:"numpy-\ucd5c\uc801\ud654-\uae30\ubc95",level:3},{value:"\uc2e4\uc804 NumPy \ucd5c\uc801\ud654",id:"\uc2e4\uc804-numpy-\ucd5c\uc801\ud654",level:3},{value:"4.11 JIT \ucef4\ud30c\uc77c (Numba)",id:"411-jit-\ucef4\ud30c\uc77c-numba",level:2},{value:"Numba \uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"numba-\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"\ubcd1\ub82c \ucc98\ub9ac",id:"\ubcd1\ub82c-\ucc98\ub9ac",level:3},{value:"\uc2e4\uc804 Numba \uc608\uc81c",id:"\uc2e4\uc804-numba-\uc608\uc81c",level:3},{value:"4.12 PyPy \ub300\uc548",id:"412-pypy-\ub300\uc548",level:2},{value:"PyPy vs CPython",id:"pypy-vs-cpython",level:3},{value:"PyPy \uc0ac\uc6a9 \uc2dc\ub098\ub9ac\uc624",id:"pypy-\uc0ac\uc6a9-\uc2dc\ub098\ub9ac\uc624",level:3},{value:"\uc131\ub2a5 \ube44\uad50\ud45c",id:"\uc131\ub2a5-\ube44\uad50\ud45c",level:3},{value:"4.13 \uc2e4\uc804 \ucd5c\uc801\ud654 \uc608\uc81c",id:"413-\uc2e4\uc804-\ucd5c\uc801\ud654-\uc608\uc81c",level:2},{value:"Before/After \ube44\uad50 1: \ub370\uc774\ud130 \ucc98\ub9ac",id:"beforeafter-\ube44\uad50-1-\ub370\uc774\ud130-\ucc98\ub9ac",level:3},{value:"Before/After \ube44\uad50 2: \ubb38\uc790\uc5f4 \ucc98\ub9ac",id:"beforeafter-\ube44\uad50-2-\ubb38\uc790\uc5f4-\ucc98\ub9ac",level:3},{value:"Before/After \ube44\uad50 3: \uc54c\uace0\ub9ac\uc998 \uc120\ud0dd",id:"beforeafter-\ube44\uad50-3-\uc54c\uace0\ub9ac\uc998-\uc120\ud0dd",level:3},{value:"4.14 \ubcd1\ubaa9 \ud604\uc0c1 \uc2dd\ubcc4",id:"414-\ubcd1\ubaa9-\ud604\uc0c1-\uc2dd\ubcc4",level:2},{value:"\ud504\ub85c\ud30c\uc77c\ub9c1 \uc6cc\ud06c\ud50c\ub85c\uc6b0",id:"\ud504\ub85c\ud30c\uc77c\ub9c1-\uc6cc\ud06c\ud50c\ub85c\uc6b0",level:3},{value:"\uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1",id:"\uba54\ubaa8\ub9ac-\ud504\ub85c\ud30c\uc77c\ub9c1",level:3},{value:"\ubcd1\ubaa9 \ud604\uc0c1 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ubcd1\ubaa9-\ud604\uc0c1-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"4.15 \ucd5c\uc801\ud654 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"415-\ucd5c\uc801\ud654-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:2},{value:"\ucd5c\uc801\ud654 \uc6d0\uce59",id:"\ucd5c\uc801\ud654-\uc6d0\uce59",level:3},{value:"\ub2e8\uacc4\ubcc4 \ucd5c\uc801\ud654 \uc804\ub7b5",id:"\ub2e8\uacc4\ubcc4-\ucd5c\uc801\ud654-\uc804\ub7b5",level:3},{value:"\uc131\ub2a5 vs \uac00\ub3c5\uc131 \uade0\ud615",id:"\uc131\ub2a5-vs-\uac00\ub3c5\uc131-\uade0\ud615",level:3},{value:"4.16 \uc5f0\uc2b5 \ubb38\uc81c",id:"416-\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \uc911\ubcf5 \uc81c\uac70 \ucd5c\uc801\ud654",id:"\ubb38\uc81c-1-\uc911\ubcf5-\uc81c\uac70-\ucd5c\uc801\ud654",level:3},{value:"\ubb38\uc81c 2: Top K \uc694\uc18c \ucc3e\uae30",id:"\ubb38\uc81c-2-top-k-\uc694\uc18c-\ucc3e\uae30",level:3},{value:"\ubb38\uc81c 3: \ud589\ub82c \uc804\uce58 \ucd5c\uc801\ud654",id:"\ubb38\uc81c-3-\ud589\ub82c-\uc804\uce58-\ucd5c\uc801\ud654",level:3},{value:"\uc694\uc57d",id:"\uc694\uc57d",level:2},{value:"\ud575\uc2ec \ud3ec\uc778\ud2b8",id:"\ud575\uc2ec-\ud3ec\uc778\ud2b8",level:3},{value:"\ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:3}];function m(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"4-\uc131\ub2a5-\ucd5c\uc801\ud654",children:"4. \uc131\ub2a5 \ucd5c\uc801\ud654"})}),"\n",(0,r.jsx)(e.p,{children:"Python \ud504\ub85c\uadf8\ub7a8\uc758 \uc131\ub2a5\uc744 \uce21\uc815\ud558\uace0 \ucd5c\uc801\ud654\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. \ud504\ub85c\ud30c\uc77c\ub9c1 \ub3c4\uad6c \uc0ac\uc6a9\ubc95, \uc54c\uace0\ub9ac\uc998 \ubcf5\uc7a1\ub3c4 \ubd84\uc11d, \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654, \uadf8\ub9ac\uace0 \uc2e4\uc804 \ucd5c\uc801\ud654 \uae30\ubc95\uc744 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"41-\ud504\ub85c\ud30c\uc77c\ub9c1-\uae30\ucd08",children:"4.1 \ud504\ub85c\ud30c\uc77c\ub9c1 \uae30\ucd08"}),"\n",(0,r.jsx)(e.h3,{id:"cprofile-\uc0ac\uc6a9\ud558\uae30",children:"cProfile \uc0ac\uc6a9\ud558\uae30"}),"\n",(0,r.jsx)(e.p,{children:"Python \ub0b4\uc7a5 \ud504\ub85c\ud30c\uc77c\ub7ec\ub85c \ud568\uc218\ubcc4 \uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import cProfile\nimport pstats\nfrom io import StringIO\n\ndef fibonacci(n):\n    """\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 (\ube44\ud6a8\uc728\uc801\uc778 \uc7ac\uadc0)"""\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef profile_function():\n    """\ud504\ub85c\ud30c\uc77c\ub9c1 \ub300\uc0c1 \ud568\uc218"""\n    result = fibonacci(30)\n    return result\n\n# \ud504\ub85c\ud30c\uc77c\ub9c1 \uc2e4\ud589\nprofiler = cProfile.Profile()\nprofiler.enable()\nprofile_function()\nprofiler.disable()\n\n# \uacb0\uacfc \ucd9c\ub825\nstats = pstats.Stats(profiler)\nstats.sort_stats(\'cumulative\')\nstats.print_stats(10)  # \uc0c1\uc704 10\uac1c \ud568\uc218\n\n# \ud30c\uc77c\ub85c \uc800\uc7a5\nprofiler.dump_stats(\'profile_results.prof\')\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ucd9c\ub825 \uc608\uc2dc:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n  2692537    0.853    0.000    0.853    0.000 performance.py:4(fibonacci)\n        1    0.000    0.000    0.853    0.853 performance.py:9(profile_function)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"line_profiler\ub85c-\ub77c\uc778\ubcc4-\ubd84\uc11d",children:"line_profiler\ub85c \ub77c\uc778\ubcc4 \ubd84\uc11d"}),"\n",(0,r.jsx)(e.p,{children:"\ud2b9\uc815 \ud568\uc218\uc758 \uac01 \ub77c\uc778\ubcc4 \uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc124\uce58: pip install line_profiler\n\n# @profile \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\n@profile\ndef process_data(data):\n    """\ub77c\uc778\ubcc4 \ud504\ub85c\ud30c\uc77c\ub9c1 \uc608\uc81c"""\n    # \ub77c\uc778 1: \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\n    squared = [x ** 2 for x in data]\n\n    # \ub77c\uc778 2: \ud544\ud130\ub9c1\n    filtered = [x for x in squared if x % 2 == 0]\n\n    # \ub77c\uc778 3: \uc815\ub82c\n    sorted_data = sorted(filtered, reverse=True)\n\n    # \ub77c\uc778 4: \ud569\uacc4\n    total = sum(sorted_data)\n\n    return total\n\n# \uc2e4\ud589: kernprof -l -v script.py\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ucd9c\ub825 \uc608\uc2dc:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Line #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     3                                           @profile\n     4                                           def process_data(data):\n     5         1       1234.0   1234.0     45.2      squared = [x ** 2 for x in data]\n     6         1        890.0    890.0     32.6      filtered = [x for x in squared if x % 2 == 0]\n     7         1        456.0    456.0     16.7      sorted_data = sorted(filtered, reverse=True)\n     8         1        150.0    150.0      5.5      total = sum(sorted_data)\n     9         1          0.0      0.0      0.0      return total\n"})}),"\n",(0,r.jsx)(e.admonition,{title:"\ud504\ub85c\ud30c\uc77c\ub9c1 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",type:"tip",children:(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc2e4\uc81c \ub370\uc774\ud130 \uc0ac\uc6a9"}),": \ud504\ub85c\ub355\uc158 \ud658\uacbd\uacfc \uc720\uc0ac\ud55c \ub370\uc774\ud130\ub85c \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ucda9\ubd84\ud55c \uc2e4\ud589 \uc2dc\uac04"}),": \ub108\ubb34 \uc9e7\uc73c\uba74 \uc815\ud655\ub3c4\uac00 \ub5a8\uc5b4\uc9d0 (\ucd5c\uc18c 1\ucd08 \uc774\uc0c1)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc678\ubd80 \uc694\uc778 \uc81c\uac70"}),": I/O, \ub124\ud2b8\uc6cc\ud06c \ud638\ucd9c \ub4f1\uc744 \ubd84\ub9ac\ud558\uc5ec \uce21\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ubc18\ubcf5 \uce21\uc815"}),": \uc5ec\ub7ec \ubc88 \uc2e4\ud589\ud558\uc5ec \ud3c9\uade0\uac12 \uc0ac\uc6a9"]}),"\n"]})}),"\n",(0,r.jsx)(e.h2,{id:"42-\uc2dc\uac04-\ubcf5\uc7a1\ub3c4-\ubd84\uc11d-big-o",children:"4.2 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 \ubd84\uc11d (Big O)"}),"\n",(0,r.jsx)(e.h3,{id:"big-o-\ud45c\uae30\ubc95-\uc774\ud574\ud558\uae30",children:"Big O \ud45c\uae30\ubc95 \uc774\ud574\ud558\uae30"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import time\nimport matplotlib.pyplot as plt\nfrom typing import List\n\ndef measure_time(func, *args):\n    """\ud568\uc218 \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815"""\n    start = time.perf_counter()\n    result = func(*args)\n    end = time.perf_counter()\n    return end - start, result\n\n# O(1) - \uc0c1\uc218 \uc2dc\uac04\ndef constant_time(data: List, index: int):\n    """\ub9ac\uc2a4\ud2b8 \uc778\ub371\uc2a4 \uc811\uadfc"""\n    return data[index]\n\n# O(n) - \uc120\ud615 \uc2dc\uac04\ndef linear_time(data: List):\n    """\ub9ac\uc2a4\ud2b8 \uc21c\ud68c"""\n    return sum(data)\n\n# O(n\xb2) - \uc774\ucc28 \uc2dc\uac04\ndef quadratic_time(data: List):\n    """\uc911\ucca9 \ub8e8\ud504"""\n    result = []\n    for i in data:\n        for j in data:\n            result.append(i * j)\n    return result\n\n# O(log n) - \ub85c\uadf8 \uc2dc\uac04\ndef binary_search(sorted_data: List, target: int) -> int:\n    """\uc774\uc9c4 \ud0d0\uc0c9"""\n    left, right = 0, len(sorted_data) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_data[mid] == target:\n            return mid\n        elif sorted_data[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# O(n log n) - \uc120\ud615 \ub85c\uadf8 \uc2dc\uac04\ndef merge_sort(data: List) -> List:\n    """\ubcd1\ud569 \uc815\ub82c"""\n    if len(data) <= 1:\n        return data\n\n    mid = len(data) // 2\n    left = merge_sort(data[:mid])\n    right = merge_sort(data[mid:])\n\n    return merge(left, right)\n\ndef merge(left: List, right: List) -> List:\n    """\ub450 \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8 \ubcd1\ud569"""\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\n# \uc131\ub2a5 \ube44\uad50\nsizes = [100, 500, 1000, 5000, 10000]\nlinear_times = []\nquadratic_times = []\n\nfor size in sizes:\n    data = list(range(size))\n\n    # O(n)\n    t, _ = measure_time(linear_time, data)\n    linear_times.append(t)\n\n    # O(n\xb2) - \ud070 \ub370\uc774\ud130\uc5d0\uc11c\ub294 \uc2a4\ud0b5\n    if size <= 1000:\n        t, _ = measure_time(quadratic_time, data)\n        quadratic_times.append(t)\n\nprint("\uc2dc\uac04 \ubcf5\uc7a1\ub3c4 \ube44\uad50:")\nprint(f"O(n)   - {linear_times}")\nprint(f"O(n\xb2)  - {quadratic_times}")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubcf5\uc7a1\ub3c4-\ube44\uad50\ud45c",children:"\ubcf5\uc7a1\ub3c4 \ube44\uad50\ud45c"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"\ud45c\uae30\ubc95"}),(0,r.jsx)(e.th,{children:"\uc774\ub984"}),(0,r.jsx)(e.th,{children:"\uc608\uc2dc"}),(0,r.jsx)(e.th,{children:"10\uac1c"}),(0,r.jsx)(e.th,{children:"100\uac1c"}),(0,r.jsx)(e.th,{children:"1000\uac1c"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"O(1)"}),(0,r.jsx)(e.td,{children:"\uc0c1\uc218"}),(0,r.jsx)(e.td,{children:"\ub515\uc154\ub108\ub9ac \uc870\ud68c"}),(0,r.jsx)(e.td,{children:"1"}),(0,r.jsx)(e.td,{children:"1"}),(0,r.jsx)(e.td,{children:"1"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"O(log n)"}),(0,r.jsx)(e.td,{children:"\ub85c\uadf8"}),(0,r.jsx)(e.td,{children:"\uc774\uc9c4 \ud0d0\uc0c9"}),(0,r.jsx)(e.td,{children:"3"}),(0,r.jsx)(e.td,{children:"7"}),(0,r.jsx)(e.td,{children:"10"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"O(n)"}),(0,r.jsx)(e.td,{children:"\uc120\ud615"}),(0,r.jsx)(e.td,{children:"\ub9ac\uc2a4\ud2b8 \uc21c\ud68c"}),(0,r.jsx)(e.td,{children:"10"}),(0,r.jsx)(e.td,{children:"100"}),(0,r.jsx)(e.td,{children:"1000"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"O(n log n)"}),(0,r.jsx)(e.td,{children:"\uc120\ud615 \ub85c\uadf8"}),(0,r.jsx)(e.td,{children:"\ubcd1\ud569 \uc815\ub82c"}),(0,r.jsx)(e.td,{children:"30"}),(0,r.jsx)(e.td,{children:"700"}),(0,r.jsx)(e.td,{children:"10000"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"O(n\xb2)"}),(0,r.jsx)(e.td,{children:"\uc774\ucc28"}),(0,r.jsx)(e.td,{children:"\ubc84\ube14 \uc815\ub82c"}),(0,r.jsx)(e.td,{children:"100"}),(0,r.jsx)(e.td,{children:"10000"}),(0,r.jsx)(e.td,{children:"1000000"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"O(2\u207f)"}),(0,r.jsx)(e.td,{children:"\uc9c0\uc218"}),(0,r.jsx)(e.td,{children:"\ud53c\ubcf4\ub098\uce58(\uc7ac\uadc0)"}),(0,r.jsx)(e.td,{children:"1024"}),(0,r.jsx)(e.td,{children:"2\xb3\u2070"}),(0,r.jsx)(e.td,{children:"2\xb9\u2070\u2070\u2070"})]})]})]}),"\n",(0,r.jsx)(e.admonition,{title:"\uc131\ub2a5 \uc800\ud558 \uc8fc\uc758",type:"warning",children:(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"O(n\xb2) \uc774\uc0c1"}),": \ub370\uc774\ud130\uac00 \ucee4\uc9c0\uba74 \uae09\uaca9\ud788 \ub290\ub824\uc9d0"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc911\ucca9 \ub8e8\ud504"}),": \uac00\ub2a5\ud55c \ud55c \ud53c\ud558\uac70\ub098 \ucd5c\uc801\ud654 \ud544\uc694"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc7ac\uadc0"}),": \uba54\ubaa8\uc774\uc81c\uc774\uc158 \ub610\ub294 \ubc18\ubcf5\ubb38\uc73c\ub85c \ub300\uccb4 \uace0\ub824"]}),"\n"]})}),"\n",(0,r.jsx)(e.h2,{id:"43-\uba54\ubaa8\ub9ac-\ud504\ub85c\ud30c\uc77c\ub9c1",children:"4.3 \uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1"}),"\n",(0,r.jsx)(e.h3,{id:"memory_profiler-\uc0ac\uc6a9\ud558\uae30",children:"memory_profiler \uc0ac\uc6a9\ud558\uae30"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc124\uce58: pip install memory_profiler\n\nfrom memory_profiler import profile\n\n@profile\ndef memory_intensive_function():\n    """\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uce21\uc815"""\n    # \ud070 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\n    large_list = [i for i in range(1000000)]\n\n    # \ub9ac\uc2a4\ud2b8 \ubcf5\uc0ac\n    copied_list = large_list.copy()\n\n    # \ub515\uc154\ub108\ub9ac \uc0dd\uc131\n    large_dict = {i: i**2 for i in range(100000)}\n\n    # \uc81c\ub108\ub808\uc774\ud130 (\uba54\ubaa8\ub9ac \ud6a8\uc728\uc801)\n    gen = (i for i in range(1000000))\n\n    return sum(gen)\n\n# \uc2e4\ud589: python -m memory_profiler script.py\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ucd9c\ub825 \uc608\uc2dc:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Line #    Mem usage    Increment   Line Contents\n================================================\n     3   38.5 MiB     38.5 MiB   @profile\n     4                            def memory_intensive_function():\n     5   76.3 MiB     37.8 MiB       large_list = [i for i in range(1000000)]\n     6  114.1 MiB     37.8 MiB       copied_list = large_list.copy()\n     7  122.5 MiB      8.4 MiB       large_dict = {i: i**2 for i in range(100000)}\n     8  122.5 MiB      0.0 MiB       gen = (i for i in range(1000000))\n     9  122.5 MiB      0.0 MiB       return sum(gen)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uba54\ubaa8\ub9ac-\ud6a8\uc728\uc801\uc778-\ucf54\ub4dc-\uc791\uc131",children:"\uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc \uc791\uc131"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import sys\n\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ube44\uad50\ndef compare_memory_usage():\n    """\ub2e4\uc591\ud55c \uc790\ub8cc\uad6c\uc870\uc758 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9"""\n\n    # \ub9ac\uc2a4\ud2b8 vs \ud29c\ud50c\n    large_list = [i for i in range(100000)]\n    large_tuple = tuple(i for i in range(100000))\n\n    print(f"\ub9ac\uc2a4\ud2b8 \ud06c\uae30: {sys.getsizeof(large_list):,} bytes")\n    print(f"\ud29c\ud50c \ud06c\uae30: {sys.getsizeof(large_tuple):,} bytes")\n\n    # __slots__ \uc0ac\uc6a9\uc73c\ub85c \uba54\ubaa8\ub9ac \uc808\uc57d\n    class WithoutSlots:\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n\n    class WithSlots:\n        __slots__ = [\'x\', \'y\']\n\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n\n    obj1 = WithoutSlots(1, 2)\n    obj2 = WithSlots(1, 2)\n\n    print(f"\\n__slots__ \uc5c6\uc74c: {sys.getsizeof(obj1.__dict__)} bytes")\n    print(f"__slots__ \uc0ac\uc6a9: {sys.getsizeof(obj2)} bytes")\n\n    # \uc81c\ub108\ub808\uc774\ud130 vs \ub9ac\uc2a4\ud2b8\n    def list_squares(n):\n        return [i**2 for i in range(n)]\n\n    def gen_squares(n):\n        return (i**2 for i in range(n))\n\n    n = 1000000\n    list_result = list_squares(n)\n    gen_result = gen_squares(n)\n\n    print(f"\\n\ub9ac\uc2a4\ud2b8 \uc81c\uacf1: {sys.getsizeof(list_result):,} bytes")\n    print(f"\uc81c\ub108\ub808\uc774\ud130 \uc81c\uacf1: {sys.getsizeof(gen_result):,} bytes")\n\ncompare_memory_usage()\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ucd9c\ub825:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"\ub9ac\uc2a4\ud2b8 \ud06c\uae30: 824,472 bytes\n\ud29c\ud50c \ud06c\uae30: 800,056 bytes\n\n__slots__ \uc5c6\uc74c: 104 bytes\n__slots__ \uc0ac\uc6a9: 48 bytes\n\n\ub9ac\uc2a4\ud2b8 \uc81c\uacf1: 8,697,472 bytes\n\uc81c\ub108\ub808\uc774\ud130 \uc81c\uacf1: 112 bytes\n"})}),"\n",(0,r.jsx)(e.h2,{id:"44-timeit-\ubaa8\ub4c8",children:"4.4 timeit \ubaa8\ub4c8"}),"\n",(0,r.jsx)(e.h3,{id:"\uc815\ud655\ud55c-\uc2e4\ud589-\uc2dc\uac04-\uce21\uc815",children:"\uc815\ud655\ud55c \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import timeit\nfrom functools import wraps\n\ndef benchmark(func):\n    """\ubca4\uce58\ub9c8\ud06c \ub370\ucf54\ub808\uc774\ud130"""\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        # timeit\uc73c\ub85c \uce21\uc815 (1000\ubc88 \ubc18\ubcf5)\n        time_taken = timeit.timeit(\n            lambda: func(*args, **kwargs),\n            number=1000\n        )\n        avg_time = time_taken / 1000\n        print(f"{func.__name__}: {avg_time*1000:.4f} ms (\ud3c9\uade0)")\n        return func(*args, **kwargs)\n    return wrapper\n\n@benchmark\ndef string_concat_plus(n):\n    """+ \uc5f0\uc0b0\uc790\ub85c \ubb38\uc790\uc5f4 \uc5f0\uacb0"""\n    result = ""\n    for i in range(n):\n        result = result + str(i)\n    return result\n\n@benchmark\ndef string_concat_join(n):\n    """join\uc73c\ub85c \ubb38\uc790\uc5f4 \uc5f0\uacb0"""\n    return "".join(str(i) for i in range(n))\n\n@benchmark\ndef string_concat_format(n):\n    """f-string\uc73c\ub85c \ubb38\uc790\uc5f4 \uc5f0\uacb0"""\n    return "".join(f"{i}" for i in range(n))\n\n# \uc2e4\ud589\nn = 1000\nstring_concat_plus(n)\nstring_concat_join(n)\nstring_concat_format(n)\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ucd9c\ub825:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"string_concat_plus: 12.3456 ms (\ud3c9\uade0)\nstring_concat_join: 0.3456 ms (\ud3c9\uade0)\nstring_concat_format: 0.4567 ms (\ud3c9\uade0)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uba85\ub839\uc904\uc5d0\uc11c-timeit-\uc0ac\uc6a9",children:"\uba85\ub839\uc904\uc5d0\uc11c timeit \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 vs map\n# python -m timeit "[x**2 for x in range(1000)]"\n# python -m timeit "list(map(lambda x: x**2, range(1000)))"\n\n# \ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305 \ube44\uad50\n# python -m timeit "\'%s %s\' % (\'Hello\', \'World\')"\n# python -m timeit "\'{} {}\'.format(\'Hello\', \'World\')"\n# python -m timeit "f\'Hello World\'"\n\n# \ub515\uc154\ub108\ub9ac \uc870\ud68c vs \ub9ac\uc2a4\ud2b8 \ud0d0\uc0c9\nsetup_code = """\nd = {i: i**2 for i in range(1000)}\nl = [(i, i**2) for i in range(1000)]\ntarget = 500\n"""\n\n# python -m timeit -s "$setup_code" "d[target]"\n# python -m timeit -s "$setup_code" "next((v for k, v in l if k == target), None)"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"45-\uc790\ub8cc\uad6c\uc870-\uc120\ud0dd",children:"4.5 \uc790\ub8cc\uad6c\uc870 \uc120\ud0dd"}),"\n",(0,r.jsx)(e.h3,{id:"\uc131\ub2a5-\ube44\uad50-list-vs-set-vs-dict",children:"\uc131\ub2a5 \ube44\uad50: List vs Set vs Dict"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import timeit\nimport random\n\ndef benchmark_data_structures():\n    """\uc790\ub8cc\uad6c\uc870\ubcc4 \uc131\ub2a5 \ube44\uad50"""\n\n    # \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\n    n = 10000\n    data = list(range(n))\n    search_items = random.sample(data, 100)\n\n    # \uc790\ub8cc\uad6c\uc870 \uc0dd\uc131\n    test_list = data.copy()\n    test_set = set(data)\n    test_dict = {i: i for i in data}\n\n    print("=" * 60)\n    print("\uc870\ud68c \uc131\ub2a5 \ube44\uad50 (100\ubc88 \uc870\ud68c)")\n    print("=" * 60)\n\n    # \ub9ac\uc2a4\ud2b8 \uc870\ud68c (in \uc5f0\uc0b0\uc790)\n    def list_lookup():\n        return all(item in test_list for item in search_items)\n\n    # \uc14b \uc870\ud68c\n    def set_lookup():\n        return all(item in test_set for item in search_items)\n\n    # \ub515\uc154\ub108\ub9ac \uc870\ud68c\n    def dict_lookup():\n        return all(item in test_dict for item in search_items)\n\n    # \uce21\uc815\n    list_time = timeit.timeit(list_lookup, number=100)\n    set_time = timeit.timeit(set_lookup, number=100)\n    dict_time = timeit.timeit(dict_lookup, number=100)\n\n    print(f"\ub9ac\uc2a4\ud2b8 (O(n)):      {list_time:.6f} \ucd08")\n    print(f"\uc14b (O(1)):          {set_time:.6f} \ucd08  (x{list_time/set_time:.1f} \ube60\ub984)")\n    print(f"\ub515\uc154\ub108\ub9ac (O(1)):    {dict_time:.6f} \ucd08  (x{list_time/dict_time:.1f} \ube60\ub984)")\n\n    print("\\n" + "=" * 60)\n    print("\uc0bd\uc785 \uc131\ub2a5 \ube44\uad50 (1000\ubc88 \uc0bd\uc785)")\n    print("=" * 60)\n\n    # \uc0bd\uc785 \ud14c\uc2a4\ud2b8\n    def list_append():\n        temp = []\n        for i in range(1000):\n            temp.append(i)\n\n    def set_add():\n        temp = set()\n        for i in range(1000):\n            temp.add(i)\n\n    def dict_insert():\n        temp = {}\n        for i in range(1000):\n            temp[i] = i\n\n    list_time = timeit.timeit(list_append, number=1000)\n    set_time = timeit.timeit(set_add, number=1000)\n    dict_time = timeit.timeit(dict_insert, number=1000)\n\n    print(f"\ub9ac\uc2a4\ud2b8 append:      {list_time:.6f} \ucd08")\n    print(f"\uc14b add:             {set_time:.6f} \ucd08")\n    print(f"\ub515\uc154\ub108\ub9ac \uc0bd\uc785:      {dict_time:.6f} \ucd08")\n\nbenchmark_data_structures()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc790\ub8cc\uad6c\uc870-\uc120\ud0dd-\uac00\uc774\ub4dc",children:"\uc790\ub8cc\uad6c\uc870 \uc120\ud0dd \uac00\uc774\ub4dc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# 1. \uc911\ubcf5 \uc81c\uac70 - Set \uc0ac\uc6a9\ndef remove_duplicates_list(items):\n    """\ub9ac\uc2a4\ud2b8\ub85c \uc911\ubcf5 \uc81c\uac70 (\ub290\ub9bc)"""\n    result = []\n    for item in items:\n        if item not in result:  # O(n) \uc870\ud68c\n            result.append(item)\n    return result\n\ndef remove_duplicates_set(items):\n    """\uc14b\uc73c\ub85c \uc911\ubcf5 \uc81c\uac70 (\ube60\ub984)"""\n    return list(set(items))  # O(1) \uc870\ud68c\n\n# 2. \ube48\ubc88\ud55c \uc870\ud68c - Dict \uc0ac\uc6a9\ndef count_frequencies_list(items):\n    """\ub9ac\uc2a4\ud2b8\ub85c \ube48\ub3c4 \uacc4\uc0b0 (\ub290\ub9bc)"""\n    frequencies = []\n    for item in items:\n        found = False\n        for i, (key, count) in enumerate(frequencies):\n            if key == item:\n                frequencies[i] = (key, count + 1)\n                found = True\n                break\n        if not found:\n            frequencies.append((item, 1))\n    return frequencies\n\ndef count_frequencies_dict(items):\n    """\ub515\uc154\ub108\ub9ac\ub85c \ube48\ub3c4 \uacc4\uc0b0 (\ube60\ub984)"""\n    frequencies = {}\n    for item in items:\n        frequencies[item] = frequencies.get(item, 0) + 1\n    return frequencies\n\nfrom collections import Counter\n\ndef count_frequencies_counter(items):\n    """Counter \uc0ac\uc6a9 (\uac00\uc7a5 \ube60\ub984)"""\n    return Counter(items)\n\n# 3. \uc21c\uc11c \uc720\uc9c0 + \uc911\ubcf5 \uc81c\uac70 - Dict (Python 3.7+)\ndef unique_ordered_list(items):\n    """\ub9ac\uc2a4\ud2b8\ub85c \uc21c\uc11c \uc720\uc9c0 \uc911\ubcf5 \uc81c\uac70"""\n    result = []\n    for item in items:\n        if item not in result:\n            result.append(item)\n    return result\n\ndef unique_ordered_dict(items):\n    """\ub515\uc154\ub108\ub9ac\ub85c \uc21c\uc11c \uc720\uc9c0 \uc911\ubcf5 \uc81c\uac70 (\ube60\ub984)"""\n    return list(dict.fromkeys(items))\n\n# \uc131\ub2a5 \ube44\uad50\ndata = [random.randint(1, 100) for _ in range(10000)]\n\nprint("\uc911\ubcf5 \uc81c\uac70 \uc131\ub2a5:")\nprint(f"\ub9ac\uc2a4\ud2b8: {timeit.timeit(lambda: remove_duplicates_list(data), number=10):.4f}\ucd08")\nprint(f"\uc14b:     {timeit.timeit(lambda: remove_duplicates_set(data), number=10):.4f}\ucd08")\n\nprint("\\n\ube48\ub3c4 \uacc4\uc0b0 \uc131\ub2a5:")\nprint(f"\ub9ac\uc2a4\ud2b8:   {timeit.timeit(lambda: count_frequencies_list(data[:100]), number=10):.4f}\ucd08")\nprint(f"\ub515\uc154\ub108\ub9ac: {timeit.timeit(lambda: count_frequencies_dict(data), number=10):.4f}\ucd08")\nprint(f"Counter:  {timeit.timeit(lambda: count_frequencies_counter(data), number=10):.4f}\ucd08")\n'})}),"\n",(0,r.jsx)(e.admonition,{title:"\uc790\ub8cc\uad6c\uc870 \uc120\ud0dd \uccb4\ud06c\ub9ac\uc2a4\ud2b8",type:"tip",children:(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc21c\uc11c\uac00 \uc911\uc694\ud55c\uac00?"})," \u2192 List, OrderedDict"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ub294\uac00?"})," \u2192 List, Tuple (\ud5c8\uc6a9) / Set, Dict (\ubd88\ud5c8)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc870\ud68c\uac00 \ube48\ubc88\ud55c\uac00?"})," \u2192 Set, Dict (O(1))"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc0bd\uc785/\uc0ad\uc81c\uac00 \ube48\ubc88\ud55c\uac00?"})," \u2192 Deque (\uc591\ub05d), Set/Dict (\uc911\uac04)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uba54\ubaa8\ub9ac\uac00 \uc81c\ud55c\uc801\uc778\uac00?"})," \u2192 Tuple (\ubd88\ubcc0), Generator (\uc9c0\uc5f0 \ud3c9\uac00)"]}),"\n"]})}),"\n",(0,r.jsx)(e.h2,{id:"46-\uc54c\uace0\ub9ac\uc998-\ucd5c\uc801\ud654",children:"4.6 \uc54c\uace0\ub9ac\uc998 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.h3,{id:"\uc608\uc81c-1-\ud53c\ubcf4\ub098\uce58-\uc218\uc5f4-\ucd5c\uc801\ud654",children:"\uc608\uc81c 1: \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import functools\nimport timeit\n\n# 1. \ube44\ud6a8\uc728\uc801\uc778 \uc7ac\uadc0 - O(2^n)\ndef fib_recursive(n):\n    """\uc21c\uc218 \uc7ac\uadc0 (\ub9e4\uc6b0 \ub290\ub9bc)"""\n    if n <= 1:\n        return n\n    return fib_recursive(n - 1) + fib_recursive(n - 2)\n\n# 2. \uba54\ubaa8\uc774\uc81c\uc774\uc158 - O(n)\n@functools.lru_cache(maxsize=None)\ndef fib_memoized(n):\n    """\uba54\ubaa8\uc774\uc81c\uc774\uc158 \uc7ac\uadc0"""\n    if n <= 1:\n        return n\n    return fib_memoized(n - 1) + fib_memoized(n - 2)\n\n# 3. \ubc18\ubcf5\ubb38 - O(n), \uacf5\uac04 O(n)\ndef fib_iterative(n):\n    """\ubc18\ubcf5\ubb38 \uc0ac\uc6a9"""\n    if n <= 1:\n        return n\n\n    fib_list = [0, 1]\n    for i in range(2, n + 1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n\n    return fib_list[n]\n\n# 4. \ucd5c\uc801\ud654\ub41c \ubc18\ubcf5\ubb38 - O(n), \uacf5\uac04 O(1)\ndef fib_optimized(n):\n    """\uacf5\uac04 \ucd5c\uc801\ud654"""\n    if n <= 1:\n        return n\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n\n    return b\n\n# 5. \uc81c\ub108\ub808\uc774\ud130 - \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\ndef fib_generator(n):\n    """\uc81c\ub108\ub808\uc774\ud130 \uc0ac\uc6a9"""\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\ndef get_nth_fib_gen(n):\n    """n\ubc88\uc9f8 \ud53c\ubcf4\ub098\uce58"""\n    gen = fib_generator(n + 1)\n    for _ in range(n):\n        next(gen)\n    return next(gen)\n\n# \uc131\ub2a5 \ube44\uad50\nn = 30\nprint(f"\ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 {n}\ubc88\uc9f8 \ud56d \uacc4\uc0b0:\\n")\n\n# \uc7ac\uadc0\ub294 \ub108\ubb34 \ub290\ub824\uc11c n=30\ub9cc \ud14c\uc2a4\ud2b8\ntime_recursive = timeit.timeit(lambda: fib_recursive(n), number=1)\nprint(f"1. \uc21c\uc218 \uc7ac\uadc0:        {time_recursive:.6f}\ucd08  \u26a0\ufe0f \ub9e4\uc6b0 \ub290\ub9bc")\n\ntime_memoized = timeit.timeit(lambda: fib_memoized(n), number=10000) / 10000\nprint(f"2. \uba54\ubaa8\uc774\uc81c\uc774\uc158:     {time_memoized*1000000:.2f}\u03bcs  \u2713 \ube60\ub984")\n\ntime_iterative = timeit.timeit(lambda: fib_iterative(n), number=10000) / 10000\nprint(f"3. \ubc18\ubcf5\ubb38:           {time_iterative*1000000:.2f}\u03bcs  \u2713 \ube60\ub984")\n\ntime_optimized = timeit.timeit(lambda: fib_optimized(n), number=10000) / 10000\nprint(f"4. \ucd5c\uc801\ud654 \ubc18\ubcf5\ubb38:    {time_optimized*1000000:.2f}\u03bcs  \u2713\u2713 \uac00\uc7a5 \ube60\ub984")\n\ntime_generator = timeit.timeit(lambda: get_nth_fib_gen(n), number=10000) / 10000\nprint(f"5. \uc81c\ub108\ub808\uc774\ud130:       {time_generator*1000000:.2f}\u03bcs  \u2713 \uba54\ubaa8\ub9ac \ud6a8\uc728")\n\nprint(f"\\n\uc18d\ub3c4 \ud5a5\uc0c1: {time_recursive / time_optimized:.0f}\ubc30")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc608\uc81c-2-\uc911\ubcf5-\ucc3e\uae30-\ucd5c\uc801\ud654",children:"\uc608\uc81c 2: \uc911\ubcf5 \ucc3e\uae30 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ubb38\uc81c: \ub450 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc911\ubcf5 \uc694\uc18c \ucc3e\uae30\n\n# \ubc29\ubc95 1: \uc911\ucca9 \ub8e8\ud504 - O(n*m)\ndef find_duplicates_nested(list1, list2):\n    """\uc911\ucca9 \ub8e8\ud504 (\ub290\ub9bc)"""\n    duplicates = []\n    for item in list1:\n        if item in list2 and item not in duplicates:\n            duplicates.append(item)\n    return duplicates\n\n# \ubc29\ubc95 2: Set \uc0ac\uc6a9 - O(n + m)\ndef find_duplicates_set(list1, list2):\n    """\uc14b \uad50\uc9d1\ud569 (\ube60\ub984)"""\n    return list(set(list1) & set(list2))\n\n# \ubc29\ubc95 3: Set + \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 - O(n + m)\ndef find_duplicates_comprehension(list1, list2):\n    """\uc14b + \ucef4\ud504\ub9ac\ud5e8\uc158"""\n    set2 = set(list2)\n    return list({item for item in list1 if item in set2})\n\n# \uc131\ub2a5 \ube44\uad50\nimport random\n\nlist1 = random.sample(range(10000), 5000)\nlist2 = random.sample(range(10000), 5000)\n\nprint("\uc911\ubcf5 \ucc3e\uae30 \uc131\ub2a5 \ube44\uad50:\\n")\n\ntime1 = timeit.timeit(lambda: find_duplicates_nested(list1, list2), number=10)\nprint(f"\uc911\ucca9 \ub8e8\ud504:      {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: find_duplicates_set(list1, list2), number=10)\nprint(f"Set \uad50\uc9d1\ud569:     {time2:.6f}\ucd08  (x{time1/time2:.1f} \ube60\ub984)")\n\ntime3 = timeit.timeit(lambda: find_duplicates_comprehension(list1, list2), number=10)\nprint(f"Set + \ucef4\ud504:     {time3:.6f}\ucd08  (x{time1/time3:.1f} \ube60\ub984)")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"47-\uce90\uc2f1\uacfc-\uba54\ubaa8\uc774\uc81c\uc774\uc158",children:"4.7 \uce90\uc2f1\uacfc \uba54\ubaa8\uc774\uc81c\uc774\uc158"}),"\n",(0,r.jsx)(e.h3,{id:"functoolslru_cache-\ud65c\uc6a9",children:"functools.lru_cache \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import functools\nimport time\n\n# LRU Cache \uae30\ubcf8 \uc0ac\uc6a9\n@functools.lru_cache(maxsize=128)\ndef expensive_function(n):\n    """\ubb34\uac70\uc6b4 \uacc4\uc0b0 \uc2dc\ubbac\ub808\uc774\uc158"""\n    time.sleep(0.1)  # 0.1\ucd08 \uc18c\uc694\n    return n ** 2\n\n# \uccab \ud638\ucd9c: 0.1\ucd08 \uc18c\uc694\nstart = time.time()\nresult1 = expensive_function(10)\nprint(f"\uccab \ud638\ucd9c: {time.time() - start:.4f}\ucd08")\n\n# \ub450 \ubc88\uc9f8 \ud638\ucd9c: \uce90\uc2dc\uc5d0\uc11c \uc989\uc2dc \ubc18\ud658\nstart = time.time()\nresult2 = expensive_function(10)\nprint(f"\uce90\uc2dc \ud638\ucd9c: {time.time() - start:.6f}\ucd08")\n\n# \uce90\uc2dc \uc815\ubcf4 \ud655\uc778\nprint(f"\\n\uce90\uc2dc \uc815\ubcf4: {expensive_function.cache_info()}")\n# CacheInfo(hits=1, misses=1, maxsize=128, currsize=1)\n\n# \uce90\uc2dc \ucd08\uae30\ud654\nexpensive_function.cache_clear()\n\n# \ubb34\uc81c\ud55c \uce90\uc2dc\n@functools.lru_cache(maxsize=None)\ndef unlimited_cache(n):\n    """\ubb34\uc81c\ud55c \uce90\uc2dc"""\n    return sum(range(n))\n\n# \uba54\uc11c\ub4dc \uce90\uc2f1 (\uc8fc\uc758: \uc778\uc2a4\ud134\uc2a4\ubcc4 \uce90\uc2dc \uc544\ub2d8)\nclass DataProcessor:\n    @functools.lru_cache(maxsize=128)\n    @staticmethod\n    def process(data):\n        """\uc815\uc801 \uba54\uc11c\ub4dc \uce90\uc2f1"""\n        return sum(data)\n\n    # \uc778\uc2a4\ud134\uc2a4 \uba54\uc11c\ub4dc\ub294 \uce90\uc2dc \ubb38\uc81c \ubc1c\uc0dd \uac00\ub2a5\n    @functools.lru_cache(maxsize=128)\n    def instance_method(self, n):\n        """\u26a0\ufe0f \uba54\ubaa8\ub9ac \ub204\uc218 \uac00\ub2a5"""\n        return n ** 2\n\n# \ucee4\uc2a4\ud140 \uce90\uc2dc \ud0a4\ndef custom_cache_key(*args, **kwargs):\n    """\ubcf5\uc7a1\ud55c \uac1d\uccb4\ub97c \uc704\ud55c \ucee4\uc2a4\ud140 \ud0a4"""\n    return str(args) + str(sorted(kwargs.items()))\n\n@functools.lru_cache(maxsize=128)\ndef cached_with_dict(items_tuple):\n    """\ub515\uc154\ub108\ub9ac\ub97c \ud29c\ud50c\ub85c \ubcc0\ud658\ud558\uc5ec \uce90\uc2f1"""\n    items = dict(items_tuple)\n    return sum(items.values())\n\n# \uc0ac\uc6a9 \uc608\ndata = {"a": 1, "b": 2, "c": 3}\nresult = cached_with_dict(tuple(data.items()))\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc218\ub3d9-\uce90\uc2f1-\uad6c\ud604",children:"\uc218\ub3d9 \uce90\uc2f1 \uad6c\ud604"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from collections import OrderedDict\nfrom typing import Callable, Any\nimport threading\n\nclass LRUCache:\n    \"\"\"\uc218\ub3d9 LRU \uce90\uc2dc \uad6c\ud604\"\"\"\n\n    def __init__(self, maxsize: int = 128):\n        self.cache = OrderedDict()\n        self.maxsize = maxsize\n        self.hits = 0\n        self.misses = 0\n        self.lock = threading.Lock()\n\n    def get(self, key: Any) -> Any:\n        \"\"\"\uce90\uc2dc\uc5d0\uc11c \uac12 \uac00\uc838\uc624\uae30\"\"\"\n        with self.lock:\n            if key in self.cache:\n                self.hits += 1\n                # \ucd5c\uadfc \uc0ac\uc6a9\uc73c\ub85c \uc774\ub3d9\n                self.cache.move_to_end(key)\n                return self.cache[key]\n            else:\n                self.misses += 1\n                return None\n\n    def put(self, key: Any, value: Any):\n        \"\"\"\uce90\uc2dc\uc5d0 \uac12 \uc800\uc7a5\"\"\"\n        with self.lock:\n            if key in self.cache:\n                # \uae30\uc874 \ud0a4 \uc5c5\ub370\uc774\ud2b8\n                self.cache.move_to_end(key)\n            else:\n                # \uc0c8 \ud0a4 \ucd94\uac00\n                self.cache[key] = value\n\n                # \ud06c\uae30 \ucd08\uacfc \uc2dc \uac00\uc7a5 \uc624\ub798\ub41c \ud56d\ubaa9 \uc81c\uac70\n                if len(self.cache) > self.maxsize:\n                    self.cache.popitem(last=False)\n\n    def clear(self):\n        \"\"\"\uce90\uc2dc \ucd08\uae30\ud654\"\"\"\n        with self.lock:\n            self.cache.clear()\n            self.hits = 0\n            self.misses = 0\n\n    def info(self):\n        \"\"\"\uce90\uc2dc \ud1b5\uacc4\"\"\"\n        return {\n            'hits': self.hits,\n            'misses': self.misses,\n            'size': len(self.cache),\n            'maxsize': self.maxsize\n        }\n\n# \uc0ac\uc6a9 \uc608\ncache = LRUCache(maxsize=3)\n\ncache.put('a', 1)\ncache.put('b', 2)\ncache.put('c', 3)\n\nprint(cache.get('a'))  # 1 (hit)\nprint(cache.get('d'))  # None (miss)\n\ncache.put('d', 4)  # 'b' \uc81c\uac70\ub428 (LRU)\nprint(cache.get('b'))  # None\n\nprint(cache.info())\n# {'hits': 1, 'misses': 2, 'size': 3, 'maxsize': 3}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc804-\uce90\uc2f1-\uc608\uc81c",children:"\uc2e4\uc804 \uce90\uc2f1 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import functools\nimport requests\nfrom datetime import datetime, timedelta\n\nclass TimedCache:\n    """\uc2dc\uac04 \uc81c\ud55c \uce90\uc2dc"""\n\n    def __init__(self, seconds: int):\n        self.seconds = seconds\n        self.cache = {}\n\n    def __call__(self, func: Callable):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            now = datetime.now()\n\n            if key in self.cache:\n                result, timestamp = self.cache[key]\n                if now - timestamp < timedelta(seconds=self.seconds):\n                    print(f"\u2713 \uce90\uc2dc \uc0ac\uc6a9 (\ub0a8\uc740 \uc2dc\uac04: {self.seconds - (now - timestamp).seconds}\ucd08)")\n                    return result\n\n            # \uce90\uc2dc \ub9cc\ub8cc \ub610\ub294 \uc5c6\uc74c\n            print("\u26a0 \uc0c8\ub85c \uacc4\uc0b0")\n            result = func(*args, **kwargs)\n            self.cache[key] = (result, now)\n            return result\n\n        return wrapper\n\n# \uc0ac\uc6a9 \uc608: API \ud638\ucd9c \uce90\uc2f1\n@TimedCache(seconds=60)  # 60\ucd08 \uce90\uc2dc\ndef fetch_user_data(user_id: int):\n    """\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30"""\n    print(f"API \ud638\ucd9c: user_id={user_id}")\n    # API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n    time.sleep(0.5)\n    return {"id": user_id, "name": f"User{user_id}"}\n\n# \uccab \ud638\ucd9c: API \ud638\ucd9c\ndata1 = fetch_user_data(123)\n\n# \ub450 \ubc88\uc9f8 \ud638\ucd9c: \uce90\uc2dc \uc0ac\uc6a9\ndata2 = fetch_user_data(123)\n\n# 61\ucd08 \ud6c4: \uce90\uc2dc \ub9cc\ub8cc, \ub2e4\uc2dc API \ud638\ucd9c\ntime.sleep(61)\ndata3 = fetch_user_data(123)\n'})}),"\n",(0,r.jsx)(e.admonition,{title:"\uce90\uc2f1 \uc0ac\uc6a9 \uc2dc \uc8fc\uc758\uc0ac\ud56d",type:"tip",children:(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc21c\uc218 \ud568\uc218"}),": \uac19\uc740 \uc785\ub825\uc5d0 \ud56d\uc0c1 \uac19\uc740 \ucd9c\ub825 (\ubd80\uc218 \ud6a8\uacfc \uc5c6\uc74c)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud574\uc2dc \uac00\ub2a5"}),": \uc778\uc790\uac00 \ud574\uc2dc \uac00\ub2a5\ud574\uc57c \ud568 (list, dict\ub294 tuple\ub85c \ubcc0\ud658)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uba54\ubaa8\ub9ac"}),": maxsize \uc124\uc815\uc73c\ub85c \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uc81c\ud55c"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc2a4\ub808\ub4dc \uc548\uc804"}),": lru_cache\ub294 \uc2a4\ub808\ub4dc \uc548\uc804"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uce90\uc2dc \ubb34\ud6a8\ud654"}),": \ub370\uc774\ud130 \ubcc0\uacbd \uc2dc cache_clear() \ud638\ucd9c"]}),"\n"]})}),"\n",(0,r.jsx)(e.h2,{id:"48-\uc81c\ub108\ub808\uc774\ud130-vs-\ub9ac\uc2a4\ud2b8-\uc131\ub2a5",children:"4.8 \uc81c\ub108\ub808\uc774\ud130 vs \ub9ac\uc2a4\ud2b8 \uc131\ub2a5"}),"\n",(0,r.jsx)(e.h3,{id:"\uba54\ubaa8\ub9ac-\ud6a8\uc728\uc131-\ube44\uad50",children:"\uba54\ubaa8\ub9ac \ud6a8\uc728\uc131 \ube44\uad50"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import sys\nimport time\n\ndef list_approach(n):\n    """\ub9ac\uc2a4\ud2b8 \ubc29\uc2dd - \ubaa8\ub4e0 \uac12\uc744 \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5"""\n    return [i ** 2 for i in range(n)]\n\ndef generator_approach(n):\n    """\uc81c\ub108\ub808\uc774\ud130 \ubc29\uc2dd - \ud544\uc694\ud560 \ub54c\ub9cc \uc0dd\uc131"""\n    return (i ** 2 for i in range(n))\n\n# \uba54\ubaa8\ub9ac \ube44\uad50\nn = 1_000_000\n\nlist_result = list_approach(n)\ngen_result = generator_approach(n)\n\nprint("\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ube44\uad50:")\nprint(f"\ub9ac\uc2a4\ud2b8:      {sys.getsizeof(list_result):,} bytes")\nprint(f"\uc81c\ub108\ub808\uc774\ud130:  {sys.getsizeof(gen_result):,} bytes")\nprint(f"\ucc28\uc774:        {sys.getsizeof(list_result) - sys.getsizeof(gen_result):,} bytes")\n\n# \uc2e4\ud589 \uc2dc\uac04 \ube44\uad50 (\uc0dd\uc131\ub9cc)\ntime1 = timeit.timeit(lambda: list_approach(n), number=10)\ntime2 = timeit.timeit(lambda: generator_approach(n), number=10)\n\nprint(f"\\n\uc0dd\uc131 \uc2dc\uac04:")\nprint(f"\ub9ac\uc2a4\ud2b8:      {time1:.6f}\ucd08")\nprint(f"\uc81c\ub108\ub808\uc774\ud130:  {time2:.6f}\ucd08")\n\n# \uc804\uccb4 \uc21c\ud68c \uc2dc\uac04 \ube44\uad50\ndef consume_list():\n    result = list_approach(n)\n    return sum(result)\n\ndef consume_generator():\n    result = generator_approach(n)\n    return sum(result)\n\ntime3 = timeit.timeit(consume_list, number=10)\ntime4 = timeit.timeit(consume_generator, number=10)\n\nprint(f"\\n\uc0dd\uc131 + \uc21c\ud68c \uc2dc\uac04:")\nprint(f"\ub9ac\uc2a4\ud2b8:      {time3:.6f}\ucd08")\nprint(f"\uc81c\ub108\ub808\uc774\ud130:  {time4:.6f}\ucd08")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc81c\ub108\ub808\uc774\ud130-\ud65c\uc6a9-\uc608\uc81c",children:"\uc81c\ub108\ub808\uc774\ud130 \ud65c\uc6a9 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# 1. \ub300\uc6a9\ub7c9 \ud30c\uc77c \uc77d\uae30\ndef read_large_file_list(filepath):\n    """\uc804\uccb4 \ud30c\uc77c\uc744 \uba54\ubaa8\ub9ac\uc5d0 \ub85c\ub4dc (\ube44\ud6a8\uc728)"""\n    with open(filepath, \'r\') as f:\n        return f.readlines()\n\ndef read_large_file_generator(filepath):\n    """\ud55c \uc904\uc529 \uc77d\uae30 (\ud6a8\uc728\uc801)"""\n    with open(filepath, \'r\') as f:\n        for line in f:\n            yield line.strip()\n\n# 2. \ubb34\ud55c \uc2dc\ud000\uc2a4\ndef infinite_sequence():\n    """\ubb34\ud55c \uc218\uc5f4 \uc0dd\uc131"""\n    num = 0\n    while True:\n        yield num\n        num += 1\n\n# \uc0ac\uc6a9\ngen = infinite_sequence()\nprint([next(gen) for _ in range(10)])\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# 3. \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc131\ndef read_numbers(filename):\n    """\uc22b\uc790 \uc77d\uae30"""\n    with open(filename) as f:\n        for line in f:\n            yield int(line.strip())\n\ndef square_numbers(numbers):\n    """\uc81c\uacf1 \uacc4\uc0b0"""\n    for n in numbers:\n        yield n ** 2\n\ndef filter_even(numbers):\n    """\uc9dd\uc218 \ud544\ud130"""\n    for n in numbers:\n        if n % 2 == 0:\n            yield n\n\n# \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589 (lazy evaluation)\n# numbers = read_numbers(\'data.txt\')\n# squared = square_numbers(numbers)\n# even_squared = filter_even(squared)\n# result = sum(even_squared)  # \uc774\ub54c \uc2e4\uc81c \uacc4\uc0b0 \uc2e4\ud589\n\n# 4. \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd \uccb4\uc774\ub2dd\ndef process_data_list(data):\n    """\ub9ac\uc2a4\ud2b8 \ubc29\uc2dd - \uc911\uac04 \uacb0\uacfc \ubaa8\ub450 \uc800\uc7a5"""\n    filtered = [x for x in data if x > 0]\n    squared = [x ** 2 for x in filtered]\n    summed = [x + 10 for x in squared]\n    return summed\n\ndef process_data_generator(data):\n    """\uc81c\ub108\ub808\uc774\ud130 \ubc29\uc2dd - \uc911\uac04 \uacb0\uacfc \uc800\uc7a5 \uc548\ud568"""\n    filtered = (x for x in data if x > 0)\n    squared = (x ** 2 for x in filtered)\n    summed = (x + 10 for x in squared)\n    return summed\n\ndata = range(-1000, 1000)\n\n# \uba54\ubaa8\ub9ac \ube44\uad50\nimport tracemalloc\n\ntracemalloc.start()\nlist_result = list(process_data_list(data))\nlist_memory = tracemalloc.get_traced_memory()[1]\n\ntracemalloc.reset_peak()\ngen_result = list(process_data_generator(data))\ngen_memory = tracemalloc.get_traced_memory()[1]\ntracemalloc.stop()\n\nprint(f"\\n\uccb4\uc774\ub2dd \uba54\ubaa8\ub9ac \uc0ac\uc6a9:")\nprint(f"\ub9ac\uc2a4\ud2b8:      {list_memory:,} bytes")\nprint(f"\uc81c\ub108\ub808\uc774\ud130:  {gen_memory:,} bytes")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc81c\ub108\ub808\uc774\ud130-\uba54\uc11c\ub4dc",children:"\uc81c\ub108\ub808\uc774\ud130 \uba54\uc11c\ub4dc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def counter():\n    """\uc81c\ub108\ub808\uc774\ud130 \uba54\uc11c\ub4dc \uc608\uc81c"""\n    n = 0\n    while True:\n        # send()\ub85c \ubc1b\uc740 \uac12 \ucc98\ub9ac\n        received = yield n\n        if received is not None:\n            n = received\n        else:\n            n += 1\n\n# \uc0ac\uc6a9\ngen = counter()\nprint(next(gen))        # 0\nprint(next(gen))        # 1\nprint(gen.send(10))     # 10 (n\uc744 10\uc73c\ub85c \uc124\uc815)\nprint(next(gen))        # 11\n\n# throw()\uc640 close()\ndef resilient_generator():\n    """\uc608\uc678 \ucc98\ub9ac"""\n    try:\n        while True:\n            try:\n                value = yield\n                print(f"\ubc1b\uc740 \uac12: {value}")\n            except ValueError:\n                print("ValueError \ubc1c\uc0dd, \uacc4\uc18d \uc2e4\ud589")\n    except GeneratorExit:\n        print("\uc81c\ub108\ub808\uc774\ud130 \uc885\ub8cc")\n\ngen = resilient_generator()\nnext(gen)\ngen.send(10)\ngen.throw(ValueError, "\uc5d0\ub7ec \ud14c\uc2a4\ud2b8")\ngen.close()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"49-\ubb38\uc790\uc5f4-\uc5f0\uacb0-\ucd5c\uc801\ud654",children:"4.9 \ubb38\uc790\uc5f4 \uc5f0\uacb0 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.h3,{id:"\uc131\ub2a5-\ube44\uad50",children:"\uc131\ub2a5 \ube44\uad50"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import timeit\n\ndef concat_plus(n):\n    """+ \uc5f0\uc0b0\uc790 (\ub9e4\uc6b0 \ub290\ub9bc)"""\n    result = ""\n    for i in range(n):\n        result = result + str(i)  # \ub9e4\ubc88 \uc0c8 \ubb38\uc790\uc5f4 \uc0dd\uc131\n    return result\n\ndef concat_plus_augmented(n):\n    """+= \uc5f0\uc0b0\uc790 (\ub290\ub9bc)"""\n    result = ""\n    for i in range(n):\n        result += str(i)  # \uc57d\uac04 \ucd5c\uc801\ud654\ub428\n    return result\n\ndef concat_join_list(n):\n    """\ub9ac\uc2a4\ud2b8 + join (\ube60\ub984)"""\n    parts = []\n    for i in range(n):\n        parts.append(str(i))\n    return "".join(parts)\n\ndef concat_join_comprehension(n):\n    """\ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 + join (\uac00\uc7a5 \ube60\ub984)"""\n    return "".join(str(i) for i in range(n))\n\ndef concat_format(n):\n    """\ud3ec\ub9f7 \ubb38\uc790\uc5f4"""\n    return "".join(f"{i}" for i in range(n))\n\ndef concat_map(n):\n    """map + join"""\n    return "".join(map(str, range(n)))\n\n# \uc131\ub2a5 \uce21\uc815\nn = 10000\niterations = 100\n\nprint(f"\ubb38\uc790\uc5f4 \uc5f0\uacb0 \uc131\ub2a5 ({n}\uac1c \uc22b\uc790):\\n")\n\nresults = {}\n\ntests = [\n    ("+ \uc5f0\uc0b0\uc790", concat_plus),\n    ("+= \uc5f0\uc0b0\uc790", concat_plus_augmented),\n    ("list + join", concat_join_list),\n    ("comprehension + join", concat_join_comprehension),\n    ("f-string + join", concat_format),\n    ("map + join", concat_map),\n]\n\nbaseline = None\n\nfor name, func in tests:\n    if n > 1000 and name == "+ \uc5f0\uc0b0\uc790":\n        print(f"{name:25s}: \uac74\ub108\ub700 (\ub108\ubb34 \ub290\ub9bc)")\n        continue\n\n    time_taken = timeit.timeit(lambda: func(n), number=iterations) / iterations\n    results[name] = time_taken\n\n    if baseline is None:\n        baseline = time_taken\n        print(f"{name:25s}: {time_taken*1000:.4f} ms")\n    else:\n        speedup = baseline / time_taken\n        print(f"{name:25s}: {time_taken*1000:.4f} ms  (x{speedup:.1f} \ube60\ub984)")\n\n# \ucd94\ucc9c \ubc29\ubc95\nprint("\\n" + "=" * 60)\nprint("\u2713 \ucd94\ucc9c: \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 + join()")\nprint("\u2717 \ud53c\ud558\uae30: + \ub610\ub294 += \uc5f0\uc0b0\uc790")\nprint("=" * 60)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc790\uc5f4-\ud3ec\ub9f7\ud305-\uc131\ub2a5",children:"\ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305 \uc131\ub2a5"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub2e4\uc591\ud55c \ud3ec\ub9f7\ud305 \ubc29\ubc95 \ube44\uad50\n\ndef format_percent(name, age, city):\n    """% \ud3ec\ub9f7\ud305"""\n    return "Name: %s, Age: %d, City: %s" % (name, age, city)\n\ndef format_method(name, age, city):\n    """.format() \uba54\uc11c\ub4dc"""\n    return "Name: {}, Age: {}, City: {}".format(name, age, city)\n\ndef format_fstring(name, age, city):\n    """f-string (Python 3.6+)"""\n    return f"Name: {name}, Age: {age}, City: {city}"\n\ndef format_template(name, age, city):\n    """Template \ubb38\uc790\uc5f4"""\n    from string import Template\n    tmpl = Template("Name: $name, Age: $age, City: $city")\n    return tmpl.substitute(name=name, age=age, city=city)\n\n# \uc131\ub2a5 \uce21\uc815\nargs = ("Alice", 30, "Seoul")\n\nprint("\ubb38\uc790\uc5f4 \ud3ec\ub9f7\ud305 \uc131\ub2a5:\\n")\n\ntime1 = timeit.timeit(lambda: format_percent(*args), number=100000)\nprint(f"% \ud3ec\ub9f7\ud305:     {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: format_method(*args), number=100000)\nprint(f".format():    {time2:.6f}\ucd08  ({time1/time2:.2f}x)")\n\ntime3 = timeit.timeit(lambda: format_fstring(*args), number=100000)\nprint(f"f-string:     {time3:.6f}\ucd08  ({time1/time3:.2f}x) \u2713 \uac00\uc7a5 \ube60\ub984")\n\ntime4 = timeit.timeit(lambda: format_template(*args), number=100000)\nprint(f"Template:     {time4:.6f}\ucd08  ({time1/time4:.2f}x)")\n\nprint("\\n\u2713 \ucd94\ucc9c: f-string (\uac00\uc7a5 \ube60\ub974\uace0 \uc77d\uae30 \uc26c\uc6c0)")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ub300\uc6a9\ub7c9-\ubb38\uc790\uc5f4-\ucc98\ub9ac",children:"\ub300\uc6a9\ub7c9 \ubb38\uc790\uc5f4 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub300\uc6a9\ub7c9 \ub85c\uadf8 \ud30c\uc77c \ucc98\ub9ac \uc608\uc81c\n\ndef process_logs_inefficient(log_lines):\n    """\ube44\ud6a8\uc728\uc801\uc778 \ubc29\ubc95"""\n    result = ""\n    for line in log_lines:\n        if "ERROR" in line:\n            result += line + "\\n"  # \ub9e4\ubc88 \uc0c8 \ubb38\uc790\uc5f4 \uc0dd\uc131\n    return result\n\ndef process_logs_efficient(log_lines):\n    """\ud6a8\uc728\uc801\uc778 \ubc29\ubc95"""\n    errors = []\n    for line in log_lines:\n        if "ERROR" in line:\n            errors.append(line)\n    return "\\n".join(errors)\n\ndef process_logs_generator(log_lines):\n    """\uc81c\ub108\ub808\uc774\ud130 \uc0ac\uc6a9"""\n    return "\\n".join(line for line in log_lines if "ERROR" in line)\n\n# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\nlog_lines = [\n    f"{\'ERROR\' if i % 10 == 0 else \'INFO\'}: Message {i}"\n    for i in range(10000)\n]\n\nprint("\ub300\uc6a9\ub7c9 \ub85c\uadf8 \ucc98\ub9ac:\\n")\n\ntime1 = timeit.timeit(lambda: process_logs_inefficient(log_lines[:1000]), number=100)\nprint(f"\ube44\ud6a8\uc728\uc801:    {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: process_logs_efficient(log_lines[:1000]), number=100)\nprint(f"\ud6a8\uc728\uc801:      {time2:.6f}\ucd08  (x{time1/time2:.1f} \ube60\ub984)")\n\ntime3 = timeit.timeit(lambda: process_logs_generator(log_lines[:1000]), number=100)\nprint(f"\uc81c\ub108\ub808\uc774\ud130:  {time3:.6f}\ucd08  (x{time1/time3:.1f} \ube60\ub984)")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"410-numpy-\uc218\uce58-\uc5f0\uc0b0",children:"4.10 NumPy \uc218\uce58 \uc5f0\uc0b0"}),"\n",(0,r.jsx)(e.h3,{id:"numpy-vs-\uc21c\uc218-python",children:"NumPy vs \uc21c\uc218 Python"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import numpy as np\nimport timeit\n\n# 1. \ubc30\uc5f4 \uc5f0\uc0b0 \ube44\uad50\ndef python_sum_squares(n):\n    """\uc21c\uc218 Python"""\n    data = list(range(n))\n    return sum(x ** 2 for x in data)\n\ndef numpy_sum_squares(n):\n    """NumPy \ubca1\ud130\ud654"""\n    data = np.arange(n)\n    return np.sum(data ** 2)\n\nn = 1_000_000\n\nprint("\ud569\uacc4 \uacc4\uc0b0 \uc131\ub2a5:\\n")\n\ntime1 = timeit.timeit(lambda: python_sum_squares(n), number=10)\nprint(f"Python:  {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: numpy_sum_squares(n), number=10)\nprint(f"NumPy:   {time2:.6f}\ucd08  (x{time1/time2:.1f} \ube60\ub984)")\n\n# 2. \ud589\ub82c \uc5f0\uc0b0\ndef matrix_multiply_python(size):\n    """\uc21c\uc218 Python \ud589\ub82c \uacf1\uc148"""\n    A = [[i + j for j in range(size)] for i in range(size)]\n    B = [[i - j for j in range(size)] for i in range(size)]\n\n    result = [[0] * size for _ in range(size)]\n    for i in range(size):\n        for j in range(size):\n            for k in range(size):\n                result[i][j] += A[i][k] * B[k][j]\n\n    return result\n\ndef matrix_multiply_numpy(size):\n    """NumPy \ud589\ub82c \uacf1\uc148"""\n    A = np.array([[i + j for j in range(size)] for i in range(size)])\n    B = np.array([[i - j for j in range(size)] for i in range(size)])\n    return np.dot(A, B)\n\nsize = 100\n\nprint("\\n\ud589\ub82c \uacf1\uc148 \uc131\ub2a5 (100x100):\\n")\n\ntime1 = timeit.timeit(lambda: matrix_multiply_python(size), number=10)\nprint(f"Python:  {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: matrix_multiply_numpy(size), number=10)\nprint(f"NumPy:   {time2:.6f}\ucd08  (x{time1/time2:.0f}\ubc30 \ube60\ub984)")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"numpy-\ucd5c\uc801\ud654-\uae30\ubc95",children:"NumPy \ucd5c\uc801\ud654 \uae30\ubc95"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import numpy as np\n\n# 1. \ubca1\ud130\ud654 (Vectorization)\ndef calculate_distances_loop(points):\n    """\ub8e8\ud504 \uc0ac\uc6a9 (\ub290\ub9bc)"""\n    distances = []\n    for point in points:\n        distance = np.sqrt(point[0]**2 + point[1]**2)\n        distances.append(distance)\n    return distances\n\ndef calculate_distances_vectorized(points):\n    """\ubca1\ud130\ud654 (\ube60\ub984)"""\n    return np.sqrt(points[:, 0]**2 + points[:, 1]**2)\n\n# \ud14c\uc2a4\ud2b8\npoints = np.random.rand(100000, 2)\n\ntime1 = timeit.timeit(lambda: calculate_distances_loop(points), number=10)\ntime2 = timeit.timeit(lambda: calculate_distances_vectorized(points), number=10)\n\nprint("\uac70\ub9ac \uacc4\uc0b0 (100,000\uac1c \uc810):")\nprint(f"\ub8e8\ud504:      {time1:.6f}\ucd08")\nprint(f"\ubca1\ud130\ud654:    {time2:.6f}\ucd08  (x{time1/time2:.0f}\ubc30 \ube60\ub984)")\n\n# 2. Broadcasting\ndef add_arrays_loop(A, b):\n    """\ub8e8\ud504\ub85c \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305"""\n    result = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        result[i] = A[i] + b\n    return result\n\ndef add_arrays_broadcast(A, b):\n    """NumPy \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305"""\n    return A + b\n\nA = np.random.rand(1000, 1000)\nb = np.random.rand(1000)\n\nprint("\\n\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305 (1000x1000):")\ntime1 = timeit.timeit(lambda: add_arrays_loop(A, b), number=100)\ntime2 = timeit.timeit(lambda: add_arrays_broadcast(A, b), number=100)\n\nprint(f"\ub8e8\ud504:          {time1:.6f}\ucd08")\nprint(f"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305:  {time2:.6f}\ucd08  (x{time1/time2:.0f}\ubc30 \ube60\ub984)")\n\n# 3. In-place \uc5f0\uc0b0\ndef out_of_place():\n    """\uc0c8 \ubc30\uc5f4 \uc0dd\uc131"""\n    arr = np.random.rand(1000000)\n    arr = arr * 2\n    arr = arr + 5\n    return arr\n\ndef in_place():\n    """\uae30\uc874 \ubc30\uc5f4 \uc218\uc815"""\n    arr = np.random.rand(1000000)\n    arr *= 2\n    arr += 5\n    return arr\n\nprint("\\nIn-place \uc5f0\uc0b0:")\ntime1 = timeit.timeit(out_of_place, number=100)\ntime2 = timeit.timeit(in_place, number=100)\n\nprint(f"Out-of-place:  {time1:.6f}\ucd08")\nprint(f"In-place:      {time2:.6f}\ucd08  (x{time1/time2:.1f}\ubc30 \ube60\ub984)")\n\n# 4. \uc801\uc808\ud55c dtype \uc120\ud0dd\ndef compare_dtypes():\n    """dtype \ube44\uad50"""\n    # float64 (\uae30\ubcf8)\n    arr64 = np.random.rand(1000000)\n\n    # float32 (\uba54\ubaa8\ub9ac \uc808\ubc18)\n    arr32 = np.random.rand(1000000).astype(np.float32)\n\n    # int32\n    arr_int = np.random.randint(0, 100, 1000000, dtype=np.int32)\n\n    print("\\nDtype \uba54\ubaa8\ub9ac \uc0ac\uc6a9:")\n    print(f"float64:  {arr64.nbytes:,} bytes")\n    print(f"float32:  {arr32.nbytes:,} bytes  (50% \uc808\uac10)")\n    print(f"int32:    {arr_int.nbytes:,} bytes  (50% \uc808\uac10)")\n\ncompare_dtypes()\n\n# 5. \uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3 (C vs Fortran)\ndef test_memory_layout():\n    """\uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3 \ube44\uad50"""\n    # C-contiguous (\ud589 \uc6b0\uc120)\n    arr_c = np.random.rand(1000, 1000)\n\n    # Fortran-contiguous (\uc5f4 \uc6b0\uc120)\n    arr_f = np.asfortranarray(arr_c)\n\n    print("\\n\uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3:")\n\n    # \ud589 \uc21c\ud68c\n    time_c_row = timeit.timeit(lambda: np.sum(arr_c, axis=1), number=1000)\n    time_f_row = timeit.timeit(lambda: np.sum(arr_f, axis=1), number=1000)\n    print(f"\ud589 \uc21c\ud68c - C: {time_c_row:.6f}\ucd08, F: {time_f_row:.6f}\ucd08")\n\n    # \uc5f4 \uc21c\ud68c\n    time_c_col = timeit.timeit(lambda: np.sum(arr_c, axis=0), number=1000)\n    time_f_col = timeit.timeit(lambda: np.sum(arr_f, axis=0), number=1000)\n    print(f"\uc5f4 \uc21c\ud68c - C: {time_c_col:.6f}\ucd08, F: {time_f_col:.6f}\ucd08")\n\ntest_memory_layout()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc804-numpy-\ucd5c\uc801\ud654",children:"\uc2e4\uc804 NumPy \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc774\ubbf8\uc9c0 \ucc98\ub9ac \uc608\uc81c\ndef process_image_python(image):\n    """\uc21c\uc218 Python (\ub290\ub9bc)"""\n    height, width = len(image), len(image[0])\n    result = [[0] * width for _ in range(height)]\n\n    for i in range(height):\n        for j in range(width):\n            # \uadf8\ub808\uc774\uc2a4\ucf00\uc77c \ubcc0\ud658\n            result[i][j] = int(0.299 * image[i][j][0] +\n                               0.587 * image[i][j][1] +\n                               0.114 * image[i][j][2])\n\n    return result\n\ndef process_image_numpy(image):\n    """NumPy \ubca1\ud130\ud654 (\ube60\ub984)"""\n    weights = np.array([0.299, 0.587, 0.114])\n    return np.dot(image, weights).astype(np.uint8)\n\n# \ud14c\uc2a4\ud2b8 (512x512 RGB \uc774\ubbf8\uc9c0)\nimage_python = [[[i % 256, j % 256, (i+j) % 256]\n                 for j in range(512)]\n                for i in range(512)]\nimage_numpy = np.array(image_python)\n\nprint("\uc774\ubbf8\uc9c0 \ucc98\ub9ac (512x512 RGB \u2192 \uadf8\ub808\uc774\uc2a4\ucf00\uc77c):")\ntime1 = timeit.timeit(lambda: process_image_python(image_python), number=10)\ntime2 = timeit.timeit(lambda: process_image_numpy(image_numpy), number=10)\n\nprint(f"Python:  {time1:.6f}\ucd08")\nprint(f"NumPy:   {time2:.6f}\ucd08  (x{time1/time2:.0f}\ubc30 \ube60\ub984)")\n'})}),"\n",(0,r.jsx)(e.admonition,{title:"NumPy \uc131\ub2a5 \ud301",type:"tip",children:(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ubca1\ud130\ud654"}),": \ub8e8\ud504 \ub300\uc2e0 \ubc30\uc5f4 \uc5f0\uc0b0 \uc0ac\uc6a9"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305"}),": \uba85\uc2dc\uc801 \ub8e8\ud504 \uc5c6\uc774 \ucc28\uc6d0 \ud655\uc7a5"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"In-place \uc5f0\uc0b0"}),": ",(0,r.jsx)(e.code,{children:"+="}),", ",(0,r.jsx)(e.code,{children:"*="})," \ub4f1\uc73c\ub85c \uba54\ubaa8\ub9ac \uc808\uc57d"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc801\uc808\ud55c dtype"}),": \ud544\uc694\ud55c \uc815\ubc00\ub3c4\ub9cc \uc0ac\uc6a9"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Contiguous \ubc30\uc5f4"}),": ",(0,r.jsx)(e.code,{children:"np.ascontiguousarray()"})," \uc0ac\uc6a9"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"View vs Copy"}),": \uac00\ub2a5\ud55c view \uc0ac\uc6a9 (",(0,r.jsx)(e.code,{children:"arr[:]"})," vs ",(0,r.jsx)(e.code,{children:"arr.copy()"}),")"]}),"\n"]})}),"\n",(0,r.jsx)(e.h2,{id:"411-jit-\ucef4\ud30c\uc77c-numba",children:"4.11 JIT \ucef4\ud30c\uc77c (Numba)"}),"\n",(0,r.jsx)(e.h3,{id:"numba-\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"Numba \uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc124\uce58: pip install numba\n\nfrom numba import jit, njit, prange\nimport numpy as np\n\n# 1. \uae30\ubcf8 JIT \ucef4\ud30c\uc77c\n@jit\ndef sum_array_jit(arr):\n    """JIT \ucef4\ud30c\uc77c\ub41c \ud568\uc218"""\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n\ndef sum_array_python(arr):\n    """\uc21c\uc218 Python"""\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n\narr = np.random.rand(10_000_000)\n\nprint("\ubc30\uc5f4 \ud569\uacc4 (10,000,000\uac1c):\\n")\n\n# \uccab \uc2e4\ud589 (\ucef4\ud30c\uc77c \uc2dc\uac04 \ud3ec\ud568)\ntime1 = timeit.timeit(lambda: sum_array_python(arr), number=1)\nprint(f"Python:       {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: sum_array_jit(arr), number=1)\nprint(f"Numba (\uccab):   {time2:.6f}\ucd08  (\ucef4\ud30c\uc77c \ud3ec\ud568)")\n\n# \ub450 \ubc88\uc9f8 \uc2e4\ud589 (\ucef4\ud30c\uc77c \uce90\uc2dc \uc0ac\uc6a9)\ntime3 = timeit.timeit(lambda: sum_array_jit(arr), number=1)\nprint(f"Numba (\uc7ac):   {time3:.6f}\ucd08  (x{time1/time3:.0f}\ubc30 \ube60\ub984)")\n\n# NumPy \ube44\uad50\ntime4 = timeit.timeit(lambda: np.sum(arr), number=1)\nprint(f"NumPy:        {time4:.6f}\ucd08")\n\n# 2. nopython \ubaa8\ub4dc (\ub354 \ube60\ub984)\n@njit  # jit(nopython=True)\uc640 \ub3d9\uc77c\ndef fibonacci_numba(n):\n    """Numba\ub85c \ucd5c\uc801\ud654\ub41c \ud53c\ubcf4\ub098\uce58"""\n    if n <= 1:\n        return n\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n\n    return b\n\ndef fibonacci_python(n):\n    """\uc21c\uc218 Python"""\n    if n <= 1:\n        return n\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n\n    return b\n\nn = 1000000\n\nprint("\\n\ud53c\ubcf4\ub098\uce58 (n=1,000,000):")\ntime1 = timeit.timeit(lambda: fibonacci_python(n), number=10)\ntime2 = timeit.timeit(lambda: fibonacci_numba(n), number=10)\n\nprint(f"Python:  {time1:.6f}\ucd08")\nprint(f"Numba:   {time2:.6f}\ucd08  (x{time1/time2:.0f}\ubc30 \ube60\ub984)")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubcd1\ub82c-\ucc98\ub9ac",children:"\ubcd1\ub82c \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# 3. \ubcd1\ub82c \ub8e8\ud504\n@njit(parallel=True)\ndef parallel_sum(arr):\n    """\ubcd1\ub82c \ucc98\ub9ac"""\n    total = 0\n    for i in prange(len(arr)):  # prange = \ubcd1\ub82c range\n        total += arr[i] ** 2\n    return total\n\n@njit\ndef sequential_sum(arr):\n    """\uc21c\ucc28 \ucc98\ub9ac"""\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i] ** 2\n    return total\n\narr = np.random.rand(100_000_000)\n\nprint("\\n\ubcd1\ub82c \ucc98\ub9ac (100,000,000\uac1c):")\ntime1 = timeit.timeit(lambda: sequential_sum(arr), number=3) / 3\ntime2 = timeit.timeit(lambda: parallel_sum(arr), number=3) / 3\n\nprint(f"\uc21c\ucc28:   {time1:.6f}\ucd08")\nprint(f"\ubcd1\ub82c:   {time2:.6f}\ucd08  (x{time1/time2:.1f}\ubc30 \ube60\ub984)")\n\n# 4. \ud0c0\uc785 \uc9c0\uc815\uc73c\ub85c \ucd5c\uc801\ud654\nfrom numba import int64, float64\n\n@njit(int64(int64, int64))\ndef add_typed(a, b):\n    """\ud0c0\uc785 \uc9c0\uc815"""\n    return a + b\n\n@njit\ndef add_inferred(a, b):\n    """\ud0c0\uc785 \ucd94\ub860"""\n    return a + b\n\n# 5. \ubca1\ud130\ud654\n@njit\ndef euclidean_distance(x1, y1, x2, y2):\n    """\uc720\ud074\ub9ac\ub4dc \uac70\ub9ac"""\n    return np.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n# \ubca1\ud130\ud654\ub41c \ubc84\uc804\neuclidean_vectorized = np.vectorize(euclidean_distance)\n\n# NumPy \ubc29\uc2dd\ndef euclidean_numpy(points1, points2):\n    """NumPy \ubca1\ud130\ud654"""\n    return np.sqrt(np.sum((points2 - points1)**2, axis=1))\n\npoints1 = np.random.rand(1000000, 2)\npoints2 = np.random.rand(1000000, 2)\n\nprint("\\n\uac70\ub9ac \uacc4\uc0b0 (1,000,000\uac1c \uc810):")\ntime1 = timeit.timeit(\n    lambda: euclidean_numpy(points1, points2),\n    number=10\n)\nprint(f"NumPy:   {time1:.6f}\ucd08")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc804-numba-\uc608\uc81c",children:"\uc2e4\uc804 Numba \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ubaac\ud14c\uce74\ub97c\ub85c \uc2dc\ubbac\ub808\uc774\uc158\n@njit\ndef monte_carlo_pi_numba(n):\n    """Numba\ub85c \ucd5c\uc801\ud654\ub41c \uc6d0\uc8fc\uc728 \ucd94\uc815"""\n    inside = 0\n    for _ in range(n):\n        x = np.random.random()\n        y = np.random.random()\n        if x*x + y*y <= 1.0:\n            inside += 1\n    return 4.0 * inside / n\n\ndef monte_carlo_pi_python(n):\n    """\uc21c\uc218 Python"""\n    inside = 0\n    for _ in range(n):\n        x = np.random.random()\n        y = np.random.random()\n        if x*x + y*y <= 1.0:\n            inside += 1\n    return 4.0 * inside / n\n\nn = 10_000_000\n\nprint("\ubaac\ud14c\uce74\ub97c\ub85c \u03c0 \ucd94\uc815 (10,000,000 \uc0d8\ud50c):")\ntime1 = timeit.timeit(lambda: monte_carlo_pi_python(n), number=1)\nresult1 = monte_carlo_pi_python(n)\nprint(f"Python:  {time1:.6f}\ucd08  (\u03c0 \u2248 {result1:.6f})")\n\ntime2 = timeit.timeit(lambda: monte_carlo_pi_numba(n), number=1)\nresult2 = monte_carlo_pi_numba(n)\nprint(f"Numba:   {time2:.6f}\ucd08  (\u03c0 \u2248 {result2:.6f})  (x{time1/time2:.0f}\ubc30 \ube60\ub984)")\n\n# \uc774\ubbf8\uc9c0 \ud544\ud130\ub9c1\n@njit\ndef apply_gaussian_blur(image, kernel):\n    """\uac00\uc6b0\uc2dc\uc548 \ube14\ub7ec (Numba)"""\n    height, width = image.shape\n    k_height, k_width = kernel.shape\n    pad_h, pad_w = k_height // 2, k_width // 2\n\n    result = np.zeros_like(image)\n\n    for i in range(pad_h, height - pad_h):\n        for j in range(pad_w, width - pad_w):\n            total = 0.0\n            for ki in range(k_height):\n                for kj in range(k_width):\n                    total += image[i - pad_h + ki, j - pad_w + kj] * kernel[ki, kj]\n            result[i, j] = total\n\n    return result\n\n# 3x3 \uac00\uc6b0\uc2dc\uc548 \ucee4\ub110\nkernel = np.array([\n    [1/16, 2/16, 1/16],\n    [2/16, 4/16, 2/16],\n    [1/16, 2/16, 1/16]\n])\n\nimage = np.random.rand(1000, 1000)\n\nprint("\\n\uac00\uc6b0\uc2dc\uc548 \ube14\ub7ec (1000x1000):")\ntime_numba = timeit.timeit(lambda: apply_gaussian_blur(image, kernel), number=10)\nprint(f"Numba:  {time_numba:.6f}\ucd08")\n'})}),"\n",(0,r.jsx)(e.admonition,{title:"Numba \uc81c\ud55c\uc0ac\ud56d",type:"warning",children:(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Python \uae30\ub2a5 \uc81c\ud55c"}),": ",(0,r.jsx)(e.code,{children:"nopython=True"}),"\uc5d0\uc11c\ub294 \uc77c\ubd80 Python \uae30\ub2a5 \uc0ac\uc6a9 \ubd88\uac00"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uac1d\uccb4 \ubaa8\ub4dc"}),": \ub290\ub824\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c ",(0,r.jsx)(e.code,{children:"nopython=True"})," \uad8c\uc7a5"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uccab \uc2e4\ud589 \ub290\ub9bc"}),": JIT \ucef4\ud30c\uc77c \uc2dc\uac04 \uc18c\uc694 (\uce90\uc2f1\uc73c\ub85c \ud574\uacb0)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"NumPy \uc77c\ubd80\ub9cc"}),": \ubaa8\ub4e0 NumPy \ud568\uc218\uac00 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc74c"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ub514\ubc84\uae45 \uc5b4\ub824\uc6c0"}),": \ucef4\ud30c\uc77c\ub41c \ucf54\ub4dc\ub294 \ub514\ubc84\uae45\uc774 \uc5b4\ub824\uc6c0"]}),"\n"]})}),"\n",(0,r.jsx)(e.h2,{id:"412-pypy-\ub300\uc548",children:"4.12 PyPy \ub300\uc548"}),"\n",(0,r.jsx)(e.h3,{id:"pypy-vs-cpython",children:"PyPy vs CPython"}),"\n",(0,r.jsx)(e.p,{children:"PyPy\ub294 JIT \ucef4\ud30c\uc77c\ub7ec\ub97c \uc0ac\uc6a9\ud558\ub294 Python \ub300\uccb4 \uad6c\ud604\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc124\uce58: https://www.pypy.org/download.html\n\n# benchmark.py\nimport time\n\ndef fibonacci_recursive(n):\n    """\uc7ac\uadc0 \ud53c\ubcf4\ub098\uce58"""\n    if n <= 1:\n        return n\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\ndef test_loops():\n    """\ub8e8\ud504 \ud14c\uc2a4\ud2b8"""\n    total = 0\n    for i in range(10_000_000):\n        total += i\n    return total\n\ndef test_dict():\n    """\ub515\uc154\ub108\ub9ac \ud14c\uc2a4\ud2b8"""\n    d = {}\n    for i in range(1_000_000):\n        d[i] = i ** 2\n    return sum(d.values())\n\nif __name__ == "__main__":\n    print("PyPy vs CPython \ubca4\uce58\ub9c8\ud06c\\n")\n\n    # \ud53c\ubcf4\ub098\uce58\n    start = time.time()\n    result = fibonacci_recursive(35)\n    fib_time = time.time() - start\n    print(f"\ud53c\ubcf4\ub098\uce58(35): {fib_time:.4f}\ucd08")\n\n    # \ub8e8\ud504\n    start = time.time()\n    result = test_loops()\n    loop_time = time.time() - start\n    print(f"\ub8e8\ud504(10M):    {loop_time:.4f}\ucd08")\n\n    # \ub515\uc154\ub108\ub9ac\n    start = time.time()\n    result = test_dict()\n    dict_time = time.time() - start\n    print(f"\ub515\uc154\ub108\ub9ac(1M): {dict_time:.4f}\ucd08")\n\n# \uc2e4\ud589 \ube44\uad50:\n# $ python benchmark.py\n# \ud53c\ubcf4\ub098\uce58(35): 3.5421\ucd08\n# \ub8e8\ud504(10M):    0.4523\ucd08\n# \ub515\uc154\ub108\ub9ac(1M): 0.2341\ucd08\n#\n# $ pypy benchmark.py\n# \ud53c\ubcf4\ub098\uce58(35): 0.2314\ucd08  (15x \ube60\ub984)\n# \ub8e8\ud504(10M):    0.0234\ucd08  (19x \ube60\ub984)\n# \ub515\uc154\ub108\ub9ac(1M): 0.0512\ucd08  (4x \ube60\ub984)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"pypy-\uc0ac\uc6a9-\uc2dc\ub098\ub9ac\uc624",children:"PyPy \uc0ac\uc6a9 \uc2dc\ub098\ub9ac\uc624"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# PyPy\uac00 \uc720\ub9ac\ud55c \uacbd\uc6b0\n"""\n1. CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\n   - \ubcf5\uc7a1\ud55c \uacc4\uc0b0\n   - \ub9ce\uc740 \ub8e8\ud504\n   - \uc21c\uc218 Python \ucf54\ub4dc\n\n2. \uc7a5\uc2dc\uac04 \uc2e4\ud589 \ud504\ub85c\uadf8\ub7a8\n   - \uc6f9 \uc11c\ubc84\n   - \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5\n   - \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778\n\n3. \uc21c\uc218 Python \ub77c\uc774\ube0c\ub7ec\ub9ac\n   - NumPy/SciPy \uc5c6\ub294 \uacbd\uc6b0\n   - C \ud655\uc7a5 \ucd5c\uc18c\ud654\n"""\n\n# CPython\uc774 \uc720\ub9ac\ud55c \uacbd\uc6b0\n"""\n1. C \ud655\uc7a5 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9\n   - NumPy, Pandas\n   - TensorFlow, PyTorch\n   - \ub9ce\uc740 \uacfc\ud559 \ub77c\uc774\ube0c\ub7ec\ub9ac\n\n2. \uc9e7\uc740 \uc2a4\ud06c\ub9bd\ud2b8\n   - \uc2dc\uc791 \uc2dc\uac04 \uc911\uc694\n   - JIT \uc6cc\ubc0d\uc5c5 \uc2dc\uac04 \uc5c6\uc74c\n\n3. \uba54\ubaa8\ub9ac \uc81c\uc57d\n   - PyPy\ub294 \ub354 \ub9ce\uc740 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\n"""\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc131\ub2a5-\ube44\uad50\ud45c",children:"\uc131\ub2a5 \ube44\uad50\ud45c"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"\uc791\uc5c5 \uc720\ud615"}),(0,r.jsx)(e.th,{children:"CPython"}),(0,r.jsx)(e.th,{children:"PyPy"}),(0,r.jsx)(e.th,{children:"Numba"}),(0,r.jsx)(e.th,{children:"\ucd94\ucc9c"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\uc21c\uc218 Python \ub8e8\ud504"}),(0,r.jsx)(e.td,{children:"1x"}),(0,r.jsx)(e.td,{children:"10-20x"}),(0,r.jsx)(e.td,{children:"50-100x"}),(0,r.jsx)(e.td,{children:"Numba"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"NumPy \uc5f0\uc0b0"}),(0,r.jsx)(e.td,{children:"1x"}),(0,r.jsx)(e.td,{children:"0.5x"}),(0,r.jsx)(e.td,{children:"1-2x"}),(0,r.jsx)(e.td,{children:"CPython"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\uc6f9 \ud504\ub808\uc784\uc6cc\ud06c"}),(0,r.jsx)(e.td,{children:"1x"}),(0,r.jsx)(e.td,{children:"2-5x"}),(0,r.jsx)(e.td,{children:"N/A"}),(0,r.jsx)(e.td,{children:"PyPy"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\uc7ac\uadc0 \uc54c\uace0\ub9ac\uc998"}),(0,r.jsx)(e.td,{children:"1x"}),(0,r.jsx)(e.td,{children:"5-15x"}),(0,r.jsx)(e.td,{children:"20-50x"}),(0,r.jsx)(e.td,{children:"Numba"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"I/O \uc791\uc5c5"}),(0,r.jsx)(e.td,{children:"1x"}),(0,r.jsx)(e.td,{children:"1x"}),(0,r.jsx)(e.td,{children:"1x"}),(0,r.jsx)(e.td,{children:"\uc544\ubb34\uac70\ub098"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"413-\uc2e4\uc804-\ucd5c\uc801\ud654-\uc608\uc81c",children:"4.13 \uc2e4\uc804 \ucd5c\uc801\ud654 \uc608\uc81c"}),"\n",(0,r.jsx)(e.h3,{id:"beforeafter-\ube44\uad50-1-\ub370\uc774\ud130-\ucc98\ub9ac",children:"Before/After \ube44\uad50 1: \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import time\nfrom collections import defaultdict\n\n# BEFORE: \ube44\ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\ndef process_sales_data_slow(transactions):\n    \"\"\"\ub290\ub9b0 \ubc84\uc804 - \uc5ec\ub7ec \ubc18\ubcf5, \ube44\ud6a8\uc728\uc801 \uc790\ub8cc\uad6c\uc870\"\"\"\n    # \uace0\uac1d\ubcc4 \ucd1d \uad6c\ub9e4\uc561 \uacc4\uc0b0\n    customer_totals = []\n    for trans in transactions:\n        found = False\n        for i, (cust_id, total) in enumerate(customer_totals):\n            if cust_id == trans['customer_id']:\n                customer_totals[i] = (cust_id, total + trans['amount'])\n                found = True\n                break\n        if not found:\n            customer_totals.append((trans['customer_id'], trans['amount']))\n\n    # VIP \uace0\uac1d \ucc3e\uae30 (10000 \uc774\uc0c1 \uad6c\ub9e4)\n    vip_customers = []\n    for cust_id, total in customer_totals:\n        if total >= 10000:\n            vip_customers.append(cust_id)\n\n    # \uc81c\ud488\ubcc4 \ud310\ub9e4\ub7c9\n    product_counts = []\n    for trans in transactions:\n        found = False\n        for i, (prod_id, count) in enumerate(product_counts):\n            if prod_id == trans['product_id']:\n                product_counts[i] = (prod_id, count + 1)\n                found = True\n                break\n        if not found:\n            product_counts.append((trans['product_id'], 1))\n\n    # \ubca0\uc2a4\ud2b8\uc140\ub7ec \ucc3e\uae30\n    if product_counts:\n        best_seller = max(product_counts, key=lambda x: x[1])[0]\n    else:\n        best_seller = None\n\n    return {\n        'customer_totals': dict(customer_totals),\n        'vip_customers': vip_customers,\n        'product_counts': dict(product_counts),\n        'best_seller': best_seller\n    }\n\n# AFTER: \ucd5c\uc801\ud654\ub41c \ucf54\ub4dc\ndef process_sales_data_fast(transactions):\n    \"\"\"\ube60\ub978 \ubc84\uc804 - \ub2e8\uc77c \ubc18\ubcf5, \ud6a8\uc728\uc801 \uc790\ub8cc\uad6c\uc870\"\"\"\n    customer_totals = defaultdict(float)\n    product_counts = defaultdict(int)\n\n    # \ub2e8\uc77c \ubc18\ubcf5\uc73c\ub85c \ubaa8\ub4e0 \ud1b5\uacc4 \uc218\uc9d1\n    for trans in transactions:\n        customer_totals[trans['customer_id']] += trans['amount']\n        product_counts[trans['product_id']] += 1\n\n    # Set comprehension\uc73c\ub85c VIP \uace0\uac1d \ucd94\ucd9c\n    vip_customers = {\n        cust_id for cust_id, total in customer_totals.items()\n        if total >= 10000\n    }\n\n    # max()\ub85c \ubca0\uc2a4\ud2b8\uc140\ub7ec \ucc3e\uae30\n    best_seller = max(product_counts, key=product_counts.get) if product_counts else None\n\n    return {\n        'customer_totals': dict(customer_totals),\n        'vip_customers': list(vip_customers),\n        'product_counts': dict(product_counts),\n        'best_seller': best_seller\n    }\n\n# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131\nimport random\n\ntransactions = [\n    {\n        'customer_id': random.randint(1, 1000),\n        'product_id': random.randint(1, 100),\n        'amount': random.uniform(10, 500)\n    }\n    for _ in range(10000)\n]\n\n# \uc131\ub2a5 \ube44\uad50\nprint(\"\ub370\uc774\ud130 \ucc98\ub9ac \ucd5c\uc801\ud654 (10,000 \uac70\ub798):\\n\")\n\nstart = time.time()\nresult_slow = process_sales_data_slow(transactions)\ntime_slow = time.time() - start\n\nstart = time.time()\nresult_fast = process_sales_data_fast(transactions)\ntime_fast = time.time() - start\n\nprint(f\"BEFORE: {time_slow:.6f}\ucd08\")\nprint(f\"AFTER:  {time_fast:.6f}\ucd08\")\nprint(f\"\uac1c\uc120:   x{time_slow/time_fast:.1f}\ubc30 \ube60\ub984\")\n\nprint(f\"\\nVIP \uace0\uac1d \uc218: {len(result_fast['vip_customers'])}\")\nprint(f\"\ubca0\uc2a4\ud2b8\uc140\ub7ec: \uc81c\ud488 {result_fast['best_seller']}\")\n"})}),"\n",(0,r.jsx)(e.h3,{id:"beforeafter-\ube44\uad50-2-\ubb38\uc790\uc5f4-\ucc98\ub9ac",children:"Before/After \ube44\uad50 2: \ubb38\uc790\uc5f4 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# BEFORE: \ube44\ud6a8\uc728\uc801\uc778 \ub85c\uadf8 \ud30c\uc2f1\ndef parse_logs_slow(log_lines):\n    """\ub290\ub9b0 \ubc84\uc804"""\n    errors = ""\n    warnings = ""\n    error_count = 0\n    warning_count = 0\n\n    for line in log_lines:\n        # \ubb38\uc790\uc5f4 \uc5f0\uacb0 (\ube44\ud6a8\uc728)\n        if "ERROR" in line:\n            errors = errors + line + "\\n"\n            error_count = error_count + 1\n        elif "WARNING" in line:\n            warnings = warnings + line + "\\n"\n            warning_count = warning_count + 1\n\n    return {\n        \'errors\': errors,\n        \'warnings\': warnings,\n        \'error_count\': error_count,\n        \'warning_count\': warning_count\n    }\n\n# AFTER: \ucd5c\uc801\ud654\ub41c \ub85c\uadf8 \ud30c\uc2f1\ndef parse_logs_fast(log_lines):\n    """\ube60\ub978 \ubc84\uc804"""\n    errors = []\n    warnings = []\n\n    for line in log_lines:\n        if "ERROR" in line:\n            errors.append(line)\n        elif "WARNING" in line:\n            warnings.append(line)\n\n    return {\n        \'errors\': \'\\n\'.join(errors),\n        \'warnings\': \'\\n\'.join(warnings),\n        \'error_count\': len(errors),\n        \'warning_count\': len(warnings)\n    }\n\n# \uc81c\ub108\ub808\uc774\ud130 \ubc84\uc804 (\uba54\ubaa8\ub9ac \ud6a8\uc728)\ndef parse_logs_generator(log_lines):\n    """\uc81c\ub108\ub808\uc774\ud130 \ubc84\uc804"""\n    errors = (line for line in log_lines if "ERROR" in line)\n    warnings = (line for line in log_lines if "WARNING" in line)\n\n    # \uc2e4\uc81c \uc0ac\uc6a9 \uc2dc\uc5d0\ub9cc \ud3c9\uac00\ub428\n    return errors, warnings\n\n# \ud14c\uc2a4\ud2b8\nlog_lines = [\n    f"{\'ERROR\' if i % 5 == 0 else \'WARNING\' if i % 3 == 0 else \'INFO\'}: Message {i}"\n    for i in range(10000)\n]\n\nprint("\\n\ub85c\uadf8 \ud30c\uc2f1 \ucd5c\uc801\ud654 (10,000 \uc904):\\n")\n\ntime1 = timeit.timeit(lambda: parse_logs_slow(log_lines), number=100)\nprint(f"BEFORE: {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: parse_logs_fast(log_lines), number=100)\nprint(f"AFTER:  {time2:.6f}\ucd08  (x{time1/time2:.1f}\ubc30 \ube60\ub984)")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"beforeafter-\ube44\uad50-3-\uc54c\uace0\ub9ac\uc998-\uc120\ud0dd",children:"Before/After \ube44\uad50 3: \uc54c\uace0\ub9ac\uc998 \uc120\ud0dd"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# BEFORE: \ubc84\ube14 \uc815\ub82c O(n\xb2)\ndef bubble_sort(arr):\n    """\ube44\ud6a8\uc728\uc801\uc778 \uc815\ub82c"""\n    n = len(arr)\n    arr = arr.copy()  # \uc6d0\ubcf8 \ubcf4\uc874\n\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n    return arr\n\n# AFTER: \ub0b4\uc7a5 \uc815\ub82c O(n log n)\ndef python_sort(arr):\n    """\ud6a8\uc728\uc801\uc778 \uc815\ub82c"""\n    return sorted(arr)\n\n# \ud14c\uc2a4\ud2b8\ndata = [random.randint(1, 10000) for _ in range(1000)]\n\nprint("\\n\uc815\ub82c \uc54c\uace0\ub9ac\uc998 \ube44\uad50 (1,000\uac1c):\\n")\n\ntime1 = timeit.timeit(lambda: bubble_sort(data), number=10)\nprint(f"\ubc84\ube14 \uc815\ub82c O(n\xb2):     {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: python_sort(data), number=10)\nprint(f"Tim\uc815\ub82c O(n log n):  {time2:.6f}\ucd08  (x{time1/time2:.0f}\ubc30 \ube60\ub984)")\n\n# NumPy \uc815\ub82c\ndata_np = np.array(data)\ntime3 = timeit.timeit(lambda: np.sort(data_np), number=10)\nprint(f"NumPy \uc815\ub82c:          {time3:.6f}\ucd08  (x{time1/time3:.0f}\ubc30 \ube60\ub984)")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"414-\ubcd1\ubaa9-\ud604\uc0c1-\uc2dd\ubcc4",children:"4.14 \ubcd1\ubaa9 \ud604\uc0c1 \uc2dd\ubcc4"}),"\n",(0,r.jsx)(e.h3,{id:"\ud504\ub85c\ud30c\uc77c\ub9c1-\uc6cc\ud06c\ud50c\ub85c\uc6b0",children:"\ud504\ub85c\ud30c\uc77c\ub9c1 \uc6cc\ud06c\ud50c\ub85c\uc6b0"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import cProfile\nimport pstats\nfrom io import StringIO\n\ndef find_bottlenecks():\n    """\ubcd1\ubaa9 \ud604\uc0c1 \ucc3e\uae30"""\n\n    # 1. \uc804\uccb4 \ud504\ub85c\uadf8\ub7a8 \ud504\ub85c\ud30c\uc77c\ub9c1\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # \uc2e4\uc81c \uc791\uc5c5 \uc2e4\ud589\n    main_function()\n\n    profiler.disable()\n\n    # 2. \uacb0\uacfc \ubd84\uc11d\n    stats = pstats.Stats(profiler)\n\n    # \ub204\uc801 \uc2dc\uac04 \uae30\uc900 \uc815\ub82c\n    print("=== \ub204\uc801 \uc2dc\uac04 Top 10 ===")\n    stats.sort_stats(\'cumulative\')\n    stats.print_stats(10)\n\n    # \ud568\uc218 \uc790\uccb4 \uc2dc\uac04 \uae30\uc900\n    print("\\n=== \ud568\uc218 \uc2e4\ud589 \uc2dc\uac04 Top 10 ===")\n    stats.sort_stats(\'time\')\n    stats.print_stats(10)\n\n    # \ud638\ucd9c \ud69f\uc218 \uae30\uc900\n    print("\\n=== \ud638\ucd9c \ud69f\uc218 Top 10 ===")\n    stats.sort_stats(\'calls\')\n    stats.print_stats(10)\n\ndef main_function():\n    """\ud14c\uc2a4\ud2b8 \ud568\uc218"""\n    data = load_data()\n    processed = process_data(data)\n    result = analyze_data(processed)\n    return result\n\ndef load_data():\n    """\ub370\uc774\ud130 \ub85c\ub4dc (\ub290\ub9bc)"""\n    time.sleep(0.1)  # I/O \uc2dc\ubbac\ub808\uc774\uc158\n    return list(range(100000))\n\ndef process_data(data):\n    """\ub370\uc774\ud130 \ucc98\ub9ac (\ubcd1\ubaa9)"""\n    result = []\n    for item in data:\n        # \ube44\ud6a8\uc728\uc801\uc778 \ucc98\ub9ac\n        if item % 2 == 0:\n            result.append(item ** 2)\n    return result\n\ndef analyze_data(data):\n    """\ub370\uc774\ud130 \ubd84\uc11d"""\n    return {\n        \'sum\': sum(data),\n        \'avg\': sum(data) / len(data) if data else 0,\n        \'max\': max(data) if data else 0\n    }\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uba54\ubaa8\ub9ac-\ud504\ub85c\ud30c\uc77c\ub9c1",children:"\uba54\ubaa8\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import tracemalloc\n\ndef profile_memory():\n    """\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ucd94\uc801"""\n\n    # \uba54\ubaa8\ub9ac \ucd94\uc801 \uc2dc\uc791\n    tracemalloc.start()\n\n    # \uc2a4\ub0c5\uc0f7 1\n    snapshot1 = tracemalloc.take_snapshot()\n\n    # \uba54\ubaa8\ub9ac \uc9d1\uc57d\uc801 \uc791\uc5c5\n    data = create_large_data()\n\n    # \uc2a4\ub0c5\uc0f7 2\n    snapshot2 = tracemalloc.take_snapshot()\n\n    # \ucc28\uc774 \ubd84\uc11d\n    top_stats = snapshot2.compare_to(snapshot1, \'lineno\')\n\n    print("=== \uba54\ubaa8\ub9ac \uc99d\uac00 Top 10 ===")\n    for stat in top_stats[:10]:\n        print(stat)\n\n    tracemalloc.stop()\n\ndef create_large_data():\n    """\ud070 \ub370\uc774\ud130 \uc0dd\uc131"""\n    # \uc5ec\ub7ec \uc790\ub8cc\uad6c\uc870 \uc0dd\uc131\n    list_data = [i for i in range(1000000)]\n    dict_data = {i: i**2 for i in range(100000)}\n    set_data = {i for i in range(100000)}\n\n    return list_data, dict_data, set_data\n\n# \uc2e4\ud589\nprofile_memory()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubcd1\ubaa9-\ud604\uc0c1-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ubcd1\ubaa9 \ud604\uc0c1 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def bottleneck_checklist():\n    """\n    \ubcd1\ubaa9 \ud604\uc0c1 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\n\n    1. \uc54c\uace0\ub9ac\uc998 \ubcf5\uc7a1\ub3c4\n       \u25a1 O(n\xb2) \uc774\uc0c1\uc758 \uc911\ucca9 \ub8e8\ud504\uac00 \uc788\ub294\uac00?\n       \u25a1 \uc7ac\uadc0 \uae4a\uc774\uac00 \uae4a\uc740\uac00?\n       \u25a1 \ub354 \ud6a8\uc728\uc801\uc778 \uc54c\uace0\ub9ac\uc998\uc774 \uc788\ub294\uac00?\n\n    2. \uc790\ub8cc\uad6c\uc870 \uc120\ud0dd\n       \u25a1 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c `in` \uc5f0\uc0b0\uc744 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294\uac00? \u2192 set/dict\n       \u25a1 \uc21c\uc11c\uac00 \ud544\uc694 \uc5c6\ub294\ub370 \ub9ac\uc2a4\ud2b8\ub97c \uc4f0\ub294\uac00? \u2192 set\n       \u25a1 \ud0a4-\uac12 \ub9e4\ud551\uc774 \ud544\uc694\ud55c\ub370 \ub9ac\uc2a4\ud2b8\ub97c \uc4f0\ub294\uac00? \u2192 dict\n\n    3. \ubb38\uc790\uc5f4 \ucc98\ub9ac\n       \u25a1 \ub8e8\ud504\uc5d0\uc11c + \ub85c \ubb38\uc790\uc5f4\uc744 \uc5f0\uacb0\ud558\ub294\uac00? \u2192 join()\n       \u25a1 \uc815\uaddc\uc2dd\uc744 \ubc18\ubcf5 \ucef4\ud30c\uc77c\ud558\ub294\uac00? \u2192 re.compile()\n       \u25a1 \ubd88\ud544\uc694\ud55c \ubb38\uc790\uc5f4 \ubcf5\uc0ac\uac00 \uc788\ub294\uac00? \u2192 in-place \uc218\uc815\n\n    4. \ud568\uc218 \ud638\ucd9c\n       \u25a1 \ub8e8\ud504 \uc548\uc5d0\uc11c \uac19\uc740 \ud568\uc218\ub97c \ubc18\ubcf5 \ud638\ucd9c\ud558\ub294\uac00? \u2192 \uce90\uc2f1\n       \u25a1 \ubb34\uac70\uc6b4 \uacc4\uc0b0\uc744 \uc911\ubcf5\ud558\ub294\uac00? \u2192 \uba54\ubaa8\uc774\uc81c\uc774\uc158\n       \u25a1 \uc804\uc5ed \ubcc0\uc218 \uc870\ud68c\uac00 \ub9ce\uc740\uac00? \u2192 \ub85c\uceec \ubcc0\uc218\ub85c\n\n    5. I/O \uc791\uc5c5\n       \u25a1 \ud30c\uc77c\uc744 \uc5ec\ub7ec \ubc88 \uc5ec\ub294\uac00? \u2192 \ud55c \ubc88\uc5d0 \ucc98\ub9ac\n       \u25a1 \ub124\ud2b8\uc6cc\ud06c \uc694\uccad\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \ud558\ub294\uac00? \u2192 \ube44\ub3d9\uae30/\ubcd1\ub82c\n       \u25a1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac\uac00 \ub9ce\uc740\uac00? \u2192 \ubc30\uce58 \ucc98\ub9ac\n\n    6. \uba54\ubaa8\ub9ac \uc0ac\uc6a9\n       \u25a1 \ud070 \ub9ac\uc2a4\ud2b8\ub97c \ubcf5\uc0ac\ud558\ub294\uac00? \u2192 \uc81c\ub108\ub808\uc774\ud130\n       \u25a1 \uc911\uac04 \uacb0\uacfc\ub97c \ubaa8\ub450 \uc800\uc7a5\ud558\ub294\uac00? \u2192 \uc2a4\ud2b8\ub9ac\ubc0d\n       \u25a1 \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130\ub97c \uc720\uc9c0\ud558\ub294\uac00? \u2192 \uc801\uc2dc \ud574\uc81c\n\n    7. NumPy/\ub77c\uc774\ube0c\ub7ec\ub9ac\n       \u25a1 \ub8e8\ud504\ub85c NumPy \ubc30\uc5f4\uc744 \ucc98\ub9ac\ud558\ub294\uac00? \u2192 \ubca1\ud130\ud654\n       \u25a1 \uc21c\uc218 Python\uc73c\ub85c \uc218\uce58 \uacc4\uc0b0\ud558\ub294\uac00? \u2192 NumPy\n       \u25a1 C \ud655\uc7a5 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc788\ub294\uac00? \u2192 \uc0ac\uc6a9\n    """\n    pass\n'})}),"\n",(0,r.jsx)(e.h2,{id:"415-\ucd5c\uc801\ud654-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"4.15 \ucd5c\uc801\ud654 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(e.h3,{id:"\ucd5c\uc801\ud654-\uc6d0\uce59",children:"\ucd5c\uc801\ud654 \uc6d0\uce59"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\n\ucd5c\uc801\ud654 3\ub300 \uc6d0\uce59\n\n1. "\uce21\uc815 \uc5c6\uc774 \ucd5c\uc801\ud654\ud558\uc9c0 \ub9d0\ub77c"\n   - \ud504\ub85c\ud30c\uc77c\ub9c1\uc73c\ub85c \ubcd1\ubaa9 \uc2dd\ubcc4\n   - \ucd94\uce21\uc774 \uc544\ub2cc \ub370\uc774\ud130 \uae30\ubc18 \uacb0\uc815\n   - Before/After \uc131\ub2a5 \uce21\uc815\n\n2. "\uac00\ub3c5\uc131\uc744 \ud76c\uc0dd\ud558\uc9c0 \ub9d0\ub77c"\n   - \uba85\ud655\ud55c \ucf54\ub4dc > \uc57d\uac04 \ube60\ub978 \ucf54\ub4dc\n   - \ud544\uc694\ud55c \uacf3\ub9cc \ucd5c\uc801\ud654\n   - \uc8fc\uc11d\uc73c\ub85c \ucd5c\uc801\ud654 \uc758\ub3c4 \uc124\uba85\n\n3. "\uc801\uc808\ud55c \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\ub77c"\n   - \uc54c\uace0\ub9ac\uc998 > \uc790\ub8cc\uad6c\uc870 > \ub77c\uc774\ube0c\ub7ec\ub9ac > JIT\n   - \ubb38\uc81c\uc5d0 \ub9de\ub294 \ud574\uacb0\ucc45 \uc120\ud0dd\n   - \uacfc\ub3c4\ud55c \ucd5c\uc801\ud654 \uc9c0\uc591\n"""\n\n# \uc88b\uc740 \uc608: \uac00\ub3c5\uc131\uacfc \uc131\ub2a5 \uade0\ud615\ndef count_word_frequency(text):\n    """\ub2e8\uc5b4 \ube48\ub3c4 \uacc4\uc0b0 - \uba85\ud655\ud558\uace0 \ud6a8\uc728\uc801"""\n    from collections import Counter\n    words = text.lower().split()\n    return Counter(words)\n\n# \ub098\uc05c \uc608: \uacfc\ub3c4\ud55c \ucd5c\uc801\ud654\ndef count_word_frequency_bad(text):\n    """\ubd88\ud544\uc694\ud558\uac8c \ubcf5\uc7a1\ud568"""\n    d = {}\n    for w in text.lower().split():\n        d[w] = d.get(w, 0) + 1\n    return d  # Counter\ub97c \uc4f0\ub294 \uac8c \ub354 \uba85\ud655\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ub2e8\uacc4\ubcc4-\ucd5c\uc801\ud654-\uc804\ub7b5",children:"\ub2e8\uacc4\ubcc4 \ucd5c\uc801\ud654 \uc804\ub7b5"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def optimization_strategy():\n    """\n    \ucd5c\uc801\ud654 \ub2e8\uacc4\n\n    1\ub2e8\uacc4: \uc54c\uace0\ub9ac\uc998 \uac1c\uc120 (\uac00\uc7a5 \ud070 \ud6a8\uacfc)\n       - O(n\xb2) \u2192 O(n log n) \ub610\ub294 O(n)\n       - \ubd88\ud544\uc694\ud55c \uacc4\uc0b0 \uc81c\uac70\n       - \uce90\uc2f1\uc73c\ub85c \uc911\ubcf5 \uacc4\uc0b0 \ubc29\uc9c0\n\n    2\ub2e8\uacc4: \uc790\ub8cc\uad6c\uc870 \ucd5c\uc801\ud654\n       - list \u2192 set/dict (\uc870\ud68c\uac00 \ub9ce\uc744 \ub54c)\n       - list \u2192 deque (\uc591\ub05d \uc0bd\uc785/\uc0ad\uc81c)\n       - list \u2192 tuple (\ubd88\ubcc0 \ub370\uc774\ud130)\n\n    3\ub2e8\uacc4: \ub0b4\uc7a5 \ud568\uc218/\ub77c\uc774\ube0c\ub7ec\ub9ac \ud65c\uc6a9\n       - \uc21c\uc218 Python \u2192 NumPy/Pandas\n       - itertools, functools, collections\n       - C \ud655\uc7a5 \ub77c\uc774\ube0c\ub7ec\ub9ac\n\n    4\ub2e8\uacc4: \ucf54\ub4dc \ub808\ubca8 \ucd5c\uc801\ud654\n       - \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\n       - \uc81c\ub108\ub808\uc774\ud130\n       - join()\uc73c\ub85c \ubb38\uc790\uc5f4 \uc5f0\uacb0\n\n    5\ub2e8\uacc4: JIT \ucef4\ud30c\uc77c (\ud544\uc694 \uc2dc)\n       - Numba (\uc218\uce58 \uacc4\uc0b0)\n       - PyPy (\uc21c\uc218 Python)\n       - Cython (C \ud655\uc7a5)\n\n    6\ub2e8\uacc4: \ubcd1\ub82c\ud654 (\ucd5c\ud6c4 \uc218\ub2e8)\n       - multiprocessing\n       - concurrent.futures\n       - asyncio (I/O)\n    """\n    pass\n\n# \uc2e4\uc804 \uc608\uc81c: \ub2e8\uacc4\ubcc4 \ucd5c\uc801\ud654\n# \ubb38\uc81c: \uc18c\uc218 \ucc3e\uae30\n\n# 1\ub2e8\uacc4: \ub098\uc774\ube0c \uc54c\uace0\ub9ac\uc998\ndef find_primes_v1(n):\n    """O(n\xb2) - \ub290\ub9bc"""\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\n# 2\ub2e8\uacc4: \uc54c\uace0\ub9ac\uc998 \uac1c\uc120\ndef find_primes_v2(n):\n    """O(n\u221an) - \uc81c\uacf1\uadfc\uae4c\uc9c0\ub9cc \ud655\uc778"""\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\n# 3\ub2e8\uacc4: \uc5d0\ub77c\ud1a0\uc2a4\ud14c\ub124\uc2a4\uc758 \uccb4 (\ucd5c\uace0 \ud6a8\uc728)\ndef find_primes_v3(n):\n    """O(n log log n) - \ub9e4\uc6b0 \ube60\ub984"""\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            # i\uc758 \ubc30\uc218\ub97c \ubaa8\ub450 \uc81c\uac70\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n\n    return [i for i in range(n + 1) if is_prime[i]]\n\n# 4\ub2e8\uacc4: NumPy \ubca1\ud130\ud654\ndef find_primes_v4(n):\n    """NumPy\ub85c \ub354 \ube60\ub974\uac8c"""\n    is_prime = np.ones(n + 1, dtype=bool)\n    is_prime[0:2] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            is_prime[i*i::i] = False\n\n    return np.where(is_prime)[0]\n\n# \uc131\ub2a5 \ube44\uad50\nn = 10000\n\nprint("\uc18c\uc218 \ucc3e\uae30 \ucd5c\uc801\ud654 (n=10,000):\\n")\n\ntime1 = timeit.timeit(lambda: find_primes_v1(n), number=10)\nprint(f"V1 (\ub098\uc774\ube0c):      {time1:.6f}\ucd08")\n\ntime2 = timeit.timeit(lambda: find_primes_v2(n), number=10)\nprint(f"V2 (\uc81c\uacf1\uadfc):      {time2:.6f}\ucd08  (x{time1/time2:.1f})")\n\ntime3 = timeit.timeit(lambda: find_primes_v3(n), number=10)\nprint(f"V3 (\uc5d0\ub77c\ud1a0\uc2a4):    {time3:.6f}\ucd08  (x{time1/time3:.0f})")\n\ntime4 = timeit.timeit(lambda: find_primes_v4(n), number=10)\nprint(f"V4 (NumPy):       {time4:.6f}\ucd08  (x{time1/time4:.0f})")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc131\ub2a5-vs-\uac00\ub3c5\uc131-\uade0\ud615",children:"\uc131\ub2a5 vs \uac00\ub3c5\uc131 \uade0\ud615"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Case 1: \uac00\ub3c5\uc131 \uc6b0\uc120 (\ucd94\ucc9c)\ndef calculate_total_price(items):\n    \"\"\"\uba85\ud655\ud558\uace0 \uc774\ud574\ud558\uae30 \uc26c\uc6c0\"\"\"\n    total = 0\n    for item in items:\n        price = item['price']\n        quantity = item['quantity']\n        discount = item.get('discount', 0)\n\n        subtotal = price * quantity\n        discounted = subtotal * (1 - discount)\n        total += discounted\n\n    return total\n\n# Case 2: \uc131\ub2a5 \uc6b0\uc120 (\ud544\uc694\ud55c \uacbd\uc6b0\ub9cc)\ndef calculate_total_price_optimized(items):\n    \"\"\"\uc57d\uac04 \ube60\ub974\uc9c0\ub9cc \ub35c \uba85\ud655\ud568\"\"\"\n    return sum(\n        item['price'] * item['quantity'] * (1 - item.get('discount', 0))\n        for item in items\n    )\n\n# Case 3: \uacfc\ub3c4\ud55c \ucd5c\uc801\ud654 (\ud53c\ud558\uae30)\ndef calculate_total_price_over_optimized(items):\n    \"\"\"\uac00\ub3c5\uc131\uc744 \ub108\ubb34 \ud76c\uc0dd\ud568\"\"\"\n    return sum(i['price']*i['quantity']*(1-i.get('discount',0)) for i in items)\n\n# \ucd94\ucc9c: \uc911\uc694\ud55c \ubd80\ubd84\ub9cc \ucd5c\uc801\ud654\ndef calculate_total_price_balanced(items):\n    \"\"\"\uade0\ud615\uc7a1\ud78c \uc811\uadfc\"\"\"\n    # \ube48\ubc88\ud788 \ud638\ucd9c\ub418\ub294 \ubd80\ubd84\ub9cc \ucd5c\uc801\ud654\n    get_discount = lambda item: item.get('discount', 0)\n\n    total = 0\n    for item in items:\n        subtotal = item['price'] * item['quantity']\n        total += subtotal * (1 - get_discount(item))\n\n    return total\n"})}),"\n",(0,r.jsx)(e.h2,{id:"416-\uc5f0\uc2b5-\ubb38\uc81c",children:"4.16 \uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-1-\uc911\ubcf5-\uc81c\uac70-\ucd5c\uc801\ud654",children:"\ubb38\uc81c 1: \uc911\ubcf5 \uc81c\uac70 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\n\ubb38\uc81c: \ub300\uc6a9\ub7c9 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc911\ubcf5 \uc81c\uac70\ud558\uae30\n\n\uc8fc\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc911\ubcf5\uc744 \uc81c\uac70\ud558\uace0 \uc6d0\ub798 \uc21c\uc11c\ub97c \uc720\uc9c0\ud558\uc138\uc694.\n- \uc785\ub825: [1, 2, 3, 2, 4, 1, 5, 3, 6]\n- \ucd9c\ub825: [1, 2, 3, 4, 5, 6]\n\n\uc694\uad6c\uc0ac\ud56d:\n- \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(n)\n- \uc21c\uc11c \uc720\uc9c0\n- 100\ub9cc \uac1c \uc774\uc0c1 \ucc98\ub9ac \uac00\ub2a5\n"""\n\n# \uc5ec\uae30\uc5d0 \ucf54\ub4dc \uc791\uc131\ndef remove_duplicates(items):\n    pass\n\n# \ud14c\uc2a4\ud2b8\ntest_data = [1, 2, 3, 2, 4, 1, 5, 3, 6]\nprint(remove_duplicates(test_data))\n# \uc608\uc0c1 \ucd9c\ub825: [1, 2, 3, 4, 5, 6]\n'})}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ud574\ub2f5 1: dict.fromkeys() \uc0ac\uc6a9 (\uac00\uc7a5 \ube60\ub984)\ndef remove_duplicates_v1(items):\n    """Python 3.7+ \ub515\uc154\ub108\ub9ac\ub294 \uc21c\uc11c \uc720\uc9c0"""\n    return list(dict.fromkeys(items))\n\n# \ud574\ub2f5 2: seen set \uc0ac\uc6a9\ndef remove_duplicates_v2(items):\n    """\uba85\uc2dc\uc801 \uc21c\uc11c \uc720\uc9c0"""\n    seen = set()\n    result = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n\n# \ud574\ub2f5 3: \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 (\uc8fc\uc758: side effect)\ndef remove_duplicates_v3(items):\n    """\uac04\uacb0\ud558\uc9c0\ub9cc \ud2b8\ub9ad"""\n    seen = set()\n    return [x for x in items if not (x in seen or seen.add(x))]\n\n# \uc131\ub2a5 \ube44\uad50\nimport timeit\nimport random\n\nlarge_data = [random.randint(1, 1000) for _ in range(100000)]\n\nprint("\uc911\ubcf5 \uc81c\uac70 \uc131\ub2a5 (100,000\uac1c):")\nprint(f"V1 (dict):  {timeit.timeit(lambda: remove_duplicates_v1(large_data), number=100):.6f}\ucd08")\nprint(f"V2 (set):   {timeit.timeit(lambda: remove_duplicates_v2(large_data), number=100):.6f}\ucd08")\nprint(f"V3 (comp):  {timeit.timeit(lambda: remove_duplicates_v3(large_data), number=100):.6f}\ucd08")\n\n# \ucd94\ucc9c: V1 (dict.fromkeys) - \uac00\uc7a5 \ube60\ub974\uace0 \uba85\ud655\ud568\n'})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-2-top-k-\uc694\uc18c-\ucc3e\uae30",children:"\ubb38\uc81c 2: Top K \uc694\uc18c \ucc3e\uae30"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\n\ubb38\uc81c: \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uac00\uc7a5 \ube48\ubc88\ud55c K\uac1c \uc694\uc18c \ucc3e\uae30\n\n\uc8fc\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \ub4f1\uc7a5\ud558\ub294 K\uac1c\uc758 \uc694\uc18c\ub97c \ubc18\ud658\ud558\uc138\uc694.\n- \uc785\ub825: [1, 1, 1, 2, 2, 3], k=2\n- \ucd9c\ub825: [1, 2]\n\n\uc694\uad6c\uc0ac\ud56d:\n- \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(n log k)\n- \ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac \uac00\ub2a5\n"""\n\ndef top_k_frequent(items, k):\n    pass\n\n# \ud14c\uc2a4\ud2b8\ntest_data = [1, 1, 1, 2, 2, 3, 4, 4, 4, 4]\nprint(top_k_frequent(test_data, 2))\n# \uc608\uc0c1 \ucd9c\ub825: [4, 1] \ub610\ub294 [1, 4]\n'})}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from collections import Counter\nimport heapq\n\n# \ud574\ub2f5 1: Counter \uc0ac\uc6a9 (\uac00\uc7a5 \uac04\ub2e8)\ndef top_k_frequent_v1(items, k):\n    """Counter.most_common() \uc0ac\uc6a9"""\n    counter = Counter(items)\n    return [item for item, count in counter.most_common(k)]\n\n# \ud574\ub2f5 2: heapq \uc0ac\uc6a9 (\uba54\ubaa8\ub9ac \ud6a8\uc728)\ndef top_k_frequent_v2(items, k):\n    """\ud799 \uc0ac\uc6a9 - O(n log k)"""\n    counter = Counter(items)\n    return heapq.nlargest(k, counter.keys(), key=counter.get)\n\n# \ud574\ub2f5 3: \uc218\ub3d9 \uad6c\ud604\ndef top_k_frequent_v3(items, k):\n    """\uc218\ub3d9 \uad6c\ud604 (\ud559\uc2b5\uc6a9)"""\n    # \ube48\ub3c4 \uacc4\uc0b0\n    freq = {}\n    for item in items:\n        freq[item] = freq.get(item, 0) + 1\n\n    # \uc815\ub82c\ud558\uc5ec \uc0c1\uc704 k\uac1c\n    sorted_items = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    return [item for item, count in sorted_items[:k]]\n\n# \uc131\ub2a5 \ube44\uad50\nlarge_data = [random.randint(1, 1000) for _ in range(100000)]\nk = 10\n\nprint("Top K \ucc3e\uae30 \uc131\ub2a5 (100,000\uac1c, k=10):")\nprint(f"V1 (Counter):  {timeit.timeit(lambda: top_k_frequent_v1(large_data, k), number=100):.6f}\ucd08")\nprint(f"V2 (heapq):    {timeit.timeit(lambda: top_k_frequent_v2(large_data, k), number=100):.6f}\ucd08")\nprint(f"V3 (manual):   {timeit.timeit(lambda: top_k_frequent_v3(large_data, k), number=100):.6f}\ucd08")\n\n# \ucd94\ucc9c: V1 (Counter) - \uac00\uc7a5 \uac04\ub2e8\ud558\uace0 \ube60\ub984\n'})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-3-\ud589\ub82c-\uc804\uce58-\ucd5c\uc801\ud654",children:"\ubb38\uc81c 3: \ud589\ub82c \uc804\uce58 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\n\ubb38\uc81c: \ud589\ub82c \uc804\uce58\ub97c \ucd5c\uc801\ud654\ud558\uc138\uc694\n\n\uc8fc\uc5b4\uc9c4 2D \ub9ac\uc2a4\ud2b8\ub97c \uc804\uce58\ud558\ub294 \uc5ec\ub7ec \ubc29\ubc95\uc744 \uad6c\ud604\ud558\uace0 \uc131\ub2a5\uc744 \ube44\uad50\ud558\uc138\uc694.\n- \uc785\ub825: [[1, 2, 3], [4, 5, 6]]\n- \ucd9c\ub825: [[1, 4], [2, 5], [3, 6]]\n\n\uc694\uad6c\uc0ac\ud56d:\n- \uc5ec\ub7ec \ubc29\ubc95 \ube44\uad50 (\ub8e8\ud504, zip, NumPy)\n- \uc131\ub2a5 \uce21\uc815\n"""\n\ndef transpose_matrix(matrix):\n    pass\n\n# \ud14c\uc2a4\ud2b8\ntest_matrix = [[1, 2, 3], [4, 5, 6]]\nprint(transpose_matrix(test_matrix))\n# \uc608\uc0c1 \ucd9c\ub825: [[1, 4], [2, 5], [3, 6]]\n'})}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import numpy as np\n\n# \ud574\ub2f5 1: \uc911\ucca9 \ub8e8\ud504 (\ub290\ub9bc)\ndef transpose_v1(matrix):\n    """\uc911\ucca9 \ub8e8\ud504 \uc0ac\uc6a9"""\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n\n    result = [[0] * rows for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            result[j][i] = matrix[i][j]\n\n    return result\n\n# \ud574\ub2f5 2: zip \uc0ac\uc6a9 (\ube60\ub984)\ndef transpose_v2(matrix):\n    """zip\uc73c\ub85c \uac04\ub2e8\ud558\uac8c"""\n    return list(map(list, zip(*matrix)))\n\n# \ud574\ub2f5 3: \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\ndef transpose_v3(matrix):\n    """\ucef4\ud504\ub9ac\ud5e8\uc158 \uc0ac\uc6a9"""\n    return [[row[i] for row in matrix] for i in range(len(matrix[0]))]\n\n# \ud574\ub2f5 4: NumPy (\uac00\uc7a5 \ube60\ub984)\ndef transpose_v4(matrix):\n    """NumPy \uc0ac\uc6a9"""\n    return np.array(matrix).T.tolist()\n\n# \uc131\ub2a5 \ube44\uad50\nlarge_matrix = [[random.random() for _ in range(100)] for _ in range(100)]\n\nprint("\ud589\ub82c \uc804\uce58 \uc131\ub2a5 (100x100):")\nprint(f"V1 (loop):  {timeit.timeit(lambda: transpose_v1(large_matrix), number=1000):.6f}\ucd08")\nprint(f"V2 (zip):   {timeit.timeit(lambda: transpose_v2(large_matrix), number=1000):.6f}\ucd08")\nprint(f"V3 (comp):  {timeit.timeit(lambda: transpose_v3(large_matrix), number=1000):.6f}\ucd08")\nprint(f"V4 (numpy): {timeit.timeit(lambda: transpose_v4(large_matrix), number=1000):.6f}\ucd08")\n\n# \ucd94\ucc9c: V2 (zip) - \uc21c\uc218 Python\uc5d0\uc11c \uac00\uc7a5 \ube60\ub974\uace0 Pythonic\n# NumPy\uac00 \uc124\uce58\ub418\uc5b4 \uc788\ub2e4\uba74 V4 \uc0ac\uc6a9\n'})})]}),"\n",(0,r.jsx)(e.h2,{id:"\uc694\uc57d",children:"\uc694\uc57d"}),"\n",(0,r.jsx)(e.h3,{id:"\ud575\uc2ec-\ud3ec\uc778\ud2b8",children:"\ud575\uc2ec \ud3ec\uc778\ud2b8"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uce21\uc815 \uc6b0\uc120"}),": \ud504\ub85c\ud30c\uc77c\ub9c1 \u2192 \ubcd1\ubaa9 \uc2dd\ubcc4 \u2192 \ucd5c\uc801\ud654"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc54c\uace0\ub9ac\uc998 \uc120\ud0dd"}),": O(n\xb2) \u2192 O(n log n) or O(n)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc790\ub8cc\uad6c\uc870"}),": list \u2192 set/dict (\uc870\ud68c\uac00 \ub9ce\uc744 \ub54c)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ub0b4\uc7a5 \ud568\uc218"}),": \uc21c\uc218 Python \u2192 NumPy/\ub77c\uc774\ube0c\ub7ec\ub9ac"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uce90\uc2f1"}),": \uc911\ubcf5 \uacc4\uc0b0 \uc81c\uac70 (@lru_cache)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc81c\ub108\ub808\uc774\ud130"}),": \uba54\ubaa8\ub9ac \ud6a8\uc728 (\ud070 \ub370\uc774\ud130)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ubb38\uc790\uc5f4"}),": join() \uc0ac\uc6a9, + \ud53c\ud558\uae30"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"JIT \ucef4\ud30c\uc77c"}),": Numba/PyPy (CPU \uc9d1\uc57d\uc801)"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ud504\ub85c\ud30c\uc77c\ub9c1\uc73c\ub85c \ubcd1\ubaa9 \uc2dd\ubcc4"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc54c\uace0\ub9ac\uc998 \ubcf5\uc7a1\ub3c4 \ud655\uc778 (Big O)"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc801\uc808\ud55c \uc790\ub8cc\uad6c\uc870 \uc120\ud0dd"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ub0b4\uc7a5 \ud568\uc218/\ub77c\uc774\ube0c\ub7ec\ub9ac \ud65c\uc6a9"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ubd88\ud544\uc694\ud55c \uacc4\uc0b0 \uc81c\uac70"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uce90\uc2f1 \uc801\uc6a9 (\uc911\ubcf5 \uacc4\uc0b0)"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc81c\ub108\ub808\uc774\ud130 \uc0ac\uc6a9 (\uba54\ubaa8\ub9ac)"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","NumPy \ubca1\ud130\ud654 (\uc218\uce58 \uc5f0\uc0b0)"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Before/After \uc131\ub2a5 \uce21\uc815"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uac00\ub3c5\uc131 \uc720\uc9c0"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsxs)(e.p,{children:["\uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \ub2e4\uc74c \uc8fc\uc81c\uc778 ",(0,r.jsx)(e.a,{href:"./typing",children:"\ud0c0\uc785 \ud78c\ud305"}),"\uc5d0\uc11c \ucf54\ub4dc \ud488\uc9c8\uacfc \uc548\uc815\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud558\uc138\uc694."]})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);