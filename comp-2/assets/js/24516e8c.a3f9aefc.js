"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3819],{8434:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dagster/deployment","title":"8. \ubc30\ud3ec","description":"\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0 Dagster\ub97c \ubc30\ud3ec\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. Docker, Kubernetes\ub97c \uc0ac\uc6a9\ud55c \ubc30\ud3ec \uc804\ub7b5\uacfc \ud504\ub85c\ub355\uc158 \uc124\uc815\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/dagster/deployment.md","sourceDirName":"dagster","slug":"/dagster/deployment","permalink":"/docs/dagster/deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dagster/deployment.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"dagsterSidebar","previous":{"title":"7. \ud14c\uc2a4\ud2b8","permalink":"/docs/dagster/testing"},"next":{"title":"9. \ubaa8\ub2c8\ud130\ub9c1","permalink":"/docs/dagster/monitoring"}}');var r=s(4848),a=s(8453);const o={sidebar_position:9},i="8. \ubc30\ud3ec",l={},c=[{value:"8.1 \ubc30\ud3ec \uc544\ud0a4\ud14d\ucc98",id:"81-\ubc30\ud3ec-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"8.1.1 Dagster \ubc30\ud3ec \uad6c\uc131 \uc694\uc18c",id:"811-dagster-\ubc30\ud3ec-\uad6c\uc131-\uc694\uc18c",level:3},{value:"8.1.2 \ubc30\ud3ec \uc544\ud0a4\ud14d\ucc98 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"812-\ubc30\ud3ec-\uc544\ud0a4\ud14d\ucc98-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:3},{value:"8.2 Docker \ubc30\ud3ec",id:"82-docker-\ubc30\ud3ec",level:2},{value:"8.2.1 \uae30\ubcf8 Dockerfile",id:"821-\uae30\ubcf8-dockerfile",level:3},{value:"8.2.2 Docker Compose \uc124\uc815",id:"822-docker-compose-\uc124\uc815",level:3},{value:"8.2.3 Dagster \uc124\uc815 \ud30c\uc77c",id:"823-dagster-\uc124\uc815-\ud30c\uc77c",level:3},{value:"8.2.4 \ubc30\ud3ec \ubc0f \uc2e4\ud589",id:"824-\ubc30\ud3ec-\ubc0f-\uc2e4\ud589",level:3},{value:"8.3 Kubernetes \ubc30\ud3ec",id:"83-kubernetes-\ubc30\ud3ec",level:2},{value:"8.3.1 Helm Chart \uc124\uc815",id:"831-helm-chart-\uc124\uc815",level:3},{value:"8.3.2 Kubernetes \ub9ac\uc18c\uc2a4 \uc815\uc758",id:"832-kubernetes-\ub9ac\uc18c\uc2a4-\uc815\uc758",level:3},{value:"8.3.3 \ubc30\ud3ec \uc2a4\ud06c\ub9bd\ud2b8",id:"833-\ubc30\ud3ec-\uc2a4\ud06c\ub9bd\ud2b8",level:3},{value:"8.3.4 Monitoring \uc124\uc815",id:"834-monitoring-\uc124\uc815",level:3},{value:"8.4 \ud658\uacbd \ubcc0\uc218 \uad00\ub9ac",id:"84-\ud658\uacbd-\ubcc0\uc218-\uad00\ub9ac",level:2},{value:"8.4.1 \ud658\uacbd\ubcc4 \uc124\uc815",id:"841-\ud658\uacbd\ubcc4-\uc124\uc815",level:3},{value:"8.4.2 \ud658\uacbd\ubcc4 \uc124\uc815 \ud30c\uc77c",id:"842-\ud658\uacbd\ubcc4-\uc124\uc815-\ud30c\uc77c",level:3},{value:"8.4.3 \uc124\uc815 \uc0ac\uc6a9 \uc608\uc81c",id:"843-\uc124\uc815-\uc0ac\uc6a9-\uc608\uc81c",level:3},{value:"8.5 Run Storage \uc124\uc815",id:"85-run-storage-\uc124\uc815",level:2},{value:"8.5.1 PostgreSQL Storage \uc124\uc815",id:"851-postgresql-storage-\uc124\uc815",level:3},{value:"8.5.2 S3 Compute Logs",id:"852-s3-compute-logs",level:3},{value:"8.5.3 Database \ucd08\uae30\ud654 \uc2a4\ud06c\ub9bd\ud2b8",id:"853-database-\ucd08\uae30\ud654-\uc2a4\ud06c\ub9bd\ud2b8",level:3},{value:"8.6 \ud504\ub85c\ub355\uc158 \uc124\uc815",id:"86-\ud504\ub85c\ub355\uc158-\uc124\uc815",level:2},{value:"8.6.1 Run Coordinator \uc124\uc815",id:"861-run-coordinator-\uc124\uc815",level:3},{value:"8.6.2 Run Launcher \uc124\uc815",id:"862-run-launcher-\uc124\uc815",level:3},{value:"8.6.3 \ubcf4\uc548 \uc124\uc815",id:"863-\ubcf4\uc548-\uc124\uc815",level:3},{value:"8.6.4 Rate Limiting",id:"864-rate-limiting",level:3},{value:"8.7 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8",id:"87-\uc2e4\uc2b5-\ud504\ub85c\uc81d\ud2b8",level:2},{value:"8.7.1 \ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"871-\ud504\ub85c\ub355\uc158-\ubc30\ud3ec-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"8.7.2 CI/CD \ud30c\uc774\ud504\ub77c\uc778",id:"872-cicd-\ud30c\uc774\ud504\ub77c\uc778",level:3},{value:"8.8 \uc694\uc57d",id:"88-\uc694\uc57d",level:2},{value:"\ud575\uc2ec \uac1c\ub150",id:"\ud575\uc2ec-\uac1c\ub150",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"8-\ubc30\ud3ec",children:"8. \ubc30\ud3ec"})}),"\n",(0,r.jsx)(e.p,{children:"\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0 Dagster\ub97c \ubc30\ud3ec\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. Docker, Kubernetes\ub97c \uc0ac\uc6a9\ud55c \ubc30\ud3ec \uc804\ub7b5\uacfc \ud504\ub85c\ub355\uc158 \uc124\uc815\uc744 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"81-\ubc30\ud3ec-\uc544\ud0a4\ud14d\ucc98",children:"8.1 \ubc30\ud3ec \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,r.jsx)(e.h3,{id:"811-dagster-\ubc30\ud3ec-\uad6c\uc131-\uc694\uc18c",children:"8.1.1 Dagster \ubc30\ud3ec \uad6c\uc131 \uc694\uc18c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Dagster \ubc30\ud3ec\uc758 \uc8fc\uc694 \uad6c\uc131 \uc694\uc18c\n\n1. Dagit (Web Server)\n   - UI\ub97c \uc81c\uacf5\ud558\ub294 \uc6f9 \uc11c\ubc84\n   - \ud3ec\ud2b8: \uae30\ubcf8 3000\n   - \uc5ed\ud560: \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\uac01\ud654, \uc2e4\ud589 \ud2b8\ub9ac\uac70\n\n2. Dagster Daemon\n   - \ubc31\uadf8\ub77c\uc6b4\ub4dc \ud504\ub85c\uc138\uc2a4\n   - \uc5ed\ud560:\n     - \uc2a4\ucf00\uc904 \uc2e4\ud589\n     - \uc13c\uc11c \ud3c9\uac00\n     - Run queue \uad00\ub9ac\n     - Run \uc7ac\uc2dc\ub3c4\n\n3. User Code (Code Location)\n   - \uc2e4\uc81c \ud30c\uc774\ud504\ub77c\uc778 \ucf54\ub4dc\n   - gRPC \uc11c\ubc84\ub85c \uc2e4\ud589\n   - \ub3c5\ub9bd\uc801\uc73c\ub85c \ubc30\ud3ec \uac00\ub2a5\n\n4. Storage (Metadata Storage)\n   - PostgreSQL \uad8c\uc7a5\n   - \uc5ed\ud560:\n     - Run history\n     - Event logs\n     - Asset catalog\n\n5. Run Coordinator\n   - Run \uc2e4\ud589 \uc870\uc728\n   - \uae30\ubcf8: DefaultRunCoordinator\n   - \ud504\ub85c\ub355\uc158: QueuedRunCoordinator\n\n6. Run Launcher\n   - Run \uc2e4\ud589 \ubc29\ubc95 \uc815\uc758\n   - \uc635\uc158:\n     - DefaultRunLauncher (subprocess)\n     - DockerRunLauncher\n     - K8sRunLauncher\n"})}),"\n",(0,r.jsx)(e.h3,{id:"812-\ubc30\ud3ec-\uc544\ud0a4\ud14d\ucc98-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"8.1.2 \ubc30\ud3ec \uc544\ud0a4\ud14d\ucc98 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Load Balancer                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Dagit Server  \u2502              \u2502   Dagster   \u2502\n\u2502   (Web UI)     \u2502              \u2502   Daemon    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                               \u2502\n        \u2502        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502        \u2502                      \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PostgreSQL Database   \u2502      \u2502  User Code Server  \u2502\n\u2502  (Metadata Storage)    \u2502      \u2502  (gRPC / Python)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                         \u2502\n                                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                \u2502                 \u2502\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502  Compute     \u2502  \u2502  Storage     \u2502\n                        \u2502  (K8s Pods)  \u2502  \u2502  (S3, etc)   \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsx)(e.h2,{id:"82-docker-\ubc30\ud3ec",children:"8.2 Docker \ubc30\ud3ec"}),"\n",(0,r.jsx)(e.h3,{id:"821-\uae30\ubcf8-dockerfile",children:"8.2.1 \uae30\ubcf8 Dockerfile"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'# Dockerfile\nFROM python:3.11-slim\n\n# \uc791\uc5c5 \ub514\ub809\ud1a0\ub9ac \uc124\uc815\nWORKDIR /app\n\n# \uc2dc\uc2a4\ud15c \uc758\uc874\uc131 \uc124\uce58\nRUN apt-get update && apt-get install -y \\\n    gcc \\\n    g++ \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Python \uc758\uc874\uc131 \ubcf5\uc0ac \ubc0f \uc124\uce58\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ucf54\ub4dc \ubcf5\uc0ac\nCOPY . .\n\n# \ud3ec\ud2b8 \ub178\ucd9c\nEXPOSE 3000\nEXPOSE 4000\n\n# \ud658\uacbd \ubcc0\uc218 \uc124\uc815\nENV DAGSTER_HOME=/app/dagster_home\n\n# Dagster \ud648 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\nRUN mkdir -p $DAGSTER_HOME\n\n# \uae30\ubcf8 \uba85\ub839\uc5b4 (docker-compose\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub4dc)\nCMD ["dagster", "api", "grpc", "-h", "0.0.0.0", "-p", "4000", "-f", "repository.py"]\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-txt",children:"# requirements.txt\ndagster==1.5.0\ndagster-webserver==1.5.0\ndagster-postgres==0.21.0\ndagster-docker==0.21.0\ndagster-aws==0.21.0\npandas==2.1.0\nrequests==2.31.0\npsycopg2-binary==2.9.7\n"})}),"\n",(0,r.jsx)(e.h3,{id:"822-docker-compose-\uc124\uc815",children:"8.2.2 Docker Compose \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: "3.8"\n\nservices:\n  # PostgreSQL Database\n  postgres:\n    image: postgres:15\n    container_name: dagster_postgres\n    environment:\n      POSTGRES_USER: dagster\n      POSTGRES_PASSWORD: dagster_password\n      POSTGRES_DB: dagster\n    ports:\n      - "5432:5432"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - dagster_network\n\n  # Dagit Web Server\n  dagit:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: dagster_dagit\n    entrypoint:\n      - dagster-webserver\n      - -h\n      - "0.0.0.0"\n      - -p\n      - "3000"\n      - -w\n      - workspace.yaml\n    environment:\n      DAGSTER_POSTGRES_USER: dagster\n      DAGSTER_POSTGRES_PASSWORD: dagster_password\n      DAGSTER_POSTGRES_DB: dagster\n      DAGSTER_POSTGRES_HOST: postgres\n      DAGSTER_POSTGRES_PORT: 5432\n    ports:\n      - "3000:3000"\n    volumes:\n      - ./dagster_home:/app/dagster_home\n      - ./workspace.yaml:/app/workspace.yaml\n    depends_on:\n      - postgres\n      - user_code\n    networks:\n      - dagster_network\n\n  # Dagster Daemon\n  daemon:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: dagster_daemon\n    entrypoint:\n      - dagster-daemon\n      - run\n    environment:\n      DAGSTER_POSTGRES_USER: dagster\n      DAGSTER_POSTGRES_PASSWORD: dagster_password\n      DAGSTER_POSTGRES_DB: dagster\n      DAGSTER_POSTGRES_HOST: postgres\n      DAGSTER_POSTGRES_PORT: 5432\n    volumes:\n      - ./dagster_home:/app/dagster_home\n      - ./workspace.yaml:/app/workspace.yaml\n      - /var/run/docker.sock:/var/run/docker.sock\n    depends_on:\n      - postgres\n      - user_code\n    networks:\n      - dagster_network\n\n  # User Code Server\n  user_code:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: dagster_user_code\n    entrypoint:\n      - dagster\n      - api\n      - grpc\n      - -h\n      - "0.0.0.0"\n      - -p\n      - "4000"\n      - -f\n      - repository.py\n    environment:\n      DAGSTER_POSTGRES_USER: dagster\n      DAGSTER_POSTGRES_PASSWORD: dagster_password\n      DAGSTER_POSTGRES_DB: dagster\n      DAGSTER_POSTGRES_HOST: postgres\n      DAGSTER_POSTGRES_PORT: 5432\n      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}\n      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}\n    ports:\n      - "4000:4000"\n    volumes:\n      - ./:/app\n    networks:\n      - dagster_network\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  dagster_network:\n    driver: bridge\n'})}),"\n",(0,r.jsx)(e.h3,{id:"823-dagster-\uc124\uc815-\ud30c\uc77c",children:"8.2.3 Dagster \uc124\uc815 \ud30c\uc77c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# dagster_home/dagster.yaml\n# PostgreSQL\uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\ub355\uc158 \uc124\uc815\n\nstorage:\n  postgres:\n    postgres_db:\n      username:\n        env: DAGSTER_POSTGRES_USER\n      password:\n        env: DAGSTER_POSTGRES_PASSWORD\n      hostname:\n        env: DAGSTER_POSTGRES_HOST\n      db_name:\n        env: DAGSTER_POSTGRES_DB\n      port:\n        env: DAGSTER_POSTGRES_PORT\n\nrun_coordinator:\n  module: dagster.core.run_coordinator\n  class: QueuedRunCoordinator\n  config:\n    max_concurrent_runs: 10\n    tag_concurrency_limits:\n      - key: "database"\n        value: "postgres"\n        limit: 2\n\nrun_launcher:\n  module: dagster_docker\n  class: DockerRunLauncher\n  config:\n    env_vars:\n      - DAGSTER_POSTGRES_USER\n      - DAGSTER_POSTGRES_PASSWORD\n      - DAGSTER_POSTGRES_DB\n      - DAGSTER_POSTGRES_HOST\n      - DAGSTER_POSTGRES_PORT\n    network: dagster_network\n    container_kwargs:\n      auto_remove: true\n      volumes:\n        - /tmp:/tmp\n\ncompute_logs:\n  module: dagster.core.storage.local_compute_log_manager\n  class: LocalComputeLogManager\n  config:\n    base_dir: /app/dagster_home/logs\n\nlocal_artifact_storage:\n  module: dagster.core.storage.root\n  class: LocalArtifactStorage\n  config:\n    base_dir: /app/dagster_home/storage\n\ntelemetry:\n  enabled: false\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# workspace.yaml\nload_from:\n  - grpc_server:\n      host: user_code\n      port: 4000\n      location_name: "my_data_pipeline"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"824-\ubc30\ud3ec-\ubc0f-\uc2e4\ud589",children:"8.2.4 \ubc30\ud3ec \ubc0f \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# .env \ud30c\uc77c \uc0dd\uc131\ncat > .env << EOF\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nEOF\n\n# Docker Compose\ub85c \uc804\uccb4 \uc2a4\ud0dd \uc2dc\uc791\ndocker-compose up -d\n\n# \ub85c\uadf8 \ud655\uc778\ndocker-compose logs -f dagit\ndocker-compose logs -f daemon\ndocker-compose logs -f user_code\n\n# \uc11c\ube44\uc2a4 \uc0c1\ud0dc \ud655\uc778\ndocker-compose ps\n\n# \ud2b9\uc815 \uc11c\ube44\uc2a4 \uc7ac\uc2dc\uc791\ndocker-compose restart user_code\n\n# \uc804\uccb4 \uc2a4\ud0dd \uc911\uc9c0\ndocker-compose down\n\n# \ubcfc\ub968 \ud3ec\ud568 \uc644\uc804 \uc81c\uac70\ndocker-compose down -v\n"})}),"\n",(0,r.jsx)(e.h2,{id:"83-kubernetes-\ubc30\ud3ec",children:"8.3 Kubernetes \ubc30\ud3ec"}),"\n",(0,r.jsx)(e.h3,{id:"831-helm-chart-\uc124\uc815",children:"8.3.1 Helm Chart \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Dagster Helm Repository \ucd94\uac00\nhelm repo add dagster https://dagster-io.github.io/helm\nhelm repo update\n\n# \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc0dd\uc131\nkubectl create namespace dagster\n\n# values.yaml \uc0dd\uc131 (\ucee4\uc2a4\ud140 \uc124\uc815)\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# values.yaml\n# Dagster Helm Chart \ucee4\uc2a4\ud140 \uc124\uc815\n\ndagsterWebserver:\n  replicas: 2\n  image:\n    repository: "dagster/dagster-k8s"\n    tag: "1.5.0"\n    pullPolicy: "IfNotPresent"\n\n  service:\n    type: LoadBalancer\n    port: 80\n\n  env:\n    - name: DAGSTER_K8S_PIPELINE_RUN_NAMESPACE\n      value: "dagster"\n\n  resources:\n    requests:\n      cpu: "500m"\n      memory: "1Gi"\n    limits:\n      cpu: "1000m"\n      memory: "2Gi"\n\ndagsterDaemon:\n  replicas: 1\n  image:\n    repository: "dagster/dagster-k8s"\n    tag: "1.5.0"\n\n  env:\n    - name: DAGSTER_K8S_PIPELINE_RUN_NAMESPACE\n      value: "dagster"\n\n  resources:\n    requests:\n      cpu: "250m"\n      memory: "512Mi"\n    limits:\n      cpu: "500m"\n      memory: "1Gi"\n\npostgresql:\n  enabled: true\n  postgresqlHost: ""\n  postgresqlUsername: dagster\n  postgresqlPassword: dagster_password\n  postgresqlDatabase: dagster\n  service:\n    port: 5432\n\n  persistence:\n    enabled: true\n    size: 50Gi\n    storageClass: "standard"\n\n  resources:\n    requests:\n      cpu: "250m"\n      memory: "1Gi"\n    limits:\n      cpu: "1000m"\n      memory: "2Gi"\n\nrunLauncher:\n  type: K8sRunLauncher\n  config:\n    k8sRunLauncher:\n      envConfigMaps:\n        - dagster-pipeline-env\n      envSecrets:\n        - dagster-aws-credentials\n\n      jobNamespace: "dagster"\n\n      imagePullPolicy: "IfNotPresent"\n\n      resources:\n        limits:\n          cpu: "2000m"\n          memory: "4Gi"\n        requests:\n          cpu: "1000m"\n          memory: "2Gi"\n\ncomputeLogs:\n  enabled: true\n  provider: "s3"\n  config:\n    bucket: "my-dagster-logs"\n    region: "us-east-1"\n\nuserDeployments:\n  enabled: true\n  deployments:\n    - name: "my-data-pipeline"\n      image:\n        repository: "my-registry/dagster-pipeline"\n        tag: "latest"\n        pullPolicy: "Always"\n\n      dagsterApiGrpcArgs:\n        - "--python-file"\n        - "/app/repository.py"\n\n      port: 3030\n\n      env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: database-credentials\n              key: url\n\n      envConfigMaps:\n        - dagster-pipeline-env\n\n      envSecrets:\n        - dagster-aws-credentials\n\n      resources:\n        requests:\n          cpu: "500m"\n          memory: "1Gi"\n        limits:\n          cpu: "1000m"\n          memory: "2Gi"\n\n      livenessProbe:\n        enabled: true\n        periodSeconds: 30\n        timeoutSeconds: 10\n\n      readinessProbe:\n        enabled: true\n        periodSeconds: 10\n        timeoutSeconds: 5\n\ningress:\n  enabled: true\n  apiVersion: "networking.k8s.io/v1"\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n  host: "dagster.example.com"\n  tls:\n    enabled: true\n    secretName: dagster-tls\n\nserviceAccount:\n  create: true\n  name: "dagster"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"832-kubernetes-\ub9ac\uc18c\uc2a4-\uc815\uc758",children:"8.3.2 Kubernetes \ub9ac\uc18c\uc2a4 \uc815\uc758"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# k8s/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: dagster-pipeline-env\n  namespace: dagster\ndata:\n  ENVIRONMENT: "production"\n  LOG_LEVEL: "INFO"\n  ENABLE_METRICS: "true"\n  S3_BUCKET: "my-data-bucket"\n  S3_PREFIX: "dagster/"\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# k8s/secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: dagster-aws-credentials\n  namespace: dagster\ntype: Opaque\nstringData:\n  AWS_ACCESS_KEY_ID: "AKIAIOSFODNN7EXAMPLE"\n  AWS_SECRET_ACCESS_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"\n  AWS_DEFAULT_REGION: "us-east-1"\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# k8s/database-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-credentials\n  namespace: dagster\ntype: Opaque\nstringData:\n  url: "postgresql://user:password@postgres-service:5432/mydb"\n  username: "dagster_user"\n  password: "secure_password_here"\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# k8s/persistent-volume.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: dagster-storage\n  namespace: dagster\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 100Gi\n  storageClassName: standard\n"})}),"\n",(0,r.jsx)(e.h3,{id:"833-\ubc30\ud3ec-\uc2a4\ud06c\ub9bd\ud2b8",children:"8.3.3 \ubc30\ud3ec \uc2a4\ud06c\ub9bd\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# deploy.sh - Kubernetes \ubc30\ud3ec \uc2a4\ud06c\ub9bd\ud2b8\n\nset -e\n\nNAMESPACE="dagster"\nRELEASE_NAME="dagster"\n\necho "\ud83d\ude80 Dagster \ubc30\ud3ec \uc2dc\uc791..."\n\n# 1. \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc0dd\uc131\necho "\ud83d\udce6 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc0dd\uc131..."\nkubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -\n\n# 2. Secrets \uc0dd\uc131\necho "\ud83d\udd10 Secrets \uc0dd\uc131..."\nkubectl apply -f k8s/secret.yaml\nkubectl apply -f k8s/database-secret.yaml\n\n# 3. ConfigMaps \uc0dd\uc131\necho "\u2699\ufe0f  ConfigMaps \uc0dd\uc131..."\nkubectl apply -f k8s/configmap.yaml\n\n# 4. PVC \uc0dd\uc131\necho "\ud83d\udcbe Persistent Volume Claims \uc0dd\uc131..."\nkubectl apply -f k8s/persistent-volume.yaml\n\n# 5. Helm Chart \uc124\uce58/\uc5c5\uadf8\ub808\uc774\ub4dc\necho "\ud83d\udcca Helm Chart \ubc30\ud3ec..."\nhelm upgrade --install $RELEASE_NAME dagster/dagster \\\n  --namespace $NAMESPACE \\\n  --values values.yaml \\\n  --wait \\\n  --timeout 10m\n\n# 6. \ubc30\ud3ec \uc0c1\ud0dc \ud655\uc778\necho "\u2705 \ubc30\ud3ec \uc0c1\ud0dc \ud655\uc778..."\nkubectl rollout status deployment/${RELEASE_NAME}-dagster-webserver -n $NAMESPACE\nkubectl rollout status deployment/${RELEASE_NAME}-dagster-daemon -n $NAMESPACE\n\n# 7. Pod \uc0c1\ud0dc \ucd9c\ub825\necho "\ud83d\udd0d Pod \uc0c1\ud0dc:"\nkubectl get pods -n $NAMESPACE\n\n# 8. Service \uc815\ubcf4 \ucd9c\ub825\necho "\ud83c\udf10 Service \uc815\ubcf4:"\nkubectl get svc -n $NAMESPACE\n\necho "\u2728 \ubc30\ud3ec \uc644\ub8cc!"\necho "Dagster UI: http://$(kubectl get svc ${RELEASE_NAME}-dagster-webserver -n $NAMESPACE -o jsonpath=\'{.status.loadBalancer.ingress[0].ip}\')"\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# update-user-code.sh - User Code \uc5c5\ub370\uc774\ud2b8 \uc2a4\ud06c\ub9bd\ud2b8\n\nset -e\n\nNAMESPACE="dagster"\nIMAGE_TAG=${1:-latest}\nDEPLOYMENT_NAME="dagster-dagster-user-deployments-my-data-pipeline"\n\necho "\ud83d\udd04 User Code \uc5c5\ub370\uc774\ud2b8 \uc2dc\uc791..."\necho "Image Tag: $IMAGE_TAG"\n\n# 1. Docker \uc774\ubbf8\uc9c0 \ube4c\ub4dc \ubc0f \ud478\uc2dc\necho "\ud83c\udfd7\ufe0f  Docker \uc774\ubbf8\uc9c0 \ube4c\ub4dc..."\ndocker build -t my-registry/dagster-pipeline:$IMAGE_TAG .\n\necho "\ud83d\udce4 Docker \uc774\ubbf8\uc9c0 \ud478\uc2dc..."\ndocker push my-registry/dagster-pipeline:$IMAGE_TAG\n\n# 2. Kubernetes \ubc30\ud3ec \uc5c5\ub370\uc774\ud2b8\necho "\ud83d\udea2 Kubernetes \ubc30\ud3ec \uc5c5\ub370\uc774\ud2b8..."\nkubectl set image deployment/$DEPLOYMENT_NAME \\\n  dagster=my-registry/dagster-pipeline:$IMAGE_TAG \\\n  -n $NAMESPACE\n\n# 3. \ub864\uc544\uc6c3 \uc0c1\ud0dc \ud655\uc778\necho "\u23f3 \ub864\uc544\uc6c3 \ub300\uae30 \uc911..."\nkubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE\n\n# 4. \uc0c8 Pod \ud655\uc778\necho "\u2705 \uc0c8 Pod:"\nkubectl get pods -n $NAMESPACE -l deployment=$DEPLOYMENT_NAME\n\necho "\u2728 User Code \uc5c5\ub370\uc774\ud2b8 \uc644\ub8cc!"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"834-monitoring-\uc124\uc815",children:"8.3.4 Monitoring \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# k8s/service-monitor.yaml\n# Prometheus Operator ServiceMonitor\n\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: dagster-metrics\n  namespace: dagster\n  labels:\n    app: dagster\nspec:\n  selector:\n    matchLabels:\n      app: dagster\n  endpoints:\n    - port: metrics\n      interval: 30s\n      path: /metrics\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# k8s/pod-monitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: PodMonitor\nmetadata:\n  name: dagster-daemon-monitor\n  namespace: dagster\nspec:\n  selector:\n    matchLabels:\n      component: dagster-daemon\n  podMetricsEndpoints:\n    - port: metrics\n      interval: 30s\n"})}),"\n",(0,r.jsx)(e.h2,{id:"84-\ud658\uacbd-\ubcc0\uc218-\uad00\ub9ac",children:"8.4 \ud658\uacbd \ubcc0\uc218 \uad00\ub9ac"}),"\n",(0,r.jsx)(e.h3,{id:"841-\ud658\uacbd\ubcc4-\uc124\uc815",children:"8.4.1 \ud658\uacbd\ubcc4 \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# config/settings.py\n"""\n\ud658\uacbd\ubcc4 \uc124\uc815 \uad00\ub9ac\n"""\nimport os\nfrom typing import Dict, Any\nfrom enum import Enum\n\nclass Environment(Enum):\n    """\ud658\uacbd \ud0c0\uc785"""\n    DEVELOPMENT = "development"\n    STAGING = "staging"\n    PRODUCTION = "production"\n\nclass Settings:\n    """\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815"""\n\n    def __init__(self):\n        self.env = Environment(os.getenv("ENVIRONMENT", "development"))\n        self.debug = os.getenv("DEBUG", "false").lower() == "true"\n\n        # Database\n        self.db_host = os.getenv("DB_HOST", "localhost")\n        self.db_port = int(os.getenv("DB_PORT", "5432"))\n        self.db_name = os.getenv("DB_NAME", "dagster")\n        self.db_user = os.getenv("DB_USER", "dagster")\n        self.db_password = os.getenv("DB_PASSWORD", "")\n\n        # AWS\n        self.aws_region = os.getenv("AWS_DEFAULT_REGION", "us-east-1")\n        self.s3_bucket = os.getenv("S3_BUCKET", "")\n        self.s3_prefix = os.getenv("S3_PREFIX", "dagster/")\n\n        # Run Settings\n        self.max_concurrent_runs = int(os.getenv("MAX_CONCURRENT_RUNS", "10"))\n        self.run_timeout = int(os.getenv("RUN_TIMEOUT", "3600"))\n\n    @property\n    def database_url(self) -> str:\n        """PostgreSQL \uc5f0\uacb0 \ubb38\uc790\uc5f4"""\n        return (\n            f"postgresql://{self.db_user}:{self.db_password}"\n            f"@{self.db_host}:{self.db_port}/{self.db_name}"\n        )\n\n    @property\n    def is_production(self) -> bool:\n        """\ud504\ub85c\ub355\uc158 \ud658\uacbd \uc5ec\ubd80"""\n        return self.env == Environment.PRODUCTION\n\n    def to_dict(self) -> Dict[str, Any]:\n        """\uc124\uc815\uc744 \ub515\uc154\ub108\ub9ac\ub85c \ubcc0\ud658"""\n        return {\n            "environment": self.env.value,\n            "debug": self.debug,\n            "database": {\n                "host": self.db_host,\n                "port": self.db_port,\n                "name": self.db_name,\n            },\n            "aws": {\n                "region": self.aws_region,\n                "s3_bucket": self.s3_bucket,\n            },\n        }\n\n# \uc2f1\uae00\ud1a4 \uc778\uc2a4\ud134\uc2a4\nsettings = Settings()\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# config/__init__.py\nfrom .settings import settings\n\n__all__ = ["settings"]\n'})}),"\n",(0,r.jsx)(e.h3,{id:"842-\ud658\uacbd\ubcc4-\uc124\uc815-\ud30c\uc77c",children:"8.4.2 \ud658\uacbd\ubcc4 \uc124\uc815 \ud30c\uc77c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# .env.development\nENVIRONMENT=development\nDEBUG=true\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=dagster_dev\nDB_USER=dagster\nDB_PASSWORD=dev_password\nAWS_DEFAULT_REGION=us-east-1\nS3_BUCKET=dagster-dev-bucket\nMAX_CONCURRENT_RUNS=5\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# .env.staging\nENVIRONMENT=staging\nDEBUG=false\nDB_HOST=staging-postgres.example.com\nDB_PORT=5432\nDB_NAME=dagster_staging\nDB_USER=dagster_staging\nDB_PASSWORD=${STAGING_DB_PASSWORD}\nAWS_DEFAULT_REGION=us-east-1\nS3_BUCKET=dagster-staging-bucket\nMAX_CONCURRENT_RUNS=8\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# .env.production\nENVIRONMENT=production\nDEBUG=false\nDB_HOST=prod-postgres.example.com\nDB_PORT=5432\nDB_NAME=dagster_prod\nDB_USER=dagster_prod\nDB_PASSWORD=${PROD_DB_PASSWORD}\nAWS_DEFAULT_REGION=us-east-1\nS3_BUCKET=dagster-prod-bucket\nMAX_CONCURRENT_RUNS=20\nRUN_TIMEOUT=7200\n"})}),"\n",(0,r.jsx)(e.h3,{id:"843-\uc124\uc815-\uc0ac\uc6a9-\uc608\uc81c",children:"8.4.3 \uc124\uc815 \uc0ac\uc6a9 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# repository.py\nfrom dagster import Definitions, asset, ConfigurableResource\nfrom config import settings\nimport pandas as pd\n\nclass S3Resource(ConfigurableResource):\n    """S3 \ub9ac\uc18c\uc2a4"""\n    bucket: str\n    prefix: str\n    region: str\n\n    def upload_dataframe(self, df: pd.DataFrame, key: str):\n        """DataFrame\uc744 S3\uc5d0 \uc5c5\ub85c\ub4dc"""\n        import boto3\n        s3 = boto3.client(\'s3\', region_name=self.region)\n        full_key = f"{self.prefix}{key}"\n        csv_buffer = df.to_csv(index=False)\n        s3.put_object(Bucket=self.bucket, Key=full_key, Body=csv_buffer)\n\n@asset\ndef processed_data(s3: S3Resource) -> pd.DataFrame:\n    """\ub370\uc774\ud130 \ucc98\ub9ac \ubc0f S3 \uc5c5\ub85c\ub4dc"""\n    df = pd.DataFrame({"col1": [1, 2, 3]})\n\n    # \ud658\uacbd\ubcc4\ub85c \ub2e4\ub978 \ub85c\uc9c1 \uc2e4\ud589\n    if settings.is_production:\n        # \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub9cc S3\uc5d0 \uc5c5\ub85c\ub4dc\n        s3.upload_dataframe(df, "processed/data.csv")\n\n    return df\n\n# \ud658\uacbd\ubcc4 \ub9ac\uc18c\uc2a4 \uc124\uc815\ndefs = Definitions(\n    assets=[processed_data],\n    resources={\n        "s3": S3Resource(\n            bucket=settings.s3_bucket,\n            prefix=settings.s3_prefix,\n            region=settings.aws_region\n        )\n    }\n)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"85-run-storage-\uc124\uc815",children:"8.5 Run Storage \uc124\uc815"}),"\n",(0,r.jsx)(e.h3,{id:"851-postgresql-storage-\uc124\uc815",children:"8.5.1 PostgreSQL Storage \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# dagster_home/dagster.yaml (\uc0c1\uc138 \uc124\uc815)\nstorage:\n  postgres:\n    postgres_db:\n      username:\n        env: DAGSTER_POSTGRES_USER\n      password:\n        env: DAGSTER_POSTGRES_PASSWORD\n      hostname:\n        env: DAGSTER_POSTGRES_HOST\n      db_name:\n        env: DAGSTER_POSTGRES_DB\n      port:\n        env: DAGSTER_POSTGRES_PORT\n      params:\n        connect_timeout: 10\n        application_name: dagster\n        options: -c statement_timeout=60000\n\n# Connection Pooling \uc124\uc815\nrun_storage:\n  module: dagster_postgres.run_storage\n  class: PostgresRunStorage\n  config:\n    postgres_db:\n      username:\n        env: DAGSTER_POSTGRES_USER\n      password:\n        env: DAGSTER_POSTGRES_PASSWORD\n      hostname:\n        env: DAGSTER_POSTGRES_HOST\n      db_name:\n        env: DAGSTER_POSTGRES_DB\n      port:\n        env: DAGSTER_POSTGRES_PORT\n    should_autocreate_tables: true\n\nevent_log_storage:\n  module: dagster_postgres.event_log\n  class: PostgresEventLogStorage\n  config:\n    postgres_db:\n      username:\n        env: DAGSTER_POSTGRES_USER\n      password:\n        env: DAGSTER_POSTGRES_PASSWORD\n      hostname:\n        env: DAGSTER_POSTGRES_HOST\n      db_name:\n        env: DAGSTER_POSTGRES_DB\n      port:\n        env: DAGSTER_POSTGRES_PORT\n    should_autocreate_tables: true\n\nschedule_storage:\n  module: dagster_postgres.schedule_storage\n  class: PostgresScheduleStorage\n  config:\n    postgres_db:\n      username:\n        env: DAGSTER_POSTGRES_USER\n      password:\n        env: DAGSTER_POSTGRES_PASSWORD\n      hostname:\n        env: DAGSTER_POSTGRES_HOST\n      db_name:\n        env: DAGSTER_POSTGRES_DB\n      port:\n        env: DAGSTER_POSTGRES_PORT\n    should_autocreate_tables: true\n"})}),"\n",(0,r.jsx)(e.h3,{id:"852-s3-compute-logs",children:"8.5.2 S3 Compute Logs"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# dagster_home/dagster.yaml\ncompute_logs:\n  module: dagster_aws.s3.compute_log_manager\n  class: S3ComputeLogManager\n  config:\n    bucket: "my-dagster-compute-logs"\n    prefix: "dagster-logs/"\n    region_name: "us-east-1"\n    skip_empty_files: true\n    upload_interval: 30\n    show_url_only: false\n'})}),"\n",(0,r.jsx)(e.h3,{id:"853-database-\ucd08\uae30\ud654-\uc2a4\ud06c\ub9bd\ud2b8",children:"8.5.3 Database \ucd08\uae30\ud654 \uc2a4\ud06c\ub9bd\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sql",children:"-- scripts/init_database.sql\n-- Dagster PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd08\uae30\ud654\n\n-- Database \uc0dd\uc131\nCREATE DATABASE dagster\n    WITH\n    OWNER = dagster\n    ENCODING = 'UTF8'\n    LC_COLLATE = 'en_US.UTF-8'\n    LC_CTYPE = 'en_US.UTF-8'\n    TEMPLATE = template0;\n\n-- Connection limit \uc124\uc815\nALTER DATABASE dagster CONNECTION LIMIT 100;\n\n-- User \uad8c\ud55c \ubd80\uc5ec\nGRANT ALL PRIVILEGES ON DATABASE dagster TO dagster;\n\n-- Extensions \uc124\uce58\n\\c dagster\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\n\n-- \uc131\ub2a5 \ucd5c\uc801\ud654 \uc124\uc815\nALTER SYSTEM SET max_connections = 200;\nALTER SYSTEM SET shared_buffers = '256MB';\nALTER SYSTEM SET effective_cache_size = '1GB';\nALTER SYSTEM SET maintenance_work_mem = '64MB';\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\nALTER SYSTEM SET wal_buffers = '16MB';\nALTER SYSTEM SET default_statistics_target = 100;\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\nALTER SYSTEM SET work_mem = '4MB';\nALTER SYSTEM SET min_wal_size = '1GB';\nALTER SYSTEM SET max_wal_size = '4GB';\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/migrate_database.sh\n# Dagster \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158\n\nset -e\n\necho "\ud83d\udd04 Dagster \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2dc\uc791..."\n\n# \ud658\uacbd \ubcc0\uc218 \ud655\uc778\n: ${DAGSTER_POSTGRES_HOST:?Environment variable DAGSTER_POSTGRES_HOST is required}\n: ${DAGSTER_POSTGRES_DB:?Environment variable DAGSTER_POSTGRES_DB is required}\n: ${DAGSTER_POSTGRES_USER:?Environment variable DAGSTER_POSTGRES_USER is required}\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\necho "\ud83d\udce1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud14c\uc2a4\ud2b8..."\nPGPASSWORD=$DAGSTER_POSTGRES_PASSWORD psql \\\n  -h $DAGSTER_POSTGRES_HOST \\\n  -U $DAGSTER_POSTGRES_USER \\\n  -d $DAGSTER_POSTGRES_DB \\\n  -c "SELECT version();"\n\n# Dagster \uc2a4\ud0a4\ub9c8 \uc0dd\uc131/\uc5c5\uadf8\ub808\uc774\ub4dc\necho "\ud83d\udd28 Dagster \uc2a4\ud0a4\ub9c8 \uc5c5\uadf8\ub808\uc774\ub4dc..."\ndagster instance migrate\n\necho "\u2705 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc644\ub8cc!"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"86-\ud504\ub85c\ub355\uc158-\uc124\uc815",children:"8.6 \ud504\ub85c\ub355\uc158 \uc124\uc815"}),"\n",(0,r.jsx)(e.h3,{id:"861-run-coordinator-\uc124\uc815",children:"8.6.1 Run Coordinator \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# dagster_home/dagster.yaml\nrun_coordinator:\n  module: dagster.core.run_coordinator\n  class: QueuedRunCoordinator\n  config:\n    # \ub3d9\uc2dc \uc2e4\ud589 \uc81c\ud55c\n    max_concurrent_runs: 25\n\n    # Tag \uae30\ubc18 \ub3d9\uc2dc\uc131 \uc81c\uc5b4\n    tag_concurrency_limits:\n      # \ub370\uc774\ud130\ubca0\uc774\uc2a4\ubcc4 \uc81c\ud55c\n      - key: "database"\n        value: "postgres_prod"\n        limit: 3\n\n      - key: "database"\n        value: "mysql_prod"\n        limit: 2\n\n      # \ub9ac\uc18c\uc2a4 \uc9d1\uc57d\uc801 \uc791\uc5c5 \uc81c\ud55c\n      - key: "resource_intensive"\n        value: "true"\n        limit: 2\n\n      # \uace0\uac1d\ubcc4 \uc81c\ud55c\n      - key: "customer"\n        value:\n          applyLimitPerUniqueValue: true\n        limit: 1\n\n    # \uc6b0\uc120\uc21c\uc704 \uc124\uc815\n    dequeue_interval_seconds: 5\n'})}),"\n",(0,r.jsx)(e.h3,{id:"862-run-launcher-\uc124\uc815",children:"8.6.2 Run Launcher \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# Kubernetes Run Launcher\nrun_launcher:\n  module: dagster_k8s\n  class: K8sRunLauncher\n  config:\n    # \uae30\ubcf8 Pod \uc124\uc815\n    job_image: "my-registry/dagster-pipeline:latest"\n    dagster_home: "/opt/dagster/dagster_home"\n    instance_config_map: "dagster-instance"\n    postgres_password_secret: "dagster-postgresql-secret"\n\n    # Job \ub124\uc784\uc2a4\ud398\uc774\uc2a4\n    job_namespace: "dagster-runs"\n\n    # \ub9ac\uc18c\uc2a4 \uc694\uccad/\uc81c\ud55c\n    resources:\n      requests:\n        cpu: "1000m"\n        memory: "2Gi"\n      limits:\n        cpu: "2000m"\n        memory: "4Gi"\n\n    # \ud658\uacbd \ubcc0\uc218\n    env_config_maps:\n      - dagster-pipeline-env\n\n    env_secrets:\n      - dagster-aws-credentials\n      - dagster-database-credentials\n\n    # Node Selector\n    node_selector:\n      workload-type: "dagster"\n\n    # Tolerations\n    tolerations:\n      - key: "dagster"\n        operator: "Equal"\n        value: "true"\n        effect: "NoSchedule"\n\n    # Service Account\n    service_account_name: "dagster-run"\n\n    # Image Pull Policy\n    image_pull_policy: "Always"\n\n    # TTL after finished\n    ttl_seconds_after_finished: 86400  # 24 hours\n'})}),"\n",(0,r.jsx)(e.h3,{id:"863-\ubcf4\uc548-\uc124\uc815",children:"8.6.3 \ubcf4\uc548 \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# security/authentication.py\n"""\nDagster \uc778\uc99d \ubc0f \ubcf4\uc548 \uc124\uc815\n"""\nfrom dagster import ConfigurableResource\nfrom typing import Optional\nimport jwt\nfrom datetime import datetime, timedelta\n\nclass AuthService(ConfigurableResource):\n    """\uc778\uc99d \uc11c\ube44\uc2a4"""\n    secret_key: str\n    algorithm: str = "HS256"\n    access_token_expire_minutes: int = 30\n\n    def create_access_token(\n        self,\n        data: dict,\n        expires_delta: Optional[timedelta] = None\n    ) -> str:\n        """Access Token \uc0dd\uc131"""\n        to_encode = data.copy()\n\n        if expires_delta:\n            expire = datetime.utcnow() + expires_delta\n        else:\n            expire = datetime.utcnow() + timedelta(\n                minutes=self.access_token_expire_minutes\n            )\n\n        to_encode.update({"exp": expire})\n        encoded_jwt = jwt.encode(\n            to_encode,\n            self.secret_key,\n            algorithm=self.algorithm\n        )\n\n        return encoded_jwt\n\n    def verify_token(self, token: str) -> Optional[dict]:\n        """Token \uac80\uc99d"""\n        try:\n            payload = jwt.decode(\n                token,\n                self.secret_key,\n                algorithms=[self.algorithm]\n            )\n            return payload\n        except jwt.PyJWTError:\n            return None\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# security/rbac.py\n"""\nRole-Based Access Control\n"""\nfrom enum import Enum\nfrom typing import List, Set\n\nclass Permission(Enum):\n    """\uad8c\ud55c \uc815\uc758"""\n    READ_ASSETS = "read:assets"\n    WRITE_ASSETS = "write:assets"\n    EXECUTE_RUNS = "execute:runs"\n    MANAGE_SCHEDULES = "manage:schedules"\n    ADMIN = "admin"\n\nclass Role(Enum):\n    """\uc5ed\ud560 \uc815\uc758"""\n    VIEWER = "viewer"\n    OPERATOR = "operator"\n    DEVELOPER = "developer"\n    ADMIN = "admin"\n\nROLE_PERMISSIONS: dict[Role, Set[Permission]] = {\n    Role.VIEWER: {\n        Permission.READ_ASSETS,\n    },\n    Role.OPERATOR: {\n        Permission.READ_ASSETS,\n        Permission.EXECUTE_RUNS,\n    },\n    Role.DEVELOPER: {\n        Permission.READ_ASSETS,\n        Permission.WRITE_ASSETS,\n        Permission.EXECUTE_RUNS,\n        Permission.MANAGE_SCHEDULES,\n    },\n    Role.ADMIN: {\n        Permission.READ_ASSETS,\n        Permission.WRITE_ASSETS,\n        Permission.EXECUTE_RUNS,\n        Permission.MANAGE_SCHEDULES,\n        Permission.ADMIN,\n    },\n}\n\ndef check_permission(role: Role, permission: Permission) -> bool:\n    """\uad8c\ud55c \ud655\uc778"""\n    return permission in ROLE_PERMISSIONS.get(role, set())\n'})}),"\n",(0,r.jsx)(e.h3,{id:"864-rate-limiting",children:"8.6.4 Rate Limiting"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# middleware/rate_limit.py\n"""\nRate Limiting \ubbf8\ub4e4\uc6e8\uc5b4\n"""\nfrom dagster import ConfigurableResource, op, OpExecutionContext\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\nfrom typing import Dict\nimport threading\n\nclass RateLimiter(ConfigurableResource):\n    """Rate Limiter \ub9ac\uc18c\uc2a4"""\n    max_requests: int = 100\n    time_window: int = 60  # seconds\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._requests: Dict[str, list] = defaultdict(list)\n        self._lock = threading.Lock()\n\n    def is_allowed(self, client_id: str) -> bool:\n        """\uc694\uccad \ud5c8\uc6a9 \uc5ec\ubd80 \ud655\uc778"""\n        with self._lock:\n            now = datetime.now()\n            cutoff = now - timedelta(seconds=self.time_window)\n\n            # \uc624\ub798\ub41c \uc694\uccad \uc81c\uac70\n            self._requests[client_id] = [\n                req_time for req_time in self._requests[client_id]\n                if req_time > cutoff\n            ]\n\n            # Rate limit \uccb4\ud06c\n            if len(self._requests[client_id]) >= self.max_requests:\n                return False\n\n            # \uc0c8 \uc694\uccad \uae30\ub85d\n            self._requests[client_id].append(now)\n            return True\n\n@op\ndef rate_limited_api_call(\n    context: OpExecutionContext,\n    rate_limiter: RateLimiter,\n    client_id: str\n):\n    """Rate limiting\uc774 \uc801\uc6a9\ub41c API \ud638\ucd9c"""\n    if not rate_limiter.is_allowed(client_id):\n        raise Exception(f"Rate limit exceeded for client {client_id}")\n\n    context.log.info(f"API call allowed for {client_id}")\n    # API \ud638\ucd9c \ub85c\uc9c1...\n'})}),"\n",(0,r.jsx)(e.h2,{id:"87-\uc2e4\uc2b5-\ud504\ub85c\uc81d\ud2b8",children:"8.7 \uc2e4\uc2b5 \ud504\ub85c\uc81d\ud2b8"}),"\n",(0,r.jsx)(e.h3,{id:"871-\ud504\ub85c\ub355\uc158-\ubc30\ud3ec-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"8.7.1 \ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# deployment/checklist.py\n"""\n\ud504\ub85c\ub355\uc158 \ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8\n"""\nfrom dataclasses import dataclass\nfrom typing import List, Tuple\nfrom enum import Enum\n\nclass CheckStatus(Enum):\n    """\uccb4\ud06c \uc0c1\ud0dc"""\n    PASS = "\u2705 PASS"\n    FAIL = "\u274c FAIL"\n    WARNING = "\u26a0\ufe0f WARNING"\n    SKIP = "\u23ed\ufe0f SKIP"\n\n@dataclass\nclass CheckResult:\n    """\uccb4\ud06c \uacb0\uacfc"""\n    name: str\n    status: CheckStatus\n    message: str\n\nclass DeploymentChecker:\n    """\ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8"""\n\n    def __init__(self):\n        self.results: List[CheckResult] = []\n\n    def check_environment_variables(self) -> CheckResult:\n        """\ud658\uacbd \ubcc0\uc218 \ud655\uc778"""\n        import os\n        required_vars = [\n            "DAGSTER_POSTGRES_HOST",\n            "DAGSTER_POSTGRES_DB",\n            "DAGSTER_POSTGRES_USER",\n            "DAGSTER_POSTGRES_PASSWORD",\n        ]\n\n        missing = [var for var in required_vars if not os.getenv(var)]\n\n        if missing:\n            return CheckResult(\n                name="Environment Variables",\n                status=CheckStatus.FAIL,\n                message=f"Missing variables: {\', \'.join(missing)}"\n            )\n\n        return CheckResult(\n            name="Environment Variables",\n            status=CheckStatus.PASS,\n            message="All required environment variables are set"\n        )\n\n    def check_database_connection(self) -> CheckResult:\n        """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud655\uc778"""\n        try:\n            import psycopg2\n            import os\n\n            conn = psycopg2.connect(\n                host=os.getenv("DAGSTER_POSTGRES_HOST"),\n                database=os.getenv("DAGSTER_POSTGRES_DB"),\n                user=os.getenv("DAGSTER_POSTGRES_USER"),\n                password=os.getenv("DAGSTER_POSTGRES_PASSWORD"),\n                connect_timeout=5\n            )\n            conn.close()\n\n            return CheckResult(\n                name="Database Connection",\n                status=CheckStatus.PASS,\n                message="Successfully connected to PostgreSQL"\n            )\n\n        except Exception as e:\n            return CheckResult(\n                name="Database Connection",\n                status=CheckStatus.FAIL,\n                message=f"Failed to connect: {str(e)}"\n            )\n\n    def check_storage_backend(self) -> CheckResult:\n        """\uc2a4\ud1a0\ub9ac\uc9c0 \ubc31\uc5d4\ub4dc \ud655\uc778"""\n        try:\n            import boto3\n            import os\n\n            s3 = boto3.client(\'s3\')\n            bucket = os.getenv("S3_BUCKET")\n\n            if not bucket:\n                return CheckResult(\n                    name="Storage Backend",\n                    status=CheckStatus.WARNING,\n                    message="S3_BUCKET not configured"\n                )\n\n            # \ubc84\ud0b7 \uc811\uadfc \ud14c\uc2a4\ud2b8\n            s3.head_bucket(Bucket=bucket)\n\n            return CheckResult(\n                name="Storage Backend",\n                status=CheckStatus.PASS,\n                message=f"S3 bucket \'{bucket}\' is accessible"\n            )\n\n        except Exception as e:\n            return CheckResult(\n                name="Storage Backend",\n                status=CheckStatus.FAIL,\n                message=f"S3 access failed: {str(e)}"\n            )\n\n    def check_dagster_instance(self) -> CheckResult:\n        """Dagster \uc778\uc2a4\ud134\uc2a4 \ud655\uc778"""\n        try:\n            from dagster import DagsterInstance\n\n            instance = DagsterInstance.get()\n\n            return CheckResult(\n                name="Dagster Instance",\n                status=CheckStatus.PASS,\n                message=f"Instance loaded: {instance.root_directory}"\n            )\n\n        except Exception as e:\n            return CheckResult(\n                name="Dagster Instance",\n                status=CheckStatus.FAIL,\n                message=f"Failed to load instance: {str(e)}"\n            )\n\n    def check_resources(self) -> CheckResult:\n        """\ub9ac\uc18c\uc2a4 \uc124\uc815 \ud655\uc778"""\n        # \uba54\ubaa8\ub9ac, CPU \uc81c\ud55c \ub4f1 \ud655\uc778\n        import psutil\n\n        cpu_count = psutil.cpu_count()\n        memory_gb = psutil.virtual_memory().total / (1024**3)\n\n        if cpu_count < 2:\n            status = CheckStatus.WARNING\n            message = f"Low CPU count: {cpu_count}"\n        elif memory_gb < 4:\n            status = CheckStatus.WARNING\n            message = f"Low memory: {memory_gb:.1f}GB"\n        else:\n            status = CheckStatus.PASS\n            message = f"CPU: {cpu_count}, Memory: {memory_gb:.1f}GB"\n\n        return CheckResult(\n            name="System Resources",\n            status=status,\n            message=message\n        )\n\n    def run_all_checks(self) -> List[CheckResult]:\n        """\ubaa8\ub4e0 \uccb4\ud06c \uc2e4\ud589"""\n        checks = [\n            self.check_environment_variables,\n            self.check_database_connection,\n            self.check_storage_backend,\n            self.check_dagster_instance,\n            self.check_resources,\n        ]\n\n        self.results = [check() for check in checks]\n        return self.results\n\n    def print_results(self):\n        """\uacb0\uacfc \ucd9c\ub825"""\n        print("\\n" + "="*60)\n        print("\ud83d\ude80 Dagster \ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8 \uacb0\uacfc")\n        print("="*60 + "\\n")\n\n        for result in self.results:\n            print(f"{result.status.value} {result.name}")\n            print(f"   \u2192 {result.message}\\n")\n\n        # \uc694\uc57d\n        pass_count = sum(1 for r in self.results if r.status == CheckStatus.PASS)\n        fail_count = sum(1 for r in self.results if r.status == CheckStatus.FAIL)\n        warning_count = sum(1 for r in self.results if r.status == CheckStatus.WARNING)\n\n        print("="*60)\n        print(f"\ucd1d {len(self.results)}\uac1c \uccb4\ud06c")\n        print(f"\u2705 Pass: {pass_count}")\n        print(f"\u274c Fail: {fail_count}")\n        print(f"\u26a0\ufe0f Warning: {warning_count}")\n        print("="*60)\n\n        return fail_count == 0\n\n# CLI \uc2e4\ud589\nif __name__ == "__main__":\n    checker = DeploymentChecker()\n    checker.run_all_checks()\n    success = checker.print_results()\n\n    if not success:\n        print("\\n\u26a0\ufe0f \ubc30\ud3ec \uc804\uc5d0 \uc2e4\ud328\ud55c \ud56d\ubaa9\uc744 \uc218\uc815\ud558\uc138\uc694!")\n        exit(1)\n    else:\n        print("\\n\u2728 \ubaa8\ub4e0 \uccb4\ud06c\ub97c \ud1b5\uacfc\ud588\uc2b5\ub2c8\ub2e4. \ubc30\ud3ec\ub97c \uc9c4\ud589\ud558\uc138\uc694!")\n        exit(0)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"872-cicd-\ud30c\uc774\ud504\ub77c\uc778",children:"8.7.2 CI/CD \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/deploy.yml\nname: Deploy Dagster\n\non:\n  push:\n    branches:\n      - main\n      - staging\n  pull_request:\n    branches:\n      - main\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}/dagster-pipeline\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install pytest pytest-cov\n\n      - name: Run tests\n        run: |\n          pytest tests/ -v --cov=. --cov-report=xml\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage.xml\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Log in to Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n\n  deploy-staging:\n    needs: build\n    if: github.ref == 'refs/heads/staging'\n    runs-on: ubuntu-latest\n    environment: staging\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Configure kubectl\n        run: |\n          echo \"${{ secrets.KUBECONFIG_STAGING }}\" > kubeconfig\n          export KUBECONFIG=kubeconfig\n\n      - name: Deploy to Staging\n        run: |\n          export IMAGE_TAG=${GITHUB_SHA::7}\n          ./scripts/update-user-code.sh $IMAGE_TAG\n\n  deploy-production:\n    needs: build\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Configure kubectl\n        run: |\n          echo \"${{ secrets.KUBECONFIG_PRODUCTION }}\" > kubeconfig\n          export KUBECONFIG=kubeconfig\n\n      - name: Run deployment checks\n        run: |\n          python deployment/checklist.py\n\n      - name: Deploy to Production\n        run: |\n          export IMAGE_TAG=${GITHUB_SHA::7}\n          ./scripts/update-user-code.sh $IMAGE_TAG\n\n      - name: Smoke tests\n        run: |\n          python scripts/smoke_tests.py\n"})}),"\n",(0,r.jsx)(e.h2,{id:"88-\uc694\uc57d",children:"8.8 \uc694\uc57d"}),"\n",(0,r.jsx)(e.p,{children:"\uc774 \uc7a5\uc5d0\uc11c\ub294 Dagster\uc758 \ud504\ub85c\ub355\uc158 \ubc30\ud3ec \ubc29\ubc95\uc744 \ud559\uc2b5\ud588\uc2b5\ub2c8\ub2e4:"}),"\n",(0,r.jsx)(e.h3,{id:"\ud575\uc2ec-\uac1c\ub150",children:"\ud575\uc2ec \uac1c\ub150"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ubc30\ud3ec \uc544\ud0a4\ud14d\ucc98"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Dagit (Web Server)"}),"\n",(0,r.jsx)(e.li,{children:"Dagster Daemon"}),"\n",(0,r.jsx)(e.li,{children:"User Code Server"}),"\n",(0,r.jsx)(e.li,{children:"Storage (PostgreSQL)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Docker \ubc30\ud3ec"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Docker Compose \uad6c\uc131"}),"\n",(0,r.jsx)(e.li,{children:"\uba40\ud2f0 \ucee8\ud14c\uc774\ub108 \uc124\uc815"}),"\n",(0,r.jsx)(e.li,{children:"Volume \ubc0f Network \uad00\ub9ac"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Kubernetes \ubc30\ud3ec"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Helm Chart \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.li,{children:"ConfigMap, Secret \uad00\ub9ac"}),"\n",(0,r.jsx)(e.li,{children:"\uc2a4\ucf00\uc77c\ub9c1 \ubc0f \uace0\uac00\uc6a9\uc131"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ud504\ub85c\ub355\uc158 \uc124\uc815"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Run Coordinator (\ub3d9\uc2dc\uc131 \uc81c\uc5b4)"}),"\n",(0,r.jsx)(e.li,{children:"Run Launcher (K8s, Docker)"}),"\n",(0,r.jsx)(e.li,{children:"Storage \ubc31\uc5d4\ub4dc (PostgreSQL, S3)"}),"\n",(0,r.jsx)(e.li,{children:"\ubcf4\uc548 \ubc0f \uc778\uc99d"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud658\uacbd \ubd84\ub9ac"}),": \uac1c\ubc1c/\uc2a4\ud14c\uc774\uc9d5/\ud504\ub85c\ub355\uc158 \ud658\uacbd \uba85\ud655\ud788 \uad6c\ubd84"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Secret \uad00\ub9ac"}),": \ubbfc\uac10\ud55c \uc815\ubcf4\ub294 \ud658\uacbd \ubcc0\uc218\ub098 Secret\uc73c\ub85c \uad00\ub9ac"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ubaa8\ub2c8\ud130\ub9c1"}),": \uba54\ud2b8\ub9ad \uc218\uc9d1 \ubc0f \uc54c\ub9bc \uc124\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ubc31\uc5c5"}),": \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc815\uae30 \ubc31\uc5c5"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"CI/CD"}),": \uc790\ub3d9\ud654\ub41c \ubc30\ud3ec \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsx)(e.p,{children:"\ubc30\ud3ec \ubc29\ubc95\uc744 \uc775\ud614\uc73c\ub2c8, \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 Dagster \ud30c\uc774\ud504\ub77c\uc778\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uace0 \uc6b4\uc601\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4."})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>i});var t=s(6540);const r={},a=t.createContext(r);function o(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);