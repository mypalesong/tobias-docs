"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[4121],{3540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"prometheus/metrics","title":"2. \uba54\ud2b8\ub9ad\uacfc Python \ud074\ub77c\uc774\uc5b8\ud2b8","description":"Prometheus\uc758 \ud575\uc2ec\uc740 \uba54\ud2b8\ub9ad\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Prometheus\uc758 4\uac00\uc9c0 \uba54\ud2b8\ub9ad \ud0c0\uc785\uacfc Python\uc5d0\uc11c prometheus_client\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/prometheus/metrics.md","sourceDirName":"prometheus","slug":"/prometheus/metrics","permalink":"/docs/prometheus/metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/prometheus/metrics.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"prometheusSidebar","previous":{"title":"1. \uc124\uce58 \ubc0f \uc124\uc815","permalink":"/docs/prometheus/installation"},"next":{"title":"3. PromQL \ucffc\ub9ac","permalink":"/docs/prometheus/promql"}}');var s=t(4848),o=t(8453);const i={sidebar_position:2},a="2. \uba54\ud2b8\ub9ad\uacfc Python \ud074\ub77c\uc774\uc5b8\ud2b8",l={},c=[{value:"2.1 Prometheus \uba54\ud2b8\ub9ad \ud0c0\uc785",id:"21-prometheus-\uba54\ud2b8\ub9ad-\ud0c0\uc785",level:2},{value:"2.1.1 Counter (\uce74\uc6b4\ud130)",id:"211-counter-\uce74\uc6b4\ud130",level:3},{value:"2.1.2 Gauge (\uac8c\uc774\uc9c0)",id:"212-gauge-\uac8c\uc774\uc9c0",level:3},{value:"2.1.3 Histogram (\ud788\uc2a4\ud1a0\uadf8\ub7a8)",id:"213-histogram-\ud788\uc2a4\ud1a0\uadf8\ub7a8",level:3},{value:"2.1.4 Summary (\uc694\uc57d)",id:"214-summary-\uc694\uc57d",level:3},{value:"2.2 prometheus_client \uc124\uce58 \ubc0f \uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"22-prometheus_client-\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:2},{value:"2.2.1 \uc124\uce58",id:"221-\uc124\uce58",level:3},{value:"2.2.2 \uae30\ubcf8 \uba54\ud2b8\ub9ad \ub178\ucd9c",id:"222-\uae30\ubcf8-\uba54\ud2b8\ub9ad-\ub178\ucd9c",level:3},{value:"2.2.3 WSGI/ASGI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc0ac\uc6a9",id:"223-wsgiasgi-\uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c-\uc0ac\uc6a9",level:3},{value:"2.3 \ub808\uc774\ube14 (Labels) \uc0ac\uc6a9\ubc95",id:"23-\ub808\uc774\ube14-labels-\uc0ac\uc6a9\ubc95",level:2},{value:"2.3.1 \ub808\uc774\ube14 \uae30\ubcf8\uac12 \uc124\uc815",id:"231-\ub808\uc774\ube14-\uae30\ubcf8\uac12-\uc124\uc815",level:3},{value:"2.4 \uba54\ud2b8\ub9ad \uba85\uba85 \uaddc\uce59",id:"24-\uba54\ud2b8\ub9ad-\uba85\uba85-\uaddc\uce59",level:2},{value:"2.4.1 \uae30\ubcf8 \uaddc\uce59",id:"241-\uae30\ubcf8-\uaddc\uce59",level:3},{value:"2.4.2 \uba85\uba85 \uc608\uc2dc",id:"242-\uba85\uba85-\uc608\uc2dc",level:3},{value:"2.4.3 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc0ac\uc6a9",id:"243-\ub124\uc784\uc2a4\ud398\uc774\uc2a4-\uc0ac\uc6a9",level:3},{value:"2.5 Flask \ud1b5\ud569",id:"25-flask-\ud1b5\ud569",level:2},{value:"2.5.1 \uae30\ubcf8 \ud1b5\ud569",id:"251-\uae30\ubcf8-\ud1b5\ud569",level:3},{value:"2.5.2 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc0ac\uc6a9\ud55c \uace0\uae09 \ud1b5\ud569",id:"252-\ubbf8\ub4e4\uc6e8\uc5b4\ub97c-\uc0ac\uc6a9\ud55c-\uace0\uae09-\ud1b5\ud569",level:3},{value:"2.5.3 \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ucd94\uac00",id:"253-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ucd94\uac00",level:3},{value:"2.6 FastAPI \ud1b5\ud569",id:"26-fastapi-\ud1b5\ud569",level:2},{value:"2.6.1 \uae30\ubcf8 \ud1b5\ud569",id:"261-\uae30\ubcf8-\ud1b5\ud569",level:3},{value:"2.6.2 prometheus-fastapi-instrumentator \uc0ac\uc6a9",id:"262-prometheus-fastapi-instrumentator-\uc0ac\uc6a9",level:3},{value:"2.6.3 \ucee4\uc2a4\ud140 \uba54\ud2b8\ub9ad \ucd94\uac00",id:"263-\ucee4\uc2a4\ud140-\uba54\ud2b8\ub9ad-\ucd94\uac00",level:3},{value:"2.7 Custom Collector",id:"27-custom-collector",level:2},{value:"2.7.1 \uae30\ubcf8 Custom Collector",id:"271-\uae30\ubcf8-custom-collector",level:3},{value:"2.7.2 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uba54\ud2b8\ub9ad \uceec\ub809\ud130",id:"272-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uba54\ud2b8\ub9ad-\uceec\ub809\ud130",level:3},{value:"2.7.3 \uc678\ubd80 API \uba54\ud2b8\ub9ad \uceec\ub809\ud130",id:"273-\uc678\ubd80-api-\uba54\ud2b8\ub9ad-\uceec\ub809\ud130",level:3},{value:"2.8 Multiprocess Mode (Gunicorn)",id:"28-multiprocess-mode-gunicorn",level:2},{value:"2.8.1 Multiprocess \ubaa8\ub4dc \uc124\uc815",id:"281-multiprocess-\ubaa8\ub4dc-\uc124\uc815",level:3},{value:"2.8.2 Gunicorn \uc124\uc815",id:"282-gunicorn-\uc124\uc815",level:3},{value:"2.8.3 \uc644\uc804\ud55c \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \uc608\uc81c",id:"283-\uc644\uc804\ud55c-\uba40\ud2f0\ud504\ub85c\uc138\uc2a4-\uc608\uc81c",level:3},{value:"2.9 \uba54\ud2b8\ub9ad \uc124\uacc4 \ud328\ud134",id:"29-\uba54\ud2b8\ub9ad-\uc124\uacc4-\ud328\ud134",level:2},{value:"2.9.1 RED \uba54\uc11c\ub4dc (Request, Error, Duration)",id:"291-red-\uba54\uc11c\ub4dc-request-error-duration",level:3},{value:"2.9.2 USE \uba54\uc11c\ub4dc (Utilization, Saturation, Errors)",id:"292-use-\uba54\uc11c\ub4dc-utilization-saturation-errors",level:3},{value:"2.9.3 \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ud328\ud134",id:"293-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ud328\ud134",level:3},{value:"2.9.4 SLI/SLO \ucd94\uc801 \ud328\ud134",id:"294-slislo-\ucd94\uc801-\ud328\ud134",level:3},{value:"2.10 \uc2e4\uc804 \uc608\uc81c",id:"210-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"2.10.1 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158",id:"2101-\uc6f9-\uc560\ud50c\ub9ac\ucf00\uc774\uc158",level:3},{value:"2.10.2 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc6cc\ucee4",id:"2102-\ubc31\uadf8\ub77c\uc6b4\ub4dc-\uc6cc\ucee4",level:3},{value:"2.10.3 \ubc30\uce58 \uc791\uc5c5 (Pushgateway \uc0ac\uc6a9)",id:"2103-\ubc30\uce58-\uc791\uc5c5-pushgateway-\uc0ac\uc6a9",level:3},{value:"2.11 \uc5f0\uc2b5 \ubb38\uc81c",id:"211-\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\uc5f0\uc2b5 1: \uae30\ubcf8 \uba54\ud2b8\ub9ad \uad6c\ud604",id:"\uc5f0\uc2b5-1-\uae30\ubcf8-\uba54\ud2b8\ub9ad-\uad6c\ud604",level:3},{value:"\uc5f0\uc2b5 2: Custom Collector \uad6c\ud604",id:"\uc5f0\uc2b5-2-custom-collector-\uad6c\ud604",level:3},{value:"\uc5f0\uc2b5 3: \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \uc124\uacc4",id:"\uc5f0\uc2b5-3-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\uc124\uacc4",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function _(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"2-\uba54\ud2b8\ub9ad\uacfc-python-\ud074\ub77c\uc774\uc5b8\ud2b8",children:"2. \uba54\ud2b8\ub9ad\uacfc Python \ud074\ub77c\uc774\uc5b8\ud2b8"})}),"\n",(0,s.jsx)(n.p,{children:"Prometheus\uc758 \ud575\uc2ec\uc740 \uba54\ud2b8\ub9ad\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 Prometheus\uc758 4\uac00\uc9c0 \uba54\ud2b8\ub9ad \ud0c0\uc785\uacfc Python\uc5d0\uc11c prometheus_client\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h2,{id:"21-prometheus-\uba54\ud2b8\ub9ad-\ud0c0\uc785",children:"2.1 Prometheus \uba54\ud2b8\ub9ad \ud0c0\uc785"}),"\n",(0,s.jsx)(n.p,{children:"Prometheus\ub294 4\uac00\uc9c0 \ud575\uc2ec \uba54\ud2b8\ub9ad \ud0c0\uc785\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"211-counter-\uce74\uc6b4\ud130",children:"2.1.1 Counter (\uce74\uc6b4\ud130)"}),"\n",(0,s.jsx)(n.p,{children:"Counter\ub294 \uc99d\uac00\ub9cc \uac00\ub2a5\ud55c \ub204\uc801 \uba54\ud2b8\ub9ad\uc785\ub2c8\ub2e4. \uc7ac\uc2dc\uc791 \uc2dc\uc5d0\ub9cc 0\uc73c\ub85c \ub9ac\uc14b\ub429\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc0ac\ub840:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"HTTP \uc694\uccad \uc218"}),"\n",(0,s.jsx)(n.li,{children:"\ucc98\ub9ac\ub41c \uc791\uc5c5 \uc218"}),"\n",(0,s.jsx)(n.li,{children:"\ubc1c\uc0dd\ud55c \uc5d0\ub7ec \uc218"}),"\n",(0,s.jsx)(n.li,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \uc218"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter\n\n# Counter \uc815\uc758\nhttp_requests_total = Counter(\n    'http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status']\n)\n\n# Counter \uc99d\uac00\nhttp_requests_total.labels(method='GET', endpoint='/api/users', status='200').inc()\nhttp_requests_total.labels(method='POST', endpoint='/api/users', status='201').inc(1)\n\n# \ud2b9\uc815 \uac12\ub9cc\ud07c \uc99d\uac00\nbytes_sent = Counter('bytes_sent_total', 'Total bytes sent')\nbytes_sent.inc(1024)  # 1024 \ubc14\uc774\ud2b8 \uc99d\uac00\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Counter \uc0ac\uc6a9 \uc8fc\uc758\uc0ac\ud56d",type:"warning",children:(0,s.jsx)(n.p,{children:"Counter\ub294 \uc808\ub300 \uac10\uc18c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uac10\uc18c\ud560 \uc218 \uc788\ub294 \uac12(\uc608: \ud604\uc7ac \ud65c\uc131 \uc5f0\uacb0 \uc218)\uc740 Gauge\ub97c \uc0ac\uc6a9\ud558\uc138\uc694."})}),"\n",(0,s.jsx)(n.h3,{id:"212-gauge-\uac8c\uc774\uc9c0",children:"2.1.2 Gauge (\uac8c\uc774\uc9c0)"}),"\n",(0,s.jsx)(n.p,{children:"Gauge\ub294 \uc99d\uac00\uc640 \uac10\uc18c\uac00 \ubaa8\ub450 \uac00\ub2a5\ud55c \uba54\ud2b8\ub9ad\uc785\ub2c8\ub2e4. \ud604\uc7ac \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc0ac\ub840:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\ud604\uc7ac \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9"}),"\n",(0,s.jsx)(n.li,{children:"\ud65c\uc131 \uc5f0\uacb0 \uc218"}),"\n",(0,s.jsx)(n.li,{children:"\ud050\uc758 \ud604\uc7ac \ud06c\uae30"}),"\n",(0,s.jsx)(n.li,{children:"\uc628\ub3c4, CPU \uc0ac\uc6a9\ub960"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Gauge\n\n# Gauge \uc815\uc758\nactive_users = Gauge('active_users', 'Number of active users')\nmemory_usage = Gauge('memory_usage_bytes', 'Memory usage in bytes')\n\n# Gauge \uc870\uc791\nactive_users.set(42)      # \ud2b9\uc815 \uac12\uc73c\ub85c \uc124\uc815\nactive_users.inc()        # 1 \uc99d\uac00\nactive_users.inc(5)       # 5 \uc99d\uac00\nactive_users.dec()        # 1 \uac10\uc18c\nactive_users.dec(3)       # 3 \uac10\uc18c\n\n# \ud604\uc7ac \uc2dc\uac04 \ucd94\uc801\nlast_success = Gauge('job_last_success_timestamp', 'Last successful job completion')\nlast_success.set_to_current_time()\n\n# \ud568\uc218 \uc2e4\ud589 \uc2dc\uac04 \ucd94\uc801\nrequest_duration = Gauge('request_duration_seconds', 'Request duration')\n\n@request_duration.time()\ndef process_request():\n    # \ucc98\ub9ac \ub85c\uc9c1\n    pass\n\n# \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9\nwith request_duration.time():\n    # \ucc98\ub9ac \ub85c\uc9c1\n    pass\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Gauge\uc758 \uc720\uc6a9\ud55c \uba54\uc11c\ub4dc",type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"set(value)"}),": \uac12 \uc124\uc815"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inc(amount=1)"}),": \uc99d\uac00"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dec(amount=1)"}),": \uac10\uc18c"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"set_to_current_time()"}),": \ud604\uc7ac Unix \ud0c0\uc784\uc2a4\ud0ec\ud504\ub85c \uc124\uc815"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"track_inprogress()"}),": \uc9c4\ud589 \uc911\uc778 \uc791\uc5c5 \uc218 \ucd94\uc801"]}),"\n"]})}),"\n",(0,s.jsx)(n.h3,{id:"213-histogram-\ud788\uc2a4\ud1a0\uadf8\ub7a8",children:"2.1.3 Histogram (\ud788\uc2a4\ud1a0\uadf8\ub7a8)"}),"\n",(0,s.jsx)(n.p,{children:"Histogram\uc740 \uad00\uce21\uac12\uc744 \ubc84\ud0b7\uc5d0 \ubd84\ub958\ud558\uace0, \ud569\uacc4\uc640 \uac1c\uc218\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc8fc\ub85c \uc694\uccad \uc9c0\uc18d \uc2dc\uac04\uc774\ub098 \uc751\ub2f5 \ud06c\uae30\ub97c \uce21\uc815\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc0ac\ub840:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"API \uc751\ub2f5 \uc2dc\uac04"}),"\n",(0,s.jsx)(n.li,{children:"\uc694\uccad \ud06c\uae30"}),"\n",(0,s.jsx)(n.li,{children:"\ucffc\ub9ac \uc2e4\ud589 \uc2dc\uac04"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Histogram\n\n# Histogram \uc815\uc758 (\uae30\ubcf8 \ubc84\ud0b7 \uc0ac\uc6a9)\nrequest_duration = Histogram(\n    'http_request_duration_seconds',\n    'HTTP request duration in seconds'\n)\n\n# \ucee4\uc2a4\ud140 \ubc84\ud0b7 \uc0ac\uc6a9\nrequest_size = Histogram(\n    'http_request_size_bytes',\n    'HTTP request size in bytes',\n    buckets=[100, 500, 1000, 5000, 10000, 50000, 100000]\n)\n\n# \ub808\uc774\ube14\uacfc \ud568\uaed8 \uc0ac\uc6a9\napi_latency = Histogram(\n    'api_latency_seconds',\n    'API endpoint latency',\n    ['method', 'endpoint'],\n    buckets=[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0, 5.0]\n)\n\n# \uac12 \uad00\uce21\nrequest_duration.observe(0.25)  # 0.25\ucd08 \uae30\ub85d\nrequest_size.observe(2048)      # 2048 \ubc14\uc774\ud2b8 \uae30\ub85d\n\n# \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\n@request_duration.time()\ndef handle_request():\n    # \uc694\uccad \ucc98\ub9ac\n    pass\n\n# \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9\nwith api_latency.labels(method='GET', endpoint='/users').time():\n    # API \ucc98\ub9ac\n    pass\n\n# \uc218\ub3d9 \ud0c0\uc774\ubc0d\nimport time\nstart = time.time()\n# \uc791\uc5c5 \uc218\ud589\nduration = time.time() - start\nrequest_duration.observe(duration)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Histogram\uc774 \uc0dd\uc131\ud558\ub294 \uba54\ud2b8\ub9ad:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# HELP http_request_duration_seconds HTTP request duration in seconds\n# TYPE http_request_duration_seconds histogram\nhttp_request_duration_seconds_bucket{le="0.005"} 24054\nhttp_request_duration_seconds_bucket{le="0.01"} 33444\nhttp_request_duration_seconds_bucket{le="0.025"} 100392\nhttp_request_duration_seconds_bucket{le="0.05"} 129389\nhttp_request_duration_seconds_bucket{le="0.1"} 133988\nhttp_request_duration_seconds_bucket{le="+Inf"} 144320\nhttp_request_duration_seconds_sum 53423\nhttp_request_duration_seconds_count 144320\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Histogram vs Summary",type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Histogram"}),": \uc11c\ubc84 \uce21\uc5d0\uc11c \ubc31\ubd84\uc704\uc218 \uacc4\uc0b0 \uac00\ub2a5, \uc9d1\uacc4 \uac00\ub2a5"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Summary"}),": \ud074\ub77c\uc774\uc5b8\ud2b8 \uce21\uc5d0\uc11c \ubc31\ubd84\uc704\uc218 \uacc4\uc0b0, \uc9d1\uacc4 \ubd88\uac00\ub2a5"]}),"\n",(0,s.jsx)(n.li,{children:"\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 Histogram\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4."}),"\n"]})}),"\n",(0,s.jsx)(n.h3,{id:"214-summary-\uc694\uc57d",children:"2.1.4 Summary (\uc694\uc57d)"}),"\n",(0,s.jsx)(n.p,{children:"Summary\ub294 Histogram\uacfc \uc720\uc0ac\ud558\uc9c0\ub9cc \ud074\ub77c\uc774\uc5b8\ud2b8 \uce21\uc5d0\uc11c \ubc31\ubd84\uc704\uc218\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc0ac\ub840:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\uc815\ud655\ud55c \ubc31\ubd84\uc704\uc218\uac00 \ud544\uc694\ud55c \uacbd\uc6b0 (\ud558\uc9c0\ub9cc Histogram \uad8c\uc7a5)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Summary\n\n# Summary \uc815\uc758\nrequest_latency = Summary(\n    'request_latency_seconds',\n    'Request latency in seconds'\n)\n\n# \ubc31\ubd84\uc704\uc218 \uc9c0\uc815\nresponse_time = Summary(\n    'response_time_seconds',\n    'Response time in seconds',\n    ['endpoint']\n)\n\n# \uac12 \uad00\uce21\nrequest_latency.observe(0.25)\nresponse_time.labels(endpoint='/api').observe(0.15)\n\n# \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\n@request_latency.time()\ndef process():\n    pass\n\n# \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\nwith request_latency.time():\n    pass\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Summary\uac00 \uc0dd\uc131\ud558\ub294 \uba54\ud2b8\ub9ad:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# HELP request_latency_seconds Request latency in seconds\n# TYPE request_latency_seconds summary\nrequest_latency_seconds{quantile="0.5"} 0.25\nrequest_latency_seconds{quantile="0.9"} 0.45\nrequest_latency_seconds{quantile="0.99"} 0.95\nrequest_latency_seconds_sum 53423\nrequest_latency_seconds_count 144320\n'})}),"\n",(0,s.jsx)(n.h2,{id:"22-prometheus_client-\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"2.2 prometheus_client \uc124\uce58 \ubc0f \uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,s.jsx)(n.h3,{id:"221-\uc124\uce58",children:"2.2.1 \uc124\uce58"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install prometheus-client\n"})}),"\n",(0,s.jsx)(n.h3,{id:"222-\uae30\ubcf8-\uba54\ud2b8\ub9ad-\ub178\ucd9c",children:"2.2.2 \uae30\ubcf8 \uba54\ud2b8\ub9ad \ub178\ucd9c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import start_http_server, Counter\nimport time\nimport random\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nrequests_total = Counter('requests_total', 'Total requests')\n\n# \uba54\ud2b8\ub9ad \uc11c\ubc84 \uc2dc\uc791 (\ud3ec\ud2b8 8000)\nstart_http_server(8000)\n\n# \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub85c\uc9c1\nwhile True:\n    requests_total.inc()\n    time.sleep(random.random())\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\uba54\ud2b8\ub9ad\uc740 ",(0,s.jsx)(n.code,{children:"http://localhost:8000/metrics"}),"\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]}),"\n",(0,s.jsx)(n.h3,{id:"223-wsgiasgi-\uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c-\uc0ac\uc6a9",children:"2.2.3 WSGI/ASGI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc0ac\uc6a9"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import make_wsgi_app\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nfrom flask import Flask\n\napp = Flask(__name__)\n\n# Flask \uc571\uc5d0 /metrics \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ucd94\uac00\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {\n    '/metrics': make_wsgi_app()\n})\n\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"23-\ub808\uc774\ube14-labels-\uc0ac\uc6a9\ubc95",children:"2.3 \ub808\uc774\ube14 (Labels) \uc0ac\uc6a9\ubc95"}),"\n",(0,s.jsx)(n.p,{children:"\ub808\uc774\ube14\uc744 \uc0ac\uc6a9\ud558\uba74 \uac19\uc740 \uba54\ud2b8\ub9ad\uc744 \uc5ec\ub7ec \ucc28\uc6d0\uc73c\ub85c \ubd84\ub958\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter, Histogram\n\n# \ub808\uc774\ube14\uc774 \uc788\ub294 Counter\nhttp_requests = Counter(\n    'http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status_code']\n)\n\n# \ub808\uc774\ube14 \uac12 \uc9c0\uc815\ud558\uc5ec \uc99d\uac00\nhttp_requests.labels(method='GET', endpoint='/api/users', status_code='200').inc()\nhttp_requests.labels(method='POST', endpoint='/api/users', status_code='201').inc()\nhttp_requests.labels(method='GET', endpoint='/api/orders', status_code='200').inc()\n\n# \ub808\uc774\ube14\uc774 \uc788\ub294 Histogram\nrequest_duration = Histogram(\n    'request_duration_seconds',\n    'Request duration',\n    ['method', 'endpoint']\n)\n\nrequest_duration.labels(method='GET', endpoint='/api/users').observe(0.25)\nrequest_duration.labels(method='POST', endpoint='/api/users').observe(0.35)\n\n# \ub808\uc774\ube14\uc744 \ubcc0\uc218\ub85c \uc800\uc7a5\ud558\uc5ec \uc7ac\uc0ac\uc6a9\nget_users_counter = http_requests.labels(method='GET', endpoint='/api/users', status_code='200')\nget_users_counter.inc()\nget_users_counter.inc()\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"\ub808\uc774\ube14 \uc0ac\uc6a9 \uc8fc\uc758\uc0ac\ud56d",type:"warning",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\ub808\uc774\ube14 \uac12\uc758 \uce74\ub514\ub110\ub9ac\ud2f0(\uace0\uc720 \uac12\uc758 \uac1c\uc218)\uac00 \ub108\ubb34 \ub192\uc73c\uba74 \uc131\ub2a5 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4"}),"\n",(0,s.jsx)(n.li,{children:"\uc0ac\uc6a9\uc790 ID, \uc774\uba54\uc77c, IP \uc8fc\uc18c \ub4f1\uc744 \ub808\uc774\ube14\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\uc138\uc694"}),"\n",(0,s.jsx)(n.li,{children:"\ub808\uc774\ube14 \uac12\uc740 \uc81c\ud55c\ub41c \uc9d1\ud569\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4 (\uc608: HTTP \uba54\uc11c\ub4dc, \uc0c1\ud0dc \ucf54\ub4dc)"}),"\n"]})}),"\n",(0,s.jsx)(n.h3,{id:"231-\ub808\uc774\ube14-\uae30\ubcf8\uac12-\uc124\uc815",children:"2.3.1 \ub808\uc774\ube14 \uae30\ubcf8\uac12 \uc124\uc815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter\n\n# \ud2b9\uc815 \ub808\uc774\ube14\uc5d0 \uae30\ubcf8\uac12 \uc81c\uacf5\nerrors = Counter(\n    'errors_total',\n    'Total errors',\n    ['service', 'severity']\n)\n\n# \uae30\ubcf8\uac12 \uc0ac\uc6a9\nerrors.labels(service='api', severity='warning').inc()\n\n# \ubd80\ubd84\uc801\uc73c\ub85c\ub9cc \uc9c0\uc815\nclass ErrorTracker:\n    def __init__(self, service_name):\n        self.service_name = service_name\n\n    def track_error(self, severity):\n        errors.labels(service=self.service_name, severity=severity).inc()\n\ntracker = ErrorTracker('payment-service')\ntracker.track_error('error')\ntracker.track_error('critical')\n"})}),"\n",(0,s.jsx)(n.h2,{id:"24-\uba54\ud2b8\ub9ad-\uba85\uba85-\uaddc\uce59",children:"2.4 \uba54\ud2b8\ub9ad \uba85\uba85 \uaddc\uce59"}),"\n",(0,s.jsx)(n.p,{children:"Prometheus \uba54\ud2b8\ub9ad\uc740 \uc77c\uad00\ub41c \uba85\uba85 \uaddc\uce59\uc744 \ub530\ub77c\uc57c \ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"241-\uae30\ubcf8-\uaddc\uce59",children:"2.4.1 \uae30\ubcf8 \uaddc\uce59"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\uc18c\ubb38\uc790\uc640 \uc5b8\ub354\uc2a4\ucf54\uc5b4 \uc0ac\uc6a9"}),": ",(0,s.jsx)(n.code,{children:"http_requests_total"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ub2e8\uc704 \uc811\ubbf8\uc0ac \uc0ac\uc6a9"}),": ",(0,s.jsx)(n.code,{children:"_seconds"}),", ",(0,s.jsx)(n.code,{children:"_bytes"}),", ",(0,s.jsx)(n.code,{children:"_total"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\uba54\ud2b8\ub9ad \ud0c0\uc785 \uc811\ubbf8\uc0ac"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Counter: ",(0,s.jsx)(n.code,{children:"_total"})," (\uc608: ",(0,s.jsx)(n.code,{children:"requests_total"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Gauge: \uc811\ubbf8\uc0ac \uc5c6\uc74c (\uc608: ",(0,s.jsx)(n.code,{children:"memory_usage_bytes"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Histogram/Summary: ",(0,s.jsx)(n.code,{children:"_seconds"}),", ",(0,s.jsx)(n.code,{children:"_bytes"})," \ub4f1"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"242-\uba85\uba85-\uc608\uc2dc",children:"2.4.2 \uba85\uba85 \uc608\uc2dc"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter, Gauge, Histogram\n\n# \uc88b\uc740 \uc608\nhttp_requests_total = Counter('http_requests_total', '...')\ndatabase_queries_total = Counter('database_queries_total', '...')\nmemory_usage_bytes = Gauge('memory_usage_bytes', '...')\ncpu_usage_ratio = Gauge('cpu_usage_ratio', '...')  # 0-1 \ubc94\uc704\nrequest_duration_seconds = Histogram('request_duration_seconds', '...')\nresponse_size_bytes = Histogram('response_size_bytes', '...')\n\n# \ub098\uc05c \uc608\nrequests = Counter('requests', '...')  # _total \uc5c6\uc74c\nRequestsTotal = Counter('RequestsTotal', '...')  # \ub300\ubb38\uc790 \uc0ac\uc6a9\nhttp_requests_count = Counter('http_requests_count', '...')  # _count \ub300\uc2e0 _total\n"})}),"\n",(0,s.jsx)(n.h3,{id:"243-\ub124\uc784\uc2a4\ud398\uc774\uc2a4-\uc0ac\uc6a9",children:"2.4.3 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc0ac\uc6a9"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# \uc560\ud50c\ub9ac\ucf00\uc774\uc158\ubcc4 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\nmyapp_http_requests_total = Counter('myapp_http_requests_total', '...')\nmyapp_database_errors_total = Counter('myapp_database_errors_total', '...')\n\n# \uc11c\ube44\uc2a4\ubcc4 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\npayment_api_requests_total = Counter('payment_api_requests_total', '...')\nuser_service_cache_hits_total = Counter('user_service_cache_hits_total', '...')\n"})}),"\n",(0,s.jsx)(n.h2,{id:"25-flask-\ud1b5\ud569",children:"2.5 Flask \ud1b5\ud569"}),"\n",(0,s.jsx)(n.p,{children:"Flask \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 Prometheus \uba54\ud2b8\ub9ad\uc744 \ud1b5\ud569\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"251-\uae30\ubcf8-\ud1b5\ud569",children:"2.5.1 \uae30\ubcf8 \ud1b5\ud569"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request\nfrom prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST\nimport time\n\napp = Flask(__name__)\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nREQUEST_COUNT = Counter(\n    'flask_http_requests_total',\n    'Total Flask HTTP requests',\n    ['method', 'endpoint', 'status']\n)\n\nREQUEST_DURATION = Histogram(\n    'flask_http_request_duration_seconds',\n    'Flask HTTP request duration',\n    ['method', 'endpoint']\n)\n\n# Before/After request \ud578\ub4e4\ub7ec\n@app.before_request\ndef before_request():\n    request._prometheus_start_time = time.time()\n\n@app.after_request\ndef after_request(response):\n    if hasattr(request, '_prometheus_start_time'):\n        duration = time.time() - request._prometheus_start_time\n        REQUEST_DURATION.labels(\n            method=request.method,\n            endpoint=request.endpoint or 'unknown'\n        ).observe(duration)\n\n        REQUEST_COUNT.labels(\n            method=request.method,\n            endpoint=request.endpoint or 'unknown',\n            status=response.status_code\n        ).inc()\n\n    return response\n\n# \uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.route('/metrics')\ndef metrics():\n    return generate_latest(), 200, {'Content-Type': CONTENT_TYPE_LATEST}\n\n# \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n@app.route('/')\ndef home():\n    return 'Hello, World!'\n\n@app.route('/api/users')\ndef get_users():\n    # \uc0ac\uc6a9\uc790 \ubaa9\ub85d \ubc18\ud658\n    return {'users': []}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"252-\ubbf8\ub4e4\uc6e8\uc5b4\ub97c-\uc0ac\uc6a9\ud55c-\uace0\uae09-\ud1b5\ud569",children:"2.5.2 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc0ac\uc6a9\ud55c \uace0\uae09 \ud1b5\ud569"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request, g\nfrom prometheus_client import Counter, Histogram, Gauge, make_wsgi_app\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nimport time\n\napp = Flask(__name__)\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nREQUEST_COUNT = Counter(\n    'flask_requests_total',\n    'Total requests',\n    ['method', 'endpoint', 'status']\n)\n\nREQUEST_DURATION = Histogram(\n    'flask_request_duration_seconds',\n    'Request duration',\n    ['method', 'endpoint'],\n    buckets=[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0, 5.0]\n)\n\nREQUEST_IN_PROGRESS = Gauge(\n    'flask_requests_in_progress',\n    'Requests in progress',\n    ['method', 'endpoint']\n)\n\nEXCEPTION_COUNT = Counter(\n    'flask_exceptions_total',\n    'Total exceptions',\n    ['method', 'endpoint', 'exception_type']\n)\n\n@app.before_request\ndef before_request():\n    g.start_time = time.time()\n    endpoint = request.endpoint or 'unknown'\n    REQUEST_IN_PROGRESS.labels(method=request.method, endpoint=endpoint).inc()\n\n@app.after_request\ndef after_request(response):\n    endpoint = request.endpoint or 'unknown'\n    REQUEST_IN_PROGRESS.labels(method=request.method, endpoint=endpoint).dec()\n\n    if hasattr(g, 'start_time'):\n        duration = time.time() - g.start_time\n        REQUEST_DURATION.labels(method=request.method, endpoint=endpoint).observe(duration)\n\n    REQUEST_COUNT.labels(\n        method=request.method,\n        endpoint=endpoint,\n        status=response.status_code\n    ).inc()\n\n    return response\n\n@app.errorhandler(Exception)\ndef handle_exception(e):\n    endpoint = request.endpoint or 'unknown'\n    REQUEST_IN_PROGRESS.labels(method=request.method, endpoint=endpoint).dec()\n\n    EXCEPTION_COUNT.labels(\n        method=request.method,\n        endpoint=endpoint,\n        exception_type=type(e).__name__\n    ).inc()\n\n    raise e\n\n# Prometheus \uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ucd94\uac00\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {\n    '/metrics': make_wsgi_app()\n})\n\n@app.route('/')\ndef home():\n    return 'Hello!'\n\n@app.route('/api/data')\ndef get_data():\n    time.sleep(0.1)  # \ucc98\ub9ac \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n    return {'data': [1, 2, 3]}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"253-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ucd94\uac00",children:"2.5.3 \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ucd94\uac00"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request, jsonify\nfrom prometheus_client import Counter, Histogram, Gauge, make_wsgi_app\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\n\napp = Flask(__name__)\n\n# \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad\nUSER_REGISTRATIONS = Counter('user_registrations_total', 'Total user registrations')\nUSER_LOGINS = Counter('user_logins_total', 'Total user logins', ['status'])\nACTIVE_USERS = Gauge('active_users', 'Currently active users')\nORDER_VALUE = Histogram(\n    'order_value_dollars',\n    'Order value in dollars',\n    buckets=[10, 50, 100, 500, 1000, 5000]\n)\nSHOPPING_CART_SIZE = Histogram(\n    'shopping_cart_items',\n    'Number of items in shopping cart',\n    buckets=[1, 2, 5, 10, 20, 50]\n)\n\n# \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.route('/api/register', methods=['POST'])\ndef register():\n    # \ud68c\uc6d0\uac00\uc785 \ub85c\uc9c1\n    USER_REGISTRATIONS.inc()\n    ACTIVE_USERS.inc()\n    return jsonify({'status': 'success'}), 201\n\n@app.route('/api/login', methods=['POST'])\ndef login():\n    # \ub85c\uadf8\uc778 \ub85c\uc9c1\n    success = True  # \uc2e4\uc81c\ub85c\ub294 \uc778\uc99d \ud655\uc778\n\n    if success:\n        USER_LOGINS.labels(status='success').inc()\n        ACTIVE_USERS.inc()\n        return jsonify({'status': 'success'}), 200\n    else:\n        USER_LOGINS.labels(status='failure').inc()\n        return jsonify({'status': 'failure'}), 401\n\n@app.route('/api/logout', methods=['POST'])\ndef logout():\n    ACTIVE_USERS.dec()\n    return jsonify({'status': 'success'}), 200\n\n@app.route('/api/order', methods=['POST'])\ndef create_order():\n    data = request.get_json()\n    order_value = data.get('value', 0)\n    item_count = data.get('item_count', 0)\n\n    ORDER_VALUE.observe(order_value)\n    SHOPPING_CART_SIZE.observe(item_count)\n\n    return jsonify({'status': 'success'}), 201\n\n# \uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {\n    '/metrics': make_wsgi_app()\n})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"26-fastapi-\ud1b5\ud569",children:"2.6 FastAPI \ud1b5\ud569"}),"\n",(0,s.jsx)(n.p,{children:"FastAPI\uc5d0\uc11c Prometheus \uba54\ud2b8\ub9ad\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"261-\uae30\ubcf8-\ud1b5\ud569",children:"2.6.1 \uae30\ubcf8 \ud1b5\ud569"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from fastapi import FastAPI, Request\nfrom prometheus_client import Counter, Histogram, make_asgi_app\nimport time\n\napp = FastAPI()\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nREQUEST_COUNT = Counter(\n    'fastapi_requests_total',\n    'Total requests',\n    ['method', 'endpoint', 'status']\n)\n\nREQUEST_DURATION = Histogram(\n    'fastapi_request_duration_seconds',\n    'Request duration',\n    ['method', 'endpoint']\n)\n\n# \ubbf8\ub4e4\uc6e8\uc5b4\n@app.middleware(\"http\")\nasync def prometheus_middleware(request: Request, call_next):\n    start_time = time.time()\n\n    response = await call_next(request)\n\n    duration = time.time() - start_time\n    endpoint = request.url.path\n\n    REQUEST_DURATION.labels(method=request.method, endpoint=endpoint).observe(duration)\n    REQUEST_COUNT.labels(\n        method=request.method,\n        endpoint=endpoint,\n        status=response.status_code\n    ).inc()\n\n    return response\n\n# Prometheus \uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8\nmetrics_app = make_asgi_app()\napp.mount(\"/metrics\", metrics_app)\n\n# API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n\n@app.get(\"/api/users\")\nasync def get_users():\n    return {\"users\": []}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"262-prometheus-fastapi-instrumentator-\uc0ac\uc6a9",children:"2.6.2 prometheus-fastapi-instrumentator \uc0ac\uc6a9"}),"\n",(0,s.jsx)(n.p,{children:"\ub354 \uac04\ub2e8\ud55c \ud1b5\ud569\uc744 \uc704\ud574 \uc804\uc6a9 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install prometheus-fastapi-instrumentator\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom prometheus_fastapi_instrumentator import Instrumentator\n\napp = FastAPI()\n\n# Prometheus \uacc4\uce21 \ud65c\uc131\ud654\nInstrumentator().instrument(app).expose(app)\n\n@app.get("/")\nasync def root():\n    return {"message": "Hello World"}\n\n@app.get("/api/users")\nasync def get_users():\n    return {"users": []}\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"263-\ucee4\uc2a4\ud140-\uba54\ud2b8\ub9ad-\ucd94\uac00",children:"2.6.3 \ucee4\uc2a4\ud140 \uba54\ud2b8\ub9ad \ucd94\uac00"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from fastapi import FastAPI, Request, Response\nfrom prometheus_client import Counter, Histogram, Gauge, make_asgi_app\nfrom prometheus_fastapi_instrumentator import Instrumentator, metrics\nimport time\n\napp = FastAPI()\n\n# \ucee4\uc2a4\ud140 \uba54\ud2b8\ub9ad\nDB_QUERIES = Counter('db_queries_total', 'Total database queries', ['query_type'])\nCACHE_HITS = Counter('cache_hits_total', 'Cache hits', ['cache_name'])\nCACHE_MISSES = Counter('cache_misses_total', 'Cache misses', ['cache_name'])\nACTIVE_CONNECTIONS = Gauge('active_db_connections', 'Active database connections')\n\n# \uae30\ubcf8 \uacc4\uce21\ninstrumentator = Instrumentator()\n\n# \ucee4\uc2a4\ud140 \uba54\ud2b8\ub9ad \ucd94\uac00\n@instrumentator.metric()\ndef request_size(metric_namespace: str = \"\", metric_subsystem: str = \"\"):\n    REQUEST_SIZE = Histogram(\n        \"request_size_bytes\",\n        \"Request size in bytes\",\n        [\"method\", \"endpoint\"]\n    )\n\n    def instrumentation(info: metrics.Info) -> None:\n        if info.modified_handler:\n            REQUEST_SIZE.labels(info.method, info.modified_handler).observe(\n                int(info.request.headers.get(\"Content-Length\", 0))\n            )\n\n    return instrumentation\n\ninstrumentator.instrument(app).expose(app)\n\n# \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n@app.get(\"/api/users/{user_id}\")\nasync def get_user(user_id: int):\n    # \uce90\uc2dc \ud655\uc778\n    cache_key = f\"user:{user_id}\"\n    if cache_exists(cache_key):\n        CACHE_HITS.labels(cache_name='user_cache').inc()\n        return get_from_cache(cache_key)\n\n    # \uce90\uc2dc \ubbf8\uc2a4\n    CACHE_MISSES.labels(cache_name='user_cache').inc()\n\n    # DB \ucffc\ub9ac\n    DB_QUERIES.labels(query_type='select').inc()\n    ACTIVE_CONNECTIONS.inc()\n\n    try:\n        user = fetch_user_from_db(user_id)\n        return user\n    finally:\n        ACTIVE_CONNECTIONS.dec()\n\ndef cache_exists(key):\n    # \uce90\uc2dc \ud655\uc778 \ub85c\uc9c1\n    return False\n\ndef get_from_cache(key):\n    # \uce90\uc2dc\uc5d0\uc11c \uac00\uc838\uc624\uae30\n    pass\n\ndef fetch_user_from_db(user_id):\n    # DB\uc5d0\uc11c \uac00\uc838\uc624\uae30\n    return {\"id\": user_id, \"name\": \"John\"}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"27-custom-collector",children:"2.7 Custom Collector"}),"\n",(0,s.jsx)(n.p,{children:"\ubcf5\uc7a1\ud55c \uba54\ud2b8\ub9ad \uc218\uc9d1\uc774 \ud544\uc694\ud55c \uacbd\uc6b0 Custom Collector\ub97c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"271-\uae30\ubcf8-custom-collector",children:"2.7.1 \uae30\ubcf8 Custom Collector"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import CollectorRegistry, Gauge, generate_latest\nfrom prometheus_client.core import GaugeMetricFamily, CounterMetricFamily\nimport psutil\n\nclass SystemMetricsCollector:\n    \"\"\"\uc2dc\uc2a4\ud15c \uba54\ud2b8\ub9ad\uc744 \uc218\uc9d1\ud558\ub294 \ucee4\uc2a4\ud140 \uceec\ub809\ud130\"\"\"\n\n    def collect(self):\n        # CPU \uc0ac\uc6a9\ub960\n        cpu_usage = GaugeMetricFamily(\n            'system_cpu_usage_percent',\n            'CPU usage percentage',\n            labels=['cpu']\n        )\n\n        for i, percentage in enumerate(psutil.cpu_percent(percpu=True)):\n            cpu_usage.add_metric([f'cpu{i}'], percentage)\n\n        yield cpu_usage\n\n        # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub960\n        memory = psutil.virtual_memory()\n        memory_usage = GaugeMetricFamily(\n            'system_memory_usage_bytes',\n            'Memory usage in bytes',\n            labels=['type']\n        )\n\n        memory_usage.add_metric(['total'], memory.total)\n        memory_usage.add_metric(['available'], memory.available)\n        memory_usage.add_metric(['used'], memory.used)\n\n        yield memory_usage\n\n        # \ub514\uc2a4\ud06c \uc0ac\uc6a9\ub960\n        disk = psutil.disk_usage('/')\n        disk_usage = GaugeMetricFamily(\n            'system_disk_usage_bytes',\n            'Disk usage in bytes',\n            labels=['type']\n        )\n\n        disk_usage.add_metric(['total'], disk.total)\n        disk_usage.add_metric(['used'], disk.used)\n        disk_usage.add_metric(['free'], disk.free)\n\n        yield disk_usage\n\n# \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc5d0 \uceec\ub809\ud130 \ub4f1\ub85d\nfrom prometheus_client import REGISTRY\nREGISTRY.register(SystemMetricsCollector())\n\n# \uba54\ud2b8\ub9ad \ud655\uc778\nif __name__ == '__main__':\n    from prometheus_client import start_http_server\n    import time\n\n    start_http_server(8000)\n    print(\"Metrics server running on http://localhost:8000/metrics\")\n\n    while True:\n        time.sleep(1)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"272-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uba54\ud2b8\ub9ad-\uceec\ub809\ud130",children:"2.7.2 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uba54\ud2b8\ub9ad \uceec\ub809\ud130"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client.core import GaugeMetricFamily\nimport psycopg2\n\nclass PostgresMetricsCollector:\n    \"\"\"PostgreSQL \uba54\ud2b8\ub9ad \uceec\ub809\ud130\"\"\"\n\n    def __init__(self, connection_params):\n        self.connection_params = connection_params\n\n    def collect(self):\n        conn = psycopg2.connect(**self.connection_params)\n        cursor = conn.cursor()\n\n        # \ud65c\uc131 \uc5f0\uacb0 \uc218\n        cursor.execute(\"\"\"\n            SELECT count(*) FROM pg_stat_activity\n            WHERE state = 'active'\n        \"\"\")\n        active_connections = cursor.fetchone()[0]\n\n        connections_metric = GaugeMetricFamily(\n            'postgres_active_connections',\n            'Number of active PostgreSQL connections'\n        )\n        connections_metric.add_metric([], active_connections)\n        yield connections_metric\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud06c\uae30\n        cursor.execute(\"\"\"\n            SELECT datname, pg_database_size(datname)\n            FROM pg_database\n            WHERE datistemplate = false\n        \"\"\")\n\n        db_size_metric = GaugeMetricFamily(\n            'postgres_database_size_bytes',\n            'PostgreSQL database size in bytes',\n            labels=['database']\n        )\n\n        for db_name, size in cursor.fetchall():\n            db_size_metric.add_metric([db_name], size)\n\n        yield db_size_metric\n\n        # \ud14c\uc774\ube14\ubcc4 \ud589 \uc218\n        cursor.execute(\"\"\"\n            SELECT schemaname, tablename, n_live_tup\n            FROM pg_stat_user_tables\n        \"\"\")\n\n        table_rows_metric = GaugeMetricFamily(\n            'postgres_table_rows',\n            'Number of rows in PostgreSQL tables',\n            labels=['schema', 'table']\n        )\n\n        for schema, table, rows in cursor.fetchall():\n            table_rows_metric.add_metric([schema, table], rows)\n\n        yield table_rows_metric\n\n        cursor.close()\n        conn.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nif __name__ == '__main__':\n    from prometheus_client import REGISTRY, start_http_server\n    import time\n\n    # \uceec\ub809\ud130 \ub4f1\ub85d\n    db_collector = PostgresMetricsCollector({\n        'host': 'localhost',\n        'database': 'mydb',\n        'user': 'postgres',\n        'password': 'password'\n    })\n    REGISTRY.register(db_collector)\n\n    start_http_server(8000)\n    print(\"Metrics server running on http://localhost:8000/metrics\")\n\n    while True:\n        time.sleep(30)  # 30\ucd08\ub9c8\ub2e4 \uc218\uc9d1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"273-\uc678\ubd80-api-\uba54\ud2b8\ub9ad-\uceec\ub809\ud130",children:"2.7.3 \uc678\ubd80 API \uba54\ud2b8\ub9ad \uceec\ub809\ud130"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client.core import GaugeMetricFamily\nimport requests\n\nclass APIMetricsCollector:\n    \"\"\"\uc678\ubd80 API \uc0c1\ud0dc\ub97c \uc218\uc9d1\ud558\ub294 \uceec\ub809\ud130\"\"\"\n\n    def __init__(self, endpoints):\n        self.endpoints = endpoints\n\n    def collect(self):\n        # API \uc751\ub2f5 \uc2dc\uac04\n        response_time_metric = GaugeMetricFamily(\n            'api_response_time_seconds',\n            'API response time in seconds',\n            labels=['endpoint']\n        )\n\n        # API \uc0c1\ud0dc\n        api_up_metric = GaugeMetricFamily(\n            'api_up',\n            'Whether the API is up (1) or down (0)',\n            labels=['endpoint']\n        )\n\n        for endpoint in self.endpoints:\n            try:\n                response = requests.get(endpoint, timeout=5)\n                response_time = response.elapsed.total_seconds()\n\n                response_time_metric.add_metric([endpoint], response_time)\n                api_up_metric.add_metric([endpoint], 1 if response.status_code == 200 else 0)\n            except Exception:\n                response_time_metric.add_metric([endpoint], 0)\n                api_up_metric.add_metric([endpoint], 0)\n\n        yield response_time_metric\n        yield api_up_metric\n\n# \uc0ac\uc6a9 \uc608\uc81c\nif __name__ == '__main__':\n    from prometheus_client import REGISTRY, start_http_server\n    import time\n\n    api_collector = APIMetricsCollector([\n        'https://api.github.com',\n        'https://api.twitter.com',\n        'https://api.stripe.com'\n    ])\n    REGISTRY.register(api_collector)\n\n    start_http_server(8000)\n\n    while True:\n        time.sleep(60)  # 1\ubd84\ub9c8\ub2e4 \ud655\uc778\n"})}),"\n",(0,s.jsx)(n.h2,{id:"28-multiprocess-mode-gunicorn",children:"2.8 Multiprocess Mode (Gunicorn)"}),"\n",(0,s.jsx)(n.p,{children:"Gunicorn\uacfc \uac19\uc740 \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ud658\uacbd\uc5d0\uc11c\ub294 \ud2b9\ubcc4\ud55c \uc124\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"281-multiprocess-\ubaa8\ub4dc-\uc124\uc815",children:"2.8.1 Multiprocess \ubaa8\ub4dc \uc124\uc815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# app.py\nfrom flask import Flask\nfrom prometheus_client import Counter, Histogram, multiprocess, generate_latest\nfrom prometheus_client import CollectorRegistry, CONTENT_TYPE_LATEST\nimport os\n\napp = Flask(__name__)\n\n# \ud658\uacbd \ubcc0\uc218\ub85c \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ub514\ub809\ud1a0\ub9ac \uc124\uc815\n# \uc2dc\uc791 \uc804\uc5d0 \uc124\uc815: export prometheus_multiproc_dir=/tmp/prometheus_multiproc\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nREQUEST_COUNT = Counter(\n    'flask_requests_total',\n    'Total requests',\n    ['method', 'endpoint', 'status']\n)\n\nREQUEST_DURATION = Histogram(\n    'flask_request_duration_seconds',\n    'Request duration',\n    ['method', 'endpoint']\n)\n\n@app.route('/')\ndef home():\n    REQUEST_COUNT.labels(method='GET', endpoint='/', status='200').inc()\n    return 'Hello World!'\n\n@app.route('/metrics')\ndef metrics():\n    registry = CollectorRegistry()\n    multiprocess.MultiProcessCollector(registry)\n    data = generate_latest(registry)\n    return data, 200, {'Content-Type': CONTENT_TYPE_LATEST}\n\nif __name__ == '__main__':\n    app.run()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"282-gunicorn-\uc124\uc815",children:"2.8.2 Gunicorn \uc124\uc815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# gunicorn_config.py\nfrom prometheus_client import multiprocess, CollectorRegistry\nimport os\nimport shutil\n\n# \uc6cc\ucee4 \uc2dc\uc791 \uc2dc\ndef child_exit(server, worker):\n    multiprocess.mark_process_dead(worker.pid)\n\n# \uc11c\ubc84 \uc2dc\uc791 \uc804\ndef on_starting(server):\n    # \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n    prom_dir = os.environ.get('prometheus_multiproc_dir', '/tmp/prometheus_multiproc')\n    if os.path.exists(prom_dir):\n        shutil.rmtree(prom_dir)\n    os.makedirs(prom_dir)\n\nbind = \"0.0.0.0:8000\"\nworkers = 4\nworker_class = \"sync\"\n"})}),"\n",(0,s.jsx)(n.p,{children:"\uc2e4\ud589:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export prometheus_multiproc_dir=/tmp/prometheus_multiproc\ngunicorn -c gunicorn_config.py app:app\n"})}),"\n",(0,s.jsx)(n.h3,{id:"283-\uc644\uc804\ud55c-\uba40\ud2f0\ud504\ub85c\uc138\uc2a4-\uc608\uc81c",children:"2.8.3 \uc644\uc804\ud55c \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \uc608\uc81c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# app.py\nfrom flask import Flask, request, g\nfrom prometheus_client import Counter, Histogram, Gauge, generate_latest\nfrom prometheus_client import CollectorRegistry, CONTENT_TYPE_LATEST, multiprocess\nimport time\nimport os\n\napp = Flask(__name__)\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nREQUEST_COUNT = Counter(\n    'http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status'],\n    registry=None  # \uae30\ubcf8 \ub808\uc9c0\uc2a4\ud2b8\ub9ac \uc0ac\uc6a9\n)\n\nREQUEST_DURATION = Histogram(\n    'http_request_duration_seconds',\n    'HTTP request duration',\n    ['method', 'endpoint'],\n    registry=None\n)\n\n# Gauge\ub294 \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ubaa8\ub4dc\uc5d0\uc11c \ud2b9\ubcc4 \ucc98\ub9ac \ud544\uc694\nREQUEST_IN_PROGRESS = Gauge(\n    'http_requests_in_progress',\n    'HTTP requests in progress',\n    ['method', 'endpoint'],\n    multiprocess_mode='livesum',  # \ubaa8\ub4e0 \ud504\ub85c\uc138\uc2a4\uc758 \ud569\uacc4\n    registry=None\n)\n\n@app.before_request\ndef before_request():\n    g.start_time = time.time()\n    endpoint = request.endpoint or 'unknown'\n    REQUEST_IN_PROGRESS.labels(method=request.method, endpoint=endpoint).inc()\n\n@app.after_request\ndef after_request(response):\n    endpoint = request.endpoint or 'unknown'\n\n    if hasattr(g, 'start_time'):\n        duration = time.time() - g.start_time\n        REQUEST_DURATION.labels(method=request.method, endpoint=endpoint).observe(duration)\n\n    REQUEST_COUNT.labels(\n        method=request.method,\n        endpoint=endpoint,\n        status=response.status_code\n    ).inc()\n\n    REQUEST_IN_PROGRESS.labels(method=request.method, endpoint=endpoint).dec()\n\n    return response\n\n@app.route('/')\ndef home():\n    return 'Hello World!'\n\n@app.route('/api/data')\ndef get_data():\n    time.sleep(0.1)\n    return {'data': [1, 2, 3]}\n\n@app.route('/metrics')\ndef metrics():\n    registry = CollectorRegistry()\n    multiprocess.MultiProcessCollector(registry)\n    data = generate_latest(registry)\n    return data, 200, {'Content-Type': CONTENT_TYPE_LATEST}\n\nif __name__ == '__main__':\n    app.run()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# gunicorn_config.py\nfrom prometheus_client import multiprocess, CollectorRegistry\nimport os\nimport shutil\n\ndef child_exit(server, worker):\n    """\uc6cc\ucee4 \uc885\ub8cc \uc2dc \uba54\ud2b8\ub9ad \uc815\ub9ac"""\n    multiprocess.mark_process_dead(worker.pid)\n\ndef on_starting(server):\n    """\uc11c\ubc84 \uc2dc\uc791 \uc2dc \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ub514\ub809\ud1a0\ub9ac \ucd08\uae30\ud654"""\n    prom_dir = os.environ.get(\'prometheus_multiproc_dir\', \'/tmp/prometheus_multiproc\')\n    if os.path.exists(prom_dir):\n        shutil.rmtree(prom_dir)\n    os.makedirs(prom_dir, exist_ok=True)\n\n# Gunicorn \uc124\uc815\nbind = "0.0.0.0:8000"\nworkers = 4\nworker_class = "sync"\ntimeout = 30\n'})}),"\n",(0,s.jsx)(n.p,{children:"\uc2e4\ud589 \uc2a4\ud06c\ub9bd\ud2b8:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n# run.sh\n\n# \uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ub514\ub809\ud1a0\ub9ac \uc124\uc815\nexport prometheus_multiproc_dir=/tmp/prometheus_multiproc\n\n# Gunicorn \uc2e4\ud589\ngunicorn -c gunicorn_config.py app:app\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Multiprocess \ubaa8\ub4dc\uc758 Gauge",type:"tip",children:[(0,s.jsx)(n.p,{children:"Gauge\ub294 multiprocess_mode\ub97c \uc9c0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"all"}),": \ubaa8\ub4e0 \ud504\ub85c\uc138\uc2a4\uc758 \uac12\uc744 \uac1c\ubcc4\uc801\uc73c\ub85c \ubcf4\uace0"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"livesum"}),": \ubaa8\ub4e0 \ud504\ub85c\uc138\uc2a4\uc758 \ud569\uacc4"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"liveall"}),": \uc0b4\uc544\uc788\ub294 \ud504\ub85c\uc138\uc2a4\uc758 \uac12\ub9cc \uac1c\ubcc4\uc801\uc73c\ub85c \ubcf4\uace0"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"min"}),": \ucd5c\uc18c\uac12"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max"}),": \ucd5c\ub300\uac12"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"29-\uba54\ud2b8\ub9ad-\uc124\uacc4-\ud328\ud134",children:"2.9 \uba54\ud2b8\ub9ad \uc124\uacc4 \ud328\ud134"}),"\n",(0,s.jsx)(n.p,{children:"\ud6a8\uacfc\uc801\uc778 \uba54\ud2b8\ub9ad \uc124\uacc4\ub97c \uc704\ud55c \ud328\ud134\uacfc \ubaa8\ubc94 \uc0ac\ub840\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"291-red-\uba54\uc11c\ub4dc-request-error-duration",children:"2.9.1 RED \uba54\uc11c\ub4dc (Request, Error, Duration)"}),"\n",(0,s.jsx)(n.p,{children:"\ubaa8\ub4e0 \uc11c\ube44\uc2a4\uc5d0 \uc801\uc6a9 \uac00\ub2a5\ud55c \uae30\ubcf8 \uba54\ud2b8\ub9ad \ud328\ud134\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter, Histogram\nfrom functools import wraps\nimport time\n\n# Request: \uc694\uccad \uc218\nrequests_total = Counter(\n    'service_requests_total',\n    'Total requests',\n    ['method', 'endpoint']\n)\n\n# Error: \uc5d0\ub7ec \uc218\nerrors_total = Counter(\n    'service_errors_total',\n    'Total errors',\n    ['method', 'endpoint', 'error_type']\n)\n\n# Duration: \ucc98\ub9ac \uc2dc\uac04\nrequest_duration_seconds = Histogram(\n    'service_request_duration_seconds',\n    'Request duration',\n    ['method', 'endpoint'],\n    buckets=[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0, 5.0]\n)\n\ndef track_red_metrics(method, endpoint):\n    \"\"\"RED \uba54\ud2b8\ub9ad\uc744 \ucd94\uc801\ud558\ub294 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            start_time = time.time()\n\n            try:\n                result = func(*args, **kwargs)\n                requests_total.labels(method=method, endpoint=endpoint).inc()\n                return result\n            except Exception as e:\n                errors_total.labels(\n                    method=method,\n                    endpoint=endpoint,\n                    error_type=type(e).__name__\n                ).inc()\n                raise\n            finally:\n                duration = time.time() - start_time\n                request_duration_seconds.labels(method=method, endpoint=endpoint).observe(duration)\n\n        return wrapper\n    return decorator\n\n# \uc0ac\uc6a9 \uc608\uc81c\n@track_red_metrics('GET', '/api/users')\ndef get_users():\n    # \uc0ac\uc6a9\uc790 \uc870\ud68c \ub85c\uc9c1\n    return []\n\n@track_red_metrics('POST', '/api/users')\ndef create_user(data):\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ub85c\uc9c1\n    return {'id': 1}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"292-use-\uba54\uc11c\ub4dc-utilization-saturation-errors",children:"2.9.2 USE \uba54\uc11c\ub4dc (Utilization, Saturation, Errors)"}),"\n",(0,s.jsx)(n.p,{children:"\ub9ac\uc18c\uc2a4 \ubaa8\ub2c8\ud130\ub9c1\uc5d0 \uc801\ud569\ud55c \ud328\ud134\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Gauge, Counter\n\n# Utilization: \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\ub960\ncpu_utilization = Gauge('cpu_utilization_percent', 'CPU utilization percentage')\nmemory_utilization = Gauge('memory_utilization_percent', 'Memory utilization percentage')\ndisk_utilization = Gauge('disk_utilization_percent', 'Disk utilization percentage')\n\n# Saturation: \ub9ac\uc18c\uc2a4 \ud3ec\ud654 \uc0c1\ud0dc\nqueue_length = Gauge('queue_length', 'Number of items in queue')\nthread_pool_active = Gauge('thread_pool_active_threads', 'Active threads in pool')\nthread_pool_queue = Gauge('thread_pool_queue_size', 'Queued tasks')\n\n# Errors: \ub9ac\uc18c\uc2a4 \uc5d0\ub7ec\ndisk_errors_total = Counter('disk_errors_total', 'Total disk errors')\nnetwork_errors_total = Counter('network_errors_total', 'Total network errors')\n\n# \uc0ac\uc6a9 \uc608\uc81c\nimport psutil\nimport threading\n\ndef update_system_metrics():\n    \"\"\"\uc2dc\uc2a4\ud15c \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8\"\"\"\n    # Utilization\n    cpu_utilization.set(psutil.cpu_percent())\n    memory_utilization.set(psutil.virtual_memory().percent)\n    disk_utilization.set(psutil.disk_usage('/').percent)\n\n    # Saturation\n    thread_pool_active.set(threading.active_count())\n\n# \uc8fc\uae30\uc801\uc73c\ub85c \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8\nimport time\nwhile True:\n    update_system_metrics()\n    time.sleep(5)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"293-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ud328\ud134",children:"2.9.3 \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ud328\ud134"}),"\n",(0,s.jsx)(n.p,{children:"\ube44\uc988\ub2c8\uc2a4 KPI\ub97c \ucd94\uc801\ud558\ub294 \ud328\ud134\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter, Gauge, Histogram\n\n# \uc0ac\uc6a9\uc790 \ud65c\ub3d9\nuser_signups_total = Counter('user_signups_total', 'Total user signups', ['source'])\nuser_logins_total = Counter('user_logins_total', 'Total user logins')\nactive_users = Gauge('active_users', 'Currently active users')\n\n# \uac70\ub798\norders_total = Counter('orders_total', 'Total orders', ['status'])\norder_value = Histogram(\n    'order_value_dollars',\n    'Order value in dollars',\n    buckets=[10, 50, 100, 500, 1000, 5000, 10000]\n)\npayment_processing_duration = Histogram(\n    'payment_processing_duration_seconds',\n    'Payment processing duration',\n    ['payment_method']\n)\n\n# \uc7ac\uace0\ninventory_level = Gauge('inventory_level', 'Current inventory level', ['product_id'])\nlow_stock_items = Gauge('low_stock_items', 'Number of items with low stock')\n\n# \uc0ac\uc6a9 \uc608\uc81c\nclass EcommerceMetrics:\n    @staticmethod\n    def track_signup(source):\n        user_signups_total.labels(source=source).inc()\n        active_users.inc()\n\n    @staticmethod\n    def track_login():\n        user_logins_total.inc()\n        active_users.inc()\n\n    @staticmethod\n    def track_logout():\n        active_users.dec()\n\n    @staticmethod\n    def track_order(value, status, payment_method):\n        orders_total.labels(status=status).inc()\n        order_value.observe(value)\n\n        # \uacb0\uc81c \ucc98\ub9ac \uc2dc\uac04 \uce21\uc815\n        import time\n        start = time.time()\n        # \uacb0\uc81c \ucc98\ub9ac...\n        duration = time.time() - start\n        payment_processing_duration.labels(payment_method=payment_method).observe(duration)\n\n    @staticmethod\n    def update_inventory(product_id, level):\n        inventory_level.labels(product_id=product_id).set(level)\n\n        # \uc7ac\uace0 \ubd80\uc871 \ud56d\ubaa9 \uacc4\uc0b0\n        # \uc2e4\uc81c\ub85c\ub294 \ubaa8\ub4e0 \uc81c\ud488\uc744 \ud655\uc778\n        if level < 10:\n            low_stock_items.inc()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"294-slislo-\ucd94\uc801-\ud328\ud134",children:"2.9.4 SLI/SLO \ucd94\uc801 \ud328\ud134"}),"\n",(0,s.jsx)(n.p,{children:"Service Level Indicator\uc640 Objective\ub97c \ucd94\uc801\ud569\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from prometheus_client import Counter, Histogram\n\n# \uac00\uc6a9\uc131 SLI\nrequests_total = Counter(\n    \'http_requests_total\',\n    \'Total HTTP requests\',\n    [\'status\']\n)\n\n# \ub808\uc774\ud134\uc2dc SLI\nrequest_duration_seconds = Histogram(\n    \'http_request_duration_seconds\',\n    \'HTTP request duration\',\n    buckets=[0.1, 0.5, 1.0, 2.0, 5.0]  # SLO \uae30\uc900\uc810\n)\n\n# \uc5d0\ub7ec\uc728 SLI\nerrors_total = Counter(\n    \'http_errors_total\',\n    \'Total HTTP errors\',\n    [\'error_type\']\n)\n\nclass SLITracker:\n    """SLI\ub97c \ucd94\uc801\ud558\ub294 \ud5ec\ud37c \ud074\ub798\uc2a4"""\n\n    @staticmethod\n    def track_request(duration, status_code, error=None):\n        # \uc694\uccad \uc218\n        requests_total.labels(status=str(status_code)).inc()\n\n        # \ub808\uc774\ud134\uc2dc\n        request_duration_seconds.observe(duration)\n\n        # \uc5d0\ub7ec\n        if error:\n            errors_total.labels(error_type=type(error).__name__).inc()\n\n    @staticmethod\n    def calculate_availability():\n        """\n        \uac00\uc6a9\uc131 \uacc4\uc0b0 (Prometheus \ucffc\ub9ac):\n        sum(rate(http_requests_total{status=~"2.."}[5m]))\n        /\n        sum(rate(http_requests_total[5m]))\n        """\n        pass\n\n    @staticmethod\n    def calculate_latency_slo():\n        """\n        \ub808\uc774\ud134\uc2dc SLO \uacc4\uc0b0 (Prometheus \ucffc\ub9ac):\n        histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m])) < 1.0\n        """\n        pass\n\n# \uc0ac\uc6a9 \uc608\uc81c\nimport time\n\ndef handle_request():\n    start = time.time()\n    status_code = 200\n    error = None\n\n    try:\n        # \uc694\uccad \ucc98\ub9ac\n        result = process_request()\n        return result\n    except Exception as e:\n        status_code = 500\n        error = e\n        raise\n    finally:\n        duration = time.time() - start\n        SLITracker.track_request(duration, status_code, error)\n\ndef process_request():\n    # \uc2e4\uc81c \ucc98\ub9ac \ub85c\uc9c1\n    time.sleep(0.1)\n    return "success"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"210-\uc2e4\uc804-\uc608\uc81c",children:"2.10 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,s.jsx)(n.p,{children:"\uc2e4\uc81c \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c\uc758 \uba54\ud2b8\ub9ad \uc0ac\uc6a9 \uc608\uc81c\uc785\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h3,{id:"2101-\uc6f9-\uc560\ud50c\ub9ac\ucf00\uc774\uc158",children:"2.10.1 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request, jsonify\nfrom prometheus_client import Counter, Histogram, Gauge, make_wsgi_app\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nfrom functools import wraps\nimport time\nimport redis\nimport psycopg2\n\napp = Flask(__name__)\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nHTTP_REQUESTS = Counter(\n    'webapp_http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status']\n)\n\nHTTP_DURATION = Histogram(\n    'webapp_http_request_duration_seconds',\n    'HTTP request duration',\n    ['method', 'endpoint'],\n    buckets=[0.01, 0.05, 0.1, 0.5, 1.0, 2.0, 5.0]\n)\n\nDB_QUERIES = Counter(\n    'webapp_db_queries_total',\n    'Total database queries',\n    ['query_type', 'table']\n)\n\nDB_QUERY_DURATION = Histogram(\n    'webapp_db_query_duration_seconds',\n    'Database query duration',\n    ['query_type']\n)\n\nCACHE_OPERATIONS = Counter(\n    'webapp_cache_operations_total',\n    'Total cache operations',\n    ['operation', 'result']\n)\n\nACTIVE_REQUESTS = Gauge(\n    'webapp_active_requests',\n    'Active HTTP requests',\n    ['method', 'endpoint']\n)\n\n# Redis \uc5f0\uacb0\nredis_client = redis.Redis(host='localhost', port=6379)\n\n# \uba54\ud2b8\ub9ad \ucd94\uc801 \ub370\ucf54\ub808\uc774\ud130\ndef track_metrics(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        endpoint = request.endpoint or 'unknown'\n        method = request.method\n\n        # \ud65c\uc131 \uc694\uccad \uc99d\uac00\n        ACTIVE_REQUESTS.labels(method=method, endpoint=endpoint).inc()\n\n        start_time = time.time()\n        status_code = 500\n\n        try:\n            result = func(*args, **kwargs)\n            status_code = 200\n            return result\n        except Exception as e:\n            status_code = 500\n            raise\n        finally:\n            # \uc18c\uc694 \uc2dc\uac04 \uae30\ub85d\n            duration = time.time() - start_time\n            HTTP_DURATION.labels(method=method, endpoint=endpoint).observe(duration)\n\n            # \uc694\uccad \uc218 \uc99d\uac00\n            HTTP_REQUESTS.labels(method=method, endpoint=endpoint, status=status_code).inc()\n\n            # \ud65c\uc131 \uc694\uccad \uac10\uc18c\n            ACTIVE_REQUESTS.labels(method=method, endpoint=endpoint).dec()\n\n    return wrapper\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud5ec\ud37c\nclass Database:\n    def __init__(self):\n        self.conn = psycopg2.connect(\n            host='localhost',\n            database='myapp',\n            user='user',\n            password='password'\n        )\n\n    def query(self, sql, params=None, query_type='select', table='unknown'):\n        DB_QUERIES.labels(query_type=query_type, table=table).inc()\n\n        start_time = time.time()\n        cursor = self.conn.cursor()\n\n        try:\n            cursor.execute(sql, params)\n            result = cursor.fetchall()\n            return result\n        finally:\n            duration = time.time() - start_time\n            DB_QUERY_DURATION.labels(query_type=query_type).observe(duration)\n            cursor.close()\n\ndb = Database()\n\n# \uce90\uc2dc \ud5ec\ud37c\nclass Cache:\n    @staticmethod\n    def get(key):\n        try:\n            value = redis_client.get(key)\n            result = 'hit' if value else 'miss'\n            CACHE_OPERATIONS.labels(operation='get', result=result).inc()\n            return value\n        except Exception:\n            CACHE_OPERATIONS.labels(operation='get', result='error').inc()\n            return None\n\n    @staticmethod\n    def set(key, value, expire=300):\n        try:\n            redis_client.setex(key, expire, value)\n            CACHE_OPERATIONS.labels(operation='set', result='success').inc()\n        except Exception:\n            CACHE_OPERATIONS.labels(operation='set', result='error').inc()\n\n# API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.route('/api/users/<int:user_id>')\n@track_metrics\ndef get_user(user_id):\n    # \uce90\uc2dc \ud655\uc778\n    cache_key = f'user:{user_id}'\n    cached = Cache.get(cache_key)\n\n    if cached:\n        return jsonify({'id': user_id, 'name': cached.decode()})\n\n    # DB \uc870\ud68c\n    result = db.query(\n        'SELECT name FROM users WHERE id = %s',\n        (user_id,),\n        query_type='select',\n        table='users'\n    )\n\n    if result:\n        name = result[0][0]\n        Cache.set(cache_key, name)\n        return jsonify({'id': user_id, 'name': name})\n\n    return jsonify({'error': 'User not found'}), 404\n\n@app.route('/api/users', methods=['POST'])\n@track_metrics\ndef create_user():\n    data = request.get_json()\n    name = data.get('name')\n\n    db.query(\n        'INSERT INTO users (name) VALUES (%s)',\n        (name,),\n        query_type='insert',\n        table='users'\n    )\n\n    return jsonify({'status': 'success'}), 201\n\n# Prometheus \uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {\n    '/metrics': make_wsgi_app()\n})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2102-\ubc31\uadf8\ub77c\uc6b4\ub4dc-\uc6cc\ucee4",children:"2.10.2 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc6cc\ucee4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter, Gauge, Histogram, Summary, start_http_server\nimport time\nimport random\nfrom datetime import datetime\n\n# \uc6cc\ucee4 \uba54\ud2b8\ub9ad\nJOBS_PROCESSED = Counter(\n    'worker_jobs_processed_total',\n    'Total jobs processed',\n    ['job_type', 'status']\n)\n\nJOB_DURATION = Histogram(\n    'worker_job_duration_seconds',\n    'Job processing duration',\n    ['job_type'],\n    buckets=[1, 5, 10, 30, 60, 120, 300]\n)\n\nQUEUE_SIZE = Gauge(\n    'worker_queue_size',\n    'Current queue size',\n    ['queue_name']\n)\n\nACTIVE_WORKERS = Gauge(\n    'worker_active_workers',\n    'Number of active workers',\n    ['worker_type']\n)\n\nLAST_SUCCESS = Gauge(\n    'worker_last_success_timestamp',\n    'Timestamp of last successful job',\n    ['job_type']\n)\n\nJOB_ERRORS = Counter(\n    'worker_job_errors_total',\n    'Total job errors',\n    ['job_type', 'error_type']\n)\n\nRETRY_COUNT = Counter(\n    'worker_job_retries_total',\n    'Total job retries',\n    ['job_type']\n)\n\nclass Worker:\n    def __init__(self, worker_type):\n        self.worker_type = worker_type\n        self.running = True\n\n    def process_job(self, job):\n        \"\"\"\uc791\uc5c5 \ucc98\ub9ac\"\"\"\n        job_type = job['type']\n\n        # \ud65c\uc131 \uc6cc\ucee4 \uc99d\uac00\n        ACTIVE_WORKERS.labels(worker_type=self.worker_type).inc()\n\n        start_time = time.time()\n        status = 'success'\n\n        try:\n            # \uc791\uc5c5 \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n            processing_time = random.uniform(0.5, 5.0)\n            time.sleep(processing_time)\n\n            # \ub79c\ub364 \uc5d0\ub7ec \ubc1c\uc0dd\n            if random.random() < 0.1:  # 10% \uc5d0\ub7ec\uc728\n                raise Exception(\"Processing error\")\n\n            # \uc131\uacf5 \ud0c0\uc784\uc2a4\ud0ec\ud504 \uae30\ub85d\n            LAST_SUCCESS.labels(job_type=job_type).set_to_current_time()\n\n        except Exception as e:\n            status = 'failure'\n            JOB_ERRORS.labels(job_type=job_type, error_type=type(e).__name__).inc()\n\n            # \uc7ac\uc2dc\ub3c4\n            if job.get('retry_count', 0) < 3:\n                job['retry_count'] = job.get('retry_count', 0) + 1\n                RETRY_COUNT.labels(job_type=job_type).inc()\n                # \uc7ac\uc2dc\ub3c4 \ud050\uc5d0 \ucd94\uac00\n                self.retry_job(job)\n        finally:\n            # \ucc98\ub9ac \uc2dc\uac04 \uae30\ub85d\n            duration = time.time() - start_time\n            JOB_DURATION.labels(job_type=job_type).observe(duration)\n\n            # \uc791\uc5c5 \uce74\uc6b4\ud2b8 \uc99d\uac00\n            JOBS_PROCESSED.labels(job_type=job_type, status=status).inc()\n\n            # \ud65c\uc131 \uc6cc\ucee4 \uac10\uc18c\n            ACTIVE_WORKERS.labels(worker_type=self.worker_type).dec()\n\n    def retry_job(self, job):\n        \"\"\"\uc791\uc5c5 \uc7ac\uc2dc\ub3c4\"\"\"\n        # \uc7ac\uc2dc\ub3c4 \ud050\uc5d0 \ucd94\uac00 (\uc2e4\uc81c \uad6c\ud604 \ud544\uc694)\n        pass\n\n    def run(self):\n        \"\"\"\uc6cc\ucee4 \uc2e4\ud589\"\"\"\n        print(f\"Worker {self.worker_type} started\")\n\n        while self.running:\n            # \ud050\uc5d0\uc11c \uc791\uc5c5 \uac00\uc838\uc624\uae30 (\uc2dc\ubbac\ub808\uc774\uc158)\n            queue_name = 'default'\n            queue_size = random.randint(0, 100)\n            QUEUE_SIZE.labels(queue_name=queue_name).set(queue_size)\n\n            if queue_size > 0:\n                # \uc791\uc5c5 \uac00\uc838\uc624\uae30\n                job = {\n                    'type': random.choice(['email', 'report', 'export', 'import']),\n                    'data': {}\n                }\n\n                self.process_job(job)\n            else:\n                # \ud050\uac00 \ube44\uc5b4\uc788\uc73c\uba74 \ub300\uae30\n                time.sleep(1)\n\nclass WorkerPool:\n    def __init__(self, worker_count=4):\n        self.workers = []\n        for i in range(worker_count):\n            worker = Worker(f'worker-{i}')\n            self.workers.append(worker)\n\n    def start(self):\n        \"\"\"\ubaa8\ub4e0 \uc6cc\ucee4 \uc2dc\uc791\"\"\"\n        import threading\n\n        for worker in self.workers:\n            thread = threading.Thread(target=worker.run)\n            thread.daemon = True\n            thread.start()\n\nif __name__ == '__main__':\n    # Prometheus \uba54\ud2b8\ub9ad \uc11c\ubc84 \uc2dc\uc791\n    start_http_server(8000)\n    print(\"Metrics server started on http://localhost:8000/metrics\")\n\n    # \uc6cc\ucee4 \ud480 \uc2dc\uc791\n    pool = WorkerPool(worker_count=4)\n    pool.start()\n\n    # \uba54\uc778 \uc2a4\ub808\ub4dc \uc720\uc9c0\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        print(\"Shutting down...\")\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2103-\ubc30\uce58-\uc791\uc5c5-pushgateway-\uc0ac\uc6a9",children:"2.10.3 \ubc30\uce58 \uc791\uc5c5 (Pushgateway \uc0ac\uc6a9)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from prometheus_client import CollectorRegistry, Gauge, Counter, push_to_gateway, delete_from_gateway\nimport time\nfrom datetime import datetime\n\nclass BatchJob:\n    def __init__(self, job_name, pushgateway_url=\'localhost:9091\'):\n        self.job_name = job_name\n        self.pushgateway_url = pushgateway_url\n\n        # \uac01 \ubc30\uce58 \uc791\uc5c5\ub9c8\ub2e4 \ubcc4\ub3c4\uc758 \ub808\uc9c0\uc2a4\ud2b8\ub9ac \uc0ac\uc6a9\n        self.registry = CollectorRegistry()\n\n        # \uba54\ud2b8\ub9ad \uc815\uc758\n        self.records_processed = Counter(\n            \'batch_records_processed_total\',\n            \'Total records processed\',\n            [\'status\'],\n            registry=self.registry\n        )\n\n        self.processing_duration = Gauge(\n            \'batch_processing_duration_seconds\',\n            \'Batch processing duration\',\n            registry=self.registry\n        )\n\n        self.last_success = Gauge(\n            \'batch_last_success_timestamp\',\n            \'Timestamp of last successful run\',\n            registry=self.registry\n        )\n\n        self.errors = Counter(\n            \'batch_errors_total\',\n            \'Total batch errors\',\n            [\'error_type\'],\n            registry=self.registry\n        )\n\n        self.batch_size = Gauge(\n            \'batch_size\',\n            \'Number of records in current batch\',\n            registry=self.registry\n        )\n\n    def run(self):\n        """\ubc30\uce58 \uc791\uc5c5 \uc2e4\ud589"""\n        print(f"Starting batch job: {self.job_name}")\n        start_time = time.time()\n\n        try:\n            # \ubc30\uce58 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30\n            records = self.fetch_records()\n            self.batch_size.set(len(records))\n\n            # \ub808\ucf54\ub4dc \ucc98\ub9ac\n            for record in records:\n                try:\n                    self.process_record(record)\n                    self.records_processed.labels(status=\'success\').inc()\n                except Exception as e:\n                    self.records_processed.labels(status=\'failure\').inc()\n                    self.errors.labels(error_type=type(e).__name__).inc()\n\n            # \uc131\uacf5 \ud0c0\uc784\uc2a4\ud0ec\ud504 \uae30\ub85d\n            self.last_success.set(time.time())\n\n        except Exception as e:\n            print(f"Batch job failed: {e}")\n            self.errors.labels(error_type=type(e).__name__).inc()\n            raise\n        finally:\n            # \ucc98\ub9ac \uc2dc\uac04 \uae30\ub85d\n            duration = time.time() - start_time\n            self.processing_duration.set(duration)\n\n            # Pushgateway\ub85c \uba54\ud2b8\ub9ad \uc804\uc1a1\n            self.push_metrics()\n\n            print(f"Batch job completed in {duration:.2f} seconds")\n\n    def fetch_records(self):\n        """\ucc98\ub9ac\ud560 \ub808\ucf54\ub4dc \uac00\uc838\uc624\uae30 (\uc2dc\ubbac\ub808\uc774\uc158)"""\n        import random\n        return [{\'id\': i} for i in range(random.randint(100, 1000))]\n\n    def process_record(self, record):\n        """\ub808\ucf54\ub4dc \ucc98\ub9ac (\uc2dc\ubbac\ub808\uc774\uc158)"""\n        time.sleep(0.01)\n\n        # 10% \ud655\ub960\ub85c \uc5d0\ub7ec \ubc1c\uc0dd\n        if random.random() < 0.1:\n            raise Exception("Processing error")\n\n    def push_metrics(self):\n        """Pushgateway\ub85c \uba54\ud2b8\ub9ad \uc804\uc1a1"""\n        try:\n            push_to_gateway(\n                self.pushgateway_url,\n                job=self.job_name,\n                registry=self.registry\n            )\n            print(f"Metrics pushed to {self.pushgateway_url}")\n        except Exception as e:\n            print(f"Failed to push metrics: {e}")\n\n    def cleanup_metrics(self):\n        """Pushgateway\uc5d0\uc11c \uba54\ud2b8\ub9ad \uc0ad\uc81c"""\n        try:\n            delete_from_gateway(self.pushgateway_url, job=self.job_name)\n            print(f"Metrics deleted from {self.pushgateway_url}")\n        except Exception as e:\n            print(f"Failed to delete metrics: {e}")\n\n# \uc5ec\ub7ec \ubc30\uce58 \uc791\uc5c5 \uc608\uc81c\nclass DataExportJob(BatchJob):\n    def __init__(self):\n        super().__init__(\'data_export_job\')\n\n        # \ucd94\uac00 \uba54\ud2b8\ub9ad\n        self.export_size_bytes = Gauge(\n            \'export_size_bytes\',\n            \'Size of exported data in bytes\',\n            registry=self.registry\n        )\n\n    def run(self):\n        """\ub370\uc774\ud130 \ub0b4\ubcf4\ub0b4\uae30 \uc791\uc5c5"""\n        import random\n\n        super().run()\n\n        # \ub0b4\ubcf4\ub0b8 \ub370\uc774\ud130 \ud06c\uae30 \uae30\ub85d\n        export_size = random.randint(1000000, 10000000)\n        self.export_size_bytes.set(export_size)\n        self.push_metrics()\n\nclass ReportGenerationJob(BatchJob):\n    def __init__(self):\n        super().__init__(\'report_generation_job\')\n\n        # \ucd94\uac00 \uba54\ud2b8\ub9ad\n        self.reports_generated = Counter(\n            \'reports_generated_total\',\n            \'Total reports generated\',\n            [\'report_type\'],\n            registry=self.registry\n        )\n\n    def run(self):\n        """\ubcf4\uace0\uc11c \uc0dd\uc131 \uc791\uc5c5"""\n        super().run()\n\n        # \ubcf4\uace0\uc11c \ud0c0\uc785\ubcc4 \uce74\uc6b4\ud2b8\n        for report_type in [\'daily\', \'weekly\', \'monthly\']:\n            self.reports_generated.labels(report_type=report_type).inc()\n\n        self.push_metrics()\n\n# \uc2a4\ucf00\uc904\ub7ec \uc608\uc81c\nclass BatchScheduler:\n    def __init__(self):\n        self.jobs = {\n            \'data_export\': DataExportJob(),\n            \'report_generation\': ReportGenerationJob(),\n        }\n\n    def run_all(self):\n        """\ubaa8\ub4e0 \ubc30\uce58 \uc791\uc5c5 \uc2e4\ud589"""\n        for job_name, job in self.jobs.items():\n            print(f"\\n{\'=\'*50}")\n            print(f"Running {job_name}")\n            print(f"{\'=\'*50}")\n\n            try:\n                job.run()\n            except Exception as e:\n                print(f"Job {job_name} failed: {e}")\n\nif __name__ == \'__main__\':\n    # \ub2e8\uc77c \uc791\uc5c5 \uc2e4\ud589\n    job = BatchJob(\'daily_sync_job\')\n    job.run()\n\n    # \ub610\ub294 \uc2a4\ucf00\uc904\ub7ec \uc0ac\uc6a9\n    # scheduler = BatchScheduler()\n    # scheduler.run_all()\n'})}),"\n",(0,s.jsx)(n.p,{children:"Pushgateway \uc2e4\ud589:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -d -p 9091:9091 prom/pushgateway\n"})}),"\n",(0,s.jsx)(n.h2,{id:"211-\uc5f0\uc2b5-\ubb38\uc81c",children:"2.11 \uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,s.jsx)(n.h3,{id:"\uc5f0\uc2b5-1-\uae30\ubcf8-\uba54\ud2b8\ub9ad-\uad6c\ud604",children:"\uc5f0\uc2b5 1: \uae30\ubcf8 \uba54\ud2b8\ub9ad \uad6c\ud604"}),"\n",(0,s.jsx)(n.p,{children:"Flask \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ub2e4\uc74c \uba54\ud2b8\ub9ad\uc744 \uad6c\ud604\ud558\uc138\uc694:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\ucd1d \uc694\uccad \uc218 (Counter)"}),"\n",(0,s.jsx)(n.li,{children:"\ud604\uc7ac \ud65c\uc131 \uc0ac\uc6a9\uc790 \uc218 (Gauge)"}),"\n",(0,s.jsx)(n.li,{children:"API \uc751\ub2f5 \uc2dc\uac04 (Histogram)"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request\nfrom prometheus_client import Counter, Gauge, Histogram, make_wsgi_app\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nimport time\nimport random\n\napp = Flask(__name__)\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nREQUESTS_TOTAL = Counter(\n    'app_requests_total',\n    'Total requests',\n    ['method', 'endpoint']\n)\n\nACTIVE_USERS = Gauge(\n    'app_active_users',\n    'Currently active users'\n)\n\nRESPONSE_TIME = Histogram(\n    'app_response_time_seconds',\n    'API response time',\n    ['endpoint'],\n    buckets=[0.01, 0.05, 0.1, 0.5, 1.0]\n)\n\n@app.before_request\ndef before_request():\n    request._start_time = time.time()\n\n@app.after_request\ndef after_request(response):\n    if hasattr(request, '_start_time'):\n        duration = time.time() - request._start_time\n        endpoint = request.endpoint or 'unknown'\n\n        RESPONSE_TIME.labels(endpoint=endpoint).observe(duration)\n        REQUESTS_TOTAL.labels(method=request.method, endpoint=endpoint).inc()\n\n    return response\n\n@app.route('/login', methods=['POST'])\ndef login():\n    ACTIVE_USERS.inc()\n    return {'status': 'logged in'}, 200\n\n@app.route('/logout', methods=['POST'])\ndef logout():\n    ACTIVE_USERS.dec()\n    return {'status': 'logged out'}, 200\n\n@app.route('/api/data')\ndef get_data():\n    time.sleep(random.uniform(0.01, 0.1))\n    return {'data': [1, 2, 3]}, 200\n\n# Prometheus \uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {\n    '/metrics': make_wsgi_app()\n})\n\nif __name__ == '__main__':\n    app.run(port=5000)\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"\uc5f0\uc2b5-2-custom-collector-\uad6c\ud604",children:"\uc5f0\uc2b5 2: Custom Collector \uad6c\ud604"}),"\n",(0,s.jsx)(n.p,{children:"\uc2dc\uc2a4\ud15c\uc758 \ub124\ud2b8\uc6cc\ud06c \ud1b5\uacc4\ub97c \uc218\uc9d1\ud558\ub294 Custom Collector\ub97c \uad6c\ud604\ud558\uc138\uc694."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import REGISTRY, start_http_server\nfrom prometheus_client.core import GaugeMetricFamily, CounterMetricFamily\nimport psutil\nimport time\n\nclass NetworkStatsCollector:\n    \"\"\"\ub124\ud2b8\uc6cc\ud06c \ud1b5\uacc4 \uc218\uc9d1 \uceec\ub809\ud130\"\"\"\n\n    def collect(self):\n        # \ub124\ud2b8\uc6cc\ud06c I/O \ud1b5\uacc4\n        net_io = psutil.net_io_counters()\n\n        # \ubc14\uc774\ud2b8 \uc1a1\uc218\uc2e0\n        bytes_metric = CounterMetricFamily(\n            'network_bytes_total',\n            'Total network bytes',\n            labels=['direction']\n        )\n        bytes_metric.add_metric(['sent'], net_io.bytes_sent)\n        bytes_metric.add_metric(['received'], net_io.bytes_recv)\n        yield bytes_metric\n\n        # \ud328\ud0b7 \uc1a1\uc218\uc2e0\n        packets_metric = CounterMetricFamily(\n            'network_packets_total',\n            'Total network packets',\n            labels=['direction']\n        )\n        packets_metric.add_metric(['sent'], net_io.packets_sent)\n        packets_metric.add_metric(['received'], net_io.packets_recv)\n        yield packets_metric\n\n        # \uc5d0\ub7ec \ubc0f \ub4dc\ub86d\n        errors_metric = CounterMetricFamily(\n            'network_errors_total',\n            'Total network errors',\n            labels=['type']\n        )\n        errors_metric.add_metric(['in'], net_io.errin)\n        errors_metric.add_metric(['out'], net_io.errout)\n        errors_metric.add_metric(['drop_in'], net_io.dropin)\n        errors_metric.add_metric(['drop_out'], net_io.dropout)\n        yield errors_metric\n\n        # \uc778\ud130\ud398\uc774\uc2a4\ubcc4 \ud1b5\uacc4\n        net_if_stats = psutil.net_if_stats()\n        if_up_metric = GaugeMetricFamily(\n            'network_interface_up',\n            'Network interface status (1=up, 0=down)',\n            labels=['interface']\n        )\n\n        if_speed_metric = GaugeMetricFamily(\n            'network_interface_speed_mbps',\n            'Network interface speed in Mbps',\n            labels=['interface']\n        )\n\n        for interface, stats in net_if_stats.items():\n            if_up_metric.add_metric([interface], 1 if stats.isup else 0)\n            if_speed_metric.add_metric([interface], stats.speed)\n\n        yield if_up_metric\n        yield if_speed_metric\n\nif __name__ == '__main__':\n    # \uceec\ub809\ud130 \ub4f1\ub85d\n    REGISTRY.register(NetworkStatsCollector())\n\n    # \uba54\ud2b8\ub9ad \uc11c\ubc84 \uc2dc\uc791\n    start_http_server(8000)\n    print(\"Metrics server running on http://localhost:8000/metrics\")\n\n    # \uc11c\ubc84 \uc720\uc9c0\n    while True:\n        time.sleep(1)\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"\uc5f0\uc2b5-3-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\uc124\uacc4",children:"\uc5f0\uc2b5 3: \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \uc124\uacc4"}),"\n",(0,s.jsx)(n.p,{children:"\uc804\uc790\uc0c1\uac70\ub798 \uc0ac\uc774\ud2b8\uc758 \uc8fc\uc694 \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad\uc744 \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud558\uc138\uc694:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\uc8fc\ubb38 \uc0dd\uc131/\ucde8\uc18c/\uc644\ub8cc"}),"\n",(0,s.jsx)(n.li,{children:"\uc7a5\ubc14\uad6c\ub2c8 \ucd94\uac00/\uc81c\uac70"}),"\n",(0,s.jsx)(n.li,{children:"\uacb0\uc81c \uc131\uacf5/\uc2e4\ud328"}),"\n",(0,s.jsx)(n.li,{children:"\uc7ac\uace0 \uc218\uc900"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter, Gauge, Histogram, start_http_server\nimport time\nimport random\n\n# \uc8fc\ubb38 \uba54\ud2b8\ub9ad\nORDERS = Counter(\n    'ecommerce_orders_total',\n    'Total orders',\n    ['status']  # created, cancelled, completed\n)\n\nORDER_VALUE = Histogram(\n    'ecommerce_order_value_dollars',\n    'Order value in dollars',\n    buckets=[10, 50, 100, 500, 1000, 5000, 10000]\n)\n\n# \uc7a5\ubc14\uad6c\ub2c8 \uba54\ud2b8\ub9ad\nCART_OPERATIONS = Counter(\n    'ecommerce_cart_operations_total',\n    'Cart operations',\n    ['operation']  # add, remove, checkout\n)\n\nCART_SIZE = Histogram(\n    'ecommerce_cart_size_items',\n    'Number of items in cart',\n    buckets=[1, 2, 5, 10, 20, 50]\n)\n\n# \uacb0\uc81c \uba54\ud2b8\ub9ad\nPAYMENTS = Counter(\n    'ecommerce_payments_total',\n    'Total payments',\n    ['method', 'status']  # method: credit_card, paypal, etc. status: success, failure\n)\n\nPAYMENT_PROCESSING_TIME = Histogram(\n    'ecommerce_payment_processing_seconds',\n    'Payment processing time',\n    ['method']\n)\n\n# \uc7ac\uace0 \uba54\ud2b8\ub9ad\nINVENTORY_LEVEL = Gauge(\n    'ecommerce_inventory_level',\n    'Current inventory level',\n    ['product_id', 'warehouse']\n)\n\nLOW_STOCK_ALERTS = Counter(\n    'ecommerce_low_stock_alerts_total',\n    'Low stock alerts triggered',\n    ['product_id']\n)\n\nclass EcommerceApp:\n    def __init__(self):\n        self.products = {\n            'P001': {'name': 'Laptop', 'price': 999, 'stock': {'warehouse_a': 50}},\n            'P002': {'name': 'Mouse', 'price': 29, 'stock': {'warehouse_a': 200}},\n            'P003': {'name': 'Keyboard', 'price': 79, 'stock': {'warehouse_a': 150}},\n        }\n\n    def create_order(self, items, payment_method='credit_card'):\n        \"\"\"\uc8fc\ubb38 \uc0dd\uc131\"\"\"\n        # \uc8fc\ubb38 \uae08\uc561 \uacc4\uc0b0\n        total_value = sum(\n            self.products[item['product_id']]['price'] * item['quantity']\n            for item in items\n        )\n\n        # \uc8fc\ubb38 \uc0dd\uc131\n        ORDERS.labels(status='created').inc()\n        ORDER_VALUE.observe(total_value)\n        CART_SIZE.observe(len(items))\n        CART_OPERATIONS.labels(operation='checkout').inc()\n\n        # \uacb0\uc81c \ucc98\ub9ac\n        payment_success = self.process_payment(total_value, payment_method)\n\n        if payment_success:\n            # \uc7ac\uace0 \ucc28\uac10\n            for item in items:\n                self.update_inventory(\n                    item['product_id'],\n                    'warehouse_a',\n                    -item['quantity']\n                )\n\n            ORDERS.labels(status='completed').inc()\n            return {'status': 'success', 'order_id': random.randint(1000, 9999)}\n        else:\n            ORDERS.labels(status='cancelled').inc()\n            return {'status': 'failed'}\n\n    def process_payment(self, amount, method):\n        \"\"\"\uacb0\uc81c \ucc98\ub9ac\"\"\"\n        start_time = time.time()\n\n        try:\n            # \uacb0\uc81c \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n            time.sleep(random.uniform(0.1, 0.5))\n\n            # 90% \uc131\uacf5\ub960\n            success = random.random() < 0.9\n\n            status = 'success' if success else 'failure'\n            PAYMENTS.labels(method=method, status=status).inc()\n\n            return success\n        finally:\n            duration = time.time() - start_time\n            PAYMENT_PROCESSING_TIME.labels(method=method).observe(duration)\n\n    def add_to_cart(self, product_id):\n        \"\"\"\uc7a5\ubc14\uad6c\ub2c8\uc5d0 \ucd94\uac00\"\"\"\n        CART_OPERATIONS.labels(operation='add').inc()\n\n    def remove_from_cart(self, product_id):\n        \"\"\"\uc7a5\ubc14\uad6c\ub2c8\uc5d0\uc11c \uc81c\uac70\"\"\"\n        CART_OPERATIONS.labels(operation='remove').inc()\n\n    def update_inventory(self, product_id, warehouse, delta):\n        \"\"\"\uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8\"\"\"\n        current = self.products[product_id]['stock'][warehouse]\n        new_level = current + delta\n\n        self.products[product_id]['stock'][warehouse] = new_level\n        INVENTORY_LEVEL.labels(product_id=product_id, warehouse=warehouse).set(new_level)\n\n        # \uc7ac\uace0 \ubd80\uc871 \uc54c\ub9bc (10\uac1c \ubbf8\ub9cc)\n        if new_level < 10:\n            LOW_STOCK_ALERTS.labels(product_id=product_id).inc()\n\n    def initialize_inventory(self):\n        \"\"\"\ucd08\uae30 \uc7ac\uace0 \uc124\uc815\"\"\"\n        for product_id, product in self.products.items():\n            for warehouse, level in product['stock'].items():\n                INVENTORY_LEVEL.labels(product_id=product_id, warehouse=warehouse).set(level)\n\ndef simulate_traffic(app):\n    \"\"\"\ud2b8\ub798\ud53d \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n    while True:\n        action = random.choice(['add_cart', 'remove_cart', 'order'])\n\n        if action == 'add_cart':\n            product_id = random.choice(list(app.products.keys()))\n            app.add_to_cart(product_id)\n\n        elif action == 'remove_cart':\n            product_id = random.choice(list(app.products.keys()))\n            app.remove_from_cart(product_id)\n\n        elif action == 'order':\n            # \ub79c\ub364 \uc8fc\ubb38 \uc0dd\uc131\n            num_items = random.randint(1, 5)\n            items = [\n                {\n                    'product_id': random.choice(list(app.products.keys())),\n                    'quantity': random.randint(1, 3)\n                }\n                for _ in range(num_items)\n            ]\n            payment_method = random.choice(['credit_card', 'paypal', 'debit_card'])\n            app.create_order(items, payment_method)\n\n        time.sleep(random.uniform(0.1, 1.0))\n\nif __name__ == '__main__':\n    # \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ucd08\uae30\ud654\n    app = EcommerceApp()\n    app.initialize_inventory()\n\n    # \uba54\ud2b8\ub9ad \uc11c\ubc84 \uc2dc\uc791\n    start_http_server(8000)\n    print(\"Metrics server running on http://localhost:8000/metrics\")\n\n    # \ud2b8\ub798\ud53d \uc2dc\ubbac\ub808\uc774\uc158\n    simulate_traffic(app)\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsx)(n.p,{children:"\uba54\ud2b8\ub9ad \uc218\uc9d1 \ubc29\ubc95\uc744 \uc775\ud614\ub2e4\uba74, \uc774\uc81c \uc218\uc9d1\ub41c \uba54\ud2b8\ub9ad\uc744 \ucffc\ub9ac\ud558\uace0 \ubd84\uc11d\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\uc57c \ud569\ub2c8\ub2e4."}),"\n",(0,s.jsxs)(n.p,{children:["\ub2e4\uc74c \ubb38\uc11c\uc5d0\uc11c\ub294 ",(0,s.jsx)(n.strong,{children:"PromQL(Prometheus Query Language)"})," \ub97c \uc0c1\uc138\ud788 \ub2e4\ub8f9\ub2c8\ub2e4:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"./promql",children:"PromQL \ucffc\ub9ac"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(_,{...e})}):_(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);