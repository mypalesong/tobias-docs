"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[326],{1003:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"python/advanced/async","title":"2. \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d","description":"\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 Python\uc5d0\uc11c I/O \uc791\uc5c5\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \uac15\ub825\ud55c \ud328\ub7ec\ub2e4\uc784\uc785\ub2c8\ub2e4. \uc774 \uac00\uc774\ub4dc\uc5d0\uc11c\ub294 async/await \ubb38\ubc95\ubd80\ud130 \uc2e4\uc804 \ud65c\uc6a9\uae4c\uc9c0 \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ubaa8\ub4e0 \uac83\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.","source":"@site/docs/python/advanced/async.md","sourceDirName":"python/advanced","slug":"/python/advanced/async","permalink":"/docs/python/advanced/async","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/advanced/async.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"pythonSidebar","previous":{"title":"1. \uba54\ud0c0\ud074\ub798\uc2a4","permalink":"/docs/python/advanced/metaclasses"},"next":{"title":"3. \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800","permalink":"/docs/python/advanced/context-managers"}}');var a=s(4848),i=s(8453);const r={sidebar_position:2},o="2. \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d",l={},c=[{value:"2.1 \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc774\ub780?",id:"21-\ube44\ub3d9\uae30-\ud504\ub85c\uadf8\ub798\ubc0d\uc774\ub780",level:2},{value:"\ub3d9\uae30 vs \ube44\ub3d9\uae30",id:"\ub3d9\uae30-vs-\ube44\ub3d9\uae30",level:3},{value:"2.2 \ucf54\ub8e8\ud2f4 (Coroutines)",id:"22-\ucf54\ub8e8\ud2f4-coroutines",level:2},{value:"\ucf54\ub8e8\ud2f4 \uae30\ubcf8",id:"\ucf54\ub8e8\ud2f4-\uae30\ubcf8",level:3},{value:"\ucf54\ub8e8\ud2f4 \uccb4\uc774\ub2dd",id:"\ucf54\ub8e8\ud2f4-\uccb4\uc774\ub2dd",level:3},{value:"2.3 asyncio \uae30\ucd08",id:"23-asyncio-\uae30\ucd08",level:2},{value:"\uc774\ubca4\ud2b8 \ub8e8\ud504 (Event Loop)",id:"\uc774\ubca4\ud2b8-\ub8e8\ud504-event-loop",level:3},{value:"\ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \uc774\ubca4\ud2b8 \ub8e8\ud504 \uc811\uadfc",id:"\ud604\uc7ac-\uc2e4\ud589-\uc911\uc778-\uc774\ubca4\ud2b8-\ub8e8\ud504-\uc811\uadfc",level:3},{value:"2.4 async/await \ubb38\ubc95",id:"24-asyncawait-\ubb38\ubc95",level:2},{value:"async \ud568\uc218 \uc815\uc758",id:"async-\ud568\uc218-\uc815\uc758",level:3},{value:"await \ud45c\ud604\uc2dd",id:"await-\ud45c\ud604\uc2dd",level:3},{value:"await \uac00\ub2a5\ud55c \uac1d\uccb4 (Awaitable)",id:"await-\uac00\ub2a5\ud55c-\uac1d\uccb4-awaitable",level:3},{value:"2.5 \ub3d9\uc2dc \uc2e4\ud589: gather()\uc640 create_task()",id:"25-\ub3d9\uc2dc-\uc2e4\ud589-gather\uc640-create_task",level:2},{value:"asyncio.gather()",id:"asynciogather",level:3},{value:"gather()\uc758 \uc608\uc678 \ucc98\ub9ac",id:"gather\uc758-\uc608\uc678-\ucc98\ub9ac",level:3},{value:"asyncio.create_task()",id:"asynciocreate_task",level:3},{value:"Task \uad00\ub9ac",id:"task-\uad00\ub9ac",level:3},{value:"gather() vs create_task()",id:"gather-vs-create_task",level:3},{value:"2.6 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800",id:"26-\ube44\ub3d9\uae30-\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"\uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \ube44\ub3d9\uae30 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0",id:"\uc2e4\uc6a9\uc801\uc778-\uc608\uc81c-\ube44\ub3d9\uae30-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\uacb0",level:3},{value:"\ube44\ub3d9\uae30 \ub77d (Lock)",id:"\ube44\ub3d9\uae30-\ub77d-lock",level:3},{value:"2.7 \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130",id:"27-\ube44\ub3d9\uae30-\uc774\ud130\ub808\uc774\ud130\uc640-\uc81c\ub108\ub808\uc774\ud130",level:2},{value:"\ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130",id:"\ube44\ub3d9\uae30-\uc774\ud130\ub808\uc774\ud130",level:3},{value:"\ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130",id:"\ube44\ub3d9\uae30-\uc81c\ub108\ub808\uc774\ud130",level:3},{value:"\uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \ube44\ub3d9\uae30 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d",id:"\uc2e4\uc6a9\uc801\uc778-\uc608\uc81c-\ube44\ub3d9\uae30-\ub370\uc774\ud130-\uc2a4\ud2b8\ub9ac\ubc0d",level:3},{value:"\ube44\ub3d9\uae30 \ucef4\ud504\ub9ac\ud5e8\uc158",id:"\ube44\ub3d9\uae30-\ucef4\ud504\ub9ac\ud5e8\uc158",level:3},{value:"2.8 aiohttp\ub85c \ube44\ub3d9\uae30 HTTP \uc694\uccad",id:"28-aiohttp\ub85c-\ube44\ub3d9\uae30-http-\uc694\uccad",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",level:3},{value:"\uc5ec\ub7ec URL \ub3d9\uc2dc \uc694\uccad",id:"\uc5ec\ub7ec-url-\ub3d9\uc2dc-\uc694\uccad",level:3},{value:"POST \uc694\uccad\uacfc \ud5e4\ub354 \uc124\uc815",id:"post-\uc694\uccad\uacfc-\ud5e4\ub354-\uc124\uc815",level:3},{value:"\uc9c4\ud589\ub960 \ucd94\uc801 \ubc0f \uc18d\ub3c4 \uc81c\ud55c",id:"\uc9c4\ud589\ub960-\ucd94\uc801-\ubc0f-\uc18d\ub3c4-\uc81c\ud55c",level:3},{value:"\uc138\uc158 \uc7ac\uc0ac\uc6a9\uacfc \ucee4\ub125\uc158 \ud480\ub9c1",id:"\uc138\uc158-\uc7ac\uc0ac\uc6a9\uacfc-\ucee4\ub125\uc158-\ud480\ub9c1",level:3},{value:"2.9 \ube44\ub3d9\uae30 \ud30c\uc77c I/O",id:"29-\ube44\ub3d9\uae30-\ud30c\uc77c-io",level:2},{value:"aiofiles \ub77c\uc774\ube0c\ub7ec\ub9ac",id:"aiofiles-\ub77c\uc774\ube0c\ub7ec\ub9ac",level:3},{value:"\ub300\uc6a9\ub7c9 \ud30c\uc77c \ucc98\ub9ac",id:"\ub300\uc6a9\ub7c9-\ud30c\uc77c-\ucc98\ub9ac",level:3},{value:"JSON \ud30c\uc77c \ube44\ub3d9\uae30 \ucc98\ub9ac",id:"json-\ud30c\uc77c-\ube44\ub3d9\uae30-\ucc98\ub9ac",level:3},{value:"2.10 Threading vs Multiprocessing vs Asyncio",id:"210-threading-vs-multiprocessing-vs-asyncio",level:2},{value:"\ube44\uad50 \uac1c\uc694",id:"\ube44\uad50-\uac1c\uc694",level:3},{value:"Threading \uc608\uc81c",id:"threading-\uc608\uc81c",level:3},{value:"Multiprocessing \uc608\uc81c",id:"multiprocessing-\uc608\uc81c",level:3},{value:"Asyncio \uc608\uc81c",id:"asyncio-\uc608\uc81c",level:3},{value:"\uc131\ub2a5 \ube44\uad50 \ud14c\uc2a4\ud2b8",id:"\uc131\ub2a5-\ube44\uad50-\ud14c\uc2a4\ud2b8",level:3},{value:"2.11 \uc5b8\uc81c \ube44\ub3d9\uae30\ub97c \uc0ac\uc6a9\ud560\uae4c?",id:"211-\uc5b8\uc81c-\ube44\ub3d9\uae30\ub97c-\uc0ac\uc6a9\ud560\uae4c",level:2},{value:"I/O \ubc14\uc6b4\ub4dc vs CPU \ubc14\uc6b4\ub4dc",id:"io-\ubc14\uc6b4\ub4dc-vs-cpu-\ubc14\uc6b4\ub4dc",level:3},{value:"\ube44\ub3d9\uae30 \uc0ac\uc6a9\uc774 \uc801\ud569\ud55c \uacbd\uc6b0",id:"\ube44\ub3d9\uae30-\uc0ac\uc6a9\uc774-\uc801\ud569\ud55c-\uacbd\uc6b0",level:3},{value:"\ube44\ub3d9\uae30 \uc0ac\uc6a9\uc774 \ubd80\uc801\ud569\ud55c \uacbd\uc6b0",id:"\ube44\ub3d9\uae30-\uc0ac\uc6a9\uc774-\ubd80\uc801\ud569\ud55c-\uacbd\uc6b0",level:3},{value:"\ud558\uc774\ube0c\ub9ac\ub4dc \uc811\uadfc",id:"\ud558\uc774\ube0c\ub9ac\ub4dc-\uc811\uadfc",level:3},{value:"2.12 \uc2e4\uc804 \uc608\uc81c",id:"212-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\uc6f9 \uc2a4\ud06c\ub798\ud551",id:"\uc6f9-\uc2a4\ud06c\ub798\ud551",level:3},{value:"\uc5ec\ub7ec API \ub3d9\uc2dc \ud638\ucd9c",id:"\uc5ec\ub7ec-api-\ub3d9\uc2dc-\ud638\ucd9c",level:3},{value:"\ub3d9\uc2dc \ud30c\uc77c \ucc98\ub9ac",id:"\ub3d9\uc2dc-\ud30c\uc77c-\ucc98\ub9ac",level:3},{value:"\uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \ubaa8\ub2c8\ud130\ub9c1",id:"\uc2e4\uc2dc\uac04-\ub370\uc774\ud130-\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"2.13 \uc77c\ubc18\uc801\uc778 \ud568\uc815\uacfc \ub514\ubc84\uae45",id:"213-\uc77c\ubc18\uc801\uc778-\ud568\uc815\uacfc-\ub514\ubc84\uae45",level:2},{value:"\uc77c\ubc18\uc801\uc778 \uc2e4\uc218\ub4e4",id:"\uc77c\ubc18\uc801\uc778-\uc2e4\uc218\ub4e4",level:3},{value:"\uacbd\uc7c1 \uc870\uac74 (Race Conditions)",id:"\uacbd\uc7c1-\uc870\uac74-race-conditions",level:3},{value:"\ub370\ub4dc\ub77d \ubc29\uc9c0",id:"\ub370\ub4dc\ub77d-\ubc29\uc9c0",level:3},{value:"\ub514\ubc84\uae45 \ub3c4\uad6c",id:"\ub514\ubc84\uae45-\ub3c4\uad6c",level:3},{value:"\ud0c0\uc784\uc544\uc6c3 \ucc98\ub9ac",id:"\ud0c0\uc784\uc544\uc6c3-\ucc98\ub9ac",level:3},{value:"2.14 \ubaa8\ubc94 \uc0ac\ub840",id:"214-\ubaa8\ubc94-\uc0ac\ub840",level:2},{value:"1. \ub9ac\uc18c\uc2a4 \uad00\ub9ac",id:"1-\ub9ac\uc18c\uc2a4-\uad00\ub9ac",level:3},{value:"2. \uc5d0\ub7ec \ucc98\ub9ac",id:"2-\uc5d0\ub7ec-\ucc98\ub9ac",level:3},{value:"3. \uad6c\uc870\ud654\ub41c \ucf54\ub4dc",id:"3-\uad6c\uc870\ud654\ub41c-\ucf54\ub4dc",level:3},{value:"4. \uc131\ub2a5 \ucd5c\uc801\ud654",id:"4-\uc131\ub2a5-\ucd5c\uc801\ud654",level:3},{value:"5. \ud14c\uc2a4\ud2b8 \uac00\ub2a5\ud55c \ucf54\ub4dc",id:"5-\ud14c\uc2a4\ud2b8-\uac00\ub2a5\ud55c-\ucf54\ub4dc",level:3},{value:"2.15 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640 \ud301",id:"215-\uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640-\ud301",level:2},{value:"\ube44\ub3d9\uae30 \ucf54\ub4dc \uc791\uc131 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ube44\ub3d9\uae30-\ucf54\ub4dc-\uc791\uc131-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"\uc131\ub2a5 \ud301",id:"\uc131\ub2a5-\ud301",level:3},{value:"\uc77c\ubc18\uc801\uc778 \ud328\ud134",id:"\uc77c\ubc18\uc801\uc778-\ud328\ud134",level:3},{value:"\uc5f0\uc2b5 \ubb38\uc81c",id:"\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \ube44\ub3d9\uae30 \uc6f9 \ud06c\ub864\ub7ec",id:"\ubb38\uc81c-1-\ube44\ub3d9\uae30-\uc6f9-\ud06c\ub864\ub7ec",level:3},{value:"\ubb38\uc81c 2: \ube44\ub3d9\uae30 \ub2e4\uc6b4\ub85c\ub4dc \ub9e4\ub2c8\uc800",id:"\ubb38\uc81c-2-\ube44\ub3d9\uae30-\ub2e4\uc6b4\ub85c\ub4dc-\ub9e4\ub2c8\uc800",level:3},{value:"\ubb38\uc81c 3: \ube44\ub3d9\uae30 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778",id:"\ubb38\uc81c-3-\ube44\ub3d9\uae30-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778",level:3}];function u(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components},{Details:s}=e;return s||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"2-\ube44\ub3d9\uae30-\ud504\ub85c\uadf8\ub798\ubc0d",children:"2. \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d"})}),"\n",(0,a.jsx)(e.p,{children:"\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 Python\uc5d0\uc11c I/O \uc791\uc5c5\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \uac15\ub825\ud55c \ud328\ub7ec\ub2e4\uc784\uc785\ub2c8\ub2e4. \uc774 \uac00\uc774\ub4dc\uc5d0\uc11c\ub294 async/await \ubb38\ubc95\ubd80\ud130 \uc2e4\uc804 \ud65c\uc6a9\uae4c\uc9c0 \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ubaa8\ub4e0 \uac83\uc744 \ub2e4\ub8f9\ub2c8\ub2e4."}),"\n",(0,a.jsx)(e.h2,{id:"21-\ube44\ub3d9\uae30-\ud504\ub85c\uadf8\ub798\ubc0d\uc774\ub780",children:"2.1 \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc774\ub780?"}),"\n",(0,a.jsx)(e.p,{children:"\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc791\uc5c5\uc774 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9ac\uc9c0 \uc54a\uace0 \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uac8c \ud558\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd\uc785\ub2c8\ub2e4."}),"\n",(0,a.jsx)(e.h3,{id:"\ub3d9\uae30-vs-\ube44\ub3d9\uae30",children:"\ub3d9\uae30 vs \ube44\ub3d9\uae30"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import time\nimport asyncio\n\n# \ub3d9\uae30 \ubc29\uc2dd\ndef sync_download(url):\n    print(f"\ub2e4\uc6b4\ub85c\ub4dc \uc2dc\uc791: {url}")\n    time.sleep(2)  # \ub124\ud2b8\uc6cc\ud06c I/O \uc2dc\ubbac\ub808\uc774\uc158\n    print(f"\ub2e4\uc6b4\ub85c\ub4dc \uc644\ub8cc: {url}")\n    return f"\ub370\uc774\ud130 from {url}"\n\ndef sync_main():\n    start = time.time()\n    urls = ["url1", "url2", "url3"]\n\n    for url in urls:\n        sync_download(url)\n\n    print(f"\ucd1d \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n    # \ucd9c\ub825: \ucd1d \uc18c\uc694 \uc2dc\uac04: 6.00\ucd08\n\n# \ube44\ub3d9\uae30 \ubc29\uc2dd\nasync def async_download(url):\n    print(f"\ub2e4\uc6b4\ub85c\ub4dc \uc2dc\uc791: {url}")\n    await asyncio.sleep(2)  # \ube44\ub3d9\uae30 I/O\n    print(f"\ub2e4\uc6b4\ub85c\ub4dc \uc644\ub8cc: {url}")\n    return f"\ub370\uc774\ud130 from {url}"\n\nasync def async_main():\n    start = time.time()\n    urls = ["url1", "url2", "url3"]\n\n    # \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\n    tasks = [async_download(url) for url in urls]\n    await asyncio.gather(*tasks)\n\n    print(f"\ucd1d \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n    # \ucd9c\ub825: \ucd1d \uc18c\uc694 \uc2dc\uac04: 2.00\ucd08\n\n# \uc2e4\ud589\nif __name__ == "__main__":\n    print("=== \ub3d9\uae30 \ubc29\uc2dd ===")\n    sync_main()\n\n    print("\\n=== \ube44\ub3d9\uae30 \ubc29\uc2dd ===")\n    asyncio.run(async_main())\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 I/O \ub300\uae30 \uc2dc\uac04\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ud65c\uc6a9\ud558\uc5ec \uc804\uccb4 \ucc98\ub9ac \uc2dc\uac04\uc744 \ud06c\uac8c \ub2e8\ucd95\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4."})}),"\n",(0,a.jsx)(e.h2,{id:"22-\ucf54\ub8e8\ud2f4-coroutines",children:"2.2 \ucf54\ub8e8\ud2f4 (Coroutines)"}),"\n",(0,a.jsxs)(e.p,{children:["\ucf54\ub8e8\ud2f4\uc740 ",(0,a.jsx)(e.code,{children:"async def"}),"\ub85c \uc815\uc758\ub41c \ud2b9\uc218\ud55c \ud568\uc218\ub85c, \uc2e4\ud589\uc744 \uc77c\uc2dc \uc911\uc9c0\ud558\uace0 \uc7ac\uac1c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]}),"\n",(0,a.jsx)(e.h3,{id:"\ucf54\ub8e8\ud2f4-\uae30\ubcf8",children:"\ucf54\ub8e8\ud2f4 \uae30\ubcf8"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\n# \ucf54\ub8e8\ud2f4 \ud568\uc218 \uc815\uc758\nasync def greet(name, delay):\n    await asyncio.sleep(delay)\n    return f"\uc548\ub155\ud558\uc138\uc694, {name}\ub2d8!"\n\n# \ucf54\ub8e8\ud2f4 \uac1d\uccb4 \uc0dd\uc131\ncoro = greet("\ucca0\uc218", 1)\nprint(type(coro))  # <class \'coroutine\'>\n\n# \ucf54\ub8e8\ud2f4 \uc2e4\ud589 \ubc29\ubc95 1: asyncio.run()\nresult = asyncio.run(greet("\uc601\ud76c", 1))\nprint(result)  # \uc548\ub155\ud558\uc138\uc694, \uc601\ud76c\ub2d8!\n\n# \ucf54\ub8e8\ud2f4 \uc2e4\ud589 \ubc29\ubc95 2: await (\ub2e4\ub978 \ucf54\ub8e8\ud2f4 \ub0b4\ubd80\uc5d0\uc11c)\nasync def main():\n    result1 = await greet("\ubbfc\uc218", 1)\n    result2 = await greet("\uc9c0\uc601", 1)\n    print(result1, result2)\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ucf54\ub8e8\ud2f4-\uccb4\uc774\ub2dd",children:"\ucf54\ub8e8\ud2f4 \uccb4\uc774\ub2dd"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'async def fetch_user(user_id):\n    print(f"\uc0ac\uc6a9\uc790 {user_id} \uc870\ud68c \uc911...")\n    await asyncio.sleep(1)\n    return {"id": user_id, "name": f"User{user_id}"}\n\nasync def fetch_user_posts(user):\n    print(f"{user[\'name\']}\uc758 \uac8c\uc2dc\ubb3c \uc870\ud68c \uc911...")\n    await asyncio.sleep(1)\n    return [f"Post{i}" for i in range(3)]\n\nasync def fetch_user_data(user_id):\n    # \uc21c\ucc28\uc801\uc73c\ub85c \uc2e4\ud589\n    user = await fetch_user(user_id)\n    posts = await fetch_user_posts(user)\n    return {"user": user, "posts": posts}\n\nasync def main():\n    data = await fetch_user_data(123)\n    print(data)\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"23-asyncio-\uae30\ucd08",children:"2.3 asyncio \uae30\ucd08"}),"\n",(0,a.jsx)(e.h3,{id:"\uc774\ubca4\ud2b8-\ub8e8\ud504-event-loop",children:"\uc774\ubca4\ud2b8 \ub8e8\ud504 (Event Loop)"}),"\n",(0,a.jsx)(e.p,{children:"\uc774\ubca4\ud2b8 \ub8e8\ud504\ub294 \ube44\ub3d9\uae30 \uc791\uc5c5\uc744 \uad00\ub9ac\ud558\uace0 \uc2e4\ud589\ud558\ub294 \ud575\uc2ec \uba54\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nasync def task1():\n    print("Task 1 \uc2dc\uc791")\n    await asyncio.sleep(2)\n    print("Task 1 \uc644\ub8cc")\n    return "\uacb0\uacfc 1"\n\nasync def task2():\n    print("Task 2 \uc2dc\uc791")\n    await asyncio.sleep(1)\n    print("Task 2 \uc644\ub8cc")\n    return "\uacb0\uacfc 2"\n\n# \ubc29\ubc95 1: asyncio.run() (Python 3.7+)\nasync def main():\n    result1 = await task1()\n    result2 = await task2()\n    print(f"\uacb0\uacfc: {result1}, {result2}")\n\nasyncio.run(main())\n\n# \ubc29\ubc95 2: \uc774\ubca4\ud2b8 \ub8e8\ud504 \uc9c1\uc811 \uc81c\uc5b4 (\uc774\uc804 \ubc29\uc2dd)\nasync def main_old():\n    await task1()\n    await task2()\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(main_old())\nfinally:\n    loop.close()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ud604\uc7ac-\uc2e4\ud589-\uc911\uc778-\uc774\ubca4\ud2b8-\ub8e8\ud504-\uc811\uadfc",children:"\ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \uc774\ubca4\ud2b8 \ub8e8\ud504 \uc811\uadfc"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'async def get_current_loop():\n    loop = asyncio.get_running_loop()\n    print(f"\ud604\uc7ac \ub8e8\ud504: {loop}")\n\n    # \ub8e8\ud504\uc5d0\uc11c \ucf5c\ubc31 \uc608\uc57d\n    loop.call_later(1, lambda: print("1\ucd08 \ud6c4 \uc2e4\ud589"))\n    await asyncio.sleep(2)\n\nasyncio.run(get_current_loop())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"24-asyncawait-\ubb38\ubc95",children:"2.4 async/await \ubb38\ubc95"}),"\n",(0,a.jsx)(e.h3,{id:"async-\ud568\uc218-\uc815\uc758",children:"async \ud568\uc218 \uc815\uc758"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# \uc77c\ubc18 \ud568\uc218\ndef normal_function():\n    return "\ub3d9\uae30 \ud568\uc218"\n\n# \ube44\ub3d9\uae30 \ud568\uc218 (\ucf54\ub8e8\ud2f4 \ud568\uc218)\nasync def async_function():\n    return "\ube44\ub3d9\uae30 \ud568\uc218"\n\n# async \ud568\uc218\ub294 \ucf54\ub8e8\ud2f4 \uac1d\uccb4\ub97c \ubc18\ud658\ncoro = async_function()\nprint(type(coro))  # <class \'coroutine\'>\n\n# \uc2e4\ud589\ud558\ub824\uba74 await \ub610\ub294 asyncio.run() \ud544\uc694\nresult = asyncio.run(async_function())\nprint(result)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"await-\ud45c\ud604\uc2dd",children:"await \ud45c\ud604\uc2dd"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport time\n\nasync def compute(x, y):\n    print(f"\uacc4\uc0b0 \uc2dc\uc791: {x} + {y}")\n    await asyncio.sleep(1)  # I/O \uc2dc\ubbac\ub808\uc774\uc158\n    result = x + y\n    print(f"\uacc4\uc0b0 \uc644\ub8cc: {result}")\n    return result\n\nasync def main():\n    # await\ub294 \ucf54\ub8e8\ud2f4\uc774 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9bc\n    result1 = await compute(5, 3)\n    print(f"\uacb0\uacfc 1: {result1}")\n\n    # \uc5ec\ub7ec await\ub97c \uc21c\ucc28\uc801\uc73c\ub85c \uc2e4\ud589\n    result2 = await compute(10, 20)\n    print(f"\uacb0\uacfc 2: {result2}")\n\n    total = result1 + result2\n    print(f"\ucd1d\ud569: {total}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"await-\uac00\ub2a5\ud55c-\uac1d\uccb4-awaitable",children:"await \uac00\ub2a5\ud55c \uac1d\uccb4 (Awaitable)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\n# 1. \ucf54\ub8e8\ud2f4\nasync def coro():\n    return "\ucf54\ub8e8\ud2f4"\n\n# 2. Task\nasync def task_example():\n    task = asyncio.create_task(coro())\n    return await task\n\n# 3. Future\nasync def future_example():\n    loop = asyncio.get_running_loop()\n    future = loop.create_future()\n\n    # \ub2e4\ub978 \uacf3\uc5d0\uc11c \uacb0\uacfc \uc124\uc815\n    loop.call_soon(future.set_result, "Future \uacb0\uacfc")\n\n    result = await future\n    return result\n\nasync def main():\n    print(await coro())\n    print(await task_example())\n    print(await future_example())\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"warning",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"await"}),"\ub294 \ubc18\ub4dc\uc2dc ",(0,a.jsx)(e.code,{children:"async"})," \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18 \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 SyntaxError\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4."]})}),"\n",(0,a.jsx)(e.h2,{id:"25-\ub3d9\uc2dc-\uc2e4\ud589-gather\uc640-create_task",children:"2.5 \ub3d9\uc2dc \uc2e4\ud589: gather()\uc640 create_task()"}),"\n",(0,a.jsx)(e.h3,{id:"asynciogather",children:"asyncio.gather()"}),"\n",(0,a.jsx)(e.p,{children:"\uc5ec\ub7ec \ucf54\ub8e8\ud2f4\uc744 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud558\uace0 \ubaa8\ub4e0 \uacb0\uacfc\ub97c \uae30\ub2e4\ub9bd\ub2c8\ub2e4."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport time\n\nasync def fetch_data(name, delay):\n    print(f"{name} \uc2dc\uc791")\n    await asyncio.sleep(delay)\n    print(f"{name} \uc644\ub8cc")\n    return f"{name} \ub370\uc774\ud130"\n\nasync def main():\n    start = time.time()\n\n    # \uc21c\ucc28 \uc2e4\ud589 (\ube44\ud6a8\uc728\uc801)\n    # result1 = await fetch_data("A", 2)\n    # result2 = await fetch_data("B", 1)\n    # result3 = await fetch_data("C", 3)\n\n    # \ub3d9\uc2dc \uc2e4\ud589 (\ud6a8\uc728\uc801)\n    results = await asyncio.gather(\n        fetch_data("A", 2),\n        fetch_data("B", 1),\n        fetch_data("C", 3)\n    )\n\n    print(f"\uacb0\uacfc: {results}")\n    print(f"\uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n\nasyncio.run(main())\n# \ucd9c\ub825:\n# A \uc2dc\uc791\n# B \uc2dc\uc791\n# C \uc2dc\uc791\n# B \uc644\ub8cc\n# A \uc644\ub8cc\n# C \uc644\ub8cc\n# \uacb0\uacfc: [\'A \ub370\uc774\ud130\', \'B \ub370\uc774\ud130\', \'C \ub370\uc774\ud130\']\n# \uc18c\uc694 \uc2dc\uac04: 3.00\ucd08\n'})}),"\n",(0,a.jsx)(e.h3,{id:"gather\uc758-\uc608\uc678-\ucc98\ub9ac",children:"gather()\uc758 \uc608\uc678 \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'async def task_success():\n    await asyncio.sleep(1)\n    return "\uc131\uacf5"\n\nasync def task_failure():\n    await asyncio.sleep(0.5)\n    raise ValueError("\uc5d0\ub7ec \ubc1c\uc0dd!")\n\nasync def main():\n    # return_exceptions=False (\uae30\ubcf8\uac12): \uccab \uc608\uc678\uc5d0\uc11c \uc911\ub2e8\n    try:\n        results = await asyncio.gather(\n            task_success(),\n            task_failure(),\n            task_success()\n        )\n    except ValueError as e:\n        print(f"\uc608\uc678 \ubc1c\uc0dd: {e}")\n\n    # return_exceptions=True: \uc608\uc678\ub97c \uacb0\uacfc\ub85c \ubc18\ud658\n    results = await asyncio.gather(\n        task_success(),\n        task_failure(),\n        task_success(),\n        return_exceptions=True\n    )\n\n    for i, result in enumerate(results):\n        if isinstance(result, Exception):\n            print(f"Task {i}: \uc5d0\ub7ec - {result}")\n        else:\n            print(f"Task {i}: {result}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"asynciocreate_task",children:"asyncio.create_task()"}),"\n",(0,a.jsx)(e.p,{children:"\ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \ucf54\ub8e8\ud2f4\uc744 \uc2e4\ud589\ud558\ub294 Task\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nasync def background_task(name, count):\n    for i in range(count):\n        print(f"{name}: {i+1}")\n        await asyncio.sleep(1)\n    return f"{name} \uc644\ub8cc"\n\nasync def main():\n    # Task \uc0dd\uc131 (\uc989\uc2dc \uc2e4\ud589 \uc2dc\uc791)\n    task1 = asyncio.create_task(background_task("Task1", 3))\n    task2 = asyncio.create_task(background_task("Task2", 2))\n\n    print("\ub2e4\ub978 \uc791\uc5c5 \uc218\ud589 \uc911...")\n    await asyncio.sleep(0.5)\n    print("\uc5ec\uc804\ud788 \ub2e4\ub978 \uc791\uc5c5 \uc911...")\n\n    # Task \uc644\ub8cc \ub300\uae30\n    result1 = await task1\n    result2 = await task2\n\n    print(f"\uacb0\uacfc: {result1}, {result2}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"task-\uad00\ub9ac",children:"Task \uad00\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nasync def long_running_task():\n    try:\n        await asyncio.sleep(10)\n        return "\uc644\ub8cc"\n    except asyncio.CancelledError:\n        print("Task\uac00 \ucde8\uc18c\ub418\uc5c8\uc2b5\ub2c8\ub2e4")\n        raise\n\nasync def main():\n    task = asyncio.create_task(long_running_task())\n\n    # Task \uc0c1\ud0dc \ud655\uc778\n    print(f"\uc644\ub8cc\ub428: {task.done()}")\n    print(f"\ucde8\uc18c\ub428: {task.cancelled()}")\n\n    await asyncio.sleep(1)\n\n    # Task \ucde8\uc18c\n    task.cancel()\n\n    try:\n        await task\n    except asyncio.CancelledError:\n        print("Task \ucde8\uc18c \ucc98\ub9ac\ub428")\n\n    print(f"\uc644\ub8cc\ub428: {task.done()}")\n    print(f"\ucde8\uc18c\ub428: {task.cancelled()}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"gather-vs-create_task",children:"gather() vs create_task()"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport time\n\nasync def task(name, delay):\n    await asyncio.sleep(delay)\n    return f"{name} \uc644\ub8cc"\n\nasync def with_gather():\n    start = time.time()\n    # \ubaa8\ub4e0 \ucf54\ub8e8\ud2f4\uc744 \ud55c \ubc88\uc5d0 \uc2e4\ud589\n    results = await asyncio.gather(\n        task("A", 1),\n        task("B", 2),\n        task("C", 1)\n    )\n    print(f"gather: {time.time() - start:.2f}\ucd08, \uacb0\uacfc: {results}")\n\nasync def with_create_task():\n    start = time.time()\n    # Task\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \uc0dd\uc131\ud558\uace0 \uad00\ub9ac\n    task_a = asyncio.create_task(task("A", 1))\n    task_b = asyncio.create_task(task("B", 2))\n    task_c = asyncio.create_task(task("C", 1))\n\n    # \uac1c\ubcc4\uc801\uc73c\ub85c \uacb0\uacfc \uc218\uc9d1 \uac00\ub2a5\n    result_a = await task_a\n    result_c = await task_c\n    result_b = await task_b\n\n    print(f"create_task: {time.time() - start:.2f}\ucd08")\n\nasyncio.run(with_gather())\nasyncio.run(with_create_task())\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"gather()"}),": \uc5ec\ub7ec \ucf54\ub8e8\ud2f4\uc744 \ud55c \ubc88\uc5d0 \uc2e4\ud589\ud558\uace0 \ubaa8\ub4e0 \uacb0\uacfc\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ubc1b\uc744 \ub54c"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"create_task()"}),": Task\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uace0 \uc2f6\uc744 \ub54c (\ucde8\uc18c, \uc0c1\ud0dc \ud655\uc778 \ub4f1)"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"26-\ube44\ub3d9\uae30-\ucee8\ud14d\uc2a4\ud2b8-\ub9e4\ub2c8\uc800",children:"2.6 \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800"}),"\n",(0,a.jsx)(e.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nclass AsyncResource:\n    async def __aenter__(self):\n        print("\ub9ac\uc18c\uc2a4 \ud68d\ub4dd")\n        await asyncio.sleep(1)\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        print("\ub9ac\uc18c\uc2a4 \ud574\uc81c")\n        await asyncio.sleep(1)\n        return False\n\n    async def query(self):\n        print("\ucffc\ub9ac \uc2e4\ud589")\n        await asyncio.sleep(0.5)\n        return "\uacb0\uacfc"\n\nasync def main():\n    async with AsyncResource() as resource:\n        result = await resource.query()\n        print(result)\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc2e4\uc6a9\uc801\uc778-\uc608\uc81c-\ube44\ub3d9\uae30-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\uacb0",children:"\uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \ube44\ub3d9\uae30 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom contextlib import asynccontextmanager\n\nclass AsyncDatabase:\n    def __init__(self, db_name):\n        self.db_name = db_name\n        self.connected = False\n\n    async def connect(self):\n        print(f"{self.db_name} \uc5f0\uacb0 \uc911...")\n        await asyncio.sleep(1)\n        self.connected = True\n        print(f"{self.db_name} \uc5f0\uacb0\ub428")\n\n    async def disconnect(self):\n        print(f"{self.db_name} \uc5f0\uacb0 \ud574\uc81c \uc911...")\n        await asyncio.sleep(0.5)\n        self.connected = False\n        print(f"{self.db_name} \uc5f0\uacb0 \ud574\uc81c\ub428")\n\n    async def execute(self, query):\n        if not self.connected:\n            raise RuntimeError("\ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4")\n        print(f"\ucffc\ub9ac \uc2e4\ud589: {query}")\n        await asyncio.sleep(0.5)\n        return f"\uacb0\uacfc: {query}"\n\n@asynccontextmanager\nasync def get_db_connection(db_name):\n    db = AsyncDatabase(db_name)\n    try:\n        await db.connect()\n        yield db\n    finally:\n        await db.disconnect()\n\nasync def main():\n    async with get_db_connection("MyDB") as db:\n        result1 = await db.execute("SELECT * FROM users")\n        result2 = await db.execute("SELECT * FROM posts")\n        print(result1)\n        print(result2)\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\ub3d9\uae30-\ub77d-lock",children:"\ube44\ub3d9\uae30 \ub77d (Lock)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nclass SharedCounter:\n    def __init__(self):\n        self.value = 0\n        self.lock = asyncio.Lock()\n\n    async def increment(self, name):\n        async with self.lock:\n            print(f"{name} \ub77d \ud68d\ub4dd")\n            temp = self.value\n            await asyncio.sleep(0.1)  # \ub3d9\uc2dc\uc131 \ubb38\uc81c \uc2dc\ubbac\ub808\uc774\uc158\n            self.value = temp + 1\n            print(f"{name} \uc644\ub8cc: {self.value}")\n\nasync def main():\n    counter = SharedCounter()\n\n    # \ub3d9\uc2dc\uc5d0 \uc5ec\ub7ec Task\uac00 \uce74\uc6b4\ud130 \uc99d\uac00\n    await asyncio.gather(\n        counter.increment("Task1"),\n        counter.increment("Task2"),\n        counter.increment("Task3")\n    )\n\n    print(f"\ucd5c\uc885 \uac12: {counter.value}")  # 3 (\ub77d\uc774 \uc5c6\uc73c\uba74 1\uc774 \ub420 \uc218 \uc788\uc74c)\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"27-\ube44\ub3d9\uae30-\uc774\ud130\ub808\uc774\ud130\uc640-\uc81c\ub108\ub808\uc774\ud130",children:"2.7 \ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130\uc640 \uc81c\ub108\ub808\uc774\ud130"}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\ub3d9\uae30-\uc774\ud130\ub808\uc774\ud130",children:"\ube44\ub3d9\uae30 \uc774\ud130\ub808\uc774\ud130"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nclass AsyncRange:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        if self.current >= self.end:\n            raise StopAsyncIteration\n\n        await asyncio.sleep(0.5)  # \ube44\ub3d9\uae30 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        value = self.current\n        self.current += 1\n        return value\n\nasync def main():\n    async for num in AsyncRange(1, 5):\n        print(f"\ubc1b\uc740 \uac12: {num}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\ub3d9\uae30-\uc81c\ub108\ub808\uc774\ud130",children:"\ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nasync def async_countdown(n):\n    """\ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130"""\n    while n > 0:\n        await asyncio.sleep(1)\n        yield n\n        n -= 1\n\nasync def main():\n    async for count in async_countdown(5):\n        print(f"\uce74\uc6b4\ud2b8\ub2e4\uc6b4: {count}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc2e4\uc6a9\uc801\uc778-\uc608\uc81c-\ube44\ub3d9\uae30-\ub370\uc774\ud130-\uc2a4\ud2b8\ub9ac\ubc0d",children:"\uc2e4\uc6a9\uc801\uc778 \uc608\uc81c: \ube44\ub3d9\uae30 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport random\n\nasync def fetch_data_stream(source):\n    """\ub370\uc774\ud130 \uc18c\uc2a4\uc5d0\uc11c \ube44\ub3d9\uae30\ub85c \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d"""\n    for i in range(5):\n        await asyncio.sleep(random.uniform(0.5, 1.5))\n        yield {\n            "source": source,\n            "index": i,\n            "data": f"\ub370\uc774\ud130_{i}",\n            "timestamp": asyncio.get_event_loop().time()\n        }\n\nasync def process_stream():\n    async for item in fetch_data_stream("API-A"):\n        print(f"\ucc98\ub9ac: {item[\'source\']} - {item[\'data\']}")\n\nasync def multiple_streams():\n    """\uc5ec\ub7ec \uc2a4\ud2b8\ub9bc\uc744 \ub3d9\uc2dc\uc5d0 \ucc98\ub9ac"""\n    async def consume_stream(source):\n        async for item in fetch_data_stream(source):\n            print(f"[{source}] {item[\'data\']}")\n\n    await asyncio.gather(\n        consume_stream("Stream-1"),\n        consume_stream("Stream-2"),\n        consume_stream("Stream-3")\n    )\n\nasyncio.run(multiple_streams())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\ub3d9\uae30-\ucef4\ud504\ub9ac\ud5e8\uc158",children:"\ube44\ub3d9\uae30 \ucef4\ud504\ub9ac\ud5e8\uc158"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nasync def async_square(x):\n    await asyncio.sleep(0.1)\n    return x * x\n\nasync def main():\n    # \ube44\ub3d9\uae30 \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\n    squares = [await async_square(x) for x in range(5)]\n    print(f"\uc81c\uacf1: {squares}")\n\n    # \ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130 \ud45c\ud604\uc2dd\n    async def async_range(n):\n        for i in range(n):\n            await asyncio.sleep(0.1)\n            yield i\n\n    # \ube44\ub3d9\uae30 \uc81c\ub108\ub808\uc774\ud130 \ucef4\ud504\ub9ac\ud5e8\uc158\n    doubled = [x * 2 async for x in async_range(5)]\n    print(f"\ub450 \ubc30: {doubled}")\n\n    # \uc870\uac74\ubd80 \ube44\ub3d9\uae30 \ucef4\ud504\ub9ac\ud5e8\uc158\n    evens = [x async for x in async_range(10) if x % 2 == 0]\n    print(f"\uc9dd\uc218: {evens}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"28-aiohttp\ub85c-\ube44\ub3d9\uae30-http-\uc694\uccad",children:"2.8 aiohttp\ub85c \ube44\ub3d9\uae30 HTTP \uc694\uccad"}),"\n",(0,a.jsx)(e.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95-1",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\n\nasync def fetch_url(session, url):\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        html = await fetch_url(session, "https://api.github.com")\n        print(html[:200])  # \ucc98\uc74c 200\uc790 \ucd9c\ub825\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc5ec\ub7ec-url-\ub3d9\uc2dc-\uc694\uccad",children:"\uc5ec\ub7ec URL \ub3d9\uc2dc \uc694\uccad"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nimport time\n\nasync def fetch_json(session, url):\n    try:\n        async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:\n            response.raise_for_status()\n            return await response.json()\n    except asyncio.TimeoutError:\n        return {"error": "Timeout"}\n    except aiohttp.ClientError as e:\n        return {"error": str(e)}\n\nasync def fetch_multiple_urls():\n    urls = [\n        "https://api.github.com/users/github",\n        "https://api.github.com/users/microsoft",\n        "https://api.github.com/users/google",\n        "https://api.github.com/users/facebook",\n    ]\n\n    start = time.time()\n\n    async with aiohttp.ClientSession() as session:\n        tasks = [fetch_json(session, url) for url in urls]\n        results = await asyncio.gather(*tasks)\n\n        for url, result in zip(urls, results):\n            if "error" in result:\n                print(f"{url}: \uc5d0\ub7ec - {result[\'error\']}")\n            else:\n                print(f"{url}: {result.get(\'login\', \'Unknown\')}")\n\n    print(f"\ucd1d \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n\nasyncio.run(fetch_multiple_urls())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"post-\uc694\uccad\uacfc-\ud5e4\ub354-\uc124\uc815",children:"POST \uc694\uccad\uacfc \ud5e4\ub354 \uc124\uc815"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\n\nasync def post_data():\n    url = "https://httpbin.org/post"\n    headers = {\n        "Content-Type": "application/json",\n        "User-Agent": "AsyncPython/1.0"\n    }\n    data = {\n        "name": "\ud64d\uae38\ub3d9",\n        "age": 30,\n        "skills": ["Python", "JavaScript"]\n    }\n\n    async with aiohttp.ClientSession() as session:\n        async with session.post(url, json=data, headers=headers) as response:\n            result = await response.json()\n            print("\uc751\ub2f5:", result)\n\nasyncio.run(post_data())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc9c4\ud589\ub960-\ucd94\uc801-\ubc0f-\uc18d\ub3c4-\uc81c\ud55c",children:"\uc9c4\ud589\ub960 \ucd94\uc801 \ubc0f \uc18d\ub3c4 \uc81c\ud55c"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nfrom typing import List\n\nclass RateLimiter:\n    def __init__(self, rate: int):\n        self.rate = rate\n        self.semaphore = asyncio.Semaphore(rate)\n\n    async def __aenter__(self):\n        await self.semaphore.acquire()\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        self.semaphore.release()\n\nasync def fetch_with_progress(session, url, limiter, index, total):\n    async with limiter:\n        async with session.get(url) as response:\n            data = await response.text()\n            print(f"\uc9c4\ud589\ub960: {index + 1}/{total} - {url}")\n            return data\n\nasync def fetch_all_with_limit(urls: List[str], max_concurrent: int = 5):\n    limiter = RateLimiter(max_concurrent)\n\n    async with aiohttp.ClientSession() as session:\n        tasks = [\n            fetch_with_progress(session, url, limiter, i, len(urls))\n            for i, url in enumerate(urls)\n        ]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n    return results\n\n# \uc0ac\uc6a9 \uc608\uc81c\nurls = [f"https://httpbin.org/delay/1?id={i}" for i in range(10)]\nasyncio.run(fetch_all_with_limit(urls, max_concurrent=3))\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc138\uc158-\uc7ac\uc0ac\uc6a9\uacfc-\ucee4\ub125\uc158-\ud480\ub9c1",children:"\uc138\uc158 \uc7ac\uc0ac\uc6a9\uacfc \ucee4\ub125\uc158 \ud480\ub9c1"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\n\nclass APIClient:\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n        self.session = None\n\n    async def __aenter__(self):\n        connector = aiohttp.TCPConnector(limit=100, limit_per_host=30)\n        timeout = aiohttp.ClientTimeout(total=30)\n        self.session = aiohttp.ClientSession(\n            connector=connector,\n            timeout=timeout\n        )\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.session.close()\n\n    async def get(self, endpoint: str):\n        url = f"{self.base_url}{endpoint}"\n        async with self.session.get(url) as response:\n            return await response.json()\n\nasync def main():\n    async with APIClient("https://api.github.com") as client:\n        user1 = await client.get("/users/github")\n        user2 = await client.get("/users/microsoft")\n        print(user1.get("login"), user2.get("login"))\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsxs)(e.p,{children:["aiohttp\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 ",(0,a.jsx)(e.code,{children:"ClientSession"}),"\uc744 \uc7ac\uc0ac\uc6a9\ud558\uba74 \ucee4\ub125\uc158 \ud480\ub9c1\uc73c\ub85c \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4."]})}),"\n",(0,a.jsx)(e.h2,{id:"29-\ube44\ub3d9\uae30-\ud30c\uc77c-io",children:"2.9 \ube44\ub3d9\uae30 \ud30c\uc77c I/O"}),"\n",(0,a.jsx)(e.h3,{id:"aiofiles-\ub77c\uc774\ube0c\ub7ec\ub9ac",children:"aiofiles \ub77c\uc774\ube0c\ub7ec\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiofiles\n\nasync def write_file(filename, content):\n    async with aiofiles.open(filename, \'w\', encoding=\'utf-8\') as f:\n        await f.write(content)\n        print(f"{filename} \uc4f0\uae30 \uc644\ub8cc")\n\nasync def read_file(filename):\n    async with aiofiles.open(filename, \'r\', encoding=\'utf-8\') as f:\n        content = await f.read()\n        print(f"{filename} \uc77d\uae30 \uc644\ub8cc")\n        return content\n\nasync def main():\n    # \uc5ec\ub7ec \ud30c\uc77c\uc744 \ub3d9\uc2dc\uc5d0 \ucc98\ub9ac\n    await asyncio.gather(\n        write_file("file1.txt", "\ub0b4\uc6a9 1"),\n        write_file("file2.txt", "\ub0b4\uc6a9 2"),\n        write_file("file3.txt", "\ub0b4\uc6a9 3")\n    )\n\n    contents = await asyncio.gather(\n        read_file("file1.txt"),\n        read_file("file2.txt"),\n        read_file("file3.txt")\n    )\n\n    for content in contents:\n        print(content)\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ub300\uc6a9\ub7c9-\ud30c\uc77c-\ucc98\ub9ac",children:"\ub300\uc6a9\ub7c9 \ud30c\uc77c \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiofiles\n\nasync def process_large_file(input_file, output_file):\n    """\ub300\uc6a9\ub7c9 \ud30c\uc77c\uc744 \uc904 \ub2e8\uc704\ub85c \ube44\ub3d9\uae30 \ucc98\ub9ac"""\n    async with aiofiles.open(input_file, \'r\', encoding=\'utf-8\') as infile:\n        async with aiofiles.open(output_file, \'w\', encoding=\'utf-8\') as outfile:\n            line_count = 0\n            async for line in infile:\n                # \uac01 \uc904 \ucc98\ub9ac (\uc608: \ub300\ubb38\uc790 \ubcc0\ud658)\n                processed = line.upper()\n                await outfile.write(processed)\n                line_count += 1\n\n                if line_count % 1000 == 0:\n                    print(f"\ucc98\ub9ac\ub41c \uc904 \uc218: {line_count}")\n\n    print(f"\ucd1d {line_count}\uc904 \ucc98\ub9ac \uc644\ub8cc")\n\nasync def batch_process_files(file_pairs):\n    """\uc5ec\ub7ec \ud30c\uc77c\uc744 \ub3d9\uc2dc\uc5d0 \ucc98\ub9ac"""\n    tasks = [\n        process_large_file(input_file, output_file)\n        for input_file, output_file in file_pairs\n    ]\n    await asyncio.gather(*tasks)\n\n# \uc0ac\uc6a9 \uc608\uc81c\nfile_pairs = [\n    ("input1.txt", "output1.txt"),\n    ("input2.txt", "output2.txt"),\n    ("input3.txt", "output3.txt")\n]\n# asyncio.run(batch_process_files(file_pairs))\n'})}),"\n",(0,a.jsx)(e.h3,{id:"json-\ud30c\uc77c-\ube44\ub3d9\uae30-\ucc98\ub9ac",children:"JSON \ud30c\uc77c \ube44\ub3d9\uae30 \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiofiles\nimport json\n\nasync def save_json(filename, data):\n    async with aiofiles.open(filename, \'w\', encoding=\'utf-8\') as f:\n        await f.write(json.dumps(data, ensure_ascii=False, indent=2))\n\nasync def load_json(filename):\n    async with aiofiles.open(filename, \'r\', encoding=\'utf-8\') as f:\n        content = await f.read()\n        return json.loads(content)\n\nasync def main():\n    data = {\n        "name": "\ud64d\uae38\ub3d9",\n        "age": 30,\n        "skills": ["Python", "JavaScript", "Go"]\n    }\n\n    await save_json("user.json", data)\n    loaded_data = await load_json("user.json")\n    print(loaded_data)\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.admonition,{type:"warning",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"aiofiles"}),"\ub294 \ubcc4\ub3c4\ub85c \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4: ",(0,a.jsx)(e.code,{children:"pip install aiofiles"})]})}),"\n",(0,a.jsx)(e.h2,{id:"210-threading-vs-multiprocessing-vs-asyncio",children:"2.10 Threading vs Multiprocessing vs Asyncio"}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\uad50-\uac1c\uc694",children:"\ube44\uad50 \uac1c\uc694"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"\ud2b9\uc9d5"}),(0,a.jsx)(e.th,{children:"Threading"}),(0,a.jsx)(e.th,{children:"Multiprocessing"}),(0,a.jsx)(e.th,{children:"Asyncio"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"\ub3d9\uc2dc\uc131 \uc720\ud615"}),(0,a.jsx)(e.td,{children:"\uc2a4\ub808\ub4dc \uae30\ubc18"}),(0,a.jsx)(e.td,{children:"\ud504\ub85c\uc138\uc2a4 \uae30\ubc18"}),(0,a.jsx)(e.td,{children:"\ucf54\ub8e8\ud2f4 \uae30\ubc18"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"GIL \uc601\ud5a5"}),(0,a.jsx)(e.td,{children:"\ubc1b\uc74c"}),(0,a.jsx)(e.td,{children:"\ubc1b\uc9c0 \uc54a\uc74c"}),(0,a.jsx)(e.td,{children:"\ubc1b\uc74c"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"\uba54\ubaa8\ub9ac"}),(0,a.jsx)(e.td,{children:"\uacf5\uc720"}),(0,a.jsx)(e.td,{children:"\ub3c5\ub9bd"}),(0,a.jsx)(e.td,{children:"\uacf5\uc720"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"\uc801\ud569\ud55c \uc791\uc5c5"}),(0,a.jsx)(e.td,{children:"I/O \ubc14\uc6b4\ub4dc"}),(0,a.jsx)(e.td,{children:"CPU \ubc14\uc6b4\ub4dc"}),(0,a.jsx)(e.td,{children:"I/O \ubc14\uc6b4\ub4dc"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"\uc624\ubc84\ud5e4\ub4dc"}),(0,a.jsx)(e.td,{children:"\uc911\uac04"}),(0,a.jsx)(e.td,{children:"\ub192\uc74c"}),(0,a.jsx)(e.td,{children:"\ub0ae\uc74c"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"\ub514\ubc84\uae45"}),(0,a.jsx)(e.td,{children:"\uc5b4\ub824\uc6c0"}),(0,a.jsx)(e.td,{children:"\uc5b4\ub824\uc6c0"}),(0,a.jsx)(e.td,{children:"\uc0c1\ub300\uc801\uc73c\ub85c \uc26c\uc6c0"})]})]})]}),"\n",(0,a.jsx)(e.h3,{id:"threading-\uc608\uc81c",children:"Threading \uc608\uc81c"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import threading\nimport time\n\ndef download_file(file_id):\n    print(f"\ud30c\uc77c {file_id} \ub2e4\uc6b4\ub85c\ub4dc \uc2dc\uc791")\n    time.sleep(2)\n    print(f"\ud30c\uc77c {file_id} \ub2e4\uc6b4\ub85c\ub4dc \uc644\ub8cc")\n\ndef threading_example():\n    start = time.time()\n    threads = []\n\n    for i in range(5):\n        thread = threading.Thread(target=download_file, args=(i,))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    print(f"Threading \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n\nthreading_example()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"multiprocessing-\uc608\uc81c",children:"Multiprocessing \uc608\uc81c"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import multiprocessing\nimport time\n\ndef cpu_intensive_task(n):\n    """CPU \uc9d1\uc57d\uc801 \uc791\uc5c5: \uc18c\uc218 \ucc3e\uae30"""\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n\ndef multiprocessing_example():\n    start = time.time()\n\n    with multiprocessing.Pool(processes=4) as pool:\n        results = pool.map(cpu_intensive_task, [100000, 100000, 100000, 100000])\n\n    print(f"\uc18c\uc218 \uac1c\uc218: {sum(results)}")\n    print(f"Multiprocessing \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n\nif __name__ == "__main__":\n    multiprocessing_example()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"asyncio-\uc608\uc81c",children:"Asyncio \uc608\uc81c"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport time\n\nasync def io_task(task_id):\n    print(f"\uc791\uc5c5 {task_id} \uc2dc\uc791")\n    await asyncio.sleep(2)\n    print(f"\uc791\uc5c5 {task_id} \uc644\ub8cc")\n    return f"\uacb0\uacfc {task_id}"\n\nasync def asyncio_example():\n    start = time.time()\n\n    results = await asyncio.gather(\n        io_task(1),\n        io_task(2),\n        io_task(3),\n        io_task(4),\n        io_task(5)\n    )\n\n    print(f"Asyncio \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n    print(f"\uacb0\uacfc: {results}")\n\nasyncio.run(asyncio_example())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc131\ub2a5-\ube44\uad50-\ud14c\uc2a4\ud2b8",children:"\uc131\ub2a5 \ube44\uad50 \ud14c\uc2a4\ud2b8"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport threading\nimport multiprocessing\nimport time\nimport requests\n\ndef sync_download(url):\n    response = requests.get(url)\n    return len(response.content)\n\ndef threading_test(urls):\n    start = time.time()\n    threads = []\n    results = []\n\n    def worker(url):\n        result = sync_download(url)\n        results.append(result)\n\n    for url in urls:\n        thread = threading.Thread(target=worker, args=(url,))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    return time.time() - start\n\nasync def async_download(session, url):\n    async with session.get(url) as response:\n        content = await response.read()\n        return len(content)\n\nasync def asyncio_test(urls):\n    start = time.time()\n\n    async with aiohttp.ClientSession() as session:\n        tasks = [async_download(session, url) for url in urls]\n        results = await asyncio.gather(*tasks)\n\n    return time.time() - start\n\n# \ube44\uad50 \uc2e4\ud589\nurls = ["https://httpbin.org/delay/1"] * 10\n\nprint("Threading \ubc29\uc2dd:")\nt_time = threading_test(urls)\nprint(f"\uc18c\uc694 \uc2dc\uac04: {t_time:.2f}\ucd08")\n\nprint("\\nAsyncio \ubc29\uc2dd:")\na_time = asyncio.run(asyncio_test(urls))\nprint(f"\uc18c\uc694 \uc2dc\uac04: {a_time:.2f}\ucd08")\n'})}),"\n",(0,a.jsx)(e.h2,{id:"211-\uc5b8\uc81c-\ube44\ub3d9\uae30\ub97c-\uc0ac\uc6a9\ud560\uae4c",children:"2.11 \uc5b8\uc81c \ube44\ub3d9\uae30\ub97c \uc0ac\uc6a9\ud560\uae4c?"}),"\n",(0,a.jsx)(e.h3,{id:"io-\ubc14\uc6b4\ub4dc-vs-cpu-\ubc14\uc6b4\ub4dc",children:"I/O \ubc14\uc6b4\ub4dc vs CPU \ubc14\uc6b4\ub4dc"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport time\n\n# I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5 - \ube44\ub3d9\uae30\uc5d0 \uc801\ud569\nasync def io_bound_task():\n    """\ub124\ud2b8\uc6cc\ud06c, \ud30c\uc77c, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1\uc758 I/O \ub300\uae30 \uc2dc\uac04\uc774 \ub9ce\uc740 \uc791\uc5c5"""\n    await asyncio.sleep(1)  # I/O \ub300\uae30 \uc2dc\ubbac\ub808\uc774\uc158\n    return "I/O \uacb0\uacfc"\n\n# CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5 - \ube44\ub3d9\uae30\uc5d0 \ubd80\uc801\ud569\ndef cpu_bound_task():\n    """\ubcf5\uc7a1\ud55c \uacc4\uc0b0, \ub370\uc774\ud130 \ucc98\ub9ac \ub4f1 CPU\ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \uc791\uc5c5"""\n    result = 0\n    for i in range(10_000_000):\n        result += i\n    return result\n\nasync def wrong_approach():\n    """\uc798\ubabb\ub41c \uc811\uadfc: CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc5d0 asyncio \uc0ac\uc6a9"""\n    start = time.time()\n\n    # CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud574\ub3c4 GIL \ub54c\ubb38\uc5d0 \ube68\ub77c\uc9c0\uc9c0 \uc54a\uc74c\n    tasks = [asyncio.to_thread(cpu_bound_task) for _ in range(4)]\n    await asyncio.gather(*tasks)\n\n    print(f"\uc798\ubabb\ub41c \uc811\uadfc \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n\nasync def correct_approach():\n    """\uc62c\ubc14\ub978 \uc811\uadfc: I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc5d0 asyncio \uc0ac\uc6a9"""\n    start = time.time()\n\n    tasks = [io_bound_task() for _ in range(4)]\n    await asyncio.gather(*tasks)\n\n    print(f"\uc62c\ubc14\ub978 \uc811\uadfc \uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")\n\nasyncio.run(correct_approach())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\ub3d9\uae30-\uc0ac\uc6a9\uc774-\uc801\ud569\ud55c-\uacbd\uc6b0",children:"\ube44\ub3d9\uae30 \uc0ac\uc6a9\uc774 \uc801\ud569\ud55c \uacbd\uc6b0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'"""\n\u2705 \ube44\ub3d9\uae30 \uc0ac\uc6a9\uc774 \uc801\ud569\ud55c \uacbd\uc6b0:\n\n1. \uc6f9 API \uc694\uccad\n2. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac\n3. \ud30c\uc77c I/O\n4. \ub124\ud2b8\uc6cc\ud06c \ud1b5\uc2e0\n5. \uc6f9 \uc2a4\ud06c\ub798\ud551\n6. \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0\n7. \uc6f9\uc18c\ucf13 \uc5f0\uacb0\n8. \uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d\n"""\n\nimport asyncio\nimport aiohttp\n\nasync def good_use_case():\n    """\uc5ec\ub7ec API\ub97c \ub3d9\uc2dc\uc5d0 \ud638\ucd9c"""\n    async with aiohttp.ClientSession() as session:\n        tasks = [\n            fetch_user_data(session, user_id)\n            for user_id in range(1, 11)\n        ]\n        results = await asyncio.gather(*tasks)\n        return results\n\nasync def fetch_user_data(session, user_id):\n    url = f"https://jsonplaceholder.typicode.com/users/{user_id}"\n    async with session.get(url) as response:\n        return await response.json()\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\ub3d9\uae30-\uc0ac\uc6a9\uc774-\ubd80\uc801\ud569\ud55c-\uacbd\uc6b0",children:"\ube44\ub3d9\uae30 \uc0ac\uc6a9\uc774 \ubd80\uc801\ud569\ud55c \uacbd\uc6b0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'"""\n\u274c \ube44\ub3d9\uae30 \uc0ac\uc6a9\uc774 \ubd80\uc801\ud569\ud55c \uacbd\uc6b0:\n\n1. CPU \uc9d1\uc57d\uc801 \uacc4\uc0b0 (\uc774\ubbf8\uc9c0 \ucc98\ub9ac, \uba38\uc2e0\ub7ec\ub2dd \ub4f1)\n2. \ub2e8\uc21c\ud55c \uc21c\ucc28 \uc791\uc5c5\n3. \ub3d9\uae30 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub9cc \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uacbd\uc6b0\n4. \ubcf5\uc7a1\ub3c4\uac00 \uc774\ub4dd\ubcf4\ub2e4 \ud070 \uacbd\uc6b0\n"""\n\nimport multiprocessing\n\ndef bad_use_case():\n    """CPU \uc9d1\uc57d\uc801 \uc791\uc5c5\uc740 multiprocessing \uc0ac\uc6a9"""\n    with multiprocessing.Pool() as pool:\n        results = pool.map(complex_calculation, range(10))\n        return results\n\ndef complex_calculation(n):\n    # \ubcf5\uc7a1\ud55c \uacc4\uc0b0\n    return sum(i * i for i in range(n * 1000000))\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ud558\uc774\ube0c\ub9ac\ub4dc-\uc811\uadfc",children:"\ud558\uc774\ube0c\ub9ac\ub4dc \uc811\uadfc"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom concurrent.futures import ProcessPoolExecutor\n\nasync def hybrid_approach():\n    """I/O\uc640 CPU \uc791\uc5c5\uc744 \ubaa8\ub450 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac"""\n    loop = asyncio.get_event_loop()\n\n    # I/O \uc791\uc5c5\uc740 \ube44\ub3d9\uae30\ub85c\n    io_tasks = [fetch_data(i) for i in range(5)]\n\n    # CPU \uc791\uc5c5\uc740 \ud504\ub85c\uc138\uc2a4 \ud480\ub85c\n    with ProcessPoolExecutor() as executor:\n        cpu_tasks = [\n            loop.run_in_executor(executor, cpu_intensive, data)\n            for data in range(5)\n        ]\n\n        # \ubaa8\ub4e0 \uc791\uc5c5 \ub3d9\uc2dc \uc2e4\ud589\n        io_results = await asyncio.gather(*io_tasks)\n        cpu_results = await asyncio.gather(*cpu_tasks)\n\n    return io_results, cpu_results\n\nasync def fetch_data(n):\n    await asyncio.sleep(1)\n    return f"Data {n}"\n\ndef cpu_intensive(n):\n    return sum(i * i for i in range(n * 1000000))\n\n# asyncio.run(hybrid_approach())\n'})}),"\n",(0,a.jsx)(e.admonition,{title:"\uc120\ud0dd \uac00\uc774\ub4dc",type:"tip",children:(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"I/O \ub300\uae30\uac00 \ub9ce\uc74c"})," \u2192 Asyncio"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"CPU \uacc4\uc0b0\uc774 \ub9ce\uc74c"})," \u2192 Multiprocessing"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"I/O\uc640 CPU \ubaa8\ub450"})," \u2192 \ud558\uc774\ube0c\ub9ac\ub4dc \uc811\uadfc"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\uac04\ub2e8\ud55c \ubcd1\ub82c\ud654"})," \u2192 Threading (\ub2e8, GIL \uc81c\uc57d \uace0\ub824)"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"212-\uc2e4\uc804-\uc608\uc81c",children:"2.12 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,a.jsx)(e.h3,{id:"\uc6f9-\uc2a4\ud06c\ub798\ud551",children:"\uc6f9 \uc2a4\ud06c\ub798\ud551"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nfrom bs4 import BeautifulSoup\nfrom typing import List, Dict\n\nclass AsyncWebScraper:\n    def __init__(self, max_concurrent: int = 5):\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n        self.session = None\n\n    async def __aenter__(self):\n        self.session = aiohttp.ClientSession()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.session.close()\n\n    async def fetch_page(self, url: str) -> str:\n        async with self.semaphore:\n            try:\n                async with self.session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:\n                    return await response.text()\n            except Exception as e:\n                print(f"\uc5d0\ub7ec \ubc1c\uc0dd ({url}): {e}")\n                return ""\n\n    async def scrape_article(self, url: str) -> Dict:\n        html = await self.fetch_page(url)\n        if not html:\n            return {"url": url, "title": None, "error": "Failed to fetch"}\n\n        soup = BeautifulSoup(html, \'html.parser\')\n        title = soup.find(\'title\')\n\n        return {\n            "url": url,\n            "title": title.text.strip() if title else "No title",\n            "length": len(html)\n        }\n\n    async def scrape_multiple(self, urls: List[str]) -> List[Dict]:\n        tasks = [self.scrape_article(url) for url in urls]\n        return await asyncio.gather(*tasks)\n\nasync def main():\n    urls = [\n        "https://example.com",\n        "https://python.org",\n        "https://github.com",\n    ]\n\n    async with AsyncWebScraper(max_concurrent=3) as scraper:\n        results = await scraper.scrape_multiple(urls)\n\n        for result in results:\n            print(f"URL: {result[\'url\']}")\n            print(f"\uc81c\ubaa9: {result[\'title\']}")\n            print(f"\ud06c\uae30: {result[\'length\']} bytes")\n            print("-" * 50)\n\n# asyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc5ec\ub7ec-api-\ub3d9\uc2dc-\ud638\ucd9c",children:"\uc5ec\ub7ec API \ub3d9\uc2dc \ud638\ucd9c"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nfrom typing import List, Dict, Any\nfrom dataclasses import dataclass\nimport time\n\n@dataclass\nclass APIResponse:\n    source: str\n    data: Any\n    duration: float\n    success: bool\n    error: str = None\n\nclass MultiAPIClient:\n    def __init__(self):\n        self.session = None\n\n    async def __aenter__(self):\n        self.session = aiohttp.ClientSession()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.session.close()\n\n    async def call_api(self, name: str, url: str, params: Dict = None) -> APIResponse:\n        start = time.time()\n\n        try:\n            async with self.session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:\n                data = await response.json()\n                duration = time.time() - start\n\n                return APIResponse(\n                    source=name,\n                    data=data,\n                    duration=duration,\n                    success=True\n                )\n        except Exception as e:\n            duration = time.time() - start\n            return APIResponse(\n                source=name,\n                data=None,\n                duration=duration,\n                success=False,\n                error=str(e)\n            )\n\n    async def aggregate_user_data(self, user_id: int) -> Dict:\n        """\uc5ec\ub7ec API\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \ub3d9\uc2dc\uc5d0 \uac00\uc838\uc640 \uc9d1\uacc4"""\n        tasks = [\n            self.call_api(\n                "UserInfo",\n                f"https://jsonplaceholder.typicode.com/users/{user_id}"\n            ),\n            self.call_api(\n                "UserPosts",\n                f"https://jsonplaceholder.typicode.com/posts",\n                params={"userId": user_id}\n            ),\n            self.call_api(\n                "UserTodos",\n                f"https://jsonplaceholder.typicode.com/todos",\n                params={"userId": user_id}\n            )\n        ]\n\n        results = await asyncio.gather(*tasks)\n\n        # \uacb0\uacfc \uc9d1\uacc4\n        aggregated = {\n            "user_id": user_id,\n            "responses": {}\n        }\n\n        for result in results:\n            aggregated["responses"][result.source] = {\n                "success": result.success,\n                "duration": f"{result.duration:.2f}s",\n                "data": result.data if result.success else None,\n                "error": result.error\n            }\n\n        return aggregated\n\nasync def main():\n    async with MultiAPIClient() as client:\n        # \uc5ec\ub7ec \uc0ac\uc6a9\uc790\uc758 \ub370\uc774\ud130\ub97c \ub3d9\uc2dc\uc5d0 \uac00\uc838\uc624\uae30\n        user_ids = [1, 2, 3]\n\n        tasks = [client.aggregate_user_data(uid) for uid in user_ids]\n        results = await asyncio.gather(*tasks)\n\n        for result in results:\n            print(f"\\n\uc0ac\uc6a9\uc790 {result[\'user_id\']} \ub370\uc774\ud130:")\n            for api_name, api_result in result[\'responses\'].items():\n                status = "\u2713" if api_result[\'success\'] else "\u2717"\n                print(f"  {status} {api_name}: {api_result[\'duration\']}")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ub3d9\uc2dc-\ud30c\uc77c-\ucc98\ub9ac",children:"\ub3d9\uc2dc \ud30c\uc77c \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiofiles\nimport os\nfrom pathlib import Path\nfrom typing import List\nimport hashlib\n\nclass AsyncFileProcessor:\n    def __init__(self, input_dir: str, output_dir: str):\n        self.input_dir = Path(input_dir)\n        self.output_dir = Path(output_dir)\n        self.output_dir.mkdir(exist_ok=True)\n\n    async def process_file(self, file_path: Path) -> Dict:\n        """\ud30c\uc77c\uc744 \uc77d\uace0 \ucc98\ub9ac\ud55c \ud6c4 \uacb0\uacfc\ub97c \uc800\uc7a5"""\n        print(f"\ucc98\ub9ac \uc2dc\uc791: {file_path.name}")\n\n        # \ud30c\uc77c \uc77d\uae30\n        async with aiofiles.open(file_path, \'r\', encoding=\'utf-8\') as f:\n            content = await f.read()\n\n        # \ucc98\ub9ac (\uc608: \ub300\ubb38\uc790 \ubcc0\ud658, \ud574\uc2dc \uacc4\uc0b0)\n        processed = content.upper()\n        file_hash = hashlib.md5(content.encode()).hexdigest()\n\n        # \uacb0\uacfc \uc800\uc7a5\n        output_path = self.output_dir / f"processed_{file_path.name}"\n        async with aiofiles.open(output_path, \'w\', encoding=\'utf-8\') as f:\n            await f.write(processed)\n\n        print(f"\ucc98\ub9ac \uc644\ub8cc: {file_path.name}")\n\n        return {\n            "input": str(file_path),\n            "output": str(output_path),\n            "hash": file_hash,\n            "size": len(content)\n        }\n\n    async def process_directory(self, pattern: str = "*.txt") -> List[Dict]:\n        """\ub514\ub809\ud1a0\ub9ac\uc758 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \ub3d9\uc2dc\uc5d0 \ucc98\ub9ac"""\n        files = list(self.input_dir.glob(pattern))\n\n        if not files:\n            print("\ucc98\ub9ac\ud560 \ud30c\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4")\n            return []\n\n        print(f"{len(files)}\uac1c \ud30c\uc77c \ucc98\ub9ac \uc2dc\uc791...")\n\n        tasks = [self.process_file(file) for file in files]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # \uc131\uacf5/\uc2e4\ud328 \ubd84\ub958\n        successful = [r for r in results if isinstance(r, dict)]\n        failed = [r for r in results if isinstance(r, Exception)]\n\n        print(f"\\n\ucc98\ub9ac \uc644\ub8cc: {len(successful)}\uac1c \uc131\uacf5, {len(failed)}\uac1c \uc2e4\ud328")\n\n        return successful\n\nasync def main():\n    # \uc608\uc81c \ud30c\uc77c \uc0dd\uc131\n    input_dir = Path("input_files")\n    input_dir.mkdir(exist_ok=True)\n\n    for i in range(5):\n        async with aiofiles.open(input_dir / f"file{i}.txt", \'w\') as f:\n            await f.write(f"\ud30c\uc77c {i}\uc758 \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\\n" * 10)\n\n    # \ud30c\uc77c \ucc98\ub9ac\n    processor = AsyncFileProcessor("input_files", "output_files")\n    results = await processor.process_directory()\n\n    # \uacb0\uacfc \ucd9c\ub825\n    for result in results:\n        print(f"\uc785\ub825: {result[\'input\']}")\n        print(f"\ucd9c\ub825: {result[\'output\']}")\n        print(f"\ud574\uc2dc: {result[\'hash\']}")\n        print(f"\ud06c\uae30: {result[\'size\']} bytes")\n        print("-" * 50)\n\n# asyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc2e4\uc2dc\uac04-\ub370\uc774\ud130-\ubaa8\ub2c8\ud130\ub9c1",children:"\uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport random\nfrom datetime import datetime\nfrom typing import AsyncGenerator\n\nclass DataMonitor:\n    def __init__(self, source_name: str):\n        self.source_name = source_name\n        self.is_running = False\n\n    async def stream_data(self) -> AsyncGenerator[Dict, None]:\n        """\uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9ac\ubc0d"""\n        self.is_running = True\n        counter = 0\n\n        while self.is_running:\n            # \uc13c\uc11c \ub370\uc774\ud130 \uc2dc\ubbac\ub808\uc774\uc158\n            data = {\n                "source": self.source_name,\n                "timestamp": datetime.now().isoformat(),\n                "value": random.uniform(20, 30),\n                "status": random.choice(["normal", "warning", "critical"]),\n                "count": counter\n            }\n\n            yield data\n            counter += 1\n            await asyncio.sleep(random.uniform(0.5, 2.0))\n\n    def stop(self):\n        self.is_running = False\n\nasync def monitor_source(monitor: DataMonitor, duration: int):\n    """\ud2b9\uc815 \uc18c\uc2a4\ub97c \ubaa8\ub2c8\ud130\ub9c1"""\n    print(f"{monitor.source_name} \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791")\n\n    async for data in monitor.stream_data():\n        status_icon = {\n            "normal": "\u2713",\n            "warning": "\u26a0",\n            "critical": "\u2717"\n        }.get(data["status"], "?")\n\n        print(f"{status_icon} [{data[\'source\']}] "\n              f"\uac12: {data[\'value\']:.2f}, "\n              f"\uc0c1\ud0dc: {data[\'status\']}, "\n              f"\uce74\uc6b4\ud2b8: {data[\'count\']}")\n\n        # \ube44\uc815\uc0c1 \uc0c1\ud0dc \ucc98\ub9ac\n        if data["status"] == "critical":\n            print(f"  \ud83d\udea8 \uacbd\uace0: {data[\'source\']}\uc5d0\uc11c \uc704\ud5d8 \uc0c1\ud0dc \uac10\uc9c0!")\n\nasync def multi_source_monitoring(sources: List[str], duration: int):\n    """\uc5ec\ub7ec \uc18c\uc2a4\ub97c \ub3d9\uc2dc\uc5d0 \ubaa8\ub2c8\ud130\ub9c1"""\n    monitors = [DataMonitor(source) for source in sources]\n\n    # \ubaa8\ub4e0 \ubaa8\ub2c8\ud130\ub97c \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\n    tasks = [\n        asyncio.create_task(monitor_source(monitor, duration))\n        for monitor in monitors\n    ]\n\n    # \uc9c0\uc815\ub41c \uc2dc\uac04 \ud6c4 \uc911\uc9c0\n    await asyncio.sleep(duration)\n\n    for monitor in monitors:\n        monitor.stop()\n\n    # \ubaa8\ub4e0 \ud0dc\uc2a4\ud06c \uc644\ub8cc \ub300\uae30\n    await asyncio.gather(*tasks, return_exceptions=True)\n\n    print("\\n\ubaa8\ub2c8\ud130\ub9c1 \uc885\ub8cc")\n\nasync def main():\n    sources = ["\uc13c\uc11c-A", "\uc13c\uc11c-B", "\uc13c\uc11c-C"]\n    await multi_source_monitoring(sources, duration=10)\n\n# asyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"213-\uc77c\ubc18\uc801\uc778-\ud568\uc815\uacfc-\ub514\ubc84\uae45",children:"2.13 \uc77c\ubc18\uc801\uc778 \ud568\uc815\uacfc \ub514\ubc84\uae45"}),"\n",(0,a.jsx)(e.h3,{id:"\uc77c\ubc18\uc801\uc778-\uc2e4\uc218\ub4e4",children:"\uc77c\ubc18\uc801\uc778 \uc2e4\uc218\ub4e4"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\n# \u274c \uc2e4\uc218 1: await \uc5c6\uc774 \ucf54\ub8e8\ud2f4 \ud638\ucd9c\nasync def fetch_data():\n    await asyncio.sleep(1)\n    return "\ub370\uc774\ud130"\n\nasync def mistake_1():\n    # \uc798\ubabb\ub428: \ucf54\ub8e8\ud2f4 \uac1d\uccb4\ub9cc \uc0dd\uc131\ub418\uace0 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc74c\n    result = fetch_data()  # <coroutine object>\n    print(result)  # RuntimeWarning \ubc1c\uc0dd\n\n    # \uc62c\ubc14\ub984: await \uc0ac\uc6a9\n    result = await fetch_data()\n    print(result)\n\n# \u274c \uc2e4\uc218 2: \ub3d9\uae30 \ube14\ub85c\ud0b9 \ud568\uc218 \uc0ac\uc6a9\nimport time\n\nasync def mistake_2():\n    # \uc798\ubabb\ub428: time.sleep()\uc740 \uc804\uccb4 \uc774\ubca4\ud2b8 \ub8e8\ud504\ub97c \ube14\ub85c\ud0b9\n    time.sleep(2)  # \ub2e4\ub978 \ucf54\ub8e8\ud2f4\ub3c4 \uba48\ucda4!\n\n    # \uc62c\ubc14\ub984: asyncio.sleep() \uc0ac\uc6a9\n    await asyncio.sleep(2)  # \ub2e4\ub978 \ucf54\ub8e8\ud2f4\uc740 \uacc4\uc18d \uc2e4\ud589\n\n# \u274c \uc2e4\uc218 3: \ub3d9\uae30 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ube44\ub3d9\uae30 \ucee8\ud14d\uc2a4\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\nimport requests\n\nasync def mistake_3():\n    # \uc798\ubabb\ub428: requests\ub294 \ub3d9\uae30 \ub77c\uc774\ube0c\ub7ec\ub9ac\n    response = requests.get("https://api.example.com")  # \ube14\ub85c\ud0b9!\n\n    # \uc62c\ubc14\ub984: aiohttp \uac19\uc740 \ube44\ub3d9\uae30 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9\n    async with aiohttp.ClientSession() as session:\n        async with session.get("https://api.example.com") as response:\n            data = await response.json()\n\n# \u274c \uc2e4\uc218 4: Task \uc0dd\uc131 \ud6c4 await \uc5c6\uc74c\nasync def mistake_4():\n    # \uc798\ubabb\ub428: Task \uc0dd\uc131\ub9cc \ud558\uace0 \uc644\ub8cc\ub97c \uae30\ub2e4\ub9ac\uc9c0 \uc54a\uc74c\n    asyncio.create_task(fetch_data())\n    # Task\ub294 \ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc2e4\ud589\ub418\uc9c0\ub9cc \uacb0\uacfc\ub97c \uae30\ub2e4\ub9ac\uc9c0 \uc54a\uc74c\n\n    # \uc62c\ubc14\ub984: await\ub85c \uc644\ub8cc \ub300\uae30\n    task = asyncio.create_task(fetch_data())\n    result = await task\n\n# \u274c \uc2e4\uc218 5: \uc608\uc678 \ubb34\uc2dc\nasync def may_fail():\n    raise ValueError("\uc5d0\ub7ec!")\n\nasync def mistake_5():\n    # \uc798\ubabb\ub428: gather\uc5d0\uc11c \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uba74 \uc77c\ubd80 \uacb0\uacfc \uc190\uc2e4\n    try:\n        results = await asyncio.gather(\n            fetch_data(),\n            may_fail(),\n            fetch_data()\n        )\n    except ValueError:\n        print("\uc5d0\ub7ec \ubc1c\uc0dd, \uc77c\ubd80 \uacb0\uacfc \uc190\uc2e4\ub428")\n\n    # \uc62c\ubc14\ub984: return_exceptions=True \uc0ac\uc6a9\n    results = await asyncio.gather(\n        fetch_data(),\n        may_fail(),\n        fetch_data(),\n        return_exceptions=True\n    )\n\n    for result in results:\n        if isinstance(result, Exception):\n            print(f"\uc5d0\ub7ec: {result}")\n        else:\n            print(f"\uc131\uacf5: {result}")\n\nasyncio.run(mistake_5())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uacbd\uc7c1-\uc870\uac74-race-conditions",children:"\uacbd\uc7c1 \uc870\uac74 (Race Conditions)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\n# \u274c \uacbd\uc7c1 \uc870\uac74 \uc608\uc81c\nclass Counter:\n    def __init__(self):\n        self.value = 0\n\n    async def increment(self):\n        # \uc704\ud5d8: \uc5ec\ub7ec \ucf54\ub8e8\ud2f4\uc774 \ub3d9\uc2dc\uc5d0 \uc811\uadfc\n        temp = self.value\n        await asyncio.sleep(0.01)  # \ub2e4\ub978 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158\n        self.value = temp + 1\n\nasync def race_condition():\n    counter = Counter()\n\n    # 10\uac1c\uc758 \ucf54\ub8e8\ud2f4\uc774 \ub3d9\uc2dc\uc5d0 increment\n    await asyncio.gather(*[counter.increment() for _ in range(10)])\n\n    print(f"\uc608\uc0c1 \uac12: 10, \uc2e4\uc81c \uac12: {counter.value}")  # \uc2e4\uc81c\ub85c\ub294 1\uc774 \ub420 \uc218 \uc788\uc74c\n\n# \u2713 \ub77d\uc744 \uc0ac\uc6a9\ud55c \ud574\uacb0\nclass SafeCounter:\n    def __init__(self):\n        self.value = 0\n        self.lock = asyncio.Lock()\n\n    async def increment(self):\n        async with self.lock:\n            temp = self.value\n            await asyncio.sleep(0.01)\n            self.value = temp + 1\n\nasync def safe_version():\n    counter = SafeCounter()\n\n    await asyncio.gather(*[counter.increment() for _ in range(10)])\n\n    print(f"\uc608\uc0c1 \uac12: 10, \uc2e4\uc81c \uac12: {counter.value}")  # \ud56d\uc0c1 10\n\nasyncio.run(safe_version())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ub370\ub4dc\ub77d-\ubc29\uc9c0",children:"\ub370\ub4dc\ub77d \ubc29\uc9c0"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\n# \u274c \ub370\ub4dc\ub77d \uc704\ud5d8\nasync def deadlock_risk():\n    lock1 = asyncio.Lock()\n    lock2 = asyncio.Lock()\n\n    async def task1():\n        async with lock1:\n            await asyncio.sleep(0.1)\n            async with lock2:  # lock2\ub97c \uae30\ub2e4\ub9bc\n                print("Task1 \uc644\ub8cc")\n\n    async def task2():\n        async with lock2:\n            await asyncio.sleep(0.1)\n            async with lock1:  # lock1\uc744 \uae30\ub2e4\ub9bc\n                print("Task2 \uc644\ub8cc")\n\n    await asyncio.gather(task1(), task2())\n\n# \u2713 \ub77d \uc21c\uc11c\ub97c \uc77c\uad00\ub418\uac8c \uc720\uc9c0\nasync def deadlock_solution():\n    lock1 = asyncio.Lock()\n    lock2 = asyncio.Lock()\n\n    async def task1():\n        async with lock1:  # \ud56d\uc0c1 lock1 \uba3c\uc800\n            async with lock2:\n                print("Task1 \uc644\ub8cc")\n\n    async def task2():\n        async with lock1:  # \ud56d\uc0c1 lock1 \uba3c\uc800\n            async with lock2:\n                print("Task2 \uc644\ub8cc")\n\n    await asyncio.gather(task1(), task2())\n\nasyncio.run(deadlock_solution())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ub514\ubc84\uae45-\ub3c4\uad6c",children:"\ub514\ubc84\uae45 \ub3c4\uad6c"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport logging\n\n# asyncio \ub514\ubc84\uadf8 \ubaa8\ub4dc \ud65c\uc131\ud654\nlogging.basicConfig(level=logging.DEBUG)\n\nasync def debug_example():\n    # \ub514\ubc84\uadf8 \uc815\ubcf4 \ucd9c\ub825\n    loop = asyncio.get_running_loop()\n    loop.set_debug(True)\n\n    # \ub290\ub9b0 \ucf5c\ubc31 \uacbd\uace0 (\uae30\ubcf8 100ms)\n    loop.slow_callback_duration = 0.05\n\n    async def slow_task():\n        await asyncio.sleep(0.1)\n        return "\uc644\ub8cc"\n\n    result = await slow_task()\n    print(result)\n\n# asyncio.run(debug_example(), debug=True)\n\n# \uc2e4\ud589 \uc911\uc778 \ud0dc\uc2a4\ud06c \ud655\uc778\nasync def list_tasks():\n    async def background_task(n):\n        await asyncio.sleep(n)\n\n    # \uc5ec\ub7ec \ud0dc\uc2a4\ud06c \uc0dd\uc131\n    tasks = [\n        asyncio.create_task(background_task(i), name=f"Task-{i}")\n        for i in range(5)\n    ]\n\n    # \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \ubaa8\ub4e0 \ud0dc\uc2a4\ud06c \uc870\ud68c\n    all_tasks = asyncio.all_tasks()\n\n    for task in all_tasks:\n        print(f"\ud0dc\uc2a4\ud06c: {task.get_name()}, \uc644\ub8cc: {task.done()}")\n\n    await asyncio.gather(*tasks)\n\nasyncio.run(list_tasks())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\ud0c0\uc784\uc544\uc6c3-\ucc98\ub9ac",children:"\ud0c0\uc784\uc544\uc6c3 \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\n\nasync def long_running_task():\n    await asyncio.sleep(10)\n    return "\uc644\ub8cc"\n\nasync def timeout_example():\n    try:\n        # 3\ucd08 \ud0c0\uc784\uc544\uc6c3 \uc124\uc815\n        result = await asyncio.wait_for(long_running_task(), timeout=3.0)\n        print(result)\n    except asyncio.TimeoutError:\n        print("\ud0c0\uc784\uc544\uc6c3 \ubc1c\uc0dd!")\n\n# \uc5ec\ub7ec \ud0dc\uc2a4\ud06c\uc5d0 \ud0c0\uc784\uc544\uc6c3 \uc801\uc6a9\nasync def multiple_timeouts():\n    tasks = [\n        asyncio.create_task(asyncio.sleep(i))\n        for i in range(1, 6)\n    ]\n\n    done, pending = await asyncio.wait(\n        tasks,\n        timeout=2.5,\n        return_when=asyncio.ALL_COMPLETED\n    )\n\n    print(f"\uc644\ub8cc\ub41c \ud0dc\uc2a4\ud06c: {len(done)}")\n    print(f"\ubbf8\uc644\ub8cc \ud0dc\uc2a4\ud06c: {len(pending)}")\n\n    # \ubbf8\uc644\ub8cc \ud0dc\uc2a4\ud06c \ucde8\uc18c\n    for task in pending:\n        task.cancel()\n\nasyncio.run(multiple_timeouts())\n'})}),"\n",(0,a.jsx)(e.admonition,{title:"\ub514\ubc84\uae45 \ud301",type:"warning",children:(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ub514\ubc84\uadf8 \ubaa8\ub4dc \ud65c\uc131\ud654"}),": ",(0,a.jsx)(e.code,{children:"asyncio.run(main(), debug=True)"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ub85c\uae45 \uc0ac\uc6a9"}),": \ube44\ub3d9\uae30 \ud750\ub984 \ucd94\uc801"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ud0c0\uc784\uc544\uc6c3 \uc124\uc815"}),": \ubb34\ud55c \ub300\uae30 \ubc29\uc9c0"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\uc608\uc678 \ucc98\ub9ac"}),": ",(0,a.jsx)(e.code,{children:"return_exceptions=True"})," \ud65c\uc6a9"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Task \uc774\ub984 \uc9c0\uc815"}),": \ub514\ubc84\uae45 \uc2dc \uc2dd\ubcc4 \uc6a9\uc774"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"214-\ubaa8\ubc94-\uc0ac\ub840",children:"2.14 \ubaa8\ubc94 \uc0ac\ub840"}),"\n",(0,a.jsx)(e.h3,{id:"1-\ub9ac\uc18c\uc2a4-\uad00\ub9ac",children:"1. \ub9ac\uc18c\uc2a4 \uad00\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\n\n# \u2713 \uc62c\ubc14\ub978 \ubc29\ubc95: \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9\nasync def good_resource_management():\n    async with aiohttp.ClientSession() as session:\n        async with session.get("https://api.example.com") as response:\n            data = await response.json()\n            return data\n\n# \u274c \ub098\uc05c \ubc29\ubc95: \uc218\ub3d9 \uad00\ub9ac\nasync def bad_resource_management():\n    session = aiohttp.ClientSession()\n    response = await session.get("https://api.example.com")\n    data = await response.json()\n    # session.close() \uc78a\uc5b4\ubc84\ub9bc - \ub9ac\uc18c\uc2a4 \ub204\uc218!\n    return data\n'})}),"\n",(0,a.jsx)(e.h3,{id:"2-\uc5d0\ub7ec-\ucc98\ub9ac",children:"2. \uc5d0\ub7ec \ucc98\ub9ac"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom typing import List, Dict, Any\n\nasync def fetch_with_retry(url: str, max_retries: int = 3) -> Dict[str, Any]:\n    """\uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\uc774 \uc788\ub294 fetch"""\n    for attempt in range(max_retries):\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:\n                    response.raise_for_status()\n                    return await response.json()\n\n        except asyncio.TimeoutError:\n            if attempt == max_retries - 1:\n                raise\n            print(f"\ud0c0\uc784\uc544\uc6c3, \uc7ac\uc2dc\ub3c4 {attempt + 1}/{max_retries}")\n            await asyncio.sleep(2 ** attempt)  # \uc9c0\uc218 \ubc31\uc624\ud504\n\n        except aiohttp.ClientError as e:\n            if attempt == max_retries - 1:\n                raise\n            print(f"\uc5d0\ub7ec \ubc1c\uc0dd: {e}, \uc7ac\uc2dc\ub3c4 {attempt + 1}/{max_retries}")\n            await asyncio.sleep(2 ** attempt)\n\nasync def robust_gather(tasks: List) -> List:\n    """\ubaa8\ub4e0 \ud0dc\uc2a4\ud06c\uc758 \uacb0\uacfc\ub97c \uc218\uc9d1\ud558\ub418, \uc608\uc678\ub294 \ub85c\uae45"""\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n\n    processed_results = []\n    for i, result in enumerate(results):\n        if isinstance(result, Exception):\n            print(f"Task {i} \uc2e4\ud328: {result}")\n            processed_results.append(None)\n        else:\n            processed_results.append(result)\n\n    return processed_results\n'})}),"\n",(0,a.jsx)(e.h3,{id:"3-\uad6c\uc870\ud654\ub41c-\ucf54\ub4dc",children:"3. \uad6c\uc870\ud654\ub41c \ucf54\ub4dc"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom dataclasses import dataclass\nfrom typing import Optional, List\nimport aiohttp\n\n@dataclass\nclass APIConfig:\n    base_url: str\n    timeout: int = 30\n    max_retries: int = 3\n    max_concurrent: int = 10\n\nclass AsyncAPIClient:\n    """\uad6c\uc870\ud654\ub41c \ube44\ub3d9\uae30 API \ud074\ub77c\uc774\uc5b8\ud2b8"""\n\n    def __init__(self, config: APIConfig):\n        self.config = config\n        self.session: Optional[aiohttp.ClientSession] = None\n        self.semaphore = asyncio.Semaphore(config.max_concurrent)\n\n    async def __aenter__(self):\n        self.session = aiohttp.ClientSession(\n            timeout=aiohttp.ClientTimeout(total=self.config.timeout)\n        )\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.session:\n            await self.session.close()\n\n    async def get(self, endpoint: str, **kwargs):\n        """GET \uc694\uccad"""\n        async with self.semaphore:\n            url = f"{self.config.base_url}{endpoint}"\n\n            for attempt in range(self.config.max_retries):\n                try:\n                    async with self.session.get(url, **kwargs) as response:\n                        response.raise_for_status()\n                        return await response.json()\n\n                except Exception as e:\n                    if attempt == self.config.max_retries - 1:\n                        raise\n                    await asyncio.sleep(2 ** attempt)\n\n    async def post(self, endpoint: str, data=None, **kwargs):\n        """POST \uc694\uccad"""\n        async with self.semaphore:\n            url = f"{self.config.base_url}{endpoint}"\n            async with self.session.post(url, json=data, **kwargs) as response:\n                response.raise_for_status()\n                return await response.json()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nasync def main():\n    config = APIConfig(\n        base_url="https://api.example.com",\n        max_concurrent=5\n    )\n\n    async with AsyncAPIClient(config) as client:\n        results = await asyncio.gather(\n            client.get("/users/1"),\n            client.get("/users/2"),\n            client.post("/users", data={"name": "\ud64d\uae38\ub3d9"})\n        )\n\n        return results\n'})}),"\n",(0,a.jsx)(e.h3,{id:"4-\uc131\ub2a5-\ucd5c\uc801\ud654",children:"4. \uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom typing import List\nimport time\n\n# \u2713 \ubc30\uce58 \ucc98\ub9ac\ub85c \ud6a8\uc728\uc131 \ud5a5\uc0c1\nasync def batch_process(items: List, batch_size: int = 100):\n    """\ub300\ub7c9\uc758 \uc544\uc774\ud15c\uc744 \ubc30\uce58\ub85c \ub098\ub204\uc5b4 \ucc98\ub9ac"""\n    results = []\n\n    for i in range(0, len(items), batch_size):\n        batch = items[i:i + batch_size]\n        batch_results = await asyncio.gather(\n            *[process_item(item) for item in batch]\n        )\n        results.extend(batch_results)\n\n        # \ubc30\uce58 \uac04 \uc9e7\uc740 \ub300\uae30 (API \ub808\uc774\ud2b8 \ub9ac\ubbf8\ud2b8 \uace0\ub824)\n        if i + batch_size < len(items):\n            await asyncio.sleep(0.1)\n\n    return results\n\nasync def process_item(item):\n    await asyncio.sleep(0.01)\n    return item * 2\n\n# \u2713 \uce90\uc2f1 \ud65c\uc6a9\nfrom functools import lru_cache\n\nclass CachedAsyncClient:\n    def __init__(self):\n        self._cache = {}\n\n    async def fetch_with_cache(self, key: str):\n        if key in self._cache:\n            print(f"\uce90\uc2dc \ud788\ud2b8: {key}")\n            return self._cache[key]\n\n        print(f"\uce90\uc2dc \ubbf8\uc2a4: {key}")\n        result = await self._fetch_from_api(key)\n        self._cache[key] = result\n        return result\n\n    async def _fetch_from_api(self, key: str):\n        await asyncio.sleep(1)  # API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n        return f"Data for {key}"\n\nasync def caching_example():\n    client = CachedAsyncClient()\n\n    # \uccab \ud638\ucd9c\uc740 API\uc5d0\uc11c \uac00\uc838\uc634\n    await client.fetch_with_cache("user1")\n\n    # \ub450 \ubc88\uc9f8 \ud638\ucd9c\uc740 \uce90\uc2dc\uc5d0\uc11c \uac00\uc838\uc634\n    await client.fetch_with_cache("user1")\n'})}),"\n",(0,a.jsx)(e.h3,{id:"5-\ud14c\uc2a4\ud2b8-\uac00\ub2a5\ud55c-\ucf54\ub4dc",children:"5. \ud14c\uc2a4\ud2b8 \uac00\ub2a5\ud55c \ucf54\ub4dc"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom unittest.mock import AsyncMock, patch\nimport pytest\n\nclass UserService:\n    def __init__(self, api_client):\n        self.api_client = api_client\n\n    async def get_user(self, user_id: int):\n        return await self.api_client.get(f"/users/{user_id}")\n\n    async def get_user_posts(self, user_id: int):\n        return await self.api_client.get(f"/users/{user_id}/posts")\n\n# pytest-asyncio \uc0ac\uc6a9 \ud14c\uc2a4\ud2b8\n@pytest.mark.asyncio\nasync def test_user_service():\n    # Mock API \ud074\ub77c\uc774\uc5b8\ud2b8\n    mock_client = AsyncMock()\n    mock_client.get.return_value = {"id": 1, "name": "\ud14c\uc2a4\ud2b8"}\n\n    service = UserService(mock_client)\n    user = await service.get_user(1)\n\n    assert user["name"] == "\ud14c\uc2a4\ud2b8"\n    mock_client.get.assert_called_once_with("/users/1")\n\n# asyncio\ub97c \uc0ac\uc6a9\ud55c \uac04\ub2e8\ud55c \ud14c\uc2a4\ud2b8\nasync def simple_test():\n    mock_client = AsyncMock()\n    mock_client.get.return_value = {"id": 1, "name": "\ud14c\uc2a4\ud2b8"}\n\n    service = UserService(mock_client)\n    user = await service.get_user(1)\n\n    assert user["name"] == "\ud14c\uc2a4\ud2b8"\n    print("\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!")\n\nasyncio.run(simple_test())\n'})}),"\n",(0,a.jsx)(e.h2,{id:"215-\uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640-\ud301",children:"2.15 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640 \ud301"}),"\n",(0,a.jsx)(e.h3,{id:"\ube44\ub3d9\uae30-\ucf54\ub4dc-\uc791\uc131-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ube44\ub3d9\uae30 \ucf54\ub4dc \uc791\uc131 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-markdown",children:"\u2705 \ucf54\ub8e8\ud2f4 \uc815\uc758\n- [ ] `async def`\ub85c \ud568\uc218 \uc815\uc758\n- [ ] `await`\ub294 async \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\n- [ ] \ucf54\ub8e8\ud2f4 \ud638\ucd9c \uc2dc \ubc18\ub4dc\uc2dc await \ub610\ub294 create_task\n\n\u2705 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\n- [ ] \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800 \uc0ac\uc6a9 (async with)\n- [ ] \uc138\uc158, \uc5f0\uacb0 \ub4f1 \uc801\uc808\ud788 \uc885\ub8cc\n- [ ] \uc608\uc678 \ubc1c\uc0dd \uc2dc\uc5d0\ub3c4 \ub9ac\uc18c\uc2a4 \ud574\uc81c \ubcf4\uc7a5\n\n\u2705 \uc5d0\ub7ec \ucc98\ub9ac\n- [ ] try-except\ub85c \uc608\uc678 \ucc98\ub9ac\n- [ ] gather()\uc5d0\uc11c return_exceptions \uace0\ub824\n- [ ] \ud0c0\uc784\uc544\uc6c3 \uc124\uc815\n- [ ] \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1 \uad6c\ud604\n\n\u2705 \uc131\ub2a5\n- [ ] I/O \uc791\uc5c5\uc740 \ube44\ub3d9\uae30\ub85c\n- [ ] CPU \uc791\uc5c5\uc740 ProcessPoolExecutor \uc0ac\uc6a9\n- [ ] \ub3d9\uc2dc \uc2e4\ud589 \uc218 \uc81c\ud55c (Semaphore)\n- [ ] \ubc30\uce58 \ucc98\ub9ac\ub85c \ud6a8\uc728\uc131 \ud5a5\uc0c1\n\n\u2705 \ub514\ubc84\uae45\n- [ ] \ub514\ubc84\uadf8 \ubaa8\ub4dc \ud65c\uc131\ud654\n- [ ] \ub85c\uae45 \ucd94\uac00\n- [ ] Task\uc5d0 \uc774\ub984 \uc9c0\uc815\n- [ ] \ud0c0\uc784\uc544\uc6c3\uc73c\ub85c \ub370\ub4dc\ub77d \ubc29\uc9c0\n"})}),"\n",(0,a.jsx)(e.h3,{id:"\uc131\ub2a5-\ud301",children:"\uc131\ub2a5 \ud301"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom typing import List\n\n# Tip 1: gather vs as_completed\nasync def tip_gather_vs_as_completed():\n    """\n    gather: \ubaa8\ub4e0 \uacb0\uacfc\ub97c \ud55c \ubc88\uc5d0\n    as_completed: \uc644\ub8cc\ub418\ub294 \uc21c\uc11c\ub300\ub85c \ucc98\ub9ac\n    """\n\n    async def task(n):\n        await asyncio.sleep(n)\n        return n\n\n    # gather: \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc\uae4c\uc9c0 \ub300\uae30\n    results = await asyncio.gather(task(3), task(1), task(2))\n    print(f"gather \uacb0\uacfc: {results}")  # [3, 1, 2]\n\n    # as_completed: \uc644\ub8cc\ub418\ub294 \uc21c\uc11c\ub300\ub85c \ucc98\ub9ac\n    tasks = [task(3), task(1), task(2)]\n    for coro in asyncio.as_completed(tasks):\n        result = await coro\n        print(f"\uc644\ub8cc: {result}")  # 1, 2, 3 \uc21c\uc11c\n\n# Tip 2: create_task\ub85c \uc870\uae30 \uc2dc\uc791\nasync def tip_early_start():\n    """\uc791\uc5c5\uc744 \uc870\uae30\uc5d0 \uc2dc\uc791\ud558\uc5ec \uc804\uccb4 \uc2dc\uac04 \ub2e8\ucd95"""\n\n    # \ub098\uc05c \ubc29\ubc95: \uc21c\ucc28 \uc2e4\ud589\n    start = asyncio.get_event_loop().time()\n    result1 = await asyncio.sleep(1, result="A")\n    result2 = await asyncio.sleep(1, result="B")\n    print(f"\uc21c\ucc28: {asyncio.get_event_loop().time() - start:.2f}\ucd08")\n\n    # \uc88b\uc740 \ubc29\ubc95: \uc870\uae30 \uc2dc\uc791\n    start = asyncio.get_event_loop().time()\n    task1 = asyncio.create_task(asyncio.sleep(1, result="A"))\n    task2 = asyncio.create_task(asyncio.sleep(1, result="B"))\n    result1 = await task1\n    result2 = await task2\n    print(f"\ubcd1\ub82c: {asyncio.get_event_loop().time() - start:.2f}\ucd08")\n\n# Tip 3: asyncio.Queue\ub85c \uc0dd\uc0b0\uc790-\uc18c\ube44\uc790 \ud328\ud134\nasync def tip_producer_consumer():\n    """\ud6a8\uc728\uc801\uc778 \uc791\uc5c5 \ubd84\ubc30"""\n\n    async def producer(queue: asyncio.Queue, n: int):\n        for i in range(n):\n            await queue.put(i)\n            print(f"\uc0dd\uc0b0: {i}")\n            await asyncio.sleep(0.1)\n        await queue.put(None)  # \uc885\ub8cc \uc2dc\uadf8\ub110\n\n    async def consumer(queue: asyncio.Queue, name: str):\n        while True:\n            item = await queue.get()\n            if item is None:\n                queue.task_done()\n                break\n\n            print(f"{name} \uc18c\ube44: {item}")\n            await asyncio.sleep(0.5)\n            queue.task_done()\n\n    queue = asyncio.Queue(maxsize=10)\n\n    await asyncio.gather(\n        producer(queue, 20),\n        consumer(queue, "Consumer-1"),\n        consumer(queue, "Consumer-2"),\n        consumer(queue, "Consumer-3")\n    )\n\nasyncio.run(tip_producer_consumer())\n'})}),"\n",(0,a.jsx)(e.h3,{id:"\uc77c\ubc18\uc801\uc778-\ud328\ud134",children:"\uc77c\ubc18\uc801\uc778 \ud328\ud134"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom typing import Callable, Any\n\n# \ud328\ud134 1: \ub370\ucf54\ub808\uc774\ud130\ub85c \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\ndef async_retry(max_attempts: int = 3, delay: float = 1.0):\n    def decorator(func: Callable) -> Callable:\n        async def wrapper(*args, **kwargs) -> Any:\n            for attempt in range(max_attempts):\n                try:\n                    return await func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"\uc7ac\uc2dc\ub3c4 {attempt + 1}/{max_attempts}: {e}")\n                    await asyncio.sleep(delay * (2 ** attempt))\n        return wrapper\n    return decorator\n\n@async_retry(max_attempts=3)\nasync def unstable_api_call():\n    # \ubd88\uc548\uc815\ud55c API \ud638\ucd9c\n    import random\n    if random.random() < 0.7:\n        raise Exception("API \uc5d0\ub7ec")\n    return "\uc131\uacf5"\n\n# \ud328\ud134 2: \ud0c0\uc784\uc544\uc6c3 \ub370\ucf54\ub808\uc774\ud130\ndef async_timeout(seconds: float):\n    def decorator(func: Callable) -> Callable:\n        async def wrapper(*args, **kwargs):\n            try:\n                return await asyncio.wait_for(\n                    func(*args, **kwargs),\n                    timeout=seconds\n                )\n            except asyncio.TimeoutError:\n                print(f"{func.__name__} \ud0c0\uc784\uc544\uc6c3 ({seconds}\ucd08)")\n                raise\n        return wrapper\n    return decorator\n\n@async_timeout(5.0)\nasync def slow_operation():\n    await asyncio.sleep(10)\n    return "\uc644\ub8cc"\n\n# \ud328\ud134 3: \ubcd1\ub82c \ub9f5\nasync def async_map(func: Callable, items: List, max_concurrent: int = 10):\n    """\uc5ec\ub7ec \uc544\uc774\ud15c\uc5d0 \ud568\uc218\ub97c \ubcd1\ub82c\ub85c \uc801\uc6a9"""\n    semaphore = asyncio.Semaphore(max_concurrent)\n\n    async def bounded_func(item):\n        async with semaphore:\n            return await func(item)\n\n    return await asyncio.gather(*[bounded_func(item) for item in items])\n\nasync def process(x):\n    await asyncio.sleep(0.1)\n    return x * 2\n\nasync def main():\n    items = list(range(100))\n    results = await async_map(process, items, max_concurrent=20)\n    print(f"\ucc98\ub9ac \uc644\ub8cc: {len(results)}\uac1c \uc544\uc774\ud15c")\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(e.admonition,{title:"\ud575\uc2ec \uc694\uc57d",type:"tip",children:(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"I/O \uc791\uc5c5\uc5d0\ub9cc \ube44\ub3d9\uae30 \uc0ac\uc6a9"})," - CPU \uc791\uc5c5\uc740 multiprocessing"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ub9ac\uc18c\uc2a4\ub294 \ud56d\uc0c1 \uc815\ub9ac"})," - async with \ud65c\uc6a9"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\uc5d0\ub7ec \ucc98\ub9ac \ud544\uc218"})," - try-except\uc640 \ud0c0\uc784\uc544\uc6c3"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ub3d9\uc2dc \uc2e4\ud589 \uc218 \uc81c\ud55c"})," - Semaphore\ub85c \uacfc\ubd80\ud558 \ubc29\uc9c0"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\ub514\ubc84\uae45 \ubaa8\ub4dc \ud65c\uc6a9"})," - \uac1c\ubc1c \uc2dc debug=True"]}),"\n"]})}),"\n",(0,a.jsx)(e.h2,{id:"\uc5f0\uc2b5-\ubb38\uc81c",children:"\uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-1-\ube44\ub3d9\uae30-\uc6f9-\ud06c\ub864\ub7ec",children:"\ubb38\uc81c 1: \ube44\ub3d9\uae30 \uc6f9 \ud06c\ub864\ub7ec"}),"\n",(0,a.jsx)(e.p,{children:"\uc5ec\ub7ec \uc6f9\ud398\uc774\uc9c0\ub97c \ub3d9\uc2dc\uc5d0 \ud06c\ub864\ub9c1\ud558\uace0 \uc81c\ubaa9\uc744 \ucd94\ucd9c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"\uc194\ub8e8\uc158 \ubcf4\uae30"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nfrom bs4 import BeautifulSoup\nfrom typing import List, Dict\n\nclass AsyncWebCrawler:\n    def __init__(self, max_concurrent: int = 5):\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n\n    async def fetch_title(self, session: aiohttp.ClientSession, url: str) -> Dict:\n        async with self.semaphore:\n            try:\n                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:\n                    html = await response.text()\n                    soup = BeautifulSoup(html, \'html.parser\')\n                    title = soup.find(\'title\')\n\n                    return {\n                        "url": url,\n                        "title": title.text.strip() if title else "\uc81c\ubaa9 \uc5c6\uc74c",\n                        "status": "success"\n                    }\n\n            except Exception as e:\n                return {\n                    "url": url,\n                    "title": None,\n                    "status": "error",\n                    "error": str(e)\n                }\n\n    async def crawl(self, urls: List[str]) -> List[Dict]:\n        async with aiohttp.ClientSession() as session:\n            tasks = [self.fetch_title(session, url) for url in urls]\n            return await asyncio.gather(*tasks)\n\nasync def main():\n    urls = [\n        "https://www.python.org",\n        "https://github.com",\n        "https://stackoverflow.com",\n    ]\n\n    crawler = AsyncWebCrawler(max_concurrent=3)\n    results = await crawler.crawl(urls)\n\n    for result in results:\n        if result["status"] == "success":\n            print(f"\u2713 {result[\'url\']}: {result[\'title\']}")\n        else:\n            print(f"\u2717 {result[\'url\']}: {result[\'error\']}")\n\nasyncio.run(main())\n'})})]}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-2-\ube44\ub3d9\uae30-\ub2e4\uc6b4\ub85c\ub4dc-\ub9e4\ub2c8\uc800",children:"\ubb38\uc81c 2: \ube44\ub3d9\uae30 \ub2e4\uc6b4\ub85c\ub4dc \ub9e4\ub2c8\uc800"}),"\n",(0,a.jsx)(e.p,{children:"\uc5ec\ub7ec \ud30c\uc77c\uc744 \ub3d9\uc2dc\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 \uc9c4\ud589\ub960\uc744 \ud45c\uc2dc\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"\uc194\ub8e8\uc158 \ubcf4\uae30"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport aiohttp\nimport aiofiles\nfrom pathlib import Path\nfrom typing import List, Dict\n\nclass DownloadManager:\n    def __init__(self, output_dir: str = "downloads", max_concurrent: int = 3):\n        self.output_dir = Path(output_dir)\n        self.output_dir.mkdir(exist_ok=True)\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n        self.progress = {}\n\n    async def download_file(self, session: aiohttp.ClientSession, url: str, filename: str) -> Dict:\n        async with self.semaphore:\n            try:\n                async with session.get(url) as response:\n                    response.raise_for_status()\n                    total_size = int(response.headers.get(\'content-length\', 0))\n\n                    filepath = self.output_dir / filename\n                    downloaded = 0\n\n                    async with aiofiles.open(filepath, \'wb\') as f:\n                        async for chunk in response.content.iter_chunked(8192):\n                            await f.write(chunk)\n                            downloaded += len(chunk)\n\n                            if total_size:\n                                progress = (downloaded / total_size) * 100\n                                print(f"{filename}: {progress:.1f}% ({downloaded}/{total_size})")\n\n                    return {\n                        "filename": filename,\n                        "size": downloaded,\n                        "status": "success"\n                    }\n\n            except Exception as e:\n                return {\n                    "filename": filename,\n                    "status": "error",\n                    "error": str(e)\n                }\n\n    async def download_all(self, downloads: List[Dict[str, str]]) -> List[Dict]:\n        async with aiohttp.ClientSession() as session:\n            tasks = [\n                self.download_file(session, item["url"], item["filename"])\n                for item in downloads\n            ]\n            return await asyncio.gather(*tasks)\n\nasync def main():\n    downloads = [\n        {"url": "https://www.python.org/static/img/python-logo.png", "filename": "python-logo.png"},\n        {"url": "https://httpbin.org/image/jpeg", "filename": "sample1.jpg"},\n        {"url": "https://httpbin.org/image/png", "filename": "sample2.png"},\n    ]\n\n    manager = DownloadManager(max_concurrent=2)\n    results = await manager.download_all(downloads)\n\n    print("\\n\ub2e4\uc6b4\ub85c\ub4dc \uc644\ub8cc:")\n    for result in results:\n        if result["status"] == "success":\n            print(f"\u2713 {result[\'filename\']}: {result[\'size\']} bytes")\n        else:\n            print(f"\u2717 {result[\'filename\']}: {result[\'error\']}")\n\nasyncio.run(main())\n'})})]}),"\n",(0,a.jsx)(e.h3,{id:"\ubb38\uc81c-3-\ube44\ub3d9\uae30-\ub370\uc774\ud130-\ud30c\uc774\ud504\ub77c\uc778",children:"\ubb38\uc81c 3: \ube44\ub3d9\uae30 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,a.jsx)(e.p,{children:"\ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uace0, \ubcc0\ud658\ud558\uace0, \uc800\uc7a5\ud558\ub294 \ube44\ub3d9\uae30 \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc791\uc131\ud558\uc138\uc694."}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"\uc194\ub8e8\uc158 \ubcf4\uae30"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom typing import List, Dict, Any\nimport json\nimport aiofiles\n\nclass AsyncDataPipeline:\n    def __init__(self):\n        self.fetch_queue = asyncio.Queue()\n        self.transform_queue = asyncio.Queue()\n        self.save_queue = asyncio.Queue()\n\n    async def fetch_data(self, source_id: int) -> Dict:\n        """1\ub2e8\uacc4: \ub370\uc774\ud130 \uac00\uc838\uc624\uae30"""\n        await asyncio.sleep(0.5)  # API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n        return {\n            "id": source_id,\n            "raw_data": f"\uc6d0\ubcf8 \ub370\uc774\ud130 {source_id}",\n            "value": source_id * 10\n        }\n\n    async def transform_data(self, data: Dict) -> Dict:\n        """2\ub2e8\uacc4: \ub370\uc774\ud130 \ubcc0\ud658"""\n        await asyncio.sleep(0.3)  # \ucc98\ub9ac \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n        return {\n            "id": data["id"],\n            "processed_data": data["raw_data"].upper(),\n            "calculated_value": data["value"] * 2\n        }\n\n    async def save_data(self, data: Dict, filename: str):\n        """3\ub2e8\uacc4: \ub370\uc774\ud130 \uc800\uc7a5"""\n        await asyncio.sleep(0.2)  # \uc800\uc7a5 \uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158\n        async with aiofiles.open(filename, \'a\', encoding=\'utf-8\') as f:\n            await f.write(json.dumps(data, ensure_ascii=False) + "\\n")\n\n    async def producer(self, count: int):\n        """\ub370\uc774\ud130 \uc0dd\uc0b0\uc790"""\n        for i in range(count):\n            data = await self.fetch_data(i)\n            await self.fetch_queue.put(data)\n            print(f"Fetched: {i}")\n\n        await self.fetch_queue.put(None)  # \uc885\ub8cc \uc2dc\uadf8\ub110\n\n    async def transformer(self):\n        """\ub370\uc774\ud130 \ubcc0\ud658\uc790"""\n        while True:\n            data = await self.fetch_queue.get()\n            if data is None:\n                await self.transform_queue.put(None)\n                break\n\n            transformed = await self.transform_data(data)\n            await self.transform_queue.put(transformed)\n            print(f"Transformed: {transformed[\'id\']}")\n\n    async def saver(self, filename: str):\n        """\ub370\uc774\ud130 \uc800\uc7a5\uc790"""\n        while True:\n            data = await self.transform_queue.get()\n            if data is None:\n                break\n\n            await self.save_data(data, filename)\n            print(f"Saved: {data[\'id\']}")\n\n    async def run(self, count: int, filename: str):\n        """\ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589"""\n        await asyncio.gather(\n            self.producer(count),\n            self.transformer(),\n            self.saver(filename)\n        )\n\nasync def main():\n    pipeline = AsyncDataPipeline()\n    await pipeline.run(count=10, filename="output.jsonl")\n    print("\ud30c\uc774\ud504\ub77c\uc778 \uc644\ub8cc!")\n\nasyncio.run(main())\n'})})]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.p,{children:["\ub2e4\uc74c \uc139\uc158: ",(0,a.jsx)(e.a,{href:"./context-managers",children:"\ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800"})]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>o});var t=s(6540);const a={},i=t.createContext(a);function r(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);