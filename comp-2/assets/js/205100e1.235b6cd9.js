"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[6025],{910:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"python/practical/database","title":"3. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9","description":"\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub294 \ud604\ub300 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud575\uc2ec \uad6c\uc131 \uc694\uc18c\uc785\ub2c8\ub2e4. Python\uc740 \ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640\uc758 \uc5f0\ub3d9\uc744 \uc704\ud55c \uac15\ub825\ud55c \ub3c4\uad6c\ub4e4\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","source":"@site/docs/python/practical/database.md","sourceDirName":"python/practical","slug":"/python/practical/database","permalink":"/docs/python/practical/database","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/practical/database.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"pythonSidebar","previous":{"title":"2. REST API \uac1c\ubc1c","permalink":"/docs/python/practical/apis"},"next":{"title":"4. \ub370\uc774\ud130 \ubd84\uc11d","permalink":"/docs/python/practical/data-analysis"}}');var t=s(4848),o=s(8453);const i={sidebar_position:3},l="3. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9",a={},d=[{value:"3.1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ubcf8 \uac1c\ub150",id:"31-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uae30\ubcf8-\uac1c\ub150",level:2},{value:"SQL vs NoSQL",id:"sql-vs-nosql",level:3},{value:"SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"sql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:4},{value:"NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"nosql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:4},{value:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc120\ud0dd \uae30\uc900",id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc120\ud0dd-\uae30\uc900",level:3},{value:"3.2 SQLite - \ub0b4\uc7a5 \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"32-sqlite---\ub0b4\uc7a5-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"Context Manager \uc0ac\uc6a9",id:"context-manager-\uc0ac\uc6a9",level:3},{value:"\uace0\uae09 \ucffc\ub9ac",id:"\uace0\uae09-\ucffc\ub9ac",level:3},{value:"3.3 PostgreSQL - \uace0\uae09 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"33-postgresql---\uace0\uae09-\uad00\uacc4\ud615-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:2},{value:"\uc124\uce58 \ubc0f \uc5f0\uacb0",id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0",level:3},{value:"CRUD \uc791\uc5c5",id:"crud-\uc791\uc5c5",level:3},{value:"\ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac",id:"\ud2b8\ub79c\uc7ad\uc158-\ucc98\ub9ac",level:3},{value:"3.4 MySQL - \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"34-mysql---\ub110\ub9ac-\uc0ac\uc6a9\ub418\ub294-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:2},{value:"\uc124\uce58 \ubc0f \uc5f0\uacb0",id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0-1",level:3},{value:"Connection Pool \uc0ac\uc6a9",id:"connection-pool-\uc0ac\uc6a9",level:3},{value:"3.5 SQLAlchemy - Python ORM",id:"35-sqlalchemy---python-orm",level:2},{value:"\uc124\uce58 \ubc0f \uae30\ubcf8 \uc124\uc815",id:"\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc124\uc815",level:3},{value:"\ubaa8\ub378 \uc815\uc758",id:"\ubaa8\ub378-\uc815\uc758",level:3},{value:"CRUD \uc791\uc5c5 (ORM \ubc29\uc2dd)",id:"crud-\uc791\uc5c5-orm-\ubc29\uc2dd",level:3},{value:"\uace0\uae09 \ucffc\ub9ac",id:"\uace0\uae09-\ucffc\ub9ac-1",level:3},{value:"3.6 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 - Alembic",id:"36-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ub9c8\uc774\uadf8\ub808\uc774\uc158---alembic",level:2},{value:"\uc124\uce58 \ubc0f \ucd08\uae30\ud654",id:"\uc124\uce58-\ubc0f-\ucd08\uae30\ud654",level:3},{value:"\uc124\uc815 (alembic.ini)",id:"\uc124\uc815-alembicini",level:3},{value:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc0dd\uc131 \ubc0f \uc801\uc6a9",id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc0dd\uc131-\ubc0f-\uc801\uc6a9",level:3},{value:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud30c\uc77c \uc608\uc81c",id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\ud30c\uc77c-\uc608\uc81c",level:3},{value:"3.7 MongoDB - NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"37-mongodb---nosql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:2},{value:"\uc124\uce58 \ubc0f \uc5f0\uacb0",id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0-2",level:3},{value:"CRUD \uc791\uc5c5",id:"crud-\uc791\uc5c5-1",level:3},{value:"\uace0\uae09 \ucffc\ub9ac",id:"\uace0\uae09-\ucffc\ub9ac-2",level:3},{value:"MongoDB \ud2b8\ub79c\uc7ad\uc158",id:"mongodb-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"3.8 Redis - \uc778\uba54\ubaa8\ub9ac \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"38-redis---\uc778\uba54\ubaa8\ub9ac-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:2},{value:"\uc124\uce58 \ubc0f \uc5f0\uacb0",id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0-3",level:3},{value:"\uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785",id:"\uae30\ubcf8-\ub370\uc774\ud130-\ud0c0\uc785",level:3},{value:"\uce90\uc2f1 \ud328\ud134",id:"\uce90\uc2f1-\ud328\ud134",level:3},{value:"\uc138\uc158 \uad00\ub9ac",id:"\uc138\uc158-\uad00\ub9ac",level:3},{value:"\ubd84\uc0b0 \ub77d (Distributed Lock)",id:"\ubd84\uc0b0-\ub77d-distributed-lock",level:3},{value:"3.9 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \ubaa8\ubc94 \uc0ac\ub840",id:"39-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc124\uacc4-\ubaa8\ubc94-\uc0ac\ub840",level:2},{value:"\uc815\uaddc\ud654",id:"\uc815\uaddc\ud654",level:3},{value:"\uc778\ub371\uc2a4 \uc804\ub7b5",id:"\uc778\ub371\uc2a4-\uc804\ub7b5",level:3},{value:"\ub370\uc774\ud130 \ubb34\uacb0\uc131",id:"\ub370\uc774\ud130-\ubb34\uacb0\uc131",level:3},{value:"3.10 \uc131\ub2a5 \ucd5c\uc801\ud654",id:"310-\uc131\ub2a5-\ucd5c\uc801\ud654",level:2},{value:"\ucffc\ub9ac \ucd5c\uc801\ud654",id:"\ucffc\ub9ac-\ucd5c\uc801\ud654",level:3},{value:"\ubc30\uce58 \ucc98\ub9ac",id:"\ubc30\uce58-\ucc98\ub9ac",level:3},{value:"\ud398\uc774\uc9c0\ub124\uc774\uc158",id:"\ud398\uc774\uc9c0\ub124\uc774\uc158",level:3},{value:"\uce90\uc2f1 \uc804\ub7b5",id:"\uce90\uc2f1-\uc804\ub7b5",level:3},{value:"3.11 \ubcf4\uc548",id:"311-\ubcf4\uc548",level:2},{value:"SQL Injection \ubc29\uc9c0",id:"sql-injection-\ubc29\uc9c0",level:3},{value:"\ube44\ubc00\ubc88\ud638 \uc554\ud638\ud654",id:"\ube44\ubc00\ubc88\ud638-\uc554\ud638\ud654",level:3},{value:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ubcf4\uc548",id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\uacb0-\ubcf4\uc548",level:3},{value:"3.12 \uc2e4\uc804 \uc608\uc81c",id:"312-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\uc608\uc81c 1: \uc0ac\uc6a9\uc790 \uad00\ub9ac \uc2dc\uc2a4\ud15c",id:"\uc608\uc81c-1-\uc0ac\uc6a9\uc790-\uad00\ub9ac-\uc2dc\uc2a4\ud15c",level:3},{value:"\uc608\uc81c 2: \ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c",id:"\uc608\uc81c-2-\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c",level:3},{value:"\uc608\uc81c 3: E-commerce \uc7ac\uace0 \uad00\ub9ac",id:"\uc608\uc81c-3-e-commerce-\uc7ac\uace0-\uad00\ub9ac",level:3},{value:"3.13 \uc5f0\uc2b5 \ubb38\uc81c",id:"313-\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c",id:"\ubb38\uc81c-1-\ub3c4\uc11c\uad00-\uad00\ub9ac-\uc2dc\uc2a4\ud15c",level:3},{value:"\ubb38\uc81c 2: SNS \uac8c\uc2dc\ubb3c \uc2dc\uc2a4\ud15c",id:"\ubb38\uc81c-2-sns-\uac8c\uc2dc\ubb3c-\uc2dc\uc2a4\ud15c",level:3},{value:"3.14 \ubaa8\ubc94 \uc0ac\ub840 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"314-\ubaa8\ubc94-\uc0ac\ub840-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:2},{value:"\uc124\uacc4 \ub2e8\uacc4",id:"\uc124\uacc4-\ub2e8\uacc4",level:3},{value:"\uac1c\ubc1c \ub2e8\uacc4",id:"\uac1c\ubc1c-\ub2e8\uacc4",level:3},{value:"\uc131\ub2a5 \ucd5c\uc801\ud654",id:"\uc131\ub2a5-\ucd5c\uc801\ud654",level:3},{value:"\ubcf4\uc548",id:"\ubcf4\uc548",level:3},{value:"\uc720\uc9c0\ubcf4\uc218",id:"\uc720\uc9c0\ubcf4\uc218",level:3}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components},{Details:s}=e;return s||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"3-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\ub3d9",children:"3. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9"})}),"\n",(0,t.jsx)(e.p,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub294 \ud604\ub300 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud575\uc2ec \uad6c\uc131 \uc694\uc18c\uc785\ub2c8\ub2e4. Python\uc740 \ub2e4\uc591\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640\uc758 \uc5f0\ub3d9\uc744 \uc704\ud55c \uac15\ub825\ud55c \ub3c4\uad6c\ub4e4\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h2,{id:"31-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uae30\ubcf8-\uac1c\ub150",children:"3.1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ubcf8 \uac1c\ub150"}),"\n",(0,t.jsx)(e.h3,{id:"sql-vs-nosql",children:"SQL vs NoSQL"}),"\n",(0,t.jsx)(e.h4,{id:"sql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"\uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4 (RDBMS)"})}),"\n",(0,t.jsx)(e.li,{children:"\uc815\ud615\ud654\ub41c \uc2a4\ud0a4\ub9c8"}),"\n",(0,t.jsx)(e.li,{children:"ACID \ud2b8\ub79c\uc7ad\uc158 \uc9c0\uc6d0"}),"\n",(0,t.jsx)(e.li,{children:"\ubcf5\uc7a1\ud55c \ucffc\ub9ac\uc640 \uc870\uc778 \uc9c0\uc6d0"}),"\n",(0,t.jsx)(e.li,{children:"\uc608: PostgreSQL, MySQL, SQLite"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# SQL \uc608\uc81c\n"""\nSELECT users.name, orders.total\nFROM users\nJOIN orders ON users.id = orders.user_id\nWHERE orders.total > 100;\n"""\n'})}),"\n",(0,t.jsx)(e.h4,{id:"nosql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"\ube44\uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4"})}),"\n",(0,t.jsx)(e.li,{children:"\uc720\uc5f0\ud55c \uc2a4\ud0a4\ub9c8"}),"\n",(0,t.jsx)(e.li,{children:"\uc218\ud3c9\uc801 \ud655\uc7a5\uc131"}),"\n",(0,t.jsx)(e.li,{children:"\ub192\uc740 \ucc98\ub9ac\ub7c9"}),"\n",(0,t.jsx)(e.li,{children:"\uc608: MongoDB, Redis, Cassandra"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# NoSQL (MongoDB) \uc608\uc81c\n{\n    "name": "\ud64d\uae38\ub3d9",\n    "orders": [\n        {"id": 1, "total": 150},\n        {"id": 2, "total": 200}\n    ]\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc120\ud0dd-\uae30\uc900",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc120\ud0dd \uae30\uc900"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"\uae30\uc900"}),(0,t.jsx)(e.th,{children:"SQL"}),(0,t.jsx)(e.th,{children:"NoSQL"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ub370\uc774\ud130 \uad6c\uc870"}),(0,t.jsx)(e.td,{children:"\uc815\ud615\ud654\ub41c \ub370\uc774\ud130"}),(0,t.jsx)(e.td,{children:"\ube44\uc815\ud615/\ubc18\uc815\ud615 \ub370\uc774\ud130"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud655\uc7a5\uc131"}),(0,t.jsx)(e.td,{children:"\uc218\uc9c1 \ud655\uc7a5"}),(0,t.jsx)(e.td,{children:"\uc218\ud3c9 \ud655\uc7a5"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud2b8\ub79c\uc7ad\uc158"}),(0,t.jsx)(e.td,{children:"\uac15\ub825\ud55c ACID \ubcf4\uc7a5"}),(0,t.jsx)(e.td,{children:"\ucd5c\uc885 \uc77c\uad00\uc131"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\uc0ac\uc6a9 \uc0ac\ub840"}),(0,t.jsx)(e.td,{children:"\uae08\uc735, ERP, CRM"}),(0,t.jsx)(e.td,{children:"\uc18c\uc15c \ubbf8\ub514\uc5b4, IoT, \uc2e4\uc2dc\uac04 \ubd84\uc11d"})]})]})]}),"\n",(0,t.jsx)(e.h2,{id:"32-sqlite---\ub0b4\uc7a5-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"3.2 SQLite - \ub0b4\uc7a5 \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsx)(e.p,{children:"SQLite\ub294 Python\uc5d0 \ub0b4\uc7a5\ub41c \uacbd\ub7c9 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub85c, \ubcc4\ub3c4\uc758 \uc11c\ubc84 \uc124\uce58 \uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import sqlite3\nfrom datetime import datetime\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 (\ud30c\uc77c\uc774 \uc5c6\uc73c\uba74 \uc790\ub3d9 \uc0dd\uc131)\nconn = sqlite3.connect(\'example.db\')\ncursor = conn.cursor()\n\n# \ud14c\uc774\ube14 \uc0dd\uc131\ncursor.execute(\'\'\'\n    CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT NOT NULL UNIQUE,\n        email TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n\'\'\')\n\n# \ub370\uc774\ud130 \uc0bd\uc785\ncursor.execute(\n    "INSERT INTO users (username, email) VALUES (?, ?)",\n    ("\ud64d\uae38\ub3d9", "hong@example.com")\n)\n\n# \uc5ec\ub7ec \ub370\uc774\ud130 \uc0bd\uc785\nusers_data = [\n    ("\uae40\ucca0\uc218", "kim@example.com"),\n    ("\uc774\uc601\ud76c", "lee@example.com"),\n    ("\ubc15\ubbfc\uc218", "park@example.com")\n]\ncursor.executemany(\n    "INSERT INTO users (username, email) VALUES (?, ?)",\n    users_data\n)\n\n# \ubcc0\uacbd\uc0ac\ud56d \uc800\uc7a5\nconn.commit()\n\n# \ub370\uc774\ud130 \uc870\ud68c\ncursor.execute("SELECT * FROM users")\nprint(cursor.fetchall())\n\n# \uc5f0\uacb0 \uc885\ub8cc\nconn.close()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"context-manager-\uc0ac\uc6a9",children:"Context Manager \uc0ac\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import sqlite3\n\nclass Database:\n    def __init__(self, db_name):\n        self.db_name = db_name\n\n    def __enter__(self):\n        self.conn = sqlite3.connect(self.db_name)\n        self.conn.row_factory = sqlite3.Row  # \ub515\uc154\ub108\ub9ac \ud615\ud0dc\ub85c \ubc18\ud658\n        return self.conn.cursor()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type is None:\n            self.conn.commit()\n        else:\n            self.conn.rollback()\n        self.conn.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nwith Database('example.db') as cursor:\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (1,))\n    user = cursor.fetchone()\n    if user:\n        print(f\"\uc0ac\uc6a9\uc790: {user['username']}, \uc774\uba54\uc77c: {user['email']}\")\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uace0\uae09-\ucffc\ub9ac",children:"\uace0\uae09 \ucffc\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import sqlite3\n\nconn = sqlite3.connect('blog.db')\ncursor = conn.cursor()\n\n# \ud14c\uc774\ube14 \uc0dd\uc131\ncursor.execute('''\n    CREATE TABLE IF NOT EXISTS posts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        user_id INTEGER,\n        title TEXT NOT NULL,\n        content TEXT,\n        views INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users(id)\n    )\n''')\n\n# \uc9d1\uacc4 \ud568\uc218\ncursor.execute(\"\"\"\n    SELECT\n        users.username,\n        COUNT(posts.id) as post_count,\n        AVG(posts.views) as avg_views\n    FROM users\n    LEFT JOIN posts ON users.id = posts.user_id\n    GROUP BY users.id\n    HAVING post_count > 0\n    ORDER BY post_count DESC\n\"\"\")\n\nfor row in cursor.fetchall():\n    print(f\"{row[0]}: {row[1]}\uac1c \uac8c\uc2dc\uae00, \ud3c9\uade0 \uc870\ud68c\uc218 {row[2]:.1f}\")\n\nconn.close()\n"})}),"\n",(0,t.jsx)(e.admonition,{title:"SQLite \ucd5c\uc801\ud654",type:"tip",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"PRAGMA"})," \uba85\ub839\uc5b4\ub85c \uc131\ub2a5 \ud29c\ub2dd"]}),"\n",(0,t.jsxs)(e.li,{children:["\uc778\uba54\ubaa8\ub9ac \ub370\uc774\ud130\ubca0\uc774\uc2a4: ",(0,t.jsx)(e.code,{children:"sqlite3.connect(':memory:')"})]}),"\n",(0,t.jsx)(e.li,{children:"WAL \ubaa8\ub4dc \ud65c\uc131\ud654\ub85c \ub3d9\uc2dc\uc131 \ud5a5\uc0c1"}),"\n"]})}),"\n",(0,t.jsx)(e.h2,{id:"33-postgresql---\uace0\uae09-\uad00\uacc4\ud615-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"3.3 PostgreSQL - \uace0\uae09 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsx)(e.p,{children:"PostgreSQL\uc740 \uac15\ub825\ud55c \uc624\ud508\uc18c\uc2a4 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc785\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0",children:"\uc124\uce58 \ubc0f \uc5f0\uacb0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# psycopg2 \uc124\uce58\npip install psycopg2-binary\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import psycopg2\nfrom psycopg2 import sql\nfrom psycopg2.extras import RealDictCursor\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\nconn = psycopg2.connect(\n    host="localhost",\n    database="mydb",\n    user="postgres",\n    password="mypassword",\n    port=5432\n)\n\n# \ucee4\uc11c \uc0dd\uc131 (\ub515\uc154\ub108\ub9ac \ud615\ud0dc\ub85c \uacb0\uacfc \ubc18\ud658)\ncursor = conn.cursor(cursor_factory=RealDictCursor)\n\n# \ud14c\uc774\ube14 \uc0dd\uc131\ncursor.execute("""\n    CREATE TABLE IF NOT EXISTS products (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        description TEXT,\n        price DECIMAL(10, 2) NOT NULL,\n        stock INTEGER DEFAULT 0,\n        category VARCHAR(50),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n""")\n\nconn.commit()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"crud-\uc791\uc5c5",children:"CRUD \uc791\uc5c5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'class ProductRepository:\n    def __init__(self, connection):\n        self.conn = connection\n\n    def create(self, name, description, price, stock, category):\n        """\uc81c\ud488 \uc0dd\uc131"""\n        with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:\n            cursor.execute("""\n                INSERT INTO products (name, description, price, stock, category)\n                VALUES (%s, %s, %s, %s, %s)\n                RETURNING *\n            """, (name, description, price, stock, category))\n            self.conn.commit()\n            return cursor.fetchone()\n\n    def read(self, product_id):\n        """\uc81c\ud488 \uc870\ud68c"""\n        with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:\n            cursor.execute(\n                "SELECT * FROM products WHERE id = %s",\n                (product_id,)\n            )\n            return cursor.fetchone()\n\n    def update(self, product_id, **kwargs):\n        """\uc81c\ud488 \uc218\uc815"""\n        # \ub3d9\uc801 \ucffc\ub9ac \uc0dd\uc131\n        set_clause = sql.SQL(\', \').join(\n            sql.Composed([sql.Identifier(k), sql.SQL(\' = \'), sql.Placeholder()])\n            for k in kwargs.keys()\n        )\n\n        query = sql.SQL("UPDATE products SET {}, updated_at = CURRENT_TIMESTAMP WHERE id = %s RETURNING *").format(set_clause)\n\n        with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:\n            cursor.execute(query, list(kwargs.values()) + [product_id])\n            self.conn.commit()\n            return cursor.fetchone()\n\n    def delete(self, product_id):\n        """\uc81c\ud488 \uc0ad\uc81c"""\n        with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:\n            cursor.execute(\n                "DELETE FROM products WHERE id = %s RETURNING id",\n                (product_id,)\n            )\n            self.conn.commit()\n            return cursor.fetchone() is not None\n\n    def list_all(self, category=None, min_price=None, max_price=None):\n        """\uc81c\ud488 \ubaa9\ub85d \uc870\ud68c (\ud544\ud130\ub9c1)"""\n        query = "SELECT * FROM products WHERE 1=1"\n        params = []\n\n        if category:\n            query += " AND category = %s"\n            params.append(category)\n\n        if min_price is not None:\n            query += " AND price >= %s"\n            params.append(min_price)\n\n        if max_price is not None:\n            query += " AND price <= %s"\n            params.append(max_price)\n\n        query += " ORDER BY created_at DESC"\n\n        with self.conn.cursor(cursor_factory=RealDictCursor) as cursor:\n            cursor.execute(query, params)\n            return cursor.fetchall()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nrepo = ProductRepository(conn)\n\n# \uc0dd\uc131\nproduct = repo.create(\n    name="\ub178\ud2b8\ubd81",\n    description="\uace0\uc131\ub2a5 \ub178\ud2b8\ubd81",\n    price=1500000,\n    stock=10,\n    category="\uc804\uc790\uc81c\ud488"\n)\nprint(f"\uc0dd\uc131\ub41c \uc81c\ud488 ID: {product[\'id\']}")\n\n# \uc870\ud68c\nproduct = repo.read(1)\nprint(f"\uc81c\ud488: {product[\'name\']}, \uac00\uaca9: {product[\'price\']}")\n\n# \uc218\uc815\nupdated = repo.update(1, price=1400000, stock=8)\nprint(f"\uc218\uc815\ub41c \uac00\uaca9: {updated[\'price\']}")\n\n# \ubaa9\ub85d \uc870\ud68c\nproducts = repo.list_all(category="\uc804\uc790\uc81c\ud488", max_price=2000000)\nprint(f"\ucd1d {len(products)}\uac1c \uc81c\ud488")\n\nconn.close()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ud2b8\ub79c\uc7ad\uc158-\ucc98\ub9ac",children:"\ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import psycopg2\n\ndef transfer_money(conn, from_account, to_account, amount):\n    """\uacc4\uc88c \uac04 \uc1a1\uae08 (\ud2b8\ub79c\uc7ad\uc158 \uc608\uc81c)"""\n    try:\n        with conn.cursor() as cursor:\n            # \ucd9c\uae08 \uacc4\uc88c \uc794\uc561 \ud655\uc778\n            cursor.execute(\n                "SELECT balance FROM accounts WHERE id = %s FOR UPDATE",\n                (from_account,)\n            )\n            from_balance = cursor.fetchone()[0]\n\n            if from_balance < amount:\n                raise ValueError("\uc794\uc561\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4")\n\n            # \ucd9c\uae08\n            cursor.execute(\n                "UPDATE accounts SET balance = balance - %s WHERE id = %s",\n                (amount, from_account)\n            )\n\n            # \uc785\uae08\n            cursor.execute(\n                "UPDATE accounts SET balance = balance + %s WHERE id = %s",\n                (amount, to_account)\n            )\n\n            # \uac70\ub798 \uae30\ub85d\n            cursor.execute("""\n                INSERT INTO transactions (from_account, to_account, amount, type)\n                VALUES (%s, %s, %s, \'transfer\')\n            """, (from_account, to_account, amount))\n\n            conn.commit()\n            print(f"\uc1a1\uae08 \uc644\ub8cc: {amount}\uc6d0")\n\n    except Exception as e:\n        conn.rollback()\n        print(f"\uc1a1\uae08 \uc2e4\ud328: {e}")\n        raise\n\n# \uc0ac\uc6a9 \uc608\uc81c\ntry:\n    transfer_money(conn, from_account=1, to_account=2, amount=10000)\nexcept Exception as e:\n    print(f"\uc624\ub958 \ubc1c\uc0dd: {e}")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"34-mysql---\ub110\ub9ac-\uc0ac\uc6a9\ub418\ub294-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"3.4 MySQL - \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0-1",children:"\uc124\uce58 \ubc0f \uc5f0\uacb0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# MySQL Connector \uc124\uce58\npip install mysql-connector-python\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection(host, database, user, password):\n    \"\"\"MySQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc0dd\uc131\"\"\"\n    try:\n        connection = mysql.connector.connect(\n            host=host,\n            database=database,\n            user=user,\n            password=password,\n            charset='utf8mb4',\n            collation='utf8mb4_unicode_ci'\n        )\n\n        if connection.is_connected():\n            print(\"MySQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc131\uacf5\")\n            return connection\n\n    except Error as e:\n        print(f\"\uc5f0\uacb0 \uc624\ub958: {e}\")\n        return None\n\n# \uc5f0\uacb0 \uc0dd\uc131\nconn = create_connection(\n    host='localhost',\n    database='mydb',\n    user='root',\n    password='password'\n)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"connection-pool-\uc0ac\uc6a9",children:"Connection Pool \uc0ac\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from mysql.connector import pooling\n\n# \ucee4\ub125\uc158 \ud480 \uc0dd\uc131\nconnection_pool = pooling.MySQLConnectionPool(\n    pool_name="mypool",\n    pool_size=5,\n    pool_reset_session=True,\n    host=\'localhost\',\n    database=\'mydb\',\n    user=\'root\',\n    password=\'password\'\n)\n\nclass DatabasePool:\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucee4\ub125\uc158 \ud480 \uad00\ub9ac"""\n\n    @staticmethod\n    def get_connection():\n        """\ud480\uc5d0\uc11c \uc5f0\uacb0 \uac00\uc838\uc624\uae30"""\n        return connection_pool.get_connection()\n\n    @staticmethod\n    def execute_query(query, params=None, fetch=True):\n        """\ucffc\ub9ac \uc2e4\ud589 \ud5ec\ud37c \ud568\uc218"""\n        conn = None\n        try:\n            conn = DatabasePool.get_connection()\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute(query, params or ())\n\n            if fetch:\n                result = cursor.fetchall()\n                return result\n            else:\n                conn.commit()\n                return cursor.lastrowid\n\n        except Error as e:\n            if conn:\n                conn.rollback()\n            print(f"\ucffc\ub9ac \uc2e4\ud589 \uc624\ub958: {e}")\n            raise\n        finally:\n            if conn and conn.is_connected():\n                cursor.close()\n                conn.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nusers = DatabasePool.execute_query(\n    "SELECT * FROM users WHERE age > %s",\n    (20,)\n)\nprint(users)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"35-sqlalchemy---python-orm",children:"3.5 SQLAlchemy - Python ORM"}),"\n",(0,t.jsx)(e.p,{children:"SQLAlchemy\ub294 Python\uc5d0\uc11c \uac00\uc7a5 \uc778\uae30 \uc788\ub294 ORM(Object-Relational Mapping) \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uce58-\ubc0f-\uae30\ubcf8-\uc124\uc815",children:"\uc124\uce58 \ubc0f \uae30\ubcf8 \uc124\uc815"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install sqlalchemy\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, ForeignKey, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom datetime import datetime\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5d4\uc9c4 \uc0dd\uc131\n# SQLite\nengine = create_engine('sqlite:///ecommerce.db', echo=True)\n\n# PostgreSQL\n# engine = create_engine('postgresql://user:password@localhost/dbname')\n\n# MySQL\n# engine = create_engine('mysql+mysqlconnector://user:password@localhost/dbname')\n\n# Base \ud074\ub798\uc2a4 \uc0dd\uc131\nBase = declarative_base()\n\n# \uc138\uc158 \ud329\ud1a0\ub9ac \uc0dd\uc131\nSession = sessionmaker(bind=engine)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\ubaa8\ub378-\uc815\uc758",children:"\ubaa8\ub378 \uc815\uc758"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import Table\n\n# \ub2e4\ub300\ub2e4 \uad00\uacc4\ub97c \uc704\ud55c \uc911\uac04 \ud14c\uc774\ube14\norder_products = Table('order_products', Base.metadata,\n    Column('order_id', Integer, ForeignKey('orders.id')),\n    Column('product_id', Integer, ForeignKey('products.id')),\n    Column('quantity', Integer, default=1),\n    Column('price', Float)\n)\n\nclass User(Base):\n    \"\"\"\uc0ac\uc6a9\uc790 \ubaa8\ub378\"\"\"\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(100), unique=True, nullable=False)\n    password_hash = Column(String(255), nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    # \uad00\uacc4 \uc815\uc758\n    orders = relationship('Order', back_populates='user', cascade='all, delete-orphan')\n\n    def __repr__(self):\n        return f\"<User(username='{self.username}', email='{self.email}')>\"\n\nclass Product(Base):\n    \"\"\"\uc81c\ud488 \ubaa8\ub378\"\"\"\n    __tablename__ = 'products'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False)\n    description = Column(Text)\n    price = Column(Float, nullable=False)\n    stock = Column(Integer, default=0)\n    category = Column(String(50))\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    def __repr__(self):\n        return f\"<Product(name='{self.name}', price={self.price})>\"\n\nclass Order(Base):\n    \"\"\"\uc8fc\ubb38 \ubaa8\ub378\"\"\"\n    __tablename__ = 'orders'\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    total_amount = Column(Float, default=0)\n    status = Column(String(20), default='pending')\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    # \uad00\uacc4 \uc815\uc758\n    user = relationship('User', back_populates='orders')\n    products = relationship('Product', secondary=order_products, backref='orders')\n\n    def __repr__(self):\n        return f\"<Order(id={self.id}, total={self.total_amount}, status='{self.status}')>\"\n\n# \ud14c\uc774\ube14 \uc0dd\uc131\nBase.metadata.create_all(engine)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"crud-\uc791\uc5c5-orm-\ubc29\uc2dd",children:"CRUD \uc791\uc5c5 (ORM \ubc29\uc2dd)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy.orm import Session as SessionType\nfrom sqlalchemy import and_, or_, func\n\nclass UserService:\n    """\uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4"""\n\n    def __init__(self, session: SessionType):\n        self.session = session\n\n    def create_user(self, username, email, password_hash):\n        """\uc0ac\uc6a9\uc790 \uc0dd\uc131"""\n        user = User(\n            username=username,\n            email=email,\n            password_hash=password_hash\n        )\n        self.session.add(user)\n        self.session.commit()\n        self.session.refresh(user)\n        return user\n\n    def get_user(self, user_id):\n        """\uc0ac\uc6a9\uc790 \uc870\ud68c"""\n        return self.session.query(User).filter(User.id == user_id).first()\n\n    def get_user_by_username(self, username):\n        """\uc0ac\uc6a9\uc790\uba85\uc73c\ub85c \uc870\ud68c"""\n        return self.session.query(User).filter(User.username == username).first()\n\n    def update_user(self, user_id, **kwargs):\n        """\uc0ac\uc6a9\uc790 \uc218\uc815"""\n        user = self.get_user(user_id)\n        if user:\n            for key, value in kwargs.items():\n                setattr(user, key, value)\n            self.session.commit()\n            self.session.refresh(user)\n        return user\n\n    def delete_user(self, user_id):\n        """\uc0ac\uc6a9\uc790 \uc0ad\uc81c"""\n        user = self.get_user(user_id)\n        if user:\n            self.session.delete(user)\n            self.session.commit()\n            return True\n        return False\n\n    def list_users(self, limit=10, offset=0):\n        """\uc0ac\uc6a9\uc790 \ubaa9\ub85d \uc870\ud68c"""\n        return self.session.query(User).limit(limit).offset(offset).all()\n\nclass ProductService:\n    """\uc81c\ud488 \uc11c\ube44\uc2a4"""\n\n    def __init__(self, session: SessionType):\n        self.session = session\n\n    def create_product(self, name, description, price, stock, category):\n        """\uc81c\ud488 \uc0dd\uc131"""\n        product = Product(\n            name=name,\n            description=description,\n            price=price,\n            stock=stock,\n            category=category\n        )\n        self.session.add(product)\n        self.session.commit()\n        self.session.refresh(product)\n        return product\n\n    def search_products(self, keyword=None, category=None, min_price=None, max_price=None):\n        """\uc81c\ud488 \uac80\uc0c9"""\n        query = self.session.query(Product)\n\n        if keyword:\n            query = query.filter(\n                or_(\n                    Product.name.like(f\'%{keyword}%\'),\n                    Product.description.like(f\'%{keyword}%\')\n                )\n            )\n\n        if category:\n            query = query.filter(Product.category == category)\n\n        if min_price is not None:\n            query = query.filter(Product.price >= min_price)\n\n        if max_price is not None:\n            query = query.filter(Product.price <= max_price)\n\n        return query.all()\n\n    def update_stock(self, product_id, quantity):\n        """\uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8"""\n        product = self.session.query(Product).filter(Product.id == product_id).first()\n        if product:\n            product.stock += quantity\n            self.session.commit()\n            return product\n        return None\n\nclass OrderService:\n    """\uc8fc\ubb38 \uc11c\ube44\uc2a4"""\n\n    def __init__(self, session: SessionType):\n        self.session = session\n\n    def create_order(self, user_id, product_items):\n        """\n        \uc8fc\ubb38 \uc0dd\uc131\n        product_items: [(product_id, quantity), ...]\n        """\n        # \uc8fc\ubb38 \uc0dd\uc131\n        order = Order(user_id=user_id)\n        self.session.add(order)\n\n        total_amount = 0\n\n        for product_id, quantity in product_items:\n            product = self.session.query(Product).filter(Product.id == product_id).first()\n\n            if not product or product.stock < quantity:\n                raise ValueError(f"\uc81c\ud488 {product_id}\uc758 \uc7ac\uace0\uac00 \ubd80\uc871\ud569\ub2c8\ub2e4")\n\n            # \uc7ac\uace0 \uac10\uc18c\n            product.stock -= quantity\n\n            # \uc8fc\ubb38\uc5d0 \uc81c\ud488 \ucd94\uac00\n            order.products.append(product)\n            total_amount += product.price * quantity\n\n        order.total_amount = total_amount\n        self.session.commit()\n        self.session.refresh(order)\n        return order\n\n    def get_user_orders(self, user_id):\n        """\uc0ac\uc6a9\uc790\uc758 \uc8fc\ubb38 \ubaa9\ub85d \uc870\ud68c"""\n        return self.session.query(Order).filter(Order.user_id == user_id).all()\n\n    def get_order_statistics(self):\n        """\uc8fc\ubb38 \ud1b5\uacc4"""\n        stats = self.session.query(\n            func.count(Order.id).label(\'total_orders\'),\n            func.sum(Order.total_amount).label(\'total_revenue\'),\n            func.avg(Order.total_amount).label(\'avg_order_value\')\n        ).first()\n\n        return {\n            \'total_orders\': stats.total_orders or 0,\n            \'total_revenue\': float(stats.total_revenue or 0),\n            \'avg_order_value\': float(stats.avg_order_value or 0)\n        }\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsession = Session()\n\ntry:\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    user_service = UserService(session)\n    user = user_service.create_user(\n        username="\ud64d\uae38\ub3d9",\n        email="hong@example.com",\n        password_hash="hashed_password_here"\n    )\n    print(f"\uc0ac\uc6a9\uc790 \uc0dd\uc131: {user}")\n\n    # \uc81c\ud488 \uc0dd\uc131\n    product_service = ProductService(session)\n    products = [\n        product_service.create_product("\ub178\ud2b8\ubd81", "\uace0\uc131\ub2a5 \ub178\ud2b8\ubd81", 1500000, 10, "\uc804\uc790\uc81c\ud488"),\n        product_service.create_product("\ub9c8\uc6b0\uc2a4", "\ubb34\uc120 \ub9c8\uc6b0\uc2a4", 30000, 50, "\uc804\uc790\uc81c\ud488"),\n        product_service.create_product("\ud0a4\ubcf4\ub4dc", "\uae30\uacc4\uc2dd \ud0a4\ubcf4\ub4dc", 150000, 30, "\uc804\uc790\uc81c\ud488")\n    ]\n\n    # \uc8fc\ubb38 \uc0dd\uc131\n    order_service = OrderService(session)\n    order = order_service.create_order(\n        user_id=user.id,\n        product_items=[(products[0].id, 1), (products[1].id, 2)]\n    )\n    print(f"\uc8fc\ubb38 \uc0dd\uc131: {order}")\n\n    # \uc8fc\ubb38 \ud1b5\uacc4\n    stats = order_service.get_order_statistics()\n    print(f"\uc8fc\ubb38 \ud1b5\uacc4: {stats}")\n\nexcept Exception as e:\n    session.rollback()\n    print(f"\uc624\ub958 \ubc1c\uc0dd: {e}")\nfinally:\n    session.close()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\uace0\uae09-\ucffc\ub9ac-1",children:"\uace0\uae09 \ucffc\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import desc, asc, func, case\nfrom sqlalchemy.orm import joinedload, selectinload\n\nsession = Session()\n\n# 1. \uc870\uc778 \ucffc\ub9ac\nusers_with_orders = session.query(User).join(Order).filter(\n    Order.status == 'completed'\n).distinct().all()\n\n# 2. Eager Loading (N+1 \ubb38\uc81c \ud574\uacb0)\nusers_with_orders = session.query(User).options(\n    selectinload(User.orders)\n).all()\n\n# 3. \uc9d1\uacc4 \ucffc\ub9ac\n# \uce74\ud14c\uace0\ub9ac\ubcc4 \uc81c\ud488 \uc218\uc640 \ud3c9\uade0 \uac00\uaca9\ncategory_stats = session.query(\n    Product.category,\n    func.count(Product.id).label('product_count'),\n    func.avg(Product.price).label('avg_price'),\n    func.sum(Product.stock).label('total_stock')\n).group_by(Product.category).all()\n\nfor category, count, avg_price, total_stock in category_stats:\n    print(f\"{category}: {count}\uac1c, \ud3c9\uade0 \uac00\uaca9: {avg_price:.0f}\uc6d0, \ucd1d \uc7ac\uace0: {total_stock}\")\n\n# 4. \uc11c\ube0c\ucffc\ub9ac\nfrom sqlalchemy import select\n\n# \ud3c9\uade0 \uac00\uaca9\ubcf4\ub2e4 \ube44\uc2fc \uc81c\ud488\navg_price = session.query(func.avg(Product.price)).scalar()\nexpensive_products = session.query(Product).filter(\n    Product.price > avg_price\n).all()\n\n# 5. Case \ubb38 \uc0ac\uc6a9\nproduct_price_category = session.query(\n    Product.name,\n    Product.price,\n    case(\n        (Product.price < 50000, '\uc800\uac00'),\n        (Product.price < 500000, '\uc911\uac00'),\n        else_='\uace0\uac00'\n    ).label('price_category')\n).all()\n\n# 6. \ubcf5\uc7a1\ud55c \ud544\ud130\ub9c1\nfrom datetime import timedelta\n\n# \ucd5c\uadfc 7\uc77c\uac04 \uc8fc\ubb38\ud55c \uc0ac\uc6a9\uc790\nrecent_date = datetime.utcnow() - timedelta(days=7)\nactive_users = session.query(User).join(Order).filter(\n    Order.created_at >= recent_date\n).distinct().all()\n\nsession.close()\n"})}),"\n",(0,t.jsx)(e.h2,{id:"36-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ub9c8\uc774\uadf8\ub808\uc774\uc158---alembic",children:"3.6 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 - Alembic"}),"\n",(0,t.jsx)(e.p,{children:"Alembic\uc740 SQLAlchemy\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub3c4\uad6c\uc785\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uce58-\ubc0f-\ucd08\uae30\ud654",children:"\uc124\uce58 \ubc0f \ucd08\uae30\ud654"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install alembic\n\n# \ucd08\uae30\ud654\nalembic init alembic\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uc815-alembicini",children:"\uc124\uc815 (alembic.ini)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ini",children:"# alembic.ini\nsqlalchemy.url = sqlite:///ecommerce.db\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\uc0dd\uc131-\ubc0f-\uc801\uc6a9",children:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc0dd\uc131 \ubc0f \uc801\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud30c\uc77c \uc790\ub3d9 \uc0dd\uc131\nalembic revision --autogenerate -m "Initial migration"\n\n# \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc801\uc6a9\nalembic upgrade head\n\n# \ub864\ubc31\nalembic downgrade -1\n\n# \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud788\uc2a4\ud1a0\ub9ac \ud655\uc778\nalembic history\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ub9c8\uc774\uadf8\ub808\uc774\uc158-\ud30c\uc77c-\uc608\uc81c",children:"\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud30c\uc77c \uc608\uc81c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# alembic/versions/xxx_add_user_profile.py\nfrom alembic import op\nimport sqlalchemy as sa\n\ndef upgrade():\n    \"\"\"\uc5c5\uadf8\ub808\uc774\ub4dc \ub9c8\uc774\uadf8\ub808\uc774\uc158\"\"\"\n    op.create_table(\n        'user_profiles',\n        sa.Column('id', sa.Integer(), nullable=False),\n        sa.Column('user_id', sa.Integer(), nullable=False),\n        sa.Column('bio', sa.Text(), nullable=True),\n        sa.Column('avatar_url', sa.String(255), nullable=True),\n        sa.Column('phone', sa.String(20), nullable=True),\n        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),\n        sa.PrimaryKeyConstraint('id')\n    )\n\n    # \uceec\ub7fc \ucd94\uac00\n    op.add_column('users', sa.Column('is_active', sa.Boolean(), default=True))\n\n    # \uc778\ub371\uc2a4 \ucd94\uac00\n    op.create_index('idx_users_email', 'users', ['email'])\n\ndef downgrade():\n    \"\"\"\ub2e4\uc6b4\uadf8\ub808\uc774\ub4dc \ub9c8\uc774\uadf8\ub808\uc774\uc158\"\"\"\n    op.drop_index('idx_users_email', table_name='users')\n    op.drop_column('users', 'is_active')\n    op.drop_table('user_profiles')\n"})}),"\n",(0,t.jsx)(e.h2,{id:"37-mongodb---nosql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"3.7 MongoDB - NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsx)(e.p,{children:"MongoDB\ub294 \ubb38\uc11c \uc9c0\ud5a5 NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc785\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0-2",children:"\uc124\uce58 \ubc0f \uc5f0\uacb0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install pymongo\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from pymongo import MongoClient\nfrom datetime import datetime\nfrom bson.objectid import ObjectId\n\n# MongoDB \uc5f0\uacb0\nclient = MongoClient('mongodb://localhost:27017/')\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc120\ud0dd\ndb = client['myapp']\n\n# \uceec\ub809\uc158 \uc120\ud0dd\nusers_collection = db['users']\nposts_collection = db['posts']\n"})}),"\n",(0,t.jsx)(e.h3,{id:"crud-\uc791\uc5c5-1",children:"CRUD \uc791\uc5c5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'class MongoUserRepository:\n    """MongoDB \uc0ac\uc6a9\uc790 \ub808\ud3ec\uc9c0\ud1a0\ub9ac"""\n\n    def __init__(self, collection):\n        self.collection = collection\n\n    def create(self, username, email, **kwargs):\n        """\uc0ac\uc6a9\uc790 \uc0dd\uc131"""\n        user_doc = {\n            \'username\': username,\n            \'email\': email,\n            \'created_at\': datetime.utcnow(),\n            \'updated_at\': datetime.utcnow(),\n            **kwargs\n        }\n        result = self.collection.insert_one(user_doc)\n        user_doc[\'_id\'] = result.inserted_id\n        return user_doc\n\n    def find_by_id(self, user_id):\n        """ID\ub85c \uc0ac\uc6a9\uc790 \ucc3e\uae30"""\n        return self.collection.find_one({\'_id\': ObjectId(user_id)})\n\n    def find_by_username(self, username):\n        """\uc0ac\uc6a9\uc790\uba85\uc73c\ub85c \ucc3e\uae30"""\n        return self.collection.find_one({\'username\': username})\n\n    def update(self, user_id, **kwargs):\n        """\uc0ac\uc6a9\uc790 \uc5c5\ub370\uc774\ud2b8"""\n        kwargs[\'updated_at\'] = datetime.utcnow()\n        result = self.collection.update_one(\n            {\'_id\': ObjectId(user_id)},\n            {\'$set\': kwargs}\n        )\n        return result.modified_count > 0\n\n    def delete(self, user_id):\n        """\uc0ac\uc6a9\uc790 \uc0ad\uc81c"""\n        result = self.collection.delete_one({\'_id\': ObjectId(user_id)})\n        return result.deleted_count > 0\n\n    def find_all(self, filter_dict=None, skip=0, limit=10):\n        """\uc0ac\uc6a9\uc790 \ubaa9\ub85d \uc870\ud68c"""\n        cursor = self.collection.find(filter_dict or {}).skip(skip).limit(limit)\n        return list(cursor)\n\n    def count(self, filter_dict=None):\n        """\uc0ac\uc6a9\uc790 \uc218 \uacc4\uc0b0"""\n        return self.collection.count_documents(filter_dict or {})\n\n# \uc0ac\uc6a9 \uc608\uc81c\nuser_repo = MongoUserRepository(users_collection)\n\n# \uc0dd\uc131\nuser = user_repo.create(\n    username=\'\ud64d\uae38\ub3d9\',\n    email=\'hong@example.com\',\n    age=30,\n    interests=[\'\ub3c5\uc11c\', \'\uc601\ud654\']\n)\nprint(f"\uc0dd\uc131\ub41c \uc0ac\uc6a9\uc790 ID: {user[\'_id\']}")\n\n# \uc870\ud68c\nuser = user_repo.find_by_username(\'\ud64d\uae38\ub3d9\')\nprint(f"\uc0ac\uc6a9\uc790: {user}")\n\n# \uc5c5\ub370\uc774\ud2b8\nuser_repo.update(str(user[\'_id\']), age=31, interests=[\'\ub3c5\uc11c\', \'\uc601\ud654\', \'\uc5ec\ud589\'])\n\n# \ubaa9\ub85d \uc870\ud68c\nusers = user_repo.find_all(limit=5)\nprint(f"\ucd1d {len(users)}\uba85\uc758 \uc0ac\uc6a9\uc790")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\uace0\uae09-\ucffc\ub9ac-2",children:"\uace0\uae09 \ucffc\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from pymongo import ASCENDING, DESCENDING\n\n# \ubcf5\uc7a1\ud55c \ucffc\ub9ac\n# 1. \uc870\uac74 \uac80\uc0c9\nyoung_users = users_collection.find({\n    'age': {'$gte': 20, '$lte': 30},\n    'interests': {'$in': ['\ub3c5\uc11c', '\uc601\ud654']}\n})\n\n# 2. \uc815\uaddc\uc2dd \uac80\uc0c9\ngmail_users = users_collection.find({\n    'email': {'$regex': '.*@gmail\\\\.com$'}\n})\n\n# 3. \ubc30\uc5f4 \ucffc\ub9ac\nusers_with_reading = users_collection.find({\n    'interests': '\ub3c5\uc11c'\n})\n\n# 4. \ub17c\ub9ac \uc5f0\uc0b0\uc790\nactive_or_new_users = users_collection.find({\n    '$or': [\n        {'is_active': True},\n        {'created_at': {'$gte': datetime(2024, 1, 1)}}\n    ]\n})\n\n# 5. \ud504\ub85c\uc81d\uc158 (\ud2b9\uc815 \ud544\ub4dc\ub9cc \uac00\uc838\uc624\uae30)\nusernames = users_collection.find(\n    {},\n    {'username': 1, 'email': 1, '_id': 0}\n)\n\n# 6. \uc815\ub82c\nsorted_users = users_collection.find().sort([\n    ('created_at', DESCENDING),\n    ('username', ASCENDING)\n])\n\n# 7. \uc9d1\uacc4 (Aggregation)\npipeline = [\n    # \ud544\ud130\ub9c1\n    {'$match': {'age': {'$gte': 20}}},\n\n    # \uadf8\ub8f9\ud654\n    {'$group': {\n        '_id': '$interests',\n        'count': {'$sum': 1},\n        'avg_age': {'$avg': '$age'}\n    }},\n\n    # \uc815\ub82c\n    {'$sort': {'count': -1}},\n\n    # \uc81c\ud55c\n    {'$limit': 10}\n]\n\nresults = list(users_collection.aggregate(pipeline))\nfor result in results:\n    print(f\"\uad00\uc2ec\uc0ac: {result['_id']}, \uc0ac\uc6a9\uc790 \uc218: {result['count']}, \ud3c9\uade0 \ub098\uc774: {result['avg_age']:.1f}\")\n\n# 8. \uc778\ub371\uc2a4 \uc0dd\uc131\nusers_collection.create_index([('username', ASCENDING)], unique=True)\nusers_collection.create_index([('email', ASCENDING)], unique=True)\nusers_collection.create_index([('age', ASCENDING), ('created_at', DESCENDING)])\n\n# \uc778\ub371\uc2a4 \ud655\uc778\nindexes = users_collection.list_indexes()\nfor index in indexes:\n    print(index)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"mongodb-\ud2b8\ub79c\uc7ad\uc158",children:"MongoDB \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"def transfer_points(from_user_id, to_user_id, points):\n    \"\"\"\ud3ec\uc778\ud2b8 \uc774\uc804 (\ud2b8\ub79c\uc7ad\uc158)\"\"\"\n    with client.start_session() as session:\n        with session.start_transaction():\n            try:\n                # \ud3ec\uc778\ud2b8 \ucc28\uac10\n                result = users_collection.update_one(\n                    {\n                        '_id': ObjectId(from_user_id),\n                        'points': {'$gte': points}\n                    },\n                    {'$inc': {'points': -points}},\n                    session=session\n                )\n\n                if result.modified_count == 0:\n                    raise ValueError(\"\ud3ec\uc778\ud2b8\uac00 \ubd80\uc871\ud558\uac70\ub098 \uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4\")\n\n                # \ud3ec\uc778\ud2b8 \ucd94\uac00\n                users_collection.update_one(\n                    {'_id': ObjectId(to_user_id)},\n                    {'$inc': {'points': points}},\n                    session=session\n                )\n\n                # \ud2b8\ub79c\uc7ad\uc158 \ub85c\uadf8\n                db['transaction_logs'].insert_one({\n                    'from_user': from_user_id,\n                    'to_user': to_user_id,\n                    'points': points,\n                    'timestamp': datetime.utcnow()\n                }, session=session)\n\n                print(f\"\ud3ec\uc778\ud2b8 \uc774\uc804 \uc644\ub8cc: {points}\uc810\")\n\n            except Exception as e:\n                print(f\"\ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud328: {e}\")\n                raise\n"})}),"\n",(0,t.jsx)(e.h2,{id:"38-redis---\uc778\uba54\ubaa8\ub9ac-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"3.8 Redis - \uc778\uba54\ubaa8\ub9ac \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsx)(e.p,{children:"Redis\ub294 \uace0\uc131\ub2a5 \ud0a4-\uac12 \uc800\uc7a5\uc18c\ub85c, \uce90\uc2f1 \ubc0f \uc138\uc158 \uad00\ub9ac\uc5d0 \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uce58-\ubc0f-\uc5f0\uacb0-3",children:"\uc124\uce58 \ubc0f \uc5f0\uacb0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install redis\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import redis\nimport json\nfrom datetime import timedelta\n\n# Redis \uc5f0\uacb0\nr = redis.Redis(\n    host='localhost',\n    port=6379,\n    db=0,\n    decode_responses=True  # \ubb38\uc790\uc5f4\ub85c \ubc18\ud658\n)\n\n# \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\nr.ping()  # True\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uae30\ubcf8-\ub370\uc774\ud130-\ud0c0\uc785",children:"\uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# 1. \ubb38\uc790\uc5f4 (String)\nr.set('user:1:name', '\ud64d\uae38\ub3d9')\nr.set('user:1:age', 30)\nr.setex('session:abc123', timedelta(hours=1), 'user_data')  # TTL \uc124\uc815\n\nname = r.get('user:1:name')  # '\ud64d\uae38\ub3d9'\nage = int(r.get('user:1:age'))  # 30\n\n# \uc99d\uac00/\uac10\uc18c\nr.incr('page:views')  # 1\uc529 \uc99d\uac00\nr.incrby('page:views', 10)  # 10 \uc99d\uac00\nr.decr('stock:item1')  # 1\uc529 \uac10\uc18c\n\n# 2. \ud574\uc2dc (Hash) - \uac1d\uccb4 \uc800\uc7a5\uc5d0 \uc801\ud569\nr.hset('user:2', mapping={\n    'username': '\uae40\ucca0\uc218',\n    'email': 'kim@example.com',\n    'age': '25'\n})\n\nuser = r.hgetall('user:2')  # \ubaa8\ub4e0 \ud544\ub4dc \uac00\uc838\uc624\uae30\nusername = r.hget('user:2', 'username')  # \ud2b9\uc815 \ud544\ub4dc\nr.hincrby('user:2', 'age', 1)  # \ud574\uc2dc \ub0b4 \uc22b\uc790 \uc99d\uac00\n\n# 3. \ub9ac\uc2a4\ud2b8 (List) - \ud050, \uc2a4\ud0dd \uad6c\ud604\nr.lpush('tasks', 'task1', 'task2', 'task3')  # \uc67c\ucabd\uc5d0 \ucd94\uac00\nr.rpush('tasks', 'task4')  # \uc624\ub978\ucabd\uc5d0 \ucd94\uac00\n\ntask = r.lpop('tasks')  # \uc67c\ucabd\uc5d0\uc11c \uc81c\uac70 \ubc0f \ubc18\ud658\ntask = r.rpop('tasks')  # \uc624\ub978\ucabd\uc5d0\uc11c \uc81c\uac70 \ubc0f \ubc18\ud658\n\ntasks = r.lrange('tasks', 0, -1)  # \ubaa8\ub4e0 \ud56d\ubaa9 \uc870\ud68c\n\n# 4. \uc14b (Set) - \uc911\ubcf5 \uc5c6\ub294 \uceec\ub809\uc158\nr.sadd('tags:post1', 'python', 'redis', 'database')\nr.sadd('tags:post2', 'python', 'web', 'flask')\n\ntags = r.smembers('tags:post1')  # \ubaa8\ub4e0 \uba64\ubc84\nis_member = r.sismember('tags:post1', 'python')  # \uba64\ubc84 \ud655\uc778\n\n# \uad50\uc9d1\ud569, \ud569\uc9d1\ud569, \ucc28\uc9d1\ud569\ncommon_tags = r.sinter('tags:post1', 'tags:post2')  # {'python'}\nall_tags = r.sunion('tags:post1', 'tags:post2')\ndiff_tags = r.sdiff('tags:post1', 'tags:post2')\n\n# 5. \uc815\ub82c\ub41c \uc14b (Sorted Set) - \ub7ad\ud0b9, \ub9ac\ub354\ubcf4\ub4dc\nr.zadd('leaderboard', {\n    'player1': 1000,\n    'player2': 1500,\n    'player3': 2000,\n    'player4': 1200\n})\n\n# \uc0c1\uc704 3\uba85\ntop_players = r.zrevrange('leaderboard', 0, 2, withscores=True)\n# [('player3', 2000.0), ('player2', 1500.0), ('player4', 1200.0)]\n\n# \uc810\uc218 \uc99d\uac00\nr.zincrby('leaderboard', 500, 'player1')\n\n# \uc21c\uc704 \ud655\uc778\nrank = r.zrevrank('leaderboard', 'player1')  # 0-based \uc21c\uc704\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uce90\uc2f1-\ud328\ud134",children:"\uce90\uc2f1 \ud328\ud134"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import time\nimport functools\n\nclass RedisCache:\n    """Redis \uce90\uc2dc \ub370\ucf54\ub808\uc774\ud130"""\n\n    def __init__(self, redis_client, ttl=300):\n        self.redis = redis_client\n        self.ttl = ttl\n\n    def __call__(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            # \uce90\uc2dc \ud0a4 \uc0dd\uc131\n            cache_key = f"cache:{func.__name__}:{args}:{kwargs}"\n\n            # \uce90\uc2dc\uc5d0\uc11c \uc870\ud68c\n            cached_value = self.redis.get(cache_key)\n            if cached_value:\n                print(f"\uce90\uc2dc \ud788\ud2b8: {cache_key}")\n                return json.loads(cached_value)\n\n            # \uce90\uc2dc \ubbf8\uc2a4 - \ud568\uc218 \uc2e4\ud589\n            print(f"\uce90\uc2dc \ubbf8\uc2a4: {cache_key}")\n            result = func(*args, **kwargs)\n\n            # \uce90\uc2dc\uc5d0 \uc800\uc7a5\n            self.redis.setex(\n                cache_key,\n                self.ttl,\n                json.dumps(result)\n            )\n\n            return result\n\n        return wrapper\n\n# \uc0ac\uc6a9 \uc608\uc81c\ncache = RedisCache(r, ttl=60)\n\n@cache\ndef get_user_data(user_id):\n    """\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc870\ud68c (\ub290\ub9b0 \uc791\uc5c5 \uc2dc\ubbac\ub808\uc774\uc158)"""\n    time.sleep(2)  # DB \uc870\ud68c \uc2dc\ubbac\ub808\uc774\uc158\n    return {\n        \'id\': user_id,\n        \'username\': f\'user_{user_id}\',\n        \'email\': f\'user{user_id}@example.com\'\n    }\n\n# \uccab \ubc88\uc9f8 \ud638\ucd9c - \uce90\uc2dc \ubbf8\uc2a4\nstart = time.time()\nuser = get_user_data(1)\nprint(f"\uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")  # ~2\ucd08\n\n# \ub450 \ubc88\uc9f8 \ud638\ucd9c - \uce90\uc2dc \ud788\ud2b8\nstart = time.time()\nuser = get_user_data(1)\nprint(f"\uc18c\uc694 \uc2dc\uac04: {time.time() - start:.2f}\ucd08")  # ~0\ucd08\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\uc138\uc158-\uad00\ub9ac",children:"\uc138\uc158 \uad00\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import uuid\n\nclass SessionManager:\n    """Redis \uae30\ubc18 \uc138\uc158 \uad00\ub9ac"""\n\n    def __init__(self, redis_client, ttl=3600):\n        self.redis = redis_client\n        self.ttl = ttl\n\n    def create_session(self, user_id, user_data):\n        """\uc138\uc158 \uc0dd\uc131"""\n        session_id = str(uuid.uuid4())\n        session_key = f"session:{session_id}"\n\n        session_data = {\n            \'user_id\': str(user_id),\n            \'created_at\': str(datetime.utcnow()),\n            **user_data\n        }\n\n        self.redis.hset(session_key, mapping=session_data)\n        self.redis.expire(session_key, self.ttl)\n\n        return session_id\n\n    def get_session(self, session_id):\n        """\uc138\uc158 \uc870\ud68c"""\n        session_key = f"session:{session_id}"\n        session_data = self.redis.hgetall(session_key)\n\n        if session_data:\n            # TTL \uac31\uc2e0\n            self.redis.expire(session_key, self.ttl)\n            return session_data\n\n        return None\n\n    def delete_session(self, session_id):\n        """\uc138\uc158 \uc0ad\uc81c (\ub85c\uadf8\uc544\uc6c3)"""\n        session_key = f"session:{session_id}"\n        return self.redis.delete(session_key) > 0\n\n    def update_session(self, session_id, **kwargs):\n        """\uc138\uc158 \uc5c5\ub370\uc774\ud2b8"""\n        session_key = f"session:{session_id}"\n        if self.redis.exists(session_key):\n            self.redis.hset(session_key, mapping=kwargs)\n            self.redis.expire(session_key, self.ttl)\n            return True\n        return False\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsession_manager = SessionManager(r, ttl=1800)\n\n# \uc138\uc158 \uc0dd\uc131\nsession_id = session_manager.create_session(\n    user_id=1,\n    user_data={\n        \'username\': \'\ud64d\uae38\ub3d9\',\n        \'email\': \'hong@example.com\',\n        \'role\': \'admin\'\n    }\n)\nprint(f"\uc138\uc158 \uc0dd\uc131: {session_id}")\n\n# \uc138\uc158 \uc870\ud68c\nsession = session_manager.get_session(session_id)\nprint(f"\uc138\uc158 \ub370\uc774\ud130: {session}")\n\n# \uc138\uc158 \uc5c5\ub370\uc774\ud2b8\nsession_manager.update_session(session_id, last_activity=\'2024-01-01\')\n\n# \uc138\uc158 \uc0ad\uc81c\nsession_manager.delete_session(session_id)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ubd84\uc0b0-\ub77d-distributed-lock",children:"\ubd84\uc0b0 \ub77d (Distributed Lock)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import time\n\nclass RedisLock:\n    """Redis \ubd84\uc0b0 \ub77d"""\n\n    def __init__(self, redis_client, lock_name, timeout=10):\n        self.redis = redis_client\n        self.lock_name = f"lock:{lock_name}"\n        self.timeout = timeout\n        self.identifier = str(uuid.uuid4())\n\n    def acquire(self, blocking=True, blocking_timeout=None):\n        """\ub77d \ud68d\ub4dd"""\n        end_time = time.time() + blocking_timeout if blocking_timeout else None\n\n        while True:\n            # \ub77d \uc124\uc815 \uc2dc\ub3c4\n            if self.redis.set(self.lock_name, self.identifier, nx=True, ex=self.timeout):\n                return True\n\n            if not blocking:\n                return False\n\n            if end_time and time.time() > end_time:\n                return False\n\n            time.sleep(0.001)\n\n    def release(self):\n        """\ub77d \ud574\uc81c"""\n        # Lua \uc2a4\ud06c\ub9bd\ud2b8\ub85c \uc6d0\uc790\uc801 \uc0ad\uc81c\n        lua_script = """\n        if redis.call("get", KEYS[1]) == ARGV[1] then\n            return redis.call("del", KEYS[1])\n        else\n            return 0\n        end\n        """\n\n        return self.redis.eval(lua_script, 1, self.lock_name, self.identifier)\n\n    def __enter__(self):\n        self.acquire()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.release()\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndef update_inventory(product_id, quantity):\n    """\uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8 (\ub3d9\uc2dc\uc131 \uc81c\uc5b4)"""\n    lock = RedisLock(r, f"inventory:{product_id}")\n\n    if lock.acquire(blocking=True, blocking_timeout=5):\n        try:\n            # \uc7ac\uace0 \uc870\ud68c\n            current_stock = int(r.get(f"stock:{product_id}") or 0)\n\n            # \uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8\n            new_stock = current_stock + quantity\n            r.set(f"stock:{product_id}", new_stock)\n\n            print(f"\uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8 \uc131\uacf5: {current_stock} -> {new_stock}")\n\n        finally:\n            lock.release()\n    else:\n        print("\ub77d \ud68d\ub4dd \uc2e4\ud328")\n\n# Context manager \uc0ac\uc6a9\nwith RedisLock(r, "critical_section"):\n    # \ud06c\ub9ac\ud2f0\uceec \uc139\uc158\n    print("\ub77d\uc774 \ubcf4\ud638\ud558\ub294 \uc791\uc5c5 \uc218\ud589")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"39-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc124\uacc4-\ubaa8\ubc94-\uc0ac\ub840",children:"3.9 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4 \ubaa8\ubc94 \uc0ac\ub840"}),"\n",(0,t.jsx)(e.h3,{id:"\uc815\uaddc\ud654",children:"\uc815\uaddc\ud654"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \ube44\uc815\uaddc\ud654 \uc608\uc81c (\ub098\uc05c \uc124\uacc4)\n"""\norders \ud14c\uc774\ube14:\nid | customer_name | customer_email | product_name | product_price | quantity\n---+---------------+----------------+--------------+---------------+---------\n1  | \ud64d\uae38\ub3d9        | hong@test.com  | \ub178\ud2b8\ubd81       | 1500000       | 1\n2  | \ud64d\uae38\ub3d9        | hong@test.com  | \ub9c8\uc6b0\uc2a4       | 30000         | 2\n"""\n\n# \uc815\uaddc\ud654\ub41c \uc124\uacc4 (\uc88b\uc740 \uc124\uacc4)\n"""\ncustomers \ud14c\uc774\ube14:\nid | name   | email\n---+--------+---------------\n1  | \ud64d\uae38\ub3d9 | hong@test.com\n\nproducts \ud14c\uc774\ube14:\nid | name   | price\n---+--------+--------\n1  | \ub178\ud2b8\ubd81 | 1500000\n2  | \ub9c8\uc6b0\uc2a4 | 30000\n\norders \ud14c\uc774\ube14:\nid | customer_id | created_at\n---+-------------+------------\n1  | 1           | 2024-01-01\n2  | 1           | 2024-01-02\n\norder_items \ud14c\uc774\ube14:\nid | order_id | product_id | quantity | price\n---+----------+------------+----------+--------\n1  | 1        | 1          | 1        | 1500000\n2  | 2        | 2          | 2        | 30000\n"""\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\uc778\ub371\uc2a4-\uc804\ub7b5",children:"\uc778\ub371\uc2a4 \uc804\ub7b5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import Index\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    username = Column(String(50), nullable=False)\n    email = Column(String(100), nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    # \uc778\ub371\uc2a4 \uc815\uc758\n    __table_args__ = (\n        # \uc720\ub2c8\ud06c \uc778\ub371\uc2a4\n        Index('idx_username', 'username', unique=True),\n        Index('idx_email', 'email', unique=True),\n\n        # \ubcf5\ud569 \uc778\ub371\uc2a4\n        Index('idx_username_created', 'username', 'created_at'),\n\n        # \ubd80\ubd84 \uc778\ub371\uc2a4 (PostgreSQL)\n        # Index('idx_active_users', 'username',\n        #       postgresql_where=(is_active == True)),\n    )\n"})}),"\n",(0,t.jsx)(e.admonition,{title:"\uc778\ub371\uc2a4 \uc0ac\uc6a9 \uac00\uc774\ub4dc",type:"tip",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"WHERE \uc808\uc5d0 \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \uceec\ub7fc"}),"\uc5d0 \uc778\ub371\uc2a4 \uc0dd\uc131"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"JOIN \uc870\uac74\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc678\ub798 \ud0a4"}),"\uc5d0 \uc778\ub371\uc2a4 \uc0dd\uc131"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\ubcf5\ud569 \uc778\ub371\uc2a4"}),"\ub294 \uac00\uc7a5 \uc120\ud0dd\uc801\uc778 \uceec\ub7fc\uc744 \uc55e\uc5d0 \ubc30\uce58"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\uacfc\ub3c4\ud55c \uc778\ub371\uc2a4"}),"\ub294 INSERT/UPDATE \uc131\ub2a5 \uc800\ud558"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\ucee4\ubc84\ub9c1 \uc778\ub371\uc2a4"}),"\ub85c \ud14c\uc774\ube14 \uc811\uadfc \ucd5c\uc18c\ud654"]}),"\n"]})}),"\n",(0,t.jsx)(e.h3,{id:"\ub370\uc774\ud130-\ubb34\uacb0\uc131",children:"\ub370\uc774\ud130 \ubb34\uacb0\uc131"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import CheckConstraint\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False)\n    price = Column(Float, nullable=False)\n    stock = Column(Integer, default=0)\n    discount_rate = Column(Float, default=0)\n\n    # \uc81c\uc57d \uc870\uac74\n    __table_args__ = (\n        # CHECK \uc81c\uc57d\n        CheckConstraint('price > 0', name='check_positive_price'),\n        CheckConstraint('stock >= 0', name='check_non_negative_stock'),\n        CheckConstraint('discount_rate >= 0 AND discount_rate <= 100',\n                       name='check_discount_range'),\n    )\n\n# \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub808\ubca8 \uac80\uc99d\nfrom sqlalchemy.orm import validates\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False)\n    price = Column(Float, nullable=False)\n\n    @validates('price')\n    def validate_price(self, key, value):\n        if value <= 0:\n            raise ValueError(\"\uac00\uaca9\uc740 0\ubcf4\ub2e4 \ucee4\uc57c \ud569\ub2c8\ub2e4\")\n        return value\n\n    @validates('name')\n    def validate_name(self, key, value):\n        if not value or len(value.strip()) == 0:\n            raise ValueError(\"\uc81c\ud488\uba85\uc740 \ud544\uc218\uc785\ub2c8\ub2e4\")\n        return value.strip()\n"})}),"\n",(0,t.jsx)(e.h2,{id:"310-\uc131\ub2a5-\ucd5c\uc801\ud654",children:"3.10 \uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.h3,{id:"\ucffc\ub9ac-\ucd5c\uc801\ud654",children:"\ucffc\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy.orm import joinedload, selectinload, subqueryload\n\n# \ub098\uc05c \uc608: N+1 \ubb38\uc81c\nusers = session.query(User).all()\nfor user in users:\n    print(user.orders)  # \uac01 \uc0ac\uc6a9\uc790\ub9c8\ub2e4 \ucd94\uac00 \ucffc\ub9ac \ubc1c\uc0dd\n\n# \uc88b\uc740 \uc608 1: Eager Loading\nusers = session.query(User).options(\n    selectinload(User.orders)\n).all()\n\n# \uc88b\uc740 \uc608 2: Join\nusers = session.query(User).options(\n    joinedload(User.orders)\n).all()\n\n# \ubcf5\uc7a1\ud55c \uad00\uacc4\nusers = session.query(User).options(\n    selectinload(User.orders).selectinload(Order.products)\n).all()\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\ubc30\uce58-\ucc98\ub9ac",children:"\ubc30\uce58 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def bulk_insert_users(users_data):\n    """\ub300\ub7c9 \ub370\uc774\ud130 \uc0bd\uc785"""\n    session = Session()\n\n    try:\n        # \ubc29\ubc95 1: bulk_insert_mappings (\ube60\ub984, \uc774\ubca4\ud2b8 \ubc1c\uc0dd \uc548\ud568)\n        session.bulk_insert_mappings(User, users_data)\n\n        # \ubc29\ubc95 2: add_all (\ub290\ub9bc, \uc774\ubca4\ud2b8 \ubc1c\uc0dd)\n        # users = [User(**data) for data in users_data]\n        # session.add_all(users)\n\n        session.commit()\n        print(f"{len(users_data)}\uba85\uc758 \uc0ac\uc6a9\uc790 \uc0bd\uc785 \uc644\ub8cc")\n\n    except Exception as e:\n        session.rollback()\n        print(f"\uc624\ub958: {e}")\n    finally:\n        session.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nusers_data = [\n    {\'username\': f\'user{i}\', \'email\': f\'user{i}@example.com\'}\n    for i in range(1000)\n]\nbulk_insert_users(users_data)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ud398\uc774\uc9c0\ub124\uc774\uc158",children:"\ud398\uc774\uc9c0\ub124\uc774\uc158"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import func\n\nclass Pagination:\n    """\ud398\uc774\uc9c0\ub124\uc774\uc158 \ud5ec\ud37c"""\n\n    def __init__(self, query, page=1, per_page=20):\n        self.query = query\n        self.page = max(1, page)\n        self.per_page = max(1, min(per_page, 100))\n        self._total = None\n\n    @property\n    def total(self):\n        """\uc804\uccb4 \uc544\uc774\ud15c \uc218"""\n        if self._total is None:\n            self._total = self.query.count()\n        return self._total\n\n    @property\n    def pages(self):\n        """\uc804\uccb4 \ud398\uc774\uc9c0 \uc218"""\n        return (self.total + self.per_page - 1) // self.per_page\n\n    @property\n    def has_prev(self):\n        """\uc774\uc804 \ud398\uc774\uc9c0 \uc874\uc7ac \uc5ec\ubd80"""\n        return self.page > 1\n\n    @property\n    def has_next(self):\n        """\ub2e4\uc74c \ud398\uc774\uc9c0 \uc874\uc7ac \uc5ec\ubd80"""\n        return self.page < self.pages\n\n    @property\n    def items(self):\n        """\ud604\uc7ac \ud398\uc774\uc9c0 \uc544\uc774\ud15c"""\n        offset = (self.page - 1) * self.per_page\n        return self.query.limit(self.per_page).offset(offset).all()\n\n    def iter_pages(self, left_edge=2, left_current=2, right_current=3, right_edge=2):\n        """\ud398\uc774\uc9c0 \ubc88\ud638 \uc0dd\uc131\uae30"""\n        last = 0\n        for num in range(1, self.pages + 1):\n            if (num <= left_edge or\n                num > self.pages - right_edge or\n                (num >= self.page - left_current and\n                 num <= self.page + right_current)):\n                if last + 1 != num:\n                    yield None\n                yield num\n                last = num\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsession = Session()\nquery = session.query(User).filter(User.is_active == True)\npagination = Pagination(query, page=2, per_page=10)\n\nprint(f"\uc804\uccb4 {pagination.total}\uba85, \ud398\uc774\uc9c0 {pagination.page}/{pagination.pages}")\nfor user in pagination.items:\n    print(user.username)\n\n# \ud398\uc774\uc9c0 \ubc88\ud638 \ucd9c\ub825\nfor page_num in pagination.iter_pages():\n    if page_num is None:\n        print(\'...\')\n    else:\n        print(page_num, end=\' \')\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\uce90\uc2f1-\uc804\ub7b5",children:"\uce90\uc2f1 \uc804\ub7b5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from functools import lru_cache\nimport hashlib\n\nclass CachedQuery:\n    """\ucffc\ub9ac \uacb0\uacfc \uce90\uc2f1"""\n\n    def __init__(self, redis_client, ttl=300):\n        self.redis = redis_client\n        self.ttl = ttl\n\n    def cache_key(self, query_str, params):\n        """\uce90\uc2dc \ud0a4 \uc0dd\uc131"""\n        key_data = f"{query_str}:{params}"\n        key_hash = hashlib.md5(key_data.encode()).hexdigest()\n        return f"query_cache:{key_hash}"\n\n    def get(self, query_str, params):\n        """\uce90\uc2dc\uc5d0\uc11c \uc870\ud68c"""\n        key = self.cache_key(query_str, params)\n        cached = self.redis.get(key)\n\n        if cached:\n            return json.loads(cached)\n        return None\n\n    def set(self, query_str, params, result):\n        """\uce90\uc2dc\uc5d0 \uc800\uc7a5"""\n        key = self.cache_key(query_str, params)\n        self.redis.setex(\n            key,\n            self.ttl,\n            json.dumps(result, default=str)\n        )\n\n    def invalidate(self, pattern):\n        """\uce90\uc2dc \ubb34\ud6a8\ud654"""\n        keys = self.redis.keys(f"query_cache:*{pattern}*")\n        if keys:\n            self.redis.delete(*keys)\n\n# \uc0ac\uc6a9 \uc608\uc81c\ncache = CachedQuery(r, ttl=600)\n\ndef get_popular_products(limit=10):\n    """\uc778\uae30 \uc81c\ud488 \uc870\ud68c"""\n    query_str = "SELECT * FROM products ORDER BY views DESC LIMIT %s"\n\n    # \uce90\uc2dc \ud655\uc778\n    cached = cache.get(query_str, (limit,))\n    if cached:\n        print("\uce90\uc2dc\uc5d0\uc11c \uc870\ud68c")\n        return cached\n\n    # DB \uc870\ud68c\n    print("DB\uc5d0\uc11c \uc870\ud68c")\n    session = Session()\n    products = session.query(Product).order_by(\n        Product.views.desc()\n    ).limit(limit).all()\n\n    result = [\n        {\'id\': p.id, \'name\': p.name, \'views\': p.views}\n        for p in products\n    ]\n\n    # \uce90\uc2dc\uc5d0 \uc800\uc7a5\n    cache.set(query_str, (limit,), result)\n\n    session.close()\n    return result\n\n# \uc81c\ud488\uc774 \uc5c5\ub370\uc774\ud2b8\ub418\uba74 \uce90\uc2dc \ubb34\ud6a8\ud654\ndef update_product(product_id, **kwargs):\n    # ... \uc5c5\ub370\uc774\ud2b8 \ub85c\uc9c1 ...\n    cache.invalidate("products")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"311-\ubcf4\uc548",children:"3.11 \ubcf4\uc548"}),"\n",(0,t.jsx)(e.h3,{id:"sql-injection-\ubc29\uc9c0",children:"SQL Injection \ubc29\uc9c0"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \ub098\uc05c \uc608 - SQL Injection \ucde8\uc57d\ndef get_user_bad(username):\n    query = f"SELECT * FROM users WHERE username = \'{username}\'"\n    # username = "admin\' OR \'1\'=\'1" \uc785\ub825 \uc2dc \ubaa8\ub4e0 \uc0ac\uc6a9\uc790 \uc870\ud68c \uac00\ub2a5\n    cursor.execute(query)\n    return cursor.fetchall()\n\n# \uc88b\uc740 \uc608 - \ud30c\ub77c\ubbf8\ud130\ud654\ub41c \ucffc\ub9ac\ndef get_user_good(username):\n    # SQLite\n    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))\n\n    # PostgreSQL/MySQL\n    # cursor.execute("SELECT * FROM users WHERE username = %s", (username,))\n\n    return cursor.fetchall()\n\n# ORM \uc0ac\uc6a9 (\uc790\ub3d9\uc73c\ub85c \uc548\uc804)\ndef get_user_orm(username):\n    return session.query(User).filter(User.username == username).first()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ube44\ubc00\ubc88\ud638-\uc554\ud638\ud654",children:"\ube44\ubc00\ubc88\ud638 \uc554\ud638\ud654"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import hashlib\nimport secrets\nfrom passlib.hash import bcrypt\n\nclass PasswordManager:\n    """\ube44\ubc00\ubc88\ud638 \uad00\ub9ac"""\n\n    @staticmethod\n    def hash_password(password):\n        """\ube44\ubc00\ubc88\ud638 \ud574\uc2dc\ud654"""\n        return bcrypt.hash(password)\n\n    @staticmethod\n    def verify_password(password, hashed):\n        """\ube44\ubc00\ubc88\ud638 \uac80\uc99d"""\n        return bcrypt.verify(password, hashed)\n\n    @staticmethod\n    def generate_token(length=32):\n        """\ubcf4\uc548 \ud1a0\ud070 \uc0dd\uc131"""\n        return secrets.token_urlsafe(length)\n\n# \uc0ac\uc6a9 \uc608\uc81c\n# \ud68c\uc6d0\uac00\uc785\npassword = "mypassword123"\nhashed_password = PasswordManager.hash_password(password)\n\nuser = User(\n    username="\ud64d\uae38\ub3d9",\n    email="hong@example.com",\n    password_hash=hashed_password\n)\nsession.add(user)\nsession.commit()\n\n# \ub85c\uadf8\uc778\ninput_password = "mypassword123"\nuser = session.query(User).filter(User.username == "\ud64d\uae38\ub3d9").first()\n\nif user and PasswordManager.verify_password(input_password, user.password_hash):\n    print("\ub85c\uadf8\uc778 \uc131\uacf5")\nelse:\n    print("\ub85c\uadf8\uc778 \uc2e4\ud328")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc5f0\uacb0-\ubcf4\uc548",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ubcf4\uc548"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import os\nfrom urllib.parse import quote_plus\n\n# \ud658\uacbd \ubcc0\uc218 \uc0ac\uc6a9\nDB_USER = os.getenv('DB_USER')\nDB_PASSWORD = quote_plus(os.getenv('DB_PASSWORD'))\nDB_HOST = os.getenv('DB_HOST', 'localhost')\nDB_NAME = os.getenv('DB_NAME')\n\n# \uc548\uc804\ud55c \uc5f0\uacb0 \ubb38\uc790\uc5f4\nDATABASE_URL = f\"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}\"\n\nengine = create_engine(\n    DATABASE_URL,\n    pool_pre_ping=True,  # \uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778\n    pool_recycle=3600,   # 1\uc2dc\uac04\ub9c8\ub2e4 \uc5f0\uacb0 \uc7ac\uc0dd\uc131\n    echo=False           # \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 False\n)\n"})}),"\n",(0,t.jsx)(e.admonition,{title:"\ubcf4\uc548 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",type:"warning",children:(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ud30c\ub77c\ubbf8\ud130\ud654\ub41c \ucffc\ub9ac \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ube44\ubc00\ubc88\ud638\ub294 \ud56d\uc0c1 \ud574\uc2dc\ud654"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc790\uaca9\uc99d\uba85\uc740 \ud658\uacbd\ubcc0\uc218 \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ucd5c\uc18c \uad8c\ud55c \uc6d0\uce59 \uc801\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","SSL/TLS \uc5f0\uacb0 \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc815\uae30\uc801\uc778 \ubc31\uc5c5"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc5d0\ub7ec \uba54\uc2dc\uc9c0\uc5d0 \ubbfc\uac10\ud55c \uc815\ubcf4 \ub178\ucd9c \ubc29\uc9c0"]}),"\n"]})}),"\n",(0,t.jsx)(e.h2,{id:"312-\uc2e4\uc804-\uc608\uc81c",children:"3.12 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,t.jsx)(e.h3,{id:"\uc608\uc81c-1-\uc0ac\uc6a9\uc790-\uad00\ub9ac-\uc2dc\uc2a4\ud15c",children:"\uc608\uc81c 1: \uc0ac\uc6a9\uc790 \uad00\ub9ac \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom datetime import datetime, timedelta\nimport secrets\n\nBase = declarative_base()\nengine = create_engine(\'sqlite:///user_management.db\')\nSession = sessionmaker(bind=engine)\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id = Column(Integer, primary_key=True)\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(100), unique=True, nullable=False)\n    password_hash = Column(String(255), nullable=False)\n    is_active = Column(Boolean, default=True)\n    is_admin = Column(Boolean, default=False)\n    last_login = Column(DateTime)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\nclass PasswordResetToken(Base):\n    __tablename__ = \'password_reset_tokens\'\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\'users.id\'), nullable=False)\n    token = Column(String(100), unique=True, nullable=False)\n    expires_at = Column(DateTime, nullable=False)\n    used = Column(Boolean, default=False)\n\nBase.metadata.create_all(engine)\n\nclass UserManagementSystem:\n    """\uc0ac\uc6a9\uc790 \uad00\ub9ac \uc2dc\uc2a4\ud15c"""\n\n    def __init__(self):\n        self.session = Session()\n        self.password_manager = PasswordManager()\n\n    def register(self, username, email, password):\n        """\ud68c\uc6d0\uac00\uc785"""\n        # \uc911\ubcf5 \ud655\uc778\n        if self.session.query(User).filter(\n            (User.username == username) | (User.email == email)\n        ).first():\n            raise ValueError("\uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uc0ac\uc6a9\uc790\uba85 \ub610\ub294 \uc774\uba54\uc77c\uc785\ub2c8\ub2e4")\n\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(\n            username=username,\n            email=email,\n            password_hash=self.password_manager.hash_password(password)\n        )\n\n        self.session.add(user)\n        self.session.commit()\n\n        return user\n\n    def login(self, username, password):\n        """\ub85c\uadf8\uc778"""\n        user = self.session.query(User).filter(\n            User.username == username,\n            User.is_active == True\n        ).first()\n\n        if not user:\n            raise ValueError("\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        if not self.password_manager.verify_password(password, user.password_hash):\n            raise ValueError("\ube44\ubc00\ubc88\ud638\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4")\n\n        # \ub9c8\uc9c0\ub9c9 \ub85c\uadf8\uc778 \uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8\n        user.last_login = datetime.utcnow()\n        self.session.commit()\n\n        return user\n\n    def request_password_reset(self, email):\n        """\ube44\ubc00\ubc88\ud638 \uc7ac\uc124\uc815 \uc694\uccad"""\n        user = self.session.query(User).filter(User.email == email).first()\n\n        if not user:\n            # \ubcf4\uc548\uc744 \uc704\ud574 \uc0ac\uc6a9\uc790\uac00 \uc5c6\uc5b4\ub3c4 \uc131\uacf5 \uba54\uc2dc\uc9c0 \ubc18\ud658\n            return None\n\n        # \ud1a0\ud070 \uc0dd\uc131\n        token = secrets.token_urlsafe(32)\n        expires_at = datetime.utcnow() + timedelta(hours=24)\n\n        reset_token = PasswordResetToken(\n            user_id=user.id,\n            token=token,\n            expires_at=expires_at\n        )\n\n        self.session.add(reset_token)\n        self.session.commit()\n\n        # \uc2e4\uc81c\ub85c\ub294 \uc774\uba54\uc77c \ubc1c\uc1a1\n        print(f"\ube44\ubc00\ubc88\ud638 \uc7ac\uc124\uc815 \ub9c1\ud06c: /reset-password?token={token}")\n\n        return token\n\n    def reset_password(self, token, new_password):\n        """\ube44\ubc00\ubc88\ud638 \uc7ac\uc124\uc815"""\n        reset_token = self.session.query(PasswordResetToken).filter(\n            PasswordResetToken.token == token,\n            PasswordResetToken.used == False,\n            PasswordResetToken.expires_at > datetime.utcnow()\n        ).first()\n\n        if not reset_token:\n            raise ValueError("\uc720\ud6a8\ud558\uc9c0 \uc54a\uac70\ub098 \ub9cc\ub8cc\ub41c \ud1a0\ud070\uc785\ub2c8\ub2e4")\n\n        # \ube44\ubc00\ubc88\ud638 \uc5c5\ub370\uc774\ud2b8\n        user = self.session.query(User).filter(User.id == reset_token.user_id).first()\n        user.password_hash = self.password_manager.hash_password(new_password)\n\n        # \ud1a0\ud070 \uc0ac\uc6a9 \ucc98\ub9ac\n        reset_token.used = True\n\n        self.session.commit()\n\n        return user\n\n    def deactivate_user(self, user_id):\n        """\uc0ac\uc6a9\uc790 \ube44\ud65c\uc131\ud654"""\n        user = self.session.query(User).filter(User.id == user_id).first()\n        if user:\n            user.is_active = False\n            self.session.commit()\n            return True\n        return False\n\n    def close(self):\n        """\uc138\uc158 \uc885\ub8cc"""\n        self.session.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsystem = UserManagementSystem()\n\ntry:\n    # \ud68c\uc6d0\uac00\uc785\n    user = system.register("\ud64d\uae38\ub3d9", "hong@example.com", "password123")\n    print(f"\ud68c\uc6d0\uac00\uc785 \uc131\uacf5: {user.username}")\n\n    # \ub85c\uadf8\uc778\n    user = system.login("\ud64d\uae38\ub3d9", "password123")\n    print(f"\ub85c\uadf8\uc778 \uc131\uacf5: {user.username}, \ub9c8\uc9c0\ub9c9 \ub85c\uadf8\uc778: {user.last_login}")\n\n    # \ube44\ubc00\ubc88\ud638 \uc7ac\uc124\uc815\n    token = system.request_password_reset("hong@example.com")\n    if token:\n        system.reset_password(token, "newpassword456")\n        print("\ube44\ubc00\ubc88\ud638 \uc7ac\uc124\uc815 \uc644\ub8cc")\n\nexcept ValueError as e:\n    print(f"\uc624\ub958: {e}")\nfinally:\n    system.close()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\uc608\uc81c-2-\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c",children:"\uc608\uc81c 2: \ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"\ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c \uc804\uccb4 \ucf54\ub4dc \ubcf4\uae30"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, ForeignKey, Table\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom datetime import datetime\n\nBase = declarative_base()\nengine = create_engine(\'sqlite:///blog.db\')\nSession = sessionmaker(bind=engine)\n\n# \ub2e4\ub300\ub2e4 \uad00\uacc4: \uac8c\uc2dc\uae00-\ud0dc\uadf8\npost_tags = Table(\'post_tags\', Base.metadata,\n    Column(\'post_id\', Integer, ForeignKey(\'posts.id\')),\n    Column(\'tag_id\', Integer, ForeignKey(\'tags.id\'))\n)\n\nclass Author(Base):\n    __tablename__ = \'authors\'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False)\n    email = Column(String(100), unique=True, nullable=False)\n    bio = Column(Text)\n\n    posts = relationship(\'Post\', back_populates=\'author\', cascade=\'all, delete-orphan\')\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String(200), nullable=False)\n    slug = Column(String(200), unique=True, nullable=False)\n    content = Column(Text, nullable=False)\n    excerpt = Column(Text)\n    author_id = Column(Integer, ForeignKey(\'authors.id\'), nullable=False)\n    published = Column(Boolean, default=False)\n    views = Column(Integer, default=0)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    author = relationship(\'Author\', back_populates=\'posts\')\n    comments = relationship(\'Comment\', back_populates=\'post\', cascade=\'all, delete-orphan\')\n    tags = relationship(\'Tag\', secondary=post_tags, back_populates=\'posts\')\n\nclass Comment(Base):\n    __tablename__ = \'comments\'\n\n    id = Column(Integer, primary_key=True)\n    post_id = Column(Integer, ForeignKey(\'posts.id\'), nullable=False)\n    author_name = Column(String(100), nullable=False)\n    author_email = Column(String(100), nullable=False)\n    content = Column(Text, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    post = relationship(\'Post\', back_populates=\'comments\')\n\nclass Tag(Base):\n    __tablename__ = \'tags\'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), unique=True, nullable=False)\n\n    posts = relationship(\'Post\', secondary=post_tags, back_populates=\'tags\')\n\nBase.metadata.create_all(engine)\n\nclass BlogSystem:\n    """\ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c"""\n\n    def __init__(self):\n        self.session = Session()\n\n    def create_post(self, title, content, author_id, tags=None, excerpt=None):\n        """\uac8c\uc2dc\uae00 \uc791\uc131"""\n        # slug \uc0dd\uc131 (\uac04\ub2e8\ud55c \ubc84\uc804)\n        import re\n        slug = re.sub(r\'[^\\w\\s-]\', \'\', title.lower())\n        slug = re.sub(r\'[-\\s]+\', \'-\', slug)\n\n        post = Post(\n            title=title,\n            slug=slug,\n            content=content,\n            excerpt=excerpt or content[:200],\n            author_id=author_id\n        )\n\n        # \ud0dc\uadf8 \ucd94\uac00\n        if tags:\n            for tag_name in tags:\n                tag = self.session.query(Tag).filter(Tag.name == tag_name).first()\n                if not tag:\n                    tag = Tag(name=tag_name)\n                    self.session.add(tag)\n                post.tags.append(tag)\n\n        self.session.add(post)\n        self.session.commit()\n        self.session.refresh(post)\n\n        return post\n\n    def publish_post(self, post_id):\n        """\uac8c\uc2dc\uae00 \ubc1c\ud589"""\n        post = self.session.query(Post).filter(Post.id == post_id).first()\n        if post:\n            post.published = True\n            self.session.commit()\n            return post\n        return None\n\n    def get_published_posts(self, limit=10, offset=0):\n        """\ubc1c\ud589\ub41c \uac8c\uc2dc\uae00 \ubaa9\ub85d"""\n        return self.session.query(Post).filter(\n            Post.published == True\n        ).order_by(\n            Post.created_at.desc()\n        ).limit(limit).offset(offset).all()\n\n    def get_post_by_slug(self, slug):\n        """\uc2ac\ub7ec\uadf8\ub85c \uac8c\uc2dc\uae00 \uc870\ud68c"""\n        post = self.session.query(Post).filter(Post.slug == slug).first()\n\n        if post:\n            # \uc870\ud68c\uc218 \uc99d\uac00\n            post.views += 1\n            self.session.commit()\n\n        return post\n\n    def add_comment(self, post_id, author_name, author_email, content):\n        """\ub313\uae00 \ucd94\uac00"""\n        comment = Comment(\n            post_id=post_id,\n            author_name=author_name,\n            author_email=author_email,\n            content=content\n        )\n\n        self.session.add(comment)\n        self.session.commit()\n\n        return comment\n\n    def get_posts_by_tag(self, tag_name):\n        """\ud0dc\uadf8\ubcc4 \uac8c\uc2dc\uae00 \uc870\ud68c"""\n        return self.session.query(Post).join(Post.tags).filter(\n            Tag.name == tag_name,\n            Post.published == True\n        ).all()\n\n    def get_popular_posts(self, limit=5):\n        """\uc778\uae30 \uac8c\uc2dc\uae00"""\n        return self.session.query(Post).filter(\n            Post.published == True\n        ).order_by(\n            Post.views.desc()\n        ).limit(limit).all()\n\n    def search_posts(self, keyword):\n        """\uac8c\uc2dc\uae00 \uac80\uc0c9"""\n        return self.session.query(Post).filter(\n            Post.published == True,\n            (Post.title.like(f\'%{keyword}%\')) |\n            (Post.content.like(f\'%{keyword}%\'))\n        ).all()\n\n    def get_author_stats(self, author_id):\n        """\uc791\uc131\uc790 \ud1b5\uacc4"""\n        from sqlalchemy import func\n\n        stats = self.session.query(\n            func.count(Post.id).label(\'total_posts\'),\n            func.sum(Post.views).label(\'total_views\'),\n            func.count(Comment.id).label(\'total_comments\')\n        ).outerjoin(\n            Comment, Post.id == Comment.post_id\n        ).filter(\n            Post.author_id == author_id\n        ).first()\n\n        return {\n            \'total_posts\': stats.total_posts or 0,\n            \'total_views\': stats.total_views or 0,\n            \'total_comments\': stats.total_comments or 0\n        }\n\n    def close(self):\n        self.session.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nblog = BlogSystem()\n\ntry:\n    # \uc791\uc131\uc790 \uc0dd\uc131\n    author = Author(name="\ud64d\uae38\ub3d9", email="hong@example.com", bio="Python \uac1c\ubc1c\uc790")\n    blog.session.add(author)\n    blog.session.commit()\n\n    # \uac8c\uc2dc\uae00 \uc791\uc131\n    post = blog.create_post(\n        title="Python \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\ub3d9",\n        content="Python\uc5d0\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc5f0\ub3d9\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\uc2dc\ub2e4...",\n        author_id=author.id,\n        tags=["Python", "Database", "Tutorial"]\n    )\n\n    # \uac8c\uc2dc\uae00 \ubc1c\ud589\n    blog.publish_post(post.id)\n\n    # \ub313\uae00 \ucd94\uac00\n    blog.add_comment(\n        post_id=post.id,\n        author_name="\uae40\ucca0\uc218",\n        author_email="kim@example.com",\n        content="\uc88b\uc740 \uae00 \uac10\uc0ac\ud569\ub2c8\ub2e4!"\n    )\n\n    # \uc778\uae30 \uac8c\uc2dc\uae00 \uc870\ud68c\n    popular = blog.get_popular_posts(limit=5)\n    for p in popular:\n        print(f"{p.title} - \uc870\ud68c\uc218: {p.views}")\n\n    # \uc791\uc131\uc790 \ud1b5\uacc4\n    stats = blog.get_author_stats(author.id)\n    print(f"\ud1b5\uacc4: {stats}")\n\nfinally:\n    blog.close()\n'})})]}),"\n",(0,t.jsx)(e.h3,{id:"\uc608\uc81c-3-e-commerce-\uc7ac\uace0-\uad00\ub9ac",children:"\uc608\uc81c 3: E-commerce \uc7ac\uace0 \uad00\ub9ac"}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"\uc7ac\uace0 \uad00\ub9ac \uc2dc\uc2a4\ud15c \uc804\uccb4 \ucf54\ub4dc \ubcf4\uae30"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, ForeignKey, Enum\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom datetime import datetime\nimport enum\n\nBase = declarative_base()\nengine = create_engine(\'sqlite:///inventory.db\')\nSession = sessionmaker(bind=engine)\n\nclass TransactionType(enum.Enum):\n    """\ud2b8\ub79c\uc7ad\uc158 \ud0c0\uc785"""\n    IN = "\uc785\uace0"\n    OUT = "\ucd9c\uace0"\n    RETURN = "\ubc18\ud488"\n    ADJUSTMENT = "\uc870\uc815"\n\nclass Product(Base):\n    __tablename__ = \'products\'\n\n    id = Column(Integer, primary_key=True)\n    sku = Column(String(50), unique=True, nullable=False)\n    name = Column(String(200), nullable=False)\n    description = Column(String(500))\n    price = Column(Float, nullable=False)\n    cost = Column(Float, nullable=False)\n    stock_quantity = Column(Integer, default=0)\n    min_stock_level = Column(Integer, default=10)\n    max_stock_level = Column(Integer, default=100)\n\n    transactions = relationship(\'StockTransaction\', back_populates=\'product\')\n\nclass StockTransaction(Base):\n    __tablename__ = \'stock_transactions\'\n\n    id = Column(Integer, primary_key=True)\n    product_id = Column(Integer, ForeignKey(\'products.id\'), nullable=False)\n    type = Column(Enum(TransactionType), nullable=False)\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(Float)\n    reference_number = Column(String(100))\n    notes = Column(String(500))\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    product = relationship(\'Product\', back_populates=\'transactions\')\n\nBase.metadata.create_all(engine)\n\nclass InventoryManager:\n    """\uc7ac\uace0 \uad00\ub9ac \uc2dc\uc2a4\ud15c"""\n\n    def __init__(self):\n        self.session = Session()\n\n    def add_product(self, sku, name, price, cost, min_stock=10, max_stock=100, **kwargs):\n        """\uc81c\ud488 \ucd94\uac00"""\n        product = Product(\n            sku=sku,\n            name=name,\n            price=price,\n            cost=cost,\n            min_stock_level=min_stock,\n            max_stock_level=max_stock,\n            **kwargs\n        )\n\n        self.session.add(product)\n        self.session.commit()\n        self.session.refresh(product)\n\n        return product\n\n    def stock_in(self, product_id, quantity, unit_price=None, reference=None, notes=None):\n        """\uc785\uace0 \ucc98\ub9ac"""\n        product = self.session.query(Product).filter(Product.id == product_id).first()\n\n        if not product:\n            raise ValueError("\uc81c\ud488\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        # \uc7ac\uace0 \uc99d\uac00\n        product.stock_quantity += quantity\n\n        # \ud2b8\ub79c\uc7ad\uc158 \uae30\ub85d\n        transaction = StockTransaction(\n            product_id=product_id,\n            type=TransactionType.IN,\n            quantity=quantity,\n            unit_price=unit_price or product.cost,\n            reference_number=reference,\n            notes=notes\n        )\n\n        self.session.add(transaction)\n        self.session.commit()\n\n        return product\n\n    def stock_out(self, product_id, quantity, reference=None, notes=None):\n        """\ucd9c\uace0 \ucc98\ub9ac"""\n        product = self.session.query(Product).filter(Product.id == product_id).first()\n\n        if not product:\n            raise ValueError("\uc81c\ud488\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        if product.stock_quantity < quantity:\n            raise ValueError(f"\uc7ac\uace0 \ubd80\uc871: \ud604\uc7ac {product.stock_quantity}\uac1c")\n\n        # \uc7ac\uace0 \uac10\uc18c\n        product.stock_quantity -= quantity\n\n        # \ud2b8\ub79c\uc7ad\uc158 \uae30\ub85d\n        transaction = StockTransaction(\n            product_id=product_id,\n            type=TransactionType.OUT,\n            quantity=quantity,\n            unit_price=product.price,\n            reference_number=reference,\n            notes=notes\n        )\n\n        self.session.add(transaction)\n        self.session.commit()\n\n        # \ucd5c\uc18c \uc7ac\uace0 \uc54c\ub9bc\n        if product.stock_quantity <= product.min_stock_level:\n            print(f"\u26a0\ufe0f \uc7ac\uace0 \ubd80\uc871 \uc54c\ub9bc: {product.name} ({product.stock_quantity}\uac1c)")\n\n        return product\n\n    def adjust_stock(self, product_id, new_quantity, notes=None):\n        """\uc7ac\uace0 \uc870\uc815"""\n        product = self.session.query(Product).filter(Product.id == product_id).first()\n\n        if not product:\n            raise ValueError("\uc81c\ud488\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        diff = new_quantity - product.stock_quantity\n\n        # \uc7ac\uace0 \uc870\uc815\n        product.stock_quantity = new_quantity\n\n        # \ud2b8\ub79c\uc7ad\uc158 \uae30\ub85d\n        transaction = StockTransaction(\n            product_id=product_id,\n            type=TransactionType.ADJUSTMENT,\n            quantity=diff,\n            notes=notes or f"\uc7ac\uace0 \uc870\uc815: {product.stock_quantity} -> {new_quantity}"\n        )\n\n        self.session.add(transaction)\n        self.session.commit()\n\n        return product\n\n    def get_low_stock_products(self):\n        """\uc7ac\uace0 \ubd80\uc871 \uc81c\ud488 \uc870\ud68c"""\n        return self.session.query(Product).filter(\n            Product.stock_quantity <= Product.min_stock_level\n        ).all()\n\n    def get_stock_value(self):\n        """\ucd1d \uc7ac\uace0 \uac00\uce58"""\n        from sqlalchemy import func\n\n        result = self.session.query(\n            func.sum(Product.stock_quantity * Product.cost).label(\'total_cost\'),\n            func.sum(Product.stock_quantity * Product.price).label(\'total_value\')\n        ).first()\n\n        return {\n            \'total_cost\': float(result.total_cost or 0),\n            \'total_value\': float(result.total_value or 0),\n            \'profit_margin\': float(result.total_value or 0) - float(result.total_cost or 0)\n        }\n\n    def get_product_history(self, product_id, limit=20):\n        """\uc81c\ud488 \uac70\ub798 \ud788\uc2a4\ud1a0\ub9ac"""\n        return self.session.query(StockTransaction).filter(\n            StockTransaction.product_id == product_id\n        ).order_by(\n            StockTransaction.created_at.desc()\n        ).limit(limit).all()\n\n    def generate_reorder_list(self):\n        """\uc7ac\uc8fc\ubb38 \ubaa9\ub85d \uc0dd\uc131"""\n        low_stock = self.get_low_stock_products()\n\n        reorder_list = []\n        for product in low_stock:\n            reorder_quantity = product.max_stock_level - product.stock_quantity\n            reorder_list.append({\n                \'sku\': product.sku,\n                \'name\': product.name,\n                \'current_stock\': product.stock_quantity,\n                \'reorder_quantity\': reorder_quantity,\n                \'estimated_cost\': reorder_quantity * product.cost\n            })\n\n        return reorder_list\n\n    def close(self):\n        self.session.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\ninventory = InventoryManager()\n\ntry:\n    # \uc81c\ud488 \ucd94\uac00\n    laptop = inventory.add_product(\n        sku="LAP-001",\n        name="\ub178\ud2b8\ubd81",\n        price=1500000,\n        cost=1200000,\n        min_stock=5,\n        max_stock=50,\n        description="\uace0\uc131\ub2a5 \ub178\ud2b8\ubd81"\n    )\n\n    # \uc785\uace0\n    inventory.stock_in(laptop.id, quantity=20, reference="PO-2024-001")\n    print(f"\ud604\uc7ac \uc7ac\uace0: {laptop.stock_quantity}\uac1c")\n\n    # \ucd9c\uace0\n    inventory.stock_out(laptop.id, quantity=3, reference="SO-2024-001")\n\n    # \uc7ac\uace0 \uac00\uce58 \ud655\uc778\n    value = inventory.get_stock_value()\n    print(f"\uc7ac\uace0 \uac00\uce58: {value}")\n\n    # \uc7ac\uc8fc\ubb38 \ubaa9\ub85d\n    reorder = inventory.generate_reorder_list()\n    for item in reorder:\n        print(f"\uc7ac\uc8fc\ubb38 \ud544\uc694: {item[\'name\']} - {item[\'reorder_quantity\']}\uac1c")\n\nfinally:\n    inventory.close()\n'})})]}),"\n",(0,t.jsx)(e.h2,{id:"313-\uc5f0\uc2b5-\ubb38\uc81c",children:"3.13 \uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,t.jsx)(e.h3,{id:"\ubb38\uc81c-1-\ub3c4\uc11c\uad00-\uad00\ub9ac-\uc2dc\uc2a4\ud15c",children:"\ubb38\uc81c 1: \ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsx)(e.p,{children:"\ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\uc694\uad6c\uc0ac\ud56d:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\ub3c4\uc11c, \ud68c\uc6d0, \ub300\ucd9c \uc815\ubcf4 \uad00\ub9ac"}),"\n",(0,t.jsx)(e.li,{children:"\ub3c4\uc11c \uac80\uc0c9 (\uc81c\ubaa9, \uc800\uc790, ISBN)"}),"\n",(0,t.jsx)(e.li,{children:"\ub300\ucd9c/\ubc18\ub0a9 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.li,{children:"\uc5f0\uccb4\ub8cc \uacc4\uc0b0"}),"\n",(0,t.jsx)(e.li,{children:"\ud1b5\uacc4 (\uc778\uae30 \ub3c4\uc11c, \ub300\ucd9c \ud604\ud669)"}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import create_engine, Column, Integer, String, Date, Float, Boolean, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom datetime import datetime, timedelta\n\nBase = declarative_base()\nengine = create_engine(\'sqlite:///library.db\')\nSession = sessionmaker(bind=engine)\n\nclass Book(Base):\n    __tablename__ = \'books\'\n\n    id = Column(Integer, primary_key=True)\n    isbn = Column(String(13), unique=True, nullable=False)\n    title = Column(String(200), nullable=False)\n    author = Column(String(100), nullable=False)\n    publisher = Column(String(100))\n    published_date = Column(Date)\n    total_copies = Column(Integer, default=1)\n    available_copies = Column(Integer, default=1)\n\n    loans = relationship(\'Loan\', back_populates=\'book\')\n\nclass Member(Base):\n    __tablename__ = \'members\'\n\n    id = Column(Integer, primary_key=True)\n    member_number = Column(String(20), unique=True, nullable=False)\n    name = Column(String(100), nullable=False)\n    email = Column(String(100), unique=True, nullable=False)\n    phone = Column(String(20))\n    joined_date = Column(Date, default=datetime.utcnow)\n    is_active = Column(Boolean, default=True)\n\n    loans = relationship(\'Loan\', back_populates=\'member\')\n\nclass Loan(Base):\n    __tablename__ = \'loans\'\n\n    id = Column(Integer, primary_key=True)\n    book_id = Column(Integer, ForeignKey(\'books.id\'), nullable=False)\n    member_id = Column(Integer, ForeignKey(\'members.id\'), nullable=False)\n    loan_date = Column(Date, default=datetime.utcnow)\n    due_date = Column(Date, nullable=False)\n    return_date = Column(Date)\n    fine_amount = Column(Float, default=0)\n    fine_paid = Column(Boolean, default=False)\n\n    book = relationship(\'Book\', back_populates=\'loans\')\n    member = relationship(\'Member\', back_populates=\'loans\')\n\nBase.metadata.create_all(engine)\n\nclass LibrarySystem:\n    """\ub3c4\uc11c\uad00 \uad00\ub9ac \uc2dc\uc2a4\ud15c"""\n\n    LOAN_PERIOD_DAYS = 14\n    DAILY_FINE = 500  # \ud558\ub8e8\ub2f9 \uc5f0\uccb4\ub8cc\n\n    def __init__(self):\n        self.session = Session()\n\n    def add_book(self, isbn, title, author, publisher, copies=1):\n        """\ub3c4\uc11c \ucd94\uac00"""\n        book = Book(\n            isbn=isbn,\n            title=title,\n            author=author,\n            publisher=publisher,\n            total_copies=copies,\n            available_copies=copies\n        )\n\n        self.session.add(book)\n        self.session.commit()\n\n        return book\n\n    def register_member(self, name, email, phone=None):\n        """\ud68c\uc6d0 \ub4f1\ub85d"""\n        import random\n        member_number = f"M{random.randint(100000, 999999)}"\n\n        member = Member(\n            member_number=member_number,\n            name=name,\n            email=email,\n            phone=phone\n        )\n\n        self.session.add(member)\n        self.session.commit()\n\n        return member\n\n    def loan_book(self, book_id, member_id):\n        """\ub3c4\uc11c \ub300\ucd9c"""\n        book = self.session.query(Book).filter(Book.id == book_id).first()\n        member = self.session.query(Member).filter(Member.id == member_id).first()\n\n        if not book or not member:\n            raise ValueError("\ub3c4\uc11c \ub610\ub294 \ud68c\uc6d0\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        if not member.is_active:\n            raise ValueError("\ube44\ud65c\uc131\ud654\ub41c \ud68c\uc6d0\uc785\ub2c8\ub2e4")\n\n        if book.available_copies <= 0:\n            raise ValueError("\ub300\ucd9c \uac00\ub2a5\ud55c \ub3c4\uc11c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        # \ub300\ucd9c \uc911\uc778 \ub3c4\uc11c \uc218 \ud655\uc778\n        active_loans = self.session.query(Loan).filter(\n            Loan.member_id == member_id,\n            Loan.return_date == None\n        ).count()\n\n        if active_loans >= 5:\n            raise ValueError("\ucd5c\ub300 \ub300\ucd9c \uad8c\uc218\ub97c \ucd08\uacfc\ud588\uc2b5\ub2c8\ub2e4")\n\n        # \ub300\ucd9c \ucc98\ub9ac\n        due_date = datetime.utcnow().date() + timedelta(days=self.LOAN_PERIOD_DAYS)\n\n        loan = Loan(\n            book_id=book_id,\n            member_id=member_id,\n            due_date=due_date\n        )\n\n        book.available_copies -= 1\n\n        self.session.add(loan)\n        self.session.commit()\n\n        return loan\n\n    def return_book(self, loan_id):\n        """\ub3c4\uc11c \ubc18\ub0a9"""\n        loan = self.session.query(Loan).filter(Loan.id == loan_id).first()\n\n        if not loan:\n            raise ValueError("\ub300\ucd9c \uae30\ub85d\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        if loan.return_date:\n            raise ValueError("\uc774\ubbf8 \ubc18\ub0a9\ub41c \ub3c4\uc11c\uc785\ub2c8\ub2e4")\n\n        # \ubc18\ub0a9 \ucc98\ub9ac\n        loan.return_date = datetime.utcnow().date()\n\n        # \uc5f0\uccb4\ub8cc \uacc4\uc0b0\n        if loan.return_date > loan.due_date:\n            overdue_days = (loan.return_date - loan.due_date).days\n            loan.fine_amount = overdue_days * self.DAILY_FINE\n\n        # \uc7ac\uace0 \uc99d\uac00\n        book = loan.book\n        book.available_copies += 1\n\n        self.session.commit()\n\n        return loan\n\n    def search_books(self, keyword=None, author=None, isbn=None):\n        """\ub3c4\uc11c \uac80\uc0c9"""\n        query = self.session.query(Book)\n\n        if keyword:\n            query = query.filter(\n                (Book.title.like(f\'%{keyword}%\')) |\n                (Book.author.like(f\'%{keyword}%\'))\n            )\n\n        if author:\n            query = query.filter(Book.author.like(f\'%{author}%\'))\n\n        if isbn:\n            query = query.filter(Book.isbn == isbn)\n\n        return query.all()\n\n    def get_overdue_loans(self):\n        """\uc5f0\uccb4 \ubaa9\ub85d"""\n        today = datetime.utcnow().date()\n\n        return self.session.query(Loan).filter(\n            Loan.return_date == None,\n            Loan.due_date < today\n        ).all()\n\n    def get_popular_books(self, limit=10):\n        """\uc778\uae30 \ub3c4\uc11c"""\n        from sqlalchemy import func\n\n        result = self.session.query(\n            Book,\n            func.count(Loan.id).label(\'loan_count\')\n        ).join(Loan).group_by(Book.id).order_by(\n            func.count(Loan.id).desc()\n        ).limit(limit).all()\n\n        return [(book, count) for book, count in result]\n\n    def close(self):\n        self.session.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nlibrary = LibrarySystem()\n\ntry:\n    # \ub3c4\uc11c \ucd94\uac00\n    book = library.add_book(\n        isbn="9788960771352",\n        title="\ud074\ub9b0 \ucf54\ub4dc",\n        author="\ub85c\ubc84\ud2b8 C. \ub9c8\ud2f4",\n        publisher="\uc778\uc0ac\uc774\ud2b8",\n        copies=3\n    )\n\n    # \ud68c\uc6d0 \ub4f1\ub85d\n    member = library.register_member(\n        name="\ud64d\uae38\ub3d9",\n        email="hong@example.com",\n        phone="010-1234-5678"\n    )\n\n    # \ub3c4\uc11c \ub300\ucd9c\n    loan = library.loan_book(book.id, member.id)\n    print(f"\ub300\ucd9c \uc644\ub8cc: \ubc18\ub0a9\uc77c {loan.due_date}")\n\n    # \ub3c4\uc11c \uac80\uc0c9\n    results = library.search_books(keyword="\ud074\ub9b0")\n    for book in results:\n        print(f"{book.title} - {book.author} (\ub300\ucd9c\uac00\ub2a5: {book.available_copies})")\n\nfinally:\n    library.close()\n'})})]}),"\n",(0,t.jsx)(e.h3,{id:"\ubb38\uc81c-2-sns-\uac8c\uc2dc\ubb3c-\uc2dc\uc2a4\ud15c",children:"\ubb38\uc81c 2: SNS \uac8c\uc2dc\ubb3c \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsx)(e.p,{children:"\uac04\ub2e8\ud55c SNS \uac8c\uc2dc\ubb3c \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\uc694\uad6c\uc0ac\ud56d:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\uc0ac\uc6a9\uc790, \uac8c\uc2dc\ubb3c, \ub313\uae00, \uc88b\uc544\uc694 \uad00\ub9ac"}),"\n",(0,t.jsx)(e.li,{children:"\ud314\ub85c\uc6b0/\uc5b8\ud314\ub85c\uc6b0 \uae30\ub2a5"}),"\n",(0,t.jsx)(e.li,{children:"\ud0c0\uc784\ub77c\uc778 \uc870\ud68c (\ud314\ub85c\uc789\ud55c \uc0ac\uc6a9\uc790\uc758 \uac8c\uc2dc\ubb3c)"}),"\n",(0,t.jsx)(e.li,{children:"\ud574\uc2dc\ud0dc\uadf8 \uac80\uc0c9"}),"\n",(0,t.jsx)(e.li,{children:"\uc778\uae30 \uac8c\uc2dc\ubb3c"}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, ForeignKey, Table, Boolean\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom datetime import datetime\n\nBase = declarative_base()\nengine = create_engine(\'sqlite:///social.db\')\nSession = sessionmaker(bind=engine)\n\n# \ud314\ub85c\uc6b0 \uad00\uacc4\nfollows = Table(\'follows\', Base.metadata,\n    Column(\'follower_id\', Integer, ForeignKey(\'users.id\')),\n    Column(\'following_id\', Integer, ForeignKey(\'users.id\'))\n)\n\n# \uac8c\uc2dc\ubb3c \uc88b\uc544\uc694\npost_likes = Table(\'post_likes\', Base.metadata,\n    Column(\'user_id\', Integer, ForeignKey(\'users.id\')),\n    Column(\'post_id\', Integer, ForeignKey(\'posts.id\'))\n)\n\n# \uac8c\uc2dc\ubb3c \ud574\uc2dc\ud0dc\uadf8\npost_hashtags = Table(\'post_hashtags\', Base.metadata,\n    Column(\'post_id\', Integer, ForeignKey(\'posts.id\')),\n    Column(\'hashtag_id\', Integer, ForeignKey(\'hashtags.id\'))\n)\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id = Column(Integer, primary_key=True)\n    username = Column(String(50), unique=True, nullable=False)\n    display_name = Column(String(100))\n    bio = Column(Text)\n\n    posts = relationship(\'Post\', back_populates=\'author\')\n    comments = relationship(\'Comment\', back_populates=\'author\')\n\n    following = relationship(\n        \'User\',\n        secondary=follows,\n        primaryjoin=id==follows.c.follower_id,\n        secondaryjoin=id==follows.c.following_id,\n        backref=\'followers\'\n    )\n\n    liked_posts = relationship(\'Post\', secondary=post_likes, backref=\'liked_by\')\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\'users.id\'), nullable=False)\n    content = Column(Text, nullable=False)\n    image_url = Column(String(500))\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    author = relationship(\'User\', back_populates=\'posts\')\n    comments = relationship(\'Comment\', back_populates=\'post\', cascade=\'all, delete-orphan\')\n    hashtags = relationship(\'Hashtag\', secondary=post_hashtags, backref=\'posts\')\n\nclass Comment(Base):\n    __tablename__ = \'comments\'\n\n    id = Column(Integer, primary_key=True)\n    post_id = Column(Integer, ForeignKey(\'posts.id\'), nullable=False)\n    user_id = Column(Integer, ForeignKey(\'users.id\'), nullable=False)\n    content = Column(Text, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    post = relationship(\'Post\', back_populates=\'comments\')\n    author = relationship(\'User\', back_populates=\'comments\')\n\nclass Hashtag(Base):\n    __tablename__ = \'hashtags\'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), unique=True, nullable=False)\n\nBase.metadata.create_all(engine)\n\nclass SocialNetwork:\n    """SNS \uc2dc\uc2a4\ud15c"""\n\n    def __init__(self):\n        self.session = Session()\n\n    def create_user(self, username, display_name=None, bio=None):\n        """\uc0ac\uc6a9\uc790 \uc0dd\uc131"""\n        user = User(\n            username=username,\n            display_name=display_name or username,\n            bio=bio\n        )\n\n        self.session.add(user)\n        self.session.commit()\n\n        return user\n\n    def create_post(self, user_id, content, image_url=None):\n        """\uac8c\uc2dc\ubb3c \uc791\uc131"""\n        import re\n\n        post = Post(\n            user_id=user_id,\n            content=content,\n            image_url=image_url\n        )\n\n        # \ud574\uc2dc\ud0dc\uadf8 \ucd94\ucd9c\n        hashtag_names = re.findall(r\'#(\\w+)\', content)\n        for name in set(hashtag_names):\n            hashtag = self.session.query(Hashtag).filter(\n                Hashtag.name == name\n            ).first()\n\n            if not hashtag:\n                hashtag = Hashtag(name=name)\n                self.session.add(hashtag)\n\n            post.hashtags.append(hashtag)\n\n        self.session.add(post)\n        self.session.commit()\n\n        return post\n\n    def follow(self, follower_id, following_id):\n        """\ud314\ub85c\uc6b0"""\n        follower = self.session.query(User).filter(User.id == follower_id).first()\n        following = self.session.query(User).filter(User.id == following_id).first()\n\n        if not follower or not following:\n            raise ValueError("\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        if following not in follower.following:\n            follower.following.append(following)\n            self.session.commit()\n            return True\n\n        return False\n\n    def unfollow(self, follower_id, following_id):\n        """\uc5b8\ud314\ub85c\uc6b0"""\n        follower = self.session.query(User).filter(User.id == follower_id).first()\n        following = self.session.query(User).filter(User.id == following_id).first()\n\n        if not follower or not following:\n            raise ValueError("\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        if following in follower.following:\n            follower.following.remove(following)\n            self.session.commit()\n            return True\n\n        return False\n\n    def like_post(self, user_id, post_id):\n        """\uac8c\uc2dc\ubb3c \uc88b\uc544\uc694"""\n        user = self.session.query(User).filter(User.id == user_id).first()\n        post = self.session.query(Post).filter(Post.id == post_id).first()\n\n        if not user or not post:\n            raise ValueError("\uc0ac\uc6a9\uc790 \ub610\ub294 \uac8c\uc2dc\ubb3c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        if post not in user.liked_posts:\n            user.liked_posts.append(post)\n            self.session.commit()\n            return True\n\n        return False\n\n    def add_comment(self, user_id, post_id, content):\n        """\ub313\uae00 \uc791\uc131"""\n        comment = Comment(\n            user_id=user_id,\n            post_id=post_id,\n            content=content\n        )\n\n        self.session.add(comment)\n        self.session.commit()\n\n        return comment\n\n    def get_timeline(self, user_id, limit=20):\n        """\ud0c0\uc784\ub77c\uc778 \uc870\ud68c"""\n        user = self.session.query(User).filter(User.id == user_id).first()\n\n        if not user:\n            raise ValueError("\uc0ac\uc6a9\uc790\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        # \ud314\ub85c\uc789\ud55c \uc0ac\uc6a9\uc790\uc758 \uac8c\uc2dc\ubb3c\n        following_ids = [u.id for u in user.following]\n        following_ids.append(user_id)  # \ubcf8\uc778 \uac8c\uc2dc\ubb3c\ub3c4 \ud3ec\ud568\n\n        posts = self.session.query(Post).filter(\n            Post.user_id.in_(following_ids)\n        ).order_by(\n            Post.created_at.desc()\n        ).limit(limit).all()\n\n        return posts\n\n    def search_by_hashtag(self, hashtag_name):\n        """\ud574\uc2dc\ud0dc\uadf8\ub85c \uac80\uc0c9"""\n        return self.session.query(Post).join(Post.hashtags).filter(\n            Hashtag.name == hashtag_name\n        ).order_by(Post.created_at.desc()).all()\n\n    def get_popular_posts(self, limit=10):\n        """\uc778\uae30 \uac8c\uc2dc\ubb3c"""\n        from sqlalchemy import func\n\n        result = self.session.query(\n            Post,\n            func.count(post_likes.c.user_id).label(\'like_count\')\n        ).outerjoin(post_likes).group_by(Post.id).order_by(\n            func.count(post_likes.c.user_id).desc()\n        ).limit(limit).all()\n\n        return [(post, count) for post, count in result]\n\n    def close(self):\n        self.session.close()\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsns = SocialNetwork()\n\ntry:\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    user1 = sns.create_user("hong", "\ud64d\uae38\ub3d9", "Python \uac1c\ubc1c\uc790")\n    user2 = sns.create_user("kim", "\uae40\ucca0\uc218", "\ub514\uc790\uc774\ub108")\n\n    # \ud314\ub85c\uc6b0\n    sns.follow(user1.id, user2.id)\n\n    # \uac8c\uc2dc\ubb3c \uc791\uc131\n    post = sns.create_post(\n        user_id=user2.id,\n        content="Python\uc73c\ub85c SNS \ub9cc\ub4e4\uae30! #Python #\uac1c\ubc1c #\ud504\ub85c\uc81d\ud2b8"\n    )\n\n    # \uc88b\uc544\uc694\n    sns.like_post(user1.id, post.id)\n\n    # \ub313\uae00\n    sns.add_comment(user1.id, post.id, "\uba4b\uc9c4 \ud504\ub85c\uc81d\ud2b8\ub124\uc694!")\n\n    # \ud0c0\uc784\ub77c\uc778 \uc870\ud68c\n    timeline = sns.get_timeline(user1.id)\n    for post in timeline:\n        print(f"{post.author.display_name}: {post.content}")\n        print(f"\uc88b\uc544\uc694: {len(post.liked_by)}\uac1c, \ub313\uae00: {len(post.comments)}\uac1c")\n\n    # \ud574\uc2dc\ud0dc\uadf8 \uac80\uc0c9\n    python_posts = sns.search_by_hashtag("Python")\n    print(f"\\n#Python \uac8c\uc2dc\ubb3c: {len(python_posts)}\uac1c")\n\nfinally:\n    sns.close()\n'})})]}),"\n",(0,t.jsx)(e.h2,{id:"314-\ubaa8\ubc94-\uc0ac\ub840-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"3.14 \ubaa8\ubc94 \uc0ac\ub840 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,t.jsx)(e.h3,{id:"\uc124\uacc4-\ub2e8\uacc4",children:"\uc124\uacc4 \ub2e8\uacc4"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc801\uc808\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc120\ud0dd (SQL vs NoSQL)"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc815\uaddc\ud654\ub97c \ud1b5\ud55c \uc911\ubcf5 \uc81c\uac70"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc678\ub798 \ud0a4\uc640 \uc81c\uc57d \uc870\uac74 \uc124\uc815"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc778\ub371\uc2a4 \uc804\ub7b5 \uc218\ub9bd"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\uac1c\ubc1c-\ub2e8\uacc4",children:"\uac1c\ubc1c \ub2e8\uacc4"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","ORM \ub610\ub294 \ud30c\ub77c\ubbf8\ud130\ud654\ub41c \ucffc\ub9ac \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Connection Pool \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ud2b8\ub79c\uc7ad\uc158 \uc801\uc808\ud788 \ud65c\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Context Manager\ub85c \ub9ac\uc18c\uc2a4 \uad00\ub9ac"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","N+1 \ucffc\ub9ac \ubb38\uc81c \ud574\uacb0 (Eager Loading)"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ubc30\uce58 \ucc98\ub9ac \ud65c\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc801\uc808\ud55c \uce90\uc2f1 \uc804\ub7b5"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ud398\uc774\uc9c0\ub124\uc774\uc158 \uad6c\ud604"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\ubcf4\uc548",children:"\ubcf4\uc548"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","SQL Injection \ubc29\uc9c0"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ube44\ubc00\ubc88\ud638 \uc554\ud638\ud654"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ud658\uacbd \ubcc0\uc218\ub85c \uc790\uaca9\uc99d\uba85 \uad00\ub9ac"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ucd5c\uc18c \uad8c\ud55c \uc6d0\uce59"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\uc720\uc9c0\ubcf4\uc218",children:"\uc720\uc9c0\ubcf4\uc218"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub3c4\uad6c \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc801\uc808\ud55c \ub85c\uae45"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc815\uae30\uc801\uc778 \ubc31\uc5c5"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc \uc124\uc815"]}),"\n"]}),"\n",(0,t.jsx)(e.admonition,{title:"\ud575\uc2ec \uc694\uc57d",type:"tip",children:(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\uc801\uc808\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc120\ud0dd"}),": \ud504\ub85c\uc81d\ud2b8 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc120\ud0dd"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"ORM \ud65c\uc6a9"}),": SQLAlchemy\ub85c \uc0dd\uc0b0\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131 \ud5a5\uc0c1"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\ubcf4\uc548 \ucd5c\uc6b0\uc120"}),": SQL Injection \ubc29\uc9c0, \ube44\ubc00\ubc88\ud638 \uc554\ud638\ud654 \ud544\uc218"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\uc131\ub2a5 \ucd5c\uc801\ud654"}),": \uc778\ub371\uc2a4, \uce90\uc2f1, \ubc30\uce58 \ucc98\ub9ac\ub85c \uc131\ub2a5 \uac1c\uc120"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac"}),": \ub370\uc774\ud130 \uc77c\uad00\uc131 \ubcf4\uc7a5"]}),"\n"]})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.p,{children:"\ub2e4\uc74c \uc139\uc158\uc5d0\uc11c\ub294 Python\uc744 \ud65c\uc6a9\ud55c \ub370\uc774\ud130 \ubd84\uc11d\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"./data-analysis",children:"\ub370\uc774\ud130 \ubd84\uc11d"})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>l});var r=s(6540);const t={},o=r.createContext(t);function i(n){const e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);