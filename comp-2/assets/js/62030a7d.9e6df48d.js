"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[8504],{770:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"pandas/data-loading","title":"2. \ub370\uc774\ud130 \ub85c\ub529","description":"pandas\uc758 \uac00\uc7a5 \uac15\ub825\ud55c \uae30\ub2a5 \uc911 \ud558\ub098\ub294 \ub2e4\uc591\ud55c \ud615\uc2dd\uc758 \ub370\uc774\ud130\ub97c \uc27d\uac8c \ubd88\ub7ec\uc624\uace0 \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. CSV, Excel, JSON, SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1 \uac70\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130 \uc18c\uc2a4\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4.","source":"@site/docs/pandas/data-loading.md","sourceDirName":"pandas","slug":"/pandas/data-loading","permalink":"/docs/pandas/data-loading","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pandas/data-loading.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"pandasSidebar","previous":{"title":"1. \uae30\ubcf8 \uac1c\ub150","permalink":"/docs/pandas/basics"},"next":{"title":"3. \ub370\uc774\ud130 \uc870\uc791","permalink":"/docs/pandas/data-manipulation"}}');var t=s(4848),d=s(8453);const l={sidebar_position:2},r="2. \ub370\uc774\ud130 \ub85c\ub529",i={},c=[{value:"2.1 CSV \ud30c\uc77c",id:"21-csv-\ud30c\uc77c",level:2},{value:"2.1.1 CSV \ud30c\uc77c \uc77d\uae30",id:"211-csv-\ud30c\uc77c-\uc77d\uae30",level:3},{value:"2.1.2 CSV \ud30c\uc77c \uc800\uc7a5",id:"212-csv-\ud30c\uc77c-\uc800\uc7a5",level:3},{value:"2.1.3 \uc2e4\uc804 \uc608\uc81c: \ub300\uc6a9\ub7c9 CSV \ubd84\uc11d",id:"213-\uc2e4\uc804-\uc608\uc81c-\ub300\uc6a9\ub7c9-csv-\ubd84\uc11d",level:3},{value:"2.2 Excel \ud30c\uc77c",id:"22-excel-\ud30c\uc77c",level:2},{value:"2.2.1 Excel \ud30c\uc77c \uc77d\uae30",id:"221-excel-\ud30c\uc77c-\uc77d\uae30",level:3},{value:"2.2.2 Excel \ud30c\uc77c \uc800\uc7a5",id:"222-excel-\ud30c\uc77c-\uc800\uc7a5",level:3},{value:"2.2.3 \uc2e4\uc804 \uc608\uc81c: \uc6d4\ubcc4 \ubcf4\uace0\uc11c \uc0dd\uc131",id:"223-\uc2e4\uc804-\uc608\uc81c-\uc6d4\ubcc4-\ubcf4\uace0\uc11c-\uc0dd\uc131",level:3},{value:"2.3 JSON \ud30c\uc77c",id:"23-json-\ud30c\uc77c",level:2},{value:"2.3.1 JSON \ud30c\uc77c \uc77d\uae30",id:"231-json-\ud30c\uc77c-\uc77d\uae30",level:3},{value:"2.3.2 JSON \ud30c\uc77c \uc800\uc7a5",id:"232-json-\ud30c\uc77c-\uc800\uc7a5",level:3},{value:"2.3.3 \uc2e4\uc804 \uc608\uc81c: REST API \ub370\uc774\ud130 \ucc98\ub9ac",id:"233-\uc2e4\uc804-\uc608\uc81c-rest-api-\ub370\uc774\ud130-\ucc98\ub9ac",level:3},{value:"2.4 SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4",id:"24-sql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",level:2},{value:"2.4.1 SQLite \uc0ac\uc6a9\ud558\uae30",id:"241-sqlite-\uc0ac\uc6a9\ud558\uae30",level:3},{value:"2.4.2 MySQL/PostgreSQL \uc0ac\uc6a9\ud558\uae30",id:"242-mysqlpostgresql-\uc0ac\uc6a9\ud558\uae30",level:3},{value:"2.4.3 \uc2e4\uc804 \uc608\uc81c: \ub370\uc774\ud130\ubca0\uc774\uc2a4 ETL",id:"243-\uc2e4\uc804-\uc608\uc81c-\ub370\uc774\ud130\ubca0\uc774\uc2a4-etl",level:3},{value:"2.5 HTML \ud14c\uc774\ube14",id:"25-html-\ud14c\uc774\ube14",level:2},{value:"2.5.1 HTML \ud14c\uc774\ube14 \uc77d\uae30",id:"251-html-\ud14c\uc774\ube14-\uc77d\uae30",level:3},{value:"2.5.2 \uc2e4\uc804 \uc608\uc81c: \uc704\ud0a4\ud53c\ub514\uc544 \ub370\uc774\ud130 \uc2a4\ud06c\ub798\ud551",id:"252-\uc2e4\uc804-\uc608\uc81c-\uc704\ud0a4\ud53c\ub514\uc544-\ub370\uc774\ud130-\uc2a4\ud06c\ub798\ud551",level:3},{value:"2.6 \ud074\ub9bd\ubcf4\ub4dc",id:"26-\ud074\ub9bd\ubcf4\ub4dc",level:2},{value:"2.6.1 \ud074\ub9bd\ubcf4\ub4dc \uc0ac\uc6a9",id:"261-\ud074\ub9bd\ubcf4\ub4dc-\uc0ac\uc6a9",level:3},{value:"2.7 API\uc5d0\uc11c \ub370\uc774\ud130 \uac00\uc838\uc624\uae30",id:"27-api\uc5d0\uc11c-\ub370\uc774\ud130-\uac00\uc838\uc624\uae30",level:2},{value:"2.7.1 requests \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9",id:"271-requests-\ub77c\uc774\ube0c\ub7ec\ub9ac-\uc0ac\uc6a9",level:3},{value:"2.7.2 \uc2e4\uc804 \uc608\uc81c: \uacf5\uacf5 API \ud65c\uc6a9",id:"272-\uc2e4\uc804-\uc608\uc81c-\uacf5\uacf5-api-\ud65c\uc6a9",level:3},{value:"2.7.3 \ud398\uc774\uc9c0\ub124\uc774\uc158 \ucc98\ub9ac",id:"273-\ud398\uc774\uc9c0\ub124\uc774\uc158-\ucc98\ub9ac",level:3},{value:"2.8 \ub300\uc6a9\ub7c9 \ud30c\uc77c \ucc98\ub9ac",id:"28-\ub300\uc6a9\ub7c9-\ud30c\uc77c-\ucc98\ub9ac",level:2},{value:"2.8.1 chunksize \ud30c\ub77c\ubbf8\ud130 \uc0ac\uc6a9",id:"281-chunksize-\ud30c\ub77c\ubbf8\ud130-\uc0ac\uc6a9",level:3},{value:"2.8.2 \uc2e4\uc804 \uc608\uc81c: \ub300\uc6a9\ub7c9 \ub85c\uadf8 \ud30c\uc77c \ubd84\uc11d",id:"282-\uc2e4\uc804-\uc608\uc81c-\ub300\uc6a9\ub7c9-\ub85c\uadf8-\ud30c\uc77c-\ubd84\uc11d",level:3},{value:"2.8.3 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ud0c0\uc785",id:"283-\uba54\ubaa8\ub9ac-\ud6a8\uc728\uc801\uc778-\ub370\uc774\ud130-\ud0c0\uc785",level:3},{value:"2.9 \uc778\ucf54\ub529 \ubb38\uc81c \ud574\uacb0",id:"29-\uc778\ucf54\ub529-\ubb38\uc81c-\ud574\uacb0",level:2},{value:"2.9.1 \uc778\ucf54\ub529 \uac10\uc9c0 \ubc0f \ucc98\ub9ac",id:"291-\uc778\ucf54\ub529-\uac10\uc9c0-\ubc0f-\ucc98\ub9ac",level:3},{value:"2.9.2 \uc2e4\uc804 \uc608\uc81c: \ub2e4\uc591\ud55c \uc778\ucf54\ub529 \ucc98\ub9ac",id:"292-\uc2e4\uc804-\uc608\uc81c-\ub2e4\uc591\ud55c-\uc778\ucf54\ub529-\ucc98\ub9ac",level:3},{value:"2.9.3 \uc548\uc804\ud55c \uc800\uc7a5 \ubc29\ubc95",id:"293-\uc548\uc804\ud55c-\uc800\uc7a5-\ubc29\ubc95",level:3},{value:"2.10 \uc2e4\uc804 \uc608\uc81c",id:"210-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"2.10.1 \ub2e4\uc591\ud55c \uc18c\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \ud1b5\ud569",id:"2101-\ub2e4\uc591\ud55c-\uc18c\uc2a4\uc5d0\uc11c-\ub370\uc774\ud130-\ud1b5\ud569",level:3},{value:"2.10.2 \uc790\ub3d9\ud654\ub41c \ub370\uc774\ud130 \uc218\uc9d1 \ud30c\uc774\ud504\ub77c\uc778",id:"2102-\uc790\ub3d9\ud654\ub41c-\ub370\uc774\ud130-\uc218\uc9d1-\ud30c\uc774\ud504\ub77c\uc778",level:3},{value:"\uc5f0\uc2b5 \ubb38\uc81c",id:"\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: CSV \ub370\uc774\ud130 \uc815\uc81c",id:"\ubb38\uc81c-1-csv-\ub370\uc774\ud130-\uc815\uc81c",level:3},{value:"\ubb38\uc81c 2: Excel \ub2e4\uc911 \uc2dc\ud2b8 \ucc98\ub9ac",id:"\ubb38\uc81c-2-excel-\ub2e4\uc911-\uc2dc\ud2b8-\ucc98\ub9ac",level:3},{value:"\ubb38\uc81c 3: API \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \ubd84\uc11d",id:"\ubb38\uc81c-3-api-\ub370\uc774\ud130-\uc218\uc9d1-\ubc0f-\ubd84\uc11d",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function o(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...n.components},{Details:s}=e;return s||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"2-\ub370\uc774\ud130-\ub85c\ub529",children:"2. \ub370\uc774\ud130 \ub85c\ub529"})}),"\n",(0,t.jsx)(e.p,{children:"pandas\uc758 \uac00\uc7a5 \uac15\ub825\ud55c \uae30\ub2a5 \uc911 \ud558\ub098\ub294 \ub2e4\uc591\ud55c \ud615\uc2dd\uc758 \ub370\uc774\ud130\ub97c \uc27d\uac8c \ubd88\ub7ec\uc624\uace0 \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. CSV, Excel, JSON, SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1 \uac70\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130 \uc18c\uc2a4\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h2,{id:"21-csv-\ud30c\uc77c",children:"2.1 CSV \ud30c\uc77c"}),"\n",(0,t.jsx)(e.p,{children:"CSV(Comma-Separated Values)\ub294 \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ub370\uc774\ud130 \ud615\uc2dd\uc785\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"211-csv-\ud30c\uc77c-\uc77d\uae30",children:"2.1.1 CSV \ud30c\uc77c \uc77d\uae30"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# \uae30\ubcf8 \uc0ac\uc6a9\ubc95\ndf = pd.read_csv('data.csv')\n\n# \uad6c\ubd84\uc790 \uc9c0\uc815 (\ud0ed\uc73c\ub85c \uad6c\ubd84\ub41c \ud30c\uc77c)\ndf = pd.read_csv('data.tsv', sep='\\t')\n\n# \ud5e4\ub354\uac00 \uc5c6\ub294 \ud30c\uc77c (\uccab \ubc88\uc9f8 \ud589\ub3c4 \ub370\uc774\ud130)\ndf = pd.read_csv('data.csv', header=None)\n\n# \ud5e4\ub354 \uc774\ub984 \uc9c1\uc811 \uc9c0\uc815\ndf = pd.read_csv('data.csv', names=['\uc774\ub984', '\ub098\uc774', '\ub3c4\uc2dc'])\n\n# \ud2b9\uc815 \uc5f4\ub9cc \uc77d\uae30\ndf = pd.read_csv('data.csv', usecols=['\uc774\ub984', '\ub098\uc774'])\n\n# \ud2b9\uc815 \uc5f4\uc744 \uc778\ub371\uc2a4\ub85c \uc124\uc815\ndf = pd.read_csv('data.csv', index_col='ID')\n\n# \ub0a0\uc9dc \uc5f4 \uc790\ub3d9 \ud30c\uc2f1\ndf = pd.read_csv('data.csv', parse_dates=['\uac00\uc785\uc77c', '\ub9c8\uc9c0\ub9c9_\uc811\uc18d\uc77c'])\n\n# \uacb0\uce21\uce58 \ucc98\ub9ac\ndf = pd.read_csv('data.csv', na_values=['NA', 'N/A', 'null', '-'])\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"read_csv()"}),"\ub294 \uc790\ub3d9\uc73c\ub85c \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ucd94\ub860\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc ",(0,t.jsx)(e.code,{children:"dtype"})," \ub9e4\uac1c\ubcc0\uc218\ub85c \uba85\uc2dc\uc801\uc73c\ub85c \uc9c0\uc815\ud558\uba74 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub429\ub2c8\ub2e4."]})}),"\n",(0,t.jsx)(e.h3,{id:"212-csv-\ud30c\uc77c-\uc800\uc7a5",children:"2.1.2 CSV \ud30c\uc77c \uc800\uc7a5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \uae30\ubcf8 \uc800\uc7a5\ndf.to_csv('output.csv', index=False)\n\n# \uc778\ub371\uc2a4 \ud3ec\ud568 \uc800\uc7a5\ndf.to_csv('output.csv', index=True)\n\n# \ud2b9\uc815 \uc5f4\ub9cc \uc800\uc7a5\ndf.to_csv('output.csv', columns=['\uc774\ub984', '\ub098\uc774'], index=False)\n\n# \uad6c\ubd84\uc790 \ubcc0\uacbd\ndf.to_csv('output.tsv', sep='\\t', index=False)\n\n# \uc778\ucf54\ub529 \uc9c0\uc815\ndf.to_csv('output.csv', encoding='utf-8-sig', index=False)\n\n# \uacb0\uce21\uce58 \ud45c\ud604 \ubc29\uc2dd \ubcc0\uacbd\ndf.to_csv('output.csv', na_rep='N/A', index=False)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"213-\uc2e4\uc804-\uc608\uc81c-\ub300\uc6a9\ub7c9-csv-\ubd84\uc11d",children:"2.1.3 \uc2e4\uc804 \uc608\uc81c: \ub300\uc6a9\ub7c9 CSV \ubd84\uc11d"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# 1\ub2e8\uacc4: \ud30c\uc77c \ud06c\uae30 \ud655\uc778\uc744 \uc704\ud574 \uc77c\ubd80\ub9cc \uc77d\uae30\nsample = pd.read_csv('large_file.csv', nrows=5)\nprint(sample.head())\nprint(sample.info())\n\n# 2\ub2e8\uacc4: \ud544\uc694\ud55c \uc5f4\ub9cc \uc120\ud0dd\ud558\uc5ec \uc77d\uae30\ncolumns_to_use = ['\uc0ac\uc6a9\uc790ID', '\uad6c\ub9e4\uae08\uc561', '\uad6c\ub9e4\uc77c']\ndf = pd.read_csv('large_file.csv', usecols=columns_to_use)\n\n# 3\ub2e8\uacc4: \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654\ndf['\uc0ac\uc6a9\uc790ID'] = df['\uc0ac\uc6a9\uc790ID'].astype('int32')\ndf['\uad6c\ub9e4\uae08\uc561'] = df['\uad6c\ub9e4\uae08\uc561'].astype('float32')\ndf['\uad6c\ub9e4\uc77c'] = pd.to_datetime(df['\uad6c\ub9e4\uc77c'])\n\nprint(f\"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\n"})}),"\n",(0,t.jsx)(e.h2,{id:"22-excel-\ud30c\uc77c",children:"2.2 Excel \ud30c\uc77c"}),"\n",(0,t.jsx)(e.p,{children:"Excel \ud30c\uc77c\uc740 \ube44\uc988\ub2c8\uc2a4 \ud658\uacbd\uc5d0\uc11c \ub9e4\uc6b0 \ud754\ud558\uac8c \uc0ac\uc6a9\ub429\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"221-excel-\ud30c\uc77c-\uc77d\uae30",children:"2.2.1 Excel \ud30c\uc77c \uc77d\uae30"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \uae30\ubcf8 \uc0ac\uc6a9\ubc95 (\uccab \ubc88\uc9f8 \uc2dc\ud2b8)\ndf = pd.read_excel('data.xlsx')\n\n# \ud2b9\uc815 \uc2dc\ud2b8 \uc77d\uae30\ndf = pd.read_excel('data.xlsx', sheet_name='Sheet2')\n\n# \uc5ec\ub7ec \uc2dc\ud2b8 \ub3d9\uc2dc\uc5d0 \uc77d\uae30\nall_sheets = pd.read_excel('data.xlsx', sheet_name=None)\nprint(all_sheets.keys())  # \ubaa8\ub4e0 \uc2dc\ud2b8 \uc774\ub984 \ud655\uc778\n\n# \ud2b9\uc815 \ubc94\uc704\ub9cc \uc77d\uae30\ndf = pd.read_excel('data.xlsx', skiprows=2, nrows=10)\n\n# \ud2b9\uc815 \uc5f4\ub9cc \uc77d\uae30\ndf = pd.read_excel('data.xlsx', usecols='A:C')  # A, B, C \uc5f4\ub9cc\ndf = pd.read_excel('data.xlsx', usecols=[0, 1, 2])  # \ucc98\uc74c 3\uac1c \uc5f4\ndf = pd.read_excel('data.xlsx', usecols=['\uc774\ub984', '\ub098\uc774'])  # \ud2b9\uc815 \uc5f4 \uc774\ub984\n"})}),"\n",(0,t.jsxs)(e.admonition,{type:"warning",children:[(0,t.jsxs)(e.p,{children:["Excel \ud30c\uc77c\uc744 \uc77d\uc73c\ub824\uba74 ",(0,t.jsx)(e.code,{children:"openpyxl"})," \ub610\ub294 ",(0,t.jsx)(e.code,{children:"xlrd"})," \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud544\uc694\ud569\ub2c8\ub2e4."]}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install openpyxl\n"})})]}),"\n",(0,t.jsx)(e.h3,{id:"222-excel-\ud30c\uc77c-\uc800\uc7a5",children:"2.2.2 Excel \ud30c\uc77c \uc800\uc7a5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \ub2e8\uc77c \uc2dc\ud2b8 \uc800\uc7a5\ndf.to_excel('output.xlsx', index=False)\n\n# \uc5ec\ub7ec \uc2dc\ud2b8\uc5d0 \uc800\uc7a5\nwith pd.ExcelWriter('output.xlsx') as writer:\n    df1.to_excel(writer, sheet_name='\ud310\ub9e4\ub370\uc774\ud130', index=False)\n    df2.to_excel(writer, sheet_name='\uc7ac\uace0\ub370\uc774\ud130', index=False)\n    df3.to_excel(writer, sheet_name='\ud1b5\uacc4', index=False)\n\n# \uae30\uc874 \ud30c\uc77c\uc5d0 \uc2dc\ud2b8 \ucd94\uac00\nwith pd.ExcelWriter('existing.xlsx', mode='a', engine='openpyxl') as writer:\n    df.to_excel(writer, sheet_name='\uc0c8\ub85c\uc6b4\uc2dc\ud2b8', index=False)\n\n# \ud2b9\uc815 \uc704\uce58\ubd80\ud130 \uc800\uc7a5\nwith pd.ExcelWriter('output.xlsx') as writer:\n    df.to_excel(writer, sheet_name='\ub370\uc774\ud130', startrow=2, startcol=1, index=False)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"223-\uc2e4\uc804-\uc608\uc81c-\uc6d4\ubcc4-\ubcf4\uace0\uc11c-\uc0dd\uc131",children:"2.2.3 \uc2e4\uc804 \uc608\uc81c: \uc6d4\ubcc4 \ubcf4\uace0\uc11c \uc0dd\uc131"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nfrom datetime import datetime\n\n# \ud310\ub9e4 \ub370\uc774\ud130 \uc0dd\uc131\nsales_data = pd.DataFrame({\n    '\ub0a0\uc9dc': pd.date_range('2024-01-01', periods=100),\n    '\uc81c\ud488': ['A', 'B', 'C'] * 33 + ['A'],\n    '\ud310\ub9e4\ub7c9': range(1, 101),\n    '\ub9e4\ucd9c': range(1000, 100001, 1000)\n})\n\n# \uc6d4\ubcc4 \uc9d1\uacc4\nsales_data['\uc6d4'] = sales_data['\ub0a0\uc9dc'].dt.month\nmonthly_summary = sales_data.groupby('\uc6d4').agg({\n    '\ud310\ub9e4\ub7c9': 'sum',\n    '\ub9e4\ucd9c': 'sum'\n}).reset_index()\n\n# \uc81c\ud488\ubcc4 \uc9d1\uacc4\nproduct_summary = sales_data.groupby('\uc81c\ud488').agg({\n    '\ud310\ub9e4\ub7c9': 'sum',\n    '\ub9e4\ucd9c': 'sum'\n}).reset_index()\n\n# Excel \ubcf4\uace0\uc11c \uc0dd\uc131\nwith pd.ExcelWriter('\uc6d4\uac04_\ud310\ub9e4_\ubcf4\uace0\uc11c.xlsx', engine='openpyxl') as writer:\n    # \uc6d0\ubcf8 \ub370\uc774\ud130\n    sales_data.to_excel(writer, sheet_name='\uc6d0\ubcf8\ub370\uc774\ud130', index=False)\n\n    # \uc6d4\ubcc4 \uc694\uc57d\n    monthly_summary.to_excel(writer, sheet_name='\uc6d4\ubcc4\uc694\uc57d', index=False)\n\n    # \uc81c\ud488\ubcc4 \uc694\uc57d\n    product_summary.to_excel(writer, sheet_name='\uc81c\ud488\ubcc4\uc694\uc57d', index=False)\n\nprint(\"\ubcf4\uace0\uc11c\uac00 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4!\")\n"})}),"\n",(0,t.jsx)(e.h2,{id:"23-json-\ud30c\uc77c",children:"2.3 JSON \ud30c\uc77c"}),"\n",(0,t.jsx)(e.p,{children:"JSON\uc740 \uc6f9 API\uc640 NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ud615\uc2dd\uc785\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"231-json-\ud30c\uc77c-\uc77d\uae30",children:"2.3.1 JSON \ud30c\uc77c \uc77d\uae30"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \uae30\ubcf8 \uc0ac\uc6a9\ubc95\ndf = pd.read_json(\'data.json\')\n\n# JSON Lines \ud615\uc2dd (\uac01 \uc904\uc774 \ud558\ub098\uc758 JSON \uac1d\uccb4)\ndf = pd.read_json(\'data.jsonl\', lines=True)\n\n# \uc911\ucca9\ub41c JSON \uad6c\uc870 \uc815\uaddc\ud654\ndf = pd.json_normalize(json_data)\n\n# \uc608\uc81c: \uc911\ucca9 \uad6c\uc870 \ucc98\ub9ac\nimport json\n\njson_data = \'\'\'\n[\n    {\n        "\uc774\ub984": "\ud64d\uae38\ub3d9",\n        "\ub098\uc774": 30,\n        "\uc8fc\uc18c": {\n            "\uc2dc": "\uc11c\uc6b8",\n            "\uad6c": "\uac15\ub0a8\uad6c"\n        },\n        "\ucde8\ubbf8": ["\ub3c5\uc11c", "\uc601\ud654"]\n    },\n    {\n        "\uc774\ub984": "\uae40\ucca0\uc218",\n        "\ub098\uc774": 25,\n        "\uc8fc\uc18c": {\n            "\uc2dc": "\ubd80\uc0b0",\n            "\uad6c": "\ud574\uc6b4\ub300\uad6c"\n        },\n        "\ucde8\ubbf8": ["\uc6b4\ub3d9", "\uc694\ub9ac"]\n    }\n]\n\'\'\'\n\ndata = json.loads(json_data)\ndf = pd.json_normalize(data)\nprint(df)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"232-json-\ud30c\uc77c-\uc800\uc7a5",children:"2.3.2 JSON \ud30c\uc77c \uc800\uc7a5"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \uae30\ubcf8 \uc800\uc7a5 (orient='columns'\uac00 \uae30\ubcf8\uac12)\ndf.to_json('output.json', orient='records', force_ascii=False)\n\n# \ub2e4\uc591\ud55c orient \uc635\uc158\ndf.to_json('output.json', orient='records')  # [{col1: val1, col2: val2}, ...]\ndf.to_json('output.json', orient='index')    # {index: {col1: val1, col2: val2}, ...}\ndf.to_json('output.json', orient='split')    # {columns: [...], index: [...], data: [...]}\n\n# JSON Lines \ud615\uc2dd\uc73c\ub85c \uc800\uc7a5\ndf.to_json('output.jsonl', orient='records', lines=True, force_ascii=False)\n\n# \ub4e4\uc5ec\uc4f0\uae30 \ucd94\uac00 (\uac00\ub3c5\uc131 \ud5a5\uc0c1)\ndf.to_json('output.json', orient='records', indent=2, force_ascii=False)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"233-\uc2e4\uc804-\uc608\uc81c-rest-api-\ub370\uc774\ud130-\ucc98\ub9ac",children:"2.3.3 \uc2e4\uc804 \uc608\uc81c: REST API \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import pandas as pd\nimport json\n\n# API \uc751\ub2f5 \ub370\uc774\ud130 \uc2dc\ubbac\ub808\uc774\uc158\napi_response = \'\'\'\n{\n    "status": "success",\n    "data": {\n        "users": [\n            {\n                "id": 1,\n                "name": "\ud64d\uae38\ub3d9",\n                "email": "hong@example.com",\n                "metadata": {\n                    "last_login": "2024-01-15",\n                    "login_count": 42\n                }\n            },\n            {\n                "id": 2,\n                "name": "\uae40\ucca0\uc218",\n                "email": "kim@example.com",\n                "metadata": {\n                    "last_login": "2024-01-20",\n                    "login_count": 35\n                }\n            }\n        ]\n    }\n}\n\'\'\'\n\n# JSON \ud30c\uc2f1 \ubc0f DataFrame \uc0dd\uc131\nresponse = json.loads(api_response)\ndf = pd.json_normalize(\n    response[\'data\'][\'users\'],\n    sep=\'_\'\n)\n\nprint(df)\nprint("\\n\uceec\ub7fc \ubaa9\ub85d:", df.columns.tolist())\n'})}),"\n",(0,t.jsx)(e.h2,{id:"24-sql-\ub370\uc774\ud130\ubca0\uc774\uc2a4",children:"2.4 SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4"}),"\n",(0,t.jsx)(e.p,{children:"pandas\ub294 SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640\uc758 \ud1b5\ud569\uc744 \uac15\ub825\ud558\uac8c \uc9c0\uc6d0\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"241-sqlite-\uc0ac\uc6a9\ud558\uae30",children:"2.4.1 SQLite \uc0ac\uc6a9\ud558\uae30"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport sqlite3\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\nconn = sqlite3.connect('mydb.db')\n\n# \ud14c\uc774\ube14\uc5d0\uc11c \ub370\uc774\ud130 \uc77d\uae30\ndf = pd.read_sql('SELECT * FROM customers', conn)\n\n# \uc870\uac74\uc774 \uc788\ub294 \ucffc\ub9ac\ndf = pd.read_sql('''\n    SELECT name, age, city\n    FROM customers\n    WHERE age > 25\n    ORDER BY age DESC\n''', conn)\n\n# \ud30c\ub77c\ubbf8\ud130\ub97c \uc0ac\uc6a9\ud55c \ucffc\ub9ac (SQL \uc778\uc81d\uc158 \ubc29\uc9c0)\nage_limit = 30\ndf = pd.read_sql(\n    'SELECT * FROM customers WHERE age > ?',\n    conn,\n    params=(age_limit,)\n)\n\n# DataFrame\uc744 \ud14c\uc774\ube14\ub85c \uc800\uc7a5\ndf.to_sql('customers', conn, if_exists='replace', index=False)\n# if_exists \uc635\uc158: 'fail', 'replace', 'append'\n\n# \uc5f0\uacb0 \uc885\ub8cc\nconn.close()\n"})}),"\n",(0,t.jsx)(e.h3,{id:"242-mysqlpostgresql-\uc0ac\uc6a9\ud558\uae30",children:"2.4.2 MySQL/PostgreSQL \uc0ac\uc6a9\ud558\uae30"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import create_engine\n\n# MySQL \uc5f0\uacb0\nengine = create_engine('mysql+pymysql://user:password@localhost/dbname')\n\n# PostgreSQL \uc5f0\uacb0\nengine = create_engine('postgresql://user:password@localhost/dbname')\n\n# \ub370\uc774\ud130 \uc77d\uae30\ndf = pd.read_sql('SELECT * FROM products', engine)\n\n# \ub370\uc774\ud130 \uc4f0\uae30\ndf.to_sql('products', engine, if_exists='append', index=False)\n\n# \uccad\ud06c \ub2e8\uc704\ub85c \uc800\uc7a5 (\ub300\uc6a9\ub7c9 \ub370\uc774\ud130)\ndf.to_sql('products', engine, if_exists='append', index=False, chunksize=1000)\n"})}),"\n",(0,t.jsxs)(e.admonition,{type:"warning",children:[(0,t.jsx)(e.p,{children:"SQLAlchemy\uc640 \ud574\ub2f9 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4dc\ub77c\uc774\ubc84\uac00 \ud544\uc694\ud569\ub2c8\ub2e4:"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install sqlalchemy pymysql psycopg2-binary\n"})})]}),"\n",(0,t.jsx)(e.h3,{id:"243-\uc2e4\uc804-\uc608\uc81c-\ub370\uc774\ud130\ubca0\uc774\uc2a4-etl",children:"2.4.3 \uc2e4\uc804 \uc608\uc81c: \ub370\uc774\ud130\ubca0\uc774\uc2a4 ETL"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport sqlite3\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0dd\uc131 \ubc0f \uc0d8\ud50c \ub370\uc774\ud130 \uc0bd\uc785\nconn = sqlite3.connect('sales.db')\n\n# \ud310\ub9e4 \ub370\uc774\ud130 \uc0dd\uc131\nsales_df = pd.DataFrame({\n    'product_id': [1, 2, 3, 1, 2],\n    'product_name': ['\ub178\ud2b8\ubd81', '\ub9c8\uc6b0\uc2a4', '\ud0a4\ubcf4\ub4dc', '\ub178\ud2b8\ubd81', '\ub9c8\uc6b0\uc2a4'],\n    'quantity': [5, 10, 8, 3, 15],\n    'price': [1000000, 30000, 80000, 1000000, 30000],\n    'sale_date': ['2024-01-01', '2024-01-02', '2024-01-02', '2024-01-03', '2024-01-03']\n})\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\nsales_df.to_sql('sales', conn, if_exists='replace', index=False)\n\n# ETL: Extract, Transform, Load\n# 1. Extract - \ub370\uc774\ud130 \ucd94\ucd9c\nquery = '''\n    SELECT\n        product_name,\n        SUM(quantity * price) as total_revenue,\n        SUM(quantity) as total_quantity,\n        COUNT(*) as transaction_count\n    FROM sales\n    GROUP BY product_name\n    ORDER BY total_revenue DESC\n'''\n\ndf = pd.read_sql(query, conn)\n\n# 2. Transform - \ub370\uc774\ud130 \ubcc0\ud658\ndf['avg_price'] = df['total_revenue'] / df['total_quantity']\ndf['revenue_pct'] = (df['total_revenue'] / df['total_revenue'].sum() * 100).round(2)\n\n# 3. Load - \uacb0\uacfc \uc800\uc7a5\ndf.to_sql('product_summary', conn, if_exists='replace', index=False)\n\nprint(\"\uc81c\ud488\ubcc4 \ub9e4\ucd9c \uc694\uc57d:\")\nprint(df)\n\nconn.close()\n"})}),"\n",(0,t.jsx)(e.h2,{id:"25-html-\ud14c\uc774\ube14",children:"2.5 HTML \ud14c\uc774\ube14"}),"\n",(0,t.jsx)(e.p,{children:"\uc6f9 \ud398\uc774\uc9c0\uc758 \ud14c\uc774\ube14\uc744 \uc9c1\uc811 DataFrame\uc73c\ub85c \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"251-html-\ud14c\uc774\ube14-\uc77d\uae30",children:"2.5.1 HTML \ud14c\uc774\ube14 \uc77d\uae30"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# URL\uc5d0\uc11c \uc9c1\uc811 \uc77d\uae30\ntables = pd.read_html('https://example.com/data')\ndf = tables[0]  # \uccab \ubc88\uc9f8 \ud14c\uc774\ube14\n\n# HTML \ubb38\uc790\uc5f4\uc5d0\uc11c \uc77d\uae30\nhtml_string = '''\n<table>\n    <tr><th>\uc774\ub984</th><th>\ub098\uc774</th></tr>\n    <tr><td>\ud64d\uae38\ub3d9</td><td>30</td></tr>\n    <tr><td>\uae40\ucca0\uc218</td><td>25</td></tr>\n</table>\n'''\ndf = pd.read_html(html_string)[0]\n\n# \ud2b9\uc815 \uc18d\uc131\uc744 \uac00\uc9c4 \ud14c\uc774\ube14\ub9cc \uc77d\uae30\ntables = pd.read_html('page.html', attrs={'class': 'data-table'})\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"read_html()"}),"\uc740 \ud398\uc774\uc9c0\uc758 \ubaa8\ub4e0 ",(0,t.jsx)(e.code,{children:"<table>"})," \ud0dc\uadf8\ub97c \ucc3e\uc544 \ub9ac\uc2a4\ud2b8\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4. ",(0,t.jsx)(e.code,{children:"lxml"})," \ub610\ub294 ",(0,t.jsx)(e.code,{children:"html5lib"})," \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud544\uc694\ud569\ub2c8\ub2e4."]})}),"\n",(0,t.jsx)(e.h3,{id:"252-\uc2e4\uc804-\uc608\uc81c-\uc704\ud0a4\ud53c\ub514\uc544-\ub370\uc774\ud130-\uc2a4\ud06c\ub798\ud551",children:"2.5.2 \uc2e4\uc804 \uc608\uc81c: \uc704\ud0a4\ud53c\ub514\uc544 \ub370\uc774\ud130 \uc2a4\ud06c\ub798\ud551"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# \uc608\uc81c: HTML \ubb38\uc790\uc5f4\uc5d0\uc11c \ud14c\uc774\ube14 \ucd94\ucd9c (\uc2e4\uc81c \uc6f9 \uc2a4\ud06c\ub798\ud551 \uc2dc\ubbac\ub808\uc774\uc158)\nhtml_data = '''\n<html>\n<body>\n<table class=\"wikitable\">\n    <tr><th>\uad6d\uac00</th><th>\uc778\uad6c(\ubc31\ub9cc)</th><th>\uba74\uc801(km\xb2)</th></tr>\n    <tr><td>\ud55c\uad6d</td><td>51.8</td><td>100,210</td></tr>\n    <tr><td>\uc77c\ubcf8</td><td>125.7</td><td>377,975</td></tr>\n    <tr><td>\uc911\uad6d</td><td>1411.8</td><td>9,596,961</td></tr>\n</table>\n</body>\n</html>\n'''\n\n# HTML \ud14c\uc774\ube14 \uc77d\uae30\ntables = pd.read_html(html_data)\ndf = tables[0]\n\nprint(\"\ucd94\ucd9c\ub41c \ub370\uc774\ud130:\")\nprint(df)\n\n# \ub370\uc774\ud130 \uc815\uc81c\ndf['\uc778\uad6c(\ubc31\ub9cc)'] = pd.to_numeric(df['\uc778\uad6c(\ubc31\ub9cc)'])\ndf['\uba74\uc801(km\xb2)'] = df['\uba74\uc801(km\xb2)'].str.replace(',', '').astype(float)\ndf['\uc778\uad6c\ubc00\ub3c4'] = (df['\uc778\uad6c(\ubc31\ub9cc)'] * 1000000 / df['\uba74\uc801(km\xb2)']).round(2)\n\nprint(\"\\n\uc815\uc81c\ub41c \ub370\uc774\ud130:\")\nprint(df)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"26-\ud074\ub9bd\ubcf4\ub4dc",children:"2.6 \ud074\ub9bd\ubcf4\ub4dc"}),"\n",(0,t.jsx)(e.p,{children:"\ubcf5\uc0ac\ub41c \ub370\uc774\ud130\ub97c \ube60\ub974\uac8c DataFrame\uc73c\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"261-\ud074\ub9bd\ubcf4\ub4dc-\uc0ac\uc6a9",children:"2.6.1 \ud074\ub9bd\ubcf4\ub4dc \uc0ac\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \ud074\ub9bd\ubcf4\ub4dc\uc5d0\uc11c \uc77d\uae30 (Excel, \uc6f9 \ud398\uc774\uc9c0 \ub4f1\uc5d0\uc11c \ubcf5\uc0ac\ud55c \ub370\uc774\ud130)\ndf = pd.read_clipboard()\n\n# DataFrame\uc744 \ud074\ub9bd\ubcf4\ub4dc\ub85c \ubcf5\uc0ac (Excel \ub4f1\uc5d0 \ubd99\uc5ec\ub123\uae30 \uac00\ub2a5)\ndf.to_clipboard(index=False)\n\n# \uad6c\ubd84\uc790 \uc9c0\uc815\ndf = pd.read_clipboard(sep='\\t')\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsx)(e.p,{children:"\ud074\ub9bd\ubcf4\ub4dc \uae30\ub2a5\uc740 \ub300\ud654\ud615 \uc791\uc5c5\uc5d0 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. Excel\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ubcf5\uc0ac\ud55c \ud6c4 \ubc14\ub85c pandas\ub85c \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."})}),"\n",(0,t.jsx)(e.h2,{id:"27-api\uc5d0\uc11c-\ub370\uc774\ud130-\uac00\uc838\uc624\uae30",children:"2.7 API\uc5d0\uc11c \ub370\uc774\ud130 \uac00\uc838\uc624\uae30"}),"\n",(0,t.jsx)(e.p,{children:"\uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 REST API\ub97c \ud1b5\ud574 \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"271-requests-\ub77c\uc774\ube0c\ub7ec\ub9ac-\uc0ac\uc6a9",children:"2.7.1 requests \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport requests\n\n# \uae30\ubcf8 GET \uc694\uccad\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\ndf = pd.DataFrame(data)\n\n# \ucffc\ub9ac \ud30c\ub77c\ubbf8\ud130 \uc0ac\uc6a9\nparams = {\n    'page': 1,\n    'limit': 100,\n    'category': 'electronics'\n}\nresponse = requests.get('https://api.example.com/products', params=params)\ndf = pd.DataFrame(response.json()['products'])\n\n# \ud5e4\ub354 \ucd94\uac00 (\uc778\uc99d \ub4f1)\nheaders = {\n    'Authorization': 'Bearer YOUR_TOKEN',\n    'Content-Type': 'application/json'\n}\nresponse = requests.get('https://api.example.com/data', headers=headers)\ndf = pd.DataFrame(response.json())\n"})}),"\n",(0,t.jsx)(e.h3,{id:"272-\uc2e4\uc804-\uc608\uc81c-\uacf5\uacf5-api-\ud65c\uc6a9",children:"2.7.2 \uc2e4\uc804 \uc608\uc81c: \uacf5\uacf5 API \ud65c\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport requests\nimport json\n\n# JSONPlaceholder API \uc0ac\uc6a9 \uc608\uc81c\ndef fetch_user_posts(user_id):\n    \"\"\"\ud2b9\uc815 \uc0ac\uc6a9\uc790\uc758 \uac8c\uc2dc\ubb3c\uc744 \uac00\uc838\uc624\ub294 \ud568\uc218\"\"\"\n    base_url = 'https://jsonplaceholder.typicode.com'\n\n    # \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30\n    user_response = requests.get(f'{base_url}/users/{user_id}')\n    user_data = user_response.json()\n\n    # \uac8c\uc2dc\ubb3c \uac00\uc838\uc624\uae30\n    posts_response = requests.get(f'{base_url}/posts?userId={user_id}')\n    posts_data = posts_response.json()\n\n    # DataFrame \uc0dd\uc131\n    posts_df = pd.DataFrame(posts_data)\n    posts_df['userName'] = user_data['name']\n    posts_df['userEmail'] = user_data['email']\n\n    return posts_df\n\n# \uc5ec\ub7ec \uc0ac\uc6a9\uc790\uc758 \ub370\uc774\ud130 \uc218\uc9d1\nall_posts = []\nfor user_id in range(1, 6):  # \uc0ac\uc6a9\uc790 1-5\n    df = fetch_user_posts(user_id)\n    all_posts.append(df)\n    print(f\"\uc0ac\uc6a9\uc790 {user_id}\uc758 \uac8c\uc2dc\ubb3c {len(df)}\uac1c \uc218\uc9d1 \uc644\ub8cc\")\n\n# \ubaa8\ub4e0 \ub370\uc774\ud130 \ud569\uce58\uae30\nfinal_df = pd.concat(all_posts, ignore_index=True)\n\nprint(f\"\\n\ucd1d {len(final_df)}\uac1c\uc758 \uac8c\uc2dc\ubb3c \uc218\uc9d1 \uc644\ub8cc\")\nprint(final_df.head())\n\n# \uacb0\uacfc \uc800\uc7a5\nfinal_df.to_csv('user_posts.csv', index=False, encoding='utf-8-sig')\n"})}),"\n",(0,t.jsxs)(e.admonition,{type:"warning",children:[(0,t.jsx)(e.p,{children:"API \uc0ac\uc6a9 \uc2dc \uc8fc\uc758\uc0ac\ud56d:"}),(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Rate Limit (\uc694\uccad \uc81c\ud55c) \ud655\uc778"}),"\n",(0,t.jsx)(e.li,{children:"API \ud0a4 \ubcf4\uc548 \uc720\uc9c0"}),"\n",(0,t.jsx)(e.li,{children:"\uc5d0\ub7ec \ucc98\ub9ac \uad6c\ud604"}),"\n",(0,t.jsx)(e.li,{children:"\ud0c0\uc784\uc544\uc6c3 \uc124\uc815"}),"\n"]})]}),"\n",(0,t.jsx)(e.h3,{id:"273-\ud398\uc774\uc9c0\ub124\uc774\uc158-\ucc98\ub9ac",children:"2.7.3 \ud398\uc774\uc9c0\ub124\uc774\uc158 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import pandas as pd\nimport requests\nimport time\n\ndef fetch_all_pages(base_url, max_pages=None):\n    """\ud398\uc774\uc9c0\ub124\uc774\uc158\ub41c API \ub370\uc774\ud130 \ubaa8\ub450 \uac00\uc838\uc624\uae30"""\n    all_data = []\n    page = 1\n\n    while True:\n        if max_pages and page > max_pages:\n            break\n\n        try:\n            response = requests.get(f\'{base_url}?page={page}&limit=50\')\n            response.raise_for_status()  # HTTP \uc5d0\ub7ec \ud655\uc778\n\n            data = response.json()\n\n            if not data or len(data) == 0:\n                break\n\n            all_data.extend(data)\n            print(f"\ud398\uc774\uc9c0 {page} \ucc98\ub9ac \uc644\ub8cc ({len(data)}\uac1c \ud56d\ubaa9)")\n\n            page += 1\n            time.sleep(0.5)  # Rate limiting \uace0\ub824\n\n        except requests.exceptions.RequestException as e:\n            print(f"\uc5d0\ub7ec \ubc1c\uc0dd: {e}")\n            break\n\n    return pd.DataFrame(all_data)\n\n# \uc0ac\uc6a9 \uc608\uc81c (\uc2e4\uc81c API URL\ub85c \ub300\uccb4 \ud544\uc694)\n# df = fetch_all_pages(\'https://api.example.com/data\', max_pages=10)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"28-\ub300\uc6a9\ub7c9-\ud30c\uc77c-\ucc98\ub9ac",children:"2.8 \ub300\uc6a9\ub7c9 \ud30c\uc77c \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.p,{children:"\uba54\ubaa8\ub9ac\ubcf4\ub2e4 \ud070 \ud30c\uc77c\uc744 \ucc98\ub9ac\ud560 \ub54c\ub294 \uccad\ud06c \ub2e8\uc704\ub85c \uc77d\uc5b4\uc57c \ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"281-chunksize-\ud30c\ub77c\ubbf8\ud130-\uc0ac\uc6a9",children:"2.8.1 chunksize \ud30c\ub77c\ubbf8\ud130 \uc0ac\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# \uccad\ud06c \ub2e8\uc704\ub85c \uc77d\uae30\nchunk_size = 10000\nchunks = []\n\nfor chunk in pd.read_csv('large_file.csv', chunksize=chunk_size):\n    # \uac01 \uccad\ud06c \ucc98\ub9ac\n    processed = chunk[chunk['\uae08\uc561'] > 100000]  # \ud544\ud130\ub9c1\n    chunks.append(processed)\n\n# \ubaa8\ub4e0 \uccad\ud06c \ud569\uce58\uae30\ndf = pd.concat(chunks, ignore_index=True)\n\n# \ub610\ub294 \uccad\ud06c\ubcc4\ub85c \uc9d1\uacc4 \ud6c4 \uacb0\ud569\nresults = []\nfor chunk in pd.read_csv('large_file.csv', chunksize=chunk_size):\n    summary = chunk.groupby('\uce74\ud14c\uace0\ub9ac')['\uae08\uc561'].sum()\n    results.append(summary)\n\n# \uc9d1\uacc4 \uacb0\uacfc \ud569\uce58\uae30\nfinal_summary = pd.concat(results).groupby(level=0).sum()\n"})}),"\n",(0,t.jsx)(e.h3,{id:"282-\uc2e4\uc804-\uc608\uc81c-\ub300\uc6a9\ub7c9-\ub85c\uadf8-\ud30c\uc77c-\ubd84\uc11d",children:"2.8.2 \uc2e4\uc804 \uc608\uc81c: \ub300\uc6a9\ub7c9 \ub85c\uadf8 \ud30c\uc77c \ubd84\uc11d"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nfrom datetime import datetime\n\ndef analyze_large_log(filename, chunksize=50000):\n    \"\"\"\ub300\uc6a9\ub7c9 \ub85c\uadf8 \ud30c\uc77c\uc744 \uccad\ud06c \ub2e8\uc704\ub85c \ubd84\uc11d\"\"\"\n\n    # \ud1b5\uacc4 \ucd08\uae30\ud654\n    stats = {\n        'total_rows': 0,\n        'error_count': 0,\n        'warning_count': 0,\n        'status_counts': {},\n    }\n\n    print(f\"\ud30c\uc77c \ubd84\uc11d \uc2dc\uc791: {filename}\")\n\n    # \uccad\ud06c \ub2e8\uc704\ub85c \ucc98\ub9ac\n    for i, chunk in enumerate(pd.read_csv(filename, chunksize=chunksize)):\n        stats['total_rows'] += len(chunk)\n\n        # \ub85c\uadf8 \ub808\ubca8\ubcc4 \uc9d1\uacc4\n        if 'level' in chunk.columns:\n            stats['error_count'] += (chunk['level'] == 'ERROR').sum()\n            stats['warning_count'] += (chunk['level'] == 'WARNING').sum()\n\n        # \uc0c1\ud0dc \ucf54\ub4dc\ubcc4 \uc9d1\uacc4\n        if 'status' in chunk.columns:\n            status_counts = chunk['status'].value_counts()\n            for status, count in status_counts.items():\n                stats['status_counts'][status] = stats['status_counts'].get(status, 0) + count\n\n        if (i + 1) % 10 == 0:\n            print(f\"  {(i + 1) * chunksize:,} \ud589 \ucc98\ub9ac \uc644\ub8cc...\")\n\n    print(\"\\n\ubd84\uc11d \uacb0\uacfc:\")\n    print(f\"  \ucd1d \ud589 \uc218: {stats['total_rows']:,}\")\n    print(f\"  \uc5d0\ub7ec \uc218: {stats['error_count']:,}\")\n    print(f\"  \uacbd\uace0 \uc218: {stats['warning_count']:,}\")\n    print(f\"  \uc0c1\ud0dc \ucf54\ub4dc \ubd84\ud3ec: {stats['status_counts']}\")\n\n    return stats\n\n# \uc0d8\ud50c \ub85c\uadf8 \ud30c\uc77c \uc0dd\uc131 (\ud14c\uc2a4\ud2b8\uc6a9)\nimport numpy as np\n\nlog_data = pd.DataFrame({\n    'timestamp': pd.date_range('2024-01-01', periods=100000, freq='1S'),\n    'level': np.random.choice(['INFO', 'WARNING', 'ERROR'], 100000, p=[0.8, 0.15, 0.05]),\n    'status': np.random.choice([200, 404, 500], 100000, p=[0.9, 0.07, 0.03]),\n    'message': ['Log message'] * 100000\n})\nlog_data.to_csv('large_log.csv', index=False)\n\n# \ubd84\uc11d \uc2e4\ud589\nstats = analyze_large_log('large_log.csv', chunksize=10000)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"283-\uba54\ubaa8\ub9ac-\ud6a8\uc728\uc801\uc778-\ub370\uc774\ud130-\ud0c0\uc785",children:"2.8.3 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130 \ud0c0\uc785"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# \uc6d0\ubcf8 \ub370\uc774\ud130 \uc77d\uae30\ndf = pd.read_csv('data.csv')\nprint(f\"\uc6d0\ubcf8 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\n\n# \ub370\uc774\ud130 \ud0c0\uc785 \ucd5c\uc801\ud654\ndef optimize_dtypes(df):\n    \"\"\"DataFrame\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ucd5c\uc801\ud654\"\"\"\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type == 'object':\n            # \ubb38\uc790\uc5f4 \ud0c0\uc785 \ucd5c\uc801\ud654\n            num_unique = df[col].nunique()\n            num_total = len(df[col])\n\n            if num_unique / num_total < 0.5:  # \uce74\ud14c\uace0\ub9ac\ub85c \ubcc0\ud658\n                df[col] = df[col].astype('category')\n\n        elif col_type == 'int64':\n            # \uc815\uc218 \ud0c0\uc785 \ucd5c\uc801\ud654\n            if df[col].min() >= 0:\n                if df[col].max() < 255:\n                    df[col] = df[col].astype('uint8')\n                elif df[col].max() < 65535:\n                    df[col] = df[col].astype('uint16')\n                elif df[col].max() < 4294967295:\n                    df[col] = df[col].astype('uint32')\n            else:\n                if df[col].min() > -128 and df[col].max() < 127:\n                    df[col] = df[col].astype('int8')\n                elif df[col].min() > -32768 and df[col].max() < 32767:\n                    df[col] = df[col].astype('int16')\n                elif df[col].min() > -2147483648 and df[col].max() < 2147483647:\n                    df[col] = df[col].astype('int32')\n\n        elif col_type == 'float64':\n            # \uc2e4\uc218 \ud0c0\uc785 \ucd5c\uc801\ud654\n            df[col] = df[col].astype('float32')\n\n    return df\n\n# \ucd5c\uc801\ud654 \uc801\uc6a9\ndf_optimized = optimize_dtypes(df.copy())\nprint(f\"\ucd5c\uc801\ud654 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9: {df_optimized.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\n\n# \uba54\ubaa8\ub9ac \uc808\uac10 \ube44\uc728 \uacc4\uc0b0\nreduction = (1 - df_optimized.memory_usage(deep=True).sum() / df.memory_usage(deep=True).sum()) * 100\nprint(f\"\uba54\ubaa8\ub9ac \uc808\uac10: {reduction:.1f}%\")\n"})}),"\n",(0,t.jsx)(e.h2,{id:"29-\uc778\ucf54\ub529-\ubb38\uc81c-\ud574\uacb0",children:"2.9 \uc778\ucf54\ub529 \ubb38\uc81c \ud574\uacb0"}),"\n",(0,t.jsx)(e.p,{children:"\ud55c\uae00 \ud30c\uc77c\uc744 \ub2e4\ub8f0 \ub54c \uc778\ucf54\ub529 \ubb38\uc81c\uac00 \uc790\uc8fc \ubc1c\uc0dd\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h3,{id:"291-\uc778\ucf54\ub529-\uac10\uc9c0-\ubc0f-\ucc98\ub9ac",children:"2.9.1 \uc778\ucf54\ub529 \uac10\uc9c0 \ubc0f \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# UTF-8 \uc778\ucf54\ub529\ndf = pd.read_csv('data.csv', encoding='utf-8')\n\n# EUC-KR \uc778\ucf54\ub529 (\ud55c\uae00 Windows \uae30\ubcf8)\ndf = pd.read_csv('data.csv', encoding='euc-kr')\n\n# CP949 \uc778\ucf54\ub529\ndf = pd.read_csv('data.csv', encoding='cp949')\n\n# \uc778\ucf54\ub529 \uc790\ub3d9 \uac10\uc9c0 (chardet \ub77c\uc774\ube0c\ub7ec\ub9ac \ud544\uc694)\nimport chardet\n\ndef detect_encoding(filename):\n    \"\"\"\ud30c\uc77c\uc758 \uc778\ucf54\ub529 \uac10\uc9c0\"\"\"\n    with open(filename, 'rb') as f:\n        result = chardet.detect(f.read(100000))  # \ucc98\uc74c 100KB \uc77d\uae30\n    return result['encoding']\n\nencoding = detect_encoding('data.csv')\nprint(f\"\uac10\uc9c0\ub41c \uc778\ucf54\ub529: {encoding}\")\ndf = pd.read_csv('data.csv', encoding=encoding)\n\n# \uc5d0\ub7ec \ubb34\uc2dc\ud558\uace0 \uc77d\uae30\ndf = pd.read_csv('data.csv', encoding='utf-8', errors='ignore')\n\n# \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc \ub300\uccb4 \ubb38\uc790 \uc0ac\uc6a9\ndf = pd.read_csv('data.csv', encoding='utf-8', errors='replace')\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["Windows\uc5d0\uc11c \uc0dd\uc131\ub41c CSV \ud30c\uc77c\uc740 \ubcf4\ud1b5 ",(0,t.jsx)(e.code,{children:"cp949"})," \ub610\ub294 ",(0,t.jsx)(e.code,{children:"euc-kr"})," \uc778\ucf54\ub529\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc800\uc7a5\ud560 \ub54c\ub294 ",(0,t.jsx)(e.code,{children:"utf-8-sig"}),"\ub97c \uc0ac\uc6a9\ud558\uba74 Excel\uc5d0\uc11c \ud55c\uae00\uc774 \uae68\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4."]})}),"\n",(0,t.jsx)(e.h3,{id:"292-\uc2e4\uc804-\uc608\uc81c-\ub2e4\uc591\ud55c-\uc778\ucf54\ub529-\ucc98\ub9ac",children:"2.9.2 \uc2e4\uc804 \uc608\uc81c: \ub2e4\uc591\ud55c \uc778\ucf54\ub529 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport chardet\n\ndef read_csv_auto_encoding(filename, **kwargs):\n    \"\"\"\uc778\ucf54\ub529\uc744 \uc790\ub3d9\uc73c\ub85c \uac10\uc9c0\ud558\uc5ec CSV \ud30c\uc77c \uc77d\uae30\"\"\"\n\n    # \uc778\ucf54\ub529 \uac10\uc9c0\n    with open(filename, 'rb') as f:\n        raw_data = f.read(100000)\n        result = chardet.detect(raw_data)\n        encoding = result['encoding']\n        confidence = result['confidence']\n\n    print(f\"\uac10\uc9c0\ub41c \uc778\ucf54\ub529: {encoding} (\uc2e0\ub8b0\ub3c4: {confidence:.2%})\")\n\n    # \uc77c\ubc18\uc801\uc778 \uc778\ucf54\ub529 \ubaa9\ub85d\n    encodings_to_try = [encoding, 'utf-8', 'euc-kr', 'cp949', 'latin1']\n\n    for enc in encodings_to_try:\n        try:\n            df = pd.read_csv(filename, encoding=enc, **kwargs)\n            print(f\"\uc131\uacf5: {enc} \uc778\ucf54\ub529\uc73c\ub85c \ud30c\uc77c \uc77d\uae30 \uc644\ub8cc\")\n            return df\n        except (UnicodeDecodeError, UnicodeError):\n            print(f\"\uc2e4\ud328: {enc} \uc778\ucf54\ub529\uc73c\ub85c \uc77d\uae30 \uc2e4\ud328\")\n            continue\n\n    raise ValueError(f\"\ud30c\uc77c\uc744 \uc77d\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {filename}\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\n# df = read_csv_auto_encoding('korean_data.csv')\n"})}),"\n",(0,t.jsx)(e.h3,{id:"293-\uc548\uc804\ud55c-\uc800\uc7a5-\ubc29\ubc95",children:"2.9.3 \uc548\uc804\ud55c \uc800\uc7a5 \ubc29\ubc95"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# DataFrame \uc0dd\uc131\ndf = pd.DataFrame({\n    '\uc774\ub984': ['\ud64d\uae38\ub3d9', '\uae40\ucca0\uc218', '\uc774\uc601\ud76c'],\n    '\ub098\uc774': [30, 25, 28],\n    '\uc9c1\uc5c5': ['\uac1c\ubc1c\uc790', '\ub514\uc790\uc774\ub108', '\uae30\ud68d\uc790']\n})\n\n# Excel\uc5d0\uc11c \ud55c\uae00\uc774 \uae68\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \uc800\uc7a5\ndf.to_csv('output.csv', encoding='utf-8-sig', index=False)\n\n# Python\uc5d0\uc11c \ub2e4\uc2dc \uc77d\uc744 \ud30c\uc77c (UTF-8)\ndf.to_csv('output_python.csv', encoding='utf-8', index=False)\n\n# Windows Excel\uc6a9 (EUC-KR)\ndf.to_csv('output_excel.csv', encoding='euc-kr', index=False)\n\n# \uc548\uc804\ud55c \uc800\uc7a5 \ud568\uc218\ndef safe_to_csv(df, filename, encoding='utf-8-sig', **kwargs):\n    \"\"\"\uc5d0\ub7ec \ucc98\ub9ac\uac00 \ud3ec\ud568\ub41c CSV \uc800\uc7a5\"\"\"\n    try:\n        df.to_csv(filename, encoding=encoding, index=False, **kwargs)\n        print(f\"\ud30c\uc77c \uc800\uc7a5 \uc644\ub8cc: {filename}\")\n    except Exception as e:\n        print(f\"\uc800\uc7a5 \uc2e4\ud328: {e}\")\n        # \ub300\uccb4 \uc778\ucf54\ub529 \uc2dc\ub3c4\n        try:\n            df.to_csv(filename, encoding='utf-8', index=False, errors='ignore', **kwargs)\n            print(f\"\ub300\uccb4 \uc778\ucf54\ub529\uc73c\ub85c \uc800\uc7a5 \uc644\ub8cc: {filename}\")\n        except Exception as e2:\n            print(f\"\uc800\uc7a5 \uc2e4\ud328: {e2}\")\n\n# \uc0ac\uc6a9 \uc608\uc81c\nsafe_to_csv(df, 'output_safe.csv')\n"})}),"\n",(0,t.jsx)(e.h2,{id:"210-\uc2e4\uc804-\uc608\uc81c",children:"2.10 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,t.jsx)(e.h3,{id:"2101-\ub2e4\uc591\ud55c-\uc18c\uc2a4\uc5d0\uc11c-\ub370\uc774\ud130-\ud1b5\ud569",children:"2.10.1 \ub2e4\uc591\ud55c \uc18c\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \ud1b5\ud569"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport sqlite3\n\n# 1. CSV \ud30c\uc77c\uc5d0\uc11c \ud310\ub9e4 \ub370\uc774\ud130 \uc77d\uae30\nsales_df = pd.read_csv('sales.csv', parse_dates=['sale_date'])\n\n# 2. Excel \ud30c\uc77c\uc5d0\uc11c \uc81c\ud488 \uc815\ubcf4 \uc77d\uae30\nproducts_df = pd.read_excel('products.xlsx', sheet_name='Products')\n\n# 3. JSON \ud30c\uc77c\uc5d0\uc11c \uace0\uac1d \uc815\ubcf4 \uc77d\uae30\ncustomers_df = pd.read_json('customers.json')\n\n# 4. SQL\uc5d0\uc11c \uc7ac\uace0 \uc815\ubcf4 \uc77d\uae30\nconn = sqlite3.connect('inventory.db')\ninventory_df = pd.read_sql('SELECT * FROM inventory', conn)\nconn.close()\n\n# 5. \ub370\uc774\ud130 \ud1b5\ud569\n# \ud310\ub9e4 \ub370\uc774\ud130\uc640 \uc81c\ud488 \uc815\ubcf4 \uc870\uc778\nmerged_df = sales_df.merge(products_df, on='product_id', how='left')\n\n# \uace0\uac1d \uc815\ubcf4 \uc870\uc778\nmerged_df = merged_df.merge(customers_df, on='customer_id', how='left')\n\n# \uc7ac\uace0 \uc815\ubcf4 \uc870\uc778\nfinal_df = merged_df.merge(inventory_df, on='product_id', how='left')\n\n# 6. \uacb0\uacfc \uc800\uc7a5\nfinal_df.to_excel('integrated_report.xlsx', index=False)\nfinal_df.to_csv('integrated_report.csv', index=False, encoding='utf-8-sig')\n\nprint(\"\ub370\uc774\ud130 \ud1b5\ud569 \uc644\ub8cc!\")\nprint(f\"\ucd1d {len(final_df)}\uac1c\uc758 \ub808\ucf54\ub4dc \uc0dd\uc131\")\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2102-\uc790\ub3d9\ud654\ub41c-\ub370\uc774\ud130-\uc218\uc9d1-\ud30c\uc774\ud504\ub77c\uc778",children:"2.10.2 \uc790\ub3d9\ud654\ub41c \ub370\uc774\ud130 \uc218\uc9d1 \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import pandas as pd\nimport requests\nfrom datetime import datetime, timedelta\nimport time\n\nclass DataPipeline:\n    """\uc790\ub3d9\ud654\ub41c \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778"""\n\n    def __init__(self, api_url, output_dir=\'data\'):\n        self.api_url = api_url\n        self.output_dir = output_dir\n\n    def fetch_data(self, start_date, end_date):\n        """API\uc5d0\uc11c \ub0a0\uc9dc \ubc94\uc704\uc758 \ub370\uc774\ud130 \uc218\uc9d1"""\n        all_data = []\n        current_date = start_date\n\n        while current_date <= end_date:\n            try:\n                params = {\'date\': current_date.strftime(\'%Y-%m-%d\')}\n                response = requests.get(self.api_url, params=params, timeout=10)\n\n                if response.status_code == 200:\n                    data = response.json()\n                    all_data.extend(data)\n                    print(f"  {current_date.date()} \ub370\uc774\ud130 \uc218\uc9d1 \uc644\ub8cc ({len(data)}\uac1c)")\n                else:\n                    print(f"  {current_date.date()} \ub370\uc774\ud130 \uc218\uc9d1 \uc2e4\ud328: {response.status_code}")\n\n                time.sleep(1)  # Rate limiting\n\n            except Exception as e:\n                print(f"  \uc5d0\ub7ec \ubc1c\uc0dd: {e}")\n\n            current_date += timedelta(days=1)\n\n        return pd.DataFrame(all_data)\n\n    def clean_data(self, df):\n        """\ub370\uc774\ud130 \uc815\uc81c"""\n        # \uc911\ubcf5 \uc81c\uac70\n        df = df.drop_duplicates()\n\n        # \uacb0\uce21\uce58 \ucc98\ub9ac\n        df = df.dropna(subset=[\'id\', \'date\'])\n\n        # \ub370\uc774\ud130 \ud0c0\uc785 \ubcc0\ud658\n        if \'date\' in df.columns:\n            df[\'date\'] = pd.to_datetime(df[\'date\'])\n\n        return df\n\n    def save_data(self, df, filename_prefix=\'data\'):\n        """\ub370\uc774\ud130 \uc800\uc7a5 (\uc5ec\ub7ec \ud615\uc2dd)"""\n        timestamp = datetime.now().strftime(\'%Y%m%d_%H%M%S\')\n\n        # CSV \uc800\uc7a5\n        csv_filename = f\'{self.output_dir}/{filename_prefix}_{timestamp}.csv\'\n        df.to_csv(csv_filename, index=False, encoding=\'utf-8-sig\')\n        print(f"CSV \uc800\uc7a5 \uc644\ub8cc: {csv_filename}")\n\n        # Excel \uc800\uc7a5\n        excel_filename = f\'{self.output_dir}/{filename_prefix}_{timestamp}.xlsx\'\n        df.to_excel(excel_filename, index=False)\n        print(f"Excel \uc800\uc7a5 \uc644\ub8cc: {excel_filename}")\n\n        return csv_filename, excel_filename\n\n    def run(self, days_back=7):\n        """\ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589"""\n        print("\ub370\uc774\ud130 \uc218\uc9d1 \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\uc791")\n\n        # \ub0a0\uc9dc \ubc94\uc704 \uc124\uc815\n        end_date = datetime.now()\n        start_date = end_date - timedelta(days=days_back)\n\n        print(f"\uc218\uc9d1 \uae30\uac04: {start_date.date()} ~ {end_date.date()}")\n\n        # 1. \ub370\uc774\ud130 \uc218\uc9d1\n        print("\\n1. \ub370\uc774\ud130 \uc218\uc9d1 \uc911...")\n        df = self.fetch_data(start_date, end_date)\n        print(f"   \uc218\uc9d1 \uc644\ub8cc: {len(df)}\uac1c \ub808\ucf54\ub4dc")\n\n        # 2. \ub370\uc774\ud130 \uc815\uc81c\n        print("\\n2. \ub370\uc774\ud130 \uc815\uc81c \uc911...")\n        df = self.clean_data(df)\n        print(f"   \uc815\uc81c \uc644\ub8cc: {len(df)}\uac1c \ub808\ucf54\ub4dc")\n\n        # 3. \ub370\uc774\ud130 \uc800\uc7a5\n        print("\\n3. \ub370\uc774\ud130 \uc800\uc7a5 \uc911...")\n        self.save_data(df)\n\n        print("\\n\ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589 \uc644\ub8cc!")\n        return df\n\n# \uc0ac\uc6a9 \uc608\uc81c (\uc2e4\uc81c API URL \ud544\uc694)\n# pipeline = DataPipeline(\'https://api.example.com/data\')\n# df = pipeline.run(days_back=7)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\uc5f0\uc2b5-\ubb38\uc81c",children:"\uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,t.jsx)(e.h3,{id:"\ubb38\uc81c-1-csv-\ub370\uc774\ud130-\uc815\uc81c",children:"\ubb38\uc81c 1: CSV \ub370\uc774\ud130 \uc815\uc81c"}),"\n",(0,t.jsx)(e.p,{children:"\ub2e4\uc74c\uacfc \uac19\uc740 CSV \ud30c\uc77c\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc744 \uc77d\uace0 \uacb0\uce21\uce58\ub97c \ucc98\ub9ac\ud55c \ud6c4 \uc800\uc7a5\ud558\uc138\uc694."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \ubb38\uc81c \ub370\uc774\ud130 \uc0dd\uc131\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    '\uc774\ub984': ['\ud64d\uae38\ub3d9', '\uae40\ucca0\uc218', None, '\uc774\uc601\ud76c', '\ubc15\ubbfc\uc218'],\n    '\ub098\uc774': [30, 25, 28, None, 35],\n    '\uc810\uc218': [85, None, 92, 88, None],\n    '\ub4f1\uae09': ['A', 'B', 'A', 'A', 'B']\n})\n\ndata.to_csv('student_data.csv', index=False, encoding='utf-8-sig')\n"})}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# 1. CSV \ud30c\uc77c \uc77d\uae30\ndf = pd.read_csv('student_data.csv', encoding='utf-8-sig')\n\nprint(\"\uc6d0\ubcf8 \ub370\uc774\ud130:\")\nprint(df)\nprint(f\"\\n\uacb0\uce21\uce58 \uac1c\uc218:\\n{df.isnull().sum()}\")\n\n# 2. \uacb0\uce21\uce58 \ucc98\ub9ac\n# \uc774\ub984 \uacb0\uce21\uce58\ub294 \"Unknown\"\uc73c\ub85c \ucc44\uc6b0\uae30\ndf['\uc774\ub984'] = df['\uc774\ub984'].fillna('Unknown')\n\n# \ub098\uc774 \uacb0\uce21\uce58\ub294 \ud3c9\uade0\uac12\uc73c\ub85c \ucc44\uc6b0\uae30\ndf['\ub098\uc774'] = df['\ub098\uc774'].fillna(df['\ub098\uc774'].mean())\n\n# \uc810\uc218 \uacb0\uce21\uce58\ub294 \ub4f1\uae09\ubcc4 \ud3c9\uade0\uc73c\ub85c \ucc44\uc6b0\uae30\ndf['\uc810\uc218'] = df.groupby('\ub4f1\uae09')['\uc810\uc218'].transform(lambda x: x.fillna(x.mean()))\n\nprint(\"\\n\ucc98\ub9ac\ub41c \ub370\uc774\ud130:\")\nprint(df)\n\n# 3. \uc800\uc7a5\ndf.to_csv('student_data_cleaned.csv', index=False, encoding='utf-8-sig')\nprint(\"\\n\uc815\uc81c\ub41c \ub370\uc774\ud130 \uc800\uc7a5 \uc644\ub8cc!\")\n"})})]}),"\n",(0,t.jsx)(e.h3,{id:"\ubb38\uc81c-2-excel-\ub2e4\uc911-\uc2dc\ud2b8-\ucc98\ub9ac",children:"\ubb38\uc81c 2: Excel \ub2e4\uc911 \uc2dc\ud2b8 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.p,{children:"\uc5ec\ub7ec \uc2dc\ud2b8\ub97c \uac00\uc9c4 Excel \ud30c\uc77c\uc744 \uc77d\uace0, \uac01 \uc2dc\ud2b8\uc758 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud55c \ud6c4 \uc694\uc57d \ubcf4\uace0\uc11c\ub97c \uc0dd\uc131\ud558\uc138\uc694."}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\n\n# \uc0d8\ud50c \ub370\uc774\ud130 \uc0dd\uc131\ndf1 = pd.DataFrame({\n    '\uc81c\ud488': ['A', 'B', 'C'],\n    '1\uc6d4': [100, 150, 120],\n    '2\uc6d4': [110, 145, 130]\n})\n\ndf2 = pd.DataFrame({\n    '\uc81c\ud488': ['A', 'B', 'C'],\n    '1\uc6d4': [200, 250, 220],\n    '2\uc6d4': [210, 245, 230]\n})\n\n# Excel \ud30c\uc77c \uc0dd\uc131\nwith pd.ExcelWriter('sales_by_store.xlsx') as writer:\n    df1.to_excel(writer, sheet_name='\uc11c\uc6b8\uc810', index=False)\n    df2.to_excel(writer, sheet_name='\ubd80\uc0b0\uc810', index=False)\n\n# \ud574\ub2f5\n# 1. \ubaa8\ub4e0 \uc2dc\ud2b8 \uc77d\uae30\nall_sheets = pd.read_excel('sales_by_store.xlsx', sheet_name=None)\n\nprint(\"\uc2dc\ud2b8 \ubaa9\ub85d:\", list(all_sheets.keys()))\n\n# 2. \uac01 \uc2dc\ud2b8 \ubd84\uc11d\nsummary_list = []\n\nfor sheet_name, df in all_sheets.items():\n    # \uc6d4\ubcc4 \ud569\uacc4 \uacc4\uc0b0\n    total_jan = df['1\uc6d4'].sum()\n    total_feb = df['2\uc6d4'].sum()\n    total = total_jan + total_feb\n\n    summary_list.append({\n        '\uc9c0\uc810': sheet_name,\n        '1\uc6d4_\ub9e4\ucd9c': total_jan,\n        '2\uc6d4_\ub9e4\ucd9c': total_feb,\n        '\ucd1d\ub9e4\ucd9c': total\n    })\n\n    print(f\"\\n{sheet_name} \ubd84\uc11d:\")\n    print(df)\n    print(f\"1\uc6d4 \ud569\uacc4: {total_jan}, 2\uc6d4 \ud569\uacc4: {total_feb}\")\n\n# 3. \uc694\uc57d \ubcf4\uace0\uc11c \uc0dd\uc131\nsummary_df = pd.DataFrame(summary_list)\n\n# 4. \uacb0\uacfc \uc800\uc7a5\nwith pd.ExcelWriter('sales_summary_report.xlsx') as writer:\n    # \uc694\uc57d \uc2dc\ud2b8\n    summary_df.to_excel(writer, sheet_name='\uc694\uc57d', index=False)\n\n    # \uc6d0\ubcf8 \ub370\uc774\ud130 \uc2dc\ud2b8\n    for sheet_name, df in all_sheets.items():\n        df.to_excel(writer, sheet_name=sheet_name, index=False)\n\nprint(\"\\n\uc694\uc57d \ubcf4\uace0\uc11c:\")\nprint(summary_df)\nprint(\"\\n\ubcf4\uace0\uc11c \uc0dd\uc131 \uc644\ub8cc: sales_summary_report.xlsx\")\n"})})]}),"\n",(0,t.jsx)(e.h3,{id:"\ubb38\uc81c-3-api-\ub370\uc774\ud130-\uc218\uc9d1-\ubc0f-\ubd84\uc11d",children:"\ubb38\uc81c 3: API \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \ubd84\uc11d"}),"\n",(0,t.jsx)(e.p,{children:"\uacf5\uac1c API\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uace0 \ubd84\uc11d\ud558\uc138\uc694."}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import pandas as pd\nimport requests\n\n# JSONPlaceholder API \uc0ac\uc6a9\ndef collect_and_analyze_posts():\n    \"\"\"\uac8c\uc2dc\ubb3c \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \ubd84\uc11d\"\"\"\n\n    # 1. API\uc5d0\uc11c \ub370\uc774\ud130 \uc218\uc9d1\n    print(\"API\uc5d0\uc11c \ub370\uc774\ud130 \uc218\uc9d1 \uc911...\")\n    response = requests.get('https://jsonplaceholder.typicode.com/posts')\n    posts = response.json()\n\n    # DataFrame \uc0dd\uc131\n    df = pd.DataFrame(posts)\n    print(f\"\uc218\uc9d1 \uc644\ub8cc: {len(df)}\uac1c \uac8c\uc2dc\ubb3c\")\n\n    # 2. \ub370\uc774\ud130 \ubd84\uc11d\n    print(\"\\n\ub370\uc774\ud130 \ubd84\uc11d:\")\n\n    # \uc0ac\uc6a9\uc790\ubcc4 \uac8c\uc2dc\ubb3c \uc218\n    user_post_count = df.groupby('userId').size().reset_index(name='\uac8c\uc2dc\ubb3c_\uc218')\n    print(\"\\n\uc0ac\uc6a9\uc790\ubcc4 \uac8c\uc2dc\ubb3c \uc218:\")\n    print(user_post_count)\n\n    # \uc81c\ubaa9 \uae38\uc774 \ubd84\uc11d\n    df['\uc81c\ubaa9_\uae38\uc774'] = df['title'].str.len()\n    df['\ubcf8\ubb38_\uae38\uc774'] = df['body'].str.len()\n\n    length_stats = df[['\uc81c\ubaa9_\uae38\uc774', '\ubcf8\ubb38_\uae38\uc774']].describe()\n    print(\"\\n\uae38\uc774 \ud1b5\uacc4:\")\n    print(length_stats)\n\n    # 3. \uc0ac\uc6a9\uc790\ubcc4 \uc0c1\uc138 \ubd84\uc11d\n    user_analysis = df.groupby('userId').agg({\n        'id': 'count',\n        '\uc81c\ubaa9_\uae38\uc774': ['mean', 'max', 'min'],\n        '\ubcf8\ubb38_\uae38\uc774': ['mean', 'max', 'min']\n    }).round(2)\n\n    user_analysis.columns = ['\uac8c\uc2dc\ubb3c_\uc218', '\ud3c9\uade0_\uc81c\ubaa9_\uae38\uc774', '\ucd5c\ub300_\uc81c\ubaa9_\uae38\uc774',\n                             '\ucd5c\uc18c_\uc81c\ubaa9_\uae38\uc774', '\ud3c9\uade0_\ubcf8\ubb38_\uae38\uc774', '\ucd5c\ub300_\ubcf8\ubb38_\uae38\uc774', '\ucd5c\uc18c_\ubcf8\ubb38_\uae38\uc774']\n\n    print(\"\\n\uc0ac\uc6a9\uc790\ubcc4 \uc0c1\uc138 \ubd84\uc11d:\")\n    print(user_analysis)\n\n    # 4. \uacb0\uacfc \uc800\uc7a5\n    with pd.ExcelWriter('posts_analysis.xlsx') as writer:\n        df.to_excel(writer, sheet_name='\uc6d0\ubcf8\ub370\uc774\ud130', index=False)\n        user_analysis.to_excel(writer, sheet_name='\uc0ac\uc6a9\uc790\ubcc4\ubd84\uc11d')\n        length_stats.to_excel(writer, sheet_name='\uae38\uc774\ud1b5\uacc4')\n\n    print(\"\\n\ubd84\uc11d \uc644\ub8cc! \uacb0\uacfc\uac00 'posts_analysis.xlsx'\uc5d0 \uc800\uc7a5\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\")\n\n    return df, user_analysis\n\n# \uc2e4\ud589\ndf, analysis = collect_and_analyze_posts()\n"})})]}),"\n",(0,t.jsx)(e.h2,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(e.p,{children:"\ub370\uc774\ud130\ub97c \uc131\uacf5\uc801\uc73c\ub85c \ub85c\ub529\ud588\ub2e4\uba74, \uc774\uc81c \ub370\uc774\ud130\ub97c \uc870\uc791\ud558\uace0 \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\uc57c \ud569\ub2c8\ub2e4."}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:"./data-manipulation",children:"\ub370\uc774\ud130 \uc870\uc791"}),"\uc5d0\uc11c \uacc4\uc18d \ud559\uc2b5\ud558\uc138\uc694!"]}),"\n",(0,t.jsx)(e.admonition,{title:"\ud575\uc2ec \uc815\ub9ac",type:"tip",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"read_csv()"}),", ",(0,t.jsx)(e.code,{children:"read_excel()"}),", ",(0,t.jsx)(e.code,{children:"read_json()"})," \ub4f1\uc73c\ub85c \ub2e4\uc591\ud55c \ud615\uc2dd \uc77d\uae30"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"to_csv()"}),", ",(0,t.jsx)(e.code,{children:"to_excel()"}),", ",(0,t.jsx)(e.code,{children:"to_json()"})," \ub4f1\uc73c\ub85c \ub370\uc774\ud130 \uc800\uc7a5"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"chunksize"}),"\ub85c \ub300\uc6a9\ub7c9 \ud30c\uc77c \ucc98\ub9ac"]}),"\n",(0,t.jsxs)(e.li,{children:["\uc778\ucf54\ub529 \ubb38\uc81c\ub294 ",(0,t.jsx)(e.code,{children:"utf-8-sig"})," \ub610\ub294 ",(0,t.jsx)(e.code,{children:"euc-kr"})," \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{children:["API \ub370\uc774\ud130\ub294 ",(0,t.jsx)(e.code,{children:"requests"})," + ",(0,t.jsx)(e.code,{children:"pd.DataFrame()"})," \uc870\ud569"]}),"\n",(0,t.jsxs)(e.li,{children:["SQL \ub370\uc774\ud130\ub294 ",(0,t.jsx)(e.code,{children:"pd.read_sql()"}),"\uacfc ",(0,t.jsx)(e.code,{children:"to_sql()"})," \ud65c\uc6a9"]}),"\n"]})})]})}function p(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>l,x:()=>r});var a=s(6540);const t={},d=a.createContext(t);function l(n){const e=a.useContext(d);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),a.createElement(d.Provider,{value:e},n.children)}}}]);