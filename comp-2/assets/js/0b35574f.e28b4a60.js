"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7367],{1966:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"prometheus/examples","title":"6. \uc2e4\uc804 \uc608\uc81c","description":"\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc2e4\uc81c \ubaa8\ub2c8\ud130\ub9c1 \uc608\uc81c\ub97c \ubc30\uc6cc\ubd05\ub2c8\ub2e4.","source":"@site/docs/prometheus/examples.md","sourceDirName":"prometheus","slug":"/prometheus/examples","permalink":"/tobias-docs/comp-2/docs/prometheus/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/prometheus/examples.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"prometheusSidebar","previous":{"title":"5. Alerting","permalink":"/tobias-docs/comp-2/docs/prometheus/alerting"},"next":{"title":"Prometheus \ubaa8\ub2c8\ud130\ub9c1 \uac00\uc774\ub4dc","permalink":"/tobias-docs/comp-2/docs/prometheus/intro"}}');var r=s(4848),a=s(8453);const i={sidebar_position:6},o="6. \uc2e4\uc804 \uc608\uc81c",l={},c=[{value:"6.1 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc644\uc804 \ubaa8\ub2c8\ud130\ub9c1",id:"61-fastapi-\uc560\ud50c\ub9ac\ucf00\uc774\uc158-\uc644\uc804-\ubaa8\ub2c8\ud130\ub9c1",level:2},{value:"\uae30\ubcf8 \uad6c\uc870",id:"\uae30\ubcf8-\uad6c\uc870",level:3},{value:"\uc2e4\ud589",id:"\uc2e4\ud589",level:3},{value:"6.2 PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub2c8\ud130\ub9c1",id:"62-postgresql-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ubaa8\ub2c8\ud130\ub9c1",level:2},{value:"6.3 Celery \uc6cc\ucee4 \ubaa8\ub2c8\ud130\ub9c1",id:"63-celery-\uc6cc\ucee4-\ubaa8\ub2c8\ud130\ub9c1",level:2},{value:"6.4 Redis \ubaa8\ub2c8\ud130\ub9c1",id:"64-redis-\ubaa8\ub2c8\ud130\ub9c1",level:2},{value:"6.5 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ubaa8\ub2c8\ud130\ub9c1",id:"65-\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4-\ubaa8\ub2c8\ud130\ub9c1",level:2},{value:"6.6 \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ucd94\uc801",id:"66-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ucd94\uc801",level:2},{value:"6.7 Docker Compose \uc804\uccb4 \uc2a4\ud0dd",id:"67-docker-compose-\uc804\uccb4-\uc2a4\ud0dd",level:2},{value:"6.8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"68-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:2},{value:"\uba54\ud2b8\ub9ad \uba85\uba85",id:"\uba54\ud2b8\ub9ad-\uba85\uba85",level:3},{value:"\ub808\uc774\ube14 \uce74\ub514\ub110\ub9ac\ud2f0",id:"\ub808\uc774\ube14-\uce74\ub514\ub110\ub9ac\ud2f0",level:3},{value:"\uba54\ud2b8\ub9ad \ud0c0\uc785 \uc120\ud0dd",id:"\uba54\ud2b8\ub9ad-\ud0c0\uc785-\uc120\ud0dd",level:3},{value:"6.9 \ud504\ub85c\ub355\uc158 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"69-\ud504\ub85c\ub355\uc158-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:2},{value:"\uc124\uc815",id:"\uc124\uc815",level:3},{value:"\ubcf4\uc548",id:"\ubcf4\uc548",level:3},{value:"\ubaa8\ub2c8\ud130\ub9c1",id:"\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"\uc131\ub2a5",id:"\uc131\ub2a5",level:3},{value:"6.10 \uc131\ub2a5 \ucd5c\uc801\ud654",id:"610-\uc131\ub2a5-\ucd5c\uc801\ud654",level:2},{value:"Recording Rules",id:"recording-rules",level:3},{value:"\uba54\ud2b8\ub9ad \ud544\ud130\ub9c1",id:"\uba54\ud2b8\ub9ad-\ud544\ud130\ub9c1",level:3},{value:"6.11 \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d",id:"611-\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",level:2},{value:"\ubbfc\uac10\ud55c \uc815\ubcf4 \uc81c\uc678",id:"\ubbfc\uac10\ud55c-\uc815\ubcf4-\uc81c\uc678",level:3},{value:"Basic Auth \uc124\uc815",id:"basic-auth-\uc124\uc815",level:3},{value:"6.12 \uc694\uc57d",id:"612-\uc694\uc57d",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"6-\uc2e4\uc804-\uc608\uc81c",children:"6. \uc2e4\uc804 \uc608\uc81c"})}),"\n",(0,r.jsx)(n.p,{children:"\ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc2e4\uc81c \ubaa8\ub2c8\ud130\ub9c1 \uc608\uc81c\ub97c \ubc30\uc6cc\ubd05\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"61-fastapi-\uc560\ud50c\ub9ac\ucf00\uc774\uc158-\uc644\uc804-\ubaa8\ub2c8\ud130\ub9c1",children:"6.1 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc644\uc804 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.p,{children:"\uc2e4\ubb34\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ud328\ud134\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\uad6c\uc870",children:"\uae30\ubcf8 \uad6c\uc870"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# app/main.py\nfrom fastapi import FastAPI, Request, Response\nfrom prometheus_client import Counter, Histogram, Gauge, make_asgi_app\nimport time\nimport psutil\n\napp = FastAPI(title=\"Monitored API\")\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nhttp_requests_total = Counter(\n    'http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status']\n)\n\nhttp_request_duration_seconds = Histogram(\n    'http_request_duration_seconds',\n    'HTTP request latency',\n    ['method', 'endpoint'],\n    buckets=[0.01, 0.05, 0.1, 0.5, 1.0, 2.5, 5.0, 10.0]\n)\n\nactive_requests = Gauge(\n    'active_requests',\n    'Active requests currently being processed'\n)\n\nsystem_cpu_usage = Gauge(\n    'system_cpu_usage_percent',\n    'CPU usage percentage'\n)\n\nsystem_memory_usage = Gauge(\n    'system_memory_usage_bytes',\n    'Memory usage in bytes'\n)\n\n# \ubbf8\ub4e4\uc6e8\uc5b4\n@app.middleware(\"http\")\nasync def prometheus_middleware(request: Request, call_next):\n    # \uc2dc\uc791 \uc2dc\uac04\n    start_time = time.time()\n\n    # \ud65c\uc131 \uc694\uccad \uc99d\uac00\n    active_requests.inc()\n\n    try:\n        # \uc694\uccad \ucc98\ub9ac\n        response = await call_next(request)\n\n        # \uba54\ud2b8\ub9ad \uae30\ub85d\n        duration = time.time() - start_time\n        http_request_duration_seconds.labels(\n            method=request.method,\n            endpoint=request.url.path\n        ).observe(duration)\n\n        http_requests_total.labels(\n            method=request.method,\n            endpoint=request.url.path,\n            status=response.status_code\n        ).inc()\n\n        return response\n\n    finally:\n        # \ud65c\uc131 \uc694\uccad \uac10\uc18c\n        active_requests.dec()\n\n# \uc2dc\uc2a4\ud15c \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8\n@app.on_event(\"startup\")\nasync def startup_event():\n    import asyncio\n\n    async def update_system_metrics():\n        while True:\n            system_cpu_usage.set(psutil.cpu_percent())\n            system_memory_usage.set(psutil.virtual_memory().used)\n            await asyncio.sleep(15)  # 15\ucd08\ub9c8\ub2e4 \uc5c5\ub370\uc774\ud2b8\n\n    asyncio.create_task(update_system_metrics())\n\n# \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n@app.get(\"/api/users\")\nasync def get_users():\n    # \uc2e4\uc81c \ub85c\uc9c1\n    return {\"users\": []}\n\n@app.post(\"/api/users\")\nasync def create_user():\n    # \uc2e4\uc81c \ub85c\uc9c1\n    return {\"id\": 1}\n\n# Prometheus \uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8\nmetrics_app = make_asgi_app()\napp.mount(\"/metrics\", metrics_app)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc2e4\ud589",children:"\uc2e4\ud589"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# \uc124\uce58\npip install fastapi uvicorn prometheus-client psutil\n\n# \uc2e4\ud589\nuvicorn app.main:app --reload\n"})}),"\n",(0,r.jsx)(n.h2,{id:"62-postgresql-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ubaa8\ub2c8\ud130\ub9c1",children:"6.2 PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.p,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc131\ub2a5\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# app/db_metrics.py\nfrom prometheus_client import Gauge, Histogram, Counter\nimport psycopg2\nfrom psycopg2 import pool\nimport time\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\ndb_connections_active = Gauge(\n    \'db_connections_active\',\n    \'Active database connections\'\n)\n\ndb_connections_idle = Gauge(\n    \'db_connections_idle\',\n    \'Idle database connections\'\n)\n\ndb_query_duration_seconds = Histogram(\n    \'db_query_duration_seconds\',\n    \'Database query duration\',\n    [\'query_type\', \'table\'],\n    buckets=[0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 5.0]\n)\n\ndb_errors_total = Counter(\n    \'db_errors_total\',\n    \'Total database errors\',\n    [\'error_type\']\n)\n\ndb_transactions_total = Counter(\n    \'db_transactions_total\',\n    \'Total database transactions\',\n    [\'status\']  # committed, rolled_back\n)\n\nclass MonitoredConnectionPool:\n    """\ubaa8\ub2c8\ud130\ub9c1\uc774 \ucd94\uac00\ub41c DB \ucee4\ub125\uc158 \ud480"""\n\n    def __init__(self, minconn=1, maxconn=10, **kwargs):\n        self.pool = psycopg2.pool.ThreadedConnectionPool(\n            minconn, maxconn, **kwargs\n        )\n\n    def get_connection(self):\n        """\ucee4\ub125\uc158 \ud68d\ub4dd (\uba54\ud2b8\ub9ad \ud3ec\ud568)"""\n        conn = self.pool.getconn()\n        self._update_connection_metrics()\n        return MonitoredConnection(conn, self)\n\n    def put_connection(self, conn):\n        """\ucee4\ub125\uc158 \ubc18\ud658"""\n        self.pool.putconn(conn)\n        self._update_connection_metrics()\n\n    def _update_connection_metrics(self):\n        """\ucee4\ub125\uc158 \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8"""\n        # \uc2e4\uc81c\ub85c\ub294 pg_stat_activity \ucffc\ub9ac \ud544\uc694\n        pass\n\nclass MonitoredConnection:\n    """\ubaa8\ub2c8\ud130\ub9c1\uc774 \ucd94\uac00\ub41c DB \ucee4\ub125\uc158"""\n\n    def __init__(self, conn, pool):\n        self.conn = conn\n        self.pool = pool\n\n    def execute(self, query, params=None, query_type="SELECT", table="unknown"):\n        """\ucffc\ub9ac \uc2e4\ud589 (\uba54\ud2b8\ub9ad \ud3ec\ud568)"""\n        start_time = time.time()\n        cursor = self.conn.cursor()\n\n        try:\n            cursor.execute(query, params)\n            duration = time.time() - start_time\n\n            # \uc131\uacf5 \uba54\ud2b8\ub9ad\n            db_query_duration_seconds.labels(\n                query_type=query_type,\n                table=table\n            ).observe(duration)\n\n            return cursor\n\n        except Exception as e:\n            # \uc5d0\ub7ec \uba54\ud2b8\ub9ad\n            db_errors_total.labels(\n                error_type=type(e).__name__\n            ).inc()\n            raise\n\n    def commit(self):\n        """\ud2b8\ub79c\uc7ad\uc158 \ucee4\ubc0b"""\n        try:\n            self.conn.commit()\n            db_transactions_total.labels(status="committed").inc()\n        except Exception as e:\n            db_errors_total.labels(error_type="commit_error").inc()\n            raise\n\n    def rollback(self):\n        """\ud2b8\ub79c\uc7ad\uc158 \ub864\ubc31"""\n        self.conn.rollback()\n        db_transactions_total.labels(status="rolled_back").inc()\n\n    def close(self):\n        """\ucee4\ub125\uc158 \ubc18\ud658"""\n        self.pool.put_connection(self.conn)\n\n# \uc0ac\uc6a9 \uc608\uc81c\ndef example_usage():\n    pool = MonitoredConnectionPool(\n        minconn=2,\n        maxconn=10,\n        host="localhost",\n        database="mydb",\n        user="user",\n        password="password"\n    )\n\n    conn = pool.get_connection()\n\n    try:\n        # SELECT \ucffc\ub9ac\n        cursor = conn.execute(\n            "SELECT * FROM users WHERE id = %s",\n            (1,),\n            query_type="SELECT",\n            table="users"\n        )\n\n        # INSERT \ucffc\ub9ac\n        conn.execute(\n            "INSERT INTO users (name, email) VALUES (%s, %s)",\n            ("John", "john@example.com"),\n            query_type="INSERT",\n            table="users"\n        )\n\n        conn.commit()\n\n    except Exception as e:\n        conn.rollback()\n        raise\n\n    finally:\n        conn.close()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"63-celery-\uc6cc\ucee4-\ubaa8\ub2c8\ud130\ub9c1",children:"6.3 Celery \uc6cc\ucee4 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.p,{children:"\ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# app/celery_app.py\nfrom celery import Celery, Task\nfrom prometheus_client import Counter, Histogram, Gauge\nimport time\n\napp = Celery('tasks', broker='redis://localhost:6379/0')\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\ncelery_tasks_total = Counter(\n    'celery_tasks_total',\n    'Total Celery tasks',\n    ['task_name', 'status']  # success, failure, retry\n)\n\ncelery_task_duration_seconds = Histogram(\n    'celery_task_duration_seconds',\n    'Celery task duration',\n    ['task_name'],\n    buckets=[0.1, 0.5, 1.0, 5.0, 10.0, 30.0, 60.0, 300.0]\n)\n\ncelery_active_tasks = Gauge(\n    'celery_active_tasks',\n    'Currently running tasks',\n    ['task_name']\n)\n\ncelery_queue_length = Gauge(\n    'celery_queue_length',\n    'Tasks waiting in queue',\n    ['queue_name']\n)\n\nclass MonitoredTask(Task):\n    \"\"\"\uba54\ud2b8\ub9ad\uc774 \ucd94\uac00\ub41c Celery Task\"\"\"\n\n    def __call__(self, *args, **kwargs):\n        task_name = self.name\n\n        # \ud65c\uc131 \ud0dc\uc2a4\ud06c \uc99d\uac00\n        celery_active_tasks.labels(task_name=task_name).inc()\n\n        start_time = time.time()\n\n        try:\n            # \ud0dc\uc2a4\ud06c \uc2e4\ud589\n            result = super().__call__(*args, **kwargs)\n\n            # \uc131\uacf5 \uba54\ud2b8\ub9ad\n            duration = time.time() - start_time\n            celery_task_duration_seconds.labels(\n                task_name=task_name\n            ).observe(duration)\n\n            celery_tasks_total.labels(\n                task_name=task_name,\n                status='success'\n            ).inc()\n\n            return result\n\n        except Exception as e:\n            # \uc2e4\ud328 \uba54\ud2b8\ub9ad\n            celery_tasks_total.labels(\n                task_name=task_name,\n                status='failure'\n            ).inc()\n            raise\n\n        finally:\n            # \ud65c\uc131 \ud0dc\uc2a4\ud06c \uac10\uc18c\n            celery_active_tasks.labels(task_name=task_name).dec()\n\n# \ud0dc\uc2a4\ud06c \uc815\uc758\n@app.task(base=MonitoredTask)\ndef send_email(email, subject, body):\n    \"\"\"\uc774\uba54\uc77c \ubc1c\uc1a1 \ud0dc\uc2a4\ud06c\"\"\"\n    time.sleep(2)  # \uc2dc\ubbac\ub808\uc774\uc158\n    return f\"Email sent to {email}\"\n\n@app.task(base=MonitoredTask)\ndef process_image(image_path):\n    \"\"\"\uc774\ubbf8\uc9c0 \ucc98\ub9ac \ud0dc\uc2a4\ud06c\"\"\"\n    time.sleep(5)  # \uc2dc\ubbac\ub808\uc774\uc158\n    return f\"Processed {image_path}\"\n\n# \ud050 \uae38\uc774 \ubaa8\ub2c8\ud130\ub9c1 (\ubcc4\ub3c4 \uc2a4\ud06c\ub9bd\ud2b8)\ndef monitor_queue_lengths():\n    \"\"\"\ud050 \uae38\uc774\ub97c \uc8fc\uae30\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\"\"\"\n    from celery import current_app\n    import redis\n\n    r = redis.Redis()\n\n    while True:\n        # Redis\uc5d0\uc11c \ud050 \uae38\uc774 \ud655\uc778\n        for queue in ['celery', 'priority', 'email']:\n            length = r.llen(queue)\n            celery_queue_length.labels(queue_name=queue).set(length)\n\n        time.sleep(10)  # 10\ucd08\ub9c8\ub2e4 \uc5c5\ub370\uc774\ud2b8\n"})}),"\n",(0,r.jsx)(n.h2,{id:"64-redis-\ubaa8\ub2c8\ud130\ub9c1",children:"6.4 Redis \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.p,{children:"\uce90\uc2dc \uc131\ub2a5\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# app/redis_metrics.py\nfrom prometheus_client import Counter, Histogram, Gauge\nimport redis\nimport time\nfrom functools import wraps\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nredis_commands_total = Counter(\n    'redis_commands_total',\n    'Total Redis commands',\n    ['command', 'status']  # hit, miss, success, error\n)\n\nredis_command_duration_seconds = Histogram(\n    'redis_command_duration_seconds',\n    'Redis command duration',\n    ['command'],\n    buckets=[0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1.0]\n)\n\nredis_connections_active = Gauge(\n    'redis_connections_active',\n    'Active Redis connections'\n)\n\nredis_memory_used_bytes = Gauge(\n    'redis_memory_used_bytes',\n    'Redis memory usage'\n)\n\nredis_hit_rate = Gauge(\n    'redis_hit_rate',\n    'Cache hit rate'\n)\n\nclass MonitoredRedisClient:\n    \"\"\"\uba54\ud2b8\ub9ad\uc774 \ucd94\uac00\ub41c Redis \ud074\ub77c\uc774\uc5b8\ud2b8\"\"\"\n\n    def __init__(self, **kwargs):\n        self.client = redis.Redis(**kwargs)\n        self.hits = 0\n        self.misses = 0\n\n    def _track_command(self, command_name):\n        \"\"\"\uba85\ub839 \uc2e4\ud589 \ub370\ucf54\ub808\uc774\ud130\"\"\"\n        def decorator(func):\n            @wraps(func)\n            def wrapper(*args, **kwargs):\n                start_time = time.time()\n\n                try:\n                    result = func(*args, **kwargs)\n                    duration = time.time() - start_time\n\n                    # \uc131\uacf5 \uba54\ud2b8\ub9ad\n                    redis_command_duration_seconds.labels(\n                        command=command_name\n                    ).observe(duration)\n\n                    redis_commands_total.labels(\n                        command=command_name,\n                        status='success'\n                    ).inc()\n\n                    # GET \uba85\ub839\uc758 \uacbd\uc6b0 hit/miss \ucd94\uc801\n                    if command_name == 'GET':\n                        if result is not None:\n                            self.hits += 1\n                            redis_commands_total.labels(\n                                command='GET',\n                                status='hit'\n                            ).inc()\n                        else:\n                            self.misses += 1\n                            redis_commands_total.labels(\n                                command='GET',\n                                status='miss'\n                            ).inc()\n\n                        # Hit rate \uacc4\uc0b0\n                        total = self.hits + self.misses\n                        if total > 0:\n                            redis_hit_rate.set(self.hits / total)\n\n                    return result\n\n                except Exception as e:\n                    redis_commands_total.labels(\n                        command=command_name,\n                        status='error'\n                    ).inc()\n                    raise\n\n            return wrapper\n        return decorator\n\n    def get(self, key):\n        @self._track_command('GET')\n        def _get():\n            return self.client.get(key)\n        return _get()\n\n    def set(self, key, value, ex=None):\n        @self._track_command('SET')\n        def _set():\n            return self.client.set(key, value, ex=ex)\n        return _set()\n\n    def delete(self, *keys):\n        @self._track_command('DEL')\n        def _del():\n            return self.client.delete(*keys)\n        return _del()\n\n    def update_info_metrics(self):\n        \"\"\"Redis INFO \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8\"\"\"\n        info = self.client.info()\n\n        redis_connections_active.set(\n            info.get('connected_clients', 0)\n        )\n\n        redis_memory_used_bytes.set(\n            info.get('used_memory', 0)\n        )\n\n# \uc0ac\uc6a9 \uc608\uc81c\ncache = MonitoredRedisClient(host='localhost', port=6379, db=0)\n\n# \uc8fc\uae30\uc801\uc73c\ub85c info \uba54\ud2b8\ub9ad \uc5c5\ub370\uc774\ud2b8\nimport threading\n\ndef update_redis_info():\n    while True:\n        cache.update_info_metrics()\n        time.sleep(30)  # 30\ucd08\ub9c8\ub2e4\n\nthreading.Thread(target=update_redis_info, daemon=True).start()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"65-\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4-\ubaa8\ub2c8\ud130\ub9c1",children:"6.5 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.p,{children:"\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# app/service_metrics.py\nfrom prometheus_client import Counter, Histogram\nimport httpx\nimport time\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\nservice_requests_total = Counter(\n    'service_requests_total',\n    'Total service-to-service requests',\n    ['source_service', 'target_service', 'status']\n)\n\nservice_request_duration_seconds = Histogram(\n    'service_request_duration_seconds',\n    'Service request duration',\n    ['source_service', 'target_service', 'endpoint'],\n    buckets=[0.01, 0.05, 0.1, 0.5, 1.0, 2.5, 5.0]\n)\n\nclass MonitoredHTTPClient:\n    \"\"\"\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0 \ubaa8\ub2c8\ud130\ub9c1 \ud074\ub77c\uc774\uc5b8\ud2b8\"\"\"\n\n    def __init__(self, service_name: str):\n        self.service_name = service_name\n        self.client = httpx.AsyncClient()\n\n    async def request(self, method: str, url: str, **kwargs):\n        \"\"\"HTTP \uc694\uccad with \uba54\ud2b8\ub9ad\"\"\"\n        # URL\uc5d0\uc11c \uc11c\ube44\uc2a4 \uc774\ub984 \ucd94\ucd9c\n        target_service = url.split('/')[2].split(':')[0]\n        endpoint = '/' + '/'.join(url.split('/')[3:])\n\n        start_time = time.time()\n\n        try:\n            response = await self.client.request(method, url, **kwargs)\n            duration = time.time() - start_time\n\n            # \uba54\ud2b8\ub9ad \uae30\ub85d\n            service_request_duration_seconds.labels(\n                source_service=self.service_name,\n                target_service=target_service,\n                endpoint=endpoint\n            ).observe(duration)\n\n            service_requests_total.labels(\n                source_service=self.service_name,\n                target_service=target_service,\n                status=response.status_code\n            ).inc()\n\n            return response\n\n        except Exception as e:\n            service_requests_total.labels(\n                source_service=self.service_name,\n                target_service=target_service,\n                status='error'\n            ).inc()\n            raise\n\n# \uc0ac\uc6a9 \uc608\uc81c\nclient = MonitoredHTTPClient(service_name='user-service')\n\nasync def get_user_orders(user_id: int):\n    \"\"\"\ub2e4\ub978 \uc11c\ube44\uc2a4 \ud638\ucd9c\"\"\"\n    response = await client.request(\n        'GET',\n        f'http://order-service:8000/orders?user_id={user_id}'\n    )\n    return response.json()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"66-\ube44\uc988\ub2c8\uc2a4-\uba54\ud2b8\ub9ad-\ucd94\uc801",children:"6.6 \ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ucd94\uc801"}),"\n",(0,r.jsx)(n.p,{children:"\ube44\uc988\ub2c8\uc2a4 KPI\ub97c \ubaa8\ub2c8\ud130\ub9c1\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# app/business_metrics.py\nfrom prometheus_client import Counter, Gauge, Histogram\nfrom datetime import datetime\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\norders_total = Counter(\n    'orders_total',\n    'Total orders',\n    ['status', 'payment_method']\n)\n\nrevenue_total = Counter(\n    'revenue_total_cents',\n    'Total revenue in cents',\n    ['currency']\n)\n\norder_value = Histogram(\n    'order_value_cents',\n    'Order value distribution',\n    buckets=[1000, 5000, 10000, 50000, 100000, 500000]\n)\n\nactive_users = Gauge(\n    'active_users_total',\n    'Currently active users'\n)\n\nsignup_total = Counter(\n    'signup_total',\n    'Total user signups',\n    ['source']  # web, mobile, api\n)\n\ncart_abandonment_total = Counter(\n    'cart_abandonment_total',\n    'Cart abandonment events'\n)\n\n# \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc5d0\uc11c \uc0ac\uc6a9\nclass OrderService:\n    \"\"\"\uc8fc\ubb38 \uc11c\ube44\uc2a4\"\"\"\n\n    def create_order(self, user_id, items, payment_method):\n        \"\"\"\uc8fc\ubb38 \uc0dd\uc131\"\"\"\n        # \uc8fc\ubb38 \ub85c\uc9c1\n        order = {\n            'id': 123,\n            'user_id': user_id,\n            'items': items,\n            'total': sum(item['price'] for item in items),\n            'payment_method': payment_method,\n            'status': 'pending'\n        }\n\n        # \uba54\ud2b8\ub9ad \uae30\ub85d\n        orders_total.labels(\n            status='created',\n            payment_method=payment_method\n        ).inc()\n\n        order_value.observe(order['total'])\n\n        return order\n\n    def complete_order(self, order_id, total_cents, currency='KRW'):\n        \"\"\"\uc8fc\ubb38 \uc644\ub8cc\"\"\"\n        # \uc8fc\ubb38 \uc644\ub8cc \ub85c\uc9c1\n\n        # \uba54\ud2b8\ub9ad \uae30\ub85d\n        orders_total.labels(\n            status='completed',\n            payment_method='card'\n        ).inc()\n\n        revenue_total.labels(currency=currency).inc(total_cents)\n\n    def cancel_order(self, order_id, payment_method):\n        \"\"\"\uc8fc\ubb38 \ucde8\uc18c\"\"\"\n        # \ucde8\uc18c \ub85c\uc9c1\n\n        orders_total.labels(\n            status='cancelled',\n            payment_method=payment_method\n        ).inc()\n\nclass UserService:\n    \"\"\"\uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4\"\"\"\n\n    def signup(self, email, source='web'):\n        \"\"\"\ud68c\uc6d0\uac00\uc785\"\"\"\n        # \uac00\uc785 \ub85c\uc9c1\n\n        signup_total.labels(source=source).inc()\n\n    def track_active_users(self, count):\n        \"\"\"\ud65c\uc131 \uc0ac\uc6a9\uc790 \uc218 \uc5c5\ub370\uc774\ud2b8\"\"\"\n        active_users.set(count)\n\nclass CartService:\n    \"\"\"\uc7a5\ubc14\uad6c\ub2c8 \uc11c\ube44\uc2a4\"\"\"\n\n    def abandon_cart(self, cart_id):\n        \"\"\"\uc7a5\ubc14\uad6c\ub2c8 \uc774\ud0c8\"\"\"\n        cart_abandonment_total.inc()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"67-docker-compose-\uc804\uccb4-\uc2a4\ud0dd",children:"6.7 Docker Compose \uc804\uccb4 \uc2a4\ud0dd"}),"\n",(0,r.jsx)(n.p,{children:"\ud504\ub85c\ub355\uc158 ready \uc804\uccb4 \uc2a4\ud0dd\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  # Python \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n  app:\n    build: ./app\n    ports:\n      - "8000:8000"\n    environment:\n      - DATABASE_URL=postgresql://user:password@db:5432/mydb\n      - REDIS_URL=redis://redis:6379/0\n    depends_on:\n      - db\n      - redis\n    labels:\n      - "prometheus.scrape=true"\n      - "prometheus.port=8000"\n      - "prometheus.path=/metrics"\n\n  # PostgreSQL\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=mydb\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  # PostgreSQL Exporter\n  postgres-exporter:\n    image: prometheuscommunity/postgres-exporter\n    environment:\n      - DATA_SOURCE_NAME=postgresql://user:password@db:5432/mydb?sslmode=disable\n    ports:\n      - "9187:9187"\n\n  # Redis\n  redis:\n    image: redis:7-alpine\n    ports:\n      - "6379:6379"\n\n  # Redis Exporter\n  redis-exporter:\n    image: oliver006/redis_exporter\n    environment:\n      - REDIS_ADDR=redis:6379\n    ports:\n      - "9121:9121"\n\n  # Prometheus\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - "9090:9090"\n    volumes:\n      - ./prometheus:/etc/prometheus\n      - prometheus_data:/prometheus\n    command:\n      - \'--config.file=/etc/prometheus/prometheus.yml\'\n      - \'--storage.tsdb.path=/prometheus\'\n      - \'--storage.tsdb.retention.time=30d\'\n      - \'--web.enable-lifecycle\'\n\n  # Grafana\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - "3000:3000"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n      - GF_USERS_ALLOW_SIGN_UP=false\n    volumes:\n      - ./grafana/provisioning:/etc/grafana/provisioning\n      - grafana_data:/var/lib/grafana\n    depends_on:\n      - prometheus\n\n  # Alertmanager\n  alertmanager:\n    image: prom/alertmanager:latest\n    ports:\n      - "9093:9093"\n    volumes:\n      - ./alertmanager:/etc/alertmanager\n    command:\n      - \'--config.file=/etc/alertmanager/config.yml\'\n\n  # Node Exporter (\uc2dc\uc2a4\ud15c \uba54\ud2b8\ub9ad)\n  node-exporter:\n    image: prom/node-exporter:latest\n    ports:\n      - "9100:9100"\n    command:\n      - \'--path.procfs=/host/proc\'\n      - \'--path.sysfs=/host/sys\'\n      - \'--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)\'\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n\nvolumes:\n  postgres_data:\n  prometheus_data:\n  grafana_data:\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    cluster: 'production'\n    environment: 'prod'\n\n# Alert rules\nrule_files:\n  - 'alerts/*.yml'\n\n# Scrape configurations\nscrape_configs:\n  # Prometheus \uc790\uccb4\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  # Python \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n  - job_name: 'app'\n    static_configs:\n      - targets: ['app:8000']\n    metrics_path: '/metrics'\n\n  # PostgreSQL\n  - job_name: 'postgres'\n    static_configs:\n      - targets: ['postgres-exporter:9187']\n\n  # Redis\n  - job_name: 'redis'\n    static_configs:\n      - targets: ['redis-exporter:9121']\n\n  # Node Exporter\n  - job_name: 'node'\n    static_configs:\n      - targets: ['node-exporter:9100']\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets: ['alertmanager:9093']\n"})}),"\n",(0,r.jsx)(n.h2,{id:"68-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"6.8 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(n.h3,{id:"\uba54\ud2b8\ub9ad-\uba85\uba85",children:"\uba54\ud2b8\ub9ad \uba85\uba85"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u2705 \uc88b\uc740 \uc608\nhttp_requests_total  # \uba85\uc0ac_\ub2e8\uc704\nrequest_duration_seconds\nmemory_usage_bytes\n\n# \u274c \ub098\uc05c \uc608\nhttpRequests  # \uce74\uba5c\ucf00\uc774\uc2a4\nrequest_time  # \ub2e8\uc704 \uc5c6\uc74c\ngetUsers  # \ub3d9\uc0ac\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ub808\uc774\ube14-\uce74\ub514\ub110\ub9ac\ud2f0",children:"\ub808\uc774\ube14 \uce74\ub514\ub110\ub9ac\ud2f0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \u2705 \uc88b\uc740 \uc608 (\ub0ae\uc740 \uce74\ub514\ub110\ub9ac\ud2f0)\nhttp_requests_total{method="GET", endpoint="/api/users", status="200"}\n\n# \u274c \ub098\uc05c \uc608 (\ub192\uc740 \uce74\ub514\ub110\ub9ac\ud2f0)\nhttp_requests_total{user_id="12345", session_id="abc123"}  # \ubb34\ud55c\ud788 \uc99d\uac00\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uba54\ud2b8\ub9ad-\ud0c0\uc785-\uc120\ud0dd",children:"\uba54\ud2b8\ub9ad \ud0c0\uc785 \uc120\ud0dd"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Counter: \uc99d\uac00\ub9cc\nrequests_total = Counter('requests_total', 'Total requests')\n\n# Gauge: \uc99d\uac00/\uac10\uc18c\ntemperature = Gauge('temperature_celsius', 'Temperature')\n\n# Histogram: \ubd84\ud3ec\nresponse_time = Histogram('response_seconds', 'Response time')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"69-\ud504\ub85c\ub355\uc158-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"6.9 \ud504\ub85c\ub355\uc158 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"\uc124\uc815",children:"\uc124\uc815"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Prometheus retention \uc124\uc815 (\uae30\ubcf8 15\uc77c, \uad8c\uc7a5 30\uc77c)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Scrape interval \ucd5c\uc801\ud654 (\uae30\ubcf8 15\ucd08)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Alert rules \uad6c\uc131"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Alertmanager \uc124\uc815"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Grafana \ub300\uc2dc\ubcf4\ub4dc \uc900\ube44"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ubcf4\uc548",children:"\ubcf4\uc548"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Prometheus \uc778\uc99d \uc124\uc815"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Grafana \ube44\ubc00\ubc88\ud638 \ubcc0\uacbd"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uba54\ud2b8\ub9ad \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc811\uadfc \uc81c\ud55c"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","TLS/HTTPS \ud65c\uc131\ud654"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ubaa8\ub2c8\ud130\ub9c1",children:"\ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ud575\uc2ec \uba54\ud2b8\ub9ad \uc815\uc758 (RED/USE)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ube44\uc988\ub2c8\uc2a4 \uba54\ud2b8\ub9ad \ucd94\uac00"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc54c\ub9bc \uc784\uacc4\uac12 \uc124\uc815"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ub300\uc2dc\ubcf4\ub4dc \uad6c\uc131"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\uc131\ub2a5",children:"\uc131\ub2a5"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ub808\uc774\ube14 \uce74\ub514\ub110\ub9ac\ud2f0 \uccb4\ud06c"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\ubd88\ud544\uc694\ud55c \uba54\ud2b8\ub9ad \uc81c\uac70"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Recording rules \ud65c\uc6a9"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\uc2a4\ud1a0\ub9ac\uc9c0 \ucd5c\uc801\ud654"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"610-\uc131\ub2a5-\ucd5c\uc801\ud654",children:"6.10 \uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(n.h3,{id:"recording-rules",children:"Recording Rules"}),"\n",(0,r.jsx)(n.p,{children:"\uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 \ubcf5\uc7a1\ud55c \ucffc\ub9ac\ub97c \ubbf8\ub9ac \uacc4\uc0b0\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# prometheus/rules/recording.yml\ngroups:\n  - name: api_performance\n    interval: 30s\n    rules:\n      # API \uc694\uccad\ub960 (\ucd08\ub2f9)\n      - record: job:api_requests:rate5m\n        expr: rate(http_requests_total[5m])\n\n      # \uc5d0\ub7ec\uc728\n      - record: job:api_error_rate:rate5m\n        expr: |\n          sum(rate(http_requests_total{status=~"5.."}[5m]))\n          /\n          sum(rate(http_requests_total[5m]))\n\n      # 99th percentile \ub808\uc774\ud134\uc2dc\n      - record: job:api_latency:p99\n        expr: |\n          histogram_quantile(0.99,\n            rate(http_request_duration_seconds_bucket[5m])\n          )\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uba54\ud2b8\ub9ad-\ud544\ud130\ub9c1",children:"\uba54\ud2b8\ub9ad \ud544\ud130\ub9c1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# \ubd88\ud544\uc694\ud55c \uba54\ud2b8\ub9ad \uc81c\uc678\nmetric_relabel_configs:\n  - source_labels: [__name__]\n    regex: 'go_.*'\n    action: drop\n"})}),"\n",(0,r.jsx)(n.h2,{id:"611-\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",children:"6.11 \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d"}),"\n",(0,r.jsx)(n.h3,{id:"\ubbfc\uac10\ud55c-\uc815\ubcf4-\uc81c\uc678",children:"\ubbfc\uac10\ud55c \uc815\ubcf4 \uc81c\uc678"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u274c \ub098\uc05c \uc608\nuser_login = Counter(\n    'user_login_total',\n    'User logins',\n    ['username', 'password']  # \ube44\ubc00\ubc88\ud638 \ub178\ucd9c!\n)\n\n# \u2705 \uc88b\uc740 \uc608\nuser_login = Counter(\n    'user_login_total',\n    'User logins',\n    ['method']  # \ub85c\uadf8\uc778 \ubc29\ubc95\ub9cc\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"basic-auth-\uc124\uc815",children:"Basic Auth \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# prometheus.yml\nbasic_auth:\n  username: 'admin'\n  password: 'secure_password'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"612-\uc694\uc57d",children:"6.12 \uc694\uc57d"}),"\n",(0,r.jsx)(n.admonition,{title:"\ud575\uc2ec \ud3ec\uc778\ud2b8",type:"tip",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RED \uba54\ud2b8\ub9ad"}),": Request rate, Error rate, Duration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc801\uc808\ud55c \ub808\uc774\ube14"}),": \uce74\ub514\ub110\ub9ac\ud2f0 \ub0ae\uac8c \uc720\uc9c0"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud788\uc2a4\ud1a0\uadf8\ub7a8 \ubc84\ud0b7"}),": \uc801\uc808\ud55c \ubc94\uc704 \uc124\uc815"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc54c\ub9bc \uc124\uc815"}),": \uc99d\uc0c1 \uae30\ubc18 \uc54c\ub9bc"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ub300\uc2dc\ubcf4\ub4dc"}),": \uc2a4\ud1a0\ub9ac\ud154\ub9c1 \uad6c\uc870"]}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{title:"\ub2e4\uc74c \ub2e8\uacc4",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Prometheus \uacf5\uc2dd \ubb38\uc11c \uc77d\uae30"}),"\n",(0,r.jsx)(n.li,{children:"Grafana \ub300\uc2dc\ubcf4\ub4dc \uacf5\uc720"}),"\n",(0,r.jsx)(n.li,{children:"PromQL \uc5f0\uc2b5"}),"\n",(0,r.jsx)(n.li,{children:"\ucee4\ubba4\ub2c8\ud2f0 \ucc38\uc5ec"}),"\n"]})}),"\n",(0,r.jsx)(n.p,{children:"\ucd95\ud558\ud569\ub2c8\ub2e4! Prometheus \ubaa8\ub2c8\ud130\ub9c1\uc744 \ub9c8\uc2a4\ud130\ud588\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.p,{children:"\uc774\uc81c \uc5ec\ub7ec\ubd84\uc758 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc801\uc6a9\ud574\ubcf4\uc138\uc694!"})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);