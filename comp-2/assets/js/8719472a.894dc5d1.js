"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7210],{7159:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"python/practical/best-practices","title":"6. \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4","description":"Python \uac1c\ubc1c\uc5d0\uc11c \uc804\ubb38\uc131\uc744 \ub192\uc774\uae30 \uc704\ud55c \uc885\ud569\uc801\uc778 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4 \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4. \ucf54\ub4dc \ud488\uc9c8, \uc720\uc9c0\ubcf4\uc218\uc131, \uadf8\ub9ac\uace0 \ud300 \ud611\uc5c5\uc744 \uc704\ud55c \uc2e4\uc804 \uac00\uc774\ub4dc\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.","source":"@site/docs/python/practical/best-practices.md","sourceDirName":"python/practical","slug":"/python/practical/best-practices","permalink":"/tobias-docs/comp-2/docs/python/practical/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/practical/best-practices.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"pythonSidebar","previous":{"title":"5. \uc790\ub3d9\ud654","permalink":"/tobias-docs/comp-2/docs/python/practical/automation"}}');var r=s(4848),a=s(8453);const i={sidebar_position:6},l="6. \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",o={},c=[{value:"6.1 PEP 8 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc",id:"61-pep-8-\uc2a4\ud0c0\uc77c-\uac00\uc774\ub4dc",level:2},{value:"\ucf54\ub4dc \ub808\uc774\uc544\uc6c3",id:"\ucf54\ub4dc-\ub808\uc774\uc544\uc6c3",level:3},{value:"\ub77c\uc778 \uae38\uc774\uc640 \uc904\ubc14\uafc8",id:"\ub77c\uc778-\uae38\uc774\uc640-\uc904\ubc14\uafc8",level:3},{value:"\uc784\ud3ec\ud2b8 \uc21c\uc11c",id:"\uc784\ud3ec\ud2b8-\uc21c\uc11c",level:3},{value:"\uacf5\ubc31 \uc0ac\uc6a9",id:"\uacf5\ubc31-\uc0ac\uc6a9",level:3},{value:"6.2 \ucf54\ub4dc \uad6c\uc870\ud654",id:"62-\ucf54\ub4dc-\uad6c\uc870\ud654",level:2},{value:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:3},{value:"\ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0 \uad6c\uc131",id:"\ubaa8\ub4c8\uacfc-\ud328\ud0a4\uc9c0-\uad6c\uc131",level:3},{value:"6.3 \uba85\uba85 \uaddc\uce59",id:"63-\uba85\uba85-\uaddc\uce59",level:2},{value:"Python \uba85\uba85 \uaddc\uce59 \uc694\uc57d",id:"python-\uba85\uba85-\uaddc\uce59-\uc694\uc57d",level:3},{value:"\uc758\ubbf8 \uc788\ub294 \uc774\ub984 \uc0ac\uc6a9",id:"\uc758\ubbf8-\uc788\ub294-\uc774\ub984-\uc0ac\uc6a9",level:3},{value:"6.4 \ubb38\uc11c\ud654",id:"64-\ubb38\uc11c\ud654",level:2},{value:"Docstring \uc791\uc131",id:"docstring-\uc791\uc131",level:3},{value:"\uc8fc\uc11d \uc791\uc131 \uac00\uc774\ub4dc",id:"\uc8fc\uc11d-\uc791\uc131-\uac00\uc774\ub4dc",level:3},{value:"Type Hints \ud65c\uc6a9",id:"type-hints-\ud65c\uc6a9",level:3},{value:"6.5 \uac00\uc0c1 \ud658\uacbd \uad00\ub9ac",id:"65-\uac00\uc0c1-\ud658\uacbd-\uad00\ub9ac",level:2},{value:"venv \uc0ac\uc6a9",id:"venv-\uc0ac\uc6a9",level:3},{value:"virtualenv \uc0ac\uc6a9",id:"virtualenv-\uc0ac\uc6a9",level:3},{value:"\uac00\uc0c1 \ud658\uacbd \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"\uac00\uc0c1-\ud658\uacbd-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:3},{value:"6.6 \uc758\uc874\uc131 \uad00\ub9ac",id:"66-\uc758\uc874\uc131-\uad00\ub9ac",level:2},{value:"requirements.txt",id:"requirementstxt",level:3},{value:"Poetry \uc0ac\uc6a9",id:"poetry-\uc0ac\uc6a9",level:3},{value:"Pipenv \uc0ac\uc6a9",id:"pipenv-\uc0ac\uc6a9",level:3},{value:"6.7 Git \uc6cc\ud06c\ud50c\ub85c\uc6b0",id:"67-git-\uc6cc\ud06c\ud50c\ub85c\uc6b0",level:2},{value:".gitignore \uc124\uc815",id:"gitignore-\uc124\uc815",level:3},{value:"\ucee4\ubc0b \uba54\uc2dc\uc9c0 \uc791\uc131",id:"\ucee4\ubc0b-\uba54\uc2dc\uc9c0-\uc791\uc131",level:3},{value:"\ucee4\ubc0b \uba54\uc2dc\uc9c0 \ucee8\ubca4\uc158",id:"\ucee4\ubc0b-\uba54\uc2dc\uc9c0-\ucee8\ubca4\uc158",level:3},{value:"\ube0c\ub79c\uce58 \uc804\ub7b5",id:"\ube0c\ub79c\uce58-\uc804\ub7b5",level:3},{value:"6.8 \ucf54\ub4dc \ub9ac\ubdf0 \ud504\ub799\ud2f0\uc2a4",id:"68-\ucf54\ub4dc-\ub9ac\ubdf0-\ud504\ub799\ud2f0\uc2a4",level:2},{value:"\ucf54\ub4dc \ub9ac\ubdf0 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ucf54\ub4dc-\ub9ac\ubdf0-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"Pull Request \ud15c\ud50c\ub9bf",id:"pull-request-\ud15c\ud50c\ub9bf",level:3},{value:"6.9 \uc5d0\ub7ec \ucc98\ub9ac \ud328\ud134",id:"69-\uc5d0\ub7ec-\ucc98\ub9ac-\ud328\ud134",level:2},{value:"\uc608\uc678 \ucc98\ub9ac \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"\uc608\uc678-\ucc98\ub9ac-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:3},{value:"\ucee4\uc2a4\ud140 \uc608\uc678 \uc815\uc758",id:"\ucee4\uc2a4\ud140-\uc608\uc678-\uc815\uc758",level:3},{value:"Context Manager \ud65c\uc6a9",id:"context-manager-\ud65c\uc6a9",level:3},{value:"6.10 \ub85c\uae45 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4",id:"610-\ub85c\uae45-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",level:2},{value:"\ub85c\uae45 \uc124\uc815",id:"\ub85c\uae45-\uc124\uc815",level:3},{value:"\ub85c\uae45 \ud65c\uc6a9 \uc608\uc81c",id:"\ub85c\uae45-\ud65c\uc6a9-\uc608\uc81c",level:3},{value:"\uad6c\uc870\ud654\ub41c \ub85c\uae45",id:"\uad6c\uc870\ud654\ub41c-\ub85c\uae45",level:3},{value:"6.11 \uc124\uc815 \uad00\ub9ac",id:"611-\uc124\uc815-\uad00\ub9ac",level:2},{value:"\ud658\uacbd \ubcc0\uc218 \ud65c\uc6a9",id:"\ud658\uacbd-\ubcc0\uc218-\ud65c\uc6a9",level:3},{value:"\uc124\uc815 \ud30c\uc77c \ud65c\uc6a9",id:"\uc124\uc815-\ud30c\uc77c-\ud65c\uc6a9",level:3},{value:"6.12 \ubcf4\uc548",id:"612-\ubcf4\uc548",level:2},{value:"\ube44\ubc00 \uc815\ubcf4 \uad00\ub9ac",id:"\ube44\ubc00-\uc815\ubcf4-\uad00\ub9ac",level:3},{value:"\uc785\ub825 \uac80\uc99d",id:"\uc785\ub825-\uac80\uc99d",level:3},{value:"\ube44\ubc00\ubc88\ud638 \uad00\ub9ac",id:"\ube44\ubc00\ubc88\ud638-\uad00\ub9ac",level:3},{value:"6.13 \ud14c\uc2a4\ud305 \uc804\ub7b5",id:"613-\ud14c\uc2a4\ud305-\uc804\ub7b5",level:2},{value:"unittest \uae30\ubcf8",id:"unittest-\uae30\ubcf8",level:3},{value:"pytest \ud65c\uc6a9",id:"pytest-\ud65c\uc6a9",level:3},{value:"\ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0",id:"\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",level:3},{value:"6.14 \uc131\ub2a5 \uace0\ub824\uc0ac\ud56d",id:"614-\uc131\ub2a5-\uace0\ub824\uc0ac\ud56d",level:2},{value:"\ud504\ub85c\ud30c\uc77c\ub9c1",id:"\ud504\ub85c\ud30c\uc77c\ub9c1",level:3},{value:"\uc131\ub2a5 \ucd5c\uc801\ud654 \uae30\ubc95",id:"\uc131\ub2a5-\ucd5c\uc801\ud654-\uae30\ubc95",level:3},{value:"\uce90\uc2f1",id:"\uce90\uc2f1",level:3},{value:"6.15 SOLID \uc6d0\uce59",id:"615-solid-\uc6d0\uce59",level:2},{value:"Single Responsibility Principle (\ub2e8\uc77c \ucc45\uc784 \uc6d0\uce59)",id:"single-responsibility-principle-\ub2e8\uc77c-\ucc45\uc784-\uc6d0\uce59",level:3},{value:"Open/Closed Principle (\uac1c\ubc29/\ud3d0\uc1c4 \uc6d0\uce59)",id:"openclosed-principle-\uac1c\ubc29\ud3d0\uc1c4-\uc6d0\uce59",level:3},{value:"Liskov Substitution Principle (\ub9ac\uc2a4\ucf54\ud504 \uce58\ud658 \uc6d0\uce59)",id:"liskov-substitution-principle-\ub9ac\uc2a4\ucf54\ud504-\uce58\ud658-\uc6d0\uce59",level:3},{value:"Interface Segregation Principle (\uc778\ud130\ud398\uc774\uc2a4 \ubd84\ub9ac \uc6d0\uce59)",id:"interface-segregation-principle-\uc778\ud130\ud398\uc774\uc2a4-\ubd84\ub9ac-\uc6d0\uce59",level:3},{value:"Dependency Inversion Principle (\uc758\uc874\uc131 \uc5ed\uc804 \uc6d0\uce59)",id:"dependency-inversion-principle-\uc758\uc874\uc131-\uc5ed\uc804-\uc6d0\uce59",level:3},{value:"6.16 \ub514\uc790\uc778 \ud328\ud134",id:"616-\ub514\uc790\uc778-\ud328\ud134",level:2},{value:"Singleton \ud328\ud134",id:"singleton-\ud328\ud134",level:3},{value:"Factory \ud328\ud134",id:"factory-\ud328\ud134",level:3},{value:"Observer \ud328\ud134",id:"observer-\ud328\ud134",level:3},{value:"Strategy \ud328\ud134",id:"strategy-\ud328\ud134",level:3},{value:"Decorator \ud328\ud134",id:"decorator-\ud328\ud134",level:3},{value:"6.17 \uc2e4\uc804 \uc608\uc81c",id:"617-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\uc798 \uad6c\uc870\ud654\ub41c \ud504\ub85c\uc81d\ud2b8 \uc608\uc81c",id:"\uc798-\uad6c\uc870\ud654\ub41c-\ud504\ub85c\uc81d\ud2b8-\uc608\uc81c",level:3},{value:"\uc124\uc815 \uad00\ub9ac \uc2e4\uc804 \uc608\uc81c",id:"\uc124\uc815-\uad00\ub9ac-\uc2e4\uc804-\uc608\uc81c",level:3},{value:"\ub85c\uae45 \uc124\uc815 \uc2e4\uc804 \uc608\uc81c",id:"\ub85c\uae45-\uc124\uc815-\uc2e4\uc804-\uc608\uc81c",level:3},{value:"6.18 \ucf54\ub4dc \ud488\uc9c8 \ub3c4\uad6c",id:"618-\ucf54\ub4dc-\ud488\uc9c8-\ub3c4\uad6c",level:2},{value:"Black (\ucf54\ub4dc \ud3ec\ub9e4\ud130)",id:"black-\ucf54\ub4dc-\ud3ec\ub9e4\ud130",level:3},{value:"Flake8 (\ub9b0\ud130)",id:"flake8-\ub9b0\ud130",level:3},{value:"Mypy (\ud0c0\uc785 \uccb4\ucee4)",id:"mypy-\ud0c0\uc785-\uccb4\ucee4",level:3},{value:"Pylint (\ub9b0\ud130)",id:"pylint-\ub9b0\ud130",level:3},{value:"Pre-commit Hooks",id:"pre-commit-hooks",level:3},{value:"6.19 CI/CD \uae30\ucd08",id:"619-cicd-\uae30\ucd08",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"pytest \ud1b5\ud569",id:"pytest-\ud1b5\ud569",level:3},{value:"6.20 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640 \ud301",id:"620-\uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640-\ud301",level:2},{value:"\ucf54\ub4dc \uc791\uc131 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ucf54\ub4dc-\uc791\uc131-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"Python \uac1c\ubc1c \ud301",id:"python-\uac1c\ubc1c-\ud301",level:3},{value:"\uc5f0\uc2b5 \ubb38\uc81c",id:"\uc5f0\uc2b5-\ubb38\uc81c",level:2},{value:"\ubb38\uc81c 1: \ub514\uc790\uc778 \ud328\ud134 \uc801\uc6a9",id:"\ubb38\uc81c-1-\ub514\uc790\uc778-\ud328\ud134-\uc801\uc6a9",level:3},{value:"\ubb38\uc81c 2: SOLID \uc6d0\uce59 \uc801\uc6a9",id:"\ubb38\uc81c-2-solid-\uc6d0\uce59-\uc801\uc6a9",level:3},{value:"\uc694\uc57d",id:"\uc694\uc57d",level:2},{value:"\ucd94\uac00 \ud559\uc2b5 \uc790\ub8cc",id:"\ucd94\uac00-\ud559\uc2b5-\uc790\ub8cc",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components},{Details:s}=e;return s||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"6-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"6. \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"})}),"\n",(0,r.jsx)(e.p,{children:"Python \uac1c\ubc1c\uc5d0\uc11c \uc804\ubb38\uc131\uc744 \ub192\uc774\uae30 \uc704\ud55c \uc885\ud569\uc801\uc778 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4 \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4. \ucf54\ub4dc \ud488\uc9c8, \uc720\uc9c0\ubcf4\uc218\uc131, \uadf8\ub9ac\uace0 \ud300 \ud611\uc5c5\uc744 \uc704\ud55c \uc2e4\uc804 \uac00\uc774\ub4dc\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"61-pep-8-\uc2a4\ud0c0\uc77c-\uac00\uc774\ub4dc",children:"6.1 PEP 8 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc"}),"\n",(0,r.jsx)(e.p,{children:"PEP 8\uc740 Python\uc758 \uacf5\uc2dd \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc\ub85c, \uc77c\uad00\uc131 \uc788\uace0 \uc77d\uae30 \uc26c\uc6b4 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30 \uc704\ud55c \uaddc\uce59\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"\ucf54\ub4dc-\ub808\uc774\uc544\uc6c3",children:"\ucf54\ub4dc \ub808\uc774\uc544\uc6c3"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc88b\uc740 \uc608: \uc801\uc808\ud55c \ub4e4\uc5ec\uc4f0\uae30\uc640 \uacf5\ubc31\ndef calculate_total_price(\n    item_price: float,\n    quantity: int,\n    tax_rate: float = 0.1\n) -> float:\n    """\ucd1d \uac00\uaca9\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4."""\n    subtotal = item_price * quantity\n    tax = subtotal * tax_rate\n    return subtotal + tax\n\n\n# \ub098\uc05c \uc608: \ubd88\uaddc\uce59\ud55c \ub4e4\uc5ec\uc4f0\uae30\ndef calculate_total_price(item_price,quantity,\n        tax_rate=0.1):\n    subtotal=item_price*quantity\n    tax=subtotal*tax_rate\n    return subtotal+tax\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ub77c\uc778-\uae38\uc774\uc640-\uc904\ubc14\uafc8",children:"\ub77c\uc778 \uae38\uc774\uc640 \uc904\ubc14\uafc8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc88b\uc740 \uc608: \ub77c\uc778 \uae38\uc774 79\uc790 \uc774\ub0b4, \uba85\ud655\ud55c \uc904\ubc14\uafc8\nresult = some_function_that_takes_arguments(\n    'a', 'b', 'c',\n    'd', 'e', 'f'\n)\n\n# \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \uc904\ubc14\uafc8\nfiltered_data = [\n    item.process()\n    for item in data_collection\n    if item.is_valid() and item.is_active()\n]\n\n# \ub098\uc05c \uc608: \ub108\ubb34 \uae34 \ub77c\uc778\nresult = some_function_that_takes_arguments('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o')\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uc784\ud3ec\ud2b8-\uc21c\uc11c",children:"\uc784\ud3ec\ud2b8 \uc21c\uc11c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc88b\uc740 \uc608: \uc62c\ubc14\ub978 \uc784\ud3ec\ud2b8 \uc21c\uc11c\n# 1. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport os\nimport sys\nfrom datetime import datetime\nfrom pathlib import Path\n\n# 2. \uc11c\ub4dc\ud30c\ud2f0 \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport numpy as np\nimport pandas as pd\nimport requests\nfrom flask import Flask, jsonify\n\n# 3. \ub85c\uceec \uc560\ud50c\ub9ac\ucf00\uc774\uc158/\ub77c\uc774\ube0c\ub7ec\ub9ac\nfrom my_app.models import User\nfrom my_app.utils import validate_email\n\n\n# \ub098\uc05c \uc608: \ud63c\uc7ac\ub41c \uc784\ud3ec\ud2b8\nfrom my_app.models import User\nimport os\nfrom flask import Flask\nimport sys\nimport requests\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uacf5\ubc31-\uc0ac\uc6a9",children:"\uacf5\ubc31 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc88b\uc740 \uc608: \uc801\uc808\ud55c \uacf5\ubc31 \uc0ac\uc6a9\nspam(ham[1], {eggs: 2})\nx = 1\ny = 2\nlong_variable = 3\n\nif x == 4:\n    print(x, y)\n\n# \ub098\uc05c \uc608: \ubd88\ud544\uc694\ud558\uac70\ub098 \ubd80\uc871\ud55c \uacf5\ubc31\nspam( ham[ 1 ], { eggs: 2 } )\nx             = 1\ny             = 2\nlong_variable = 3\n\nif x==4:\n    print(x,y)\n"})}),"\n",(0,r.jsx)(e.admonition,{title:"PEP 8 \uc790\ub3d9\ud654",type:"tip",children:(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://github.com/psf/black",children:"Black"}),"\uc774\ub098 ",(0,r.jsx)(e.a,{href:"https://github.com/hhatto/autopep8",children:"autopep8"})," \uac19\uc740 \uc790\ub3d9 \ud3ec\ub9e4\ud130\ub97c \uc0ac\uc6a9\ud558\uba74 PEP 8 \uc900\uc218\ub97c \uc790\ub3d9\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]})}),"\n",(0,r.jsx)(e.h2,{id:"62-\ucf54\ub4dc-\uad6c\uc870\ud654",children:"6.2 \ucf54\ub4dc \uad6c\uc870\ud654"}),"\n",(0,r.jsx)(e.h3,{id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"my_project/\n\u251c\u2500\u2500 .git/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 ci.yml\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 api.md\n\u2502   \u2514\u2500\u2500 user_guide.md\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 my_package/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 core/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 models.py\n\u2502       \u2502   \u2514\u2500\u2500 services.py\n\u2502       \u251c\u2500\u2500 api/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 routes.py\n\u2502       \u2502   \u2514\u2500\u2500 schemas.py\n\u2502       \u2514\u2500\u2500 utils/\n\u2502           \u251c\u2500\u2500 __init__.py\n\u2502           \u2514\u2500\u2500 helpers.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_models.py\n\u2502   \u251c\u2500\u2500 test_services.py\n\u2502   \u2514\u2500\u2500 conftest.py\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 requirements-dev.txt\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 pyproject.toml\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ubaa8\ub4c8\uacfc-\ud328\ud0a4\uc9c0-\uad6c\uc131",children:"\ubaa8\ub4c8\uacfc \ud328\ud0a4\uc9c0 \uad6c\uc131"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# src/my_package/__init__.py\n"""\nMy Package - \uac04\ub2e8\ud55c \uc124\uba85\n\n\uc774 \ud328\ud0a4\uc9c0\ub294 ...\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.\n"""\n\n__version__ = "0.1.0"\n__author__ = "Your Name"\n\n# \uc8fc\uc694 \ud074\ub798\uc2a4/\ud568\uc218\ub97c \ud328\ud0a4\uc9c0 \ub808\ubca8\uc5d0\uc11c \ub178\ucd9c\nfrom my_package.core.models import User, Product\nfrom my_package.core.services import UserService\n\n__all__ = ["User", "Product", "UserService"]\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# src/my_package/core/models.py\n"""\ub370\uc774\ud130 \ubaa8\ub378 \uc815\uc758"""\n\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Optional\n\n\n@dataclass\nclass User:\n    """\uc0ac\uc6a9\uc790 \ubaa8\ub378"""\n    id: int\n    username: str\n    email: str\n    created_at: datetime\n    is_active: bool = True\n    full_name: Optional[str] = None\n\n    def __post_init__(self):\n        """\ub370\uc774\ud130 \uac80\uc99d"""\n        if not self.email or \'@\' not in self.email:\n            raise ValueError("Invalid email address")\n\n\n@dataclass\nclass Product:\n    """\uc0c1\ud488 \ubaa8\ub378"""\n    id: int\n    name: str\n    price: float\n    stock: int\n\n    def is_available(self) -> bool:\n        """\uc7ac\uace0 \ud655\uc778"""\n        return self.stock > 0\n'})}),"\n",(0,r.jsx)(e.h2,{id:"63-\uba85\uba85-\uaddc\uce59",children:"6.3 \uba85\uba85 \uaddc\uce59"}),"\n",(0,r.jsx)(e.h3,{id:"python-\uba85\uba85-\uaddc\uce59-\uc694\uc57d",children:"Python \uba85\uba85 \uaddc\uce59 \uc694\uc57d"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ubcc0\uc218\uc640 \ud568\uc218: snake_case\nuser_name = "John"\ntotal_count = 100\n\ndef calculate_average(numbers: list) -> float:\n    return sum(numbers) / len(numbers)\n\n\n# \ud074\ub798\uc2a4: PascalCase\nclass UserManager:\n    pass\n\nclass DatabaseConnection:\n    pass\n\n\n# \uc0c1\uc218: UPPER_SNAKE_CASE\nMAX_CONNECTIONS = 100\nDEFAULT_TIMEOUT = 30\nAPI_BASE_URL = "https://api.example.com"\n\n\n# \ube44\uacf5\uac1c \uc18d\uc131/\uba54\uc11c\ub4dc: \uc55e\uc5d0 \uc5b8\ub354\uc2a4\ucf54\uc5b4\nclass BankAccount:\n    def __init__(self, balance: float):\n        self._balance = balance  # \ubcf4\ud638\ub41c \uc18d\uc131\n        self.__pin = None  # \ube44\uacf5\uac1c \uc18d\uc131 (name mangling)\n\n    def _validate_amount(self, amount: float) -> bool:\n        """\ub0b4\ubd80 \uac80\uc99d \uba54\uc11c\ub4dc"""\n        return amount > 0\n\n\n# \ubaa8\ub4c8: lowercase \ub610\ub294 lowercase_with_underscores\n# user_manager.py\n# database.py\n# utils.py\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc758\ubbf8-\uc788\ub294-\uc774\ub984-\uc0ac\uc6a9",children:"\uc758\ubbf8 \uc788\ub294 \uc774\ub984 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc88b\uc740 \uc608: \uba85\ud655\ud558\uace0 \uc758\ubbf8 \uc788\ub294 \uc774\ub984\ndef calculate_employee_monthly_salary(\n    hourly_rate: float,\n    hours_worked: int\n) -> float:\n    return hourly_rate * hours_worked\n\n\nuser_list = []\nactive_customers = []\ntotal_revenue = 0\n\n\n# \ub098\uc05c \uc608: \ubaa8\ud638\ud55c \uc774\ub984\ndef calc(x: float, y: int) -> float:\n    return x * y\n\n\nl = []\nac = []\ntr = 0\n"})}),"\n",(0,r.jsx)(e.h2,{id:"64-\ubb38\uc11c\ud654",children:"6.4 \ubb38\uc11c\ud654"}),"\n",(0,r.jsx)(e.h3,{id:"docstring-\uc791\uc131",children:"Docstring \uc791\uc131"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def process_payment(\n    amount: float,\n    currency: str = "USD",\n    payment_method: str = "credit_card"\n) -> dict:\n    """\n    \uacb0\uc81c\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n\n    Args:\n        amount: \uacb0\uc81c \uae08\uc561 (\uc591\uc218\uc5ec\uc57c \ud568)\n        currency: \ud1b5\ud654 \ucf54\ub4dc (ISO 4217 \ud615\uc2dd)\n        payment_method: \uacb0\uc81c \uc218\ub2e8 ("credit_card", "debit_card", "paypal")\n\n    Returns:\n        \uacb0\uc81c \uacb0\uacfc\ub97c \ub2f4\uc740 \ub515\uc154\ub108\ub9ac:\n        {\n            "success": bool,\n            "transaction_id": str,\n            "amount": float,\n            "currency": str\n        }\n\n    Raises:\n        ValueError: amount\uac00 0 \uc774\ud558\uc778 \uacbd\uc6b0\n        PaymentError: \uacb0\uc81c \ucc98\ub9ac \uc2e4\ud328 \uc2dc\n\n    Example:\n        >>> process_payment(100.0, "USD", "credit_card")\n        {\'success\': True, \'transaction_id\': \'TXN123\', \'amount\': 100.0, \'currency\': \'USD\'}\n    """\n    if amount <= 0:\n        raise ValueError("Amount must be positive")\n\n    # \uacb0\uc81c \ucc98\ub9ac \ub85c\uc9c1\n    return {\n        "success": True,\n        "transaction_id": "TXN123",\n        "amount": amount,\n        "currency": currency\n    }\n\n\nclass DataProcessor:\n    """\n    \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \uc704\ud55c \ud074\ub798\uc2a4.\n\n    \uc774 \ud074\ub798\uc2a4\ub294 \ub2e4\uc591\ud55c \ud615\uc2dd\uc758 \ub370\uc774\ud130\ub97c \uc77d\uace0, \ubcc0\ud658\ud558\uace0, \uc800\uc7a5\ud558\ub294\n    \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.\n\n    Attributes:\n        data_source: \ub370\uc774\ud130 \uc18c\uc2a4 \uacbd\ub85c\n        processor_type: \ucc98\ub9ac\uae30 \ud0c0\uc785 ("csv", "json", "xml")\n        options: \ucd94\uac00 \ucc98\ub9ac \uc635\uc158\n\n    Example:\n        >>> processor = DataProcessor("data.csv", "csv")\n        >>> processor.load()\n        >>> processed = processor.transform()\n        >>> processor.save(processed, "output.json")\n    """\n\n    def __init__(self, data_source: str, processor_type: str):\n        """\n        DataProcessor\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4.\n\n        Args:\n            data_source: \ub370\uc774\ud130 \uc18c\uc2a4 \ud30c\uc77c \uacbd\ub85c\n            processor_type: \ucc98\ub9ac\uae30 \ud0c0\uc785\n        """\n        self.data_source = data_source\n        self.processor_type = processor_type\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc8fc\uc11d-\uc791\uc131-\uac00\uc774\ub4dc",children:"\uc8fc\uc11d \uc791\uc131 \uac00\uc774\ub4dc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc88b\uc740 \uc608: \uc65c(Why)\ub97c \uc124\uba85\ud558\ub294 \uc8fc\uc11d\ndef calculate_discount(price: float, customer_tier: str) -> float:\n    # VIP \uace0\uac1d\uc5d0\uac8c\ub294 \ud2b9\ubcc4 \ud504\ub85c\ubaa8\uc158\uc73c\ub85c 20% \ucd94\uac00 \ud560\uc778 \uc81c\uacf5\n    # (2024\ub144 1\ubd84\uae30 \ub9c8\ucf00\ud305 \uc804\ub7b5\uc5d0 \ub530\ub984)\n    if customer_tier == "VIP":\n        return price * 0.8\n\n    # \uc77c\ubc18 \uace0\uac1d\uc740 \ud45c\uc900 10% \ud560\uc778\n    return price * 0.9\n\n\n# \ubcf5\uc7a1\ud55c \uc54c\uace0\ub9ac\uc998 \uc124\uba85\ndef find_optimal_route(graph: dict, start: str, end: str) -> list:\n    """\ucd5c\uc801 \uacbd\ub85c\ub97c \ucc3e\uc2b5\ub2c8\ub2e4 (Dijkstra \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9)."""\n    # \uc6b0\uc120\uc21c\uc704 \ud050\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub2e8 \uac70\ub9ac \ub178\ub4dc\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc120\ud0dd\n    # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4: O((V + E) log V)\n    priority_queue = [(0, start)]\n    distances = {start: 0}\n\n    # ... \uad6c\ud604\n\n\n# \ub098\uc05c \uc608: \ucf54\ub4dc\ub97c \uadf8\ub300\ub85c \ubc18\ubcf5\ud558\ub294 \uc8fc\uc11d\ndef add_numbers(a: int, b: int) -> int:\n    # a\uc640 b\ub97c \ub354\ud568\n    return a + b  # a + b\ub97c \ubc18\ud658\n\n\n# \ubcc0\uc218\ub97c 1 \uc99d\uac00\ncounter = counter + 1\n'})}),"\n",(0,r.jsx)(e.h3,{id:"type-hints-\ud65c\uc6a9",children:"Type Hints \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List, Dict, Optional, Union, Callable, TypeVar, Generic\n\n# \uae30\ubcf8 \ud0c0\uc785 \ud78c\ud2b8\ndef greet(name: str) -> str:\n    return f"Hello, {name}!"\n\n\n# \uceec\ub809\uc158 \ud0c0\uc785\ndef process_items(items: List[str]) -> Dict[str, int]:\n    return {item: len(item) for item in items}\n\n\n# Optional (None\uc774 \uac00\ub2a5\ud55c \uac12)\ndef find_user(user_id: int) -> Optional[User]:\n    # \uc0ac\uc6a9\uc790\ub97c \ucc3e\uc9c0 \ubabb\ud558\uba74 None \ubc18\ud658\n    return None\n\n\n# Union (\uc5ec\ub7ec \ud0c0\uc785 \uac00\ub2a5)\ndef parse_value(value: Union[int, str, float]) -> float:\n    return float(value)\n\n\n# Callable (\ud568\uc218 \ud0c0\uc785)\ndef apply_operation(\n    numbers: List[int],\n    operation: Callable[[int], int]\n) -> List[int]:\n    return [operation(n) for n in numbers]\n\n\n# Generic (\uc81c\ub124\ub9ad \ud0c0\uc785)\nT = TypeVar(\'T\')\n\nclass Stack(Generic[T]):\n    def __init__(self) -> None:\n        self._items: List[T] = []\n\n    def push(self, item: T) -> None:\n        self._items.append(item)\n\n    def pop(self) -> T:\n        return self._items.pop()\n\n\n# \ubcf5\uc7a1\ud55c \ud0c0\uc785\nfrom typing import Tuple, Any\n\ndef process_data(\n    data: List[Dict[str, Any]]\n) -> Tuple[List[str], Dict[str, int]]:\n    names = [item.get("name", "") for item in data]\n    counts = {"total": len(data)}\n    return names, counts\n'})}),"\n",(0,r.jsx)(e.h2,{id:"65-\uac00\uc0c1-\ud658\uacbd-\uad00\ub9ac",children:"6.5 \uac00\uc0c1 \ud658\uacbd \uad00\ub9ac"}),"\n",(0,r.jsx)(e.h3,{id:"venv-\uc0ac\uc6a9",children:"venv \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# \uac00\uc0c1 \ud658\uacbd \uc0dd\uc131\npython -m venv venv\n\n# \uac00\uc0c1 \ud658\uacbd \ud65c\uc131\ud654\n# Windows\nvenv\\Scripts\\activate\n\n# macOS/Linux\nsource venv/bin/activate\n\n# \ube44\ud65c\uc131\ud654\ndeactivate\n"})}),"\n",(0,r.jsx)(e.h3,{id:"virtualenv-\uc0ac\uc6a9",children:"virtualenv \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# virtualenv \uc124\uce58\npip install virtualenv\n\n# \uac00\uc0c1 \ud658\uacbd \uc0dd\uc131\nvirtualenv venv\n\n# \ud2b9\uc815 Python \ubc84\uc804 \uc9c0\uc815\nvirtualenv -p python3.11 venv\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uac00\uc0c1-\ud658\uacbd-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"\uac00\uc0c1 \ud658\uacbd \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# .gitignore\uc5d0 \uac00\uc0c1 \ud658\uacbd \ucd94\uac00\n"""\n# Virtual environments\nvenv/\nenv/\nENV/\n.venv/\n"""\n\n# \ud504\ub85c\uc81d\ud2b8\ubcc4 \uac00\uc0c1 \ud658\uacbd \uc0ac\uc6a9\n# my_project/\n#   \u251c\u2500\u2500 venv/\n#   \u251c\u2500\u2500 src/\n#   \u2514\u2500\u2500 requirements.txt\n'})}),"\n",(0,r.jsx)(e.admonition,{title:"\uac00\uc0c1 \ud658\uacbd \uc790\ub3d9 \ud65c\uc131\ud654",type:"tip",children:(0,r.jsx)(e.p,{children:"direnv\ub098 pyenv-virtualenv\ub97c \uc0ac\uc6a9\ud558\uba74 \ub514\ub809\ud1a0\ub9ac \uc9c4\uc785 \uc2dc \uc790\ub3d9\uc73c\ub85c \uac00\uc0c1 \ud658\uacbd\uc744 \ud65c\uc131\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."})}),"\n",(0,r.jsx)(e.h2,{id:"66-\uc758\uc874\uc131-\uad00\ub9ac",children:"6.6 \uc758\uc874\uc131 \uad00\ub9ac"}),"\n",(0,r.jsx)(e.h3,{id:"requirementstxt",children:"requirements.txt"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-txt",children:"# requirements.txt - \ud504\ub85c\ub355\uc158 \uc758\uc874\uc131\nflask==3.0.0\nrequests>=2.31.0,<3.0.0\npython-dotenv==1.0.0\nsqlalchemy==2.0.23\n\n# \ud2b9\uc815 \ubc84\uc804\npandas==2.1.4\n\n# \ucd5c\uc18c \ubc84\uc804\nnumpy>=1.24.0\n\n# \ubc84\uc804 \ubc94\uc704\ndjango>=4.2.0,<5.0.0\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-txt",children:"# requirements-dev.txt - \uac1c\ubc1c \uc758\uc874\uc131\n-r requirements.txt\n\n# \ud14c\uc2a4\ud305\npytest==7.4.3\npytest-cov==4.1.0\npytest-mock==3.12.0\n\n# \ucf54\ub4dc \ud488\uc9c8\nblack==23.12.1\nflake8==7.0.0\nmypy==1.8.0\npylint==3.0.3\n\n# \uac1c\ubc1c \ub3c4\uad6c\nipython==8.19.0\nipdb==0.13.13\n"})}),"\n",(0,r.jsx)(e.h3,{id:"poetry-\uc0ac\uc6a9",children:"Poetry \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Poetry \uc124\uce58\npip install poetry\n\n# \uc0c8 \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\npoetry new my-project\n\n# \uae30\uc874 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ucd08\uae30\ud654\npoetry init\n\n# \uc758\uc874\uc131 \ucd94\uac00\npoetry add requests\npoetry add --group dev pytest\n\n# \uc758\uc874\uc131 \uc124\uce58\npoetry install\n\n# \uac00\uc0c1 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\npoetry run python script.py\n\n# \uc758\uc874\uc131 \uc5c5\ub370\uc774\ud2b8\npoetry update\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-toml",children:'# pyproject.toml\n[tool.poetry]\nname = "my-project"\nversion = "0.1.0"\ndescription = "My awesome project"\nauthors = ["Your Name <you@example.com>"]\nreadme = "README.md"\n\n[tool.poetry.dependencies]\npython = "^3.11"\nrequests = "^2.31.0"\nflask = "^3.0.0"\n\n[tool.poetry.group.dev.dependencies]\npytest = "^7.4.3"\nblack = "^23.12.1"\nmypy = "^1.8.0"\n\n[build-system]\nrequires = ["poetry-core"]\nbuild-backend = "poetry.core.masonry.api"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"pipenv-\uc0ac\uc6a9",children:"Pipenv \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pipenv \uc124\uce58\npip install pipenv\n\n# \ud504\ub85c\uc81d\ud2b8 \ucd08\uae30\ud654 \ubc0f \uac00\uc0c1 \ud658\uacbd \uc0dd\uc131\npipenv install\n\n# \ud328\ud0a4\uc9c0 \uc124\uce58\npipenv install requests\npipenv install --dev pytest\n\n# \uac00\uc0c1 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\npipenv run python script.py\n\n# \uac00\uc0c1 \ud658\uacbd \ud65c\uc131\ud654\npipenv shell\n\n# \uc758\uc874\uc131 \uc7a0\uae08\npipenv lock\n\n# \uc758\uc874\uc131 \uc5c5\ub370\uc774\ud2b8\npipenv update\n"})}),"\n",(0,r.jsx)(e.h2,{id:"67-git-\uc6cc\ud06c\ud50c\ub85c\uc6b0",children:"6.7 Git \uc6cc\ud06c\ud50c\ub85c\uc6b0"}),"\n",(0,r.jsx)(e.h3,{id:"gitignore-\uc124\uc815",children:".gitignore \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-gitignore",children:"# .gitignore\n\n# Python\n__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Virtual environments\nvenv/\nenv/\nENV/\n.venv/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n*~\n\n# Environment variables\n.env\n.env.local\n.env.*.local\n\n# Testing\n.pytest_cache/\n.coverage\nhtmlcov/\n*.cover\n\n# OS\n.DS_Store\nThumbs.db\n\n# Logs\n*.log\nlogs/\n\n# Databases\n*.db\n*.sqlite3\n\n# Secrets\nsecrets.json\ncredentials.json\n*.pem\n*.key\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ucee4\ubc0b-\uba54\uc2dc\uc9c0-\uc791\uc131",children:"\ucee4\ubc0b \uba54\uc2dc\uc9c0 \uc791\uc131"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# \uc88b\uc740 \ucee4\ubc0b \uba54\uc2dc\uc9c0 \ud615\uc2dd\ngit commit -m "feat: Add user authentication with JWT"\ngit commit -m "fix: Resolve memory leak in data processor"\ngit commit -m "docs: Update API documentation for v2.0"\ngit commit -m "refactor: Simplify payment processing logic"\ngit commit -m "test: Add unit tests for user service"\ngit commit -m "chore: Update dependencies to latest versions"\n\n# \uc0c1\uc138\ud55c \ucee4\ubc0b \uba54\uc2dc\uc9c0\ngit commit -m "feat: Add email notification system\n\n- Implement SMTP email sender\n- Add template rendering with Jinja2\n- Support for HTML and plain text emails\n- Add retry logic for failed sends\n\nCloses #123"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ucee4\ubc0b-\uba54\uc2dc\uc9c0-\ucee8\ubca4\uc158",children:"\ucee4\ubc0b \uba54\uc2dc\uc9c0 \ucee8\ubca4\uc158"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"<type>(<scope>): <subject>\n\n<body>\n\n<footer>\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ud0c0\uc785:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"feat"}),": \uc0c8\ub85c\uc6b4 \uae30\ub2a5"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"fix"}),": \ubc84\uadf8 \uc218\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"docs"}),": \ubb38\uc11c \ubcc0\uacbd"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"style"}),": \ucf54\ub4dc \ud3ec\ub9e4\ud305 (\uae30\ub2a5 \ubcc0\uacbd \uc5c6\uc74c)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"refactor"}),": \ucf54\ub4dc \ub9ac\ud329\ud1a0\ub9c1"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"test"}),": \ud14c\uc2a4\ud2b8 \ucd94\uac00/\uc218\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"chore"}),": \ube4c\ub4dc/\uc124\uc815 \ubcc0\uacbd"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\ube0c\ub79c\uce58-\uc804\ub7b5",children:"\ube0c\ub79c\uce58 \uc804\ub7b5"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Git Flow \uae30\ubc18 \ube0c\ub79c\uce58 \uc804\ub7b5\nmain            # \ud504\ub85c\ub355\uc158 \ucf54\ub4dc\n\u251c\u2500\u2500 develop     # \uac1c\ubc1c \ube0c\ub79c\uce58\n    \u251c\u2500\u2500 feature/user-auth       # \uae30\ub2a5 \uac1c\ubc1c\n    \u251c\u2500\u2500 feature/payment-system\n    \u251c\u2500\u2500 bugfix/login-error      # \ubc84\uadf8 \uc218\uc815\n    \u2514\u2500\u2500 hotfix/critical-bug     # \uae34\uae09 \uc218\uc815\n\n# \ube0c\ub79c\uce58 \uc0dd\uc131 \ubc0f \uc791\uc5c5\ngit checkout -b feature/user-auth develop\n# ... \uc791\uc5c5 \uc218\ud589 ...\ngit add .\ngit commit -m "feat: Implement user authentication"\ngit checkout develop\ngit merge --no-ff feature/user-auth\ngit branch -d feature/user-auth\n'})}),"\n",(0,r.jsx)(e.h2,{id:"68-\ucf54\ub4dc-\ub9ac\ubdf0-\ud504\ub799\ud2f0\uc2a4",children:"6.8 \ucf54\ub4dc \ub9ac\ubdf0 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(e.h3,{id:"\ucf54\ub4dc-\ub9ac\ubdf0-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ucf54\ub4dc \ub9ac\ubdf0 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'"""\n\ucf54\ub4dc \ub9ac\ubdf0 \uc2dc \ud655\uc778 \uc0ac\ud56d:\n\n[ ] \uae30\ub2a5 \uc694\uad6c\uc0ac\ud56d \ucda9\uc871\n[ ] \ucf54\ub4dc\uac00 \uba85\ud655\ud558\uace0 \uc774\ud574\ud558\uae30 \uc26c\uc6b4\uac00?\n[ ] \uc801\uc808\ud55c \uc5d0\ub7ec \ucc98\ub9ac\uac00 \ub418\uc5b4 \uc788\ub294\uac00?\n[ ] \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294\uac00?\n[ ] \ubcf4\uc548 \ucde8\uc57d\uc810\uc774 \uc5c6\ub294\uac00?\n[ ] \uc131\ub2a5 \uc774\uc288\uac00 \uc5c6\ub294\uac00?\n[ ] \ubb38\uc11c\ud654\uac00 \ucda9\ubd84\ud55c\uac00?\n[ ] PEP 8 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc \uc900\uc218\n[ ] \uc911\ubcf5 \ucf54\ub4dc\uac00 \uc5c6\ub294\uac00?\n[ ] \uc801\uc808\ud55c \ucd94\uc0c1\ud654 \ub808\ubca8\uc778\uac00?\n"""\n\n# \ub9ac\ubdf0 \uc804 (\uac1c\uc120 \ud544\uc694)\ndef process(data):\n    result = []\n    for item in data:\n        if item > 0:\n            result.append(item * 2)\n    return result\n\n\n# \ub9ac\ubdf0 \ud6c4 (\uac1c\uc120\ub428)\ndef double_positive_numbers(numbers: list[float]) -> list[float]:\n    """\n    \uc591\uc218\ub9cc \ud544\ud130\ub9c1\ud558\uc5ec 2\ubc30\ub85c \ub9cc\ub4ed\ub2c8\ub2e4.\n\n    Args:\n        numbers: \uc22b\uc790 \ub9ac\uc2a4\ud2b8\n\n    Returns:\n        \uc591\uc218\ub97c 2\ubc30\ub85c \ub9cc\ub4e0 \ub9ac\uc2a4\ud2b8\n\n    Example:\n        >>> double_positive_numbers([1, -2, 3, -4, 5])\n        [2, 6, 10]\n    """\n    return [num * 2 for num in numbers if num > 0]\n'})}),"\n",(0,r.jsx)(e.h3,{id:"pull-request-\ud15c\ud50c\ub9bf",children:"Pull Request \ud15c\ud50c\ub9bf"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-markdown",children:"## \ubcc0\uacbd \uc0ac\ud56d \uc694\uc57d\n\x3c!-- \uc774 PR\uc5d0\uc11c \ubb34\uc5c7\uc744 \ubcc0\uacbd\ud588\ub294\uc9c0 \uac04\ub2e8\ud788 \uc124\uba85 --\x3e\n\n## \ubcc0\uacbd \uc774\uc720\n\x3c!-- \uc65c \uc774 \ubcc0\uacbd\uc774 \ud544\uc694\ud55c\uc9c0 \uc124\uba85 --\x3e\n\n## \ubcc0\uacbd \ub0b4\uc6a9\n- [ ] \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \ucd94\uac00\n- [ ] \ubc84\uadf8 \uc218\uc815\n- [ ] \ub9ac\ud329\ud1a0\ub9c1\n- [ ] \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8\n- [ ] \ud14c\uc2a4\ud2b8 \ucd94\uac00\n\n## \ud14c\uc2a4\ud2b8 \uacc4\ud68d\n\x3c!-- \uc5b4\ub5bb\uac8c \ud14c\uc2a4\ud2b8\ud588\ub294\uc9c0 \uc124\uba85 --\x3e\n- [ ] \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131\n- [ ] \ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc218\ud589\n- [ ] \uc218\ub3d9 \ud14c\uc2a4\ud2b8 \uc644\ub8cc\n\n## \uc2a4\ud06c\ub9b0\uc0f7 (\ud574\ub2f9\ud558\ub294 \uacbd\uc6b0)\n\x3c!-- UI \ubcc0\uacbd\uc774 \uc788\ub2e4\uba74 \uc2a4\ud06c\ub9b0\uc0f7 \ucca8\ubd80 --\x3e\n\n## \uccb4\ud06c\ub9ac\uc2a4\ud2b8\n- [ ] \ucf54\ub4dc\uac00 PEP 8 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc\ub97c \ub530\ub985\ub2c8\ub2e4\n- [ ] \uc801\uc808\ud55c \ubb38\uc11c\ud654\uac00 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4\n- [ ] \ud14c\uc2a4\ud2b8\uac00 \ud1b5\uacfc\ud569\ub2c8\ub2e4\n- [ ] \uad00\ub828 \uc774\uc288\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4 (Closes #123)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"69-\uc5d0\ub7ec-\ucc98\ub9ac-\ud328\ud134",children:"6.9 \uc5d0\ub7ec \ucc98\ub9ac \ud328\ud134"}),"\n",(0,r.jsx)(e.h3,{id:"\uc608\uc678-\ucc98\ub9ac-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"\uc608\uc678 \ucc98\ub9ac \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \uc88b\uc740 \uc608: \uad6c\uccb4\uc801\uc778 \uc608\uc678 \ucc98\ub9ac\ndef read_config_file(filename: str) -> dict:\n    """\uc124\uc815 \ud30c\uc77c\uc744 \uc77d\uc2b5\ub2c8\ub2e4."""\n    try:\n        with open(filename, \'r\', encoding=\'utf-8\') as f:\n            import json\n            return json.load(f)\n    except FileNotFoundError:\n        logger.error(f"Config file not found: {filename}")\n        return {}\n    except json.JSONDecodeError as e:\n        logger.error(f"Invalid JSON in config file: {e}")\n        raise ConfigurationError(f"Invalid JSON format: {e}")\n    except PermissionError:\n        logger.error(f"Permission denied reading: {filename}")\n        raise\n\n\n# \ub098\uc05c \uc608: \ub108\ubb34 \uad11\ubc94\uc704\ud55c \uc608\uc678 \ucc98\ub9ac\ndef read_config_file(filename: str) -> dict:\n    try:\n        with open(filename, \'r\') as f:\n            import json\n            return json.load(f)\n    except Exception:  # \ub108\ubb34 \uad11\ubc94\uc704!\n        return {}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ucee4\uc2a4\ud140-\uc608\uc678-\uc815\uc758",children:"\ucee4\uc2a4\ud140 \uc608\uc678 \uc815\uc758"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# exceptions.py\nclass ApplicationError(Exception):\n    """\uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uae30\ubcf8 \uc608\uc678 \ud074\ub798\uc2a4"""\n    pass\n\n\nclass ValidationError(ApplicationError):\n    """\ub370\uc774\ud130 \uac80\uc99d \uc2e4\ud328"""\n    def __init__(self, field: str, message: str):\n        self.field = field\n        self.message = message\n        super().__init__(f"{field}: {message}")\n\n\nclass DatabaseError(ApplicationError):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub828 \uc5d0\ub7ec"""\n    pass\n\n\nclass AuthenticationError(ApplicationError):\n    """\uc778\uc99d \uc2e4\ud328"""\n    pass\n\n\n# \uc0ac\uc6a9 \uc608\ndef create_user(username: str, email: str) -> User:\n    """\uc0c8 \uc0ac\uc6a9\uc790\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4."""\n    if not username:\n        raise ValidationError("username", "Username is required")\n\n    if \'@\' not in email:\n        raise ValidationError("email", "Invalid email format")\n\n    try:\n        user = User(username=username, email=email)\n        db.save(user)\n        return user\n    except IntegrityError:\n        raise DatabaseError(f"User {username} already exists")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"context-manager-\ud65c\uc6a9",children:"Context Manager \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from contextlib import contextmanager\nfrom typing import Generator\nimport time\n\n\n@contextmanager\ndef timer(name: str) -> Generator[None, None, None]:\n    """\uc2e4\ud589 \uc2dc\uac04\uc744 \uce21\uc815\ud558\ub294 \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800"""\n    start_time = time.time()\n    try:\n        yield\n    finally:\n        elapsed = time.time() - start_time\n        print(f"{name} took {elapsed:.2f} seconds")\n\n\n# \uc0ac\uc6a9 \uc608\nwith timer("Database query"):\n    # \ubb34\uac70\uc6b4 \uc791\uc5c5 \uc218\ud589\n    results = db.execute_complex_query()\n\n\n@contextmanager\ndef database_transaction(db):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac"""\n    try:\n        yield db\n        db.commit()\n    except Exception:\n        db.rollback()\n        raise\n\n\n# \uc0ac\uc6a9 \uc608\nwith database_transaction(db) as session:\n    session.add(new_user)\n    session.add(new_order)\n    # \uc131\uacf5 \uc2dc \uc790\ub3d9 \ucee4\ubc0b, \uc2e4\ud328 \uc2dc \uc790\ub3d9 \ub864\ubc31\n'})}),"\n",(0,r.jsx)(e.h2,{id:"610-\ub85c\uae45-\ubca0\uc2a4\ud2b8-\ud504\ub799\ud2f0\uc2a4",children:"6.10 \ub85c\uae45 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4"}),"\n",(0,r.jsx)(e.h3,{id:"\ub85c\uae45-\uc124\uc815",children:"\ub85c\uae45 \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# logging_config.py\nimport logging\nimport logging.handlers\nfrom pathlib import Path\n\n\ndef setup_logging(\n    log_level: str = "INFO",\n    log_file: str = "app.log",\n    log_dir: str = "logs"\n) -> None:\n    """\ub85c\uae45\uc744 \uc124\uc815\ud569\ub2c8\ub2e4."""\n\n    # \ub85c\uadf8 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n    log_path = Path(log_dir)\n    log_path.mkdir(exist_ok=True)\n\n    # \ub85c\uac70 \uc124\uc815\n    logger = logging.getLogger()\n    logger.setLevel(log_level)\n\n    # \ud3ec\ub9e4\ud130 \uc815\uc758\n    formatter = logging.Formatter(\n        \'%(asctime)s - %(name)s - %(levelname)s - %(message)s\',\n        datefmt=\'%Y-%m-%d %H:%M:%S\'\n    )\n\n    # \ucf58\uc194 \ud578\ub4e4\ub7ec\n    console_handler = logging.StreamHandler()\n    console_handler.setLevel(logging.INFO)\n    console_handler.setFormatter(formatter)\n\n    # \ud30c\uc77c \ud578\ub4e4\ub7ec (\ub85c\ud14c\uc774\uc158)\n    file_handler = logging.handlers.RotatingFileHandler(\n        log_path / log_file,\n        maxBytes=10_485_760,  # 10MB\n        backupCount=5,\n        encoding=\'utf-8\'\n    )\n    file_handler.setLevel(logging.DEBUG)\n    file_handler.setFormatter(formatter)\n\n    # \uc5d0\ub7ec \uc804\uc6a9 \ud578\ub4e4\ub7ec\n    error_handler = logging.handlers.RotatingFileHandler(\n        log_path / \'error.log\',\n        maxBytes=10_485_760,\n        backupCount=5,\n        encoding=\'utf-8\'\n    )\n    error_handler.setLevel(logging.ERROR)\n    error_handler.setFormatter(formatter)\n\n    # \ud578\ub4e4\ub7ec \ucd94\uac00\n    logger.addHandler(console_handler)\n    logger.addHandler(file_handler)\n    logger.addHandler(error_handler)\n\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == "__main__":\n    setup_logging(log_level="DEBUG")\n\n    logger = logging.getLogger(__name__)\n    logger.debug("\ub514\ubc84\uadf8 \uba54\uc2dc\uc9c0")\n    logger.info("\uc815\ubcf4 \uba54\uc2dc\uc9c0")\n    logger.warning("\uacbd\uace0 \uba54\uc2dc\uc9c0")\n    logger.error("\uc5d0\ub7ec \uba54\uc2dc\uc9c0")\n    logger.critical("\uc2ec\uac01\ud55c \uc5d0\ub7ec")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ub85c\uae45-\ud65c\uc6a9-\uc608\uc81c",children:"\ub85c\uae45 \ud65c\uc6a9 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import logging\nfrom typing import Optional\n\nlogger = logging.getLogger(__name__)\n\n\nclass UserService:\n    """\uc0ac\uc6a9\uc790 \uad00\ub9ac \uc11c\ube44\uc2a4"""\n\n    def __init__(self, db):\n        self.db = db\n        logger.info("UserService initialized")\n\n    def create_user(self, username: str, email: str) -> Optional[User]:\n        """\uc0c8 \uc0ac\uc6a9\uc790\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4."""\n        logger.info(f"Creating user: {username}")\n\n        try:\n            # \uc911\ubcf5 \ud655\uc778\n            if self.db.user_exists(username):\n                logger.warning(f"User already exists: {username}")\n                return None\n\n            # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n            user = User(username=username, email=email)\n            self.db.save(user)\n\n            logger.info(f"User created successfully: {username} (ID: {user.id})")\n            return user\n\n        except ValidationError as e:\n            logger.error(f"Validation error creating user: {e}")\n            raise\n\n        except DatabaseError as e:\n            logger.exception(f"Database error creating user: {e}")\n            raise\n\n        except Exception as e:\n            logger.exception(f"Unexpected error creating user: {e}")\n            raise\n\n    def delete_user(self, user_id: int) -> bool:\n        """\uc0ac\uc6a9\uc790\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4."""\n        logger.info(f"Deleting user: {user_id}")\n\n        try:\n            user = self.db.get_user(user_id)\n            if not user:\n                logger.warning(f"User not found: {user_id}")\n                return False\n\n            self.db.delete(user)\n            logger.info(f"User deleted: {user_id}")\n            return True\n\n        except Exception as e:\n            logger.exception(f"Error deleting user {user_id}: {e}")\n            return False\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uad6c\uc870\ud654\ub41c-\ub85c\uae45",children:"\uad6c\uc870\ud654\ub41c \ub85c\uae45"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import logging\nimport json\nfrom datetime import datetime\n\n\nclass StructuredMessage:\n    \"\"\"\uad6c\uc870\ud654\ub41c \ub85c\uadf8 \uba54\uc2dc\uc9c0\"\"\"\n\n    def __init__(self, **kwargs):\n        self.kwargs = kwargs\n\n    def __str__(self):\n        return json.dumps({\n            'timestamp': datetime.utcnow().isoformat(),\n            **self.kwargs\n        })\n\n\n# \uc0ac\uc6a9 \uc608\nlogger = logging.getLogger(__name__)\n\nlogger.info(StructuredMessage(\n    event='user_login',\n    user_id=123,\n    username='john_doe',\n    ip_address='192.168.1.1',\n    success=True\n))\n\nlogger.error(StructuredMessage(\n    event='payment_failed',\n    user_id=456,\n    amount=99.99,\n    currency='USD',\n    error='insufficient_funds'\n))\n"})}),"\n",(0,r.jsx)(e.h2,{id:"611-\uc124\uc815-\uad00\ub9ac",children:"6.11 \uc124\uc815 \uad00\ub9ac"}),"\n",(0,r.jsx)(e.h3,{id:"\ud658\uacbd-\ubcc0\uc218-\ud65c\uc6a9",children:"\ud658\uacbd \ubcc0\uc218 \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# .env \ud30c\uc77c\nDATABASE_URL=postgresql://user:pass@localhost/mydb\nSECRET_KEY=your-secret-key-here\nDEBUG=True\nLOG_LEVEL=INFO\nREDIS_HOST=localhost\nREDIS_PORT=6379\nAPI_KEY=your-api-key\nMAX_WORKERS=4\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# config.py\nimport os\nfrom pathlib import Path\nfrom typing import Optional\nfrom dotenv import load_dotenv\n\n# .env \ud30c\uc77c \ub85c\ub4dc\nload_dotenv()\n\n\nclass Config:\n    \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815\"\"\"\n\n    # \uae30\ubcf8 \uc124\uc815\n    BASE_DIR = Path(__file__).parent\n    DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'\n    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key')\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4\n    DATABASE_URL = os.getenv('DATABASE_URL')\n\n    # Redis\n    REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')\n    REDIS_PORT = int(os.getenv('REDIS_PORT', '6379'))\n\n    # \ub85c\uae45\n    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')\n\n    # API\n    API_KEY = os.getenv('API_KEY')\n    MAX_WORKERS = int(os.getenv('MAX_WORKERS', '4'))\n\n    @classmethod\n    def validate(cls) -> None:\n        \"\"\"\ud544\uc218 \uc124\uc815 \uac80\uc99d\"\"\"\n        required = ['DATABASE_URL', 'SECRET_KEY', 'API_KEY']\n        missing = [key for key in required if not getattr(cls, key)]\n\n        if missing:\n            raise ValueError(f\"Missing required config: {', '.join(missing)}\")\n\n\nclass DevelopmentConfig(Config):\n    \"\"\"\uac1c\ubc1c \ud658\uacbd \uc124\uc815\"\"\"\n    DEBUG = True\n    DATABASE_URL = 'sqlite:///dev.db'\n\n\nclass ProductionConfig(Config):\n    \"\"\"\ud504\ub85c\ub355\uc158 \ud658\uacbd \uc124\uc815\"\"\"\n    DEBUG = False\n\n\nclass TestingConfig(Config):\n    \"\"\"\ud14c\uc2a4\ud2b8 \ud658\uacbd \uc124\uc815\"\"\"\n    TESTING = True\n    DATABASE_URL = 'sqlite:///:memory:'\n\n\n# \ud658\uacbd\ubcc4 \uc124\uc815 \uc120\ud0dd\ndef get_config(env: Optional[str] = None) -> Config:\n    \"\"\"\ud658\uacbd\uc5d0 \ub9de\ub294 \uc124\uc815\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    env = env or os.getenv('FLASK_ENV', 'development')\n\n    configs = {\n        'development': DevelopmentConfig,\n        'production': ProductionConfig,\n        'testing': TestingConfig\n    }\n\n    return configs.get(env, DevelopmentConfig)\n\n\n# \uc0ac\uc6a9 \uc608\nconfig = get_config()\nconfig.validate()\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uc124\uc815-\ud30c\uc77c-\ud65c\uc6a9",children:"\uc124\uc815 \ud30c\uc77c \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# config.yaml\ndatabase:\n  host: localhost\n  port: 5432\n  name: mydb\n  user: admin\n  pool_size: 10\n\ncache:\n  type: redis\n  host: localhost\n  port: 6379\n  ttl: 3600\n\nlogging:\n  level: INFO\n  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"\n  handlers:\n    - type: file\n      filename: app.log\n      max_bytes: 10485760\n      backup_count: 5\n    - type: console\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# config_loader.py\nimport yaml\nfrom pathlib import Path\nfrom typing import Any, Dict\n\n\nclass ConfigLoader:\n    """\uc124\uc815 \ud30c\uc77c \ub85c\ub354"""\n\n    def __init__(self, config_file: str = "config.yaml"):\n        self.config_file = Path(config_file)\n        self._config: Dict[str, Any] = {}\n        self._load()\n\n    def _load(self) -> None:\n        """\uc124\uc815 \ud30c\uc77c\uc744 \ub85c\ub4dc\ud569\ub2c8\ub2e4."""\n        if not self.config_file.exists():\n            raise FileNotFoundError(f"Config file not found: {self.config_file}")\n\n        with open(self.config_file, \'r\', encoding=\'utf-8\') as f:\n            self._config = yaml.safe_load(f)\n\n    def get(self, key: str, default: Any = None) -> Any:\n        """\uc124\uc815 \uac12\uc744 \uac00\uc838\uc635\ub2c8\ub2e4 (\uc810 \ud45c\uae30\ubc95 \uc9c0\uc6d0)."""\n        keys = key.split(\'.\')\n        value = self._config\n\n        for k in keys:\n            if isinstance(value, dict):\n                value = value.get(k)\n            else:\n                return default\n\n        return value if value is not None else default\n\n    def __getitem__(self, key: str) -> Any:\n        """\ub515\uc154\ub108\ub9ac\ucc98\ub7fc \uc811\uadfc"""\n        return self.get(key)\n\n\n# \uc0ac\uc6a9 \uc608\nconfig = ConfigLoader()\n\ndb_host = config.get(\'database.host\')\ndb_port = config.get(\'database.port\')\ncache_ttl = config.get(\'cache.ttl\', 300)\n\nprint(f"Database: {db_host}:{db_port}")\nprint(f"Cache TTL: {cache_ttl}")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"612-\ubcf4\uc548",children:"6.12 \ubcf4\uc548"}),"\n",(0,r.jsx)(e.h3,{id:"\ube44\ubc00-\uc815\ubcf4-\uad00\ub9ac",children:"\ube44\ubc00 \uc815\ubcf4 \uad00\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# \uc88b\uc740 \uc608: \ud658\uacbd \ubcc0\uc218\ub85c \uad00\ub9ac\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nAPI_KEY = os.getenv('API_KEY')\nDATABASE_PASSWORD = os.getenv('DATABASE_PASSWORD')\nSECRET_KEY = os.getenv('SECRET_KEY')\n\n\n# \ub098\uc05c \uc608: \ucf54\ub4dc\uc5d0 \ud558\ub4dc\ucf54\ub529\nAPI_KEY = \"sk-1234567890abcdef\"  # \uc808\ub300 \ud558\uc9c0 \ub9c8\uc138\uc694!\nDATABASE_PASSWORD = \"mypassword123\"  # \uc808\ub300 \ud558\uc9c0 \ub9c8\uc138\uc694!\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uc785\ub825-\uac80\uc99d",children:"\uc785\ub825 \uac80\uc99d"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import re\nfrom typing import Optional\n\n\ndef validate_email(email: str) -> bool:\n    """\uc774\uba54\uc77c \uc8fc\uc18c \uac80\uc99d"""\n    pattern = r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\'\n    return bool(re.match(pattern, email))\n\n\ndef validate_username(username: str) -> tuple[bool, Optional[str]]:\n    """\uc0ac\uc6a9\uc790\uba85 \uac80\uc99d"""\n    if not username:\n        return False, "Username is required"\n\n    if len(username) < 3:\n        return False, "Username must be at least 3 characters"\n\n    if len(username) > 20:\n        return False, "Username must be less than 20 characters"\n\n    if not re.match(r\'^[a-zA-Z0-9_]+$\', username):\n        return False, "Username can only contain letters, numbers, and underscores"\n\n    return True, None\n\n\ndef sanitize_input(user_input: str) -> str:\n    """\uc0ac\uc6a9\uc790 \uc785\ub825 \uc815\uc81c (XSS \ubc29\uc9c0)"""\n    # HTML \ud0dc\uadf8 \uc81c\uac70\n    clean = re.sub(r\'<[^>]+>\', \'\', user_input)\n\n    # \ud2b9\uc218 \ubb38\uc790 \uc774\uc2a4\ucf00\uc774\ud504\n    clean = clean.replace(\'&\', \'&amp;\')\n    clean = clean.replace(\'<\', \'&lt;\')\n    clean = clean.replace(\'>\', \'&gt;\')\n    clean = clean.replace(\'"\', \'&quot;\')\n    clean = clean.replace("\'", \'&#x27;\')\n\n    return clean.strip()\n\n\n# SQL Injection \ubc29\uc9c0\nfrom typing import List, Any\n\n\ndef execute_query(query: str, params: tuple) -> List[Any]:\n    """\uc548\uc804\ud55c \ucffc\ub9ac \uc2e4\ud589 (\ud30c\ub77c\ubbf8\ud130\ud654\ub41c \ucffc\ub9ac \uc0ac\uc6a9)"""\n    # \uc88b\uc740 \uc608: \ud30c\ub77c\ubbf8\ud130\ud654\ub41c \ucffc\ub9ac\n    cursor.execute(\n        "SELECT * FROM users WHERE username = ? AND email = ?",\n        (username, email)\n    )\n\n    # \ub098\uc05c \uc608: \ubb38\uc790\uc5f4 \ud3ec\ub9e4\ud305 (SQL Injection \ucde8\uc57d!)\n    # cursor.execute(\n    #     f"SELECT * FROM users WHERE username = \'{username}\'"\n    # )\n\n    return cursor.fetchall()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ube44\ubc00\ubc88\ud638-\uad00\ub9ac",children:"\ube44\ubc00\ubc88\ud638 \uad00\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import hashlib\nimport secrets\nfrom typing import Tuple\n\n\ndef hash_password(password: str) -> Tuple[str, str]:\n    """\n    \ube44\ubc00\ubc88\ud638\ub97c \ud574\uc2dc\ud654\ud569\ub2c8\ub2e4.\n\n    Returns:\n        (salt, hashed_password) \ud29c\ud50c\n    """\n    # \uc194\ud2b8 \uc0dd\uc131\n    salt = secrets.token_hex(16)\n\n    # \ube44\ubc00\ubc88\ud638 \ud574\uc2dc\ud654 (SHA-256 + \uc194\ud2b8)\n    hashed = hashlib.pbkdf2_hmac(\n        \'sha256\',\n        password.encode(\'utf-8\'),\n        salt.encode(\'utf-8\'),\n        100000  # \ubc18\ubcf5 \ud69f\uc218\n    )\n\n    return salt, hashed.hex()\n\n\ndef verify_password(password: str, salt: str, hashed_password: str) -> bool:\n    """\ube44\ubc00\ubc88\ud638 \uac80\uc99d"""\n    hashed = hashlib.pbkdf2_hmac(\n        \'sha256\',\n        password.encode(\'utf-8\'),\n        salt.encode(\'utf-8\'),\n        100000\n    )\n\n    return hashed.hex() == hashed_password\n\n\n# \ub354 \ub098\uc740 \ubc29\ubc95: bcrypt \uc0ac\uc6a9\nimport bcrypt\n\n\ndef hash_password_bcrypt(password: str) -> str:\n    """bcrypt\ub85c \ube44\ubc00\ubc88\ud638 \ud574\uc2dc\ud654"""\n    salt = bcrypt.gensalt()\n    hashed = bcrypt.hashpw(password.encode(\'utf-8\'), salt)\n    return hashed.decode(\'utf-8\')\n\n\ndef verify_password_bcrypt(password: str, hashed: str) -> bool:\n    """bcrypt \ube44\ubc00\ubc88\ud638 \uac80\uc99d"""\n    return bcrypt.checkpw(\n        password.encode(\'utf-8\'),\n        hashed.encode(\'utf-8\')\n    )\n'})}),"\n",(0,r.jsx)(e.h2,{id:"613-\ud14c\uc2a4\ud305-\uc804\ub7b5",children:"6.13 \ud14c\uc2a4\ud305 \uc804\ub7b5"}),"\n",(0,r.jsx)(e.h3,{id:"unittest-\uae30\ubcf8",children:"unittest \uae30\ubcf8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# test_calculator.py\nimport unittest\nfrom calculator import Calculator\n\n\nclass TestCalculator(unittest.TestCase):\n    """\uacc4\uc0b0\uae30 \ud14c\uc2a4\ud2b8"""\n\n    def setUp(self):\n        """\uac01 \ud14c\uc2a4\ud2b8 \uc804\uc5d0 \uc2e4\ud589"""\n        self.calc = Calculator()\n\n    def tearDown(self):\n        """\uac01 \ud14c\uc2a4\ud2b8 \ud6c4\uc5d0 \uc2e4\ud589"""\n        pass\n\n    def test_add(self):\n        """\ub367\uc148 \ud14c\uc2a4\ud2b8"""\n        result = self.calc.add(2, 3)\n        self.assertEqual(result, 5)\n\n    def test_subtract(self):\n        """\ube84\uc148 \ud14c\uc2a4\ud2b8"""\n        result = self.calc.subtract(5, 3)\n        self.assertEqual(result, 2)\n\n    def test_divide_by_zero(self):\n        """0\uc73c\ub85c \ub098\ub204\uae30 \uc608\uc678 \ud14c\uc2a4\ud2b8"""\n        with self.assertRaises(ValueError):\n            self.calc.divide(10, 0)\n\n    def test_multiply_multiple_values(self):\n        """\uc5ec\ub7ec \uac12 \uacf1\uc148 \ud14c\uc2a4\ud2b8"""\n        test_cases = [\n            (2, 3, 6),\n            (0, 5, 0),\n            (-2, 3, -6),\n            (-2, -3, 6),\n        ]\n\n        for a, b, expected in test_cases:\n            with self.subTest(a=a, b=b):\n                result = self.calc.multiply(a, b)\n                self.assertEqual(result, expected)\n\n\nif __name__ == \'__main__\':\n    unittest.main()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"pytest-\ud65c\uc6a9",children:"pytest \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# test_user_service.py\nimport pytest\nfrom user_service import UserService, ValidationError\n\n\n@pytest.fixture\ndef user_service():\n    \"\"\"UserService \ud53d\uc2a4\ucc98\"\"\"\n    return UserService()\n\n\n@pytest.fixture\ndef sample_user():\n    \"\"\"\uc0d8\ud50c \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\"\"\"\n    return {\n        'username': 'john_doe',\n        'email': 'john@example.com',\n        'age': 30\n    }\n\n\ndef test_create_user(user_service, sample_user):\n    \"\"\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 \ud14c\uc2a4\ud2b8\"\"\"\n    user = user_service.create_user(**sample_user)\n\n    assert user.username == sample_user['username']\n    assert user.email == sample_user['email']\n    assert user.age == sample_user['age']\n\n\ndef test_create_user_invalid_email(user_service):\n    \"\"\"\uc798\ubabb\ub41c \uc774\uba54\uc77c\ub85c \uc0ac\uc6a9\uc790 \uc0dd\uc131 \uc2dc \uc608\uc678 \ubc1c\uc0dd\"\"\"\n    with pytest.raises(ValidationError) as exc_info:\n        user_service.create_user(\n            username='john',\n            email='invalid-email',\n            age=30\n        )\n\n    assert 'email' in str(exc_info.value).lower()\n\n\n@pytest.mark.parametrize('username,email,age,should_pass', [\n    ('john', 'john@example.com', 25, True),\n    ('jane', 'jane@example.com', 30, True),\n    ('', 'test@example.com', 25, False),  # \ube48 \uc0ac\uc6a9\uc790\uba85\n    ('bob', 'invalid-email', 25, False),  # \uc798\ubabb\ub41c \uc774\uba54\uc77c\n    ('alice', 'alice@example.com', -1, False),  # \uc74c\uc218 \ub098\uc774\n])\ndef test_create_user_various_inputs(\n    user_service,\n    username,\n    email,\n    age,\n    should_pass\n):\n    \"\"\"\ub2e4\uc591\ud55c \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ud14c\uc2a4\ud2b8\"\"\"\n    if should_pass:\n        user = user_service.create_user(username, email, age)\n        assert user is not None\n    else:\n        with pytest.raises(ValidationError):\n            user_service.create_user(username, email, age)\n\n\n# Mock \uc0ac\uc6a9\nfrom unittest.mock import Mock, patch\n\n\ndef test_send_welcome_email(user_service):\n    \"\"\"\ud658\uc601 \uc774\uba54\uc77c \uc804\uc1a1 \ud14c\uc2a4\ud2b8 (Mock \uc0ac\uc6a9)\"\"\"\n    with patch('user_service.email_sender') as mock_sender:\n        user = user_service.create_user(\n            'john',\n            'john@example.com',\n            30\n        )\n\n        user_service.send_welcome_email(user)\n\n        # \uc774\uba54\uc77c \uc804\uc1a1 \ud568\uc218\uac00 \uc62c\ubc14\ub978 \uc778\uc790\ub85c \ud638\ucd9c\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\n        mock_sender.send.assert_called_once_with(\n            to=user.email,\n            subject='Welcome!',\n            template='welcome.html'\n        )\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",children:"\ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# pytest-cov\ub85c \ucee4\ubc84\ub9ac\uc9c0 \uce21\uc815\npytest --cov=my_package --cov-report=html --cov-report=term\n\n# \ucee4\ubc84\ub9ac\uc9c0 \ub9ac\ud3ec\ud2b8 \ud655\uc778\n# htmlcov/index.html \ud30c\uc77c\uc744 \ube0c\ub77c\uc6b0\uc800\ub85c \uc5f4\uae30\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# conftest.py - pytest \uc124\uc815\nimport pytest\nfrom my_app import create_app, db\n\n\n@pytest.fixture(scope=\'session\')\ndef app():\n    """\ud14c\uc2a4\ud2b8\uc6a9 Flask \uc571"""\n    app = create_app(\'testing\')\n    return app\n\n\n@pytest.fixture(scope=\'function\')\ndef client(app):\n    """\ud14c\uc2a4\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8"""\n    return app.test_client()\n\n\n@pytest.fixture(scope=\'function\')\ndef database(app):\n    """\ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ubca0\uc774\uc2a4"""\n    with app.app_context():\n        db.create_all()\n        yield db\n        db.session.remove()\n        db.drop_all()\n\n\n@pytest.fixture\ndef authenticated_client(client, database):\n    """\uc778\uc99d\ub41c \ud074\ub77c\uc774\uc5b8\ud2b8"""\n    # \ud14c\uc2a4\ud2b8 \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    user = User(username=\'testuser\', email=\'test@example.com\')\n    database.session.add(user)\n    database.session.commit()\n\n    # \ub85c\uadf8\uc778\n    client.post(\'/login\', json={\n        \'username\': \'testuser\',\n        \'password\': \'password\'\n    })\n\n    return client\n'})}),"\n",(0,r.jsx)(e.h2,{id:"614-\uc131\ub2a5-\uace0\ub824\uc0ac\ud56d",children:"6.14 \uc131\ub2a5 \uace0\ub824\uc0ac\ud56d"}),"\n",(0,r.jsx)(e.h3,{id:"\ud504\ub85c\ud30c\uc77c\ub9c1",children:"\ud504\ub85c\ud30c\uc77c\ub9c1"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import cProfile\nimport pstats\nfrom functools import wraps\nimport time\n\n\ndef profile_function(func):\n    """\ud568\uc218 \ud504\ub85c\ud30c\uc77c\ub9c1 \ub370\ucf54\ub808\uc774\ud130"""\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        profiler = cProfile.Profile()\n        profiler.enable()\n\n        result = func(*args, **kwargs)\n\n        profiler.disable()\n        stats = pstats.Stats(profiler)\n        stats.sort_stats(\'cumulative\')\n        stats.print_stats(20)  # \uc0c1\uc704 20\uac1c \ucd9c\ub825\n\n        return result\n\n    return wrapper\n\n\ndef time_function(func):\n    """\ud568\uc218 \uc2e4\ud589 \uc2dc\uac04 \uce21\uc815 \ub370\ucf54\ub808\uc774\ud130"""\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        elapsed = time.time() - start_time\n\n        print(f"{func.__name__} took {elapsed:.4f} seconds")\n        return result\n\n    return wrapper\n\n\n@profile_function\n@time_function\ndef process_large_data(data):\n    """\ub300\uc6a9\ub7c9 \ub370\uc774\ud130 \ucc98\ub9ac"""\n    return [item * 2 for item in data if item > 0]\n\n\n# \uc0ac\uc6a9 \uc608\ndata = list(range(1_000_000))\nresult = process_large_data(data)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654-\uae30\ubc95",children:"\uc131\ub2a5 \ucd5c\uc801\ud654 \uae30\ubc95"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# 1. \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 vs \ubc18\ubcf5\ubb38\n# \ube60\ub984\nsquares = [x**2 for x in range(1000)]\n\n# \ub290\ub9bc\nsquares = []\nfor x in range(1000):\n    squares.append(x**2)\n\n\n# 2. \uc81c\ub108\ub808\uc774\ud130 \uc0ac\uc6a9 (\uba54\ubaa8\ub9ac \ud6a8\uc728)\n# \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\ndef read_large_file(filename):\n    \"\"\"\ub300\uc6a9\ub7c9 \ud30c\uc77c\uc744 \uc904 \ub2e8\uc704\ub85c \uc77d\uae30\"\"\"\n    with open(filename, 'r') as f:\n        for line in f:\n            yield line.strip()\n\n# \uba54\ubaa8\ub9ac \ube44\ud6a8\uc728\uc801\ndef read_large_file_bad(filename):\n    with open(filename, 'r') as f:\n        return [line.strip() for line in f]  # \uc804\uccb4\ub97c \uba54\ubaa8\ub9ac\uc5d0 \ub85c\ub4dc\n\n\n# 3. \ub515\uc154\ub108\ub9ac \uc870\ud68c vs \ub9ac\uc2a4\ud2b8 \uc21c\ud68c\n# O(1) - \ube60\ub984\nuser_dict = {user.id: user for user in users}\nuser = user_dict.get(user_id)\n\n# O(n) - \ub290\ub9bc\nuser = next((u for u in users if u.id == user_id), None)\n\n\n# 4. set \uc0ac\uc6a9\n# \uc911\ubcf5 \uc81c\uac70 - \ube60\ub984\nunique_items = set(items)\n\n# \uba64\ubc84\uc2ed \ud14c\uc2a4\ud2b8 - \ube60\ub984\nif item in unique_items:  # O(1)\n    pass\n\n# \ub9ac\uc2a4\ud2b8\uc758 \uba64\ubc84\uc2ed \ud14c\uc2a4\ud2b8 - \ub290\ub9bc\nif item in items_list:  # O(n)\n    pass\n\n\n# 5. \ubb38\uc790\uc5f4 \uc5f0\uacb0\n# \ube60\ub984\nresult = ''.join(string_list)\n\n# \ub290\ub9bc (\ub9ce\uc740 \ubb38\uc790\uc5f4\uc744 \uc5f0\uacb0\ud560 \ub54c)\nresult = ''\nfor s in string_list:\n    result += s\n\n\n# 6. \uc9c0\uc5ed \ubcc0\uc218 \ud65c\uc6a9\ndef process_data(data):\n    # \ube60\ub984: \uc9c0\uc5ed \ubcc0\uc218\ub85c \uc800\uc7a5\n    append = result.append  # \uba54\uc11c\ub4dc \uc870\ud68c\ub97c \ud55c \ubc88\ub9cc \uc218\ud589\n\n    for item in data:\n        append(item * 2)\n\n    # \ub290\ub9bc: \ub9e4\ubc88 \uba54\uc11c\ub4dc \uc870\ud68c\n    for item in data:\n        result.append(item * 2)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uce90\uc2f1",children:"\uce90\uc2f1"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from functools import lru_cache\nimport time\n\n\n@lru_cache(maxsize=128)\ndef fibonacci(n: int) -> int:\n    """\ud53c\ubcf4\ub098\uce58 \uc218 \uacc4\uc0b0 (\uba54\ubaa8\uc774\uc81c\uc774\uc158)"""\n    if n < 2:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\n# \ucee4\uc2a4\ud140 \uce90\uc2dc \ub370\ucf54\ub808\uc774\ud130\nfrom typing import Callable, Any\nimport hashlib\nimport json\n\n\nclass CacheWithTTL:\n    """TTL\uc744 \uac00\uc9c4 \uce90\uc2dc"""\n\n    def __init__(self, ttl: int = 300):\n        self.ttl = ttl\n        self.cache = {}\n\n    def __call__(self, func: Callable) -> Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # \uce90\uc2dc \ud0a4 \uc0dd\uc131\n            key = self._make_key(func.__name__, args, kwargs)\n\n            # \uce90\uc2dc \ud655\uc778\n            if key in self.cache:\n                value, timestamp = self.cache[key]\n                if time.time() - timestamp < self.ttl:\n                    return value\n\n            # \ud568\uc218 \uc2e4\ud589 \ubc0f \uce90\uc2dc \uc800\uc7a5\n            result = func(*args, **kwargs)\n            self.cache[key] = (result, time.time())\n\n            return result\n\n        return wrapper\n\n    def _make_key(self, name: str, args: tuple, kwargs: dict) -> str:\n        """\uce90\uc2dc \ud0a4 \uc0dd\uc131"""\n        key_data = {\n            \'name\': name,\n            \'args\': args,\n            \'kwargs\': kwargs\n        }\n        key_str = json.dumps(key_data, sort_keys=True)\n        return hashlib.md5(key_str.encode()).hexdigest()\n\n\n@CacheWithTTL(ttl=60)\ndef expensive_operation(x: int) -> int:\n    """\ube44\uc6a9\uc774 \ud070 \uc5f0\uc0b0"""\n    time.sleep(2)\n    return x ** 2\n'})}),"\n",(0,r.jsx)(e.h2,{id:"615-solid-\uc6d0\uce59",children:"6.15 SOLID \uc6d0\uce59"}),"\n",(0,r.jsx)(e.h3,{id:"single-responsibility-principle-\ub2e8\uc77c-\ucc45\uc784-\uc6d0\uce59",children:"Single Responsibility Principle (\ub2e8\uc77c \ucc45\uc784 \uc6d0\uce59)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub098\uc05c \uc608: \uc5ec\ub7ec \ucc45\uc784\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\nclass User:\n    def __init__(self, name: str, email: str):\n        self.name = name\n        self.email = email\n\n    def save_to_database(self):\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5\n        pass\n\n    def send_email(self, message: str):\n        # \uc774\uba54\uc77c \uc804\uc1a1\n        pass\n\n    def generate_report(self):\n        # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n        pass\n\n\n# \uc88b\uc740 \uc608: \ub2e8\uc77c \ucc45\uc784\uc73c\ub85c \ubd84\ub9ac\nclass User:\n    """\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ubaa8\ub378"""\n    def __init__(self, name: str, email: str):\n        self.name = name\n        self.email = email\n\n\nclass UserRepository:\n    """\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \uc800\uc7a5"""\n    def save(self, user: User) -> None:\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5\n        pass\n\n    def find_by_id(self, user_id: int) -> User:\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc870\ud68c\n        pass\n\n\nclass EmailService:\n    """\uc774\uba54\uc77c \uc804\uc1a1"""\n    def send(self, to: str, message: str) -> None:\n        # \uc774\uba54\uc77c \uc804\uc1a1\n        pass\n\n\nclass ReportGenerator:\n    """\ub9ac\ud3ec\ud2b8 \uc0dd\uc131"""\n    def generate_user_report(self, user: User) -> str:\n        # \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\n        pass\n'})}),"\n",(0,r.jsx)(e.h3,{id:"openclosed-principle-\uac1c\ubc29\ud3d0\uc1c4-\uc6d0\uce59",children:"Open/Closed Principle (\uac1c\ubc29/\ud3d0\uc1c4 \uc6d0\uce59)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n\n# \ub098\uc05c \uc608: \uc0c8\ub85c\uc6b4 \ud560\uc778 \ud0c0\uc785\ub9c8\ub2e4 \uc218\uc815 \ud544\uc694\nclass DiscountCalculator:\n    def calculate(self, price: float, discount_type: str) -> float:\n        if discount_type == "percentage":\n            return price * 0.9\n        elif discount_type == "fixed":\n            return price - 10\n        elif discount_type == "none":\n            return price\n        # \uc0c8\ub85c\uc6b4 \ud0c0\uc785\uc774 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 \uc218\uc815 \ud544\uc694!\n\n\n# \uc88b\uc740 \uc608: \ud655\uc7a5\uc5d0\ub294 \uc5f4\ub824\uc788\uace0 \uc218\uc815\uc5d0\ub294 \ub2eb\ud600\uc788\uc74c\nclass Discount(ABC):\n    """\ud560\uc778 \ucd94\uc0c1 \ud074\ub798\uc2a4"""\n\n    @abstractmethod\n    def apply(self, price: float) -> float:\n        pass\n\n\nclass PercentageDiscount(Discount):\n    def __init__(self, percentage: float):\n        self.percentage = percentage\n\n    def apply(self, price: float) -> float:\n        return price * (1 - self.percentage)\n\n\nclass FixedDiscount(Discount):\n    def __init__(self, amount: float):\n        self.amount = amount\n\n    def apply(self, price: float) -> float:\n        return max(0, price - self.amount)\n\n\nclass NoDiscount(Discount):\n    def apply(self, price: float) -> float:\n        return price\n\n\nclass SeasonalDiscount(Discount):\n    """\uc0c8\ub85c\uc6b4 \ud560\uc778 \ud0c0\uc785 - \uae30\uc874 \ucf54\ub4dc \uc218\uc815 \uc5c6\uc774 \ucd94\uac00"""\n    def __init__(self, season_rate: float):\n        self.season_rate = season_rate\n\n    def apply(self, price: float) -> float:\n        return price * (1 - self.season_rate)\n\n\n# \uc0ac\uc6a9\ndef calculate_final_price(price: float, discount: Discount) -> float:\n    return discount.apply(price)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"liskov-substitution-principle-\ub9ac\uc2a4\ucf54\ud504-\uce58\ud658-\uc6d0\uce59",children:"Liskov Substitution Principle (\ub9ac\uc2a4\ucf54\ud504 \uce58\ud658 \uc6d0\uce59)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub098\uc05c \uc608: \uc790\uc2dd \ud074\ub798\uc2a4\uac00 \ubd80\ubaa8\uc758 \uacc4\uc57d\uc744 \uc704\ubc18\nclass Bird:\n    def fly(self):\n        return "Flying high!"\n\n\nclass Penguin(Bird):\n    def fly(self):\n        raise NotImplementedError("Penguins can\'t fly!")  # \uacc4\uc57d \uc704\ubc18!\n\n\n# \uc88b\uc740 \uc608: \uc62c\ubc14\ub978 \ucd94\uc0c1\ud654\nclass Bird(ABC):\n    @abstractmethod\n    def move(self):\n        pass\n\n\nclass FlyingBird(Bird):\n    def move(self):\n        return self.fly()\n\n    def fly(self):\n        return "Flying high!"\n\n\nclass Penguin(Bird):\n    def move(self):\n        return self.swim()\n\n    def swim(self):\n        return "Swimming fast!"\n\n\nclass Sparrow(FlyingBird):\n    def fly(self):\n        return "Sparrow flying!"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"interface-segregation-principle-\uc778\ud130\ud398\uc774\uc2a4-\ubd84\ub9ac-\uc6d0\uce59",children:"Interface Segregation Principle (\uc778\ud130\ud398\uc774\uc2a4 \ubd84\ub9ac \uc6d0\uce59)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub098\uc05c \uc608: \ub108\ubb34 \ud070 \uc778\ud130\ud398\uc774\uc2a4\nclass Worker(ABC):\n    @abstractmethod\n    def work(self):\n        pass\n\n    @abstractmethod\n    def eat(self):\n        pass\n\n    @abstractmethod\n    def sleep(self):\n        pass\n\n\nclass Robot(Worker):\n    def work(self):\n        return "Working"\n\n    def eat(self):\n        raise NotImplementedError("Robots don\'t eat!")  # \ubd88\ud544\uc694\ud55c \uba54\uc11c\ub4dc!\n\n    def sleep(self):\n        raise NotImplementedError("Robots don\'t sleep!")  # \ubd88\ud544\uc694\ud55c \uba54\uc11c\ub4dc!\n\n\n# \uc88b\uc740 \uc608: \uc791\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub85c \ubd84\ub9ac\nclass Workable(ABC):\n    @abstractmethod\n    def work(self):\n        pass\n\n\nclass Eatable(ABC):\n    @abstractmethod\n    def eat(self):\n        pass\n\n\nclass Sleepable(ABC):\n    @abstractmethod\n    def sleep(self):\n        pass\n\n\nclass Human(Workable, Eatable, Sleepable):\n    def work(self):\n        return "Human working"\n\n    def eat(self):\n        return "Human eating"\n\n    def sleep(self):\n        return "Human sleeping"\n\n\nclass Robot(Workable):\n    def work(self):\n        return "Robot working"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"dependency-inversion-principle-\uc758\uc874\uc131-\uc5ed\uc804-\uc6d0\uce59",children:"Dependency Inversion Principle (\uc758\uc874\uc131 \uc5ed\uc804 \uc6d0\uce59)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# \ub098\uc05c \uc608: \uace0\uc218\uc900 \ubaa8\ub4c8\uc774 \uc800\uc218\uc900 \ubaa8\ub4c8\uc5d0 \uc758\uc874\nclass MySQLDatabase:\n    def save(self, data):\n        print(f"Saving to MySQL: {data}")\n\n\nclass UserService:\n    def __init__(self):\n        self.db = MySQLDatabase()  # \uad6c\uccb4\uc801\uc778 \ud074\ub798\uc2a4\uc5d0 \uc758\uc874!\n\n    def create_user(self, user_data):\n        self.db.save(user_data)\n\n\n# \uc88b\uc740 \uc608: \ucd94\uc0c1\ud654\uc5d0 \uc758\uc874\nclass Database(ABC):\n    @abstractmethod\n    def save(self, data):\n        pass\n\n\nclass MySQLDatabase(Database):\n    def save(self, data):\n        print(f"Saving to MySQL: {data}")\n\n\nclass PostgreSQLDatabase(Database):\n    def save(self, data):\n        print(f"Saving to PostgreSQL: {data}")\n\n\nclass MongoDatabase(Database):\n    def save(self, data):\n        print(f"Saving to MongoDB: {data}")\n\n\nclass UserService:\n    def __init__(self, database: Database):  # \ucd94\uc0c1\ud654\uc5d0 \uc758\uc874!\n        self.db = database\n\n    def create_user(self, user_data):\n        self.db.save(user_data)\n\n\n# \uc0ac\uc6a9 - \uc758\uc874\uc131 \uc8fc\uc785\nmysql_db = MySQLDatabase()\nuser_service = UserService(mysql_db)\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad50\uccb4 \uac00\ub2a5\npostgres_db = PostgreSQLDatabase()\nuser_service = UserService(postgres_db)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"616-\ub514\uc790\uc778-\ud328\ud134",children:"6.16 \ub514\uc790\uc778 \ud328\ud134"}),"\n",(0,r.jsx)(e.h3,{id:"singleton-\ud328\ud134",children:"Singleton \ud328\ud134"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'class DatabaseConnection:\n    """\uc2f1\uae00\ud1a4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0"""\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            cls._instance._initialize()\n        return cls._instance\n\n    def _initialize(self):\n        """\ucd08\uae30\ud654 (\ud55c \ubc88\ub9cc \uc2e4\ud589)"""\n        self.connection = "Database connection established"\n\n    def query(self, sql: str):\n        return f"Executing: {sql}"\n\n\n# Thread-safe Singleton\nimport threading\n\n\nclass ThreadSafeSingleton:\n    _instance = None\n    _lock = threading.Lock()\n\n    def __new__(cls):\n        if cls._instance is None:\n            with cls._lock:\n                if cls._instance is None:\n                    cls._instance = super().__new__(cls)\n        return cls._instance\n'})}),"\n",(0,r.jsx)(e.h3,{id:"factory-\ud328\ud134",children:"Factory \ud328\ud134"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from abc import ABC, abstractmethod\n\n\nclass PaymentProcessor(ABC):\n    \"\"\"\uacb0\uc81c \ucc98\ub9ac \ucd94\uc0c1 \ud074\ub798\uc2a4\"\"\"\n\n    @abstractmethod\n    def process_payment(self, amount: float) -> dict:\n        pass\n\n\nclass CreditCardProcessor(PaymentProcessor):\n    def process_payment(self, amount: float) -> dict:\n        return {\n            'method': 'credit_card',\n            'amount': amount,\n            'status': 'success'\n        }\n\n\nclass PayPalProcessor(PaymentProcessor):\n    def process_payment(self, amount: float) -> dict:\n        return {\n            'method': 'paypal',\n            'amount': amount,\n            'status': 'success'\n        }\n\n\nclass BankTransferProcessor(PaymentProcessor):\n    def process_payment(self, amount: float) -> dict:\n        return {\n            'method': 'bank_transfer',\n            'amount': amount,\n            'status': 'pending'\n        }\n\n\nclass PaymentProcessorFactory:\n    \"\"\"\uacb0\uc81c \ucc98\ub9ac\uae30 \ud329\ud1a0\ub9ac\"\"\"\n\n    _processors = {\n        'credit_card': CreditCardProcessor,\n        'paypal': PayPalProcessor,\n        'bank_transfer': BankTransferProcessor\n    }\n\n    @classmethod\n    def create(cls, payment_method: str) -> PaymentProcessor:\n        \"\"\"\uacb0\uc81c \ucc98\ub9ac\uae30 \uc0dd\uc131\"\"\"\n        processor_class = cls._processors.get(payment_method)\n\n        if not processor_class:\n            raise ValueError(f\"Unknown payment method: {payment_method}\")\n\n        return processor_class()\n\n\n# \uc0ac\uc6a9\nfactory = PaymentProcessorFactory()\nprocessor = factory.create('paypal')\nresult = processor.process_payment(100.0)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"observer-\ud328\ud134",children:"Observer \ud328\ud134"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from typing import List, Protocol\n\n\nclass Observer(Protocol):\n    """\uc635\uc800\ubc84 \ud504\ub85c\ud1a0\ucf5c"""\n    def update(self, subject: \'Subject\') -> None:\n        ...\n\n\nclass Subject:\n    """\uc8fc\uc81c (\uad00\ucc30 \ub300\uc0c1)"""\n\n    def __init__(self):\n        self._observers: List[Observer] = []\n        self._state = None\n\n    def attach(self, observer: Observer) -> None:\n        """\uc635\uc800\ubc84 \ub4f1\ub85d"""\n        if observer not in self._observers:\n            self._observers.append(observer)\n\n    def detach(self, observer: Observer) -> None:\n        """\uc635\uc800\ubc84 \uc81c\uac70"""\n        self._observers.remove(observer)\n\n    def notify(self) -> None:\n        """\ubaa8\ub4e0 \uc635\uc800\ubc84\uc5d0\uac8c \uc54c\ub9bc"""\n        for observer in self._observers:\n            observer.update(self)\n\n    @property\n    def state(self):\n        return self._state\n\n    @state.setter\n    def state(self, value):\n        self._state = value\n        self.notify()\n\n\nclass EmailNotifier:\n    """\uc774\uba54\uc77c \uc54c\ub9bc \uc635\uc800\ubc84"""\n    def update(self, subject: Subject) -> None:\n        print(f"Email: State changed to {subject.state}")\n\n\nclass SMSNotifier:\n    """SMS \uc54c\ub9bc \uc635\uc800\ubc84"""\n    def update(self, subject: Subject) -> None:\n        print(f"SMS: State changed to {subject.state}")\n\n\nclass Logger:\n    """\ub85c\uae45 \uc635\uc800\ubc84"""\n    def update(self, subject: Subject) -> None:\n        print(f"Log: State changed to {subject.state}")\n\n\n# \uc0ac\uc6a9\nsubject = Subject()\n\nemail_notifier = EmailNotifier()\nsms_notifier = SMSNotifier()\nlogger = Logger()\n\nsubject.attach(email_notifier)\nsubject.attach(sms_notifier)\nsubject.attach(logger)\n\nsubject.state = "New Order"  # \ubaa8\ub4e0 \uc635\uc800\ubc84\uc5d0\uac8c \uc54c\ub9bc\n'})}),"\n",(0,r.jsx)(e.h3,{id:"strategy-\ud328\ud134",children:"Strategy \ud328\ud134"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from abc import ABC, abstractmethod\nfrom typing import List\n\n\nclass SortStrategy(ABC):\n    """\uc815\ub82c \uc804\ub7b5 \ucd94\uc0c1 \ud074\ub798\uc2a4"""\n\n    @abstractmethod\n    def sort(self, data: List[int]) -> List[int]:\n        pass\n\n\nclass BubbleSort(SortStrategy):\n    def sort(self, data: List[int]) -> List[int]:\n        print("Using Bubble Sort")\n        result = data.copy()\n        n = len(result)\n        for i in range(n):\n            for j in range(0, n - i - 1):\n                if result[j] > result[j + 1]:\n                    result[j], result[j + 1] = result[j + 1], result[j]\n        return result\n\n\nclass QuickSort(SortStrategy):\n    def sort(self, data: List[int]) -> List[int]:\n        print("Using Quick Sort")\n        if len(data) <= 1:\n            return data\n        pivot = data[len(data) // 2]\n        left = [x for x in data if x < pivot]\n        middle = [x for x in data if x == pivot]\n        right = [x for x in data if x > pivot]\n        return self.sort(left) + middle + self.sort(right)\n\n\nclass MergeSort(SortStrategy):\n    def sort(self, data: List[int]) -> List[int]:\n        print("Using Merge Sort")\n        if len(data) <= 1:\n            return data\n\n        mid = len(data) // 2\n        left = self.sort(data[:mid])\n        right = self.sort(data[mid:])\n\n        return self._merge(left, right)\n\n    def _merge(self, left: List[int], right: List[int]) -> List[int]:\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n\nclass Sorter:\n    """\uc815\ub82c \ucee8\ud14d\uc2a4\ud2b8"""\n\n    def __init__(self, strategy: SortStrategy):\n        self._strategy = strategy\n\n    def set_strategy(self, strategy: SortStrategy):\n        """\uc815\ub82c \uc804\ub7b5 \ubcc0\uacbd"""\n        self._strategy = strategy\n\n    def sort(self, data: List[int]) -> List[int]:\n        """\uc804\ub7b5\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\ub82c"""\n        return self._strategy.sort(data)\n\n\n# \uc0ac\uc6a9\ndata = [64, 34, 25, 12, 22, 11, 90]\n\nsorter = Sorter(BubbleSort())\nresult = sorter.sort(data)\n\n# \uc804\ub7b5 \ubcc0\uacbd\nsorter.set_strategy(QuickSort())\nresult = sorter.sort(data)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"decorator-\ud328\ud134",children:"Decorator \ud328\ud134"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\n\nclass Coffee(ABC):\n    """\ucee4\ud53c \ucd94\uc0c1 \ud074\ub798\uc2a4"""\n\n    @abstractmethod\n    def cost(self) -> float:\n        pass\n\n    @abstractmethod\n    def description(self) -> str:\n        pass\n\n\nclass SimpleCoffee(Coffee):\n    """\uae30\ubcf8 \ucee4\ud53c"""\n\n    def cost(self) -> float:\n        return 2.0\n\n    def description(self) -> str:\n        return "Simple Coffee"\n\n\nclass CoffeeDecorator(Coffee):\n    """\ucee4\ud53c \ub370\ucf54\ub808\uc774\ud130"""\n\n    def __init__(self, coffee: Coffee):\n        self._coffee = coffee\n\n    def cost(self) -> float:\n        return self._coffee.cost()\n\n    def description(self) -> str:\n        return self._coffee.description()\n\n\nclass Milk(CoffeeDecorator):\n    """\uc6b0\uc720 \ucd94\uac00"""\n\n    def cost(self) -> float:\n        return self._coffee.cost() + 0.5\n\n    def description(self) -> str:\n        return self._coffee.description() + ", Milk"\n\n\nclass Sugar(CoffeeDecorator):\n    """\uc124\ud0d5 \ucd94\uac00"""\n\n    def cost(self) -> float:\n        return self._coffee.cost() + 0.2\n\n    def description(self) -> str:\n        return self._coffee.description() + ", Sugar"\n\n\nclass WhippedCream(CoffeeDecorator):\n    """\ud718\ud551\ud06c\ub9bc \ucd94\uac00"""\n\n    def cost(self) -> float:\n        return self._coffee.cost() + 0.7\n\n    def description(self) -> str:\n        return self._coffee.description() + ", Whipped Cream"\n\n\n# \uc0ac\uc6a9\ncoffee = SimpleCoffee()\nprint(f"{coffee.description()} costs ${coffee.cost()}")\n\n# \uc6b0\uc720 \ucd94\uac00\ncoffee = Milk(coffee)\nprint(f"{coffee.description()} costs ${coffee.cost()}")\n\n# \uc124\ud0d5 \ucd94\uac00\ncoffee = Sugar(coffee)\nprint(f"{coffee.description()} costs ${coffee.cost()}")\n\n# \ud718\ud551\ud06c\ub9bc \ucd94\uac00\ncoffee = WhippedCream(coffee)\nprint(f"{coffee.description()} costs ${coffee.cost()}")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"617-\uc2e4\uc804-\uc608\uc81c",children:"6.17 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,r.jsx)(e.h3,{id:"\uc798-\uad6c\uc870\ud654\ub41c-\ud504\ub85c\uc81d\ud2b8-\uc608\uc81c",children:"\uc798 \uad6c\uc870\ud654\ub41c \ud504\ub85c\uc81d\ud2b8 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# src/ecommerce/models/product.py\nfrom dataclasses import dataclass\nfrom decimal import Decimal\nfrom typing import Optional\n\n\n@dataclass\nclass Product:\n    """\uc0c1\ud488 \ubaa8\ub378"""\n    id: int\n    name: str\n    price: Decimal\n    stock: int\n    category: str\n    description: Optional[str] = None\n\n    def is_available(self) -> bool:\n        """\uc7ac\uace0 \ud655\uc778"""\n        return self.stock > 0\n\n    def update_stock(self, quantity: int) -> None:\n        """\uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8"""\n        if self.stock + quantity < 0:\n            raise ValueError("Insufficient stock")\n        self.stock += quantity\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# src/ecommerce/repositories/product_repository.py\nfrom typing import List, Optional\nfrom ecommerce.models.product import Product\n\n\nclass ProductRepository:\n    """\uc0c1\ud488 \uc800\uc7a5\uc18c"""\n\n    def __init__(self, db_connection):\n        self.db = db_connection\n\n    def find_by_id(self, product_id: int) -> Optional[Product]:\n        """ID\ub85c \uc0c1\ud488 \uc870\ud68c"""\n        query = "SELECT * FROM products WHERE id = ?"\n        result = self.db.execute(query, (product_id,))\n\n        if not result:\n            return None\n\n        return self._map_to_product(result[0])\n\n    def find_all(self) -> List[Product]:\n        """\ubaa8\ub4e0 \uc0c1\ud488 \uc870\ud68c"""\n        query = "SELECT * FROM products"\n        results = self.db.execute(query)\n        return [self._map_to_product(row) for row in results]\n\n    def save(self, product: Product) -> Product:\n        """\uc0c1\ud488 \uc800\uc7a5"""\n        query = """\n            INSERT INTO products (name, price, stock, category, description)\n            VALUES (?, ?, ?, ?, ?)\n        """\n        self.db.execute(query, (\n            product.name,\n            product.price,\n            product.stock,\n            product.category,\n            product.description\n        ))\n        return product\n\n    def _map_to_product(self, row: tuple) -> Product:\n        """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud589\uc744 Product\ub85c \ubcc0\ud658"""\n        return Product(\n            id=row[0],\n            name=row[1],\n            price=row[2],\n            stock=row[3],\n            category=row[4],\n            description=row[5]\n        )\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# src/ecommerce/services/product_service.py\nfrom typing import List, Optional\nfrom decimal import Decimal\nimport logging\n\nfrom ecommerce.models.product import Product\nfrom ecommerce.repositories.product_repository import ProductRepository\nfrom ecommerce.exceptions import ProductNotFoundError, InsufficientStockError\n\nlogger = logging.getLogger(__name__)\n\n\nclass ProductService:\n    """\uc0c1\ud488 \uc11c\ube44\uc2a4"""\n\n    def __init__(self, product_repository: ProductRepository):\n        self.product_repo = product_repository\n\n    def get_product(self, product_id: int) -> Product:\n        """\uc0c1\ud488 \uc870\ud68c"""\n        logger.info(f"Getting product: {product_id}")\n\n        product = self.product_repo.find_by_id(product_id)\n        if not product:\n            logger.warning(f"Product not found: {product_id}")\n            raise ProductNotFoundError(f"Product {product_id} not found")\n\n        return product\n\n    def get_all_products(self) -> List[Product]:\n        """\ubaa8\ub4e0 \uc0c1\ud488 \uc870\ud68c"""\n        logger.info("Getting all products")\n        return self.product_repo.find_all()\n\n    def create_product(\n        self,\n        name: str,\n        price: Decimal,\n        stock: int,\n        category: str,\n        description: Optional[str] = None\n    ) -> Product:\n        """\uc0c8 \uc0c1\ud488 \uc0dd\uc131"""\n        logger.info(f"Creating product: {name}")\n\n        product = Product(\n            id=0,  # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc790\ub3d9 \ud560\ub2f9\n            name=name,\n            price=price,\n            stock=stock,\n            category=category,\n            description=description\n        )\n\n        saved_product = self.product_repo.save(product)\n        logger.info(f"Product created: {saved_product.id}")\n\n        return saved_product\n\n    def update_stock(self, product_id: int, quantity: int) -> Product:\n        """\uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8"""\n        logger.info(f"Updating stock for product {product_id}: {quantity}")\n\n        product = self.get_product(product_id)\n\n        try:\n            product.update_stock(quantity)\n            self.product_repo.save(product)\n            logger.info(f"Stock updated for product {product_id}")\n            return product\n        except ValueError as e:\n            logger.error(f"Insufficient stock for product {product_id}")\n            raise InsufficientStockError(str(e))\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc124\uc815-\uad00\ub9ac-\uc2e4\uc804-\uc608\uc81c",children:"\uc124\uc815 \uad00\ub9ac \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# src/ecommerce/config.py\nimport os\nfrom pathlib import Path\nfrom typing import Optional\nfrom dataclasses import dataclass\nfrom dotenv import load_dotenv\n\n# .env \ud30c\uc77c \ub85c\ub4dc\nload_dotenv()\n\n\n@dataclass\nclass DatabaseConfig:\n    \"\"\"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815\"\"\"\n    host: str\n    port: int\n    name: str\n    user: str\n    password: str\n    pool_size: int = 10\n\n    @property\n    def connection_url(self) -> str:\n        \"\"\"\uc5f0\uacb0 URL \uc0dd\uc131\"\"\"\n        return f\"postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.name}\"\n\n\n@dataclass\nclass RedisConfig:\n    \"\"\"Redis \uc124\uc815\"\"\"\n    host: str\n    port: int\n    db: int = 0\n    password: Optional[str] = None\n\n\n@dataclass\nclass AppConfig:\n    \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815\"\"\"\n    debug: bool\n    secret_key: str\n    log_level: str\n    database: DatabaseConfig\n    redis: RedisConfig\n\n    @classmethod\n    def from_env(cls) -> 'AppConfig':\n        \"\"\"\ud658\uacbd \ubcc0\uc218\uc5d0\uc11c \uc124\uc815 \ub85c\ub4dc\"\"\"\n        return cls(\n            debug=os.getenv('DEBUG', 'False').lower() == 'true',\n            secret_key=os.getenv('SECRET_KEY', 'dev-secret-key'),\n            log_level=os.getenv('LOG_LEVEL', 'INFO'),\n            database=DatabaseConfig(\n                host=os.getenv('DB_HOST', 'localhost'),\n                port=int(os.getenv('DB_PORT', '5432')),\n                name=os.getenv('DB_NAME', 'ecommerce'),\n                user=os.getenv('DB_USER', 'postgres'),\n                password=os.getenv('DB_PASSWORD', ''),\n                pool_size=int(os.getenv('DB_POOL_SIZE', '10'))\n            ),\n            redis=RedisConfig(\n                host=os.getenv('REDIS_HOST', 'localhost'),\n                port=int(os.getenv('REDIS_PORT', '6379')),\n                db=int(os.getenv('REDIS_DB', '0')),\n                password=os.getenv('REDIS_PASSWORD')\n            )\n        )\n\n    def validate(self) -> None:\n        \"\"\"\uc124\uc815 \uac80\uc99d\"\"\"\n        if not self.secret_key or self.secret_key == 'dev-secret-key':\n            if not self.debug:\n                raise ValueError(\"SECRET_KEY must be set in production\")\n\n        if not self.database.password and not self.debug:\n            raise ValueError(\"Database password must be set in production\")\n\n\n# \uae00\ub85c\ubc8c \uc124\uc815 \uc778\uc2a4\ud134\uc2a4\nconfig = AppConfig.from_env()\nconfig.validate()\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\ub85c\uae45-\uc124\uc815-\uc2e4\uc804-\uc608\uc81c",children:"\ub85c\uae45 \uc124\uc815 \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# src/ecommerce/logging_setup.py\nimport logging\nimport logging.handlers\nfrom pathlib import Path\nimport sys\n\n\ndef setup_logging(log_level: str = \"INFO\", log_dir: str = \"logs\") -> None:\n    \"\"\"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub85c\uae45 \uc124\uc815\"\"\"\n\n    # \ub85c\uadf8 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n    log_path = Path(log_dir)\n    log_path.mkdir(exist_ok=True)\n\n    # \ub8e8\ud2b8 \ub85c\uac70 \uc124\uc815\n    root_logger = logging.getLogger()\n    root_logger.setLevel(log_level)\n\n    # \uae30\uc874 \ud578\ub4e4\ub7ec \uc81c\uac70\n    root_logger.handlers.clear()\n\n    # \ud3ec\ub9e4\ud130 \uc815\uc758\n    detailed_formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - '\n        '%(filename)s:%(lineno)d - %(funcName)s - %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    )\n\n    simple_formatter = logging.Formatter(\n        '%(asctime)s - %(levelname)s - %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    )\n\n    # \ucf58\uc194 \ud578\ub4e4\ub7ec\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setLevel(logging.INFO)\n    console_handler.setFormatter(simple_formatter)\n\n    # \uc77c\ubc18 \ub85c\uadf8 \ud30c\uc77c \ud578\ub4e4\ub7ec (\ub85c\ud14c\uc774\uc158)\n    info_handler = logging.handlers.RotatingFileHandler(\n        log_path / 'app.log',\n        maxBytes=10_485_760,  # 10MB\n        backupCount=5,\n        encoding='utf-8'\n    )\n    info_handler.setLevel(logging.INFO)\n    info_handler.setFormatter(detailed_formatter)\n\n    # \uc5d0\ub7ec \ub85c\uadf8 \ud30c\uc77c \ud578\ub4e4\ub7ec\n    error_handler = logging.handlers.RotatingFileHandler(\n        log_path / 'error.log',\n        maxBytes=10_485_760,\n        backupCount=5,\n        encoding='utf-8'\n    )\n    error_handler.setLevel(logging.ERROR)\n    error_handler.setFormatter(detailed_formatter)\n\n    # \ub514\ubc84\uadf8 \ub85c\uadf8 \ud30c\uc77c \ud578\ub4e4\ub7ec (\uac1c\ubc1c \ud658\uacbd\uc5d0\uc11c\ub9cc)\n    if log_level == \"DEBUG\":\n        debug_handler = logging.handlers.RotatingFileHandler(\n            log_path / 'debug.log',\n            maxBytes=10_485_760,\n            backupCount=3,\n            encoding='utf-8'\n        )\n        debug_handler.setLevel(logging.DEBUG)\n        debug_handler.setFormatter(detailed_formatter)\n        root_logger.addHandler(debug_handler)\n\n    # \ud578\ub4e4\ub7ec \ucd94\uac00\n    root_logger.addHandler(console_handler)\n    root_logger.addHandler(info_handler)\n    root_logger.addHandler(error_handler)\n\n    # \uc11c\ub4dc\ud30c\ud2f0 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub85c\uadf8 \ub808\ubca8 \uc870\uc815\n    logging.getLogger('urllib3').setLevel(logging.WARNING)\n    logging.getLogger('requests').setLevel(logging.WARNING)\n\n    logging.info(\"Logging configured successfully\")\n"})}),"\n",(0,r.jsx)(e.h2,{id:"618-\ucf54\ub4dc-\ud488\uc9c8-\ub3c4\uad6c",children:"6.18 \ucf54\ub4dc \ud488\uc9c8 \ub3c4\uad6c"}),"\n",(0,r.jsx)(e.h3,{id:"black-\ucf54\ub4dc-\ud3ec\ub9e4\ud130",children:"Black (\ucf54\ub4dc \ud3ec\ub9e4\ud130)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-toml",children:"# pyproject.toml\n[tool.black]\nline-length = 88\ntarget-version = ['py311']\ninclude = '\\.pyi?$'\nexclude = '''\n/(\n    \\.git\n  | \\.venv\n  | build\n  | dist\n)/\n'''\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Black \uc0ac\uc6a9\nblack .                    # \ubaa8\ub4e0 \ud30c\uc77c \ud3ec\ub9f7\nblack src/                 # \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\nblack --check .            # \uccb4\ud06c\ub9cc (\uc218\uc815 \uc548 \ud568)\nblack --diff .             # \ucc28\uc774\uc810 \ud45c\uc2dc\n"})}),"\n",(0,r.jsx)(e.h3,{id:"flake8-\ub9b0\ud130",children:"Flake8 (\ub9b0\ud130)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ini",children:"# .flake8 \ub610\ub294 setup.cfg\n[flake8]\nmax-line-length = 88\nextend-ignore = E203, W503\nexclude =\n    .git,\n    __pycache__,\n    .venv,\n    build,\n    dist\nper-file-ignores =\n    __init__.py:F401\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Flake8 \uc0ac\uc6a9\nflake8 .                   # \ubaa8\ub4e0 \ud30c\uc77c \uac80\uc0ac\nflake8 src/                # \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\nflake8 --statistics .      # \ud1b5\uacc4 \ud45c\uc2dc\n"})}),"\n",(0,r.jsx)(e.h3,{id:"mypy-\ud0c0\uc785-\uccb4\ucee4",children:"Mypy (\ud0c0\uc785 \uccb4\ucee4)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ini",children:"# mypy.ini \ub610\ub294 setup.cfg\n[mypy]\npython_version = 3.11\nwarn_return_any = True\nwarn_unused_configs = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\ncheck_untyped_defs = True\nno_implicit_optional = True\n\n[mypy-tests.*]\nignore_errors = True\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Mypy \uc0ac\uc6a9\nmypy .                     # \ubaa8\ub4e0 \ud30c\uc77c \ud0c0\uc785 \uccb4\ud06c\nmypy src/                  # \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\nmypy --strict .            # \uc5c4\uaca9 \ubaa8\ub4dc\n"})}),"\n",(0,r.jsx)(e.h3,{id:"pylint-\ub9b0\ud130",children:"Pylint (\ub9b0\ud130)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ini",children:"# .pylintrc\n[MASTER]\nignore=.venv,build,dist\n\n[MESSAGES CONTROL]\ndisable=\n    missing-docstring,\n    too-few-public-methods\n\n[FORMAT]\nmax-line-length=88\n\n[BASIC]\ngood-names=i,j,k,x,y,z,id,db\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pylint \uc0ac\uc6a9\npylint src/                # \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\npylint --rcfile=.pylintrc src/\n"})}),"\n",(0,r.jsx)(e.h3,{id:"pre-commit-hooks",children:"Pre-commit Hooks"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-added-large-files\n      - id: check-merge-conflict\n\n  - repo: https://github.com/psf/black\n    rev: 23.12.1\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 7.0.0\n    hooks:\n      - id: flake8\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        args: ["--profile", "black"]\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.8.0\n    hooks:\n      - id: mypy\n        additional_dependencies: [types-all]\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pre-commit \uc124\uc815\npre-commit install           # \ud6c5 \uc124\uce58\npre-commit run --all-files   # \ubaa8\ub4e0 \ud30c\uc77c\uc5d0 \uc2e4\ud589\npre-commit autoupdate        # \ud6c5 \ubc84\uc804 \uc5c5\ub370\uc774\ud2b8\n"})}),"\n",(0,r.jsx)(e.h2,{id:"619-cicd-\uae30\ucd08",children:"6.19 CI/CD \uae30\ucd08"}),"\n",(0,r.jsx)(e.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\nname: CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.10', '3.11', '3.12']\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v5\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Cache dependencies\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-dev.txt\n\n    - name: Lint with flake8\n      run: |\n        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics\n        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics\n\n    - name: Type check with mypy\n      run: |\n        mypy src/\n\n    - name: Format check with black\n      run: |\n        black --check src/\n\n    - name: Run tests with pytest\n      run: |\n        pytest tests/ --cov=src --cov-report=xml --cov-report=html\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        fail_ci_if_error: true\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v5\n      with:\n        python-version: '3.11'\n\n    - name: Build package\n      run: |\n        pip install build\n        python -m build\n\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: dist\n        path: dist/\n"})}),"\n",(0,r.jsx)(e.h3,{id:"pytest-\ud1b5\ud569",children:"pytest \ud1b5\ud569"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# tests/conftest.py - pytest \uc124\uc815\nimport pytest\nfrom src.ecommerce.config import AppConfig\nfrom src.ecommerce.database import Database\n\n\n@pytest.fixture(scope='session')\ndef app_config():\n    \"\"\"\ud14c\uc2a4\ud2b8\uc6a9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uc815\"\"\"\n    return AppConfig(\n        debug=True,\n        secret_key='test-secret-key',\n        log_level='DEBUG',\n        database=DatabaseConfig(\n            host='localhost',\n            port=5432,\n            name='test_db',\n            user='test_user',\n            password='test_pass'\n        )\n    )\n\n\n@pytest.fixture(scope='function')\ndef database(app_config):\n    \"\"\"\ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ubca0\uc774\uc2a4\"\"\"\n    db = Database(app_config.database)\n    db.connect()\n    db.create_tables()\n\n    yield db\n\n    db.drop_tables()\n    db.disconnect()\n\n\n@pytest.fixture\ndef product_data():\n    \"\"\"\ud14c\uc2a4\ud2b8\uc6a9 \uc0c1\ud488 \ub370\uc774\ud130\"\"\"\n    return {\n        'name': 'Test Product',\n        'price': 99.99,\n        'stock': 10,\n        'category': 'Electronics'\n    }\n"})}),"\n",(0,r.jsx)(e.h2,{id:"620-\uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640-\ud301",children:"6.20 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\uc640 \ud301"}),"\n",(0,r.jsx)(e.h3,{id:"\ucf54\ub4dc-\uc791\uc131-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ucf54\ub4dc \uc791\uc131 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"\ucf54\ub4dc \uc791\uc131 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\n\n\uae30\ubcf8 \uc0ac\ud56d:\n\u25a1 PEP 8 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc \uc900\uc218\n\u25a1 \uc758\ubbf8 \uc788\uace0 \uba85\ud655\ud55c \ubcc0\uc218/\ud568\uc218\uba85 \uc0ac\uc6a9\n\u25a1 \uc801\uc808\ud55c \uc8fc\uc11d\uacfc docstring \uc791\uc131\n\u25a1 Type hints \ucd94\uac00\n\n\ucf54\ub4dc \ud488\uc9c8:\n\u25a1 \ub2e8\uc77c \ucc45\uc784 \uc6d0\uce59 \uc900\uc218\n\u25a1 \uc911\ubcf5 \ucf54\ub4dc \uc81c\uac70 (DRY)\n\u25a1 \uc801\uc808\ud55c \ucd94\uc0c1\ud654 \ub808\ubca8 \uc720\uc9c0\n\u25a1 \ud568\uc218/\uba54\uc11c\ub4dc \uae38\uc774 \uc801\uc808 (\uc77c\ubc18\uc801\uc73c\ub85c 20-30\uc904 \uc774\ud558)\n\n\uc5d0\ub7ec \ucc98\ub9ac:\n\u25a1 \uc801\uc808\ud55c \uc608\uc678 \ucc98\ub9ac\n\u25a1 \uad6c\uccb4\uc801\uc778 \uc608\uc678 \uc0ac\uc6a9\n\u25a1 \uc758\ubbf8 \uc788\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\n\u25a1 \ub9ac\uc18c\uc2a4 \uc815\ub9ac (try-finally \ub610\ub294 context manager)\n\n\ud14c\uc2a4\ud305:\n\u25a1 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131\n\u25a1 \uc5e3\uc9c0 \ucf00\uc774\uc2a4 \ud14c\uc2a4\ud2b8\n\u25a1 \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0 \ud655\uc778 (80% \uc774\uc0c1 \uad8c\uc7a5)\n\u25a1 \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \ud1b5\uacfc\n\n\ubcf4\uc548:\n\u25a1 \ube44\ubc00 \uc815\ubcf4 \ud558\ub4dc\ucf54\ub529 \uc5c6\uc74c\n\u25a1 \uc785\ub825 \uac80\uc99d\n\u25a1 SQL Injection \ubc29\uc9c0\n\u25a1 XSS \ubc29\uc9c0\n\n\ubb38\uc11c\ud654:\n\u25a1 README \uc791\uc131/\uc5c5\ub370\uc774\ud2b8\n\u25a1 API \ubb38\uc11c\ud654\n\u25a1 \ubcc0\uacbd \uc0ac\ud56d \ubb38\uc11c\ud654\n\u25a1 \uc0ac\uc6a9 \uc608\uc81c \ud3ec\ud568\n\nGit:\n\u25a1 \uc758\ubbf8 \uc788\ub294 \ucee4\ubc0b \uba54\uc2dc\uc9c0\n\u25a1 \uc791\uc740 \ub2e8\uc704\ub85c \ucee4\ubc0b\n\u25a1 .gitignore \uc801\uc808\ud788 \uc124\uc815\n\u25a1 \ubbfc\uac10\ud55c \uc815\ubcf4 \ucee4\ubc0b\ud558\uc9c0 \uc54a\uc74c\n\n\ucf54\ub4dc \ub9ac\ubdf0:\n\u25a1 Self-review \uc218\ud589\n\u25a1 \ub9b0\ud130 \ud1b5\uacfc (flake8, pylint)\n\u25a1 \ud3ec\ub9e4\ud130 \uc801\uc6a9 (black)\n\u25a1 \ud0c0\uc785 \uccb4\ud06c \ud1b5\uacfc (mypy)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"python-\uac1c\ubc1c-\ud301",children:"Python \uac1c\ubc1c \ud301"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"\"\"\"\nPython \uac1c\ubc1c \ud301\n\n1. \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158 \ud65c\uc6a9\n   - \uac04\uacb0\ud558\uace0 \uc77d\uae30 \uc26c\uc6b4 \ucf54\ub4dc\n   - \uc77c\ubc18 \ubc18\ubcf5\ubb38\ubcf4\ub2e4 \ube60\ub984\n\n2. \uc81c\ub108\ub808\uc774\ud130 \uc0ac\uc6a9\n   - \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\n   - \ud070 \ub370\uc774\ud130\uc14b \ucc98\ub9ac\uc5d0 \uc720\uc6a9\n\n3. Context Manager \ud65c\uc6a9\n   - \ub9ac\uc18c\uc2a4 \uc790\ub3d9 \uc815\ub9ac\n   - \ucf54\ub4dc \uc548\uc804\uc131 \ud5a5\uc0c1\n\n4. Dataclass \uc0ac\uc6a9\n   - \ubcf4\uc77c\ub7ec\ud50c\ub808\uc774\ud2b8 \ucf54\ub4dc \uac10\uc18c\n   - \ud0c0\uc785 \ud78c\ud2b8\uc640 \uc798 \uc5b4\uc6b8\ub9bc\n\n5. f-string \uc0ac\uc6a9\n   - \ubb38\uc790\uc5f4 \ud3ec\ub9e4\ud305\uc758 \ucd5c\uc2e0 \ubc29\ubc95\n   - \uc77d\uae30 \uc27d\uace0 \ube60\ub984\n\n6. enumerate() \ud65c\uc6a9\n   - \uc778\ub371\uc2a4\uc640 \uac12\uc744 \ub3d9\uc2dc\uc5d0 \uc5bb\uae30\n   - range(len())\ubcf4\ub2e4 Pythonic\n\n7. zip() \ud65c\uc6a9\n   - \uc5ec\ub7ec iterable\uc744 \ub3d9\uc2dc\uc5d0 \uc21c\ud68c\n   - \ubcd1\ub82c \ucc98\ub9ac\uc5d0 \uc720\uc6a9\n\n8. get() \uba54\uc11c\ub4dc \ud65c\uc6a9\n   - \ub515\uc154\ub108\ub9ac \uc548\uc804 \uc811\uadfc\n   - \uae30\ubcf8\uac12 \uc9c0\uc815 \uac00\ub2a5\n\n9. any()\uc640 all() \ud65c\uc6a9\n   - \uc870\uac74 \uac80\uc0ac \uac04\uc18c\ud654\n   - \uc77d\uae30 \uc26c\uc6b4 \ucf54\ub4dc\n\n10. pathlib \uc0ac\uc6a9\n    - \uacbd\ub85c \uc870\uc791\uc758 \uac1d\uccb4\uc9c0\ud5a5\uc801 \ubc29\ubc95\n    - \ud06c\ub85c\uc2a4 \ud50c\ub7ab\ud3fc \ud638\ud658\uc131\n\"\"\"\n\n# \uc608\uc81c\nfrom pathlib import Path\n\n# 1. \ub9ac\uc2a4\ud2b8 \ucef4\ud504\ub9ac\ud5e8\uc158\nsquares = [x**2 for x in range(10)]\n\n# 2. \uc81c\ub108\ub808\uc774\ud130\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n# 3. Context Manager\nwith open('file.txt', 'r') as f:\n    content = f.read()\n\n# 4. Dataclass\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n\n# 5. f-string\nname = \"Python\"\nversion = 3.11\nprint(f\"{name} {version}\")\n\n# 6. enumerate\nfor i, item in enumerate(['a', 'b', 'c']):\n    print(f\"{i}: {item}\")\n\n# 7. zip\nnames = ['Alice', 'Bob', 'Charlie']\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(f\"{name} is {age} years old\")\n\n# 8. get()\nconfig = {'debug': True}\nlog_level = config.get('log_level', 'INFO')\n\n# 9. any() / all()\nnumbers = [1, 2, 3, 4, 5]\nhas_even = any(n % 2 == 0 for n in numbers)\nall_positive = all(n > 0 for n in numbers)\n\n# 10. pathlib\npath = Path('data') / 'file.txt'\nif path.exists():\n    content = path.read_text()\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\uc5f0\uc2b5-\ubb38\uc81c",children:"\uc5f0\uc2b5 \ubb38\uc81c"}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-1-\ub514\uc790\uc778-\ud328\ud134-\uc801\uc6a9",children:"\ubb38\uc81c 1: \ub514\uc790\uc778 \ud328\ud134 \uc801\uc6a9"}),"\n",(0,r.jsx)(e.p,{children:"\ub2e4\uc74c \uc694\uad6c\uc0ac\ud56d\uc744 \ub9cc\uc871\ud558\ub294 \ub85c\uae45 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Singleton \ud328\ud134\uc73c\ub85c \ub85c\uac70 \uc778\uc2a4\ud134\uc2a4 \uad00\ub9ac"}),"\n",(0,r.jsx)(e.li,{children:"Strategy \ud328\ud134\uc73c\ub85c \ub2e4\uc591\ud55c \ub85c\uadf8 \ucd9c\ub825 \ubc29\uc2dd \uc9c0\uc6d0 (\ucf58\uc194, \ud30c\uc77c, \ub370\uc774\ud130\ubca0\uc774\uc2a4)"}),"\n",(0,r.jsx)(e.li,{children:"Observer \ud328\ud134\uc73c\ub85c \ub85c\uadf8 \uc774\ubca4\ud2b8 \uc54c\ub9bc"}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from abc import ABC, abstractmethod\nfrom typing import List, Protocol\nfrom datetime import datetime\nimport threading\n\n\n# Strategy Pattern - \ub85c\uadf8 \ucd9c\ub825 \uc804\ub7b5\nclass LogStrategy(ABC):\n    @abstractmethod\n    def write(self, message: str) -> None:\n        pass\n\n\nclass ConsoleLogStrategy(LogStrategy):\n    def write(self, message: str) -> None:\n        print(f"[CONSOLE] {message}")\n\n\nclass FileLogStrategy(LogStrategy):\n    def __init__(self, filename: str):\n        self.filename = filename\n\n    def write(self, message: str) -> None:\n        with open(self.filename, \'a\') as f:\n            f.write(f"{message}\\n")\n\n\nclass DatabaseLogStrategy(LogStrategy):\n    def write(self, message: str) -> None:\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\n        print(f"[DB] Saving: {message}")\n\n\n# Observer Pattern - \ub85c\uadf8 \uc774\ubca4\ud2b8 \uc635\uc800\ubc84\nclass LogObserver(Protocol):\n    def on_log(self, level: str, message: str) -> None:\n        ...\n\n\nclass EmailNotifier:\n    def on_log(self, level: str, message: str) -> None:\n        if level == "ERROR":\n            print(f"Sending email alert: {message}")\n\n\nclass SlackNotifier:\n    def on_log(self, level: str, message: str) -> None:\n        if level in ["ERROR", "CRITICAL"]:\n            print(f"Sending Slack notification: {message}")\n\n\n# Singleton Pattern - \ub85c\uac70\nclass Logger:\n    _instance = None\n    _lock = threading.Lock()\n\n    def __new__(cls):\n        if cls._instance is None:\n            with cls._lock:\n                if cls._instance is None:\n                    cls._instance = super().__new__(cls)\n                    cls._instance._initialized = False\n        return cls._instance\n\n    def __init__(self):\n        if self._initialized:\n            return\n\n        self._strategy = ConsoleLogStrategy()\n        self._observers: List[LogObserver] = []\n        self._initialized = True\n\n    def set_strategy(self, strategy: LogStrategy) -> None:\n        self._strategy = strategy\n\n    def attach(self, observer: LogObserver) -> None:\n        self._observers.append(observer)\n\n    def detach(self, observer: LogObserver) -> None:\n        self._observers.remove(observer)\n\n    def _notify(self, level: str, message: str) -> None:\n        for observer in self._observers:\n            observer.on_log(level, message)\n\n    def log(self, level: str, message: str) -> None:\n        timestamp = datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')\n        formatted_message = f"[{timestamp}] [{level}] {message}"\n\n        self._strategy.write(formatted_message)\n        self._notify(level, message)\n\n    def info(self, message: str) -> None:\n        self.log("INFO", message)\n\n    def error(self, message: str) -> None:\n        self.log("ERROR", message)\n\n    def critical(self, message: str) -> None:\n        self.log("CRITICAL", message)\n\n\n# \uc0ac\uc6a9 \uc608\nlogger1 = Logger()\nlogger2 = Logger()\n\nprint(f"Same instance? {logger1 is logger2}")  # True\n\n# Strategy \uc124\uc815\nlogger1.set_strategy(FileLogStrategy("app.log"))\n\n# Observer \ucd94\uac00\nemail_notifier = EmailNotifier()\nslack_notifier = SlackNotifier()\n\nlogger1.attach(email_notifier)\nlogger1.attach(slack_notifier)\n\n# \ub85c\uae45\nlogger1.info("Application started")\nlogger1.error("Database connection failed")\nlogger1.critical("System crash!")\n'})})]}),"\n",(0,r.jsx)(e.h3,{id:"\ubb38\uc81c-2-solid-\uc6d0\uce59-\uc801\uc6a9",children:"\ubb38\uc81c 2: SOLID \uc6d0\uce59 \uc801\uc6a9"}),"\n",(0,r.jsx)(e.p,{children:"\ub2e4\uc74c \ucf54\ub4dc\ub97c SOLID \uc6d0\uce59\uc5d0 \ub9de\uac8c \ub9ac\ud329\ud1a0\ub9c1\ud558\uc138\uc694:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class UserManager:\n    def __init__(self):\n        self.users = []\n\n    def add_user(self, name, email):\n        # \uc774\uba54\uc77c \uac80\uc99d\n        if '@' not in email:\n            raise ValueError(\"Invalid email\")\n\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = {'name': name, 'email': email}\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5\n        # db.save(user)\n\n        # \ud658\uc601 \uc774\uba54\uc77c \uc804\uc1a1\n        # send_email(email, \"Welcome!\")\n\n        self.users.append(user)\n\n    def generate_report(self):\n        report = \"User Report\\n\"\n        for user in self.users:\n            report += f\"{user['name']}: {user['email']}\\n\"\n        return report\n"})}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"\ud574\ub2f5 \ubcf4\uae30"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from abc import ABC, abstractmethod\nfrom typing import List, Protocol\nfrom dataclasses import dataclass\n\n\n# \ub370\uc774\ud130 \ubaa8\ub378 (Single Responsibility)\n@dataclass\nclass User:\n    name: str\n    email: str\n\n\n# \uc774\uba54\uc77c \uac80\uc99d (Single Responsibility)\nclass EmailValidator:\n    @staticmethod\n    def validate(email: str) -> bool:\n        return \'@\' in email and \'.\' in email\n\n\n# \uc800\uc7a5\uc18c \uc778\ud130\ud398\uc774\uc2a4 (Dependency Inversion)\nclass UserRepository(ABC):\n    @abstractmethod\n    def save(self, user: User) -> None:\n        pass\n\n    @abstractmethod\n    def find_all(self) -> List[User]:\n        pass\n\n\n# \uc800\uc7a5\uc18c \uad6c\ud604 (Open/Closed)\nclass InMemoryUserRepository(UserRepository):\n    def __init__(self):\n        self._users: List[User] = []\n\n    def save(self, user: User) -> None:\n        self._users.append(user)\n\n    def find_all(self) -> List[User]:\n        return self._users.copy()\n\n\nclass DatabaseUserRepository(UserRepository):\n    def save(self, user: User) -> None:\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\n        print(f"Saving to database: {user}")\n\n    def find_all(self) -> List[User]:\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc870\ud68c\n        return []\n\n\n# \uc774\uba54\uc77c \uc11c\ube44\uc2a4 \uc778\ud130\ud398\uc774\uc2a4 (Interface Segregation)\nclass EmailService(ABC):\n    @abstractmethod\n    def send(self, to: str, subject: str, body: str) -> None:\n        pass\n\n\n# \uc774\uba54\uc77c \uc11c\ube44\uc2a4 \uad6c\ud604\nclass SMTPEmailService(EmailService):\n    def send(self, to: str, subject: str, body: str) -> None:\n        print(f"Sending email to {to}: {subject}")\n\n\n# \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\uae30 (Single Responsibility)\nclass UserReportGenerator:\n    def generate(self, users: List[User]) -> str:\n        report = "User Report\\n"\n        report += "=" * 50 + "\\n"\n        for user in users:\n            report += f"{user.name}: {user.email}\\n"\n        return report\n\n\n# \uc0ac\uc6a9\uc790 \uc11c\ube44\uc2a4 (Dependency Inversion)\nclass UserService:\n    def __init__(\n        self,\n        repository: UserRepository,\n        email_service: EmailService,\n        validator: EmailValidator\n    ):\n        self._repository = repository\n        self._email_service = email_service\n        self._validator = validator\n\n    def create_user(self, name: str, email: str) -> User:\n        # \uac80\uc99d\n        if not self._validator.validate(email):\n            raise ValueError("Invalid email address")\n\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(name=name, email=email)\n\n        # \uc800\uc7a5\n        self._repository.save(user)\n\n        # \ud658\uc601 \uc774\uba54\uc77c \uc804\uc1a1\n        self._email_service.send(\n            to=email,\n            subject="Welcome!",\n            body=f"Hello {name}, welcome to our service!"\n        )\n\n        return user\n\n    def get_all_users(self) -> List[User]:\n        return self._repository.find_all()\n\n\n# \uc0ac\uc6a9 \uc608\nrepository = InMemoryUserRepository()\nemail_service = SMTPEmailService()\nvalidator = EmailValidator()\n\nuser_service = UserService(repository, email_service, validator)\n\n# \uc0ac\uc6a9\uc790 \uc0dd\uc131\nuser1 = user_service.create_user("Alice", "alice@example.com")\nuser2 = user_service.create_user("Bob", "bob@example.com")\n\n# \ub9ac\ud3ec\ud2b8 \uc0dd\uc131\nreport_generator = UserReportGenerator()\nall_users = user_service.get_all_users()\nreport = report_generator.generate(all_users)\nprint(report)\n'})})]}),"\n",(0,r.jsx)(e.h2,{id:"\uc694\uc57d",children:"\uc694\uc57d"}),"\n",(0,r.jsx)(e.p,{children:"Python \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4\ub294 \ub2e8\uc21c\ud788 \uaddc\uce59\uc744 \ub530\ub974\ub294 \uac83\uc744 \ub118\uc5b4, \uc77d\uae30 \uc27d\uace0 \uc720\uc9c0\ubcf4\uc218\uac00 \uac00\ub2a5\ud558\uba70 \ud655\uc7a5 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ud575\uc2ec \uc6d0\uce59:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc77c\uad00\uc131"}),": PEP 8\uc744 \ub530\ub974\uace0 \ud504\ub85c\uc81d\ud2b8 \uc804\uccb4\uc5d0\uc11c \uc77c\uad00\ub41c \uc2a4\ud0c0\uc77c \uc720\uc9c0"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uba85\ud655\uc131"}),": \uba85\ud655\ud558\uace0 \uc758\ubbf8 \uc788\ub294 \uc774\ub984\uacfc \ubb38\uc11c\ud654"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ub2e8\uc21c\uc131"}),": \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \ubcf5\uc7a1\ud558\uac8c, \uacfc\ub3c4\ud55c \ucd94\uc0c1\ud654 \uc9c0\uc591"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc548\uc804\uc131"}),": \uc801\uc808\ud55c \uc5d0\ub7ec \ucc98\ub9ac\uc640 \ud14c\uc2a4\ud2b8"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud488\uc9c8"}),": \uc790\ub3d9\ud654 \ub3c4\uad6c\ub97c \ud65c\uc6a9\ud55c \ucf54\ub4dc \ud488\uc9c8 \uad00\ub9ac"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\uc2e4\ucc9c \ubc29\ubc95:"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\ub9e4\uc77c \uc870\uae08\uc529 \uac1c\uc120\ud558\uae30"}),"\n",(0,r.jsx)(e.li,{children:"\ucf54\ub4dc \ub9ac\ubdf0\ub97c \ud1b5\ud574 \ubc30\uc6b0\uae30"}),"\n",(0,r.jsx)(e.li,{children:"\uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8 \ucc38\uc5ec\ud558\uae30"}),"\n",(0,r.jsx)(e.li,{children:"\ud300\uacfc \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4 \uacf5\uc720\ud558\uae30"}),"\n",(0,r.jsx)(e.li,{children:"\uc9c0\uc18d\uc801\uc73c\ub85c \ud559\uc2b5\ud558\uae30"}),"\n"]}),"\n",(0,r.jsx)(e.admonition,{title:"\uacc4\uc18d \ud559\uc2b5\ud558\uae30",type:"tip",children:(0,r.jsx)(e.p,{children:"Python\uc740 \uacc4\uc18d \ubc1c\uc804\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd \ubb38\uc11c\uc640 PEP\ub97c \ud1b5\ud574 \ucd5c\uc2e0 \uae30\ub2a5\uacfc \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4\ub97c \ud559\uc2b5\ud558\uc138\uc694."})}),"\n",(0,r.jsx)(e.h2,{id:"\ucd94\uac00-\ud559\uc2b5-\uc790\ub8cc",children:"\ucd94\uac00 \ud559\uc2b5 \uc790\ub8cc"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.python.org/dev/peps/pep-0008/",children:"PEP 8 - Style Guide for Python Code"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.python.org/dev/peps/pep-0020/",children:"PEP 20 - The Zen of Python"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.python.org/3/",children:"Python Official Documentation"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://realpython.com/",children:"Real Python"})," - \uc2e4\uc804 \ud29c\ud1a0\ub9ac\uc5bc"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://refactoring.guru/design-patterns/python",children:"Python Design Patterns"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://effectivepython.com/",children:"Effective Python"})," - Brett Slatkin"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.packtpub.com/product/clean-code-in-python/9781788835831",children:"Clean Code in Python"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.python-guide.org/",children:"The Hitchhiker's Guide to Python"})}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\uc9c0\uae08\uae4c\uc9c0 \ubc30\uc6b4 \ubca0\uc2a4\ud2b8 \ud504\ub799\ud2f0\uc2a4\ub97c \uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc801\uc6a9\ud558\uba74\uc11c, \ub354 \ub098\uc740 Python \uac1c\ubc1c\uc790\ub85c \uc131\uc7a5\ud558\uc138\uc694!"})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>l});var t=s(6540);const r={},a=t.createContext(r);function i(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);