"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3358],{8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var o=t(6540);const r={},a=o.createContext(r);function i(n){const e=o.useContext(a);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(a.Provider,{value:e},n.children)}},9704:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"dagster/ops-jobs","title":"2. Ops\uc640 Jobs","description":"Dagster\uc758 \ud575\uc2ec \uac1c\ub150\uc778 Ops\uc640 Jobs\uc5d0 \ub300\ud574 \uc54c\uc544\ubd05\ub2c8\ub2e4. Op\uc740 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \uae30\ubcf8 \uc791\uc5c5 \ub2e8\uc704\uc774\uba70, Job\uc740 \uc5ec\ub7ec Op\uc744 \uc870\ud569\ud558\uc5ec \uc644\uc804\ud55c \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4.","source":"@site/docs/dagster/ops-jobs.md","sourceDirName":"dagster","slug":"/dagster/ops-jobs","permalink":"/docs/dagster/ops-jobs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dagster/ops-jobs.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"dagsterSidebar","previous":{"title":"Dagster \uc124\uce58 \ubc0f \uc124\uc815","permalink":"/docs/dagster/setup"},"next":{"title":"3. \uc2a4\ucf00\uc904\uacfc \uc13c\uc11c","permalink":"/docs/dagster/schedules-sensors"}}');var r=t(4848),a=t(8453);const i={sidebar_position:3},s="2. Ops\uc640 Jobs",l={},d=[{value:"2.1 Ops \uac1c\ub150",id:"21-ops-\uac1c\ub150",level:2},{value:"Op\uc774\ub780?",id:"op\uc774\ub780",level:3},{value:"Op\uc758 \uad6c\uc131 \uc694\uc18c",id:"op\uc758-\uad6c\uc131-\uc694\uc18c",level:3},{value:"\uae30\ubcf8 Op \uc608\uc81c",id:"\uae30\ubcf8-op-\uc608\uc81c",level:3},{value:"Op vs Asset",id:"op-vs-asset",level:3},{value:"2.2 @op \ub370\ucf54\ub808\uc774\ud130",id:"22-op-\ub370\ucf54\ub808\uc774\ud130",level:2},{value:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95",id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",level:3},{value:"Op \uc774\ub984\uacfc \uc124\uba85",id:"op-\uc774\ub984\uacfc-\uc124\uba85",level:3},{value:"\ud0c0\uc785 \ud78c\ud2b8 \ud65c\uc6a9",id:"\ud0c0\uc785-\ud78c\ud2b8-\ud65c\uc6a9",level:3},{value:"Context \uac1d\uccb4 \uc0ac\uc6a9",id:"context-\uac1d\uccb4-\uc0ac\uc6a9",level:3},{value:"Required Resources",id:"required-resources",level:3},{value:"Tags \ud65c\uc6a9",id:"tags-\ud65c\uc6a9",level:3},{value:"2.3 Job \uc815\uc758",id:"23-job-\uc815\uc758",level:2},{value:"Job\uc774\ub780?",id:"job\uc774\ub780",level:3},{value:"\uae30\ubcf8 Job \uc815\uc758",id:"\uae30\ubcf8-job-\uc815\uc758",level:3},{value:"\uc5ec\ub7ec Op\uc744 \uc5f0\uacb0\ud558\ub294 Job",id:"\uc5ec\ub7ec-op\uc744-\uc5f0\uacb0\ud558\ub294-job",level:3},{value:"\ubcd1\ub82c \uc2e4\ud589 \ud328\ud134",id:"\ubcd1\ub82c-\uc2e4\ud589-\ud328\ud134",level:3},{value:"Job \uc124\uc815",id:"job-\uc124\uc815",level:3},{value:"2.4 Ops \uc758\uc874\uc131",id:"24-ops-\uc758\uc874\uc131",level:2},{value:"\uba85\uc2dc\uc801 \uc758\uc874\uc131",id:"\uba85\uc2dc\uc801-\uc758\uc874\uc131",level:3},{value:"\ub2e4\uc911 \uc758\uc874\uc131",id:"\ub2e4\uc911-\uc758\uc874\uc131",level:3},{value:"\ud32c\uc544\uc6c3/\ud32c\uc778 \ud328\ud134",id:"\ud32c\uc544\uc6c3\ud32c\uc778-\ud328\ud134",level:3},{value:"Nothing \uc758\uc874\uc131",id:"nothing-\uc758\uc874\uc131",level:3},{value:"\ubcf5\uc7a1\ud55c \uc758\uc874\uc131 \uadf8\ub798\ud504",id:"\ubcf5\uc7a1\ud55c-\uc758\uc874\uc131-\uadf8\ub798\ud504",level:3},{value:"2.5 Config \uc2dc\uc2a4\ud15c",id:"25-config-\uc2dc\uc2a4\ud15c",level:2},{value:"Config\uc758 \ud544\uc694\uc131",id:"config\uc758-\ud544\uc694\uc131",level:3},{value:"\uae30\ubcf8 Config \uc0ac\uc6a9",id:"\uae30\ubcf8-config-\uc0ac\uc6a9",level:3},{value:"Config Schema \uc815\uc758",id:"config-schema-\uc815\uc758",level:3},{value:"\uc911\ucca9\ub41c Config",id:"\uc911\ucca9\ub41c-config",level:3},{value:"Config with Enum",id:"config-with-enum",level:3},{value:"Config Validation",id:"config-validation",level:3},{value:"YAML Config \ud30c\uc77c \uc0ac\uc6a9",id:"yaml-config-\ud30c\uc77c-\uc0ac\uc6a9",level:3},{value:"2.6 Op \ucd9c\ub825",id:"26-op-\ucd9c\ub825",level:2},{value:"\ub2e8\uc77c \ucd9c\ub825",id:"\ub2e8\uc77c-\ucd9c\ub825",level:3},{value:"\uc5ec\ub7ec \ucd9c\ub825 (Tuple)",id:"\uc5ec\ub7ec-\ucd9c\ub825-tuple",level:3},{value:"Output \uac1d\uccb4 \uc0ac\uc6a9",id:"output-\uac1d\uccb4-\uc0ac\uc6a9",level:3},{value:"\uc5ec\ub7ec \ucd9c\ub825\uc744 \uba85\uba85\ud558\uc5ec \ubc18\ud658",id:"\uc5ec\ub7ec-\ucd9c\ub825\uc744-\uba85\uba85\ud558\uc5ec-\ubc18\ud658",level:3},{value:"Optional \ucd9c\ub825",id:"optional-\ucd9c\ub825",level:3},{value:"2.7 \ub3d9\uc801 Op",id:"27-\ub3d9\uc801-op",level:2},{value:"DynamicOutput \uc18c\uac1c",id:"dynamicoutput-\uc18c\uac1c",level:3},{value:"\ub3d9\uc801 \ud30c\ud2f0\uc154\ub2dd",id:"\ub3d9\uc801-\ud30c\ud2f0\uc154\ub2dd",level:3},{value:"\uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c: \ubcd1\ub82c \ud30c\uc77c \ucc98\ub9ac",id:"\uc2e4\uc81c-\uc0ac\uc6a9-\uc608\uc81c-\ubcd1\ub82c-\ud30c\uc77c-\ucc98\ub9ac",level:3},{value:"\uc911\ucca9\ub41c \ub3d9\uc801 \uc2e4\ud589",id:"\uc911\ucca9\ub41c-\ub3d9\uc801-\uc2e4\ud589",level:3},{value:"2.8 Job \uc2e4\ud589",id:"28-job-\uc2e4\ud589",level:2},{value:"\ub85c\uceec \uc2e4\ud589",id:"\ub85c\uceec-\uc2e4\ud589",level:3},{value:"Config\uc640 \ud568\uaed8 \uc2e4\ud589",id:"config\uc640-\ud568\uaed8-\uc2e4\ud589",level:3},{value:"\uc2e4\ud589 \uacb0\uacfc \uc811\uadfc",id:"\uc2e4\ud589-\uacb0\uacfc-\uc811\uadfc",level:3},{value:"\uc2e4\ud328 \ucc98\ub9ac",id:"\uc2e4\ud328-\ucc98\ub9ac",level:3},{value:"Resources\uc640 \ud568\uaed8 \uc2e4\ud589",id:"resources\uc640-\ud568\uaed8-\uc2e4\ud589",level:3},{value:"Tags\ub97c \ud65c\uc6a9\ud55c \uc2e4\ud589",id:"tags\ub97c-\ud65c\uc6a9\ud55c-\uc2e4\ud589",level:3},{value:"2.9 \uc7ac\uc2dc\ub3c4 \uc815\ucc45",id:"29-\uc7ac\uc2dc\ub3c4-\uc815\ucc45",level:2},{value:"\uae30\ubcf8 \uc7ac\uc2dc\ub3c4 \uc124\uc815",id:"\uae30\ubcf8-\uc7ac\uc2dc\ub3c4-\uc124\uc815",level:3},{value:"\uace0\uae09 \uc7ac\uc2dc\ub3c4 \uc804\ub7b5",id:"\uace0\uae09-\uc7ac\uc2dc\ub3c4-\uc804\ub7b5",level:3},{value:"\uc7ac\uc2dc\ub3c4 \uc815\ucc45 \uc0c1\uc138 \uc124\uc815",id:"\uc7ac\uc2dc\ub3c4-\uc815\ucc45-\uc0c1\uc138-\uc124\uc815",level:3},{value:"\uc870\uac74\ubd80 \uc7ac\uc2dc\ub3c4",id:"\uc870\uac74\ubd80-\uc7ac\uc2dc\ub3c4",level:3},{value:"Op\ubcc4 \uc7ac\uc2dc\ub3c4 \uc815\ucc45",id:"op\ubcc4-\uc7ac\uc2dc\ub3c4-\uc815\ucc45",level:3},{value:"\uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd94\uc801",id:"\uc7ac\uc2dc\ub3c4-\ud69f\uc218-\ucd94\uc801",level:3},{value:"2.10 \uc2e4\uc2b5",id:"210-\uc2e4\uc2b5",level:2},{value:"\uc2e4\uc2b5 1: ETL \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95",id:"\uc2e4\uc2b5-1-etl-\ud30c\uc774\ud504\ub77c\uc778-\uad6c\ucd95",level:3},{value:"\uc2e4\uc2b5 2: \ub3d9\uc801 \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778",id:"\uc2e4\uc2b5-2-\ub3d9\uc801-\ub370\uc774\ud130-\ucc98\ub9ac-\ud30c\uc774\ud504\ub77c\uc778",level:3},{value:"\uc2e4\uc2b5 3: \uc7ac\uc2dc\ub3c4 \ubc0f \uc624\ub958 \ucc98\ub9ac\uac00 \uc788\ub294 \ud30c\uc774\ud504\ub77c\uc778",id:"\uc2e4\uc2b5-3-\uc7ac\uc2dc\ub3c4-\ubc0f-\uc624\ub958-\ucc98\ub9ac\uac00-\uc788\ub294-\ud30c\uc774\ud504\ub77c\uc778",level:3},{value:"\uc2e4\uc2b5 4: \ubcf5\uc7a1\ud55c \uc758\uc874\uc131\uacfc \uc870\uac74\ubd80 \uc2e4\ud589",id:"\uc2e4\uc2b5-4-\ubcf5\uc7a1\ud55c-\uc758\uc874\uc131\uacfc-\uc870\uac74\ubd80-\uc2e4\ud589",level:3},{value:"\uc815\ub9ac",id:"\uc815\ub9ac",level:2},{value:"\uc8fc\uc694 \uac1c\ub150",id:"\uc8fc\uc694-\uac1c\ub150",level:3},{value:"\ubaa8\ubc94 \uc0ac\ub840",id:"\ubaa8\ubc94-\uc0ac\ub840",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:3},{value:"\ucc38\uace0 \uc790\ub8cc",id:"\ucc38\uace0-\uc790\ub8cc",level:3}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"2-ops\uc640-jobs",children:"2. Ops\uc640 Jobs"})}),"\n",(0,r.jsx)(e.p,{children:"Dagster\uc758 \ud575\uc2ec \uac1c\ub150\uc778 Ops\uc640 Jobs\uc5d0 \ub300\ud574 \uc54c\uc544\ubd05\ub2c8\ub2e4. Op\uc740 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \uae30\ubcf8 \uc791\uc5c5 \ub2e8\uc704\uc774\uba70, Job\uc740 \uc5ec\ub7ec Op\uc744 \uc870\ud569\ud558\uc5ec \uc644\uc804\ud55c \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"21-ops-\uac1c\ub150",children:"2.1 Ops \uac1c\ub150"}),"\n",(0,r.jsx)(e.h3,{id:"op\uc774\ub780",children:"Op\uc774\ub780?"}),"\n",(0,r.jsxs)(e.p,{children:["Op(Operation)\uc740 Dagster\uc5d0\uc11c ",(0,r.jsx)(e.strong,{children:"\uac00\uc7a5 \uae30\ubcf8\uc801\uc778 \uacc4\uc0b0 \ub2e8\uc704"}),"\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud558\uace0, \ubcc0\ud658\ud558\uace0, \uc800\uc7a5\ud558\ub294 \ub4f1\uc758 \uac1c\ubcc4 \uc791\uc5c5\uc744 \ud45c\ud604\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Op\uc758 \uc8fc\uc694 \ud2b9\uc9d5:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc21c\uc218 \ud568\uc218"}),": Op\uc740 \uac00\ub2a5\ud55c \ud55c \uc21c\uc218 \ud568\uc218\ub85c \uc791\uc131\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc7ac\uc0ac\uc6a9 \uac00\ub2a5"}),": \uc5ec\ub7ec Job\uc5d0\uc11c \ub3d9\uc77c\ud55c Op\uc744 \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud14c\uc2a4\ud2b8 \uac00\ub2a5"}),": \ub3c5\ub9bd\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\ub294 \ub2e8\uc704\uc785\ub2c8\ub2e4"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud0c0\uc785 \uc548\uc804"}),": \uc785\ub825\uacfc \ucd9c\ub825\uc758 \ud0c0\uc785\uc744 \uba85\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"op\uc758-\uad6c\uc131-\uc694\uc18c",children:"Op\uc758 \uad6c\uc131 \uc694\uc18c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, In, Out\n\n@op(\n    name="my_op",  # Op\uc758 \uc774\ub984\n    description="This is a sample op",  # Op \uc124\uba85\n    ins={"input_1": In()},  # \uc785\ub825 \uc815\uc758\n    out=Out(),  # \ucd9c\ub825 \uc815\uc758\n    tags={"team": "data", "priority": "high"}  # \uba54\ud0c0\ub370\uc774\ud130\n)\ndef my_op(input_1):\n    """Op\uc758 \uc2e4\uc81c \ub85c\uc9c1"""\n    result = input_1 * 2\n    return result\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uae30\ubcf8-op-\uc608\uc81c",children:"\uae30\ubcf8 Op \uc608\uc81c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job\n\n@op\ndef load_data():\n    """\ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud558\ub294 Op"""\n    return [1, 2, 3, 4, 5]\n\n@op\ndef process_data(numbers):\n    """\ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 Op"""\n    return [n * 2 for n in numbers]\n\n@op\ndef save_data(processed_numbers):\n    """\ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub294 Op"""\n    print(f"Saving {processed_numbers}")\n    return len(processed_numbers)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"op-vs-asset",children:"Op vs Asset"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"\ud2b9\uc131"}),(0,r.jsx)(e.th,{children:"Op"}),(0,r.jsx)(e.th,{children:"Asset"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\uc6a9\ub3c4"}),(0,r.jsx)(e.td,{children:"\uc791\uc5c5 \uc911\uc2ec (Task-oriented)"}),(0,r.jsx)(e.td,{children:"\ub370\uc774\ud130 \uc911\uc2ec (Data-oriented)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\ucd94\uc0c1\ud654 \uc218\uc900"}),(0,r.jsx)(e.td,{children:"\ub0ae\uc74c (\uad6c\ud604 \uc138\ubd80\uc0ac\ud56d)"}),(0,r.jsx)(e.td,{children:"\ub192\uc74c (\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\uc7ac\uc2e4\ud589"}),(0,r.jsx)(e.td,{children:"Job \ub2e8\uc704 \uc7ac\uc2e4\ud589"}),(0,r.jsx)(e.td,{children:"\uac1c\ubcc4 Asset \uc7ac\uc2e4\ud589 \uac00\ub2a5"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"UI \ud45c\ud604"}),(0,r.jsx)(e.td,{children:"\uc2e4\ud589 \uadf8\ub798\ud504"}),(0,r.jsx)(e.td,{children:"\uacc4\ubcf4 \uadf8\ub798\ud504 (Lineage)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"\uad8c\uc7a5 \uc0ac\uc6a9"}),(0,r.jsx)(e.td,{children:"\ubcf5\uc7a1\ud55c \uc81c\uc5b4 \ud750\ub984"}),(0,r.jsx)(e.td,{children:"\ub300\ubd80\ubd84\uc758 \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"22-op-\ub370\ucf54\ub808\uc774\ud130",children:"2.2 @op \ub370\ucf54\ub808\uc774\ud130"}),"\n",(0,r.jsx)(e.h3,{id:"\uae30\ubcf8-\uc0ac\uc6a9\ubc95",children:"\uae30\ubcf8 \uc0ac\uc6a9\ubc95"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"@op"})," \ub370\ucf54\ub808\uc774\ud130\ub294 \uc77c\ubc18 Python \ud568\uc218\ub97c Dagster Op\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op\n\n# \uac00\uc7a5 \uac04\ub2e8\ud55c \ud615\ud0dc\n@op\ndef simple_op():\n    return "Hello, Dagster!"\n\n# \uc785\ub825\uc774 \uc788\ub294 Op\n@op\ndef greet(name: str) -> str:\n    return f"Hello, {name}!"\n\n# \uc5ec\ub7ec \uc785\ub825\uc744 \ubc1b\ub294 Op\n@op\ndef add_numbers(a: int, b: int) -> int:\n    return a + b\n'})}),"\n",(0,r.jsx)(e.h3,{id:"op-\uc774\ub984\uacfc-\uc124\uba85",children:"Op \uc774\ub984\uacfc \uc124\uba85"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op\n\n@op(\n    name="extract_user_data",\n    description="\uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4"\n)\ndef extract_users():\n    # \uad6c\ud604\n    pass\n\n# \uc774\ub984\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74 \ud568\uc218 \uc774\ub984\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4\n@op\ndef transform_users():  # op \uc774\ub984: "transform_users"\n    pass\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ud0c0\uc785-\ud78c\ud2b8-\ud65c\uc6a9",children:"\ud0c0\uc785 \ud78c\ud2b8 \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op\nfrom typing import List, Dict\nimport pandas as pd\n\n@op\ndef load_csv(file_path: str) -> pd.DataFrame:\n    """CSV \ud30c\uc77c\uc744 DataFrame\uc73c\ub85c \ub85c\ub4dc"""\n    return pd.read_csv(file_path)\n\n@op\ndef filter_rows(df: pd.DataFrame, min_value: int) -> pd.DataFrame:\n    """\ud2b9\uc815 \uc870\uac74\uc73c\ub85c \ud589\uc744 \ud544\ud130\ub9c1"""\n    return df[df[\'value\'] > min_value]\n\n@op\ndef aggregate_data(df: pd.DataFrame) -> Dict[str, float]:\n    """\ub370\uc774\ud130\ub97c \uc9d1\uacc4"""\n    return {\n        \'mean\': df[\'value\'].mean(),\n        \'sum\': df[\'value\'].sum(),\n        \'count\': len(df)\n    }\n'})}),"\n",(0,r.jsx)(e.h3,{id:"context-\uac1d\uccb4-\uc0ac\uc6a9",children:"Context \uac1d\uccb4 \uc0ac\uc6a9"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"context"})," \ud30c\ub77c\ubbf8\ud130\ub97c \ud1b5\ud574 Op \uc2e4\ud589 \uc815\ubcf4\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, OpExecutionContext\n\n@op\ndef op_with_context(context: OpExecutionContext):\n    """Context\ub97c \uc0ac\uc6a9\ud558\ub294 Op"""\n    context.log.info("Op\uc774 \uc2e4\ud589\ub418\uc5c8\uc2b5\ub2c8\ub2e4")\n    context.log.warning("\uacbd\uace0 \uba54\uc2dc\uc9c0")\n    context.log.error("\uc5d0\ub7ec \uba54\uc2dc\uc9c0")\n\n    # Op \uc774\ub984 \uc811\uadfc\n    context.log.info(f"Op \uc774\ub984: {context.op.name}")\n\n    # Run ID \uc811\uadfc\n    context.log.info(f"Run ID: {context.run_id}")\n\n    return "\uc644\ub8cc"\n\n@op\ndef log_detailed_info(context: OpExecutionContext, data: List[int]):\n    """\uc0c1\uc138\ud55c \ub85c\uae45"""\n    context.log.info(f"\ucc98\ub9ac\ud560 \ub370\uc774\ud130 \uac1c\uc218: {len(data)}")\n\n    # \uad6c\uc870\ud654\ub41c \ub85c\uadf8\n    context.log.info(\n        "\ub370\uc774\ud130 \ud1b5\uacc4",\n        extra={\n            "count": len(data),\n            "min": min(data),\n            "max": max(data)\n        }\n    )\n\n    return sum(data)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"required-resources",children:"Required Resources"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, OpExecutionContext\n\n@op(required_resource_keys={"database", "api_client"})\ndef fetch_and_store(context: OpExecutionContext):\n    """\ub9ac\uc18c\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 Op"""\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\n    db = context.resources.database\n\n    # API \ud074\ub77c\uc774\uc5b8\ud2b8 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9\n    api = context.resources.api_client\n\n    data = api.fetch_data()\n    db.insert(data)\n\n    context.log.info(f"{len(data)} \ub808\ucf54\ub4dc \uc800\uc7a5 \uc644\ub8cc")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"tags-\ud65c\uc6a9",children:"Tags \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op\n\n@op(\n    tags={\n        "team": "data-engineering",\n        "priority": "high",\n        "domain": "finance",\n        "sla": "1hour"\n    }\n)\ndef critical_financial_op():\n    """\ud0dc\uadf8\uac00 \uc788\ub294 Op"""\n    # \uc911\uc694\ud55c \uae08\uc735 \ucc98\ub9ac \ub85c\uc9c1\n    pass\n\n@op(tags={"kind": "sql", "database": "postgres"})\ndef execute_sql_query():\n    """SQL \uad00\ub828 Op"""\n    pass\n'})}),"\n",(0,r.jsx)(e.h2,{id:"23-job-\uc815\uc758",children:"2.3 Job \uc815\uc758"}),"\n",(0,r.jsx)(e.h3,{id:"job\uc774\ub780",children:"Job\uc774\ub780?"}),"\n",(0,r.jsxs)(e.p,{children:["Job\uc740 ",(0,r.jsx)(e.strong,{children:"\uc5ec\ub7ec Op\uc744 \uc870\ud569\ud558\uc5ec \uc644\uc804\ud55c \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc815\uc758"}),"\ud569\ub2c8\ub2e4. Op\ub4e4 \uac04\uc758 \uc758\uc874\uc131\uc744 \uba85\uc2dc\ud558\uace0 \uc2e4\ud589 \uc21c\uc11c\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(e.h3,{id:"\uae30\ubcf8-job-\uc815\uc758",children:"\uae30\ubcf8 Job \uc815\uc758"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op\n\n@op\ndef step_one():\n    return 1\n\n@op\ndef step_two(value: int):\n    return value + 1\n\n@op\ndef step_three(value: int):\n    return value * 2\n\n@job\ndef my_job():\n    """\uac04\ub2e8\ud55c Job \uc815\uc758"""\n    result = step_one()\n    result = step_two(result)\n    step_three(result)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc5ec\ub7ec-op\uc744-\uc5f0\uacb0\ud558\ub294-job",children:"\uc5ec\ub7ec Op\uc744 \uc5f0\uacb0\ud558\ub294 Job"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op\nimport pandas as pd\n\n@op\ndef extract_data():\n    """\ub370\uc774\ud130 \ucd94\ucd9c"""\n    return pd.DataFrame({\n        \'id\': [1, 2, 3, 4, 5],\n        \'value\': [10, 20, 30, 40, 50]\n    })\n\n@op\ndef transform_data(df: pd.DataFrame):\n    """\ub370\uc774\ud130 \ubcc0\ud658"""\n    df[\'doubled\'] = df[\'value\'] * 2\n    return df\n\n@op\ndef load_data(df: pd.DataFrame):\n    """\ub370\uc774\ud130 \ub85c\ub4dc"""\n    print(f"Loading {len(df)} records")\n    df.to_csv(\'output.csv\', index=False)\n    return len(df)\n\n@job\ndef etl_pipeline():\n    """ETL \ud30c\uc774\ud504\ub77c\uc778 Job"""\n    raw_data = extract_data()\n    transformed_data = transform_data(raw_data)\n    load_data(transformed_data)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubcd1\ub82c-\uc2e4\ud589-\ud328\ud134",children:"\ubcd1\ub82c \uc2e4\ud589 \ud328\ud134"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op\n\n@op\ndef fetch_users():\n    return {"users": [{"id": 1}, {"id": 2}]}\n\n@op\ndef fetch_orders():\n    return {"orders": [{"id": 101}, {"id": 102}]}\n\n@op\ndef fetch_products():\n    return {"products": [{"id": 201}, {"id": 202}]}\n\n@op\ndef combine_data(users, orders, products):\n    """\uc5ec\ub7ec \ub370\uc774\ud130 \uc18c\uc2a4\ub97c \uacb0\ud569"""\n    return {\n        "users": users,\n        "orders": orders,\n        "products": products\n    }\n\n@job\ndef parallel_fetch_job():\n    """\ubcd1\ub82c\ub85c \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\ub294 Job"""\n    users = fetch_users()\n    orders = fetch_orders()\n    products = fetch_products()\n\n    # \uc138 Op\uc774 \ubcd1\ub82c\ub85c \uc2e4\ud589\ub41c \ud6c4 combine_data\uac00 \uc2e4\ud589\ub428\n    combine_data(users, orders, products)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"job-\uc124\uc815",children:"Job \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op, OpExecutionContext\n\n@job(\n    name="data_processing_job",\n    description="\uc77c\uc77c \ub370\uc774\ud130 \ucc98\ub9ac \uc791\uc5c5",\n    tags={"team": "analytics", "schedule": "daily"}\n)\ndef configured_job():\n    """\uc124\uc815\uc774 \uc788\ub294 Job"""\n    pass\n'})}),"\n",(0,r.jsx)(e.h2,{id:"24-ops-\uc758\uc874\uc131",children:"2.4 Ops \uc758\uc874\uc131"}),"\n",(0,r.jsx)(e.h3,{id:"\uba85\uc2dc\uc801-\uc758\uc874\uc131",children:"\uba85\uc2dc\uc801 \uc758\uc874\uc131"}),"\n",(0,r.jsx)(e.p,{children:"Op\uc758 \ucd9c\ub825\uc744 \ub2e4\ub978 Op\uc758 \uc785\ub825\uc73c\ub85c \uc804\ub2ec\ud558\uc5ec \uc758\uc874\uc131\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op\n\n@op\ndef op_a():\n    return "A\uc758 \uacb0\uacfc"\n\n@op\ndef op_b(a_result: str):\n    return f"B\uac00 {a_result}\ub97c \ubc1b\uc74c"\n\n@op\ndef op_c(b_result: str):\n    return f"C\uac00 {b_result}\ub97c \ubc1b\uc74c"\n\n@job\ndef linear_dependency_job():\n    """\uc120\ud615 \uc758\uc874\uc131: A -> B -> C"""\n    a = op_a()\n    b = op_b(a)\n    c = op_c(b)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ub2e4\uc911-\uc758\uc874\uc131",children:"\ub2e4\uc911 \uc758\uc874\uc131"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op\n\n@op\ndef source_1():\n    return [1, 2, 3]\n\n@op\ndef source_2():\n    return [4, 5, 6]\n\n@op\ndef source_3():\n    return [7, 8, 9]\n\n@op\ndef merge_sources(s1, s2, s3):\n    """\uc5ec\ub7ec \uc18c\uc2a4\ub97c \ubcd1\ud569"""\n    return s1 + s2 + s3\n\n@op\ndef process_merged(data):\n    return sum(data)\n\n@job\ndef multi_dependency_job():\n    """\uc5ec\ub7ec Op\uc5d0 \uc758\uc874\ud558\ub294 \ud328\ud134"""\n    s1 = source_1()\n    s2 = source_2()\n    s3 = source_3()\n\n    merged = merge_sources(s1, s2, s3)\n    process_merged(merged)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ud32c\uc544\uc6c3\ud32c\uc778-\ud328\ud134",children:"\ud32c\uc544\uc6c3/\ud32c\uc778 \ud328\ud134"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op\nfrom typing import Dict\n\n@op\ndef load_raw_data():\n    """\uc6d0\ubcf8 \ub370\uc774\ud130 \ub85c\ub4dc"""\n    return {\n        \'users\': [{\'id\': 1}, {\'id\': 2}],\n        \'orders\': [{\'id\': 101}, {\'id\': 102}],\n        \'products\': [{\'id\': 201}, {\'id\': 202}]\n    }\n\n@op\ndef process_users(data: Dict):\n    """\uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ucc98\ub9ac"""\n    return len(data[\'users\'])\n\n@op\ndef process_orders(data: Dict):\n    """\uc8fc\ubb38 \ub370\uc774\ud130 \ucc98\ub9ac"""\n    return len(data[\'orders\'])\n\n@op\ndef process_products(data: Dict):\n    """\uc81c\ud488 \ub370\uc774\ud130 \ucc98\ub9ac"""\n    return len(data[\'products\'])\n\n@op\ndef create_summary(user_count: int, order_count: int, product_count: int):\n    """\ucc98\ub9ac \uacb0\uacfc \uc694\uc57d"""\n    return {\n        \'total_users\': user_count,\n        \'total_orders\': order_count,\n        \'total_products\': product_count,\n        \'grand_total\': user_count + order_count + product_count\n    }\n\n@job\ndef fan_out_fan_in_job():\n    """\ud32c\uc544\uc6c3/\ud32c\uc778 \ud328\ud134"""\n    raw = load_raw_data()\n\n    # \ud32c\uc544\uc6c3: \ud558\ub098\uc758 Op \uacb0\uacfc\ub97c \uc5ec\ub7ec Op\uc774 \uc0ac\uc6a9\n    users = process_users(raw)\n    orders = process_orders(raw)\n    products = process_products(raw)\n\n    # \ud32c\uc778: \uc5ec\ub7ec Op\uc758 \uacb0\uacfc\ub97c \ud558\ub098\ub85c \ubaa8\uc74c\n    create_summary(users, orders, products)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"nothing-\uc758\uc874\uc131",children:"Nothing \uc758\uc874\uc131"}),"\n",(0,r.jsx)(e.p,{children:"\ub370\uc774\ud130\ub97c \uc804\ub2ec\ud558\uc9c0 \uc54a\uace0 \uc21c\uc11c\ub9cc \ubcf4\uc7a5\ud558\ub294 \uc758\uc874\uc131\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op, In, Nothing\n\n@op\ndef create_table():\n    """\ud14c\uc774\ube14 \uc0dd\uc131"""\n    print("\ud14c\uc774\ube14 \uc0dd\uc131\ub428")\n\n@op(ins={"start": In(Nothing)})\ndef insert_data():\n    """\ub370\uc774\ud130 \uc0bd\uc785 (\ud14c\uc774\ube14 \uc0dd\uc131 \ud6c4)"""\n    print("\ub370\uc774\ud130 \uc0bd\uc785\ub428")\n    return 100\n\n@op(ins={"start": In(Nothing)})\ndef create_index(record_count: int):\n    """\uc778\ub371\uc2a4 \uc0dd\uc131 (\ub370\uc774\ud130 \uc0bd\uc785 \ud6c4)"""\n    print(f"{record_count}\uac1c \ub808\ucf54\ub4dc\uc5d0 \ub300\ud55c \uc778\ub371\uc2a4 \uc0dd\uc131\ub428")\n\n@job\ndef database_setup_job():\n    """\uc21c\ucc28 \uc2e4\ud589\uc744 \ubcf4\uc7a5\ud558\ub294 Job"""\n    table_created = create_table()\n    records = insert_data(start=table_created)\n    create_index(start=records, record_count=records)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ubcf5\uc7a1\ud55c-\uc758\uc874\uc131-\uadf8\ub798\ud504",children:"\ubcf5\uc7a1\ud55c \uc758\uc874\uc131 \uadf8\ub798\ud504"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import job, op\n\n@op\ndef ingest_source_a():\n    return "Data from A"\n\n@op\ndef ingest_source_b():\n    return "Data from B"\n\n@op\ndef validate_a(data: str):\n    return f"Validated {data}"\n\n@op\ndef validate_b(data: str):\n    return f"Validated {data}"\n\n@op\ndef transform_a(validated: str):\n    return f"Transformed {validated}"\n\n@op\ndef transform_b(validated: str):\n    return f"Transformed {validated}"\n\n@op\ndef merge_data(data_a: str, data_b: str):\n    return f"{data_a} + {data_b}"\n\n@op\ndef final_validation(merged: str):\n    return f"Final: {merged}"\n\n@op\ndef publish(validated: str):\n    print(validated)\n\n@job\ndef complex_pipeline():\n    """\ubcf5\uc7a1\ud55c \uc758\uc874\uc131 \uadf8\ub798\ud504"""\n    # \uc18c\uc2a4 A \ucc98\ub9ac\n    raw_a = ingest_source_a()\n    validated_a = validate_a(raw_a)\n    transformed_a = transform_a(validated_a)\n\n    # \uc18c\uc2a4 B \ucc98\ub9ac\n    raw_b = ingest_source_b()\n    validated_b = validate_b(raw_b)\n    transformed_b = transform_b(validated_b)\n\n    # \ubcd1\ud569 \ubc0f \ucd5c\uc885 \ucc98\ub9ac\n    merged = merge_data(transformed_a, transformed_b)\n    final = final_validation(merged)\n    publish(final)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"25-config-\uc2dc\uc2a4\ud15c",children:"2.5 Config \uc2dc\uc2a4\ud15c"}),"\n",(0,r.jsx)(e.h3,{id:"config\uc758-\ud544\uc694\uc131",children:"Config\uc758 \ud544\uc694\uc131"}),"\n",(0,r.jsx)(e.p,{children:"Op\uacfc Job\uc740 \uc2e4\ud589 \uc2dc\uc810\uc5d0 \uc124\uc815\uac12\uc744 \ubc1b\uc744 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. Config \uc2dc\uc2a4\ud15c\uc740 \uc774\ub97c \ud0c0\uc785 \uc548\uc804\ud55c \ubc29\uc2dd\uc73c\ub85c \uc81c\uacf5\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h3,{id:"\uae30\ubcf8-config-\uc0ac\uc6a9",children:"\uae30\ubcf8 Config \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext\n\n@op\ndef op_with_config(context: OpExecutionContext):\n    """Config\ub97c \uc0ac\uc6a9\ud558\ub294 Op"""\n    # Config \uac12 \uc811\uadfc\n    config_value = context.op_config["key"]\n    context.log.info(f"Config \uac12: {config_value}")\n    return config_value\n\n@job\ndef config_job():\n    op_with_config()\n\n# \uc2e4\ud589 \uc2dc Config \uc81c\uacf5\nif __name__ == "__main__":\n    config_job.execute_in_process(\n        run_config={\n            "ops": {\n                "op_with_config": {\n                    "config": {\n                        "key": "value"\n                    }\n                }\n            }\n        }\n    )\n'})}),"\n",(0,r.jsx)(e.h3,{id:"config-schema-\uc815\uc758",children:"Config Schema \uc815\uc758"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Config\nfrom pydantic import Field\n\nclass MyOpConfig(Config):\n    """Op Config \uc2a4\ud0a4\ub9c8"""\n    name: str = Field(description="\ucc98\ub9ac\ud560 \uc774\ub984")\n    count: int = Field(default=10, description="\ucc98\ub9ac \ud69f\uc218")\n    enabled: bool = Field(default=True, description="\ud65c\uc131\ud654 \uc5ec\ubd80")\n\n@op\ndef typed_config_op(context: OpExecutionContext, config: MyOpConfig):\n    """\ud0c0\uc785\uc774 \uc9c0\uc815\ub41c Config\ub97c \uc0ac\uc6a9\ud558\ub294 Op"""\n    context.log.info(f"\uc774\ub984: {config.name}")\n    context.log.info(f"\ud69f\uc218: {config.count}")\n    context.log.info(f"\ud65c\uc131\ud654: {config.enabled}")\n\n    if config.enabled:\n        return [config.name] * config.count\n    return []\n\n@job\ndef typed_config_job():\n    typed_config_op()\n\n# \uc2e4\ud589 \uc608\uc81c\nif __name__ == "__main__":\n    result = typed_config_job.execute_in_process(\n        run_config={\n            "ops": {\n                "typed_config_op": {\n                    "config": {\n                        "name": "test",\n                        "count": 5,\n                        "enabled": True\n                    }\n                }\n            }\n        }\n    )\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc911\ucca9\ub41c-config",children:"\uc911\ucca9\ub41c Config"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Config\nfrom typing import List, Optional\nfrom pydantic import Field\n\nclass DatabaseConfig(Config):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uc815"""\n    host: str\n    port: int = 5432\n    database: str\n    username: str\n    password: str\n\nclass QueryConfig(Config):\n    """\ucffc\ub9ac \uc124\uc815"""\n    table: str\n    columns: List[str]\n    where_clause: Optional[str] = None\n    limit: int = 1000\n\nclass ETLConfig(Config):\n    """ETL \uc804\uccb4 \uc124\uc815"""\n    database: DatabaseConfig\n    query: QueryConfig\n    output_path: str = Field(default="./output")\n\n@op\ndef extract_with_config(context: OpExecutionContext, config: ETLConfig):\n    """\ubcf5\uc7a1\ud55c Config\ub97c \uc0ac\uc6a9\ud558\ub294 Op"""\n    context.log.info(f"\ub370\uc774\ud130\ubca0\uc774\uc2a4: {config.database.host}:{config.database.port}")\n    context.log.info(f"\ud14c\uc774\ube14: {config.query.table}")\n    context.log.info(f"\uceec\ub7fc: {\', \'.join(config.query.columns)}")\n\n    # \uc2e4\uc81c \ucffc\ub9ac \uc2e4\ud589 \ub85c\uc9c1\n    query = f"SELECT {\', \'.join(config.query.columns)} FROM {config.query.table}"\n    if config.query.where_clause:\n        query += f" WHERE {config.query.where_clause}"\n    query += f" LIMIT {config.query.limit}"\n\n    context.log.info(f"\uc2e4\ud589 \ucffc\ub9ac: {query}")\n\n    return {"query": query, "output": config.output_path}\n\n@job\ndef etl_with_config_job():\n    extract_with_config()\n\n# \uc2e4\ud589 \uc608\uc81c\nif __name__ == "__main__":\n    result = etl_with_config_job.execute_in_process(\n        run_config={\n            "ops": {\n                "extract_with_config": {\n                    "config": {\n                        "database": {\n                            "host": "localhost",\n                            "port": 5432,\n                            "database": "mydb",\n                            "username": "user",\n                            "password": "pass"\n                        },\n                        "query": {\n                            "table": "users",\n                            "columns": ["id", "name", "email"],\n                            "where_clause": "active = true",\n                            "limit": 500\n                        },\n                        "output_path": "./data/users.csv"\n                    }\n                }\n            }\n        }\n    )\n'})}),"\n",(0,r.jsx)(e.h3,{id:"config-with-enum",children:"Config with Enum"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Config\nfrom enum import Enum\n\nclass OutputFormat(str, Enum):\n    """\ucd9c\ub825 \ud615\uc2dd Enum"""\n    CSV = "csv"\n    JSON = "json"\n    PARQUET = "parquet"\n\nclass ExportConfig(Config):\n    """\ub370\uc774\ud130 \ub0b4\ubcf4\ub0b4\uae30 \uc124\uc815"""\n    format: OutputFormat\n    compression: bool = False\n    include_header: bool = True\n\n@op\ndef export_data(context: OpExecutionContext, config: ExportConfig):\n    """Enum Config\ub97c \uc0ac\uc6a9\ud558\ub294 Op"""\n    context.log.info(f"\ucd9c\ub825 \ud615\uc2dd: {config.format.value}")\n    context.log.info(f"\uc555\ucd95: {config.compression}")\n\n    if config.format == OutputFormat.CSV:\n        context.log.info("CSV \ud615\uc2dd\uc73c\ub85c \ub0b4\ubcf4\ub0b4\uae30")\n    elif config.format == OutputFormat.JSON:\n        context.log.info("JSON \ud615\uc2dd\uc73c\ub85c \ub0b4\ubcf4\ub0b4\uae30")\n    elif config.format == OutputFormat.PARQUET:\n        context.log.info("Parquet \ud615\uc2dd\uc73c\ub85c \ub0b4\ubcf4\ub0b4\uae30")\n\n    return config.format.value\n\n@job\ndef export_job():\n    export_data()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"config-validation",children:"Config Validation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Config\nfrom pydantic import Field, validator\n\nclass ValidatedConfig(Config):\n    """\uc720\ud6a8\uc131 \uac80\uc99d\uc774 \uc788\ub294 Config"""\n    email: str = Field(pattern=r\'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\')\n    age: int = Field(ge=0, le=150, description="\ub098\uc774 (0-150)")\n    score: float = Field(ge=0.0, le=100.0, description="\uc810\uc218 (0-100)")\n\n    @validator(\'email\')\n    def validate_email_domain(cls, v):\n        """\uc774\uba54\uc77c \ub3c4\uba54\uc778 \uac80\uc99d"""\n        if not v.endswith((\'@example.com\', \'@test.com\')):\n            raise ValueError(\'\ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc740 \uc774\uba54\uc77c \ub3c4\uba54\uc778\uc785\ub2c8\ub2e4\')\n        return v\n\n    @validator(\'age\')\n    def validate_age_range(cls, v):\n        """\ub098\uc774 \ubc94\uc704 \uac80\uc99d"""\n        if v < 18:\n            raise ValueError(\'18\uc138 \uc774\uc0c1\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4\')\n        return v\n\n@op\ndef process_validated_data(context: OpExecutionContext, config: ValidatedConfig):\n    """\uac80\uc99d\ub41c Config\ub97c \uc0ac\uc6a9\ud558\ub294 Op"""\n    context.log.info(f"\uc774\uba54\uc77c: {config.email}")\n    context.log.info(f"\ub098\uc774: {config.age}")\n    context.log.info(f"\uc810\uc218: {config.score}")\n    return True\n\n@job\ndef validated_config_job():\n    process_validated_data()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"yaml-config-\ud30c\uc77c-\uc0ac\uc6a9",children:"YAML Config \ud30c\uc77c \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Config\nimport yaml\n\nclass ProcessingConfig(Config):\n    """\ucc98\ub9ac \uc124\uc815"""\n    batch_size: int\n    timeout_seconds: int\n    retry_attempts: int\n\n@op\ndef batch_processor(context: OpExecutionContext, config: ProcessingConfig):\n    """\ubc30\uce58 \ucc98\ub9ac Op"""\n    context.log.info(f"\ubc30\uce58 \ud06c\uae30: {config.batch_size}")\n    context.log.info(f"\ud0c0\uc784\uc544\uc6c3: {config.timeout_seconds}\ucd08")\n    context.log.info(f"\uc7ac\uc2dc\ub3c4 \ud69f\uc218: {config.retry_attempts}\ud68c")\n    return True\n\n@job\ndef batch_job():\n    batch_processor()\n\n# config.yaml \ud30c\uc77c \ub0b4\uc6a9:\n"""\nops:\n  batch_processor:\n    config:\n      batch_size: 1000\n      timeout_seconds: 300\n      retry_attempts: 3\n"""\n\n# \uc2e4\ud589 \uc608\uc81c\nif __name__ == "__main__":\n    with open("config.yaml", "r") as f:\n        run_config = yaml.safe_load(f)\n\n    result = batch_job.execute_in_process(run_config=run_config)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"26-op-\ucd9c\ub825",children:"2.6 Op \ucd9c\ub825"}),"\n",(0,r.jsx)(e.h3,{id:"\ub2e8\uc77c-\ucd9c\ub825",children:"\ub2e8\uc77c \ucd9c\ub825"}),"\n",(0,r.jsx)(e.p,{children:"\uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ud615\ud0dc\ub85c, Op\uc774 \ud558\ub098\uc758 \uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job\n\n@op\ndef get_number():\n    """\ub2e8\uc77c \uac12\uc744 \ubc18\ud658\ud558\ub294 Op"""\n    return 42\n\n@op\ndef double_number(num: int):\n    """\uc785\ub825\uc744 \ub450 \ubc30\ub85c \ub9cc\ub4dc\ub294 Op"""\n    return num * 2\n\n@job\ndef single_output_job():\n    num = get_number()\n    double_number(num)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc5ec\ub7ec-\ucd9c\ub825-tuple",children:"\uc5ec\ub7ec \ucd9c\ub825 (Tuple)"}),"\n",(0,r.jsx)(e.p,{children:"Op\uc774 \uc5ec\ub7ec \uac12\uc744 \ubc18\ud658\ud574\uc57c \ud560 \ub54c tuple\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, Out, Output\n\n@op(\n    out={\n        "mean": Out(float),\n        "median": Out(float),\n        "std_dev": Out(float)\n    }\n)\ndef calculate_statistics(numbers):\n    """\uc5ec\ub7ec \ud1b5\uacc4\uac12\uc744 \ubc18\ud658\ud558\ub294 Op"""\n    import statistics\n\n    mean_val = statistics.mean(numbers)\n    median_val = statistics.median(numbers)\n    std_dev_val = statistics.stdev(numbers)\n\n    return mean_val, median_val, std_dev_val\n\n@op\ndef report_mean(value: float):\n    print(f"\ud3c9\uade0: {value}")\n\n@op\ndef report_median(value: float):\n    print(f"\uc911\uc559\uac12: {value}")\n\n@op\ndef report_std_dev(value: float):\n    print(f"\ud45c\uc900\ud3b8\ucc28: {value}")\n\n@job\ndef multi_output_job():\n    mean, median, std = calculate_statistics([1, 2, 3, 4, 5])\n    report_mean(mean)\n    report_median(median)\n    report_std_dev(std)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"output-\uac1d\uccb4-\uc0ac\uc6a9",children:"Output \uac1d\uccb4 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(e.p,{children:"\uba54\ud0c0\ub370\uc774\ud130\uc640 \ud568\uaed8 \ucd9c\ub825\uc744 \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, Output, OpExecutionContext\nimport pandas as pd\n\n@op\ndef load_and_validate_data(context: OpExecutionContext):\n    """\uba54\ud0c0\ub370\uc774\ud130\uc640 \ud568\uaed8 \ub370\uc774\ud130\ub97c \ubc18\ud658\ud558\ub294 Op"""\n    df = pd.DataFrame({\n        \'id\': [1, 2, 3, 4, 5],\n        \'value\': [10, 20, 30, 40, 50]\n    })\n\n    # \uba54\ud0c0\ub370\uc774\ud130\uc640 \ud568\uaed8 \ucd9c\ub825\n    return Output(\n        value=df,\n        metadata={\n            "num_rows": len(df),\n            "num_columns": len(df.columns),\n            "columns": df.columns.tolist(),\n            "memory_usage": f"{df.memory_usage(deep=True).sum()} bytes"\n        }\n    )\n\n@op\ndef process_dataframe(context: OpExecutionContext, df: pd.DataFrame):\n    """DataFrame\uc744 \ucc98\ub9ac\ud558\uace0 \uba54\ud0c0\ub370\uc774\ud130\ub97c \ubc18\ud658"""\n    processed_df = df.copy()\n    processed_df[\'doubled\'] = processed_df[\'value\'] * 2\n\n    context.log.info(f"\ucc98\ub9ac\ub41c \ud589 \uc218: {len(processed_df)}")\n\n    return Output(\n        value=processed_df,\n        metadata={\n            "original_rows": len(df),\n            "processed_rows": len(processed_df),\n            "new_columns": [\'doubled\']\n        }\n    )\n\n@job\ndef metadata_job():\n    data = load_and_validate_data()\n    process_dataframe(data)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc5ec\ub7ec-\ucd9c\ub825\uc744-\uba85\uba85\ud558\uc5ec-\ubc18\ud658",children:"\uc5ec\ub7ec \ucd9c\ub825\uc744 \uba85\uba85\ud558\uc5ec \ubc18\ud658"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from dagster import op, job, Out, Output\n\n@op(\n    out={\n        \"valid_records\": Out(),\n        \"invalid_records\": Out(),\n        \"statistics\": Out()\n    }\n)\ndef validate_records(records):\n    \"\"\"\ub808\ucf54\ub4dc\ub97c \uac80\uc99d\ud558\uace0 \uc5ec\ub7ec \ucd9c\ub825\uc744 \ubc18\ud658\"\"\"\n    valid = [r for r in records if r.get('value', 0) > 0]\n    invalid = [r for r in records if r.get('value', 0) <= 0]\n\n    stats = {\n        'total': len(records),\n        'valid': len(valid),\n        'invalid': len(invalid),\n        'valid_ratio': len(valid) / len(records) if records else 0\n    }\n\n    # \uba85\uba85\ub41c \ucd9c\ub825 \ubc18\ud658\n    return (\n        Output(valid, output_name=\"valid_records\"),\n        Output(invalid, output_name=\"invalid_records\"),\n        Output(stats, output_name=\"statistics\")\n    )\n\n@op\ndef process_valid(records):\n    print(f\"\uc720\ud6a8\ud55c \ub808\ucf54\ub4dc {len(records)}\uac1c \ucc98\ub9ac\")\n    return len(records)\n\n@op\ndef log_invalid(records):\n    print(f\"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub808\ucf54\ub4dc {len(records)}\uac1c \ub85c\uae45\")\n    return len(records)\n\n@op\ndef report_stats(stats):\n    print(f\"\ud1b5\uacc4: {stats}\")\n    return stats\n\n@job\ndef validation_job():\n    valid, invalid, stats = validate_records([\n        {'id': 1, 'value': 10},\n        {'id': 2, 'value': -5},\n        {'id': 3, 'value': 20}\n    ])\n\n    process_valid(valid)\n    log_invalid(invalid)\n    report_stats(stats)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"optional-\ucd9c\ub825",children:"Optional \ucd9c\ub825"}),"\n",(0,r.jsx)(e.p,{children:"\ucd9c\ub825\uc774 \uc120\ud0dd\uc801\uc77c \uc218 \uc788\ub294 \uacbd\uc6b0:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, Out, Output, OpExecutionContext\nfrom typing import Optional\n\n@op(\n    out={\n        "result": Out(is_required=False),\n        "error": Out(is_required=False)\n    }\n)\ndef risky_operation(context: OpExecutionContext, value: int):\n    """\uc2e4\ud328\ud560 \uc218 \uc788\ub294 \uc791\uc5c5"""\n    try:\n        if value < 0:\n            raise ValueError("\uc74c\uc218\ub294 \ucc98\ub9ac\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4")\n\n        result = value * 2\n        yield Output(result, output_name="result")\n\n    except Exception as e:\n        context.log.error(f"\uc624\ub958 \ubc1c\uc0dd: {str(e)}")\n        yield Output(str(e), output_name="error")\n\n@op\ndef handle_success(context: OpExecutionContext, value: int):\n    context.log.info(f"\uc131\uacf5 \ucc98\ub9ac: {value}")\n\n@op\ndef handle_error(context: OpExecutionContext, error: str):\n    context.log.error(f"\uc624\ub958 \ucc98\ub9ac: {error}")\n\n@job\ndef conditional_output_job():\n    result, error = risky_operation(10)\n    handle_success(result)\n    handle_error(error)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"27-\ub3d9\uc801-op",children:"2.7 \ub3d9\uc801 Op"}),"\n",(0,r.jsx)(e.h3,{id:"dynamicoutput-\uc18c\uac1c",children:"DynamicOutput \uc18c\uac1c"}),"\n",(0,r.jsxs)(e.p,{children:["\ub3d9\uc801 Op\uc740 ",(0,r.jsx)(e.strong,{children:"\uc2e4\ud589 \uc2dc\uc810\uc5d0 \uacb0\uc815\ub418\ub294 \uac1c\uc218\uc758 \ucd9c\ub825"}),"\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcd1\ub82c \ucc98\ub9ac\ub098 \ub370\uc774\ud130 \ud30c\ud2f0\uc154\ub2dd\uc5d0 \uc720\uc6a9\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, DynamicOut, DynamicOutput\n\n@op(out=DynamicOut())\ndef generate_files():\n    """\ub3d9\uc801\uc73c\ub85c \ud30c\uc77c \ubaa9\ub85d\uc744 \uc0dd\uc131"""\n    files = ["file1.csv", "file2.csv", "file3.csv"]\n\n    for file in files:\n        yield DynamicOutput(\n            value=file,\n            mapping_key=file.replace(".", "_")\n        )\n\n@op\ndef process_file(file_path: str):\n    """\uac1c\ubcc4 \ud30c\uc77c \ucc98\ub9ac"""\n    print(f"\ucc98\ub9ac \uc911: {file_path}")\n    return f"Processed: {file_path}"\n\n@op\ndef collect_results(results):\n    """\uacb0\uacfc \uc218\uc9d1"""\n    print(f"\ucd1d {len(results)}\uac1c \ud30c\uc77c \ucc98\ub9ac \uc644\ub8cc")\n    return results\n\n@job\ndef dynamic_job():\n    files = generate_files()\n    results = files.map(process_file)\n    collect_results(results.collect())\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\ub3d9\uc801-\ud30c\ud2f0\uc154\ub2dd",children:"\ub3d9\uc801 \ud30c\ud2f0\uc154\ub2dd"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from dagster import op, job, DynamicOut, DynamicOutput, OpExecutionContext\nimport pandas as pd\n\n@op(out=DynamicOut())\ndef partition_data(context: OpExecutionContext):\n    \"\"\"\ub370\uc774\ud130\ub97c \ub3d9\uc801\uc73c\ub85c \ud30c\ud2f0\uc154\ub2dd\"\"\"\n    # \ud070 \ub370\uc774\ud130\uc14b\uc744 \ub85c\ub4dc\n    df = pd.DataFrame({\n        'category': ['A', 'A', 'B', 'B', 'C', 'C'],\n        'value': [1, 2, 3, 4, 5, 6]\n    })\n\n    # \uce74\ud14c\uace0\ub9ac\ubcc4\ub85c \ud30c\ud2f0\uc154\ub2dd\n    for category in df['category'].unique():\n        partition = df[df['category'] == category]\n\n        context.log.info(f\"\ud30c\ud2f0\uc158 \uc0dd\uc131: {category} ({len(partition)} \ud589)\")\n\n        yield DynamicOutput(\n            value=partition,\n            mapping_key=f\"category_{category}\"\n        )\n\n@op\ndef process_partition(context: OpExecutionContext, partition: pd.DataFrame):\n    \"\"\"\uac1c\ubcc4 \ud30c\ud2f0\uc158 \ucc98\ub9ac\"\"\"\n    category = partition['category'].iloc[0]\n    total = partition['value'].sum()\n\n    context.log.info(f\"\uce74\ud14c\uace0\ub9ac {category} \ucc98\ub9ac: \ud569\uacc4 = {total}\")\n\n    return {\n        'category': category,\n        'count': len(partition),\n        'sum': total\n    }\n\n@op\ndef aggregate_results(context: OpExecutionContext, results):\n    \"\"\"\ud30c\ud2f0\uc158 \ucc98\ub9ac \uacb0\uacfc \uc9d1\uacc4\"\"\"\n    total_count = sum(r['count'] for r in results)\n    total_sum = sum(r['sum'] for r in results)\n\n    context.log.info(f\"\uc804\uccb4 \ub808\ucf54\ub4dc: {total_count}, \uc804\uccb4 \ud569\uacc4: {total_sum}\")\n\n    return {\n        'total_partitions': len(results),\n        'total_records': total_count,\n        'total_sum': total_sum\n    }\n\n@job\ndef dynamic_partition_job():\n    partitions = partition_data()\n    results = partitions.map(process_partition)\n    aggregate_results(results.collect())\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc81c-\uc0ac\uc6a9-\uc608\uc81c-\ubcd1\ub82c-\ud30c\uc77c-\ucc98\ub9ac",children:"\uc2e4\uc81c \uc0ac\uc6a9 \uc608\uc81c: \ubcd1\ub82c \ud30c\uc77c \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, DynamicOut, DynamicOutput, OpExecutionContext\nfrom typing import List\nimport glob\n\n@op(out=DynamicOut())\ndef scan_directory(context: OpExecutionContext, pattern: str):\n    """\ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \ud30c\uc77c\uc744 \uc2a4\uce94\ud558\uace0 \ub3d9\uc801 \ucd9c\ub825 \uc0dd\uc131"""\n    files = glob.glob(pattern)\n\n    context.log.info(f"{len(files)}\uac1c\uc758 \ud30c\uc77c \ubc1c\uacac")\n\n    for idx, file_path in enumerate(files):\n        yield DynamicOutput(\n            value=file_path,\n            mapping_key=f"file_{idx}"\n        )\n\n@op\ndef validate_file(context: OpExecutionContext, file_path: str):\n    """\ud30c\uc77c \uc720\ud6a8\uc131 \uac80\uc99d"""\n    import os\n\n    if not os.path.exists(file_path):\n        context.log.error(f"\ud30c\uc77c\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c: {file_path}")\n        return None\n\n    size = os.path.getsize(file_path)\n    context.log.info(f"\ud30c\uc77c \uac80\uc99d \uc644\ub8cc: {file_path} ({size} bytes)")\n\n    return {\n        \'path\': file_path,\n        \'size\': size,\n        \'valid\': True\n    }\n\n@op\ndef process_file_data(context: OpExecutionContext, file_info):\n    """\ud30c\uc77c \ub370\uc774\ud130 \ucc98\ub9ac"""\n    if file_info is None:\n        return None\n\n    context.log.info(f"\ucc98\ub9ac \uc911: {file_info[\'path\']}")\n\n    # \uc2e4\uc81c \ud30c\uc77c \ucc98\ub9ac \ub85c\uc9c1\n    # ...\n\n    return {\n        \'path\': file_info[\'path\'],\n        \'processed\': True,\n        \'records\': 100  # \uc608\uc2dc\n    }\n\n@op\ndef generate_report(context: OpExecutionContext, results: List):\n    """\ucc98\ub9ac \uacb0\uacfc \ubcf4\uace0\uc11c \uc0dd\uc131"""\n    valid_results = [r for r in results if r is not None]\n\n    total_records = sum(r.get(\'records\', 0) for r in valid_results)\n\n    report = {\n        \'total_files\': len(results),\n        \'processed_files\': len(valid_results),\n        \'total_records\': total_records\n    }\n\n    context.log.info(f"\ubcf4\uace0\uc11c: {report}")\n    return report\n\n@job\ndef parallel_file_processing_job():\n    """\ud30c\uc77c\uc744 \ubcd1\ub82c\ub85c \ucc98\ub9ac\ud558\ub294 Job"""\n    files = scan_directory("*.csv")\n    validated = files.map(validate_file)\n    processed = validated.map(process_file_data)\n    generate_report(processed.collect())\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc911\ucca9\ub41c-\ub3d9\uc801-\uc2e4\ud589",children:"\uc911\ucca9\ub41c \ub3d9\uc801 \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, DynamicOut, DynamicOutput, OpExecutionContext\n\n@op(out=DynamicOut())\ndef get_databases(context: OpExecutionContext):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa9\ub85d \uc0dd\uc131"""\n    databases = ["db1", "db2", "db3"]\n\n    for db in databases:\n        yield DynamicOutput(db, mapping_key=db)\n\n@op(out=DynamicOut())\ndef get_tables(context: OpExecutionContext, database: str):\n    """\uac01 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ud14c\uc774\ube14 \ubaa9\ub85d \uc0dd\uc131"""\n    # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ucffc\ub9ac\n    tables = [f"{database}.table1", f"{database}.table2"]\n\n    for table in tables:\n        yield DynamicOutput(\n            table,\n            mapping_key=table.replace(".", "_")\n        )\n\n@op\ndef process_table(context: OpExecutionContext, table: str):\n    """\uac1c\ubcc4 \ud14c\uc774\ube14 \ucc98\ub9ac"""\n    context.log.info(f"\ud14c\uc774\ube14 \ucc98\ub9ac: {table}")\n    return f"Processed: {table}"\n\n@op\ndef summarize_database(context: OpExecutionContext, results):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4\ubcc4 \ucc98\ub9ac \uacb0\uacfc \uc694\uc57d"""\n    context.log.info(f"\ud14c\uc774\ube14 {len(results)}\uac1c \ucc98\ub9ac \uc644\ub8cc")\n    return len(results)\n\n@op\ndef final_summary(context: OpExecutionContext, db_summaries):\n    """\uc804\uccb4 \uc694\uc57d"""\n    total = sum(db_summaries)\n    context.log.info(f"\ucd1d {total}\uac1c \ud14c\uc774\ube14 \ucc98\ub9ac \uc644\ub8cc")\n    return total\n\n@job\ndef nested_dynamic_job():\n    """\uc911\ucca9\ub41c \ub3d9\uc801 \uc2e4\ud589"""\n    databases = get_databases()\n\n    # \uac01 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ub300\ud574\n    db_results = databases.map(\n        lambda db: get_tables(db).map(process_table).collect()\n    )\n\n    db_summaries = db_results.map(summarize_database)\n    final_summary(db_summaries.collect())\n'})}),"\n",(0,r.jsx)(e.h2,{id:"28-job-\uc2e4\ud589",children:"2.8 Job \uc2e4\ud589"}),"\n",(0,r.jsx)(e.h3,{id:"\ub85c\uceec-\uc2e4\ud589",children:"\ub85c\uceec \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job\n\n@op\ndef hello_op():\n    print("Hello, Dagster!")\n    return "\uc644\ub8cc"\n\n@job\ndef hello_job():\n    hello_op()\n\n# \uc9c1\uc811 \uc2e4\ud589\nif __name__ == "__main__":\n    result = hello_job.execute_in_process()\n    print(f"\uc131\uacf5: {result.success}")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"config\uc640-\ud568\uaed8-\uc2e4\ud589",children:"Config\uc640 \ud568\uaed8 \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, Config, OpExecutionContext\n\nclass GreetConfig(Config):\n    name: str\n    greeting: str = "Hello"\n\n@op\ndef greet(context: OpExecutionContext, config: GreetConfig):\n    message = f"{config.greeting}, {config.name}!"\n    context.log.info(message)\n    return message\n\n@job\ndef greet_job():\n    greet()\n\n# Config\uc640 \ud568\uaed8 \uc2e4\ud589\nif __name__ == "__main__":\n    result = greet_job.execute_in_process(\n        run_config={\n            "ops": {\n                "greet": {\n                    "config": {\n                        "name": "Dagster",\n                        "greeting": "\uc548\ub155\ud558\uc138\uc694"\n                    }\n                }\n            }\n        }\n    )\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\ud589-\uacb0\uacfc-\uc811\uadfc",children:"\uc2e4\ud589 \uacb0\uacfc \uc811\uadfc"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext\n\n@op\ndef compute_numbers(context: OpExecutionContext):\n    numbers = [1, 2, 3, 4, 5]\n    context.log.info(f"\uc0dd\uc131\ub41c \uc22b\uc790: {numbers}")\n    return numbers\n\n@op\ndef sum_numbers(context: OpExecutionContext, numbers):\n    total = sum(numbers)\n    context.log.info(f"\ud569\uacc4: {total}")\n    return total\n\n@job\ndef math_job():\n    numbers = compute_numbers()\n    sum_numbers(numbers)\n\n# \uc2e4\ud589 \uacb0\uacfc \uc811\uadfc\nif __name__ == "__main__":\n    result = math_job.execute_in_process()\n\n    # \uc2e4\ud589 \uc131\uacf5 \uc5ec\ubd80\n    print(f"\uc131\uacf5: {result.success}")\n\n    # \ud2b9\uc815 Op\uc758 \ucd9c\ub825 \uac12 \uc811\uadfc\n    sum_result = result.output_for_node("sum_numbers")\n    print(f"\ud569\uacc4 \uacb0\uacfc: {sum_result}")\n\n    # \ubaa8\ub4e0 \uc774\ubca4\ud2b8 \ud655\uc778\n    for event in result.all_events:\n        if event.event_type_value == "STEP_SUCCESS":\n            print(f"\uc131\uacf5\ud55c Op: {event.step_key}")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\ud328-\ucc98\ub9ac",children:"\uc2e4\ud328 \ucc98\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Failure\n\n@op\ndef validate_input(context: OpExecutionContext, value: int):\n    """\uc785\ub825 \uac12 \uac80\uc99d"""\n    if value < 0:\n        raise Failure(\n            description=f"\uc74c\uc218 \uac12\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4: {value}",\n            metadata={\n                "received_value": value,\n                "expected": "\uc591\uc218"\n            }\n        )\n\n    context.log.info(f"\uac80\uc99d \uc131\uacf5: {value}")\n    return value\n\n@op\ndef process_value(context: OpExecutionContext, value: int):\n    """\uac12 \ucc98\ub9ac"""\n    result = value * 2\n    context.log.info(f"\ucc98\ub9ac \uacb0\uacfc: {result}")\n    return result\n\n@job\ndef validation_job():\n    value = validate_input(10)  # \ub610\ub294 validate_input(-5)\ub85c \uc2e4\ud328 \ud14c\uc2a4\ud2b8\n    process_value(value)\n\n# \uc2e4\ud589 \ubc0f \uc2e4\ud328 \ucc98\ub9ac\nif __name__ == "__main__":\n    try:\n        result = validation_job.execute_in_process()\n        if result.success:\n            print("Job \uc2e4\ud589 \uc131\uacf5!")\n        else:\n            print("Job \uc2e4\ud589 \uc2e4\ud328!")\n    except Exception as e:\n        print(f"\uc2e4\ud589 \uc911 \uc608\uc678 \ubc1c\uc0dd: {e}")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"resources\uc640-\ud568\uaed8-\uc2e4\ud589",children:"Resources\uc640 \ud568\uaed8 \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, resource, ConfigurableResource\nfrom typing import List\n\nclass DatabaseResource(ConfigurableResource):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9ac\uc18c\uc2a4"""\n    connection_string: str\n\n    def query(self, sql: str) -> List[dict]:\n        """\ucffc\ub9ac \uc2e4\ud589 (\ubaa8\uc758)"""\n        print(f"\uc2e4\ud589 \uc911: {sql}")\n        return [{"id": 1, "name": "\ud14c\uc2a4\ud2b8"}]\n\n@op\ndef fetch_data(context: OpExecutionContext, database: DatabaseResource):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \uc870\ud68c"""\n    results = database.query("SELECT * FROM users")\n    context.log.info(f"{len(results)}\uac1c \ub808\ucf54\ub4dc \uc870\ud68c")\n    return results\n\n@job\ndef database_job():\n    fetch_data()\n\n# Resources\uc640 \ud568\uaed8 \uc2e4\ud589\nif __name__ == "__main__":\n    result = database_job.execute_in_process(\n        resources={\n            "database": DatabaseResource(\n                connection_string="postgresql://localhost/mydb"\n            )\n        }\n    )\n'})}),"\n",(0,r.jsx)(e.h3,{id:"tags\ub97c-\ud65c\uc6a9\ud55c-\uc2e4\ud589",children:"Tags\ub97c \ud65c\uc6a9\ud55c \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job\n\n@op(tags={"team": "data-eng", "priority": "high"})\ndef important_op():\n    return "\uc911\uc694\ud55c \uc791\uc5c5 \uc644\ub8cc"\n\n@op(tags={"team": "analytics", "priority": "low"})\ndef analysis_op():\n    return "\ubd84\uc11d \uc644\ub8cc"\n\n@job(tags={"environment": "production", "schedule": "daily"})\ndef tagged_job():\n    important_op()\n    analysis_op()\n\n# \uc2e4\ud589 \uc2dc \ucd94\uac00 \ud0dc\uadf8 \uc9c0\uc815\nif __name__ == "__main__":\n    result = tagged_job.execute_in_process(\n        tags={"execution_date": "2025-10-25", "triggered_by": "manual"}\n    )\n'})}),"\n",(0,r.jsx)(e.h2,{id:"29-\uc7ac\uc2dc\ub3c4-\uc815\ucc45",children:"2.9 \uc7ac\uc2dc\ub3c4 \uc815\ucc45"}),"\n",(0,r.jsx)(e.h3,{id:"\uae30\ubcf8-\uc7ac\uc2dc\ub3c4-\uc124\uc815",children:"\uae30\ubcf8 \uc7ac\uc2dc\ub3c4 \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Backoff, Jitter, RetryPolicy\n\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=3,\n        delay=1,  # \ucd08 \ub2e8\uc704\n    )\n)\ndef flaky_op(context: OpExecutionContext):\n    """\uac00\ub054 \uc2e4\ud328\ud558\ub294 Op"""\n    import random\n\n    if random.random() < 0.7:  # 70% \ud655\ub960\ub85c \uc2e4\ud328\n        context.log.warning("\uc791\uc5c5 \uc2e4\ud328, \uc7ac\uc2dc\ub3c4 \uc911...")\n        raise Exception("\uc784\uc2dc \uc624\ub958 \ubc1c\uc0dd")\n\n    context.log.info("\uc791\uc5c5 \uc131\uacf5!")\n    return "\uc131\uacf5"\n\n@job\ndef retry_job():\n    flaky_op()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uace0\uae09-\uc7ac\uc2dc\ub3c4-\uc804\ub7b5",children:"\uace0\uae09 \uc7ac\uc2dc\ub3c4 \uc804\ub7b5"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, RetryPolicy, Backoff, Jitter\n\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=5,\n        delay=2,  # \ucd08\uae30 \uc9c0\uc5f0 2\ucd08\n        backoff=Backoff.EXPONENTIAL,  # \uc9c0\uc218 \ubc31\uc624\ud504\n        jitter=Jitter.PLUS_MINUS  # \uc9c0\ud130 \ucd94\uac00\n    )\n)\ndef api_call_op(context: OpExecutionContext):\n    """\uc678\ubd80 API \ud638\ucd9c"""\n    import requests\n    import random\n\n    try:\n        # \ubaa8\uc758 API \ud638\ucd9c\n        if random.random() < 0.5:\n            raise requests.exceptions.ConnectionError("\uc5f0\uacb0 \uc2e4\ud328")\n\n        context.log.info("API \ud638\ucd9c \uc131\uacf5")\n        return {"status": "ok", "data": [1, 2, 3]}\n\n    except Exception as e:\n        context.log.error(f"API \ud638\ucd9c \uc2e4\ud328: {str(e)}")\n        raise\n\n@job\ndef api_job():\n    api_call_op()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc7ac\uc2dc\ub3c4-\uc815\ucc45-\uc0c1\uc138-\uc124\uc815",children:"\uc7ac\uc2dc\ub3c4 \uc815\ucc45 \uc0c1\uc138 \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, RetryPolicy, Backoff, Jitter\n\n# \uc120\ud615 \ubc31\uc624\ud504\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=3,\n        delay=1,\n        backoff=Backoff.LINEAR  # 1\ucd08, 2\ucd08, 3\ucd08\n    )\n)\ndef linear_retry_op(context: OpExecutionContext):\n    context.log.info("\uc120\ud615 \ubc31\uc624\ud504 \uc7ac\uc2dc\ub3c4")\n    raise Exception("\uc7ac\uc2dc\ub3c4 \ud14c\uc2a4\ud2b8")\n\n# \uc9c0\uc218 \ubc31\uc624\ud504\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=4,\n        delay=1,\n        backoff=Backoff.EXPONENTIAL  # 1\ucd08, 2\ucd08, 4\ucd08, 8\ucd08\n    )\n)\ndef exponential_retry_op(context: OpExecutionContext):\n    context.log.info("\uc9c0\uc218 \ubc31\uc624\ud504 \uc7ac\uc2dc\ub3c4")\n    raise Exception("\uc7ac\uc2dc\ub3c4 \ud14c\uc2a4\ud2b8")\n\n# \uc9c0\ud130 \uc801\uc6a9\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=3,\n        delay=2,\n        backoff=Backoff.EXPONENTIAL,\n        jitter=Jitter.PLUS_MINUS  # \uc9c0\uc5f0 \uc2dc\uac04\uc5d0 \ub79c\ub364 \ubcc0\ub3d9 \ucd94\uac00\n    )\n)\ndef jitter_retry_op(context: OpExecutionContext):\n    context.log.info("\uc9c0\ud130\uac00 \uc801\uc6a9\ub41c \uc7ac\uc2dc\ub3c4")\n    raise Exception("\uc7ac\uc2dc\ub3c4 \ud14c\uc2a4\ud2b8")\n\n@job\ndef retry_strategies_job():\n    linear_retry_op()\n    exponential_retry_op()\n    jitter_retry_op()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc870\uac74\ubd80-\uc7ac\uc2dc\ub3c4",children:"\uc870\uac74\ubd80 \uc7ac\uc2dc\ub3c4"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, RetryPolicy, Failure\n\nclass RetriableError(Exception):\n    """\uc7ac\uc2dc\ub3c4 \uac00\ub2a5\ud55c \uc624\ub958"""\n    pass\n\nclass NonRetriableError(Exception):\n    """\uc7ac\uc2dc\ub3c4 \ubd88\uac00\ub2a5\ud55c \uc624\ub958"""\n    pass\n\n@op(\n    retry_policy=RetryPolicy(max_retries=3, delay=1)\n)\ndef smart_retry_op(context: OpExecutionContext, input_value: int):\n    """\uc870\uac74\ubd80 \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1"""\n    import random\n\n    error_type = random.choice([\'retriable\', \'non_retriable\', \'success\'])\n\n    if error_type == \'retriable\':\n        context.log.warning("\uc7ac\uc2dc\ub3c4 \uac00\ub2a5\ud55c \uc624\ub958 \ubc1c\uc0dd")\n        raise RetriableError("\uc784\uc2dc \ub124\ud2b8\uc6cc\ud06c \uc624\ub958")\n\n    elif error_type == \'non_retriable\':\n        context.log.error("\uc7ac\uc2dc\ub3c4 \ubd88\uac00\ub2a5\ud55c \uc624\ub958 \ubc1c\uc0dd")\n        # Failure\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc7ac\uc2dc\ub3c4 \uc5c6\uc774 \uc989\uc2dc \uc2e4\ud328\n        raise Failure(\n            description="\uce58\uba85\uc801\uc778 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4",\n            metadata={"error_type": "non_retriable"}\n        )\n\n    context.log.info("\uc791\uc5c5 \uc131\uacf5")\n    return input_value * 2\n\n@job\ndef conditional_retry_job():\n    smart_retry_op(10)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"op\ubcc4-\uc7ac\uc2dc\ub3c4-\uc815\ucc45",children:"Op\ubcc4 \uc7ac\uc2dc\ub3c4 \uc815\ucc45"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, RetryPolicy, Backoff\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 Op: \ube60\ub978 \uc7ac\uc2dc\ub3c4\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=3,\n        delay=0.5,\n        backoff=Backoff.LINEAR\n    )\n)\ndef database_op(context: OpExecutionContext):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 - \ube60\ub978 \uc7ac\uc2dc\ub3c4"""\n    context.log.info("\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5")\n    # DB \uc791\uc5c5\n    return True\n\n# API Op: \uc9c0\uc218 \ubc31\uc624\ud504\ub85c \uc7ac\uc2dc\ub3c4\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=5,\n        delay=2,\n        backoff=Backoff.EXPONENTIAL,\n        jitter=Jitter.FULL\n    )\n)\ndef api_op(context: OpExecutionContext):\n    """API \uc791\uc5c5 - \uc9c0\uc218 \ubc31\uc624\ud504"""\n    context.log.info("API \uc791\uc5c5")\n    # API \ud638\ucd9c\n    return True\n\n# \ud30c\uc77c Op: \uc7ac\uc2dc\ub3c4 \uc5c6\uc74c\n@op(\n    retry_policy=RetryPolicy(max_retries=0)\n)\ndef file_op(context: OpExecutionContext):\n    """\ud30c\uc77c \uc791\uc5c5 - \uc7ac\uc2dc\ub3c4 \uc5c6\uc74c"""\n    context.log.info("\ud30c\uc77c \uc791\uc5c5")\n    # \ud30c\uc77c \ucc98\ub9ac\n    return True\n\n@job\ndef mixed_retry_job():\n    """\uc11c\ub85c \ub2e4\ub978 \uc7ac\uc2dc\ub3c4 \uc815\ucc45\uc744 \uac00\uc9c4 Op\ub4e4"""\n    db_result = database_op()\n    api_result = api_op()\n    file_op()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc7ac\uc2dc\ub3c4-\ud69f\uc218-\ucd94\uc801",children:"\uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ucd94\uc801"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, RetryPolicy\nimport os\n\n@op(\n    retry_policy=RetryPolicy(max_retries=3, delay=1)\n)\ndef tracked_retry_op(context: OpExecutionContext):\n    """\uc7ac\uc2dc\ub3c4 \ud69f\uc218\ub97c \ucd94\uc801\ud558\ub294 Op"""\n\n    # \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \ud655\uc778 (\ud658\uacbd \ubcc0\uc218 \ub610\ub294 \ud30c\uc77c \uc0ac\uc6a9)\n    retry_file = "/tmp/retry_count.txt"\n\n    if os.path.exists(retry_file):\n        with open(retry_file, \'r\') as f:\n            retry_count = int(f.read())\n    else:\n        retry_count = 0\n\n    retry_count += 1\n\n    with open(retry_file, \'w\') as f:\n        f.write(str(retry_count))\n\n    context.log.info(f"\uc2dc\ub3c4 \ud69f\uc218: {retry_count}")\n\n    if retry_count < 3:\n        raise Exception(f"\uc2e4\ud328 (\uc2dc\ub3c4 {retry_count}/3)")\n\n    # \uc131\uacf5 \uc2dc \ud30c\uc77c \uc0ad\uc81c\n    os.remove(retry_file)\n    context.log.info("\ucd5c\uc885 \uc131\uacf5!")\n    return "\uc644\ub8cc"\n\n@job\ndef tracked_retry_job():\n    tracked_retry_op()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"210-\uc2e4\uc2b5",children:"2.10 \uc2e4\uc2b5"}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc2b5-1-etl-\ud30c\uc774\ud504\ub77c\uc778-\uad6c\ucd95",children:"\uc2e4\uc2b5 1: ETL \ud30c\uc774\ud504\ub77c\uc778 \uad6c\ucd95"}),"\n",(0,r.jsx)(e.p,{children:"\uc644\uc804\ud55c ETL \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ucd95\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, Config, OpExecutionContext, Out, Output\nimport pandas as pd\nfrom typing import Dict, List\n\n# Config \uc815\uc758\nclass ETLConfig(Config):\n    source_file: str\n    output_file: str\n    min_value: int = 0\n\n# Extract\n@op\ndef extract_data(context: OpExecutionContext, config: ETLConfig):\n    """CSV \ud30c\uc77c\uc5d0\uc11c \ub370\uc774\ud130 \ucd94\ucd9c"""\n    context.log.info(f"\ud30c\uc77c \ub85c\ub4dc \uc911: {config.source_file}")\n\n    # \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\uc744 \uc77d\uc9c0\ub9cc, \uc608\uc81c \ub370\uc774\ud130 \uc0ac\uc6a9\n    df = pd.DataFrame({\n        \'id\': range(1, 11),\n        \'name\': [f\'User_{i}\' for i in range(1, 11)],\n        \'value\': [10, 25, 5, 30, 15, -5, 40, 20, 8, 35],\n        \'category\': [\'A\', \'B\', \'A\', \'C\', \'B\', \'A\', \'C\', \'A\', \'B\', \'C\']\n    })\n\n    return Output(\n        value=df,\n        metadata={\n            "num_rows": len(df),\n            "num_columns": len(df.columns),\n            "columns": df.columns.tolist()\n        }\n    )\n\n# Transform\n@op(\n    out={\n        "clean_data": Out(),\n        "invalid_data": Out()\n    }\n)\ndef transform_data(context: OpExecutionContext, config: ETLConfig, df: pd.DataFrame):\n    """\ub370\uc774\ud130 \uc815\uc81c \ubc0f \ubcc0\ud658"""\n\n    # \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130 \ubd84\ub9ac\n    invalid_df = df[df[\'value\'] < config.min_value]\n    clean_df = df[df[\'value\'] >= config.min_value].copy()\n\n    # \ubcc0\ud658 \uc218\ud589\n    clean_df[\'value_normalized\'] = clean_df[\'value\'] / clean_df[\'value\'].max()\n    clean_df[\'name_upper\'] = clean_df[\'name\'].str.upper()\n\n    context.log.info(f"\uc815\uc81c\ub41c \ub370\uc774\ud130: {len(clean_df)} \ud589")\n    context.log.info(f"\uc81c\uc678\ub41c \ub370\uc774\ud130: {len(invalid_df)} \ud589")\n\n    return (\n        Output(\n            clean_df,\n            output_name="clean_data",\n            metadata={\n                "clean_rows": len(clean_df),\n                "transformation": "normalization applied"\n            }\n        ),\n        Output(\n            invalid_df,\n            output_name="invalid_data",\n            metadata={"invalid_rows": len(invalid_df)}\n        )\n    )\n\n# Aggregate\n@op\ndef aggregate_by_category(context: OpExecutionContext, df: pd.DataFrame):\n    """\uce74\ud14c\uace0\ub9ac\ubcc4 \uc9d1\uacc4"""\n    aggregated = df.groupby(\'category\').agg({\n        \'value\': [\'sum\', \'mean\', \'count\'],\n        \'value_normalized\': \'mean\'\n    }).round(2)\n\n    context.log.info(f"\uce74\ud14c\uace0\ub9ac \uc218: {len(aggregated)}")\n\n    return aggregated\n\n# Load\n@op\ndef load_data(context: OpExecutionContext, config: ETLConfig, df: pd.DataFrame):\n    """\ub370\uc774\ud130 \uc800\uc7a5"""\n    context.log.info(f"\ub370\uc774\ud130 \uc800\uc7a5 \uc911: {config.output_file}")\n\n    # \uc2e4\uc81c\ub85c\ub294 \ud30c\uc77c\uc5d0 \uc800\uc7a5\n    # df.to_csv(config.output_file, index=False)\n\n    return Output(\n        value=len(df),\n        metadata={\n            "output_file": config.output_file,\n            "rows_saved": len(df)\n        }\n    )\n\n# Log invalid\n@op\ndef log_invalid_records(context: OpExecutionContext, df: pd.DataFrame):\n    """\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub808\ucf54\ub4dc \ub85c\uae45"""\n    if len(df) > 0:\n        context.log.warning(f"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub808\ucf54\ub4dc {len(df)}\uac1c \ubc1c\uacac")\n        for _, row in df.iterrows():\n            context.log.warning(f"ID {row[\'id\']}: value={row[\'value\']}")\n    else:\n        context.log.info("\ubaa8\ub4e0 \ub808\ucf54\ub4dc\uac00 \uc720\ud6a8\ud569\ub2c8\ub2e4")\n\n    return len(df)\n\n# Job \uc815\uc758\n@job\ndef etl_pipeline():\n    """\uc644\uc804\ud55c ETL \ud30c\uc774\ud504\ub77c\uc778"""\n    raw_data = extract_data()\n    clean_data, invalid_data = transform_data(raw_data)\n\n    aggregated = aggregate_by_category(clean_data)\n    load_data(aggregated)\n\n    log_invalid_records(invalid_data)\n\n# \uc2e4\ud589\nif __name__ == "__main__":\n    result = etl_pipeline.execute_in_process(\n        run_config={\n            "ops": {\n                "extract_data": {\n                    "config": {\n                        "source_file": "input.csv",\n                        "output_file": "output.csv",\n                        "min_value": 0\n                    }\n                },\n                "transform_data": {\n                    "config": {\n                        "source_file": "input.csv",\n                        "output_file": "output.csv",\n                        "min_value": 0\n                    }\n                },\n                "load_data": {\n                    "config": {\n                        "source_file": "input.csv",\n                        "output_file": "output.csv",\n                        "min_value": 0\n                    }\n                }\n            }\n        }\n    )\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc2b5-2-\ub3d9\uc801-\ub370\uc774\ud130-\ucc98\ub9ac-\ud30c\uc774\ud504\ub77c\uc778",children:"\uc2e4\uc2b5 2: \ub3d9\uc801 \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,r.jsx)(e.p,{children:"\uc5ec\ub7ec \uc18c\uc2a4\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc640 \ubcd1\ub82c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, DynamicOut, DynamicOutput, OpExecutionContext, Config\nfrom typing import List, Dict\nimport pandas as pd\n\nclass DataSourceConfig(Config):\n    """\ub370\uc774\ud130 \uc18c\uc2a4 \uc124\uc815"""\n    sources: List[str]\n\n@op(out=DynamicOut())\ndef discover_data_sources(context: OpExecutionContext, config: DataSourceConfig):\n    """\ub370\uc774\ud130 \uc18c\uc2a4 \ud0d0\uc0c9"""\n    for idx, source in enumerate(config.sources):\n        context.log.info(f"\ub370\uc774\ud130 \uc18c\uc2a4 \ubc1c\uacac: {source}")\n\n        yield DynamicOutput(\n            value={\n                \'name\': source,\n                \'index\': idx\n            },\n            mapping_key=f"source_{idx}"\n        )\n\n@op\ndef fetch_from_source(context: OpExecutionContext, source: Dict):\n    """\uac1c\ubcc4 \uc18c\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \uac00\uc838\uc624\uae30"""\n    source_name = source[\'name\']\n\n    context.log.info(f"\ub370\uc774\ud130 \uac00\uc838\uc624\ub294 \uc911: {source_name}")\n\n    # \ubaa8\uc758 \ub370\uc774\ud130 \uc0dd\uc131\n    if source_name == "database_a":\n        data = pd.DataFrame({\n            \'id\': [1, 2, 3],\n            \'value\': [100, 200, 300],\n            \'source\': source_name\n        })\n    elif source_name == "database_b":\n        data = pd.DataFrame({\n            \'id\': [4, 5, 6],\n            \'value\': [400, 500, 600],\n            \'source\': source_name\n        })\n    else:\n        data = pd.DataFrame({\n            \'id\': [7, 8, 9],\n            \'value\': [700, 800, 900],\n            \'source\': source_name\n        })\n\n    context.log.info(f"{source_name}\uc5d0\uc11c {len(data)} \ud589 \uac00\uc838\uc634")\n\n    return data\n\n@op\ndef validate_data(context: OpExecutionContext, df: pd.DataFrame):\n    """\ub370\uc774\ud130 \uc720\ud6a8\uc131 \uac80\uc99d"""\n    source = df[\'source\'].iloc[0]\n\n    # \uac80\uc99d \uaddc\uce59\n    valid_rows = df[df[\'value\'] > 0]\n\n    context.log.info(f"{source}: {len(valid_rows)}/{len(df)} \ud589 \uc720\ud6a8")\n\n    return valid_rows\n\n@op\ndef transform_dataset(context: OpExecutionContext, df: pd.DataFrame):\n    """\ub370\uc774\ud130\uc14b \ubcc0\ud658"""\n    source = df[\'source\'].iloc[0]\n\n    df = df.copy()\n    df[\'value_doubled\'] = df[\'value\'] * 2\n    df[\'value_log\'] = df[\'value\'].apply(lambda x: x ** 0.5)\n\n    context.log.info(f"{source} \ubcc0\ud658 \uc644\ub8cc")\n\n    return df\n\n@op\ndef merge_datasets(context: OpExecutionContext, datasets: List[pd.DataFrame]):\n    """\ubaa8\ub4e0 \ub370\uc774\ud130\uc14b \ubcd1\ud569"""\n    merged = pd.concat(datasets, ignore_index=True)\n\n    context.log.info(f"\ucd1d {len(merged)} \ud589 \ubcd1\ud569\ub428")\n    context.log.info(f"\ub370\uc774\ud130 \uc18c\uc2a4 \uc218: {merged[\'source\'].nunique()}")\n\n    return merged\n\n@op\ndef generate_summary(context: OpExecutionContext, df: pd.DataFrame):\n    """\uc694\uc57d \ud1b5\uacc4 \uc0dd\uc131"""\n    summary = {\n        \'total_rows\': len(df),\n        \'total_value\': df[\'value\'].sum(),\n        \'avg_value\': df[\'value\'].mean(),\n        \'sources\': df[\'source\'].unique().tolist()\n    }\n\n    context.log.info(f"\uc694\uc57d: {summary}")\n\n    return summary\n\n@job\ndef dynamic_data_pipeline():\n    """\ub3d9\uc801 \ub370\uc774\ud130 \ucc98\ub9ac \ud30c\uc774\ud504\ub77c\uc778"""\n    sources = discover_data_sources()\n\n    # \uac01 \uc18c\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \uac00\uc838\uc624\uae30\n    fetched = sources.map(fetch_from_source)\n\n    # \uac80\uc99d\n    validated = fetched.map(validate_data)\n\n    # \ubcc0\ud658\n    transformed = validated.map(transform_dataset)\n\n    # \ubcd1\ud569 \ubc0f \uc694\uc57d\n    merged = merge_datasets(transformed.collect())\n    generate_summary(merged)\n\n# \uc2e4\ud589\nif __name__ == "__main__":\n    result = dynamic_data_pipeline.execute_in_process(\n        run_config={\n            "ops": {\n                "discover_data_sources": {\n                    "config": {\n                        "sources": [\n                            "database_a",\n                            "database_b",\n                            "api_source"\n                        ]\n                    }\n                }\n            }\n        }\n    )\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc2b5-3-\uc7ac\uc2dc\ub3c4-\ubc0f-\uc624\ub958-\ucc98\ub9ac\uac00-\uc788\ub294-\ud30c\uc774\ud504\ub77c\uc778",children:"\uc2e4\uc2b5 3: \uc7ac\uc2dc\ub3c4 \ubc0f \uc624\ub958 \ucc98\ub9ac\uac00 \uc788\ub294 \ud30c\uc774\ud504\ub77c\uc778"}),"\n",(0,r.jsx)(e.p,{children:"\uc2e4\uc81c \ud658\uacbd\uc758 \ubd88\uc548\uc815\uc131\uc744 \ub2e4\ub8e8\ub294 \ud30c\uc774\ud504\ub77c\uc778\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, RetryPolicy, Backoff, Jitter, Failure, Output\nimport random\nimport time\n\n# \ubd88\uc548\uc815\ud55c API \ud638\ucd9c \uc2dc\ubbac\ub808\uc774\uc158\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=5,\n        delay=1,\n        backoff=Backoff.EXPONENTIAL,\n        jitter=Jitter.PLUS_MINUS\n    ),\n    tags={"external": "true", "critical": "true"}\n)\ndef call_external_api(context: OpExecutionContext):\n    """\uc678\ubd80 API \ud638\ucd9c (\ubd88\uc548\uc815)"""\n\n    # 30% \ud655\ub960\ub85c \uc131\uacf5\n    if random.random() < 0.7:\n        context.log.warning("API \ud638\ucd9c \uc2e4\ud328, \uc7ac\uc2dc\ub3c4 \uc911...")\n        raise Exception("API \uc5f0\uacb0 \uc2e4\ud328")\n\n    context.log.info("API \ud638\ucd9c \uc131\uacf5")\n\n    return Output(\n        value=[\n            {"id": 1, "value": 100},\n            {"id": 2, "value": 200},\n            {"id": 3, "value": 300}\n        ],\n        metadata={\n            "api_response_time": "250ms",\n            "records_count": 3\n        }\n    )\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 (\ube60\ub978 \uc7ac\uc2dc\ub3c4)\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=3,\n        delay=0.5,\n        backoff=Backoff.LINEAR\n    )\n)\ndef write_to_database(context: OpExecutionContext, data):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc4f0\uae30 (\uc77c\uc2dc\uc801 \uc2e4\ud328 \uac00\ub2a5)"""\n\n    # 40% \ud655\ub960\ub85c \uc2e4\ud328\n    if random.random() < 0.4:\n        context.log.warning("\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2e4\ud328, \uc7ac\uc2dc\ub3c4 \uc911...")\n        raise Exception("\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud0c0\uc784\uc544\uc6c3")\n\n    context.log.info(f"{len(data)} \ub808\ucf54\ub4dc \uc800\uc7a5\ub428")\n\n    return Output(\n        value=len(data),\n        metadata={\n            "database": "postgresql",\n            "table": "processed_data"\n        }\n    )\n\n# \uac80\uc99d (\uc7ac\uc2dc\ub3c4 \uc5c6\uc74c)\n@op(retry_policy=RetryPolicy(max_retries=0))\ndef validate_results(context: OpExecutionContext, record_count: int):\n    """\uacb0\uacfc \uac80\uc99d (\uc7ac\uc2dc\ub3c4 \uc5c6\uc74c)"""\n\n    expected_count = 3\n\n    if record_count != expected_count:\n        raise Failure(\n            description=f"\ub808\ucf54\ub4dc \uc218 \ubd88\uc77c\uce58: \uc608\uc0c1 {expected_count}, \uc2e4\uc81c {record_count}",\n            metadata={\n                "expected": expected_count,\n                "actual": record_count\n            }\n        )\n\n    context.log.info("\uac80\uc99d \uc131\uacf5!")\n    return True\n\n# \uc54c\ub9bc \uc804\uc1a1\n@op(\n    retry_policy=RetryPolicy(\n        max_retries=2,\n        delay=2\n    )\n)\ndef send_notification(context: OpExecutionContext, validation_result: bool):\n    """\uc131\uacf5 \uc54c\ub9bc \uc804\uc1a1"""\n\n    # 20% \ud655\ub960\ub85c \uc2e4\ud328\n    if random.random() < 0.2:\n        context.log.warning("\uc54c\ub9bc \uc804\uc1a1 \uc2e4\ud328, \uc7ac\uc2dc\ub3c4 \uc911...")\n        raise Exception("\uc54c\ub9bc \uc11c\ube44\uc2a4 \uc751\ub2f5 \uc5c6\uc74c")\n\n    context.log.info("\uc54c\ub9bc \uc804\uc1a1 \uc131\uacf5")\n    return "\uc54c\ub9bc \uc804\uc1a1\ub428"\n\n@job(tags={"pipeline": "production", "team": "data-eng"})\ndef resilient_pipeline():\n    """\uc7ac\uc2dc\ub3c4 \ubc0f \uc624\ub958 \ucc98\ub9ac\uac00 \uc788\ub294 \uc548\uc815\uc801\uc778 \ud30c\uc774\ud504\ub77c\uc778"""\n\n    # API \ud638\ucd9c (\uc5ec\ub7ec \ubc88 \uc7ac\uc2dc\ub3c4)\n    api_data = call_external_api()\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5 (\ube60\ub978 \uc7ac\uc2dc\ub3c4)\n    record_count = write_to_database(api_data)\n\n    # \uac80\uc99d (\uc7ac\uc2dc\ub3c4 \uc5c6\uc74c, \uc2e4\ud328 \uc2dc \uc989\uc2dc \uc911\ub2e8)\n    validation = validate_results(record_count)\n\n    # \uc54c\ub9bc (\uc81c\ud55c\ub41c \uc7ac\uc2dc\ub3c4)\n    send_notification(validation)\n\n# \uc2e4\ud589\nif __name__ == "__main__":\n    print("\uc548\uc815\uc801\uc778 \ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589 \uc911...")\n    print("(\uc7ac\uc2dc\ub3c4 \ub85c\uc9c1\uc774 \ub3d9\uc791\ud558\ub294 \uac83\uc744 \ud655\uc778\ud558\uc138\uc694)\\n")\n\n    result = resilient_pipeline.execute_in_process()\n\n    if result.success:\n        print("\\n\ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589 \uc131\uacf5!")\n    else:\n        print("\\n\ud30c\uc774\ud504\ub77c\uc778 \uc2e4\ud589 \uc2e4\ud328!")\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\uc2e4\uc2b5-4-\ubcf5\uc7a1\ud55c-\uc758\uc874\uc131\uacfc-\uc870\uac74\ubd80-\uc2e4\ud589",children:"\uc2e4\uc2b5 4: \ubcf5\uc7a1\ud55c \uc758\uc874\uc131\uacfc \uc870\uac74\ubd80 \uc2e4\ud589"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'from dagster import op, job, OpExecutionContext, Out, Output, In, Nothing\nfrom typing import Optional\n\n@op\ndef check_data_availability(context: OpExecutionContext):\n    """\ub370\uc774\ud130 \uac00\uc6a9\uc131 \ud655\uc778"""\n    # \uc2e4\uc81c\ub85c\ub294 \ub370\uc774\ud130 \uc18c\uc2a4 \ud655\uc778\n    available = True\n\n    context.log.info(f"\ub370\uc774\ud130 \uac00\uc6a9\uc131: {available}")\n    return available\n\n@op(\n    out={\n        "fresh_data": Out(is_required=False),\n        "cache_data": Out(is_required=False)\n    }\n)\ndef load_data(context: OpExecutionContext, is_available: bool):\n    """\uc870\uac74\uc5d0 \ub530\ub77c \ub2e4\ub978 \ucd9c\ub825 \uc0dd\uc131"""\n\n    if is_available:\n        context.log.info("\uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ub85c\ub4dc")\n        yield Output(\n            value={"source": "fresh", "records": 1000},\n            output_name="fresh_data"\n        )\n    else:\n        context.log.info("\uce90\uc2dc\ub41c \ub370\uc774\ud130 \uc0ac\uc6a9")\n        yield Output(\n            value={"source": "cache", "records": 500},\n            output_name="cache_data"\n        )\n\n@op\ndef process_fresh_data(context: OpExecutionContext, data):\n    """\uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ucc98\ub9ac"""\n    context.log.info(f"\uc0c8 \ub370\uc774\ud130 \ucc98\ub9ac: {data[\'records\']} \ub808\ucf54\ub4dc")\n    return {"processed": data[\'records\'], "type": "fresh"}\n\n@op\ndef process_cached_data(context: OpExecutionContext, data):\n    """\uce90\uc2dc\ub41c \ub370\uc774\ud130 \ucc98\ub9ac"""\n    context.log.info(f"\uce90\uc2dc \ub370\uc774\ud130 \ucc98\ub9ac: {data[\'records\']} \ub808\ucf54\ub4dc")\n    return {"processed": data[\'records\'], "type": "cache"}\n\n@op\ndef merge_results(context: OpExecutionContext, fresh_result=None, cache_result=None):\n    """\uacb0\uacfc \ubcd1\ud569"""\n\n    if fresh_result:\n        result = fresh_result\n    elif cache_result:\n        result = cache_result\n    else:\n        result = {"processed": 0, "type": "none"}\n\n    context.log.info(f"\ucd5c\uc885 \uacb0\uacfc: {result}")\n    return result\n\n@op(ins={"start": In(Nothing)})\ndef cleanup(context: OpExecutionContext):\n    """\uc815\ub9ac \uc791\uc5c5"""\n    context.log.info("\uc815\ub9ac \uc791\uc5c5 \uc218\ud589")\n\n@job\ndef conditional_pipeline():\n    """\uc870\uac74\ubd80 \uc2e4\ud589 \ud30c\uc774\ud504\ub77c\uc778"""\n\n    available = check_data_availability()\n    fresh_data, cache_data = load_data(available)\n\n    fresh_result = process_fresh_data(fresh_data)\n    cache_result = process_cached_data(cache_data)\n\n    final = merge_results(\n        fresh_result=fresh_result,\n        cache_result=cache_result\n    )\n\n    cleanup(start=final)\n\n# \uc2e4\ud589\nif __name__ == "__main__":\n    result = conditional_pipeline.execute_in_process()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\uc815\ub9ac",children:"\uc815\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\uc774 \uc7a5\uc5d0\uc11c\ub294 Dagster\uc758 Ops\uc640 Jobs\uc5d0 \ub300\ud574 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4:"}),"\n",(0,r.jsx)(e.h3,{id:"\uc8fc\uc694-\uac1c\ub150",children:"\uc8fc\uc694 \uac1c\ub150"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Op"}),": \ub370\uc774\ud130 \ud30c\uc774\ud504\ub77c\uc778\uc758 \uae30\ubcf8 \uc791\uc5c5 \ub2e8\uc704"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Job"}),": \uc5ec\ub7ec Op\uc744 \uc870\ud569\ud55c \uc644\uc804\ud55c \ud30c\uc774\ud504\ub77c\uc778"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc758\uc874\uc131"}),": Op \uac04\uc758 \ub370\uc774\ud130 \ud750\ub984\uacfc \uc2e4\ud589 \uc21c\uc11c"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Config"}),": \ud0c0\uc785 \uc548\uc804\ud55c \uc124\uc815 \uc2dc\uc2a4\ud15c"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ub3d9\uc801 \uc2e4\ud589"}),": \ub7f0\ud0c0\uc784\uc5d0 \uacb0\uc815\ub418\ub294 \ubcd1\ub82c \ucc98\ub9ac"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc7ac\uc2dc\ub3c4"}),": \uc2e4\ud328\uc5d0 \ub300\ud55c \ubcf5\uc6d0\ub825"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\ubaa8\ubc94-\uc0ac\ub840",children:"\ubaa8\ubc94 \uc0ac\ub840"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Op\uc740 \ub2e8\uc77c \ucc45\uc784"}),": \uac01 Op\uc740 \ud558\ub098\uc758 \uba85\ud655\ud55c \uc791\uc5c5\ub9cc \uc218\ud589"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud0c0\uc785 \ud78c\ud2b8 \uc0ac\uc6a9"}),": \uc785\ub825\uacfc \ucd9c\ub825\uc758 \ud0c0\uc785\uc744 \uba85\uc2dc"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Config \uc2a4\ud0a4\ub9c8"}),": Pydantic\uc744 \uc0ac\uc6a9\ud55c \ud0c0\uc785 \uc548\uc804\ud55c \uc124\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc801\uc808\ud55c \uc7ac\uc2dc\ub3c4"}),": \uc791\uc5c5 \ud2b9\uc131\uc5d0 \ub9de\ub294 \uc7ac\uc2dc\ub3c4 \uc804\ub7b5"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ub85c\uae45"}),": Context\ub97c \ud1b5\ud55c \uc0c1\uc138\ud55c \ub85c\uae45"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uba54\ud0c0\ub370\uc774\ud130"}),": Output\uc5d0 \uc720\uc6a9\ud55c \uba54\ud0c0\ub370\uc774\ud130 \ud3ec\ud568"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsxs)(e.p,{children:["\ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 ",(0,r.jsx)(e.strong,{children:"Resources\uc640 I/O Managers"}),"\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Resources\ub294 \uc678\ubd80 \uc2dc\uc2a4\ud15c\uacfc\uc758 \uc5f0\uacb0\uc744 \uad00\ub9ac\ud558\uace0, I/O Managers\ub294 Op \uac04 \ub370\uc774\ud130 \uc800\uc7a5 \ubc29\uc2dd\uc744 \uc81c\uc5b4\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(e.h3,{id:"\ucc38\uace0-\uc790\ub8cc",children:"\ucc38\uace0 \uc790\ub8cc"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.dagster.io/concepts/ops-jobs-graphs/ops",children:"Dagster Ops \uacf5\uc2dd \ubb38\uc11c"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.dagster.io/concepts/ops-jobs-graphs/jobs",children:"Dagster Jobs \uacf5\uc2dd \ubb38\uc11c"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.dagster.io/concepts/configuration/config-schema",children:"Dagster Config \uc2dc\uc2a4\ud15c"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.dagster.io/concepts/ops-jobs-graphs/op-retries",children:"\uc7ac\uc2dc\ub3c4 \uc815\ucc45"})}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}}}]);