"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[9890],{2074:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"webapp/deployment","title":"14. \ubc30\ud3ec","description":"14.1 \ubc30\ud3ec \uac1c\uc694","source":"@site/docs/webapp/deployment.md","sourceDirName":"webapp","slug":"/webapp/deployment","permalink":"/docs/webapp/deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/webapp/deployment.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"webappSidebar","previous":{"title":"13. \ud14c\uc2a4\ud2b8","permalink":"/docs/webapp/testing"},"next":{"title":"15. \ubaa8\ub2c8\ud130\ub9c1","permalink":"/docs/webapp/monitoring"}}');var s=t(4848),o=t(8453);const a={sidebar_position:15},i="14. \ubc30\ud3ec",c={},l=[{value:"14.1 \ubc30\ud3ec \uac1c\uc694",id:"141-\ubc30\ud3ec-\uac1c\uc694",level:2},{value:"\ubc30\ud3ec \uc544\ud0a4\ud14d\ucc98",id:"\ubc30\ud3ec-\uc544\ud0a4\ud14d\ucc98",level:3},{value:"\ubc30\ud3ec \uc804\ub7b5 \ube44\uad50",id:"\ubc30\ud3ec-\uc804\ub7b5-\ube44\uad50",level:3},{value:"\ubc30\ud3ec \ud658\uacbd \ubd84\ub9ac",id:"\ubc30\ud3ec-\ud658\uacbd-\ubd84\ub9ac",level:3},{value:"14.2 Docker \ucee8\ud14c\uc774\ub108\ud654",id:"142-docker-\ucee8\ud14c\uc774\ub108\ud654",level:2},{value:"Multi-stage Dockerfile",id:"multi-stage-dockerfile",level:3},{value:"\uac1c\ubc1c\uc6a9 Dockerfile",id:"\uac1c\ubc1c\uc6a9-dockerfile",level:3},{value:".dockerignore",id:"dockerignore",level:3},{value:"Docker \ube4c\ub4dc \ucd5c\uc801\ud654",id:"docker-\ube4c\ub4dc-\ucd5c\uc801\ud654",level:3},{value:"\ud5ec\uc2a4\uccb4\ud06c \uc2a4\ud06c\ub9bd\ud2b8",id:"\ud5ec\uc2a4\uccb4\ud06c-\uc2a4\ud06c\ub9bd\ud2b8",level:3},{value:"14.3 docker-compose",id:"143-docker-compose",level:2},{value:"docker-compose.yml (\ud504\ub85c\ub355\uc158)",id:"docker-composeyml-\ud504\ub85c\ub355\uc158",level:3},{value:"docker-compose.dev.yml (\uac1c\ubc1c)",id:"docker-composedevyml-\uac1c\ubc1c",level:3},{value:"docker-compose \uc2a4\ud06c\ub9bd\ud2b8",id:"docker-compose-\uc2a4\ud06c\ub9bd\ud2b8",level:3},{value:"14.4 \ud658\uacbd \ubcc0\uc218 \uad00\ub9ac",id:"144-\ud658\uacbd-\ubcc0\uc218-\uad00\ub9ac",level:2},{value:".env \ud30c\uc77c \uad6c\uc870",id:"env-\ud30c\uc77c-\uad6c\uc870",level:3},{value:"\ud658\uacbd \ubcc0\uc218 \uac80\uc99d",id:"\ud658\uacbd-\ubcc0\uc218-\uac80\uc99d",level:3},{value:"\uc2dc\ud06c\ub9bf \uad00\ub9ac",id:"\uc2dc\ud06c\ub9bf-\uad00\ub9ac",level:3},{value:"14.5 Nginx \uc124\uc815",id:"145-nginx-\uc124\uc815",level:2},{value:"nginx.conf",id:"nginxconf",level:3},{value:"\uc11c\ubc84 \uc124\uc815",id:"\uc11c\ubc84-\uc124\uc815",level:3},{value:"\uce90\uc2f1 \uc124\uc815",id:"\uce90\uc2f1-\uc124\uc815",level:3},{value:"14.6 HTTPS/SSL",id:"146-httpsssl",level:2},{value:"Let&#39;s Encrypt \uc124\uc815",id:"lets-encrypt-\uc124\uc815",level:3},{value:"\uc790\ub3d9 \uac31\uc2e0",id:"\uc790\ub3d9-\uac31\uc2e0",level:3},{value:"SSL \ud14c\uc2a4\ud2b8",id:"ssl-\ud14c\uc2a4\ud2b8",level:3},{value:"14.7 CI/CD (GitHub Actions)",id:"147-cicd-github-actions",level:2},{value:"\uba54\uc778 \uc6cc\ud06c\ud50c\ub85c\uc6b0",id:"\uba54\uc778-\uc6cc\ud06c\ud50c\ub85c\uc6b0",level:3},{value:"\uc2a4\ud14c\uc774\uc9d5 \ubc30\ud3ec",id:"\uc2a4\ud14c\uc774\uc9d5-\ubc30\ud3ec",level:3},{value:"14.8 AWS \ubc30\ud3ec",id:"148-aws-\ubc30\ud3ec",level:2},{value:"AWS ECS \ubc30\ud3ec",id:"aws-ecs-\ubc30\ud3ec",level:3},{value:"Terraform \uc124\uc815",id:"terraform-\uc124\uc815",level:3},{value:"14.9 \ubb34\uc911\ub2e8 \ubc30\ud3ec",id:"149-\ubb34\uc911\ub2e8-\ubc30\ud3ec",level:2},{value:"Blue-Green \ubc30\ud3ec \uc2a4\ud06c\ub9bd\ud2b8",id:"blue-green-\ubc30\ud3ec-\uc2a4\ud06c\ub9bd\ud2b8",level:3},{value:"Canary \ubc30\ud3ec",id:"canary-\ubc30\ud3ec",level:3},{value:"14.10 \ub864\ubc31 \uc804\ub7b5",id:"1410-\ub864\ubc31-\uc804\ub7b5",level:2},{value:"\uc790\ub3d9 \ub864\ubc31 \uc2dc\uc2a4\ud15c",id:"\uc790\ub3d9-\ub864\ubc31-\uc2dc\uc2a4\ud15c",level:3},{value:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31",id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ub9c8\uc774\uadf8\ub808\uc774\uc158-\ub864\ubc31",level:3},{value:"14.11 \ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"1411-\ubc30\ud3ec-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:2},{value:"\ubc30\ud3ec \uc804 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ubc30\ud3ec-\uc804-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"\ubc30\ud3ec \ud6c4 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"\ubc30\ud3ec-\ud6c4-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:3},{value:"14.12 \uc2e4\uc2b5",id:"1412-\uc2e4\uc2b5",level:2},{value:"\uc2e4\uc2b5 1: Docker \ucee8\ud14c\uc774\ub108 \ubc30\ud3ec",id:"\uc2e4\uc2b5-1-docker-\ucee8\ud14c\uc774\ub108-\ubc30\ud3ec",level:3},{value:"\uc2e4\uc2b5 2: docker-compose\ub85c \uc804\uccb4 \uc2a4\ud0dd \ubc30\ud3ec",id:"\uc2e4\uc2b5-2-docker-compose\ub85c-\uc804\uccb4-\uc2a4\ud0dd-\ubc30\ud3ec",level:3},{value:"\uc2e4\uc2b5 3: GitHub Actions CI/CD \uc124\uc815",id:"\uc2e4\uc2b5-3-github-actions-cicd-\uc124\uc815",level:3},{value:"\uc2e4\uc2b5 4: Blue-Green \ubc30\ud3ec",id:"\uc2e4\uc2b5-4-blue-green-\ubc30\ud3ec",level:3},{value:"\uc2e4\uc2b5 5: \ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815",id:"\uc2e4\uc2b5-5-\ubaa8\ub2c8\ud130\ub9c1-\uc124\uc815",level:3},{value:"\uc815\ub9ac",id:"\uc815\ub9ac",level:2},{value:"\uc8fc\uc694 \uac1c\ub150",id:"\uc8fc\uc694-\uac1c\ub150",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:3}];function p(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"14-\ubc30\ud3ec",children:"14. \ubc30\ud3ec"})}),"\n",(0,s.jsx)(e.h2,{id:"141-\ubc30\ud3ec-\uac1c\uc694",children:"14.1 \ubc30\ud3ec \uac1c\uc694"}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\ud3ec-\uc544\ud0a4\ud14d\ucc98",children:"\ubc30\ud3ec \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,s.jsx)(e.p,{children:"\ud604\ub300\uc801\uc778 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ubc30\ud3ec\ub294 \uc5ec\ub7ec \uacc4\uce35\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Load Balancer (Nginx)           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502   \u2502  Node.js \u2502      \u2502  Node.js \u2502       \u2502\n\u2502   \u2502Container \u2502      \u2502Container \u2502       \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502   \u2502PostgreSQL\u2502      \u2502  Redis   \u2502       \u2502\n\u2502   \u2502Container \u2502      \u2502Container \u2502       \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\ud3ec-\uc804\ub7b5-\ube44\uad50",children:"\ubc30\ud3ec \uc804\ub7b5 \ube44\uad50"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"\uc804\ub7b5"}),(0,s.jsx)(e.th,{children:"\uc7a5\uc810"}),(0,s.jsx)(e.th,{children:"\ub2e8\uc810"}),(0,s.jsx)(e.th,{children:"\uc0ac\uc6a9 \uc2dc\uae30"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"Rolling"})}),(0,s.jsx)(e.td,{children:"\ubb34\uc911\ub2e8, \uc810\uc9c4\uc801"}),(0,s.jsx)(e.td,{children:"\ub290\ub9bc, \ubc84\uc804 \ud63c\uc7ac"}),(0,s.jsx)(e.td,{children:"\uc548\uc815\uc801\uc778 \ub9b4\ub9ac\uc2a4"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"Blue-Green"})}),(0,s.jsx)(e.td,{children:"\ube60\ub978 \uc804\ud658, \uc26c\uc6b4 \ub864\ubc31"}),(0,s.jsx)(e.td,{children:"2\ubc30 \ub9ac\uc18c\uc2a4"}),(0,s.jsx)(e.td,{children:"\uc911\uc694\ud55c \ub9b4\ub9ac\uc2a4"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"Canary"})}),(0,s.jsx)(e.td,{children:"\uc704\ud5d8 \ucd5c\uc18c\ud654"}),(0,s.jsx)(e.td,{children:"\ubcf5\uc7a1\ud55c \uc124\uc815"}),(0,s.jsx)(e.td,{children:"\uc2e4\ud5d8\uc801 \uae30\ub2a5"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"Recreation"})}),(0,s.jsx)(e.td,{children:"\uac04\ub2e8, \uae54\ub054"}),(0,s.jsx)(e.td,{children:"\ub2e4\uc6b4\ud0c0\uc784 \ubc1c\uc0dd"}),(0,s.jsx)(e.td,{children:"\uac1c\ubc1c/\ud14c\uc2a4\ud2b8 \ud658\uacbd"})]})]})]}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\ud3ec-\ud658\uacbd-\ubd84\ub9ac",children:"\ubc30\ud3ec \ud658\uacbd \ubd84\ub9ac"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// config/environments.ts\nexport enum Environment {\n  Development = 'development',\n  Staging = 'staging',\n  Production = 'production',\n}\n\nexport interface EnvironmentConfig {\n  name: Environment;\n  apiUrl: string;\n  databaseUrl: string;\n  redisUrl: string;\n  logLevel: string;\n  features: {\n    analytics: boolean;\n    debugging: boolean;\n    errorReporting: boolean;\n  };\n}\n\nexport const environmentConfigs: Record<Environment, EnvironmentConfig> = {\n  [Environment.Development]: {\n    name: Environment.Development,\n    apiUrl: 'http://localhost:3000',\n    databaseUrl: 'postgresql://localhost:5432/myapp_dev',\n    redisUrl: 'redis://localhost:6379',\n    logLevel: 'debug',\n    features: {\n      analytics: false,\n      debugging: true,\n      errorReporting: false,\n    },\n  },\n  [Environment.Staging]: {\n    name: Environment.Staging,\n    apiUrl: 'https://staging-api.example.com',\n    databaseUrl: process.env.DATABASE_URL!,\n    redisUrl: process.env.REDIS_URL!,\n    logLevel: 'info',\n    features: {\n      analytics: true,\n      debugging: true,\n      errorReporting: true,\n    },\n  },\n  [Environment.Production]: {\n    name: Environment.Production,\n    apiUrl: 'https://api.example.com',\n    databaseUrl: process.env.DATABASE_URL!,\n    redisUrl: process.env.REDIS_URL!,\n    logLevel: 'warn',\n    features: {\n      analytics: true,\n      debugging: false,\n      errorReporting: true,\n    },\n  },\n};\n\nexport function getEnvironmentConfig(): EnvironmentConfig {\n  const env = (process.env.NODE_ENV || 'development') as Environment;\n  return environmentConfigs[env];\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"142-docker-\ucee8\ud14c\uc774\ub108\ud654",children:"14.2 Docker \ucee8\ud14c\uc774\ub108\ud654"}),"\n",(0,s.jsx)(e.h3,{id:"multi-stage-dockerfile",children:"Multi-stage Dockerfile"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:'# Dockerfile\n# Stage 1: Build\nFROM node:20-alpine AS builder\n\n# \ubcf4\uc548: \ub8e8\ud2b8\uac00 \uc544\ub2cc \uc0ac\uc6a9\uc790 \uc0dd\uc131\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nodejs -u 1001\n\nWORKDIR /app\n\n# \uc758\uc874\uc131 \uce90\uc2f1 \ucd5c\uc801\ud654\nCOPY package*.json ./\nCOPY tsconfig.json ./\n\nRUN npm ci --only=production && \\\n    npm cache clean --force\n\n# \uc18c\uc2a4 \ucf54\ub4dc \ubcf5\uc0ac\nCOPY --chown=nodejs:nodejs . .\n\n# TypeScript \ube4c\ub4dc\nRUN npm run build\n\n# \ubd88\ud544\uc694\ud55c \ud30c\uc77c \uc81c\uac70\nRUN rm -rf src tests *.md\n\n# Stage 2: Production\nFROM node:20-alpine AS production\n\n# \ubcf4\uc548 \uc5c5\ub370\uc774\ud2b8\nRUN apk update && \\\n    apk upgrade && \\\n    apk add --no-cache dumb-init && \\\n    rm -rf /var/cache/apk/*\n\n# \ub8e8\ud2b8\uac00 \uc544\ub2cc \uc0ac\uc6a9\uc790\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nodejs -u 1001\n\nWORKDIR /app\n\n# \ube4c\ub4dc \uacb0\uacfc\ubb3c\ub9cc \ubcf5\uc0ac\nCOPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules\nCOPY --from=builder --chown=nodejs:nodejs /app/dist ./dist\nCOPY --from=builder --chown=nodejs:nodejs /app/package*.json ./\n\n# \ud5ec\uc2a4\uccb4\ud06c\nHEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \\\n  CMD node healthcheck.js || exit 1\n\n# \uc0ac\uc6a9\uc790 \uc804\ud658\nUSER nodejs\n\n# \ud3ec\ud2b8 \ub178\ucd9c\nEXPOSE 3000\n\n# dumb-init\uc73c\ub85c \uc2e4\ud589 (PID 1 \ubb38\uc81c \ud574\uacb0)\nENTRYPOINT ["dumb-init", "--"]\n\nCMD ["node", "dist/index.js"]\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uac1c\ubc1c\uc6a9-dockerfile",children:"\uac1c\ubc1c\uc6a9 Dockerfile"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:'# Dockerfile.dev\nFROM node:20-alpine\n\nWORKDIR /app\n\n# \uac1c\ubc1c \ub3c4\uad6c \uc124\uce58\nRUN apk add --no-cache git\n\n# \uc758\uc874\uc131 \uc124\uce58\nCOPY package*.json ./\nRUN npm install\n\n# \ubcfc\ub968 \ub9c8\uc6b4\ud2b8\ub97c \uc704\ud55c \uc900\ube44\nCOPY . .\n\nEXPOSE 3000\n\nCMD ["npm", "run", "dev"]\n'})}),"\n",(0,s.jsx)(e.h3,{id:"dockerignore",children:".dockerignore"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"# .dockerignore\nnode_modules\nnpm-debug.log\ndist\n.git\n.gitignore\n.env\n.env.local\n.env.*.local\n*.md\nREADME.md\n.vscode\n.idea\ncoverage\n.nyc_output\ntests\n*.test.ts\n*.spec.ts\n.DS_Store\nThumbs.db\ndocker-compose*.yml\nDockerfile*\n"})}),"\n",(0,s.jsx)(e.h3,{id:"docker-\ube4c\ub4dc-\ucd5c\uc801\ud654",children:"Docker \ube4c\ub4dc \ucd5c\uc801\ud654"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# .dockerbuildrc\n# Docker \ube4c\ub4dc \uc124\uc815\n\n# BuildKit \ud65c\uc131\ud654 (\ubcd1\ub82c \ube4c\ub4dc, \uce90\uc2dc \uac1c\uc120)\nexport DOCKER_BUILDKIT=1\nexport COMPOSE_DOCKER_CLI_BUILD=1\n\n# \ube4c\ub4dc \uba85\ub839\uc5b4\ndocker build \\\n  --build-arg NODE_ENV=production \\\n  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \\\n  --build-arg VERSION=$(git describe --tags --always) \\\n  --tag myapp:latest \\\n  --tag myapp:$(git rev-parse --short HEAD) \\\n  --cache-from myapp:latest \\\n  --progress=plain \\\n  .\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ud5ec\uc2a4\uccb4\ud06c-\uc2a4\ud06c\ub9bd\ud2b8",children:"\ud5ec\uc2a4\uccb4\ud06c \uc2a4\ud06c\ub9bd\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// healthcheck.js\nconst http = require('http');\n\nconst options = {\n  host: 'localhost',\n  port: 3000,\n  path: '/health',\n  timeout: 2000,\n};\n\nconst request = http.request(options, (res) => {\n  console.log(`Health check status: ${res.statusCode}`);\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nrequest.on('error', (err) => {\n  console.error(`Health check failed: ${err.message}`);\n  process.exit(1);\n});\n\nrequest.end();\n"})}),"\n",(0,s.jsx)(e.h2,{id:"143-docker-compose",children:"14.3 docker-compose"}),"\n",(0,s.jsx)(e.h3,{id:"docker-composeyml-\ud504\ub85c\ub355\uc158",children:"docker-compose.yml (\ud504\ub85c\ub355\uc158)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  # \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n  app:\n    image: myapp:${VERSION:-latest}\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        NODE_ENV: production\n    container_name: myapp\n    restart: unless-stopped\n    ports:\n      - "3000:3000"\n    environment:\n      NODE_ENV: production\n      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@db:5432/myapp\n      REDIS_URL: redis://redis:6379\n      JWT_SECRET: ${JWT_SECRET}\n      SESSION_SECRET: ${SESSION_SECRET}\n    env_file:\n      - .env.production\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    networks:\n      - app-network\n    volumes:\n      - ./logs:/app/logs\n      - ./uploads:/app/uploads\n    labels:\n      - "traefik.enable=true"\n      - "traefik.http.routers.app.rule=Host(`example.com`)"\n    deploy:\n      resources:\n        limits:\n          cpus: \'1\'\n          memory: 1G\n        reservations:\n          cpus: \'0.5\'\n          memory: 512M\n      replicas: 2\n      update_config:\n        parallelism: 1\n        delay: 10s\n        order: start-first\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n\n  # PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\n  db:\n    image: postgres:16-alpine\n    container_name: myapp-db\n    restart: unless-stopped\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n      POSTGRES_INITDB_ARGS: "-A md5"\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n      - ./database/init:/docker-entrypoint-initdb.d\n    networks:\n      - app-network\n    ports:\n      - "5432:5432"\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U postgres"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: \'1\'\n          memory: 2G\n\n  # Redis \uce90\uc2dc\n  redis:\n    image: redis:7-alpine\n    container_name: myapp-redis\n    restart: unless-stopped\n    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru\n    volumes:\n      - redis-data:/data\n    networks:\n      - app-network\n    ports:\n      - "6379:6379"\n    healthcheck:\n      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]\n      interval: 10s\n      timeout: 3s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: \'0.5\'\n          memory: 512M\n\n  # Nginx \ub9ac\ubc84\uc2a4 \ud504\ub85d\uc2dc\n  nginx:\n    image: nginx:alpine\n    container_name: myapp-nginx\n    restart: unless-stopped\n    ports:\n      - "80:80"\n      - "443:443"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/conf.d:/etc/nginx/conf.d:ro\n      - ./nginx/ssl:/etc/nginx/ssl:ro\n      - ./nginx/logs:/var/log/nginx\n      - nginx-cache:/var/cache/nginx\n    depends_on:\n      - app\n    networks:\n      - app-network\n    healthcheck:\n      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n\nvolumes:\n  postgres-data:\n    driver: local\n  redis-data:\n    driver: local\n  nginx-cache:\n    driver: local\n\nnetworks:\n  app-network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n'})}),"\n",(0,s.jsx)(e.h3,{id:"docker-composedevyml-\uac1c\ubc1c",children:"docker-compose.dev.yml (\uac1c\ubc1c)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# docker-compose.dev.yml\nversion: \'3.8\'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    container_name: myapp-dev\n    volumes:\n      - .:/app\n      - /app/node_modules\n    ports:\n      - "3000:3000"\n      - "9229:9229"  # Node.js \ub514\ubc84\uac70\n    environment:\n      NODE_ENV: development\n      DATABASE_URL: postgresql://postgres:password@db:5432/myapp_dev\n      REDIS_URL: redis://redis:6379\n      DEBUG: app:*\n    command: npm run dev\n    depends_on:\n      - db\n      - redis\n    networks:\n      - app-network\n\n  db:\n    image: postgres:16-alpine\n    container_name: myapp-db-dev\n    environment:\n      POSTGRES_DB: myapp_dev\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres-dev-data:/var/lib/postgresql/data\n    ports:\n      - "5432:5432"\n    networks:\n      - app-network\n\n  redis:\n    image: redis:7-alpine\n    container_name: myapp-redis-dev\n    ports:\n      - "6379:6379"\n    networks:\n      - app-network\n\n  # \uac1c\ubc1c \ub3c4\uad6c: Adminer (DB \uad00\ub9ac)\n  adminer:\n    image: adminer:latest\n    container_name: myapp-adminer\n    ports:\n      - "8080:8080"\n    environment:\n      ADMINER_DEFAULT_SERVER: db\n    depends_on:\n      - db\n    networks:\n      - app-network\n\n  # \uac1c\ubc1c \ub3c4\uad6c: RedisInsight\n  redis-insight:\n    image: redislabs/redisinsight:latest\n    container_name: myapp-redis-insight\n    ports:\n      - "8001:8001"\n    networks:\n      - app-network\n\nvolumes:\n  postgres-dev-data:\n\nnetworks:\n  app-network:\n    driver: bridge\n'})}),"\n",(0,s.jsx)(e.h3,{id:"docker-compose-\uc2a4\ud06c\ub9bd\ud2b8",children:"docker-compose \uc2a4\ud06c\ub9bd\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# scripts/docker.sh\n#!/bin/bash\n\nset -e\n\n# \uc0c9\uc0c1 \uc815\uc758\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nYELLOW=\'\\033[1;33m\'\nNC=\'\\033[0m\' # No Color\n\n# \ud568\uc218: \ub85c\uadf8 \ucd9c\ub825\nlog() {\n  echo -e "${GREEN}[$(date +\'%Y-%m-%d %H:%M:%S\')]${NC} $1"\n}\n\nerror() {\n  echo -e "${RED}[ERROR]${NC} $1" >&2\n}\n\nwarn() {\n  echo -e "${YELLOW}[WARN]${NC} $1"\n}\n\n# \ud658\uacbd \ud655\uc778\ncheck_env() {\n  if [ ! -f .env.production ]; then\n    error ".env.production \ud30c\uc77c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4"\n    exit 1\n  fi\n\n  source .env.production\n\n  required_vars=("DB_PASSWORD" "REDIS_PASSWORD" "JWT_SECRET" "SESSION_SECRET")\n  for var in "${required_vars[@]}"; do\n    if [ -z "${!var}" ]; then\n      error "\ud658\uacbd \ubcc0\uc218 $var\uac00 \uc124\uc815\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4"\n      exit 1\n    fi\n  done\n}\n\n# \ube4c\ub4dc\nbuild() {\n  log "Docker \uc774\ubbf8\uc9c0 \ube4c\ub4dc \uc2dc\uc791..."\n  docker-compose build --parallel\n  log "\ube4c\ub4dc \uc644\ub8cc"\n}\n\n# \uc2dc\uc791\nstart() {\n  log "\uc11c\ube44\uc2a4 \uc2dc\uc791..."\n  docker-compose up -d\n  log "\uc11c\ube44\uc2a4 \uc2dc\uc791 \uc644\ub8cc"\n  docker-compose ps\n}\n\n# \uc911\uc9c0\nstop() {\n  log "\uc11c\ube44\uc2a4 \uc911\uc9c0..."\n  docker-compose down\n  log "\uc11c\ube44\uc2a4 \uc911\uc9c0 \uc644\ub8cc"\n}\n\n# \uc7ac\uc2dc\uc791\nrestart() {\n  stop\n  start\n}\n\n# \ub85c\uadf8 \ud655\uc778\nlogs() {\n  docker-compose logs -f --tail=100 "$@"\n}\n\n# \uc815\ub9ac\nclean() {\n  warn "\ubaa8\ub4e0 \ucee8\ud14c\uc774\ub108, \ubcfc\ub968, \uc774\ubbf8\uc9c0\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4"\n  read -p "\uacc4\uc18d\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c? (y/N) " -n 1 -r\n  echo\n  if [[ $REPLY =~ ^[Yy]$ ]]; then\n    docker-compose down -v --rmi all\n    log "\uc815\ub9ac \uc644\ub8cc"\n  fi\n}\n\n# \ud5ec\uc2a4\uccb4\ud06c\nhealth() {\n  log "\uc11c\ube44\uc2a4 \uc0c1\ud0dc \ud655\uc778..."\n\n  services=("app" "db" "redis" "nginx")\n  for service in "${services[@]}"; do\n    health_status=$(docker inspect --format=\'{{.State.Health.Status}}\' "myapp-$service" 2>/dev/null || echo "N/A")\n    if [ "$health_status" = "healthy" ]; then\n      echo -e "$service: ${GREEN}\u2713 healthy${NC}"\n    elif [ "$health_status" = "N/A" ]; then\n      echo -e "$service: ${YELLOW}\u26a0 no healthcheck${NC}"\n    else\n      echo -e "$service: ${RED}\u2717 $health_status${NC}"\n    fi\n  done\n}\n\n# \ubc31\uc5c5\nbackup() {\n  log "\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5 \uc2dc\uc791..."\n\n  timestamp=$(date +%Y%m%d_%H%M%S)\n  backup_file="backups/db_backup_$timestamp.sql"\n\n  mkdir -p backups\n\n  docker-compose exec -T db pg_dump -U postgres myapp > "$backup_file"\n\n  log "\ubc31\uc5c5 \uc644\ub8cc: $backup_file"\n}\n\n# \ubcf5\uc6d0\nrestore() {\n  if [ -z "$1" ]; then\n    error "\ubc31\uc5c5 \ud30c\uc77c\uc744 \uc9c0\uc815\ud574\uc8fc\uc138\uc694"\n    exit 1\n  fi\n\n  warn "\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ubcf5\uc6d0\ud558\uba74 \uae30\uc874 \ub370\uc774\ud130\uac00 \uc0ad\uc81c\ub429\ub2c8\ub2e4"\n  read -p "\uacc4\uc18d\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c? (y/N) " -n 1 -r\n  echo\n\n  if [[ $REPLY =~ ^[Yy]$ ]]; then\n    log "\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubcf5\uc6d0 \uc2dc\uc791..."\n    docker-compose exec -T db psql -U postgres myapp < "$1"\n    log "\ubcf5\uc6d0 \uc644\ub8cc"\n  fi\n}\n\n# \uba54\uc778\ncase "$1" in\n  build)\n    build\n    ;;\n  start)\n    check_env\n    start\n    ;;\n  stop)\n    stop\n    ;;\n  restart)\n    check_env\n    restart\n    ;;\n  logs)\n    logs "${@:2}"\n    ;;\n  clean)\n    clean\n    ;;\n  health)\n    health\n    ;;\n  backup)\n    backup\n    ;;\n  restore)\n    restore "$2"\n    ;;\n  *)\n    echo "\uc0ac\uc6a9\ubc95: $0 {build|start|stop|restart|logs|clean|health|backup|restore}"\n    exit 1\n    ;;\nesac\n'})}),"\n",(0,s.jsx)(e.h2,{id:"144-\ud658\uacbd-\ubcc0\uc218-\uad00\ub9ac",children:"14.4 \ud658\uacbd \ubcc0\uc218 \uad00\ub9ac"}),"\n",(0,s.jsx)(e.h3,{id:"env-\ud30c\uc77c-\uad6c\uc870",children:".env \ud30c\uc77c \uad6c\uc870"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# .env.example\n# \uc560\ud50c\ub9ac\ucf00\uc774\uc158\nNODE_ENV=production\nPORT=3000\nHOST=0.0.0.0\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4\nDATABASE_URL=postgresql://user:password@host:5432/dbname\nDB_PASSWORD=\nDB_POOL_MIN=2\nDB_POOL_MAX=10\n\n# Redis\nREDIS_URL=redis://:password@host:6379\nREDIS_PASSWORD=\n\n# \uc778\uc99d\nJWT_SECRET=\nJWT_EXPIRES_IN=7d\nSESSION_SECRET=\nSESSION_MAX_AGE=604800000\n\n# \uc774\uba54\uc77c\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=\nSMTP_PASSWORD=\nEMAIL_FROM=noreply@example.com\n\n# AWS\nAWS_REGION=ap-northeast-2\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nS3_BUCKET=\n\n# \ubaa8\ub2c8\ud130\ub9c1\nSENTRY_DSN=\nSENTRY_ENVIRONMENT=production\nLOG_LEVEL=info\n\n# \uae30\ub2a5 \ud50c\ub798\uadf8\nFEATURE_ANALYTICS=true\nFEATURE_CACHE=true\nFEATURE_RATE_LIMIT=true\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ud658\uacbd-\ubcc0\uc218-\uac80\uc99d",children:"\ud658\uacbd \ubcc0\uc218 \uac80\uc99d"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// config/env-validator.ts\nimport { z } from 'zod';\n\nconst envSchema = z.object({\n  // \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n  NODE_ENV: z.enum(['development', 'staging', 'production']),\n  PORT: z.string().transform(Number).pipe(z.number().int().positive()),\n  HOST: z.string().default('0.0.0.0'),\n\n  // \ub370\uc774\ud130\ubca0\uc774\uc2a4\n  DATABASE_URL: z.string().url(),\n  DB_POOL_MIN: z.string().transform(Number).pipe(z.number().int().min(0)).default('2'),\n  DB_POOL_MAX: z.string().transform(Number).pipe(z.number().int().max(100)).default('10'),\n\n  // Redis\n  REDIS_URL: z.string().url(),\n\n  // \uc778\uc99d\n  JWT_SECRET: z.string().min(32),\n  JWT_EXPIRES_IN: z.string().default('7d'),\n  SESSION_SECRET: z.string().min(32),\n  SESSION_MAX_AGE: z.string().transform(Number).pipe(z.number().int().positive()),\n\n  // \uc774\uba54\uc77c\n  SMTP_HOST: z.string().optional(),\n  SMTP_PORT: z.string().transform(Number).pipe(z.number().int()).optional(),\n  SMTP_USER: z.string().email().optional(),\n  SMTP_PASSWORD: z.string().optional(),\n  EMAIL_FROM: z.string().email(),\n\n  // AWS\n  AWS_REGION: z.string().optional(),\n  AWS_ACCESS_KEY_ID: z.string().optional(),\n  AWS_SECRET_ACCESS_KEY: z.string().optional(),\n  S3_BUCKET: z.string().optional(),\n\n  // \ubaa8\ub2c8\ud130\ub9c1\n  SENTRY_DSN: z.string().url().optional(),\n  SENTRY_ENVIRONMENT: z.string().optional(),\n  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),\n\n  // \uae30\ub2a5 \ud50c\ub798\uadf8\n  FEATURE_ANALYTICS: z.string().transform(v => v === 'true').default('false'),\n  FEATURE_CACHE: z.string().transform(v => v === 'true').default('true'),\n  FEATURE_RATE_LIMIT: z.string().transform(v => v === 'true').default('true'),\n});\n\nexport type Env = z.infer<typeof envSchema>;\n\nexport function validateEnv(): Env {\n  try {\n    return envSchema.parse(process.env);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const missingVars = error.errors.map(e => e.path.join('.')).join(', ');\n      throw new Error(`\ud658\uacbd \ubcc0\uc218 \uac80\uc99d \uc2e4\ud328: ${missingVars}`);\n    }\n    throw error;\n  }\n}\n\n// \uc0ac\uc6a9\nexport const env = validateEnv();\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2dc\ud06c\ub9bf-\uad00\ub9ac",children:"\uc2dc\ud06c\ub9bf \uad00\ub9ac"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// config/secrets.ts\nimport * as crypto from 'crypto';\nimport * as fs from 'fs';\n\nexport class SecretsManager {\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly keyPath: string;\n\n  constructor(keyPath: string = '.secrets.key') {\n    this.keyPath = keyPath;\n  }\n\n  // \ub9c8\uc2a4\ud130 \ud0a4 \uc0dd\uc131\n  generateMasterKey(): Buffer {\n    const key = crypto.randomBytes(32);\n    fs.writeFileSync(this.keyPath, key.toString('hex'), { mode: 0o600 });\n    return key;\n  }\n\n  // \ub9c8\uc2a4\ud130 \ud0a4 \ub85c\ub4dc\n  private loadMasterKey(): Buffer {\n    if (!fs.existsSync(this.keyPath)) {\n      throw new Error('\ub9c8\uc2a4\ud130 \ud0a4\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. generateMasterKey()\ub97c \uba3c\uc800 \uc2e4\ud589\ud558\uc138\uc694.');\n    }\n    const keyHex = fs.readFileSync(this.keyPath, 'utf8');\n    return Buffer.from(keyHex, 'hex');\n  }\n\n  // \uc554\ud638\ud654\n  encrypt(plaintext: string): string {\n    const key = this.loadMasterKey();\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv(this.algorithm, key, iv);\n\n    let encrypted = cipher.update(plaintext, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n\n    const authTag = cipher.getAuthTag();\n\n    return `${iv.toString('hex')}:${authTag.toString('hex')}:${encrypted}`;\n  }\n\n  // \ubcf5\ud638\ud654\n  decrypt(ciphertext: string): string {\n    const key = this.loadMasterKey();\n    const [ivHex, authTagHex, encrypted] = ciphertext.split(':');\n\n    const iv = Buffer.from(ivHex, 'hex');\n    const authTag = Buffer.from(authTagHex, 'hex');\n\n    const decipher = crypto.createDecipheriv(this.algorithm, key, iv);\n    decipher.setAuthTag(authTag);\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  }\n\n  // .env \ud30c\uc77c \uc554\ud638\ud654\n  encryptEnvFile(inputPath: string, outputPath: string): void {\n    const content = fs.readFileSync(inputPath, 'utf8');\n    const encrypted = this.encrypt(content);\n    fs.writeFileSync(outputPath, encrypted, { mode: 0o600 });\n  }\n\n  // .env \ud30c\uc77c \ubcf5\ud638\ud654\n  decryptEnvFile(inputPath: string, outputPath: string): void {\n    const encrypted = fs.readFileSync(inputPath, 'utf8');\n    const decrypted = this.decrypt(encrypted);\n    fs.writeFileSync(outputPath, decrypted, { mode: 0o600 });\n  }\n}\n\n// CLI \uc0ac\uc6a9\nif (require.main === module) {\n  const manager = new SecretsManager();\n  const command = process.argv[2];\n\n  switch (command) {\n    case 'generate-key':\n      manager.generateMasterKey();\n      console.log('\ub9c8\uc2a4\ud130 \ud0a4 \uc0dd\uc131 \uc644\ub8cc');\n      break;\n    case 'encrypt':\n      manager.encryptEnvFile('.env.production', '.env.production.enc');\n      console.log('\uc554\ud638\ud654 \uc644\ub8cc');\n      break;\n    case 'decrypt':\n      manager.decryptEnvFile('.env.production.enc', '.env.production');\n      console.log('\ubcf5\ud638\ud654 \uc644\ub8cc');\n      break;\n    default:\n      console.log('\uc0ac\uc6a9\ubc95: node secrets.js {generate-key|encrypt|decrypt}');\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"145-nginx-\uc124\uc815",children:"14.5 Nginx \uc124\uc815"}),"\n",(0,s.jsx)(e.h3,{id:"nginxconf",children:"nginx.conf"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nginx",children:'# nginx/nginx.conf\nuser nginx;\nworker_processes auto;\nworker_rlimit_nofile 65535;\n\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # \ub85c\uadf8 \ud3ec\ub9f7\n    log_format main \'$remote_addr - $remote_user [$time_local] "$request" \'\n                    \'$status $body_bytes_sent "$http_referer" \'\n                    \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    log_format json escape=json \'{\'\n        \'"time":"$time_iso8601",\'\n        \'"remote_addr":"$remote_addr",\'\n        \'"request_method":"$request_method",\'\n        \'"request_uri":"$request_uri",\'\n        \'"status":$status,\'\n        \'"body_bytes_sent":$body_bytes_sent,\'\n        \'"request_time":$request_time,\'\n        \'"upstream_response_time":"$upstream_response_time",\'\n        \'"user_agent":"$http_user_agent"\'\n    \'}\';\n\n    access_log /var/log/nginx/access.log json;\n\n    # \uc131\ub2a5 \ucd5c\uc801\ud654\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    # \ubc84\ud37c \ud06c\uae30\n    client_body_buffer_size 128k;\n    client_max_body_size 50m;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 16k;\n\n    # Gzip \uc555\ucd95\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/rss+xml\n        font/truetype\n        font/opentype\n        application/vnd.ms-fontobject\n        image/svg+xml;\n    gzip_disable "msie6";\n\n    # Brotli \uc555\ucd95 (\ubaa8\ub4c8 \uc124\uce58 \ud544\uc694)\n    # brotli on;\n    # brotli_comp_level 6;\n    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml;\n\n    # \ubcf4\uc548 \ud5e4\ub354\n    add_header X-Frame-Options "SAMEORIGIN" always;\n    add_header X-Content-Type-Options "nosniff" always;\n    add_header X-XSS-Protection "1; mode=block" always;\n    add_header Referrer-Policy "strict-origin-when-cross-origin" always;\n\n    # Rate Limiting\n    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;\n    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;\n\n    # \uc5c5\uc2a4\ud2b8\ub9bc\n    upstream app_backend {\n        least_conn;\n        server app:3000 max_fails=3 fail_timeout=30s;\n        keepalive 32;\n    }\n\n    # \uac00\uc0c1 \ud638\uc2a4\ud2b8 \uc124\uc815 \ud3ec\ud568\n    include /etc/nginx/conf.d/*.conf;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc11c\ubc84-\uc124\uc815",children:"\uc11c\ubc84 \uc124\uc815"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nginx",children:'# nginx/conf.d/app.conf\n# HTTP \u2192 HTTPS \ub9ac\ub2e4\uc774\ub809\ud2b8\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n\n    # Let\'s Encrypt ACME \ucc4c\ub9b0\uc9c0\n    location /.well-known/acme-challenge/ {\n        root /var/www/certbot;\n    }\n\n    location / {\n        return 301 https://$server_name$request_uri;\n    }\n}\n\n# HTTPS \uc11c\ubc84\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n\n    # SSL \uc778\uc99d\uc11c\n    ssl_certificate /etc/nginx/ssl/fullchain.pem;\n    ssl_certificate_key /etc/nginx/ssl/privkey.pem;\n\n    # SSL \uc124\uc815\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers \'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\';\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_session_tickets off;\n\n    # OCSP Stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    ssl_trusted_certificate /etc/nginx/ssl/chain.pem;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n\n    # HSTS\n    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;\n\n    # \ub85c\uadf8\n    access_log /var/log/nginx/app-access.log json;\n    error_log /var/log/nginx/app-error.log;\n\n    # \uc815\uc801 \ud30c\uc77c \uce90\uc2f1\n    location ~* \\.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {\n        expires 1y;\n        add_header Cache-Control "public, immutable";\n        access_log off;\n    }\n\n    # API \ud504\ub85d\uc2dc\n    location /api/ {\n        limit_req zone=api_limit burst=20 nodelay;\n        limit_conn conn_limit 10;\n\n        proxy_pass http://app_backend;\n        proxy_http_version 1.1;\n\n        # \ud5e4\ub354 \uc124\uc815\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Request-ID $request_id;\n\n        # WebSocket \uc9c0\uc6d0\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n\n        # \ud0c0\uc784\uc544\uc6c3\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n\n        # \ubc84\ud37c\ub9c1\n        proxy_buffering on;\n        proxy_buffer_size 4k;\n        proxy_buffers 8 4k;\n        proxy_busy_buffers_size 8k;\n\n        # \uce90\uc2dc \ube44\ud65c\uc131\ud654\n        add_header Cache-Control "no-cache, no-store, must-revalidate";\n    }\n\n    # \ub85c\uadf8\uc778 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 (Rate Limiting \uac15\ud654)\n    location /api/auth/login {\n        limit_req zone=login_limit burst=3 nodelay;\n\n        proxy_pass http://app_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # \ud5ec\uc2a4\uccb4\ud06c\n    location /health {\n        access_log off;\n        proxy_pass http://app_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n    }\n\n    # \uba54\ud2b8\ub9ad\uc2a4 (\ub0b4\ubd80 \uc804\uc6a9)\n    location /metrics {\n        allow 172.20.0.0/16;  # Docker \ub124\ud2b8\uc6cc\ud06c\n        deny all;\n\n        proxy_pass http://app_backend;\n        proxy_http_version 1.1;\n    }\n\n    # SPA \ub77c\uc6b0\ud305 (React, Vue \ub4f1)\n    location / {\n        root /var/www/html;\n        try_files $uri $uri/ /index.html;\n\n        # \uce90\uc2dc \uc124\uc815\n        add_header Cache-Control "no-cache";\n    }\n\n    # robots.txt\n    location = /robots.txt {\n        root /var/www/html;\n        access_log off;\n    }\n\n    # \uc228\uae40 \ud30c\uc77c \uc811\uadfc \ucc28\ub2e8\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uce90\uc2f1-\uc124\uc815",children:"\uce90\uc2f1 \uc124\uc815"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nginx",children:'# nginx/conf.d/cache.conf\n# \uce90\uc2dc \uacbd\ub85c \uc124\uc815\nproxy_cache_path /var/cache/nginx/api\n    levels=1:2\n    keys_zone=api_cache:10m\n    max_size=1g\n    inactive=60m\n    use_temp_path=off;\n\n# \uce90\uc2dc \uc11c\ubc84\nserver {\n    listen 443 ssl http2;\n    server_name api.example.com;\n\n    # SSL \uc124\uc815 (\uc0dd\ub7b5)\n\n    # API \uce90\uc2f1\n    location /api/v1/public/ {\n        proxy_cache api_cache;\n        proxy_cache_key "$scheme$request_method$host$request_uri";\n        proxy_cache_valid 200 5m;\n        proxy_cache_valid 404 1m;\n        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;\n        proxy_cache_background_update on;\n        proxy_cache_lock on;\n\n        # \uce90\uc2dc \uc0c1\ud0dc \ud5e4\ub354 \ucd94\uac00\n        add_header X-Cache-Status $upstream_cache_status;\n\n        proxy_pass http://app_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n    }\n\n    # \uce90\uc2dc \uc81c\uac70 \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n    location /api/cache/purge {\n        allow 172.20.0.0/16;\n        deny all;\n\n        proxy_cache_purge api_cache "$scheme$request_method$host$request_uri";\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"146-httpsssl",children:"14.6 HTTPS/SSL"}),"\n",(0,s.jsx)(e.h3,{id:"lets-encrypt-\uc124\uc815",children:"Let's Encrypt \uc124\uc815"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# scripts/setup-ssl.sh\n#!/bin/bash\n\nset -e\n\nDOMAIN="example.com"\nEMAIL="admin@example.com"\nSTAGING=0  # \ud14c\uc2a4\ud2b8\uc2dc 1\ub85c \uc124\uc815\n\n# Certbot \uc124\uce58 \ud655\uc778\nif ! command -v certbot &> /dev/null; then\n    echo "Certbot \uc124\uce58 \uc911..."\n    apt-get update\n    apt-get install -y certbot python3-certbot-nginx\nfi\n\n# \uc778\uc99d\uc11c \ubc1c\uae09\nif [ $STAGING -eq 1 ]; then\n    echo "\ud14c\uc2a4\ud2b8 \ubaa8\ub4dc\ub85c \uc778\uc99d\uc11c \ubc1c\uae09..."\n    certbot certonly --webroot \\\n        --webroot-path=/var/www/certbot \\\n        --email $EMAIL \\\n        --agree-tos \\\n        --no-eff-email \\\n        --staging \\\n        -d $DOMAIN \\\n        -d www.$DOMAIN\nelse\n    echo "\ud504\ub85c\ub355\uc158 \uc778\uc99d\uc11c \ubc1c\uae09..."\n    certbot certonly --webroot \\\n        --webroot-path=/var/www/certbot \\\n        --email $EMAIL \\\n        --agree-tos \\\n        --no-eff-email \\\n        -d $DOMAIN \\\n        -d www.$DOMAIN\nfi\n\n# \uc778\uc99d\uc11c \ubcf5\uc0ac\ncp /etc/letsencrypt/live/$DOMAIN/fullchain.pem nginx/ssl/\ncp /etc/letsencrypt/live/$DOMAIN/privkey.pem nginx/ssl/\ncp /etc/letsencrypt/live/$DOMAIN/chain.pem nginx/ssl/\n\n# \uad8c\ud55c \uc124\uc815\nchmod 644 nginx/ssl/fullchain.pem\nchmod 600 nginx/ssl/privkey.pem\nchmod 644 nginx/ssl/chain.pem\n\necho "SSL \uc778\uc99d\uc11c \uc124\uc815 \uc644\ub8cc"\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc790\ub3d9-\uac31\uc2e0",children:"\uc790\ub3d9 \uac31\uc2e0"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# scripts/renew-ssl.sh\n#!/bin/bash\n\nset -e\n\nDOMAIN="example.com"\n\n# \uc778\uc99d\uc11c \uac31\uc2e0\ncertbot renew --quiet --deploy-hook "\n    cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem /path/to/nginx/ssl/\n    cp /etc/letsencrypt/live/$DOMAIN/privkey.pem /path/to/nginx/ssl/\n    cp /etc/letsencrypt/live/$DOMAIN/chain.pem /path/to/nginx/ssl/\n    docker-compose exec nginx nginx -s reload\n"\n\necho "SSL \uc778\uc99d\uc11c \uac31\uc2e0 \ud655\uc778 \uc644\ub8cc"\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Crontab \uc124\uc815\n# \ub9e4\uc77c \uc624\uc804 3\uc2dc\uc5d0 \uac31\uc2e0 \ud655\uc778\n0 3 * * * /path/to/scripts/renew-ssl.sh >> /var/log/certbot-renew.log 2>&1\n"})}),"\n",(0,s.jsx)(e.h3,{id:"ssl-\ud14c\uc2a4\ud2b8",children:"SSL \ud14c\uc2a4\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# scripts/test-ssl.sh\n#!/bin/bash\n\nDOMAIN="example.com"\n\necho "SSL \uc124\uc815 \ud14c\uc2a4\ud2b8..."\n\n# OpenSSL \ud14c\uc2a4\ud2b8\necho -e "\\n=== OpenSSL \uc5f0\uacb0 \ud14c\uc2a4\ud2b8 ==="\nopenssl s_client -connect $DOMAIN:443 -servername $DOMAIN < /dev/null\n\n# \uc778\uc99d\uc11c \ub9cc\ub8cc\uc77c \ud655\uc778\necho -e "\\n=== \uc778\uc99d\uc11c \ub9cc\ub8cc\uc77c ==="\necho | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -dates\n\n# SSL Labs \ud14c\uc2a4\ud2b8 (API)\necho -e "\\n=== SSL Labs \ub4f1\uae09 \ud655\uc778 ==="\ncurl -s "https://api.ssllabs.com/api/v3/analyze?host=$DOMAIN" | jq \'.endpoints[0].grade\'\n\n# HSTS \ud5e4\ub354 \ud655\uc778\necho -e "\\n=== HSTS \ud5e4\ub354 ==="\ncurl -sI https://$DOMAIN | grep -i strict-transport-security\n\n# TLS \ubc84\uc804 \ud14c\uc2a4\ud2b8\necho -e "\\n=== TLS 1.2 \ud14c\uc2a4\ud2b8 ==="\nopenssl s_client -connect $DOMAIN:443 -tls1_2 < /dev/null 2>&1 | grep "Protocol"\n\necho -e "\\n=== TLS 1.3 \ud14c\uc2a4\ud2b8 ==="\nopenssl s_client -connect $DOMAIN:443 -tls1_3 < /dev/null 2>&1 | grep "Protocol"\n'})}),"\n",(0,s.jsx)(e.h2,{id:"147-cicd-github-actions",children:"14.7 CI/CD (GitHub Actions)"}),"\n",(0,s.jsx)(e.h3,{id:"\uba54\uc778-\uc6cc\ud06c\ud50c\ub85c\uc6b0",children:"\uba54\uc778 \uc6cc\ud06c\ud50c\ub85c\uc6b0"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n\nenv:\n  NODE_VERSION: '20'\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  # \ud14c\uc2a4\ud2b8\n  test:\n    name: Run Tests\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:16-alpine\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run linter\n        run: npm run lint\n\n      - name: Run type check\n        run: npm run type-check\n\n      - name: Run unit tests\n        run: npm run test:unit\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test\n          REDIS_URL: redis://localhost:6379\n\n      - name: Run integration tests\n        run: npm run test:integration\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test\n          REDIS_URL: redis://localhost:6379\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          files: ./coverage/coverage-final.json\n          flags: unittests\n          name: codecov-umbrella\n\n  # \ube4c\ub4dc \ubc0f \ud478\uc2dc\n  build:\n    name: Build and Push Docker Image\n    runs-on: ubuntu-latest\n    needs: test\n    if: github.event_name == 'push' && github.ref == 'refs/heads/main'\n\n    permissions:\n      contents: read\n      packages: write\n\n    outputs:\n      image-tag: ${{ steps.meta.outputs.tags }}\n      image-digest: ${{ steps.build.outputs.digest }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Log in to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push\n        id: build\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          build-args: |\n            NODE_ENV=production\n            BUILD_DATE=${{ github.event.head_commit.timestamp }}\n            VERSION=${{ github.sha }}\n\n  # \ubc30\ud3ec\n  deploy:\n    name: Deploy to Production\n    runs-on: ubuntu-latest\n    needs: build\n    if: github.event_name == 'push' && github.ref == 'refs/heads/main'\n\n    environment:\n      name: production\n      url: https://example.com\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup SSH\n        uses: webfactory/ssh-agent@v0.8.0\n        with:\n          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}\n\n      - name: Add known hosts\n        run: |\n          mkdir -p ~/.ssh\n          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts\n\n      - name: Deploy to server\n        env:\n          SERVER_HOST: ${{ secrets.SERVER_HOST }}\n          SERVER_USER: ${{ secrets.SERVER_USER }}\n          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}\n        run: |\n          ssh $SERVER_USER@$SERVER_HOST << 'ENDSSH'\n            cd /app\n\n            # \uc774\ubbf8\uc9c0 \ud480\n            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\n\n            # \ud658\uacbd \ubcc0\uc218 \uc5c5\ub370\uc774\ud2b8\n            echo \"${{ secrets.ENV_PRODUCTION }}\" > .env.production\n\n            # \ubc30\ud3ec\n            docker-compose pull\n            docker-compose up -d --no-deps --build app\n\n            # \ud5ec\uc2a4\uccb4\ud06c\n            for i in {1..30}; do\n              if curl -f http://localhost:3000/health; then\n                echo \"\uc11c\ube44\uc2a4\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc2dc\uc791\ub418\uc5c8\uc2b5\ub2c8\ub2e4\"\n                break\n              fi\n              echo \"\ud5ec\uc2a4\uccb4\ud06c \ub300\uae30 \uc911... ($i/30)\"\n              sleep 2\n            done\n\n            # \uc774\uc804 \uc774\ubbf8\uc9c0 \uc815\ub9ac\n            docker image prune -af --filter \"until=24h\"\n          ENDSSH\n\n      - name: Verify deployment\n        run: |\n          sleep 10\n          curl -f https://example.com/health || exit 1\n\n      - name: Notify success\n        if: success()\n        uses: 8398a7/action-slack@v3\n        with:\n          status: custom\n          custom_payload: |\n            {\n              text: '\ubc30\ud3ec \uc131\uacf5',\n              attachments: [{\n                color: 'good',\n                text: `${process.env.AS_REPO}@${process.env.AS_REF} deployed successfully`\n              }]\n            }\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n\n      - name: Notify failure\n        if: failure()\n        uses: 8398a7/action-slack@v3\n        with:\n          status: custom\n          custom_payload: |\n            {\n              text: '\ubc30\ud3ec \uc2e4\ud328',\n              attachments: [{\n                color: 'danger',\n                text: `${process.env.AS_REPO}@${process.env.AS_REF} deployment failed`\n              }]\n            }\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n\n  # \ubcf4\uc548 \uc2a4\uce94\n  security:\n    name: Security Scan\n    runs-on: ubuntu-latest\n    needs: build\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: ${{ needs.build.outputs.image-tag }}\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n\n      - name: Upload Trivy results to GitHub Security\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: 'trivy-results.sarif'\n\n      - name: Run Snyk\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          command: test\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2a4\ud14c\uc774\uc9d5-\ubc30\ud3ec",children:"\uc2a4\ud14c\uc774\uc9d5 \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/deploy-staging.yml\nname: Deploy to Staging\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  deploy-staging:\n    name: Deploy to Staging\n    runs-on: ubuntu-latest\n\n    environment:\n      name: staging\n      url: https://staging.example.com\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm test\n\n      - name: Build Docker image\n        run: |\n          docker build -t myapp:staging .\n\n      - name: Deploy to staging\n        env:\n          SERVER_HOST: ${{ secrets.STAGING_SERVER_HOST }}\n          SERVER_USER: ${{ secrets.STAGING_SERVER_USER }}\n        run: |\n          # \ubc30\ud3ec \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589\n          ssh $SERVER_USER@$SERVER_HOST \"cd /app && ./deploy-staging.sh\"\n"})}),"\n",(0,s.jsx)(e.h2,{id:"148-aws-\ubc30\ud3ec",children:"14.8 AWS \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.h3,{id:"aws-ecs-\ubc30\ud3ec",children:"AWS ECS \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// scripts/deploy-ecs.ts\nimport {\n  ECSClient,\n  UpdateServiceCommand,\n  DescribeServicesCommand,\n  RegisterTaskDefinitionCommand,\n} from '@aws-sdk/client-ecs';\n\ninterface DeployConfig {\n  cluster: string;\n  service: string;\n  taskFamily: string;\n  image: string;\n  containerName: string;\n  region: string;\n}\n\nexport class ECSDeployer {\n  private client: ECSClient;\n  private config: DeployConfig;\n\n  constructor(config: DeployConfig) {\n    this.config = config;\n    this.client = new ECSClient({ region: config.region });\n  }\n\n  // \uc0c8 \ud0dc\uc2a4\ud06c \uc815\uc758 \ub4f1\ub85d\n  async registerTaskDefinition(): Promise<string> {\n    const command = new RegisterTaskDefinitionCommand({\n      family: this.config.taskFamily,\n      networkMode: 'awsvpc',\n      requiresCompatibilities: ['FARGATE'],\n      cpu: '512',\n      memory: '1024',\n      executionRoleArn: process.env.ECS_EXECUTION_ROLE_ARN,\n      taskRoleArn: process.env.ECS_TASK_ROLE_ARN,\n      containerDefinitions: [\n        {\n          name: this.config.containerName,\n          image: this.config.image,\n          essential: true,\n          portMappings: [\n            {\n              containerPort: 3000,\n              protocol: 'tcp',\n            },\n          ],\n          environment: [\n            { name: 'NODE_ENV', value: 'production' },\n            { name: 'PORT', value: '3000' },\n          ],\n          secrets: [\n            {\n              name: 'DATABASE_URL',\n              valueFrom: process.env.DATABASE_URL_SECRET_ARN,\n            },\n            {\n              name: 'JWT_SECRET',\n              valueFrom: process.env.JWT_SECRET_ARN,\n            },\n          ],\n          logConfiguration: {\n            logDriver: 'awslogs',\n            options: {\n              'awslogs-group': `/ecs/${this.config.taskFamily}`,\n              'awslogs-region': this.config.region,\n              'awslogs-stream-prefix': 'ecs',\n            },\n          },\n          healthCheck: {\n            command: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1'],\n            interval: 30,\n            timeout: 5,\n            retries: 3,\n            startPeriod: 60,\n          },\n        },\n      ],\n    });\n\n    const response = await this.client.send(command);\n    const revision = response.taskDefinition?.revision;\n\n    if (!revision) {\n      throw new Error('\ud0dc\uc2a4\ud06c \uc815\uc758 \ub4f1\ub85d \uc2e4\ud328');\n    }\n\n    console.log(`\uc0c8 \ud0dc\uc2a4\ud06c \uc815\uc758 \ub4f1\ub85d: ${this.config.taskFamily}:${revision}`);\n    return `${this.config.taskFamily}:${revision}`;\n  }\n\n  // \uc11c\ube44\uc2a4 \uc5c5\ub370\uc774\ud2b8\n  async updateService(taskDefinition: string): Promise<void> {\n    const command = new UpdateServiceCommand({\n      cluster: this.config.cluster,\n      service: this.config.service,\n      taskDefinition,\n      forceNewDeployment: true,\n      deploymentConfiguration: {\n        minimumHealthyPercent: 100,\n        maximumPercent: 200,\n        deploymentCircuitBreaker: {\n          enable: true,\n          rollback: true,\n        },\n      },\n    });\n\n    await this.client.send(command);\n    console.log(`\uc11c\ube44\uc2a4 \uc5c5\ub370\uc774\ud2b8 \uc2dc\uc791: ${this.config.service}`);\n  }\n\n  // \ubc30\ud3ec \uc0c1\ud0dc \ud655\uc778\n  async waitForDeployment(timeoutMinutes: number = 10): Promise<void> {\n    const startTime = Date.now();\n    const timeout = timeoutMinutes * 60 * 1000;\n\n    while (Date.now() - startTime < timeout) {\n      const command = new DescribeServicesCommand({\n        cluster: this.config.cluster,\n        services: [this.config.service],\n      });\n\n      const response = await this.client.send(command);\n      const service = response.services?.[0];\n\n      if (!service) {\n        throw new Error('\uc11c\ube44\uc2a4\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4');\n      }\n\n      const runningCount = service.runningCount || 0;\n      const desiredCount = service.desiredCount || 0;\n      const deployments = service.deployments || [];\n\n      console.log(`Running: ${runningCount}/${desiredCount}, Deployments: ${deployments.length}`);\n\n      // \ubc30\ud3ec \uc644\ub8cc \uc870\uac74: \uc2e4\ud589 \uc911\uc778 \ud0dc\uc2a4\ud06c \uc218\uac00 \uc6d0\ud558\ub294 \uc218\uc640 \uac19\uace0, \ubc30\ud3ec\uac00 1\uac1c\ub9cc \uc788\uc74c\n      if (runningCount === desiredCount && deployments.length === 1) {\n        console.log('\ubc30\ud3ec \uc644\ub8cc!');\n        return;\n      }\n\n      // \ubc30\ud3ec \uc2e4\ud328 \ud655\uc778\n      const failedDeployment = deployments.find(d => d.rolloutState === 'FAILED');\n      if (failedDeployment) {\n        throw new Error(`\ubc30\ud3ec \uc2e4\ud328: ${failedDeployment.rolloutStateReason}`);\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 15000)); // 15\ucd08 \ub300\uae30\n    }\n\n    throw new Error('\ubc30\ud3ec \ud0c0\uc784\uc544\uc6c3');\n  }\n\n  // \uc804\uccb4 \ubc30\ud3ec \ud504\ub85c\uc138\uc2a4\n  async deploy(): Promise<void> {\n    console.log('=== ECS \ubc30\ud3ec \uc2dc\uc791 ===');\n\n    try {\n      // 1. \uc0c8 \ud0dc\uc2a4\ud06c \uc815\uc758 \ub4f1\ub85d\n      const taskDefinition = await this.registerTaskDefinition();\n\n      // 2. \uc11c\ube44\uc2a4 \uc5c5\ub370\uc774\ud2b8\n      await this.updateService(taskDefinition);\n\n      // 3. \ubc30\ud3ec \uc644\ub8cc \ub300\uae30\n      await this.waitForDeployment();\n\n      console.log('=== \ubc30\ud3ec \uc131\uacf5 ===');\n    } catch (error) {\n      console.error('=== \ubc30\ud3ec \uc2e4\ud328 ===');\n      throw error;\n    }\n  }\n}\n\n// CLI \uc2e4\ud589\nif (require.main === module) {\n  const deployer = new ECSDeployer({\n    cluster: process.env.ECS_CLUSTER || 'myapp-cluster',\n    service: process.env.ECS_SERVICE || 'myapp-service',\n    taskFamily: process.env.ECS_TASK_FAMILY || 'myapp',\n    image: process.env.DOCKER_IMAGE || 'myapp:latest',\n    containerName: 'myapp',\n    region: process.env.AWS_REGION || 'ap-northeast-2',\n  });\n\n  deployer.deploy().catch(error => {\n    console.error(error);\n    process.exit(1);\n  });\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"terraform-\uc124\uc815",children:"Terraform \uc124\uc815"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-hcl",children:'# terraform/main.tf\nterraform {\n  required_version = ">= 1.0"\n\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 5.0"\n    }\n  }\n\n  backend "s3" {\n    bucket = "myapp-terraform-state"\n    key    = "production/terraform.tfstate"\n    region = "ap-northeast-2"\n    encrypt = true\n    dynamodb_table = "terraform-lock"\n  }\n}\n\nprovider "aws" {\n  region = var.aws_region\n}\n\n# VPC\nresource "aws_vpc" "main" {\n  cidr_block           = "10.0.0.0/16"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = "${var.project_name}-vpc"\n  }\n}\n\n# \uc11c\ube0c\ub137\nresource "aws_subnet" "public" {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = "10.0.${count.index}.0/24"\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = "${var.project_name}-public-${count.index + 1}"\n  }\n}\n\nresource "aws_subnet" "private" {\n  count             = 2\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = "10.0.${count.index + 10}.0/24"\n  availability_zone = data.aws_availability_zones.available.names[count.index]\n\n  tags = {\n    Name = "${var.project_name}-private-${count.index + 1}"\n  }\n}\n\n# \uc778\ud130\ub137 \uac8c\uc774\ud2b8\uc6e8\uc774\nresource "aws_internet_gateway" "main" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = "${var.project_name}-igw"\n  }\n}\n\n# NAT \uac8c\uc774\ud2b8\uc6e8\uc774\nresource "aws_eip" "nat" {\n  count  = 2\n  domain = "vpc"\n\n  tags = {\n    Name = "${var.project_name}-nat-${count.index + 1}"\n  }\n}\n\nresource "aws_nat_gateway" "main" {\n  count         = 2\n  allocation_id = aws_eip.nat[count.index].id\n  subnet_id     = aws_subnet.public[count.index].id\n\n  tags = {\n    Name = "${var.project_name}-nat-${count.index + 1}"\n  }\n}\n\n# \ub77c\uc6b0\ud305 \ud14c\uc774\ube14\nresource "aws_route_table" "public" {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = "0.0.0.0/0"\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name = "${var.project_name}-public-rt"\n  }\n}\n\nresource "aws_route_table" "private" {\n  count  = 2\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block     = "0.0.0.0/0"\n    nat_gateway_id = aws_nat_gateway.main[count.index].id\n  }\n\n  tags = {\n    Name = "${var.project_name}-private-rt-${count.index + 1}"\n  }\n}\n\n# \ub77c\uc6b0\ud305 \ud14c\uc774\ube14 \uc5f0\uacb0\nresource "aws_route_table_association" "public" {\n  count          = 2\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\nresource "aws_route_table_association" "private" {\n  count          = 2\n  subnet_id      = aws_subnet.private[count.index].id\n  route_table_id = aws_route_table.private[count.index].id\n}\n\n# \ubcf4\uc548 \uadf8\ub8f9\nresource "aws_security_group" "alb" {\n  name        = "${var.project_name}-alb-sg"\n  description = "Security group for ALB"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n}\n\nresource "aws_security_group" "ecs" {\n  name        = "${var.project_name}-ecs-sg"\n  description = "Security group for ECS tasks"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port       = 3000\n    to_port         = 3000\n    protocol        = "tcp"\n    security_groups = [aws_security_group.alb.id]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n}\n\n# ALB\nresource "aws_lb" "main" {\n  name               = "${var.project_name}-alb"\n  internal           = false\n  load_balancer_type = "application"\n  security_groups    = [aws_security_group.alb.id]\n  subnets            = aws_subnet.public[*].id\n\n  enable_deletion_protection = true\n  enable_http2              = true\n\n  tags = {\n    Name = "${var.project_name}-alb"\n  }\n}\n\n# \ud0c0\uac9f \uadf8\ub8f9\nresource "aws_lb_target_group" "app" {\n  name        = "${var.project_name}-tg"\n  port        = 3000\n  protocol    = "HTTP"\n  vpc_id      = aws_vpc.main.id\n  target_type = "ip"\n\n  health_check {\n    path                = "/health"\n    healthy_threshold   = 2\n    unhealthy_threshold = 10\n    timeout             = 5\n    interval            = 30\n    matcher             = "200"\n  }\n\n  deregistration_delay = 30\n}\n\n# \ub9ac\uc2a4\ub108\nresource "aws_lb_listener" "http" {\n  load_balancer_arn = aws_lb.main.arn\n  port              = 80\n  protocol          = "HTTP"\n\n  default_action {\n    type = "redirect"\n\n    redirect {\n      port        = "443"\n      protocol    = "HTTPS"\n      status_code = "HTTP_301"\n    }\n  }\n}\n\nresource "aws_lb_listener" "https" {\n  load_balancer_arn = aws_lb.main.arn\n  port              = 443\n  protocol          = "HTTPS"\n  ssl_policy        = "ELBSecurityPolicy-TLS-1-2-2017-01"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = "forward"\n    target_group_arn = aws_lb_target_group.app.arn\n  }\n}\n\n# ECS \ud074\ub7ec\uc2a4\ud130\nresource "aws_ecs_cluster" "main" {\n  name = "${var.project_name}-cluster"\n\n  setting {\n    name  = "containerInsights"\n    value = "enabled"\n  }\n}\n\n# ECS \ud0dc\uc2a4\ud06c \uc815\uc758\nresource "aws_ecs_task_definition" "app" {\n  family                   = var.project_name\n  network_mode             = "awsvpc"\n  requires_compatibilities = ["FARGATE"]\n  cpu                      = "512"\n  memory                   = "1024"\n  execution_role_arn       = aws_iam_role.ecs_execution.arn\n  task_role_arn            = aws_iam_role.ecs_task.arn\n\n  container_definitions = jsonencode([\n    {\n      name      = var.project_name\n      image     = "${var.ecr_repository_url}:latest"\n      essential = true\n\n      portMappings = [\n        {\n          containerPort = 3000\n          protocol      = "tcp"\n        }\n      ]\n\n      environment = [\n        {\n          name  = "NODE_ENV"\n          value = "production"\n        }\n      ]\n\n      secrets = [\n        {\n          name      = "DATABASE_URL"\n          valueFrom = var.database_url_secret_arn\n        }\n      ]\n\n      logConfiguration = {\n        logDriver = "awslogs"\n        options = {\n          "awslogs-group"         = "/ecs/${var.project_name}"\n          "awslogs-region"        = var.aws_region\n          "awslogs-stream-prefix" = "ecs"\n        }\n      }\n    }\n  ])\n}\n\n# ECS \uc11c\ube44\uc2a4\nresource "aws_ecs_service" "app" {\n  name            = "${var.project_name}-service"\n  cluster         = aws_ecs_cluster.main.id\n  task_definition = aws_ecs_task_definition.app.arn\n  desired_count   = 2\n  launch_type     = "FARGATE"\n\n  network_configuration {\n    subnets          = aws_subnet.private[*].id\n    security_groups  = [aws_security_group.ecs.id]\n    assign_public_ip = false\n  }\n\n  load_balancer {\n    target_group_arn = aws_lb_target_group.app.arn\n    container_name   = var.project_name\n    container_port   = 3000\n  }\n\n  deployment_configuration {\n    minimum_healthy_percent = 100\n    maximum_percent         = 200\n\n    deployment_circuit_breaker {\n      enable   = true\n      rollback = true\n    }\n  }\n\n  depends_on = [aws_lb_listener.https]\n}\n\n# Auto Scaling\nresource "aws_appautoscaling_target" "ecs" {\n  max_capacity       = 10\n  min_capacity       = 2\n  resource_id        = "service/${aws_ecs_cluster.main.name}/${aws_ecs_service.app.name}"\n  scalable_dimension = "ecs:service:DesiredCount"\n  service_namespace  = "ecs"\n}\n\nresource "aws_appautoscaling_policy" "cpu" {\n  name               = "${var.project_name}-cpu-scaling"\n  policy_type        = "TargetTrackingScaling"\n  resource_id        = aws_appautoscaling_target.ecs.resource_id\n  scalable_dimension = aws_appautoscaling_target.ecs.scalable_dimension\n  service_namespace  = aws_appautoscaling_target.ecs.service_namespace\n\n  target_tracking_scaling_policy_configuration {\n    predefined_metric_specification {\n      predefined_metric_type = "ECSServiceAverageCPUUtilization"\n    }\n    target_value = 70.0\n  }\n}\n\n# CloudWatch \ub85c\uadf8 \uadf8\ub8f9\nresource "aws_cloudwatch_log_group" "app" {\n  name              = "/ecs/${var.project_name}"\n  retention_in_days = 7\n}\n\n# IAM \uc5ed\ud560\nresource "aws_iam_role" "ecs_execution" {\n  name = "${var.project_name}-ecs-execution-role"\n\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Effect = "Allow"\n        Principal = {\n          Service = "ecs-tasks.amazonaws.com"\n        }\n      }\n    ]\n  })\n}\n\nresource "aws_iam_role_policy_attachment" "ecs_execution" {\n  role       = aws_iam_role.ecs_execution.name\n  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"\n}\n\nresource "aws_iam_role" "ecs_task" {\n  name = "${var.project_name}-ecs-task-role"\n\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Effect = "Allow"\n        Principal = {\n          Service = "ecs-tasks.amazonaws.com"\n        }\n      }\n    ]\n  })\n}\n\n# \ucd9c\ub825\noutput "alb_dns_name" {\n  value = aws_lb.main.dns_name\n}\n\noutput "ecs_cluster_name" {\n  value = aws_ecs_cluster.main.name\n}\n\noutput "ecs_service_name" {\n  value = aws_ecs_service.app.name\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"149-\ubb34\uc911\ub2e8-\ubc30\ud3ec",children:"14.9 \ubb34\uc911\ub2e8 \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.h3,{id:"blue-green-\ubc30\ud3ec-\uc2a4\ud06c\ub9bd\ud2b8",children:"Blue-Green \ubc30\ud3ec \uc2a4\ud06c\ub9bd\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# scripts/blue-green-deploy.sh\n#!/bin/bash\n\nset -e\n\n# \uc0c9\uc0c1 \uc815\uc758\nGREEN=\'\\033[0;32m\'\nBLUE=\'\\033[0;34m\'\nRED=\'\\033[0;31m\'\nNC=\'\\033[0m\'\n\n# \uc124\uc815\nBLUE_PORT=3000\nGREEN_PORT=3001\nNGINX_CONFIG="/etc/nginx/sites-available/myapp"\nHEALTH_CHECK_URL="http://localhost"\nMAX_RETRIES=30\nRETRY_INTERVAL=2\n\n# \ud604\uc7ac \ud65c\uc131 \ud658\uacbd \ud655\uc778\nget_active_env() {\n  if grep -q "proxy_pass http://localhost:$BLUE_PORT" $NGINX_CONFIG; then\n    echo "blue"\n  else\n    echo "green"\n  fi\n}\n\n# \ub300\uae30 \ud658\uacbd \ud3ec\ud2b8 \uac00\uc838\uc624\uae30\nget_standby_port() {\n  local active=$(get_active_env)\n  if [ "$active" = "blue" ]; then\n    echo $GREEN_PORT\n  else\n    echo $BLUE_PORT\n  fi\n}\n\n# \ud5ec\uc2a4\uccb4\ud06c\nhealth_check() {\n  local port=$1\n  local retries=0\n\n  echo "\ud5ec\uc2a4\uccb4\ud06c \uc2dc\uc791 (\ud3ec\ud2b8: $port)..."\n\n  while [ $retries -lt $MAX_RETRIES ]; do\n    if curl -sf "$HEALTH_CHECK_URL:$port/health" > /dev/null; then\n      echo -e "${GREEN}\u2713 \ud5ec\uc2a4\uccb4\ud06c \uc131\uacf5${NC}"\n      return 0\n    fi\n\n    retries=$((retries + 1))\n    echo "\ud5ec\uc2a4\uccb4\ud06c \ub300\uae30 \uc911... ($retries/$MAX_RETRIES)"\n    sleep $RETRY_INTERVAL\n  done\n\n  echo -e "${RED}\u2717 \ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328${NC}"\n  return 1\n}\n\n# \uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8\nsmoke_test() {\n  local port=$1\n\n  echo "\uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8 \uc2dc\uc791..."\n\n  # API \ud14c\uc2a4\ud2b8\n  if ! curl -sf "$HEALTH_CHECK_URL:$port/api/version" > /dev/null; then\n    echo -e "${RED}\u2717 API \ud14c\uc2a4\ud2b8 \uc2e4\ud328${NC}"\n    return 1\n  fi\n\n  # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\n  if ! curl -sf "$HEALTH_CHECK_URL:$port/health/db" > /dev/null; then\n    echo -e "${RED}\u2717 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc2e4\ud328${NC}"\n    return 1\n  fi\n\n  echo -e "${GREEN}\u2713 \uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8 \uc131\uacf5${NC}"\n  return 0\n}\n\n# Nginx \uc124\uc815 \uc804\ud658\nswitch_nginx() {\n  local new_port=$1\n  local active=$(get_active_env)\n  local new_env\n\n  if [ "$active" = "blue" ]; then\n    new_env="green"\n  else\n    new_env="blue"\n  fi\n\n  echo "Nginx \uc124\uc815 \uc804\ud658 \uc911 (${active} -> ${new_env})..."\n\n  # \uc124\uc815 \ubc31\uc5c5\n  cp $NGINX_CONFIG "${NGINX_CONFIG}.backup"\n\n  # \ud3ec\ud2b8 \ubcc0\uacbd\n  sed -i "s/proxy_pass http:\\/\\/localhost:[0-9]\\+/proxy_pass http:\\/\\/localhost:$new_port/" $NGINX_CONFIG\n\n  # \uc124\uc815 \ud14c\uc2a4\ud2b8\n  if ! nginx -t; then\n    echo -e "${RED}\u2717 Nginx \uc124\uc815 \uac80\uc99d \uc2e4\ud328${NC}"\n    cp "${NGINX_CONFIG}.backup" $NGINX_CONFIG\n    return 1\n  fi\n\n  # Nginx \ub9ac\ub85c\ub4dc\n  nginx -s reload\n\n  echo -e "${GREEN}\u2713 Nginx \uc804\ud658 \uc644\ub8cc${NC}"\n  return 0\n}\n\n# \uc774\uc804 \ud658\uacbd \uc885\ub8cc\nstop_old_env() {\n  local port=$1\n  local env\n\n  if [ $port -eq $BLUE_PORT ]; then\n    env="blue"\n  else\n    env="green"\n  fi\n\n  echo "\uc774\uc804 \ud658\uacbd \uc885\ub8cc \uc911 ($env)..."\n\n  docker-compose -f docker-compose.yml -f docker-compose.$env.yml down\n\n  echo -e "${GREEN}\u2713 \uc774\uc804 \ud658\uacbd \uc885\ub8cc \uc644\ub8cc${NC}"\n}\n\n# \uba54\uc778 \ubc30\ud3ec \ud504\ub85c\uc138\uc2a4\ndeploy() {\n  local active_env=$(get_active_env)\n  local standby_port=$(get_standby_port)\n  local standby_env\n\n  if [ "$active_env" = "blue" ]; then\n    standby_env="green"\n  else\n    standby_env="blue"\n  fi\n\n  echo "=== Blue-Green \ubc30\ud3ec \uc2dc\uc791 ==="\n  echo "\ud65c\uc131 \ud658\uacbd: $active_env"\n  echo "\ub300\uae30 \ud658\uacbd: $standby_env (\ud3ec\ud2b8: $standby_port)"\n  echo ""\n\n  # 1. \ub300\uae30 \ud658\uacbd \ubc30\ud3ec\n  echo -e "${BLUE}[1/5] \ub300\uae30 \ud658\uacbd \ubc30\ud3ec \uc911...${NC}"\n  docker-compose -f docker-compose.yml -f docker-compose.$standby_env.yml up -d\n\n  # 2. \ud5ec\uc2a4\uccb4\ud06c\n  echo -e "${BLUE}[2/5] \ud5ec\uc2a4\uccb4\ud06c \uc911...${NC}"\n  if ! health_check $standby_port; then\n    echo -e "${RED}\ubc30\ud3ec \uc2e4\ud328: \ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328${NC}"\n    docker-compose -f docker-compose.yml -f docker-compose.$standby_env.yml down\n    exit 1\n  fi\n\n  # 3. \uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8\n  echo -e "${BLUE}[3/5] \uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8 \uc911...${NC}"\n  if ! smoke_test $standby_port; then\n    echo -e "${RED}\ubc30\ud3ec \uc2e4\ud328: \uc2a4\ubaa8\ud06c \ud14c\uc2a4\ud2b8 \uc2e4\ud328${NC}"\n    docker-compose -f docker-compose.yml -f docker-compose.$standby_env.yml down\n    exit 1\n  fi\n\n  # 4. \ud2b8\ub798\ud53d \uc804\ud658\n  echo -e "${BLUE}[4/5] \ud2b8\ub798\ud53d \uc804\ud658 \uc911...${NC}"\n  if ! switch_nginx $standby_port; then\n    echo -e "${RED}\ubc30\ud3ec \uc2e4\ud328: Nginx \uc804\ud658 \uc2e4\ud328${NC}"\n    exit 1\n  fi\n\n  # \uc548\uc815\ud654 \ub300\uae30\n  echo "\uc548\uc815\ud654 \ub300\uae30 \uc911 (30\ucd08)..."\n  sleep 30\n\n  # 5. \uc774\uc804 \ud658\uacbd \uc885\ub8cc\n  echo -e "${BLUE}[5/5] \uc774\uc804 \ud658\uacbd \uc885\ub8cc \uc911...${NC}"\n  if [ "$active_env" = "blue" ]; then\n    stop_old_env $BLUE_PORT\n  else\n    stop_old_env $GREEN_PORT\n  fi\n\n  echo ""\n  echo -e "${GREEN}=== \ubc30\ud3ec \uc644\ub8cc ===${NC}"\n  echo "\uc0c8 \ud65c\uc131 \ud658\uacbd: $standby_env"\n}\n\n# \ub864\ubc31\nrollback() {\n  local active_env=$(get_active_env)\n  local old_port\n\n  if [ "$active_env" = "blue" ]; then\n    old_port=$GREEN_PORT\n  else\n    old_port=$BLUE_PORT\n  fi\n\n  echo "=== \ub864\ubc31 \uc2dc\uc791 ==="\n\n  if ! switch_nginx $old_port; then\n    echo -e "${RED}\ub864\ubc31 \uc2e4\ud328${NC}"\n    exit 1\n  fi\n\n  echo -e "${GREEN}=== \ub864\ubc31 \uc644\ub8cc ===${NC}"\n}\n\n# CLI\ncase "$1" in\n  deploy)\n    deploy\n    ;;\n  rollback)\n    rollback\n    ;;\n  status)\n    echo "\ud65c\uc131 \ud658\uacbd: $(get_active_env)"\n    ;;\n  *)\n    echo "\uc0ac\uc6a9\ubc95: $0 {deploy|rollback|status}"\n    exit 1\n    ;;\nesac\n'})}),"\n",(0,s.jsx)(e.h3,{id:"canary-\ubc30\ud3ec",children:"Canary \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// scripts/canary-deploy.ts\nimport axios from 'axios';\n\ninterface CanaryConfig {\n  initialWeight: number;  // \ucd08\uae30 \uce74\ub098\ub9ac \ud2b8\ub798\ud53d \ube44\uc728 (%)\n  increments: number[];   // \uc810\uc9c4\uc801 \uc99d\uac00 \ub2e8\uacc4\n  healthCheckInterval: number;  // \ud5ec\uc2a4\uccb4\ud06c \uac04\uaca9 (\ucd08)\n  errorThreshold: number;  // \uc5d0\ub7ec\uc728 \uc784\uacc4\uac12 (%)\n}\n\nexport class CanaryDeployer {\n  private config: CanaryConfig;\n  private metrics: {\n    requests: number;\n    errors: number;\n    latency: number[];\n  } = {\n    requests: 0,\n    errors: 0,\n    latency: [],\n  };\n\n  constructor(config: CanaryConfig) {\n    this.config = config;\n  }\n\n  // \ud2b8\ub798\ud53d \uac00\uc911\uce58 \uc5c5\ub370\uc774\ud2b8\n  async updateTrafficWeight(weight: number): Promise<void> {\n    console.log(`\uce74\ub098\ub9ac \ud2b8\ub798\ud53d \ube44\uc728: ${weight}%`);\n\n    // Nginx \uc5c5\uc2a4\ud2b8\ub9bc \uac00\uc911\uce58 \ubcc0\uacbd\n    const nginxConfig = `\nupstream app_backend {\n    server app-stable:3000 weight=${100 - weight};\n    server app-canary:3000 weight=${weight};\n}\n    `;\n\n    // \uc124\uc815 \uc801\uc6a9 \ub85c\uc9c1\n    // ... (\uc2e4\uc81c \uad6c\ud604 \ud544\uc694)\n  }\n\n  // \uba54\ud2b8\ub9ad \uc218\uc9d1\n  async collectMetrics(duration: number): Promise<void> {\n    console.log(`\uba54\ud2b8\ub9ad \uc218\uc9d1 \uc911 (${duration}\ucd08)...`);\n\n    const startTime = Date.now();\n    this.metrics = { requests: 0, errors: 0, latency: [] };\n\n    while (Date.now() - startTime < duration * 1000) {\n      try {\n        const start = Date.now();\n        const response = await axios.get('http://localhost/api/health');\n        const latency = Date.now() - start;\n\n        this.metrics.requests++;\n        this.metrics.latency.push(latency);\n\n        if (response.status >= 400) {\n          this.metrics.errors++;\n        }\n      } catch (error) {\n        this.metrics.errors++;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n\n  // \uba54\ud2b8\ub9ad \ubd84\uc11d\n  analyzeMetrics(): {\n    errorRate: number;\n    avgLatency: number;\n    p95Latency: number;\n  } {\n    const errorRate = (this.metrics.errors / this.metrics.requests) * 100;\n    const avgLatency = this.metrics.latency.reduce((a, b) => a + b, 0) / this.metrics.latency.length;\n\n    const sorted = [...this.metrics.latency].sort((a, b) => a - b);\n    const p95Index = Math.floor(sorted.length * 0.95);\n    const p95Latency = sorted[p95Index];\n\n    return { errorRate, avgLatency, p95Latency };\n  }\n\n  // \uce74\ub098\ub9ac \ubc30\ud3ec\n  async deploy(): Promise<void> {\n    console.log('=== \uce74\ub098\ub9ac \ubc30\ud3ec \uc2dc\uc791 ===');\n\n    try {\n      // \uce74\ub098\ub9ac \ud658\uacbd \uc2dc\uc791\n      console.log('\uce74\ub098\ub9ac \ud658\uacbd \uc2dc\uc791...');\n      // docker-compose up -d app-canary\n\n      const weights = [this.config.initialWeight, ...this.config.increments, 100];\n\n      for (const weight of weights) {\n        // \ud2b8\ub798\ud53d \uac00\uc911\uce58 \uc5c5\ub370\uc774\ud2b8\n        await this.updateTrafficWeight(weight);\n\n        // \uc548\uc815\ud654 \ub300\uae30\n        await new Promise(resolve => setTimeout(resolve, 10000));\n\n        // \uba54\ud2b8\ub9ad \uc218\uc9d1\n        await this.collectMetrics(this.config.healthCheckInterval);\n\n        // \uba54\ud2b8\ub9ad \ubd84\uc11d\n        const analysis = this.analyzeMetrics();\n        console.log('\uba54\ud2b8\ub9ad \ubd84\uc11d:', analysis);\n\n        // \uc5d0\ub7ec\uc728 \ud655\uc778\n        if (analysis.errorRate > this.config.errorThreshold) {\n          throw new Error(\n            `\uc5d0\ub7ec\uc728\uc774 \uc784\uacc4\uac12\uc744 \ucd08\uacfc\ud588\uc2b5\ub2c8\ub2e4: ${analysis.errorRate.toFixed(2)}% > ${this.config.errorThreshold}%`\n          );\n        }\n\n        console.log(`\u2713 ${weight}% \ud2b8\ub798\ud53d \uc804\ud658 \uc131\uacf5`);\n      }\n\n      // \uc548\uc815 \ud658\uacbd \uc885\ub8cc\n      console.log('\uc774\uc804 \uc548\uc815 \ud658\uacbd \uc885\ub8cc...');\n      // docker-compose stop app-stable\n\n      console.log('=== \uce74\ub098\ub9ac \ubc30\ud3ec \uc644\ub8cc ===');\n    } catch (error) {\n      console.error('=== \uce74\ub098\ub9ac \ubc30\ud3ec \uc2e4\ud328 ===');\n      console.error(error);\n\n      // \ub864\ubc31\n      console.log('\ub864\ubc31 \uc2dc\uc791...');\n      await this.updateTrafficWeight(0);\n      // docker-compose stop app-canary\n\n      throw error;\n    }\n  }\n}\n\n// \uc0ac\uc6a9\nconst deployer = new CanaryDeployer({\n  initialWeight: 10,\n  increments: [25, 50, 75],\n  healthCheckInterval: 60,\n  errorThreshold: 1,\n});\n\ndeployer.deploy().catch(error => {\n  process.exit(1);\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"1410-\ub864\ubc31-\uc804\ub7b5",children:"14.10 \ub864\ubc31 \uc804\ub7b5"}),"\n",(0,s.jsx)(e.h3,{id:"\uc790\ub3d9-\ub864\ubc31-\uc2dc\uc2a4\ud15c",children:"\uc790\ub3d9 \ub864\ubc31 \uc2dc\uc2a4\ud15c"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// scripts/auto-rollback.ts\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\ninterface RollbackConfig {\n  healthCheckUrl: string;\n  healthCheckInterval: number;  // \ucd08\n  healthCheckRetries: number;\n  errorRateThreshold: number;  // %\n  latencyThreshold: number;  // ms\n  monitoringDuration: number;  // \ucd08\n}\n\nexport class AutoRollback {\n  private config: RollbackConfig;\n  private deploymentVersion: string;\n  private previousVersion: string;\n\n  constructor(config: RollbackConfig) {\n    this.config = config;\n    this.deploymentVersion = '';\n    this.previousVersion = '';\n  }\n\n  // \ud604\uc7ac \ubc84\uc804 \uc800\uc7a5\n  async saveCurrentVersion(): Promise<void> {\n    const { stdout } = await execAsync('git rev-parse HEAD');\n    this.previousVersion = stdout.trim();\n    console.log(`\uc774\uc804 \ubc84\uc804 \uc800\uc7a5: ${this.previousVersion}`);\n  }\n\n  // \uc0c8 \ubc84\uc804 \ubc30\ud3ec\n  async deploy(version: string): Promise<void> {\n    this.deploymentVersion = version;\n    console.log(`\ubc30\ud3ec \uc2dc\uc791: ${version}`);\n\n    await execAsync(`docker pull myapp:${version}`);\n    await execAsync('docker-compose up -d');\n  }\n\n  // \ud5ec\uc2a4\uccb4\ud06c\n  async healthCheck(): Promise<boolean> {\n    let retries = 0;\n\n    while (retries < this.config.healthCheckRetries) {\n      try {\n        const response = await fetch(this.config.healthCheckUrl);\n        if (response.ok) {\n          return true;\n        }\n      } catch (error) {\n        console.log(`\ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328 (${retries + 1}/${this.config.healthCheckRetries})`);\n      }\n\n      retries++;\n      await new Promise(resolve =>\n        setTimeout(resolve, this.config.healthCheckInterval * 1000)\n      );\n    }\n\n    return false;\n  }\n\n  // \uba54\ud2b8\ub9ad \ubaa8\ub2c8\ud130\ub9c1\n  async monitorMetrics(): Promise<{\n    errorRate: number;\n    avgLatency: number;\n    healthy: boolean;\n  }> {\n    console.log('\uba54\ud2b8\ub9ad \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc791...');\n\n    let totalRequests = 0;\n    let errorCount = 0;\n    let latencies: number[] = [];\n\n    const startTime = Date.now();\n    const endTime = startTime + (this.config.monitoringDuration * 1000);\n\n    while (Date.now() < endTime) {\n      try {\n        const start = Date.now();\n        const response = await fetch(this.config.healthCheckUrl);\n        const latency = Date.now() - start;\n\n        totalRequests++;\n        latencies.push(latency);\n\n        if (!response.ok) {\n          errorCount++;\n        }\n      } catch (error) {\n        errorCount++;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n\n    const errorRate = (errorCount / totalRequests) * 100;\n    const avgLatency = latencies.reduce((a, b) => a + b, 0) / latencies.length;\n\n    const healthy =\n      errorRate <= this.config.errorRateThreshold &&\n      avgLatency <= this.config.latencyThreshold;\n\n    return { errorRate, avgLatency, healthy };\n  }\n\n  // \ub864\ubc31 \uc2e4\ud589\n  async rollback(): Promise<void> {\n    console.log('=== \uc790\ub3d9 \ub864\ubc31 \uc2dc\uc791 ===');\n    console.log(`\ub864\ubc31 \ub300\uc0c1: ${this.deploymentVersion} -> ${this.previousVersion}`);\n\n    try {\n      // \uc774\uc804 \ubc84\uc804\uc73c\ub85c \ubcf5\uc6d0\n      await execAsync(`docker pull myapp:${this.previousVersion}`);\n      await execAsync('docker-compose up -d');\n\n      // \ud5ec\uc2a4\uccb4\ud06c\n      const healthy = await this.healthCheck();\n\n      if (!healthy) {\n        throw new Error('\ub864\ubc31 \ud6c4 \ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328');\n      }\n\n      console.log('=== \ub864\ubc31 \uc644\ub8cc ===');\n    } catch (error) {\n      console.error('=== \ub864\ubc31 \uc2e4\ud328 ===');\n      throw error;\n    }\n  }\n\n  // \ubc30\ud3ec with \uc790\ub3d9 \ub864\ubc31\n  async deployWithAutoRollback(version: string): Promise<void> {\n    try {\n      // 1. \ud604\uc7ac \ubc84\uc804 \uc800\uc7a5\n      await this.saveCurrentVersion();\n\n      // 2. \uc0c8 \ubc84\uc804 \ubc30\ud3ec\n      await this.deploy(version);\n\n      // 3. \ud5ec\uc2a4\uccb4\ud06c\n      console.log('\ud5ec\uc2a4\uccb4\ud06c \uc2dc\uc791...');\n      const healthy = await this.healthCheck();\n\n      if (!healthy) {\n        throw new Error('\ud5ec\uc2a4\uccb4\ud06c \uc2e4\ud328');\n      }\n\n      // 4. \uba54\ud2b8\ub9ad \ubaa8\ub2c8\ud130\ub9c1\n      const metrics = await this.monitorMetrics();\n      console.log('\uba54\ud2b8\ub9ad:', metrics);\n\n      if (!metrics.healthy) {\n        throw new Error(\n          `\uba54\ud2b8\ub9ad \uc784\uacc4\uac12 \ucd08\uacfc - \uc5d0\ub7ec\uc728: ${metrics.errorRate.toFixed(2)}%, ` +\n          `\ud3c9\uade0 \uc9c0\uc5f0\uc2dc\uac04: ${metrics.avgLatency.toFixed(0)}ms`\n        );\n      }\n\n      console.log('=== \ubc30\ud3ec \uc131\uacf5 ===');\n    } catch (error) {\n      console.error('\ubc30\ud3ec \uc2e4\ud328:', error);\n      console.log('\uc790\ub3d9 \ub864\ubc31 \uc2dc\uc791...');\n\n      await this.rollback();\n    }\n  }\n}\n\n// \uc0ac\uc6a9\nconst rollback = new AutoRollback({\n  healthCheckUrl: 'http://localhost:3000/health',\n  healthCheckInterval: 5,\n  healthCheckRetries: 10,\n  errorRateThreshold: 1,\n  latencyThreshold: 500,\n  monitoringDuration: 300,  // 5\ubd84\n});\n\nconst version = process.argv[2] || 'latest';\nrollback.deployWithAutoRollback(version);\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ub9c8\uc774\uadf8\ub808\uc774\uc158-\ub864\ubc31",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// scripts/db-rollback.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport class DatabaseRollback {\n  // \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ubc31\uc5c5\n  async backupBeforeMigration(): Promise<string> {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const backupFile = `backup_${timestamp}.sql`;\n\n    console.log(`\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5 \uc0dd\uc131: ${backupFile}`);\n\n    // PostgreSQL \ubc31\uc5c5\n    await execAsync(\n      `pg_dump ${process.env.DATABASE_URL} > backups/${backupFile}`\n    );\n\n    return backupFile;\n  }\n\n  // \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31\n  async rollbackMigration(steps: number = 1): Promise<void> {\n    console.log(`${steps}\ub2e8\uacc4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31...`);\n\n    try {\n      // Prisma migrate \ub864\ubc31 (\uac1c\ubc1c \ud658\uacbd)\n      if (process.env.NODE_ENV === 'development') {\n        await execAsync(`npx prisma migrate dev --skip-seed`);\n\n        for (let i = 0; i < steps; i++) {\n          await execAsync(`npx prisma migrate resolve --rolled-back`);\n        }\n      } else {\n        // \ud504\ub85c\ub355\uc158: \uc9c1\uc811 \ub864\ubc31 \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589\n        await this.executeRollbackScript(steps);\n      }\n\n      console.log('\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31 \uc644\ub8cc');\n    } catch (error) {\n      console.error('\ub9c8\uc774\uadf8\ub808\uc774\uc158 \ub864\ubc31 \uc2e4\ud328:', error);\n      throw error;\n    }\n  }\n\n  // \ub864\ubc31 \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589\n  private async executeRollbackScript(steps: number): Promise<void> {\n    // \ub864\ubc31 SQL \uc2e4\ud589\n    const rollbackScripts = await this.getRollbackScripts(steps);\n\n    for (const script of rollbackScripts) {\n      console.log(`\ub864\ubc31 \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589: ${script}`);\n      await prisma.$executeRawUnsafe(script);\n    }\n  }\n\n  // \ub864\ubc31 \uc2a4\ud06c\ub9bd\ud2b8 \uc870\ud68c\n  private async getRollbackScripts(steps: number): Promise<string[]> {\n    // _prisma_migrations \ud14c\uc774\ube14\uc5d0\uc11c \ucd5c\uadfc \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc870\ud68c\n    const migrations = await prisma.$queryRaw<Array<{\n      migration_name: string;\n      applied_steps_count: number;\n    }>>`\n      SELECT migration_name, applied_steps_count\n      FROM _prisma_migrations\n      ORDER BY finished_at DESC\n      LIMIT ${steps}\n    `;\n\n    // \ub864\ubc31 \uc2a4\ud06c\ub9bd\ud2b8 \ub85c\ub4dc\n    const scripts: string[] = [];\n    for (const migration of migrations) {\n      const rollbackPath = `prisma/migrations/${migration.migration_name}/rollback.sql`;\n      // \ud30c\uc77c\uc5d0\uc11c \uc2a4\ud06c\ub9bd\ud2b8 \uc77d\uae30\n      // scripts.push(await fs.readFile(rollbackPath, 'utf-8'));\n    }\n\n    return scripts;\n  }\n\n  // \ubc31\uc5c5\uc5d0\uc11c \ubcf5\uc6d0\n  async restoreFromBackup(backupFile: string): Promise<void> {\n    console.log(`\ubc31\uc5c5\uc5d0\uc11c \ubcf5\uc6d0: ${backupFile}`);\n\n    try {\n      await execAsync(\n        `psql ${process.env.DATABASE_URL} < backups/${backupFile}`\n      );\n\n      console.log('\ubcf5\uc6d0 \uc644\ub8cc');\n    } catch (error) {\n      console.error('\ubcf5\uc6d0 \uc2e4\ud328:', error);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"1411-\ubc30\ud3ec-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"14.11 \ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\ud3ec-\uc804-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ubc30\ud3ec \uc804 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markdown",children:"# \ubc30\ud3ec \uc804 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\n\n## \ucf54\ub4dc \ud488\uc9c8\n- [ ] \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \ud1b5\uacfc (unit, integration, e2e)\n- [ ] \ucf54\ub4dc \ub9ac\ubdf0 \uc644\ub8cc\n- [ ] Linting \ubc0f \ud3ec\ub9f7\ud305 \ud1b5\uacfc\n- [ ] TypeScript \ud0c0\uc785 \uac80\uc0ac \ud1b5\uacfc\n- [ ] \ubcf4\uc548 \uc2a4\uce94 \ud1b5\uacfc (Snyk, npm audit)\n\n## \ub370\uc774\ud130\ubca0\uc774\uc2a4\n- [ ] \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc2a4\ud06c\ub9bd\ud2b8 \uc900\ube44\n- [ ] \ub864\ubc31 \uc2a4\ud06c\ub9bd\ud2b8 \uc900\ube44\n- [ ] \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc31\uc5c5 \uc644\ub8cc\n- [ ] \ub9c8\uc774\uadf8\ub808\uc774\uc158 \ud14c\uc2a4\ud2b8 (\uc2a4\ud14c\uc774\uc9d5)\n\n## \ud658\uacbd \uc124\uc815\n- [ ] \ud658\uacbd \ubcc0\uc218 \ud655\uc778\n- [ ] \uc2dc\ud06c\ub9bf \uc5c5\ub370\uc774\ud2b8\n- [ ] SSL \uc778\uc99d\uc11c \uc720\ud6a8\uc131 \ud655\uc778\n- [ ] DNS \uc124\uc815 \ud655\uc778\n\n## \uc758\uc874\uc131\n- [ ] package.json \ubc84\uc804 \uace0\uc815\n- [ ] Docker \uc774\ubbf8\uc9c0 \ube4c\ub4dc \uc131\uacf5\n- [ ] \ucde8\uc57d\uc810 \uc5c6\uc74c \ud655\uc778\n\n## \ubb38\uc11c\n- [ ] \ubcc0\uacbd \uc0ac\ud56d \ubb38\uc11c\ud654\n- [ ] API \ubb38\uc11c \uc5c5\ub370\uc774\ud2b8\n- [ ] \ubc30\ud3ec \ub178\ud2b8 \uc791\uc131\n\n## \ubaa8\ub2c8\ud130\ub9c1\n- [ ] \ub85c\uadf8 \uc218\uc9d1 \uc124\uc815\n- [ ] \uba54\ud2b8\ub9ad \ub300\uc2dc\ubcf4\ub4dc \ud655\uc778\n- [ ] \uc54c\ub9bc \uc124\uc815 \ud655\uc778\n\n## \ub864\ubc31 \uacc4\ud68d\n- [ ] \ub864\ubc31 \uc808\ucc28 \ubb38\uc11c\ud654\n- [ ] \uc774\uc804 \ubc84\uc804 \ubc31\uc5c5\n- [ ] \ub864\ubc31 \ud14c\uc2a4\ud2b8 (\uc2a4\ud14c\uc774\uc9d5)\n\n## \ud300 \uc900\ube44\n- [ ] \ubc30\ud3ec \uc77c\uc815 \uacf5\uc9c0\n- [ ] \ub2f4\ub2f9\uc790 \ubc30\uc815\n- [ ] \ucee4\ubba4\ub2c8\ucf00\uc774\uc158 \ucc44\ub110 \ud655\uc778\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\ud3ec-\ud6c4-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ubc30\ud3ec \ud6c4 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markdown",children:"# \ubc30\ud3ec \ud6c4 \uccb4\ud06c\ub9ac\uc2a4\ud2b8\n\n## \uc989\uc2dc \ud655\uc778 (5\ubd84 \uc774\ub0b4)\n- [ ] \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2dc\uc791 \ud655\uc778\n- [ ] \ud5ec\uc2a4\uccb4\ud06c \ud1b5\uacfc\n- [ ] \uc8fc\uc694 \ud398\uc774\uc9c0 \uc811\uadfc \uac00\ub2a5\n- [ ] API \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc815\uc0c1 \uc791\ub3d9\n\n## \ub2e8\uae30 \ubaa8\ub2c8\ud130\ub9c1 (30\ubd84)\n- [ ] \uc5d0\ub7ec\uc728 \uc815\uc0c1 \ubc94\uc704\n- [ ] \uc751\ub2f5 \uc2dc\uac04 \uc815\uc0c1 \ubc94\uc704\n- [ ] CPU/\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub960 \uc815\uc0c1\n- [ ] \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc815\uc0c1\n\n## \uae30\ub2a5 \uac80\uc99d\n- [ ] \uc0ac\uc6a9\uc790 \uc778\uc99d/\uc778\uac00\n- [ ] \uc8fc\uc694 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n- [ ] \uacb0\uc81c \uae30\ub2a5 (\uc788\ub294 \uacbd\uc6b0)\n- [ ] \uc678\ubd80 API \uc5f0\ub3d9\n\n## \uc131\ub2a5 \ud655\uc778\n- [ ] \ud398\uc774\uc9c0 \ub85c\ub4dc \uc2dc\uac04\n- [ ] API \uc751\ub2f5 \uc2dc\uac04\n- [ ] \ub3d9\uc2dc \uc811\uc18d\uc790 \ucc98\ub9ac\n- [ ] \uce90\uc2dc \uc791\ub3d9 \ud655\uc778\n\n## \ub370\uc774\ud130 \ubb34\uacb0\uc131\n- [ ] \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc131\uacf5\n- [ ] \ub370\uc774\ud130 \uc190\uc2e4 \uc5c6\uc74c\n- [ ] \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \ub370\uc774\ud130 \uc815\uc0c1\n\n## \ubcf4\uc548\n- [ ] HTTPS \uc815\uc0c1 \uc791\ub3d9\n- [ ] \ubcf4\uc548 \ud5e4\ub354 \uc124\uc815 \ud655\uc778\n- [ ] \uc778\uc99d \ud1a0\ud070 \uc815\uc0c1 \uc791\ub3d9\n- [ ] Rate limiting \uc791\ub3d9\n\n## \ubb38\uc11c \ubc0f \ucee4\ubba4\ub2c8\ucf00\uc774\uc158\n- [ ] \ubc30\ud3ec \uc644\ub8cc \uacf5\uc9c0\n- [ ] \ub9b4\ub9ac\uc2a4 \ub178\ud2b8 \uac8c\uc2dc\n- [ ] \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc \uacf5\uc720\n"})}),"\n",(0,s.jsx)(e.h2,{id:"1412-\uc2e4\uc2b5",children:"14.12 \uc2e4\uc2b5"}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-1-docker-\ucee8\ud14c\uc774\ub108-\ubc30\ud3ec",children:"\uc2e4\uc2b5 1: Docker \ucee8\ud14c\uc774\ub108 \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# 1. \ud504\ub85c\uc81d\ud2b8 \uc900\ube44\nmkdir myapp-deploy\ncd myapp-deploy\n\n# 2. Dockerfile \uc791\uc131\ncat > Dockerfile << \'EOF\'\nFROM node:20-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nRUN npm run build\n\nFROM node:20-alpine\nWORKDIR /app\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY package*.json ./\nEXPOSE 3000\nCMD ["node", "dist/index.js"]\nEOF\n\n# 3. \ube4c\ub4dc\ndocker build -t myapp:v1 .\n\n# 4. \uc2e4\ud589\ndocker run -d -p 3000:3000 --name myapp myapp:v1\n\n# 5. \ud655\uc778\ncurl http://localhost:3000/health\n\n# 6. \ub85c\uadf8 \ud655\uc778\ndocker logs -f myapp\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-2-docker-compose\ub85c-\uc804\uccb4-\uc2a4\ud0dd-\ubc30\ud3ec",children:"\uc2e4\uc2b5 2: docker-compose\ub85c \uc804\uccb4 \uc2a4\ud0dd \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# 1. docker-compose.yml \uc791\uc131\ncat > docker-compose.yml << 'EOF'\nversion: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      DATABASE_URL: postgresql://postgres:password@db:5432/myapp\n      REDIS_URL: redis://redis:6379\n    depends_on:\n      - db\n      - redis\n\n  db:\n    image: postgres:16-alpine\n    environment:\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: myapp\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis-data:/data\n\nvolumes:\n  postgres-data:\n  redis-data:\nEOF\n\n# 2. \uc2e4\ud589\ndocker-compose up -d\n\n# 3. \ud655\uc778\ndocker-compose ps\ndocker-compose logs -f app\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-3-github-actions-cicd-\uc124\uc815",children:"\uc2e4\uc2b5 3: GitHub Actions CI/CD \uc124\uc815"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# .github/workflows/ci.yml\nname: CI/CD\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: \'20\'\n      - run: npm ci\n      - run: npm test\n      - run: npm run build\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build Docker image\n        run: docker build -t myapp:latest .\n      - name: Push to registry\n        run: |\n          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin\n          docker push myapp:latest\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-4-blue-green-\ubc30\ud3ec",children:"\uc2e4\uc2b5 4: Blue-Green \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# 1. docker-compose.blue.yml\ncat > docker-compose.blue.yml << 'EOF'\nversion: '3.8'\nservices:\n  app-blue:\n    image: myapp:v1\n    ports:\n      - \"3000:3000\"\n    environment:\n      APP_ENV: blue\nEOF\n\n# 2. docker-compose.green.yml\ncat > docker-compose.green.yml << 'EOF'\nversion: '3.8'\nservices:\n  app-green:\n    image: myapp:v2\n    ports:\n      - \"3001:3000\"\n    environment:\n      APP_ENV: green\nEOF\n\n# 3. Blue \ud658\uacbd \uc2dc\uc791\ndocker-compose -f docker-compose.blue.yml up -d\n\n# 4. Green \ud658\uacbd \ubc30\ud3ec\ndocker-compose -f docker-compose.green.yml up -d\n\n# 5. Green \ud658\uacbd \ud14c\uc2a4\ud2b8\ncurl http://localhost:3001/health\n\n# 6. Nginx \uc124\uc815 \uc804\ud658 (Blue \u2192 Green)\n# nginx.conf\uc5d0\uc11c proxy_pass\ub97c 3000 \u2192 3001\ub85c \ubcc0\uacbd\n\n# 7. Blue \ud658\uacbd \uc885\ub8cc\ndocker-compose -f docker-compose.blue.yml down\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\uc2e4\uc2b5-5-\ubaa8\ub2c8\ud130\ub9c1-\uc124\uc815",children:"\uc2e4\uc2b5 5: \ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# 1. Prometheus \uc124\uc815\ncat > prometheus.yml << 'EOF'\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'myapp'\n    static_configs:\n      - targets: ['app:3000']\nEOF\n\n# 2. docker-compose\uc5d0 \ucd94\uac00\ncat >> docker-compose.yml << 'EOF'\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n      - \"9090:9090\"\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: admin\nEOF\n\n# 3. \uc2e4\ud589\ndocker-compose up -d prometheus grafana\n\n# 4. Grafana \uc811\uc18d\n# http://localhost:3001 (admin/admin)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\uc815\ub9ac",children:"\uc815\ub9ac"}),"\n",(0,s.jsx)(e.h3,{id:"\uc8fc\uc694-\uac1c\ub150",children:"\uc8fc\uc694 \uac1c\ub150"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\ubc30\ud3ec \uc804\ub7b5"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Rolling, Blue-Green, Canary \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.li,{children:"\uac01 \uc804\ub7b5\uc758 \uc7a5\ub2e8\uc810\uacfc \uc0ac\uc6a9 \uc2dc\uae30"}),"\n",(0,s.jsx)(e.li,{children:"\ubb34\uc911\ub2e8 \ubc30\ud3ec \uad6c\ud604"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\ucee8\ud14c\uc774\ub108\ud654"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Docker multi-stage \ube4c\ub4dc"}),"\n",(0,s.jsx)(e.li,{children:"\uc774\ubbf8\uc9c0 \ucd5c\uc801\ud654 \ubc0f \ubcf4\uc548"}),"\n",(0,s.jsx)(e.li,{children:"docker-compose\ub85c \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"CI/CD"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"GitHub Actions \uc6cc\ud06c\ud50c\ub85c\uc6b0"}),"\n",(0,s.jsx)(e.li,{children:"\uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8 \ubc0f \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.li,{children:"\ubcf4\uc548 \uc2a4\uce94 \ud1b5\ud569"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\uc778\ud504\ub77c"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"AWS ECS/Fargate \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.li,{children:"Terraform\uc73c\ub85c IaC"}),"\n",(0,s.jsx)(e.li,{children:"\ub85c\ub4dc \ubc38\ub7f0\uc2f1 \ubc0f \uc624\ud1a0\uc2a4\ucf00\uc77c\ub9c1"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"\uc548\uc815\uc131"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\ud5ec\uc2a4\uccb4\ud06c \ubc0f \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,s.jsx)(e.li,{children:"\uc790\ub3d9 \ub864\ubc31 \uc2dc\uc2a4\ud15c"}),"\n",(0,s.jsx)(e.li,{children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uad00\ub9ac"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\ubc30\ud3ec \uc790\ub3d9\ud654 \uace0\ub3c4\ud654"}),"\n",(0,s.jsx)(e.li,{children:"\uba40\ud2f0 \ub9ac\uc804 \ubc30\ud3ec"}),"\n",(0,s.jsx)(e.li,{children:"Kubernetes \ub9c8\uc774\uadf8\ub808\uc774\uc158"}),"\n",(0,s.jsx)(e.li,{children:"\uc11c\ube44\uc2a4 \uba54\uc2dc \ub3c4\uc785"}),"\n",(0,s.jsx)(e.li,{children:"\uc7ac\ud574 \ubcf5\uad6c \uacc4\ud68d \uc218\ub9bd"}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>i});var r=t(6540);const s={},o=r.createContext(s);function a(n){const e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);