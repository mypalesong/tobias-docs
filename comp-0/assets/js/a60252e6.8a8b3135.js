"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2712],{2545:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"fastapi/examples/scenario-02-blog-api","title":"\uc2dc\ub098\ub9ac\uc624 2: \ube14\ub85c\uadf8 API","description":"JWT \uc778\uc99d\uacfc \uad8c\ud55c \uad00\ub9ac\uac00 \ud3ec\ud568\ub41c \ube14\ub85c\uadf8 API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-02-blog-api.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-02-blog-api","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-02-blog-api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-02-blog-api.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 1: To-Do API","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-01-todo-api"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 3: E-commerce API","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-03-ecommerce-api"}}');var r=s(4848),o=s(8453);const a={sidebar_position:3},i="\uc2dc\ub098\ub9ac\uc624 2: \ube14\ub85c\uadf8 API",d={},l=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"JWT \uc778\uc99d",id:"jwt-\uc778\uc99d",level:3},{value:"\ubcf4\ud638\ub41c \uc5d4\ub4dc\ud3ec\uc778\ud2b8",id:"\ubcf4\ud638\ub41c-\uc5d4\ub4dc\ud3ec\uc778\ud2b8",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-2-\ube14\ub85c\uadf8-api",children:"\uc2dc\ub098\ub9ac\uc624 2: \ube14\ub85c\uadf8 API"})}),"\n",(0,r.jsx)(n.p,{children:"JWT \uc778\uc99d\uacfc \uad8c\ud55c \uad00\ub9ac\uac00 \ud3ec\ud568\ub41c \ube14\ub85c\uadf8 API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 \uc0ac\uc6a9\uc790 \ud68c\uc6d0\uac00\uc785/\ub85c\uadf8\uc778 (JWT)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud3ec\uc2a4\ud2b8 CRUD (\uc791\uc131\uc790\ub9cc \uc218\uc815/\uc0ad\uc81c \uac00\ub2a5)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ub313\uae00 \uc791\uc131"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc88b\uc544\uc694 \uae30\ub2a5"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"blog-api/\n\u251c\u2500\u2500 main.py              # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 & API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\u251c\u2500\u2500 models.py            # SQLAlchemy \ubaa8\ub378 (User, Post, Comment)\n\u251c\u2500\u2500 schemas.py           # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 auth.py              # JWT \uc778\uc99d \ub85c\uc9c1\n\u251c\u2500\u2500 database.py          # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 utils.py             # \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 (\ube44\ubc00\ubc88\ud638 \ud574\uc2f1 \ub4f1)\n\u251c\u2500\u2500 requirements.txt     # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n\u2514\u2500\u2500 blog.db             # SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud30c\uc77c\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant C as Client\n    participant API as FastAPI\n    participant Auth as JWT Auth\n    participant DB as Database\n\n    Note over C,DB: 1. \ud68c\uc6d0\uac00\uc785\n    C->>API: POST /register<br/>{username, password}\n    API->>API: Hash password\n    API->>DB: INSERT INTO users\n    DB--\x3e>API: User created\n    API--\x3e>C: 201 Created\n\n    Note over C,DB: 2. \ub85c\uadf8\uc778\n    C->>API: POST /login<br/>{username, password}\n    API->>DB: SELECT user\n    DB--\x3e>API: User data\n    API->>API: Verify password\n    API->>Auth: Create JWT token\n    Auth--\x3e>API: Access token\n    API--\x3e>C: 200 OK<br/>{access_token}\n\n    Note over C,DB: 3. \ud3ec\uc2a4\ud2b8 \uc791\uc131 (\uc778\uc99d \ud544\uc694)\n    C->>API: POST /posts<br/>Authorization: Bearer {token}\n    API->>Auth: Verify token\n    Auth--\x3e>API: User info\n    API->>DB: INSERT INTO posts\n    DB--\x3e>API: Post created\n    API--\x3e>C: 201 Created\n\n    Note over C,DB: 4. \ud3ec\uc2a4\ud2b8 \uc0ad\uc81c (\uc791\uc131\uc790\ub9cc)\n    C->>API: DELETE /posts/{id}<br/>Authorization: Bearer {token}\n    API->>Auth: Verify token\n    Auth--\x3e>API: User info\n    API->>DB: SELECT post\n    DB--\x3e>API: Post data\n    API->>API: Check author_id == user_id\n    alt Authorized\n        API->>DB: DELETE post\n        DB--\x3e>API: Deleted\n        API--\x3e>C: 204 No Content\n    else Unauthorized\n        API--\x3e>C: 403 Forbidden\n    end\n\n    Note over C,DB: 5. \uc88b\uc544\uc694 \ud1a0\uae00\n    C->>API: POST /posts/{id}/like<br/>Authorization: Bearer {token}\n    API->>Auth: Verify token\n    Auth--\x3e>API: User info\n    API->>DB: Check if already liked\n    DB--\x3e>API: Like status\n    alt Already liked\n        API->>DB: Remove like\n    else Not liked\n        API->>DB: Add like\n    end\n    DB--\x3e>API: Updated\n    API--\x3e>C: 200 OK\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,r.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, ForeignKey, Table\nfrom sqlalchemy.orm import relationship\nfrom database import Base\n\npost_likes = Table(\n    "post_likes",\n    Base.metadata,\n    Column("user_id", Integer, ForeignKey("users.id")),\n    Column("post_id", Integer, ForeignKey("posts.id"))\n)\n\nclass User(Base):\n    __tablename__ = "users"\n    id = Column(Integer, primary_key=True)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    posts = relationship("Post", back_populates="author")\n\nclass Post(Base):\n    __tablename__ = "posts"\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    content = Column(String)\n    author_id = Column(Integer, ForeignKey("users.id"))\n    author = relationship("User", back_populates="posts")\n    likes = relationship("User", secondary=post_likes)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"jwt-\uc778\uc99d",children:"JWT \uc778\uc99d"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt, JWTError\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get("sub")\n        if username is None:\n            raise HTTPException(status_code=401)\n    except JWTError:\n        raise HTTPException(status_code=401)\n\n    user = get_user_by_username(username)\n    return user\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ubcf4\ud638\ub41c-\uc5d4\ub4dc\ud3ec\uc778\ud2b8",children:"\ubcf4\ud638\ub41c \uc5d4\ub4dc\ud3ec\uc778\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.post("/posts", response_model=PostResponse)\ndef create_post(\n    post: PostCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ud3ec\uc2a4\ud2b8 \uc791\uc131 (\uc778\uc99d \ud544\uc694)"""\n    db_post = Post(**post.dict(), author_id=current_user.id)\n    db.add(db_post)\n    db.commit()\n    return db_post\n\n@app.delete("/posts/{post_id}")\ndef delete_post(\n    post_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ud3ec\uc2a4\ud2b8 \uc0ad\uc81c (\uc791\uc131\uc790\ub9cc \uac00\ub2a5)"""\n    post = db.query(Post).filter(Post.id == post_id).first()\n\n    if post.author_id != current_user.id:\n        raise HTTPException(status_code=403, detail="Not authorized")\n\n    db.delete(post)\n    db.commit()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,r.jsx)(n.a,{href:"./scenario-03-ecommerce-api",children:"E-commerce API"})]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);