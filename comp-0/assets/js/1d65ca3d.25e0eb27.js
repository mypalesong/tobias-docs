"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[450],{1398:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"rabbitmq/advanced/performance","title":"Performance - \uc131\ub2a5 \ucd5c\uc801\ud654","description":"RabbitMQ\uc758 \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/advanced/performance.md","sourceDirName":"rabbitmq/advanced","slug":"/rabbitmq/advanced/performance","permalink":"/docs/rabbitmq/advanced/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/advanced/performance.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"rabbitmqSidebar","previous":{"title":"Monitoring - \ubaa8\ub2c8\ud130\ub9c1","permalink":"/docs/rabbitmq/advanced/monitoring"},"next":{"title":"Security - \ubcf4\uc548","permalink":"/docs/rabbitmq/advanced/security"}}');var t=s(4848),a=s(8453);const r={sidebar_position:4},c="Performance - \uc131\ub2a5 \ucd5c\uc801\ud654",l={},o=[{value:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c",id:"-\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"\ud83d\udcca \uc131\ub2a5 \uc9c0\ud45c",id:"-\uc131\ub2a5-\uc9c0\ud45c",level:2},{value:"\uc8fc\uc694 \uc131\ub2a5 \uba54\ud2b8\ub9ad",id:"\uc8fc\uc694-\uc131\ub2a5-\uba54\ud2b8\ub9ad",level:3},{value:"\ud83d\ude80 Producer \ucd5c\uc801\ud654",id:"-producer-\ucd5c\uc801\ud654",level:2},{value:"1. \ubc30\uce58 \ubc1c\ud589 (Batch Publishing)",id:"1-\ubc30\uce58-\ubc1c\ud589-batch-publishing",level:3},{value:"2. Publisher Confirms",id:"2-publisher-confirms",level:3},{value:"3. \uc5f0\uacb0 \ud480\ub9c1",id:"3-\uc5f0\uacb0-\ud480\ub9c1",level:3},{value:"\u26a1 Consumer \ucd5c\uc801\ud654",id:"-consumer-\ucd5c\uc801\ud654",level:2},{value:"1. Prefetch Count \uc870\uc815",id:"1-prefetch-count-\uc870\uc815",level:3},{value:"2. \uba40\ud2f0\uc2a4\ub808\ub4dc Consumer",id:"2-\uba40\ud2f0\uc2a4\ub808\ub4dc-consumer",level:3},{value:"\ud83d\udcbe \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654",id:"-\uba54\ubaa8\ub9ac-\ucd5c\uc801\ud654",level:2},{value:"RabbitMQ \uc124\uc815",id:"rabbitmq-\uc124\uc815",level:3},{value:"Lazy Queue \uc0ac\uc6a9",id:"lazy-queue-\uc0ac\uc6a9",level:3},{value:"\ud83d\udd27 \uc124\uc815 \ucd5c\uc801\ud654",id:"-\uc124\uc815-\ucd5c\uc801\ud654",level:2},{value:"rabbitmq.conf (\ud504\ub85c\ub355\uc158 \uad8c\uc7a5)",id:"rabbitmqconf-\ud504\ub85c\ub355\uc158-\uad8c\uc7a5",level:3},{value:"\ud658\uacbd \ubcc0\uc218 (Docker)",id:"\ud658\uacbd-\ubcc0\uc218-docker",level:3},{value:"\ud83d\udcca \ubca4\uce58\ub9c8\ud0b9",id:"-\ubca4\uce58\ub9c8\ud0b9",level:2},{value:"\uc131\ub2a5 \uce21\uc815 \ub3c4\uad6c",id:"\uc131\ub2a5-\uce21\uc815-\ub3c4\uad6c",level:3},{value:"\ud83c\udfaf \uc131\ub2a5 \ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"-\uc131\ub2a5-\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:2},{value:"Producer",id:"producer",level:3},{value:"Consumer",id:"consumer",level:3},{value:"RabbitMQ \uc124\uc815",id:"rabbitmq-\uc124\uc815-1",level:3},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"performance---\uc131\ub2a5-\ucd5c\uc801\ud654",children:"Performance - \uc131\ub2a5 \ucd5c\uc801\ud654"})}),"\n",(0,t.jsx)(e.p,{children:"RabbitMQ\uc758 \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsx)(e.h2,{id:"-\ud559\uc2b5-\ubaa9\ud45c",children:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\ucc98\ub9ac\ub7c9 \ud5a5\uc0c1 \uae30\ubc95"}),"\n",(0,t.jsx)(e.li,{children:"\uba54\ubaa8\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.li,{children:"\ub514\uc2a4\ud06c I/O \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.li,{children:"\ubcd1\ubaa9 \ud604\uc0c1 \uc9c4\ub2e8 \ubc0f \ud574\uacb0"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-\uc131\ub2a5-\uc9c0\ud45c",children:"\ud83d\udcca \uc131\ub2a5 \uc9c0\ud45c"}),"\n",(0,t.jsx)(e.h3,{id:"\uc8fc\uc694-\uc131\ub2a5-\uba54\ud2b8\ub9ad",children:"\uc8fc\uc694 \uc131\ub2a5 \uba54\ud2b8\ub9ad"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Throughput"}),": \ucd08\ub2f9 \uba54\uc2dc\uc9c0 \ucc98\ub9ac\ub7c9 (msg/s)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Latency"}),": \uba54\uc2dc\uc9c0 \uc9c0\uc5f0 \uc2dc\uac04 (ms)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Memory Usage"}),": \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Disk I/O"}),": \ub514\uc2a4\ud06c \uc77d\uae30/\uc4f0\uae30 \uc18d\ub3c4"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"CPU Usage"}),": CPU \uc0ac\uc6a9\ub960"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-producer-\ucd5c\uc801\ud654",children:"\ud83d\ude80 Producer \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.h3,{id:"1-\ubc30\uce58-\ubc1c\ud589-batch-publishing",children:"1. \ubc30\uce58 \ubc1c\ud589 (Batch Publishing)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# batch_publisher.py\nimport pika\nimport json\n\nclass BatchPublisher:\n    """\ubc30\uce58 \ubc1c\ud589\uc73c\ub85c \uc131\ub2a5 \ud5a5\uc0c1"""\n\n    def __init__(self, host=\'localhost\'):\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters(host)\n        )\n        self.channel = self.connection.channel()\n        self.channel.queue_declare(queue=\'orders\', durable=True)\n\n    def publish_batch(self, messages: list, batch_size: int = 100):\n        """\n        \ubc30\uce58\ub85c \uba54\uc2dc\uc9c0 \ubc1c\ud589\n\n        Args:\n            messages: \uba54\uc2dc\uc9c0 \ub9ac\uc2a4\ud2b8\n            batch_size: \ubc30\uce58 \ud06c\uae30\n        """\n        for i in range(0, len(messages), batch_size):\n            batch = messages[i:i+batch_size]\n\n            # \ubc30\uce58 \ub0b4 \ubaa8\ub4e0 \uba54\uc2dc\uc9c0 \ubc1c\ud589\n            for msg in batch:\n                self.channel.basic_publish(\n                    exchange=\'\',\n                    routing_key=\'orders\',\n                    body=json.dumps(msg),\n                    properties=pika.BasicProperties(\n                        delivery_mode=2\n                    )\n                )\n\n            # \ubc30\uce58\ub9c8\ub2e4 confirm\n            print(f" [x] Published batch {i//batch_size + 1} "\n                  f"({len(batch)} messages)")\n\n    def close(self):\n        self.connection.close()\n\n# \uc131\ub2a5 \ube44\uad50\nif __name__ == \'__main__\':\n    import time\n\n    messages = [{\'id\': i, \'data\': f\'Message {i}\'} for i in range(10000)]\n\n    # \ubc30\uce58 \ubc1c\ud589\n    start = time.time()\n    publisher = BatchPublisher()\n    publisher.publish_batch(messages, batch_size=1000)\n    publisher.close()\n    batch_time = time.time() - start\n\n    print(f"\\n Batch publishing: {batch_time:.2f}s")\n    print(f" Throughput: {len(messages) / batch_time:.2f} msg/s")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-publisher-confirms",children:"2. Publisher Confirms"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# confirmed_publisher.py\nimport pika\n\nclass ConfirmedPublisher:\n    """Publisher Confirms\ub85c \uc2e0\ub8b0\uc131 \ud5a5\uc0c1"""\n\n    def __init__(self, host=\'localhost\'):\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters(host)\n        )\n        self.channel = self.connection.channel()\n\n        # Publisher Confirms \ud65c\uc131\ud654\n        self.channel.confirm_delivery()\n\n        self.channel.queue_declare(queue=\'orders\', durable=True)\n\n    def publish_with_confirm(self, message: str):\n        """Confirm\uacfc \ud568\uaed8 \ubc1c\ud589"""\n        try:\n            self.channel.basic_publish(\n                exchange=\'\',\n                routing_key=\'orders\',\n                body=message,\n                properties=pika.BasicProperties(delivery_mode=2),\n                mandatory=True  # \ub77c\uc6b0\ud305 \uc2e4\ud328 \uc2dc \uc5d0\ub7ec\n            )\n            print(f" [\u2713] Message confirmed: {message}")\n            return True\n\n        except pika.exceptions.UnroutableError:\n            print(f" [\u2717] Message unroutable: {message}")\n            return False\n\n        except pika.exceptions.NackError:\n            print(f" [\u2717] Message nacked: {message}")\n            return False\n\n    def close(self):\n        self.connection.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    publisher = ConfirmedPublisher()\n\n    for i in range(100):\n        publisher.publish_with_confirm(f\'Order {i+1}\')\n\n    publisher.close()\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-\uc5f0\uacb0-\ud480\ub9c1",children:"3. \uc5f0\uacb0 \ud480\ub9c1"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# connection_pool.py\nimport pika\nimport threading\nfrom queue import Queue\n\nclass ConnectionPool:\n    """\uc5f0\uacb0 \uc7ac\uc0ac\uc6a9\uc73c\ub85c \uc131\ub2a5 \ud5a5\uc0c1"""\n\n    def __init__(self, host=\'localhost\', pool_size=10):\n        self.host = host\n        self.pool_size = pool_size\n        self.connections = Queue(maxsize=pool_size)\n        self._lock = threading.Lock()\n\n        # \uc5f0\uacb0 \ud480 \ucd08\uae30\ud654\n        for _ in range(pool_size):\n            conn = pika.BlockingConnection(\n                pika.ConnectionParameters(host)\n            )\n            self.connections.put(conn)\n\n    def get_connection(self):\n        """\uc5f0\uacb0 \uac00\uc838\uc624\uae30"""\n        return self.connections.get()\n\n    def return_connection(self, connection):\n        """\uc5f0\uacb0 \ubc18\ud658"""\n        self.connections.put(connection)\n\n    def publish(self, queue_name: str, message: str):\n        """\uba54\uc2dc\uc9c0 \ubc1c\ud589"""\n        conn = self.get_connection()\n\n        try:\n            channel = conn.channel()\n            channel.basic_publish(\n                exchange=\'\',\n                routing_key=queue_name,\n                body=message\n            )\n        finally:\n            self.return_connection(conn)\n\n    def close_all(self):\n        """\ubaa8\ub4e0 \uc5f0\uacb0 \uc885\ub8cc"""\n        while not self.connections.empty():\n            conn = self.connections.get()\n            conn.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    pool = ConnectionPool(pool_size=5)\n\n    # \uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc5f0\uacb0 \uc7ac\uc0ac\uc6a9\n    def publish_messages(thread_id: int, count: int):\n        for i in range(count):\n            pool.publish(\'orders\', f\'Thread {thread_id}: Message {i+1}\')\n\n    threads = []\n    for tid in range(10):\n        t = threading.Thread(\n            target=publish_messages,\n            args=(tid, 100)\n        )\n        t.start()\n        threads.append(t)\n\n    for t in threads:\n        t.join()\n\n    pool.close_all()\n    print(" [\u2713] All messages published using connection pool")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-consumer-\ucd5c\uc801\ud654",children:"\u26a1 Consumer \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.h3,{id:"1-prefetch-count-\uc870\uc815",children:"1. Prefetch Count \uc870\uc815"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# optimized_consumer.py\nimport pika\nimport time\n\ndef process_message(body: bytes):\n    """\uba54\uc2dc\uc9c0 \ucc98\ub9ac (\uc2dc\ubbac\ub808\uc774\uc158)"""\n    # \uc2e4\uc81c \ucc98\ub9ac \ub85c\uc9c1\n    time.sleep(0.1)\n\ndef callback(ch, method, properties, body):\n    """\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31"""\n    process_message(body)\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start_consumer(prefetch_count: int = 1):\n    """Consumer \uc2dc\uc791"""\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(\'localhost\')\n    )\n    channel = connection.channel()\n\n    # \ud83d\udd11 Prefetch Count \uc124\uc815\n    # \uac12\uc774 \ud074\uc218\ub85d: \ucc98\ub9ac\ub7c9 \u2191, \uba54\ubaa8\ub9ac \u2191\n    # \uac12\uc774 \uc791\uc744\uc218\ub85d: \uacf5\uc815\ud55c \ubd84\ubc30 \u2191, \ucc98\ub9ac\ub7c9 \u2193\n    channel.basic_qos(prefetch_count=prefetch_count)\n\n    channel.basic_consume(\n        queue=\'orders\',\n        on_message_callback=callback\n    )\n\n    print(f\' [*] Consumer started (prefetch={prefetch_count})\')\n    channel.start_consuming()\n\n# \ucd5c\uc801\uac12 \ucc3e\uae30: \ucc98\ub9ac \uc2dc\uac04\uacfc \ubd80\ud558\uc5d0 \ub530\ub77c 10-50 \uad8c\uc7a5\nif __name__ == \'__main__\':\n    import sys\n    prefetch = int(sys.argv[1]) if len(sys.argv) > 1 else 10\n\n    try:\n        start_consumer(prefetch_count=prefetch)\n    except KeyboardInterrupt:\n        print(\'\\nConsumer stopped\')\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-\uba40\ud2f0\uc2a4\ub808\ub4dc-consumer",children:"2. \uba40\ud2f0\uc2a4\ub808\ub4dc Consumer"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# threaded_consumer.py\nimport pika\nimport threading\nimport time\n\nclass ThreadedConsumer:\n    """\uba40\ud2f0\uc2a4\ub808\ub4dc Consumer"""\n\n    def __init__(self, thread_count=5):\n        self.thread_count = thread_count\n        self.threads = []\n\n    def process_message(self, body: bytes):\n        """\uba54\uc2dc\uc9c0 \ucc98\ub9ac"""\n        # CPU \uc9d1\uc57d\uc801\uc778 \uc791\uc5c5\n        time.sleep(0.05)\n        print(f" [x] Processed: {body.decode()[:50]}")\n\n    def consumer_thread(self, thread_id: int):\n        """Consumer \uc2a4\ub808\ub4dc"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(\'localhost\')\n        )\n        channel = connection.channel()\n\n        def callback(ch, method, properties, body):\n            self.process_message(body)\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n\n        channel.basic_qos(prefetch_count=10)\n        channel.basic_consume(\n            queue=\'orders\',\n            on_message_callback=callback\n        )\n\n        print(f\' [*] Thread {thread_id} started\')\n        channel.start_consuming()\n\n    def start(self):\n        """\ubaa8\ub4e0 \uc2a4\ub808\ub4dc \uc2dc\uc791"""\n        for i in range(self.thread_count):\n            t = threading.Thread(\n                target=self.consumer_thread,\n                args=(i+1,)\n            )\n            t.start()\n            self.threads.append(t)\n\n        # \ubaa8\ub4e0 \uc2a4\ub808\ub4dc \ub300\uae30\n        for t in self.threads:\n            t.join()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    consumer = ThreadedConsumer(thread_count=10)\n\n    try:\n        consumer.start()\n    except KeyboardInterrupt:\n        print(\'\\n Threaded Consumer stopped\')\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-\uba54\ubaa8\ub9ac-\ucd5c\uc801\ud654",children:"\ud83d\udcbe \uba54\ubaa8\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.h3,{id:"rabbitmq-\uc124\uc815",children:"RabbitMQ \uc124\uc815"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ini",children:"# rabbitmq.conf\n\n# 1. \uba54\ubaa8\ub9ac \ud55c\uacc4 \uc124\uc815 (\uc804\uccb4 \uba54\ubaa8\ub9ac\uc758 40%)\nvm_memory_high_watermark.relative = 0.4\n\n# 2. Lazy Queue\ub85c \ub514\uc2a4\ud06c \uc0ac\uc6a9\n# Python\uc5d0\uc11c \uc124\uc815:\n# channel.queue_declare(\n#     queue='large_queue',\n#     arguments={'x-queue-mode': 'lazy'}\n# )\n\n# 3. \ud398\uc774\uc9d5 \uc784\uacc4\uac12\nvm_memory_high_watermark_paging_ratio = 0.75\n\n# 4. \uba54\uc2dc\uc9c0 \ud06c\uae30 \uc81c\ud55c\nmax_message_size = 134217728  # 128MB\n"})}),"\n",(0,t.jsx)(e.h3,{id:"lazy-queue-\uc0ac\uc6a9",children:"Lazy Queue \uc0ac\uc6a9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# lazy_queue.py\nimport pika\n\ndef setup_lazy_queue():\n    \"\"\"Lazy Queue \uc124\uc815 (\ub300\uc6a9\ub7c9 \uba54\uc2dc\uc9c0 \ucc98\ub9ac)\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # \ud83d\udd11 Lazy Queue: \uba54\uc2dc\uc9c0\ub97c \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\n    channel.queue_declare(\n        queue='large_messages',\n        durable=True,\n        arguments={\n            'x-queue-mode': 'lazy'  # Lazy mode\n        }\n    )\n\n    print(\" [\u2713] Lazy queue created\")\n    print(\" [i] Messages will be stored on disk\")\n\n    connection.close()\n\nif __name__ == '__main__':\n    setup_lazy_queue()\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\uc124\uc815-\ucd5c\uc801\ud654",children:"\ud83d\udd27 \uc124\uc815 \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(e.h3,{id:"rabbitmqconf-\ud504\ub85c\ub355\uc158-\uad8c\uc7a5",children:"rabbitmq.conf (\ud504\ub85c\ub355\uc158 \uad8c\uc7a5)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ini",children:"# rabbitmq.conf\n\n# === \ub124\ud2b8\uc6cc\ud06c ===\n# TCP \ub9ac\uc2a4\ub108\nlisteners.tcp.default = 5672\n\n# Heartbeat (\ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \uc720\uc9c0)\nheartbeat = 60\n\n# === \uba54\ubaa8\ub9ac ===\n# \uba54\ubaa8\ub9ac \ud55c\uacc4 (40%)\nvm_memory_high_watermark.relative = 0.4\n\n# \ud398\uc774\uc9d5 (75%)\nvm_memory_high_watermark_paging_ratio = 0.75\n\n# === \ub514\uc2a4\ud06c ===\n# \ub514\uc2a4\ud06c \uc5ec\uc720 \uacf5\uac04 (1.5GB)\ndisk_free_limit.absolute = 1500MB\n\n# === \uc131\ub2a5 ===\n# Channel \ucd5c\ub300 \uc218\nchannel_max = 2048\n\n# === \ud074\ub7ec\uc2a4\ud130 ===\n# Cluster partition handling\ncluster_partition_handling = autoheal\n\n# === \ub85c\uadf8 ===\nlog.file.level = info\nlog.console.level = info\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\ud658\uacbd-\ubcc0\uc218-docker",children:"\ud658\uacbd \ubcc0\uc218 (Docker)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"# docker-compose.yml\nservices:\n  rabbitmq:\n    image: rabbitmq:3-management\n    environment:\n      # JVM \uba54\ubaa8\ub9ac (\ud070 \uba54\ubaa8\ub9ac \ud658\uacbd)\n      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit vm_memory_high_watermark 0.6\n\n      # \ucd5c\ub300 \uc5f0\uacb0 \uc218\n      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit channel_max 4096\n\n    # \ub9ac\uc18c\uc2a4 \uc81c\ud55c\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 4G\n        reservations:\n          cpus: '1.0'\n          memory: 2G\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\ubca4\uce58\ub9c8\ud0b9",children:"\ud83d\udcca \ubca4\uce58\ub9c8\ud0b9"}),"\n",(0,t.jsx)(e.h3,{id:"\uc131\ub2a5-\uce21\uc815-\ub3c4\uad6c",children:"\uc131\ub2a5 \uce21\uc815 \ub3c4\uad6c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# benchmark.py\nimport pika\nimport time\nimport statistics\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass BenchmarkResult:\n    """\ubca4\uce58\ub9c8\ud06c \uacb0\uacfc"""\n    operation: str\n    count: int\n    duration: float\n    throughput: float\n    latencies: List[float]\n\n    def print_summary(self):\n        """\uacb0\uacfc \uc694\uc57d \ucd9c\ub825"""\n        print(f"\\n {self.operation}")\n        print(" " + "="*50)\n        print(f" Messages: {self.count}")\n        print(f" Duration: {self.duration:.2f}s")\n        print(f" Throughput: {self.throughput:.2f} msg/s")\n\n        if self.latencies:\n            print(f" Latency (avg): {statistics.mean(self.latencies)*1000:.2f}ms")\n            print(f" Latency (p50): {statistics.median(self.latencies)*1000:.2f}ms")\n            print(f" Latency (p95): {self._percentile(self.latencies, 0.95)*1000:.2f}ms")\n            print(f" Latency (p99): {self._percentile(self.latencies, 0.99)*1000:.2f}ms")\n\n    @staticmethod\n    def _percentile(data: List[float], percentile: float) -> float:\n        """\ubc31\ubd84\uc704\uc218 \uacc4\uc0b0"""\n        sorted_data = sorted(data)\n        index = int(len(sorted_data) * percentile)\n        return sorted_data[min(index, len(sorted_data)-1)]\n\nclass RabbitMQBenchmark:\n    """RabbitMQ \ubca4\uce58\ub9c8\ud06c"""\n\n    def __init__(self, host=\'localhost\'):\n        self.host = host\n\n    def benchmark_publish(self, count: int = 10000) -> BenchmarkResult:\n        """\ubc1c\ud589 \uc131\ub2a5 \uce21\uc815"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n        channel.queue_declare(queue=\'benchmark\', durable=True)\n\n        latencies = []\n        start_time = time.time()\n\n        for i in range(count):\n            msg_start = time.time()\n\n            channel.basic_publish(\n                exchange=\'\',\n                routing_key=\'benchmark\',\n                body=f\'Message {i+1}\',\n                properties=pika.BasicProperties(delivery_mode=2)\n            )\n\n            latencies.append(time.time() - msg_start)\n\n        duration = time.time() - start_time\n        connection.close()\n\n        return BenchmarkResult(\n            operation=\'Publish\',\n            count=count,\n            duration=duration,\n            throughput=count / duration,\n            latencies=latencies\n        )\n\n    def benchmark_consume(self, count: int = 10000) -> BenchmarkResult:\n        """\uc18c\ube44 \uc131\ub2a5 \uce21\uc815"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        received = 0\n        latencies = []\n        start_time = time.time()\n\n        def callback(ch, method, properties, body):\n            nonlocal received\n            msg_start = time.time()\n\n            # \uba54\uc2dc\uc9c0 \ucc98\ub9ac (\uc2dc\ubbac\ub808\uc774\uc158)\n            _ = body.decode()\n\n            latencies.append(time.time() - msg_start)\n            received += 1\n\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n\n        channel.basic_qos(prefetch_count=100)\n        channel.basic_consume(\n            queue=\'benchmark\',\n            on_message_callback=callback\n        )\n\n        while received < count:\n            connection.process_data_events(time_limit=1)\n\n        duration = time.time() - start_time\n        connection.close()\n\n        return BenchmarkResult(\n            operation=\'Consume\',\n            count=count,\n            duration=duration,\n            throughput=count / duration,\n            latencies=latencies\n        )\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    benchmark = RabbitMQBenchmark()\n\n    # \ubc1c\ud589 \ubca4\uce58\ub9c8\ud06c\n    publish_result = benchmark.benchmark_publish(count=10000)\n    publish_result.print_summary()\n\n    # \uc18c\ube44 \ubca4\uce58\ub9c8\ud06c\n    consume_result = benchmark.benchmark_consume(count=10000)\n    consume_result.print_summary()\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-\uc131\ub2a5-\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ud83c\udfaf \uc131\ub2a5 \ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,t.jsx)(e.h3,{id:"producer",children:"Producer"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ubc30\uce58 \ubc1c\ud589 \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Publisher Confirms \ud65c\uc131\ud654"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc5f0\uacb0 \ud480\ub9c1 \uad6c\ud604"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc801\uc808\ud55c \uba54\uc2dc\uc9c0 \ud06c\uae30 (< 128KB \uad8c\uc7a5)"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Persistent \uba54\uc2dc\uc9c0 \ucd5c\uc18c\ud654"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"consumer",children:"Consumer"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Prefetch Count \uc870\uc815 (10-50)"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","ACK \uc9c0\uc5f0 \ucd5c\uc18c\ud654"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uba40\ud2f0\uc2a4\ub808\ub4dc/\uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc608\uc678 \ucc98\ub9ac \ucd5c\uc801\ud654"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"rabbitmq-\uc124\uc815-1",children:"RabbitMQ \uc124\uc815"}),"\n",(0,t.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uba54\ubaa8\ub9ac \ud55c\uacc4 \uc124\uc815"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Lazy Queue \uc0ac\uc6a9 (\ub300\uc6a9\ub7c9)"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Quorum Queue \uc0ac\uc6a9 (HA)"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\uc801\uc808\ud55c \ub514\uc2a4\ud06c \uacf5\uac04"]}),"\n",(0,t.jsxs)(e.li,{className:"task-list-item",children:[(0,t.jsx)(e.input,{type:"checkbox",disabled:!0})," ","\ubaa8\ub2c8\ud130\ub9c1 \ud65c\uc131\ud654"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\ubc30\uce58 \ubc1c\ud589"}),": \ucc98\ub9ac\ub7c9 \ud5a5\uc0c1"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Prefetch Count"}),": 10-50 \uad8c\uc7a5"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Lazy Queue"}),": \ub300\uc6a9\ub7c9 \uba54\uc2dc\uc9c0\uc6a9"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\uc5f0\uacb0 \ud480\ub9c1"}),": \uc5f0\uacb0 \uc7ac\uc0ac\uc6a9\uc73c\ub85c \uc131\ub2a5 \ud5a5\uc0c1"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,t.jsx)(e.a,{href:"./security",children:"\ubcf4\uc548"})]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>c});var i=s(6540);const t={},a=i.createContext(t);function r(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);