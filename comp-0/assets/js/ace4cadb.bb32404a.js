"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5981],{972:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"fastapi/examples/scenario-03-ecommerce-api","title":"\uc2dc\ub098\ub9ac\uc624 3: E-commerce API","description":"\uc0c1\ud488, \uc7a5\ubc14\uad6c\ub2c8, \uc8fc\ubb38, \uacb0\uc81c\uac00 \ud3ec\ud568\ub41c \uc804\uc790\uc0c1\uac70\ub798 API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-03-ecommerce-api.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-03-ecommerce-api","permalink":"/docs/fastapi/examples/scenario-03-ecommerce-api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-03-ecommerce-api.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 2: \ube14\ub85c\uadf8 API","permalink":"/docs/fastapi/examples/scenario-02-blog-api"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 4: \uc2e4\uc2dc\uac04 \ucc44\ud305","permalink":"/docs/fastapi/examples/scenario-04-realtime-chat"}}');var s=r(4848),i=r(8453);const a={sidebar_position:4},d="\uc2dc\ub098\ub9ac\uc624 3: E-commerce API",o={},c=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"\uc7a5\ubc14\uad6c\ub2c8 \uad00\ub9ac",id:"\uc7a5\ubc14\uad6c\ub2c8-\uad00\ub9ac",level:3},{value:"\uc8fc\ubb38 \ucc98\ub9ac (\ud2b8\ub79c\uc7ad\uc158)",id:"\uc8fc\ubb38-\ucc98\ub9ac-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"test_ecommerce.py",id:"test_ecommercepy",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"\ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac",id:"\ud2b8\ub79c\uc7ad\uc158-\ucc98\ub9ac",level:3},{value:"\ub370\uc774\ud130 \uc77c\uad00\uc131",id:"\ub370\uc774\ud130-\uc77c\uad00\uc131",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-3-e-commerce-api",children:"\uc2dc\ub098\ub9ac\uc624 3: E-commerce API"})}),"\n",(0,s.jsx)(n.p,{children:"\uc0c1\ud488, \uc7a5\ubc14\uad6c\ub2c8, \uc8fc\ubb38, \uacb0\uc81c\uac00 \ud3ec\ud568\ub41c \uc804\uc790\uc0c1\uac70\ub798 API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,s.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 \uc0c1\ud488 \uce74\ud14c\uace0\ub9ac \uad00\ub9ac"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uc0c1\ud488 CRUD \ubc0f \uc7ac\uace0 \uad00\ub9ac"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uc7a5\ubc14\uad6c\ub2c8 \ucd94\uac00/\uc218\uc815/\uc0ad\uc81c"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uc8fc\ubb38 \uc0dd\uc131 \ubc0f \uc0c1\ud0dc \uad00\ub9ac"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uacb0\uc81c \ucc98\ub9ac (\uc2dc\ubbac\ub808\uc774\uc158)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ecommerce-api/\n\u251c\u2500\u2500 main.py              # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n\u251c\u2500\u2500 models.py            # DB \ubaa8\ub378 (Category, Product, CartItem, Order, OrderItem)\n\u251c\u2500\u2500 schemas.py           # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py          # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 auth.py              # JWT \uc778\uc99d\n\u251c\u2500\u2500 routers/\n\u2502   \u251c\u2500\u2500 products.py      # \uc0c1\ud488 \uad00\ub9ac \ub77c\uc6b0\ud130\n\u2502   \u251c\u2500\u2500 cart.py          # \uc7a5\ubc14\uad6c\ub2c8 \ub77c\uc6b0\ud130\n\u2502   \u2514\u2500\u2500 orders.py        # \uc8fc\ubb38 \uad00\ub9ac \ub77c\uc6b0\ud130\n\u251c\u2500\u2500 test_ecommerce.py    # \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\n\u2514\u2500\u2500 requirements.txt     # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant U as User/Client\n    participant API as FastAPI\n    participant Auth as JWT Auth\n    participant DB as Database\n\n    Note over U,DB: 1. \uc7a5\ubc14\uad6c\ub2c8\uc5d0 \uc0c1\ud488 \ucd94\uac00\n    U->>API: POST /cart/items<br/>Authorization: Bearer {token}\n    API->>Auth: Verify token\n    Auth--\x3e>API: User info\n    API->>DB: SELECT product (\uc7ac\uace0 \ud655\uc778)\n    DB--\x3e>API: Product data\n    alt \uc7ac\uace0 \ucda9\ubd84\n        API->>DB: INSERT/UPDATE cart_items\n        DB--\x3e>API: Cart item saved\n        API--\x3e>U: 200 OK<br/>Cart item\n    else \uc7ac\uace0 \ubd80\uc871\n        API--\x3e>U: 400 Bad Request<br/>Insufficient stock\n    end\n\n    Note over U,DB: 2. \uc8fc\ubb38 \uc0dd\uc131 (\ud2b8\ub79c\uc7ad\uc158)\n    U->>API: POST /orders<br/>Authorization: Bearer {token}\n    API->>Auth: Verify token\n    Auth--\x3e>API: User info\n    API->>DB: BEGIN TRANSACTION\n    API->>DB: SELECT cart_items\n    DB--\x3e>API: Cart items list\n\n    loop For each cart item\n        API->>DB: SELECT product (\uc7ac\uace0 \ud655\uc778)\n        DB--\x3e>API: Product data\n        alt \uc7ac\uace0 \ucda9\ubd84\n            API->>DB: UPDATE products<br/>SET stock = stock - quantity\n            API->>API: Create order_item\n        else \uc7ac\uace0 \ubd80\uc871\n            API->>DB: ROLLBACK\n            API--\x3e>U: 400 Bad Request<br/>Insufficient stock\n        end\n    end\n\n    API->>DB: INSERT INTO orders\n    API->>DB: INSERT INTO order_items (batch)\n    API->>DB: DELETE FROM cart_items\n    API->>DB: COMMIT TRANSACTION\n    DB--\x3e>API: Order created\n    API--\x3e>U: 201 Created<br/>Order with items\n\n    Note over U,DB: 3. \uacb0\uc81c \ucc98\ub9ac\n    U->>API: POST /orders/{id}/pay<br/>payment_method\n    API->>Auth: Verify token\n    Auth--\x3e>API: User info\n    API->>DB: SELECT order\n    DB--\x3e>API: Order data\n    alt Order status = pending\n        API->>API: Simulate payment\n        API->>DB: UPDATE orders<br/>SET status='paid'\n        DB--\x3e>API: Updated\n        API--\x3e>U: 200 OK<br/>Payment successful\n    else Order already processed\n        API--\x3e>U: 400 Bad Request<br/>Already processed\n    end\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,s.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, Float, ForeignKey, Enum as SQLEnum, DateTime\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\nimport enum\n\nclass OrderStatus(str, enum.Enum):\n    pending = "pending"\n    paid = "paid"\n    shipped = "shipped"\n    delivered = "delivered"\n    cancelled = "cancelled"\n\nclass Category(Base):\n    __tablename__ = "categories"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True, index=True)\n    products = relationship("Product", back_populates="category")\n\nclass Product(Base):\n    __tablename__ = "products"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, index=True)\n    description = Column(String)\n    price = Column(Float)\n    stock = Column(Integer, default=0)\n    category_id = Column(Integer, ForeignKey("categories.id"))\n    category = relationship("Category", back_populates="products")\n\nclass CartItem(Base):\n    __tablename__ = "cart_items"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey("users.id"))\n    product_id = Column(Integer, ForeignKey("products.id"))\n    quantity = Column(Integer)\n    product = relationship("Product")\n\nclass Order(Base):\n    __tablename__ = "orders"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey("users.id"))\n    total_price = Column(Float)\n    status = Column(SQLEnum(OrderStatus), default=OrderStatus.pending)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    items = relationship("OrderItem", back_populates="order")\n\nclass OrderItem(Base):\n    __tablename__ = "order_items"\n    id = Column(Integer, primary_key=True)\n    order_id = Column(Integer, ForeignKey("orders.id"))\n    product_id = Column(Integer, ForeignKey("products.id"))\n    quantity = Column(Integer)\n    price = Column(Float)  # \uc8fc\ubb38 \ub2f9\uc2dc \uac00\uaca9 \uc800\uc7a5\n    order = relationship("Order", back_populates="items")\n    product = relationship("Product")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\uc7a5\ubc14\uad6c\ub2c8-\uad00\ub9ac",children:"\uc7a5\ubc14\uad6c\ub2c8 \uad00\ub9ac"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\n\nrouter = APIRouter(prefix="/cart", tags=["cart"])\n\n@router.post("/items")\ndef add_to_cart(\n    product_id: int,\n    quantity: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc7a5\ubc14\uad6c\ub2c8\uc5d0 \uc0c1\ud488 \ucd94\uac00"""\n    # \uc0c1\ud488 \uc874\uc7ac \ubc0f \uc7ac\uace0 \ud655\uc778\n    product = db.query(Product).filter(Product.id == product_id).first()\n    if not product:\n        raise HTTPException(status_code=404, detail="Product not found")\n\n    if product.stock < quantity:\n        raise HTTPException(status_code=400, detail="Insufficient stock")\n\n    # \uae30\uc874 \uc7a5\ubc14\uad6c\ub2c8 \ud56d\ubaa9 \ud655\uc778\n    cart_item = db.query(CartItem).filter(\n        CartItem.user_id == current_user.id,\n        CartItem.product_id == product_id\n    ).first()\n\n    if cart_item:\n        cart_item.quantity += quantity\n    else:\n        cart_item = CartItem(\n            user_id=current_user.id,\n            product_id=product_id,\n            quantity=quantity\n        )\n        db.add(cart_item)\n\n    db.commit()\n    db.refresh(cart_item)\n    return cart_item\n\n@router.get("/items")\ndef get_cart(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc7a5\ubc14\uad6c\ub2c8 \uc870\ud68c"""\n    cart_items = db.query(CartItem).filter(\n        CartItem.user_id == current_user.id\n    ).all()\n\n    total = sum(item.product.price * item.quantity for item in cart_items)\n\n    return {\n        "items": cart_items,\n        "total": total\n    }\n\n@router.delete("/items/{product_id}")\ndef remove_from_cart(\n    product_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc7a5\ubc14\uad6c\ub2c8\uc5d0\uc11c \uc0c1\ud488 \uc81c\uac70"""\n    cart_item = db.query(CartItem).filter(\n        CartItem.user_id == current_user.id,\n        CartItem.product_id == product_id\n    ).first()\n\n    if not cart_item:\n        raise HTTPException(status_code=404, detail="Item not in cart")\n\n    db.delete(cart_item)\n    db.commit()\n    return {"message": "Item removed"}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\uc8fc\ubb38-\ucc98\ub9ac-\ud2b8\ub79c\uc7ad\uc158",children:"\uc8fc\ubb38 \ucc98\ub9ac (\ud2b8\ub79c\uc7ad\uc158)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.exc import SQLAlchemyError\n\n@router.post("/orders", response_model=OrderResponse)\ndef create_order(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc7a5\ubc14\uad6c\ub2c8\uc5d0\uc11c \uc8fc\ubb38 \uc0dd\uc131"""\n    try:\n        # \uc7a5\ubc14\uad6c\ub2c8 \uc870\ud68c\n        cart_items = db.query(CartItem).filter(\n            CartItem.user_id == current_user.id\n        ).all()\n\n        if not cart_items:\n            raise HTTPException(status_code=400, detail="Cart is empty")\n\n        # \uc7ac\uace0 \ud655\uc778 \ubc0f \uc8fc\ubb38 \uc0dd\uc131\n        total_price = 0\n        order_items = []\n\n        for cart_item in cart_items:\n            product = cart_item.product\n\n            # \uc7ac\uace0 \ud655\uc778\n            if product.stock < cart_item.quantity:\n                raise HTTPException(\n                    status_code=400,\n                    detail=f"Insufficient stock for {product.name}"\n                )\n\n            # \uc7ac\uace0 \ucc28\uac10\n            product.stock -= cart_item.quantity\n\n            # \uc8fc\ubb38 \ud56d\ubaa9 \uc0dd\uc131\n            order_item = OrderItem(\n                product_id=product.id,\n                quantity=cart_item.quantity,\n                price=product.price  # \ud604\uc7ac \uac00\uaca9 \uc800\uc7a5\n            )\n            order_items.append(order_item)\n            total_price += product.price * cart_item.quantity\n\n        # \uc8fc\ubb38 \uc0dd\uc131\n        order = Order(\n            user_id=current_user.id,\n            total_price=total_price,\n            items=order_items\n        )\n        db.add(order)\n\n        # \uc7a5\ubc14\uad6c\ub2c8 \ube44\uc6b0\uae30\n        for cart_item in cart_items:\n            db.delete(cart_item)\n\n        db.commit()\n        db.refresh(order)\n        return order\n\n    except SQLAlchemyError as e:\n        db.rollback()\n        raise HTTPException(status_code=500, detail="Order creation failed")\n\n@router.post("/orders/{order_id}/pay")\ndef pay_order(\n    order_id: int,\n    payment_method: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc8fc\ubb38 \uacb0\uc81c \ucc98\ub9ac"""\n    order = db.query(Order).filter(\n        Order.id == order_id,\n        Order.user_id == current_user.id\n    ).first()\n\n    if not order:\n        raise HTTPException(status_code=404, detail="Order not found")\n\n    if order.status != OrderStatus.pending:\n        raise HTTPException(status_code=400, detail="Order already processed")\n\n    # \uacb0\uc81c \ucc98\ub9ac \uc2dc\ubbac\ub808\uc774\uc158\n    # \uc2e4\uc81c\ub85c\ub294 PG\uc0ac API \ud638\ucd9c\n    payment_success = True  # simulate_payment(order.total_price, payment_method)\n\n    if payment_success:\n        order.status = OrderStatus.paid\n        db.commit()\n        return {"message": "Payment successful", "order_id": order.id}\n    else:\n        raise HTTPException(status_code=400, detail="Payment failed")\n\n@router.get("/orders")\ndef list_orders(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc8fc\ubb38 \ubaa9\ub85d \uc870\ud68c"""\n    orders = db.query(Order).filter(\n        Order.user_id == current_user.id\n    ).order_by(Order.created_at.desc()).all()\n\n    return orders\n'})}),"\n",(0,s.jsx)(n.h3,{id:"test_ecommercepy",children:"test_ecommerce.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef get_auth_headers():\n    # \ub85c\uadf8\uc778\ud558\uc5ec \ud1a0\ud070 \ud68d\ub4dd\n    response = client.post("/token", data={\n        "username": "testuser",\n        "password": "testpass"\n    })\n    token = response.json()["access_token"]\n    return {"Authorization": f"Bearer {token}"}\n\ndef test_add_to_cart():\n    headers = get_auth_headers()\n    response = client.post(\n        "/cart/items",\n        json={"product_id": 1, "quantity": 2},\n        headers=headers\n    )\n    assert response.status_code == 200\n    assert response.json()["quantity"] == 2\n\ndef test_create_order():\n    headers = get_auth_headers()\n\n    # \uc7a5\ubc14\uad6c\ub2c8\uc5d0 \uc0c1\ud488 \ucd94\uac00\n    client.post(\n        "/cart/items",\n        json={"product_id": 1, "quantity": 1},\n        headers=headers\n    )\n\n    # \uc8fc\ubb38 \uc0dd\uc131\n    response = client.post("/orders", headers=headers)\n    assert response.status_code == 200\n    assert response.json()["status"] == "pending"\n\ndef test_insufficient_stock():\n    headers = get_auth_headers()\n\n    # \uc7ac\uace0\ubcf4\ub2e4 \ub9ce\uc740 \uc218\ub7c9 \uc8fc\ubb38 \uc2dc\ub3c4\n    response = client.post(\n        "/cart/items",\n        json={"product_id": 1, "quantity": 9999},\n        headers=headers\n    )\n    assert response.status_code == 400\n    assert "Insufficient stock" in response.json()["detail"]\n\ndef test_pay_order():\n    headers = get_auth_headers()\n\n    # \uc8fc\ubb38 \uc0dd\uc131\n    client.post("/cart/items", json={"product_id": 1, "quantity": 1}, headers=headers)\n    order_response = client.post("/orders", headers=headers)\n    order_id = order_response.json()["id"]\n\n    # \uacb0\uc81c\n    response = client.post(\n        f"/orders/{order_id}/pay",\n        json={"payment_method": "card"},\n        headers=headers\n    )\n    assert response.status_code == 200\n    assert "Payment successful" in response.json()["message"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,s.jsx)(n.h3,{id:"\ud2b8\ub79c\uc7ad\uc158-\ucc98\ub9ac",children:"\ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SQLAlchemy\uc758 \uc790\ub3d9 \ud2b8\ub79c\uc7ad\uc158 \ud65c\uc6a9"}),"\n",(0,s.jsxs)(n.li,{children:["\uc624\ub958 \ubc1c\uc0dd \uc2dc ",(0,s.jsx)(n.code,{children:"db.rollback()"}),"\uc73c\ub85c \ub864\ubc31"]}),"\n",(0,s.jsx)(n.li,{children:"\uc7ac\uace0 \ucc28\uac10\uacfc \uc8fc\ubb38 \uc0dd\uc131\uc744 \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ub370\uc774\ud130-\uc77c\uad00\uc131",children:"\ub370\uc774\ud130 \uc77c\uad00\uc131"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\uc8fc\ubb38 \uc2dc\uc810\uc758 \uac00\uaca9\uc744 OrderItem\uc5d0 \uc800\uc7a5"}),"\n",(0,s.jsx)(n.li,{children:"\uc7ac\uace0 \ud655\uc778 \ud6c4 \ucc28\uac10"}),"\n",(0,s.jsx)(n.li,{children:"Enum\uc73c\ub85c \uc8fc\ubb38 \uc0c1\ud0dc \uad00\ub9ac"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,s.jsx)(n.a,{href:"./scenario-04-realtime-chat",children:"\uc2e4\uc2dc\uac04 \ucc44\ud305"})]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);