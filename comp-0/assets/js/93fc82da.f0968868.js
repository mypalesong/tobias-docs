"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[9237],{1149:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"fastapi/examples/scenario-12-graphql-api","title":"\uc2dc\ub098\ub9ac\uc624 12: GraphQL API","description":"Strawberry\ub97c \ud65c\uc6a9\ud55c GraphQL API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-12-graphql-api.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-12-graphql-api","permalink":"/docs/fastapi/examples/scenario-12-graphql-api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-12-graphql-api.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 11: \uac80\uc0c9 \uc5d4\uc9c4 API","permalink":"/docs/fastapi/examples/scenario-11-search-engine"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 13: \ub370\uc774\ud130 \ubd84\uc11d \ub300\uc2dc\ubcf4\ub4dc API","permalink":"/docs/fastapi/examples/scenario-13-analytics-dashboard"}}');var o=r(4848),t=r(8453);const a={sidebar_position:13},s="\uc2dc\ub098\ub9ac\uc624 12: GraphQL API",d={},l=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"graphql_schema.py",id:"graphql_schemapy",level:3},{value:"dataloader.py",id:"dataloaderpy",level:3},{value:"pubsub.py",id:"pubsubpy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\udd0d GraphQL \ucffc\ub9ac \uc608\uc81c",id:"-graphql-\ucffc\ub9ac-\uc608\uc81c",level:2},{value:"\uae30\ubcf8 \ucffc\ub9ac",id:"\uae30\ubcf8-\ucffc\ub9ac",level:3},{value:"\uc911\ucca9 \ucffc\ub9ac",id:"\uc911\ucca9-\ucffc\ub9ac",level:3},{value:"\ud544\ud130\ub9c1 \ubc0f \ud398\uc774\uc9c0\ub124\uc774\uc158",id:"\ud544\ud130\ub9c1-\ubc0f-\ud398\uc774\uc9c0\ub124\uc774\uc158",level:3},{value:"\ubba4\ud14c\uc774\uc158",id:"\ubba4\ud14c\uc774\uc158",level:3},{value:"\uad6c\ub3c5",id:"\uad6c\ub3c5",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"DataLoader",id:"dataloader",level:3},{value:"Relay Pagination",id:"relay-pagination",level:3},{value:"Subscription",id:"subscription",level:3},{value:"\ud0c0\uc785 \uc2dc\uc2a4\ud15c",id:"\ud0c0\uc785-\uc2dc\uc2a4\ud15c",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"\uc2dc\ub098\ub9ac\uc624-12-graphql-api",children:"\uc2dc\ub098\ub9ac\uc624 12: GraphQL API"})}),"\n",(0,o.jsx)(e.p,{children:"Strawberry\ub97c \ud65c\uc6a9\ud55c GraphQL API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,o.jsx)(e.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u2705 GraphQL \ucffc\ub9ac/\ubba4\ud14c\uc774\uc158/\uad6c\ub3c5"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 \ubcf5\uc7a1\ud55c \uc911\ucca9 \ucffc\ub9ac"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 DataLoader\ub85c N+1 \ubb38\uc81c \ud574\uacb0"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 \ud544\ub4dc \ub808\ubca8 \uad8c\ud55c"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 \ud398\uc774\uc9c0\ub124\uc774\uc158 (Relay \uc2a4\ud0c0\uc77c)"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 GraphQL Playground"}),"\n",(0,o.jsx)(e.li,{children:"\u2705 \uc2e4\uc2dc\uac04 \uad6c\ub3c5 (WebSocket)"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"graphql-api/\n\u251c\u2500\u2500 main.py                 # FastAPI + Strawberry GraphQL\n\u251c\u2500\u2500 models.py               # SQLAlchemy \ubaa8\ub378\n\u251c\u2500\u2500 schema.py               # GraphQL \uc2a4\ud0a4\ub9c8 \uc815\uc758\n\u251c\u2500\u2500 types.py                # GraphQL \ud0c0\uc785\n\u251c\u2500\u2500 resolvers.py            # GraphQL \ub9ac\uc878\ubc84\n\u251c\u2500\u2500 dataloaders.py          # DataLoader (N+1 \ud574\uacb0)\n\u251c\u2500\u2500 permissions.py          # \uad8c\ud55c \uccb4\ud06c\n\u2514\u2500\u2500 requirements.txt        # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant C as Client\n    participant GQL as GraphQL\n    participant DL as DataLoader\n    participant DB as Database\n\n    Note over C,DB: 1. \uc911\ucca9 \ucffc\ub9ac (N+1 \ud574\uacb0)\n    C->>GQL: query {<br/>  authors {<br/>    books { title }<br/>  }<br/>}\n    GQL->>DB: SELECT * FROM authors\n    DB--\x3e>GQL: Authors list\n    loop For each author\n        GQL->>DL: Load books for author_id\n    end\n    DL->>DL: Batch all author_ids\n    DL->>DB: SELECT * FROM books<br/>WHERE author_id IN (...)\n    DB--\x3e>DL: All books (single query)\n    DL--\x3e>GQL: Books grouped by author\n    GQL--\x3e>C: JSON response\n\n    Note over C,DB: 2. \ubba4\ud14c\uc774\uc158\n    C->>GQL: mutation {<br/>  createBook(input) {<br/>    id title<br/>  }<br/>}\n    GQL->>GQL: Check permissions\n    GQL->>DB: INSERT INTO books\n    DB--\x3e>GQL: Book created\n    GQL--\x3e>C: Book data\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,o.jsx)(e.h3,{id:"modelspy",children:"models.py"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Text, Float\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\n\nclass Author(Base):\n    __tablename__ = "authors"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, index=True)\n    email = Column(String, unique=True)\n    bio = Column(Text, nullable=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    books = relationship("Book", back_populates="author")\n\nclass Book(Base):\n    __tablename__ = "books"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(Text)\n    isbn = Column(String, unique=True)\n    price = Column(Float)\n    published_date = Column(DateTime(timezone=True))\n    author_id = Column(Integer, ForeignKey(\'authors.id\'))\n\n    author = relationship("Author", back_populates="books")\n    reviews = relationship("Review", back_populates="book")\n\nclass Review(Base):\n    __tablename__ = "reviews"\n\n    id = Column(Integer, primary_key=True)\n    book_id = Column(Integer, ForeignKey(\'books.id\'))\n    user_id = Column(Integer, ForeignKey(\'users.id\'))\n    rating = Column(Integer)  # 1-5\n    comment = Column(Text)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    book = relationship("Book", back_populates="reviews")\n    user = relationship("User")\n'})}),"\n",(0,o.jsx)(e.h3,{id:"graphql_schemapy",children:"graphql_schema.py"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import strawberry\nfrom strawberry.types import Info\nfrom typing import List, Optional\nfrom datetime import datetime\nfrom sqlalchemy.orm import Session\nimport models\n\n# ==================== Types ====================\n\n@strawberry.type\nclass Author:\n    id: int\n    name: str\n    email: str\n    bio: Optional[str]\n    created_at: datetime\n\n    @strawberry.field\n    async def books(self, info: Info) -> List["Book"]:\n        """\uc791\uac00\uc758 \ucc45 \ubaa9\ub85d"""\n        db: Session = info.context["db"]\n        return db.query(models.Book).filter(\n            models.Book.author_id == self.id\n        ).all()\n\n    @strawberry.field\n    def book_count(self, info: Info) -> int:\n        """\ucc45 \uac1c\uc218"""\n        db: Session = info.context["db"]\n        return db.query(models.Book).filter(\n            models.Book.author_id == self.id\n        ).count()\n\n@strawberry.type\nclass Book:\n    id: int\n    title: str\n    description: str\n    isbn: str\n    price: float\n    published_date: datetime\n    author_id: int\n\n    @strawberry.field\n    async def author(self, info: Info) -> Author:\n        """\uc791\uac00 \uc815\ubcf4"""\n        db: Session = info.context["db"]\n\n        # DataLoader \uc0ac\uc6a9 (N+1 \ubb38\uc81c \ud574\uacb0)\n        loader = info.context["author_loader"]\n        db_author = await loader.load(self.author_id)\n\n        return Author(\n            id=db_author.id,\n            name=db_author.name,\n            email=db_author.email,\n            bio=db_author.bio,\n            created_at=db_author.created_at\n        )\n\n    @strawberry.field\n    def reviews(self, info: Info) -> List["Review"]:\n        """\ub9ac\ubdf0 \ubaa9\ub85d"""\n        db: Session = info.context["db"]\n        return db.query(models.Review).filter(\n            models.Review.book_id == self.id\n        ).all()\n\n    @strawberry.field\n    def average_rating(self, info: Info) -> Optional[float]:\n        """\ud3c9\uade0 \ud3c9\uc810"""\n        db: Session = info.context["db"]\n        from sqlalchemy import func\n\n        result = db.query(\n            func.avg(models.Review.rating)\n        ).filter(\n            models.Review.book_id == self.id\n        ).scalar()\n\n        return float(result) if result else None\n\n@strawberry.type\nclass Review:\n    id: int\n    rating: int\n    comment: str\n    created_at: datetime\n    book_id: int\n    user_id: int\n\n    @strawberry.field\n    def book(self, info: Info) -> Book:\n        """\ub9ac\ubdf0 \ub300\uc0c1 \ucc45"""\n        db: Session = info.context["db"]\n        db_book = db.query(models.Book).filter(\n            models.Book.id == self.book_id\n        ).first()\n\n        return Book(\n            id=db_book.id,\n            title=db_book.title,\n            description=db_book.description,\n            isbn=db_book.isbn,\n            price=db_book.price,\n            published_date=db_book.published_date,\n            author_id=db_book.author_id\n        )\n\n# ==================== Pagination ====================\n\n@strawberry.type\nclass PageInfo:\n    has_next_page: bool\n    has_previous_page: bool\n    start_cursor: Optional[str]\n    end_cursor: Optional[str]\n\n@strawberry.type\nclass BookEdge:\n    node: Book\n    cursor: str\n\n@strawberry.type\nclass BookConnection:\n    edges: List[BookEdge]\n    page_info: PageInfo\n    total_count: int\n\n# ==================== Inputs ====================\n\n@strawberry.input\nclass CreateAuthorInput:\n    name: str\n    email: str\n    bio: Optional[str] = None\n\n@strawberry.input\nclass CreateBookInput:\n    title: str\n    description: str\n    isbn: str\n    price: float\n    published_date: datetime\n    author_id: int\n\n@strawberry.input\nclass CreateReviewInput:\n    book_id: int\n    rating: int\n    comment: str\n\n@strawberry.input\nclass BookFilter:\n    author_id: Optional[int] = None\n    min_price: Optional[float] = None\n    max_price: Optional[float] = None\n    search: Optional[str] = None\n\n# ==================== Query ====================\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def authors(self, info: Info, limit: int = 10) -> List[Author]:\n        """\uc791\uac00 \ubaa9\ub85d"""\n        db: Session = info.context["db"]\n        db_authors = db.query(models.Author).limit(limit).all()\n\n        return [\n            Author(\n                id=a.id,\n                name=a.name,\n                email=a.email,\n                bio=a.bio,\n                created_at=a.created_at\n            )\n            for a in db_authors\n        ]\n\n    @strawberry.field\n    def author(self, info: Info, id: int) -> Optional[Author]:\n        """\uc791\uac00 \uc870\ud68c"""\n        db: Session = info.context["db"]\n        db_author = db.query(models.Author).filter(\n            models.Author.id == id\n        ).first()\n\n        if not db_author:\n            return None\n\n        return Author(\n            id=db_author.id,\n            name=db_author.name,\n            email=db_author.email,\n            bio=db_author.bio,\n            created_at=db_author.created_at\n        )\n\n    @strawberry.field\n    def books(\n        self,\n        info: Info,\n        filter: Optional[BookFilter] = None,\n        first: int = 10,\n        after: Optional[str] = None\n    ) -> BookConnection:\n        """\ucc45 \ubaa9\ub85d (Relay Pagination)"""\n        db: Session = info.context["db"]\n\n        query = db.query(models.Book)\n\n        # \ud544\ud130 \uc801\uc6a9\n        if filter:\n            if filter.author_id:\n                query = query.filter(models.Book.author_id == filter.author_id)\n\n            if filter.min_price:\n                query = query.filter(models.Book.price >= filter.min_price)\n\n            if filter.max_price:\n                query = query.filter(models.Book.price <= filter.max_price)\n\n            if filter.search:\n                query = query.filter(\n                    models.Book.title.ilike(f"%{filter.search}%")\n                )\n\n        # \ucee4\uc11c \uae30\ubc18 \ud398\uc774\uc9c0\ub124\uc774\uc158\n        if after:\n            import base64\n            cursor_id = int(base64.b64decode(after).decode())\n            query = query.filter(models.Book.id > cursor_id)\n\n        total_count = query.count()\n        db_books = query.limit(first + 1).all()\n\n        has_next_page = len(db_books) > first\n        if has_next_page:\n            db_books = db_books[:first]\n\n        edges = []\n        for book in db_books:\n            import base64\n            cursor = base64.b64encode(str(book.id).encode()).decode()\n\n            edges.append(BookEdge(\n                node=Book(\n                    id=book.id,\n                    title=book.title,\n                    description=book.description,\n                    isbn=book.isbn,\n                    price=book.price,\n                    published_date=book.published_date,\n                    author_id=book.author_id\n                ),\n                cursor=cursor\n            ))\n\n        return BookConnection(\n            edges=edges,\n            page_info=PageInfo(\n                has_next_page=has_next_page,\n                has_previous_page=after is not None,\n                start_cursor=edges[0].cursor if edges else None,\n                end_cursor=edges[-1].cursor if edges else None\n            ),\n            total_count=total_count\n        )\n\n    @strawberry.field\n    def book(self, info: Info, id: int) -> Optional[Book]:\n        """\ucc45 \uc870\ud68c"""\n        db: Session = info.context["db"]\n        db_book = db.query(models.Book).filter(models.Book.id == id).first()\n\n        if not db_book:\n            return None\n\n        return Book(\n            id=db_book.id,\n            title=db_book.title,\n            description=db_book.description,\n            isbn=db_book.isbn,\n            price=db_book.price,\n            published_date=db_book.published_date,\n            author_id=db_book.author_id\n        )\n\n# ==================== Mutation ====================\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def create_author(self, info: Info, input: CreateAuthorInput) -> Author:\n        """\uc791\uac00 \uc0dd\uc131"""\n        db: Session = info.context["db"]\n\n        db_author = models.Author(\n            name=input.name,\n            email=input.email,\n            bio=input.bio\n        )\n\n        db.add(db_author)\n        db.commit()\n        db.refresh(db_author)\n\n        return Author(\n            id=db_author.id,\n            name=db_author.name,\n            email=db_author.email,\n            bio=db_author.bio,\n            created_at=db_author.created_at\n        )\n\n    @strawberry.mutation\n    def create_book(self, info: Info, input: CreateBookInput) -> Book:\n        """\ucc45 \uc0dd\uc131"""\n        db: Session = info.context["db"]\n\n        db_book = models.Book(\n            title=input.title,\n            description=input.description,\n            isbn=input.isbn,\n            price=input.price,\n            published_date=input.published_date,\n            author_id=input.author_id\n        )\n\n        db.add(db_book)\n        db.commit()\n        db.refresh(db_book)\n\n        return Book(\n            id=db_book.id,\n            title=db_book.title,\n            description=db_book.description,\n            isbn=db_book.isbn,\n            price=db_book.price,\n            published_date=db_book.published_date,\n            author_id=db_book.author_id\n        )\n\n    @strawberry.mutation\n    def create_review(self, info: Info, input: CreateReviewInput) -> Review:\n        """\ub9ac\ubdf0 \uc791\uc131"""\n        db: Session = info.context["db"]\n        user = info.context.get("user")\n\n        if not user:\n            raise Exception("Authentication required")\n\n        db_review = models.Review(\n            book_id=input.book_id,\n            user_id=user.id,\n            rating=input.rating,\n            comment=input.comment\n        )\n\n        db.add(db_review)\n        db.commit()\n        db.refresh(db_review)\n\n        # \uad6c\ub3c5\uc790\ub4e4\uc5d0\uac8c \uc54c\ub9bc\n        pubsub = info.context["pubsub"]\n        pubsub.publish(f"book_{input.book_id}", db_review)\n\n        return Review(\n            id=db_review.id,\n            rating=db_review.rating,\n            comment=db_review.comment,\n            created_at=db_review.created_at,\n            book_id=db_review.book_id,\n            user_id=db_review.user_id\n        )\n\n# ==================== Subscription ====================\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def review_added(self, info: Info, book_id: int) -> Review:\n        """\uc0c8 \ub9ac\ubdf0 \uc2e4\uc2dc\uac04 \uad6c\ub3c5"""\n        pubsub = info.context["pubsub"]\n\n        async for review in pubsub.subscribe(f"book_{book_id}"):\n            yield Review(\n                id=review.id,\n                rating=review.rating,\n                comment=review.comment,\n                created_at=review.created_at,\n                book_id=review.book_id,\n                user_id=review.user_id\n            )\n\n# ==================== Schema ====================\n\nschema = strawberry.Schema(\n    query=Query,\n    mutation=Mutation,\n    subscription=Subscription\n)\n'})}),"\n",(0,o.jsx)(e.h3,{id:"dataloaderpy",children:"dataloader.py"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from strawberry.dataloader import DataLoader\nfrom sqlalchemy.orm import Session\nfrom typing import List\nimport models\n\nasync def load_authors(keys: List[int], db: Session) -> List[models.Author]:\n    """\uc791\uac00 \ubc30\uce58 \ub85c\ub529 (N+1 \ubb38\uc81c \ud574\uacb0)"""\n    authors = db.query(models.Author).filter(\n        models.Author.id.in_(keys)\n    ).all()\n\n    # \ud0a4 \uc21c\uc11c\ub300\ub85c \uc815\ub82c\n    author_map = {author.id: author for author in authors}\n    return [author_map.get(key) for key in keys]\n\ndef get_author_loader(db: Session) -> DataLoader:\n    """DataLoader \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131"""\n    async def load_fn(keys):\n        return await load_authors(keys, db)\n\n    return DataLoader(load_fn=load_fn)\n'})}),"\n",(0,o.jsx)(e.h3,{id:"pubsubpy",children:"pubsub.py"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom typing import AsyncGenerator, Dict, Set\n\nclass PubSub:\n    """\uac04\ub2e8\ud55c PubSub \uad6c\ud604 (\uc2e4\uc81c\ub85c\ub294 Redis \uc0ac\uc6a9 \uad8c\uc7a5)"""\n\n    def __init__(self):\n        self.subscribers: Dict[str, Set[asyncio.Queue]] = {}\n\n    def publish(self, channel: str, message):\n        """\uba54\uc2dc\uc9c0 \ubc1c\ud589"""\n        if channel in self.subscribers:\n            for queue in self.subscribers[channel]:\n                queue.put_nowait(message)\n\n    async def subscribe(self, channel: str) -> AsyncGenerator:\n        """\ucc44\ub110 \uad6c\ub3c5"""\n        queue = asyncio.Queue()\n\n        if channel not in self.subscribers:\n            self.subscribers[channel] = set()\n\n        self.subscribers[channel].add(queue)\n\n        try:\n            while True:\n                message = await queue.get()\n                yield message\n        finally:\n            self.subscribers[channel].remove(queue)\n            if not self.subscribers[channel]:\n                del self.subscribers[channel]\n'})}),"\n",(0,o.jsx)(e.h3,{id:"mainpy",children:"main.py"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from fastapi import FastAPI, Depends\nfrom strawberry.fastapi import GraphQLRouter\nfrom sqlalchemy.orm import Session\nimport models\nfrom database import engine, get_db\nfrom graphql_schema import schema\nfrom dataloader import get_author_loader\nfrom pubsub import PubSub\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="GraphQL API")\n\n# PubSub \uc778\uc2a4\ud134\uc2a4\npubsub = PubSub()\n\n# Context \uc0dd\uc131\nasync def get_context(db: Session = Depends(get_db)):\n    return {\n        "db": db,\n        "author_loader": get_author_loader(db),\n        "pubsub": pubsub,\n        # "user": current_user  # \uc778\uc99d\ub41c \uc0ac\uc6a9\uc790\n    }\n\n# GraphQL Router\ngraphql_app = GraphQLRouter(\n    schema,\n    context_getter=get_context,\n    graphiql=True  # GraphQL Playground \ud65c\uc131\ud654\n)\n\napp.include_router(graphql_app, prefix="/graphql")\n\n@app.get("/")\ndef root():\n    return {\n        "message": "GraphQL API",\n        "graphql_endpoint": "/graphql",\n        "playground": "/graphql"\n    }\n'})}),"\n",(0,o.jsx)(e.h2,{id:"-graphql-\ucffc\ub9ac-\uc608\uc81c",children:"\ud83d\udd0d GraphQL \ucffc\ub9ac \uc608\uc81c"}),"\n",(0,o.jsx)(e.h3,{id:"\uae30\ubcf8-\ucffc\ub9ac",children:"\uae30\ubcf8 \ucffc\ub9ac"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-graphql",children:"query {\n  authors(limit: 5) {\n    id\n    name\n    email\n    bookCount\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"\uc911\ucca9-\ucffc\ub9ac",children:"\uc911\ucca9 \ucffc\ub9ac"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-graphql",children:"query {\n  author(id: 1) {\n    name\n    books {\n      title\n      price\n      reviews {\n        rating\n        comment\n      }\n      averageRating\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"\ud544\ud130\ub9c1-\ubc0f-\ud398\uc774\uc9c0\ub124\uc774\uc158",children:"\ud544\ud130\ub9c1 \ubc0f \ud398\uc774\uc9c0\ub124\uc774\uc158"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-graphql",children:'query {\n  books(\n    filter: { authorId: 1, minPrice: 10.0 }\n    first: 10\n    after: "Y3Vyc29yMQ=="\n  ) {\n    edges {\n      node {\n        title\n        price\n        author {\n          name\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    totalCount\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"\ubba4\ud14c\uc774\uc158",children:"\ubba4\ud14c\uc774\uc158"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-graphql",children:'mutation {\n  createBook(input: {\n    title: "FastAPI GraphQL Guide"\n    description: "Learn GraphQL with FastAPI"\n    isbn: "978-1234567890"\n    price: 29.99\n    publishedDate: "2024-01-01T00:00:00Z"\n    authorId: 1\n  }) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"\uad6c\ub3c5",children:"\uad6c\ub3c5"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-graphql",children:"subscription {\n  reviewAdded(bookId: 1) {\n    rating\n    comment\n    createdAt\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,o.jsx)(e.h3,{id:"dataloader",children:"DataLoader"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"N+1 \ubb38\uc81c \ud574\uacb0"}),"\n",(0,o.jsx)(e.li,{children:"\ubc30\uce58 \ub85c\ub529\uc73c\ub85c \ucffc\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,o.jsx)(e.li,{children:"\uc694\uccad\ub2f9 \uce90\uc2f1"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"relay-pagination",children:"Relay Pagination"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\ucee4\uc11c \uae30\ubc18 \ud398\uc774\uc9c0\ub124\uc774\uc158"}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"edges"}),", ",(0,o.jsx)(e.code,{children:"node"}),", ",(0,o.jsx)(e.code,{children:"pageInfo"})," \ud328\ud134"]}),"\n",(0,o.jsx)(e.li,{children:"\ubb34\ud55c \uc2a4\ud06c\ub864\uc5d0 \ucd5c\uc801"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"subscription",children:"Subscription"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"WebSocket \uae30\ubc18 \uc2e4\uc2dc\uac04 \ud1b5\uc2e0"}),"\n",(0,o.jsx)(e.li,{children:"PubSub \ud328\ud134"}),"\n",(0,o.jsx)(e.li,{children:"\uc774\ubca4\ud2b8 \uae30\ubc18 \uc5c5\ub370\uc774\ud2b8"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"\ud0c0\uc785-\uc2dc\uc2a4\ud15c",children:"\ud0c0\uc785 \uc2dc\uc2a4\ud15c"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Strawberry\uc758 \uac15\ub825\ud55c \ud0c0\uc785 \ud78c\ud2b8"}),"\n",(0,o.jsx)(e.li,{children:"\uc790\ub3d9 \uc2a4\ud0a4\ub9c8 \uc0dd\uc131"}),"\n",(0,o.jsx)(e.li,{children:"IDE \uc790\ub3d9\uc644\uc131 \uc9c0\uc6d0"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,o.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,o.jsx)(e.a,{href:"./scenario-13-analytics-dashboard",children:"\ub370\uc774\ud130 \ubd84\uc11d \ub300\uc2dc\ubcf4\ub4dc API"})]})]})}function b(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>s});var i=r(6540);const o={},t=i.createContext(o);function a(n){const e=i.useContext(t);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);