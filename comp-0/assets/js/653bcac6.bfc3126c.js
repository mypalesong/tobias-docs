"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[4728],{1225:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"crawling/examples/scenario-04-job-board","title":"\uc2dc\ub098\ub9ac\uc624 4: \ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud37c","description":"\uc6d0\ud558\ub294 \uc9c1\ubb34\uc758 \ucc44\uc6a9 \uacf5\uace0\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\uc9d1\ud558\uace0, \uae30\uc5c5 \ub85c\uace0\uc640 \uc2a4\ud06c\ub9b0\uc0f7\uc744 \uc800\uc7a5\ud558\ub294 \uc2a4\ud06c\ub798\ud37c\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/crawling/examples/scenario-04-job-board.md","sourceDirName":"crawling/examples","slug":"/crawling/examples/scenario-04-job-board","permalink":"/docs/crawling/examples/scenario-04-job-board","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/crawling/examples/scenario-04-job-board.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"crawlingSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 3: \uc18c\uc15c \ubbf8\ub514\uc5b4 \ub370\uc774\ud130 \uc218\uc9d1","permalink":"/docs/crawling/examples/scenario-03-social-media"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 5: \ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc2a4\ud06c\ub798\ud37c","permalink":"/docs/crawling/examples/scenario-05-real-estate"}}');var i=t(4848),r=t(8453);const a={sidebar_position:5},s="\uc2dc\ub098\ub9ac\uc624 4: \ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud37c",l={},d=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604",id:"-\uc644\uc804\ud55c-\uad6c\ud604",level:2},{value:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:3},{value:"requirements.txt",id:"requirementstxt",level:3},{value:"config.py",id:"configpy",level:3},{value:"database/models.py",id:"databasemodelspy",level:3},{value:"database/crud.py",id:"databasecrudpy",level:3},{value:"scraper/image_manager.py",id:"scraperimage_managerpy",level:3},{value:"scraper/job_scraper.py",id:"scraperjob_scraperpy",level:3},{value:"scraper/notifier.py",id:"scrapernotifierpy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95",id:"-\uc2e4\ud589-\ubc29\ubc95",level:2},{value:"\ud83c\udfa8 \ucd9c\ub825 \uc608\uc2dc",id:"-\ucd9c\ub825-\uc608\uc2dc",level:2},{value:"\ud83d\udd0d \ud655\uc7a5 \uc544\uc774\ub514\uc5b4",id:"-\ud655\uc7a5-\uc544\uc774\ub514\uc5b4",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"\uc2dc\ub098\ub9ac\uc624-4-\ucc44\uc6a9-\uacf5\uace0-\uc2a4\ud06c\ub798\ud37c",children:"\uc2dc\ub098\ub9ac\uc624 4: \ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud37c"})}),"\n",(0,i.jsx)(e.p,{children:"\uc6d0\ud558\ub294 \uc9c1\ubb34\uc758 \ucc44\uc6a9 \uacf5\uace0\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\uc9d1\ud558\uace0, \uae30\uc5c5 \ub85c\uace0\uc640 \uc2a4\ud06c\ub9b0\uc0f7\uc744 \uc800\uc7a5\ud558\ub294 \uc2a4\ud06c\ub798\ud37c\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,i.jsx)(e.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Indeed, LinkedIn \uc2a4\ud0c0\uc77c \ucc44\uc6a9 \uc0ac\uc774\ud2b8\uc5d0\uc11c \uacf5\uace0 \uc218\uc9d1"}),"\n",(0,i.jsx)(e.li,{children:"\uc81c\ubaa9, \ud68c\uc0ac\uba85, \uc704\uce58, \uc5f0\ubd09, \uc124\uba85, \uc694\uad6c\uc0ac\ud56d \ucd94\ucd9c"}),"\n",(0,i.jsx)(e.li,{children:"\uae30\uc5c5 \ub85c\uace0 \ubc0f \ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub9b0\uc0f7 \ub2e4\uc6b4\ub85c\ub4dc"}),"\n",(0,i.jsx)(e.li,{children:"\ud0a4\uc6cc\ub4dc \ud544\ud130\ub9c1 \ubc0f \uac80\uc0c9"}),"\n",(0,i.jsx)(e.li,{children:"\uc911\ubcf5 \uac10\uc9c0 \ubc0f \uc774\uba54\uc77c \uc54c\ub9bc"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"-\uc644\uc804\ud55c-\uad6c\ud604",children:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604"}),"\n",(0,i.jsx)(e.h3,{id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"job_board_scraper/\n\u251c\u2500\u2500 scraper/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 job_scraper.py\n\u2502   \u251c\u2500\u2500 image_manager.py\n\u2502   \u2514\u2500\u2500 notifier.py\n\u251c\u2500\u2500 database/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2514\u2500\u2500 crud.py\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u251c\u2500\u2500 logos/\n\u2502   \u2502   \u2514\u2500\u2500 screenshots/\n\u2502   \u2514\u2500\u2500 exports/\n\u251c\u2500\u2500 logs/\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n"})}),"\n",(0,i.jsx)(e.h3,{id:"requirementstxt",children:"requirements.txt"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-txt",children:"playwright==1.40.0\nsqlalchemy==2.0.23\nalembic==1.13.0\npillow==10.1.0\npython-dotenv==1.0.0\npydantic==2.5.0\npydantic-settings==2.1.0\nrequests==2.31.0\n"})}),"\n",(0,i.jsx)(e.h3,{id:"configpy",children:"config.py"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import os\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    # \ube0c\ub77c\uc6b0\uc800 \uc124\uc815\n    HEADLESS: bool = True\n    TIMEOUT: int = 30000\n\n    # \ud0c0\uac9f \uc0ac\uc774\ud2b8\n    BASE_URL: str = 'https://www.linkedin.com/jobs/search/'\n\n    # \uac80\uc0c9 \uc124\uc815\n    KEYWORDS: list[str] = ['Python Developer', 'Data Engineer', 'DevOps']\n    LOCATIONS: list[str] = ['Seoul', 'Remote']\n    MAX_JOBS_PER_SEARCH: int = 50\n\n    # \ud544\ud130 \uc124\uc815\n    MIN_SALARY: int = 50000  # USD\n    EXPERIENCE_LEVELS: list[str] = ['Entry level', 'Mid-Senior level']\n\n    # \ub514\ub809\ud1a0\ub9ac\n    BASE_DIR: str = os.path.dirname(os.path.abspath(__file__))\n    DATA_DIR: str = os.path.join(BASE_DIR, 'data')\n    IMAGES_DIR: str = os.path.join(DATA_DIR, 'images')\n    LOGOS_DIR: str = os.path.join(IMAGES_DIR, 'logos')\n    SCREENSHOTS_DIR: str = os.path.join(IMAGES_DIR, 'screenshots')\n    EXPORTS_DIR: str = os.path.join(DATA_DIR, 'exports')\n    LOGS_DIR: str = os.path.join(BASE_DIR, 'logs')\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4\n    DATABASE_URL: str = 'sqlite:///jobs.db'\n\n    # \uc774\uba54\uc77c \uc54c\ub9bc (\uc120\ud0dd)\n    ENABLE_EMAIL: bool = False\n    SMTP_SERVER: str = 'smtp.gmail.com'\n    SMTP_PORT: int = 587\n    EMAIL_FROM: str = ''\n    EMAIL_TO: str = ''\n    EMAIL_PASSWORD: str = ''\n\n    class Config:\n        env_file = '.env'\n\n    @classmethod\n    def ensure_directories(cls):\n        \"\"\"\ud544\uc694\ud55c \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\"\"\"\n        settings = cls()\n        for directory in [\n            settings.LOGOS_DIR,\n            settings.SCREENSHOTS_DIR,\n            settings.EXPORTS_DIR,\n            settings.LOGS_DIR\n        ]:\n            os.makedirs(directory, exist_ok=True)\n\nsettings = Settings()\n"})}),"\n",(0,i.jsx)(e.h3,{id:"databasemodelspy",children:"database/models.py"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import (\n    Column, Integer, String, Text, DateTime,\n    Float, Boolean, ForeignKey, create_engine\n)\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship, sessionmaker\nfrom datetime import datetime\n\nBase = declarative_base()\n\nclass Company(Base):\n    __tablename__ = 'companies'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(200), unique=True, nullable=False)\n    website = Column(String(500))\n    logo_url = Column(String(500))\n    logo_path = Column(String(500))  # \ub85c\uceec \uc800\uc7a5 \uacbd\ub85c\n    industry = Column(String(100))\n    size = Column(String(50))\n    created_at = Column(DateTime, default=datetime.now)\n\n    # \uad00\uacc4\n    jobs = relationship('Job', back_populates='company')\n\nclass Job(Base):\n    __tablename__ = 'jobs'\n\n    id = Column(Integer, primary_key=True)\n    external_id = Column(String(100), unique=True)  # \uc0ac\uc774\ud2b8\ubcc4 \uace0\uc720 ID\n    company_id = Column(Integer, ForeignKey('companies.id'))\n\n    title = Column(String(200), nullable=False)\n    location = Column(String(100))\n    work_type = Column(String(50))  # Remote, Hybrid, On-site\n    experience_level = Column(String(50))\n    employment_type = Column(String(50))  # Full-time, Part-time, Contract\n\n    description = Column(Text)\n    requirements = Column(Text)\n    benefits = Column(Text)\n\n    salary_min = Column(Float)\n    salary_max = Column(Float)\n    salary_currency = Column(String(10), default='USD')\n\n    url = Column(String(500))\n    screenshot_path = Column(String(500))  # \uc2a4\ud06c\ub9b0\uc0f7 \uacbd\ub85c\n\n    posted_date = Column(DateTime)\n    scraped_at = Column(DateTime, default=datetime.now)\n    is_active = Column(Boolean, default=True)\n\n    # \uad00\uacc4\n    company = relationship('Company', back_populates='jobs')\n    applications = relationship('Application', back_populates='job')\n\nclass Application(Base):\n    __tablename__ = 'applications'\n\n    id = Column(Integer, primary_key=True)\n    job_id = Column(Integer, ForeignKey('jobs.id'))\n\n    status = Column(String(50), default='interested')  # interested, applied, interview, rejected, accepted\n    applied_date = Column(DateTime)\n    notes = Column(Text)\n    created_at = Column(DateTime, default=datetime.now)\n\n    # \uad00\uacc4\n    job = relationship('Job', back_populates='applications')\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd08\uae30\ud654\ndef init_db(database_url: str):\n    engine = create_engine(database_url)\n    Base.metadata.create_all(engine)\n    return sessionmaker(bind=engine)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"databasecrudpy",children:"database/crud.py"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from sqlalchemy.orm import Session\nfrom database.models import Company, Job, Application\nfrom typing import Optional, List\nfrom datetime import datetime\n\nclass CompanyCRUD:\n    @staticmethod\n    def get_or_create(db: Session, name: str, **kwargs) -> Company:\n        """\ud68c\uc0ac \uc870\ud68c \ub610\ub294 \uc0dd\uc131"""\n        company = db.query(Company).filter(Company.name == name).first()\n        if not company:\n            company = Company(name=name, **kwargs)\n            db.add(company)\n            db.commit()\n            db.refresh(company)\n        return company\n\n    @staticmethod\n    def update_logo(db: Session, company_id: int, logo_url: str, logo_path: str):\n        """\ub85c\uace0 \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8"""\n        company = db.query(Company).filter(Company.id == company_id).first()\n        if company:\n            company.logo_url = logo_url\n            company.logo_path = logo_path\n            db.commit()\n\nclass JobCRUD:\n    @staticmethod\n    def create(db: Session, external_id: str, company_id: int, **kwargs) -> Optional[Job]:\n        """\ucc44\uc6a9 \uacf5\uace0 \uc0dd\uc131 (\uc911\ubcf5 \uccb4\ud06c)"""\n        # \uc911\ubcf5 \uccb4\ud06c\n        existing = db.query(Job).filter(Job.external_id == external_id).first()\n        if existing:\n            return None  # \uc774\ubbf8 \uc874\uc7ac\n\n        job = Job(external_id=external_id, company_id=company_id, **kwargs)\n        db.add(job)\n        db.commit()\n        db.refresh(job)\n        return job\n\n    @staticmethod\n    def search(\n        db: Session,\n        keyword: Optional[str] = None,\n        location: Optional[str] = None,\n        min_salary: Optional[float] = None,\n        experience_level: Optional[str] = None\n    ) -> List[Job]:\n        """\ucc44\uc6a9 \uacf5\uace0 \uac80\uc0c9"""\n        query = db.query(Job).filter(Job.is_active == True)\n\n        if keyword:\n            query = query.filter(\n                (Job.title.ilike(f\'%{keyword}%\')) |\n                (Job.description.ilike(f\'%{keyword}%\'))\n            )\n\n        if location:\n            query = query.filter(Job.location.ilike(f\'%{location}%\'))\n\n        if min_salary:\n            query = query.filter(Job.salary_min >= min_salary)\n\n        if experience_level:\n            query = query.filter(Job.experience_level == experience_level)\n\n        return query.all()\n\n    @staticmethod\n    def mark_inactive(db: Session, external_id: str):\n        """\ucc44\uc6a9 \uacf5\uace0\ub97c \ube44\ud65c\uc131\ud654"""\n        job = db.query(Job).filter(Job.external_id == external_id).first()\n        if job:\n            job.is_active = False\n            db.commit()\n\nclass ApplicationCRUD:\n    @staticmethod\n    def create(db: Session, job_id: int, **kwargs) -> Application:\n        """\uc9c0\uc6d0 \uae30\ub85d \uc0dd\uc131"""\n        application = Application(job_id=job_id, **kwargs)\n        db.add(application)\n        db.commit()\n        db.refresh(application)\n        return application\n\n    @staticmethod\n    def update_status(db: Session, application_id: int, status: str, notes: str = \'\'):\n        """\uc9c0\uc6d0 \uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8"""\n        application = db.query(Application).filter(Application.id == application_id).first()\n        if application:\n            application.status = status\n            if notes:\n                application.notes = notes\n            db.commit()\n'})}),"\n",(0,i.jsx)(e.h3,{id:"scraperimage_managerpy",children:"scraper/image_manager.py"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import os\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom typing import Optional\nimport logging\nimport hashlib\n\nlogger = logging.getLogger(__name__)\n\nclass ImageManager:\n    def __init__(self, logos_dir: str, screenshots_dir: str):\n        self.logos_dir = logos_dir\n        self.screenshots_dir = screenshots_dir\n        self.session = requests.Session()\n        self.session.headers.update({\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        })\n\n    def download_logo(self, url: str, company_name: str) -> Optional[str]:\n        \"\"\"\ud68c\uc0ac \ub85c\uace0 \ub2e4\uc6b4\ub85c\ub4dc\"\"\"\n        try:\n            # \ud68c\uc0ac\uba85\uc744 \ud30c\uc77c\uba85\uc73c\ub85c \ubcc0\ud658\n            safe_name = \"\".join(c for c in company_name if c.isalnum() or c in (' ', '-', '_')).strip()\n            safe_name = safe_name.replace(' ', '_')\n\n            # URL\uc5d0\uc11c \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc\n            response = self.session.get(url, timeout=15)\n            response.raise_for_status()\n\n            img = Image.open(BytesIO(response.content))\n\n            # RGBA to RGB \ubcc0\ud658\n            if img.mode in ('RGBA', 'LA', 'P'):\n                background = Image.new('RGB', img.size, (255, 255, 255))\n                if img.mode == 'P':\n                    img = img.convert('RGBA')\n                background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)\n                img = background\n\n            # \ub85c\uace0 \ub9ac\uc0ac\uc774\uc988 (\uc815\uc0ac\uac01\ud615, \ucd5c\ub300 200x200)\n            img.thumbnail((200, 200), Image.Resampling.LANCZOS)\n\n            # \uc800\uc7a5\n            filepath = os.path.join(self.logos_dir, f\"{safe_name}.jpg\")\n            img.save(filepath, 'JPEG', quality=90)\n\n            logger.info(f\"\u2705 \ub85c\uace0 \uc800\uc7a5: {safe_name}\")\n            return filepath\n\n        except Exception as e:\n            logger.error(f\"\ub85c\uace0 \ub2e4\uc6b4\ub85c\ub4dc \uc2e4\ud328 ({company_name}): {e}\")\n            return None\n\n    def save_screenshot(self, screenshot_bytes: bytes, job_id: str) -> Optional[str]:\n        \"\"\"\ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub9b0\uc0f7 \uc800\uc7a5\"\"\"\n        try:\n            img = Image.open(BytesIO(screenshot_bytes))\n\n            # \uc801\uc808\ud55c \ud06c\uae30\ub85c \ub9ac\uc0ac\uc774\uc988 (\ub108\ube44 1200px \uc720\uc9c0)\n            max_width = 1200\n            if img.width > max_width:\n                ratio = max_width / img.width\n                new_height = int(img.height * ratio)\n                img = img.resize((max_width, new_height), Image.Resampling.LANCZOS)\n\n            # \uc800\uc7a5\n            filepath = os.path.join(self.screenshots_dir, f\"job_{job_id}.jpg\")\n            img.save(filepath, 'JPEG', quality=85)\n\n            logger.info(f\"\u2705 \uc2a4\ud06c\ub9b0\uc0f7 \uc800\uc7a5: job_{job_id}\")\n            return filepath\n\n        except Exception as e:\n            logger.error(f\"\uc2a4\ud06c\ub9b0\uc0f7 \uc800\uc7a5 \uc2e4\ud328 ({job_id}): {e}\")\n            return None\n\n    def create_thumbnail(self, image_path: str, size=(150, 150)) -> Optional[str]:\n        \"\"\"\uc378\ub124\uc77c \uc0dd\uc131\"\"\"\n        try:\n            img = Image.open(image_path)\n            img.thumbnail(size, Image.Resampling.LANCZOS)\n\n            thumb_path = image_path.replace('.jpg', '_thumb.jpg')\n            img.save(thumb_path, 'JPEG', quality=85)\n\n            return thumb_path\n\n        except Exception as e:\n            logger.error(f\"\uc378\ub124\uc77c \uc0dd\uc131 \uc2e4\ud328: {e}\")\n            return None\n"})}),"\n",(0,i.jsx)(e.h3,{id:"scraperjob_scraperpy",children:"scraper/job_scraper.py"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from playwright.sync_api import sync_playwright, Page\nfrom typing import List, Dict, Optional\nimport logging\nimport time\nimport re\nfrom datetime import datetime\n\nlogger = logging.getLogger(__name__)\n\nclass JobScraper:\n    def __init__(self, config):\n        self.config = config\n\n    def scrape_jobs(self, keyword: str, location: str) -> List[Dict]:\n        \"\"\"\ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud551\"\"\"\n        logger.info(f\"\uac80\uc0c9 \uc2dc\uc791: {keyword} in {location}\")\n\n        with sync_playwright() as p:\n            browser = p.chromium.launch(headless=self.config.HEADLESS)\n            context = browser.new_context(\n                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n                viewport={'width': 1920, 'height': 1080}\n            )\n            page = context.new_page()\n\n            try:\n                jobs = []\n\n                # \uac80\uc0c9 \ud398\uc774\uc9c0\ub85c \uc774\ub3d9\n                search_url = self._build_search_url(keyword, location)\n                page.goto(search_url, timeout=self.config.TIMEOUT)\n\n                # \ud398\uc774\uc9c0 \ub85c\ub4dc \ub300\uae30\n                page.wait_for_selector('.job-card-container, .jobs-search__results-list', timeout=10000)\n                time.sleep(2)\n\n                # \uc2a4\ud06c\ub864\ud558\uba70 \ub354 \ub9ce\uc740 \uacb0\uacfc \ub85c\ub4dc\n                self._scroll_to_load_more(page)\n\n                # \ucc44\uc6a9 \uacf5\uace0 \uce74\ub4dc \ucd94\ucd9c\n                job_cards = page.query_selector_all('.job-card-container, .base-card')\n\n                logger.info(f\"\ubc1c\uacac\ub41c \uacf5\uace0: {len(job_cards)}\uac1c\")\n\n                for idx, card in enumerate(job_cards[:self.config.MAX_JOBS_PER_SEARCH], 1):\n                    try:\n                        job_data = self._extract_job_card(card, page)\n                        if job_data:\n                            jobs.append(job_data)\n                            logger.info(f\"[{idx}] {job_data['title']} - {job_data['company']}\")\n\n                    except Exception as e:\n                        logger.error(f\"\uce74\ub4dc \ud30c\uc2f1 \uc2e4\ud328 (#{idx}): {e}\")\n                        continue\n\n                return jobs\n\n            except Exception as e:\n                logger.error(f\"\uc2a4\ud06c\ub798\ud551 \uc911 \uc5d0\ub7ec: {e}\")\n                raise\n\n            finally:\n                browser.close()\n\n    def _build_search_url(self, keyword: str, location: str) -> str:\n        \"\"\"\uac80\uc0c9 URL \uc0dd\uc131\"\"\"\n        # LinkedIn \uc2a4\ud0c0\uc77c URL (\uc2e4\uc81c \uc0ac\uc774\ud2b8\uc5d0 \ub9de\uac8c \uc218\uc815 \ud544\uc694)\n        base = self.config.BASE_URL\n        params = f\"?keywords={keyword.replace(' ', '%20')}&location={location.replace(' ', '%20')}\"\n        return base + params\n\n    def _scroll_to_load_more(self, page: Page):\n        \"\"\"\uc2a4\ud06c\ub864\ud558\uc5ec \ub354 \ub9ce\uc740 \uacb0\uacfc \ub85c\ub4dc\"\"\"\n        for _ in range(3):\n            page.evaluate('window.scrollTo(0, document.body.scrollHeight)')\n            time.sleep(1.5)\n\n    def _extract_job_card(self, card, page: Page) -> Optional[Dict]:\n        \"\"\"\uac1c\ubcc4 \ucc44\uc6a9 \uacf5\uace0 \uce74\ub4dc \ud30c\uc2f1\"\"\"\n        try:\n            # \uc81c\ubaa9\n            title_elem = card.query_selector('.job-card-list__title, h3')\n            title = title_elem.inner_text().strip() if title_elem else 'N/A'\n\n            # \ud68c\uc0ac\uba85\n            company_elem = card.query_selector('.job-card-container__company-name, h4')\n            company = company_elem.inner_text().strip() if company_elem else 'N/A'\n\n            # \uc704\uce58\n            location_elem = card.query_selector('.job-card-container__metadata-item, .job-card-container__location')\n            location = location_elem.inner_text().strip() if location_elem else 'N/A'\n\n            # URL\n            link_elem = card.query_selector('a[href*=\"/jobs/\"]')\n            url = link_elem.get_attribute('href') if link_elem else None\n\n            # \uc678\ubd80 ID (URL\uc5d0\uc11c \ucd94\ucd9c)\n            external_id = None\n            if url:\n                match = re.search(r'/jobs/view/(\\d+)', url)\n                if match:\n                    external_id = match.group(1)\n\n            # \ub85c\uace0 URL\n            logo_elem = card.query_selector('img.artdeco-entity-image, img[alt*=\"logo\"]')\n            logo_url = logo_elem.get_attribute('src') if logo_elem else None\n\n            # \uacf5\uace0 \ud074\ub9ad\ud558\uc5ec \uc0c1\uc138 \uc815\ubcf4 \ucd94\ucd9c\n            if link_elem:\n                link_elem.click()\n                time.sleep(2)\n\n                # \uc0c1\uc138 \uc815\ubcf4 \ucd94\ucd9c\n                details = self._extract_job_details(page)\n\n                # \uc2a4\ud06c\ub9b0\uc0f7 \ucd2c\uc601\n                screenshot = page.screenshot(full_page=True)\n\n                return {\n                    'external_id': external_id or f\"{company}_{title}\".replace(' ', '_')[:50],\n                    'title': title,\n                    'company': company,\n                    'location': location,\n                    'url': url,\n                    'logo_url': logo_url,\n                    'screenshot': screenshot,\n                    **details\n                }\n\n            return None\n\n        except Exception as e:\n            logger.error(f\"\uce74\ub4dc \ucd94\ucd9c \uc5d0\ub7ec: {e}\")\n            return None\n\n    def _extract_job_details(self, page: Page) -> Dict:\n        \"\"\"\ucc44\uc6a9 \uacf5\uace0 \uc0c1\uc138 \uc815\ubcf4 \ucd94\ucd9c\"\"\"\n        details = {\n            'description': '',\n            'requirements': '',\n            'benefits': '',\n            'salary_min': None,\n            'salary_max': None,\n            'work_type': None,\n            'experience_level': None,\n            'employment_type': None,\n            'posted_date': None\n        }\n\n        try:\n            # \uc124\uba85\n            desc_elem = page.query_selector('.jobs-description, .show-more-less-html__markup')\n            if desc_elem:\n                details['description'] = desc_elem.inner_text().strip()\n\n            # \uadfc\ubb34 \ud615\ud0dc (Remote, Hybrid, On-site)\n            work_type_elem = page.query_selector('li:has-text(\"Remote\"), li:has-text(\"Hybrid\"), li:has-text(\"On-site\")')\n            if work_type_elem:\n                details['work_type'] = work_type_elem.inner_text().strip()\n\n            # \uacbd\ub825\n            exp_elem = page.query_selector('li:has-text(\"level\")')\n            if exp_elem:\n                details['experience_level'] = exp_elem.inner_text().strip()\n\n            # \uace0\uc6a9 \ud615\ud0dc\n            emp_elem = page.query_selector('li:has-text(\"Full-time\"), li:has-text(\"Part-time\"), li:has-text(\"Contract\")')\n            if emp_elem:\n                details['employment_type'] = emp_elem.inner_text().strip()\n\n            # \uc5f0\ubd09 (\uc788\ub294 \uacbd\uc6b0)\n            salary_text = page.query_selector('span:has-text(\"$\"), span:has-text(\"salary\")')\n            if salary_text:\n                salary_str = salary_text.inner_text()\n                # \uc608: \"$80,000 - $120,000\"\n                numbers = re.findall(r'[\\d,]+', salary_str)\n                if len(numbers) >= 2:\n                    details['salary_min'] = float(numbers[0].replace(',', ''))\n                    details['salary_max'] = float(numbers[1].replace(',', ''))\n                elif len(numbers) == 1:\n                    details['salary_min'] = float(numbers[0].replace(',', ''))\n\n            # \uac8c\uc2dc \ub0a0\uc9dc\n            posted_elem = page.query_selector('span.posted-time-ago__text, time')\n            if posted_elem:\n                posted_text = posted_elem.inner_text().strip()\n                details['posted_date'] = self._parse_posted_date(posted_text)\n\n        except Exception as e:\n            logger.error(f\"\uc0c1\uc138 \uc815\ubcf4 \ucd94\ucd9c \uc5d0\ub7ec: {e}\")\n\n        return details\n\n    def _parse_posted_date(self, text: str) -> Optional[datetime]:\n        \"\"\"\uac8c\uc2dc \ub0a0\uc9dc \ud30c\uc2f1 ('2 days ago' -> datetime)\"\"\"\n        try:\n            from datetime import timedelta\n\n            now = datetime.now()\n\n            if 'hour' in text:\n                hours = int(re.search(r'\\d+', text).group())\n                return now - timedelta(hours=hours)\n            elif 'day' in text:\n                days = int(re.search(r'\\d+', text).group())\n                return now - timedelta(days=days)\n            elif 'week' in text:\n                weeks = int(re.search(r'\\d+', text).group())\n                return now - timedelta(weeks=weeks)\n            elif 'month' in text:\n                months = int(re.search(r'\\d+', text).group())\n                return now - timedelta(days=months * 30)\n            else:\n                return now\n\n        except:\n            return None\n"})}),"\n",(0,i.jsx)(e.h3,{id:"scrapernotifierpy",children:"scraper/notifier.py"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom typing import List, Dict\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass EmailNotifier:\n    def __init__(self, config):\n        self.config = config\n        self.enabled = config.ENABLE_EMAIL\n\n    def send_new_jobs_alert(self, jobs: List[Dict]):\n        """\uc0c8 \ucc44\uc6a9 \uacf5\uace0 \uc54c\ub9bc \uc774\uba54\uc77c \ubc1c\uc1a1"""\n        if not self.enabled or not jobs:\n            return\n\n        try:\n            msg = MIMEMultipart(\'alternative\')\n            msg[\'Subject\'] = f\'\ud83d\udd14 \uc0c8\ub85c\uc6b4 \ucc44\uc6a9 \uacf5\uace0 {len(jobs)}\uac74 \ubc1c\uacac!\'\n            msg[\'From\'] = self.config.EMAIL_FROM\n            msg[\'To\'] = self.config.EMAIL_TO\n\n            # HTML \uc774\uba54\uc77c \ubcf8\ubb38 \uc0dd\uc131\n            html_body = self._create_html_body(jobs)\n            msg.attach(MIMEText(html_body, \'html\'))\n\n            # SMTP \ubc1c\uc1a1\n            with smtplib.SMTP(self.config.SMTP_SERVER, self.config.SMTP_PORT) as server:\n                server.starttls()\n                server.login(self.config.EMAIL_FROM, self.config.EMAIL_PASSWORD)\n                server.send_message(msg)\n\n            logger.info(f"\u2705 \uc774\uba54\uc77c \ubc1c\uc1a1 \uc644\ub8cc: {len(jobs)}\uac74")\n\n        except Exception as e:\n            logger.error(f"\uc774\uba54\uc77c \ubc1c\uc1a1 \uc2e4\ud328: {e}")\n\n    def _create_html_body(self, jobs: List[Dict]) -> str:\n        """HTML \uc774\uba54\uc77c \ubcf8\ubb38 \uc0dd\uc131"""\n        html = """\n        <html>\n        <head>\n            <style>\n                body { font-family: Arial, sans-serif; }\n                .job-card {\n                    border: 1px solid #ddd;\n                    padding: 15px;\n                    margin: 10px 0;\n                    border-radius: 5px;\n                }\n                .job-title { font-size: 18px; font-weight: bold; color: #0066cc; }\n                .company { font-size: 16px; color: #333; }\n                .location { color: #666; }\n                .salary { color: #00aa00; font-weight: bold; }\n            </style>\n        </head>\n        <body>\n            <h2>\ud83c\udfaf \uc0c8\ub85c\uc6b4 \ucc44\uc6a9 \uacf5\uace0\uac00 \ub4f1\ub85d\ub418\uc5c8\uc2b5\ub2c8\ub2e4!</h2>\n        """\n\n        for job in jobs[:10]:  # \ucd5c\ub300 10\uac1c\ub9cc\n            html += f"""\n            <div class="job-card">\n                <div class="job-title">{job[\'title\']}</div>\n                <div class="company">{job[\'company\']}</div>\n                <div class="location">\ud83d\udccd {job[\'location\']}</div>\n            """\n\n            if job.get(\'salary_min\'):\n                html += f"""\n                <div class="salary">\n                    \ud83d\udcb0 ${job[\'salary_min\']:,.0f} - ${job.get(\'salary_max\', 0):,.0f}\n                </div>\n                """\n\n            if job.get(\'url\'):\n                html += f\'<a href="{job["url"]}">\uacf5\uace0 \ubcf4\uae30 \u2192</a>\'\n\n            html += "</div>"\n\n        html += """\n        </body>\n        </html>\n        """\n\n        return html\n'})}),"\n",(0,i.jsx)(e.h3,{id:"mainpy",children:"main.py"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"import logging\nfrom datetime import datetime\nfrom sqlalchemy.orm import Session\n\nfrom config import settings\nfrom database.models import init_db\nfrom database.crud import CompanyCRUD, JobCRUD\nfrom scraper.job_scraper import JobScraper\nfrom scraper.image_manager import ImageManager\nfrom scraper.notifier import EmailNotifier\n\ndef setup_logger():\n    \"\"\"\ub85c\uac70 \uc124\uc815\"\"\"\n    settings.ensure_directories()\n\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler(\n                f'{settings.LOGS_DIR}/scraper_{datetime.now().strftime(\"%Y%m%d\")}.log'\n            ),\n            logging.StreamHandler()\n        ]\n    )\n\ndef main():\n    \"\"\"\uba54\uc778 \uc2e4\ud589 \ud568\uc218\"\"\"\n    setup_logger()\n    logger = logging.getLogger(__name__)\n\n    try:\n        logger.info(\"=\" * 60)\n        logger.info(\"\ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud37c \uc2dc\uc791\")\n        logger.info(\"=\" * 60)\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd08\uae30\ud654\n        SessionLocal = init_db(settings.DATABASE_URL)\n        db: Session = SessionLocal()\n\n        # \uc2a4\ud06c\ub798\ud37c \ucd08\uae30\ud654\n        scraper = JobScraper(settings)\n        image_manager = ImageManager(settings.LOGOS_DIR, settings.SCREENSHOTS_DIR)\n        notifier = EmailNotifier(settings)\n\n        new_jobs = []\n\n        # \ud0a4\uc6cc\ub4dc\ubcc4 \uac80\uc0c9\n        for keyword in settings.KEYWORDS:\n            for location in settings.LOCATIONS:\n                logger.info(f\"\\n\ud83d\udd0d \uac80\uc0c9: {keyword} @ {location}\")\n\n                # \uc2a4\ud06c\ub798\ud551\n                jobs = scraper.scrape_jobs(keyword, location)\n\n                # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5\n                for job_data in jobs:\n                    # \ud68c\uc0ac \uc815\ubcf4 \uc800\uc7a5\n                    company = CompanyCRUD.get_or_create(\n                        db,\n                        name=job_data['company']\n                    )\n\n                    # \ub85c\uace0 \ub2e4\uc6b4\ub85c\ub4dc\n                    if job_data.get('logo_url'):\n                        logo_path = image_manager.download_logo(\n                            job_data['logo_url'],\n                            job_data['company']\n                        )\n                        if logo_path:\n                            CompanyCRUD.update_logo(\n                                db,\n                                company.id,\n                                job_data['logo_url'],\n                                logo_path\n                            )\n\n                    # \ucc44\uc6a9 \uacf5\uace0 \uc800\uc7a5\n                    job = JobCRUD.create(\n                        db,\n                        external_id=job_data['external_id'],\n                        company_id=company.id,\n                        title=job_data['title'],\n                        location=job_data['location'],\n                        url=job_data.get('url'),\n                        description=job_data.get('description'),\n                        requirements=job_data.get('requirements'),\n                        benefits=job_data.get('benefits'),\n                        salary_min=job_data.get('salary_min'),\n                        salary_max=job_data.get('salary_max'),\n                        work_type=job_data.get('work_type'),\n                        experience_level=job_data.get('experience_level'),\n                        employment_type=job_data.get('employment_type'),\n                        posted_date=job_data.get('posted_date')\n                    )\n\n                    if job:  # \uc0c8\ub85c\uc6b4 \uacf5\uace0\uc778 \uacbd\uc6b0\n                        new_jobs.append(job_data)\n\n                        # \uc2a4\ud06c\ub9b0\uc0f7 \uc800\uc7a5\n                        if job_data.get('screenshot'):\n                            screenshot_path = image_manager.save_screenshot(\n                                job_data['screenshot'],\n                                job_data['external_id']\n                            )\n                            if screenshot_path:\n                                job.screenshot_path = screenshot_path\n                                db.commit()\n\n                        logger.info(f\"\u2705 \uc0c8 \uacf5\uace0 \uc800\uc7a5: {job.title}\")\n                    else:\n                        logger.info(f\"\u23ed\ufe0f  \uc774\ubbf8 \uc874\uc7ac: {job_data['title']}\")\n\n        # \uc694\uc57d \ucd9c\ub825\n        print(\"\\n\" + \"=\" * 60)\n        print(\"\ud83d\udcca \uc218\uc9d1 \uacb0\uacfc\")\n        print(\"=\" * 60)\n        print(f\"\uc0c8\ub85c\uc6b4 \uacf5\uace0: {len(new_jobs)}\uac1c\")\n        print(f\"\ucd1d \uacf5\uace0 \uc218: {db.query(Job).count()}\uac1c\")\n        print(f\"\ucd1d \ud68c\uc0ac \uc218: {db.query(Company).count()}\uac1c\")\n\n        if new_jobs:\n            print(\"\\n\ud83d\udccb \uc0c8\ub85c\uc6b4 \uacf5\uace0:\")\n            for idx, job in enumerate(new_jobs[:10], 1):\n                print(f\"{idx}. {job['title']} - {job['company']}\")\n                if job.get('salary_min'):\n                    print(f\"   \ud83d\udcb0 ${job['salary_min']:,.0f} - ${job.get('salary_max', 0):,.0f}\")\n\n        print(\"=\" * 60 + \"\\n\")\n\n        # \uc774\uba54\uc77c \uc54c\ub9bc\n        if new_jobs:\n            notifier.send_new_jobs_alert(new_jobs)\n\n        logger.info(\"\u2705 \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc!\")\n\n        db.close()\n\n    except Exception as e:\n        logger.error(f\"\u274c \uc5d0\ub7ec \ubc1c\uc0dd: {e}\", exc_info=True)\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,i.jsx)(e.h2,{id:"-\uc2e4\ud589-\ubc29\ubc95",children:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# \uc758\uc874\uc131 \uc124\uce58\npip install -r requirements.txt\n\n# \ube0c\ub77c\uc6b0\uc800 \uc124\uce58\nplaywright install chromium\n\n# \uc2e4\ud589\npython main.py\n"})}),"\n",(0,i.jsx)(e.h2,{id:"-\ucd9c\ub825-\uc608\uc2dc",children:"\ud83c\udfa8 \ucd9c\ub825 \uc608\uc2dc"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"============================================================\n\ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud37c \uc2dc\uc791\n============================================================\n\n\ud83d\udd0d \uac80\uc0c9: Python Developer @ Seoul\n[1] Senior Python Developer - TechCorp\n[2] Backend Engineer (Python) - StartupHub\n...\n\n\u2705 \uc0c8 \uacf5\uace0 \uc800\uc7a5: Senior Python Developer\n\u2705 \ub85c\uace0 \uc800\uc7a5: TechCorp\n\u2705 \uc2a4\ud06c\ub9b0\uc0f7 \uc800\uc7a5: job_12345\n\n============================================================\n\ud83d\udcca \uc218\uc9d1 \uacb0\uacfc\n============================================================\n\uc0c8\ub85c\uc6b4 \uacf5\uace0: 15\uac1c\n\ucd1d \uacf5\uace0 \uc218: 127\uac1c\n\ucd1d \ud68c\uc0ac \uc218: 45\uac1c\n\n\ud83d\udccb \uc0c8\ub85c\uc6b4 \uacf5\uace0:\n1. Senior Python Developer - TechCorp\n   \ud83d\udcb0 $80,000 - $120,000\n2. Backend Engineer (Python) - StartupHub\n   \ud83d\udcb0 $70,000 - $100,000\n...\n============================================================\n"})}),"\n",(0,i.jsx)(e.h2,{id:"-\ud655\uc7a5-\uc544\uc774\ub514\uc5b4",children:"\ud83d\udd0d \ud655\uc7a5 \uc544\uc774\ub514\uc5b4"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\uc9c0\uc6d0 \uad00\ub9ac"}),": \uc9c0\uc6d0\ud55c \uacf5\uace0 \ucd94\uc801 \uc2dc\uc2a4\ud15c"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\ud0a4\uc6cc\ub4dc \uc54c\ub9bc"}),": \ud2b9\uc815 \uae30\uc220 \uc2a4\ud0dd \ud3ec\ud568 \uc2dc \uc54c\ub9bc"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\uc5f0\ubd09 \ubd84\uc11d"}),": \uc2dc\uc7a5 \uc5f0\ubd09 \ud2b8\ub80c\ub4dc \ubd84\uc11d"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\uc9c0\uc6d0\uc11c \uc790\ub3d9\ud654"}),": \uc790\ub3d9 \uc9c0\uc6d0\uc11c \uc81c\ucd9c"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\ud3ec\ud2b8\ud3f4\ub9ac\uc624 \ub9e4\uce6d"}),": \ub0b4 \uc2a4\ud0ac\uc14b\uacfc \ub9e4\uce6d\ub3c4 \ubd84\uc11d"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,i.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,i.jsx)(e.a,{href:"./scenario-05-real-estate",children:"\ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc2a4\ud06c\ub798\ud37c"})]})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>s});var o=t(6540);const i={},r=o.createContext(i);function a(n){const e=o.useContext(r);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);