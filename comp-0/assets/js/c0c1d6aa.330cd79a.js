"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3470],{7764:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"rabbitmq/examples/scenario-01-order-processing","title":"\uc2dc\ub098\ub9ac\uc624 1: \uc8fc\ubb38 \ucc98\ub9ac \uc2dc\uc2a4\ud15c","description":"\uc1fc\ud551\ubab0\uc758 \uc8fc\ubb38\uc744 \ube44\ub3d9\uae30\ub85c \uc548\uc815\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/examples/scenario-01-order-processing.md","sourceDirName":"rabbitmq/examples","slug":"/rabbitmq/examples/scenario-01-order-processing","permalink":"/docs/rabbitmq/examples/scenario-01-order-processing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/examples/scenario-01-order-processing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"rabbitmqSidebar","previous":{"title":"\uc2e4\uc804 \uc2dc\ub098\ub9ac\uc624 \uc18c\uac1c","permalink":"/docs/rabbitmq/examples/intro"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 2: \uc54c\ub9bc \uc2dc\uc2a4\ud15c","permalink":"/docs/rabbitmq/examples/scenario-02-notification-system"}}');var o=r(4848),i=r(8453);const t={sidebar_position:2},d="\uc2dc\ub098\ub9ac\uc624 1: \uc8fc\ubb38 \ucc98\ub9ac \uc2dc\uc2a4\ud15c",l={},a=[{value:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85",id:"-\uc0c1\ud669-\uc124\uba85",level:2},{value:"\ud83c\udfaf \uc694\uad6c\uc0ac\ud56d",id:"-\uc694\uad6c\uc0ac\ud56d",level:2},{value:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98",id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"\ud83d\udcdd \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"1. \uc8fc\ubb38 \ubaa8\ub378",id:"1-\uc8fc\ubb38-\ubaa8\ub378",level:3},{value:"2. Producer (API \uc11c\ubc84)",id:"2-producer-api-\uc11c\ubc84",level:3},{value:"3. Consumer (\uc6cc\ucee4)",id:"3-consumer-\uc6cc\ucee4",level:3},{value:"4. \ud14c\uc2a4\ud2b8 \ucf54\ub4dc",id:"4-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",level:3},{value:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95",id:"-\uc2e4\ud589-\ubc29\ubc95",level:2},{value:"1. \uc758\uc874\uc131 \uc124\uce58",id:"1-\uc758\uc874\uc131-\uc124\uce58",level:3},{value:"2. \uc5ec\ub7ec \uc6cc\ucee4 \uc2e4\ud589",id:"2-\uc5ec\ub7ec-\uc6cc\ucee4-\uc2e4\ud589",level:3},{value:"3. \uc8fc\ubb38 \ubc1c\ud589",id:"3-\uc8fc\ubb38-\ubc1c\ud589",level:3},{value:"4. \ud14c\uc2a4\ud2b8 \uc2e4\ud589",id:"4-\ud14c\uc2a4\ud2b8-\uc2e4\ud589",level:3},{value:"\ud83d\udcca Management UI\uc5d0\uc11c \ud655\uc778",id:"-management-ui\uc5d0\uc11c-\ud655\uc778",level:2},{value:"\ud83d\udca1 \uac1c\uc120 \uc0ac\ud56d",id:"-\uac1c\uc120-\uc0ac\ud56d",level:2},{value:"1. Dead Letter Queue \ucd94\uac00",id:"1-dead-letter-queue-\ucd94\uac00",level:3},{value:"2. \uc6b0\uc120\uc21c\uc704 \ud050",id:"2-\uc6b0\uc120\uc21c\uc704-\ud050",level:3},{value:"3. \ubaa8\ub2c8\ud130\ub9c1",id:"3-\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"\ud83c\udf93 \ubc30\uc6b4 \ub0b4\uc6a9",id:"-\ubc30\uc6b4-\ub0b4\uc6a9",level:2},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \uc2dc\ub098\ub9ac\uc624",id:"-\ub2e4\uc74c-\uc2dc\ub098\ub9ac\uc624",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-1-\uc8fc\ubb38-\ucc98\ub9ac-\uc2dc\uc2a4\ud15c",children:"\uc2dc\ub098\ub9ac\uc624 1: \uc8fc\ubb38 \ucc98\ub9ac \uc2dc\uc2a4\ud15c"})}),"\n",(0,o.jsx)(n.p,{children:"\uc1fc\ud551\ubab0\uc758 \uc8fc\ubb38\uc744 \ube44\ub3d9\uae30\ub85c \uc548\uc815\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,o.jsx)(n.h2,{id:"-\uc0c1\ud669-\uc124\uba85",children:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85"}),"\n",(0,o.jsx)(n.p,{children:"\uc628\ub77c\uc778 \uc1fc\ud551\ubab0 '\ub9c8\ucf13\ud50c\ub808\uc774\uc2a4'\ub294 \uc8fc\ubb38\uc774 \uae09\uc99d\ud558\uba74\uc11c \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\uc8fc\ubb38 \ucc98\ub9ac\uc5d0 5-10\ucd08 \uc18c\uc694 (\uacb0\uc81c, \uc7ac\uace0 \ud655\uc778, \ubc30\uc1a1 \uc900\ube44)"}),"\n",(0,o.jsx)(n.li,{children:"\ub3d9\uc2dc \uc8fc\ubb38 \uc2dc \uc11c\ubc84 \uc751\ub2f5 \uc9c0\uc5f0"}),"\n",(0,o.jsx)(n.li,{children:"\uc77c\ubd80 \uc8fc\ubb38\uc774 \ucc98\ub9ac \uc911 \uc2e4\ud328\ud574\ub3c4 \uc7ac\uc2dc\ub3c4 \uc548 \ub428"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-\uc694\uad6c\uc0ac\ud56d",children:"\ud83c\udfaf \uc694\uad6c\uc0ac\ud56d"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"\uc8fc\ubb38 \uc694\uccad\uc744 \uc989\uc2dc \ubc1b\uace0 \ubc31\uadf8\ub77c\uc6b4\ub4dc \ucc98\ub9ac"}),"\n",(0,o.jsx)(n.li,{children:"\uc5ec\ub7ec \uc6cc\ucee4\uac00 \ubcd1\ub82c\ub85c \uc8fc\ubb38 \ucc98\ub9ac"}),"\n",(0,o.jsx)(n.li,{children:"\ucc98\ub9ac \uc2e4\ud328 \uc2dc \uc790\ub3d9 \uc7ac\uc2dc\ub3c4"}),"\n",(0,o.jsx)(n.li,{children:"\ubaa8\ub4e0 \uc8fc\ubb38\uc774 \ucd5c\uc885\uc801\uc73c\ub85c \ucc98\ub9ac\ub418\ub3c4\ub85d \ubcf4\uc7a5"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",children:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\uc0ac\uc6a9\uc790 \uc694\uccad\n    \u2193\nAPI \uc11c\ubc84 (Producer) \u2192 [Order Queue] \u2192 Worker 1 (Consumer)\n                                    \u2192 Worker 2 (Consumer)\n                                    \u2192 Worker 3 (Consumer)\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"\ud328\ud134"}),": Work Queue (\uc791\uc5c5 \ubd84\uc0b0)"]}),"\n",(0,o.jsx)(n.h2,{id:"-\uad6c\ud604",children:"\ud83d\udcdd \uad6c\ud604"}),"\n",(0,o.jsx)(n.h3,{id:"1-\uc8fc\ubb38-\ubaa8\ub378",children:"1. \uc8fc\ubb38 \ubaa8\ub378"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# models.py\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\nfrom typing import List, Dict\nimport json\n\n@dataclass\nclass OrderItem:\n    """\uc8fc\ubb38 \uc0c1\ud488"""\n    product_id: int\n    product_name: str\n    quantity: int\n    price: float\n\n@dataclass\nclass Order:\n    """\uc8fc\ubb38"""\n    order_id: str\n    user_id: int\n    items: List[OrderItem]\n    total_amount: float\n    created_at: str = None\n\n    def __post_init__(self):\n        if self.created_at is None:\n            self.created_at = datetime.now().isoformat()\n\n    def to_json(self) -> str:\n        """JSON \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658"""\n        data = asdict(self)\n        return json.dumps(data)\n\n    @classmethod\n    def from_json(cls, json_str: str) -> \'Order\':\n        """JSON\uc5d0\uc11c \uac1d\uccb4 \uc0dd\uc131"""\n        data = json.loads(json_str)\n        # items\ub97c OrderItem \uac1d\uccb4\ub85c \ubcc0\ud658\n        data[\'items\'] = [OrderItem(**item) for item in data[\'items\']]\n        return cls(**data)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-producer-api-\uc11c\ubc84",children:"2. Producer (API \uc11c\ubc84)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# producer.py\nimport pika\nimport uuid\nfrom models import Order, OrderItem\nfrom typing import List\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass OrderProducer:\n    \"\"\"\uc8fc\ubb38 \uc0dd\uc0b0\uc790\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n        self.queue_name = 'orders'\n\n    def publish_order(self, user_id: int, items: List[Dict]):\n        \"\"\"\uc8fc\ubb38 \ubc1c\ud589\"\"\"\n        # \uc8fc\ubb38 \uac1d\uccb4 \uc0dd\uc131\n        order_id = str(uuid.uuid4())\n        order_items = [OrderItem(**item) for item in items]\n        total = sum(item.price * item.quantity for item in order_items)\n\n        order = Order(\n            order_id=order_id,\n            user_id=user_id,\n            items=order_items,\n            total_amount=total\n        )\n\n        # RabbitMQ \uc5f0\uacb0\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        # \ud050 \uc120\uc5b8 (durable=True\ub85c \uc601\uc18d\uc131 \ubcf4\uc7a5)\n        channel.queue_declare(queue=self.queue_name, durable=True)\n\n        # \uba54\uc2dc\uc9c0 \ubc1c\ud589\n        channel.basic_publish(\n            exchange='',\n            routing_key=self.queue_name,\n            body=order.to_json(),\n            properties=pika.BasicProperties(\n                delivery_mode=2,  # \uba54\uc2dc\uc9c0 \uc601\uc18d\ud654\n                content_type='application/json',\n                message_id=order_id\n            )\n        )\n\n        logger.info(f\"\ud83d\udce6 \uc8fc\ubb38 \ubc1c\ud589: {order_id}, \ucd1d\uc561: ${total:.2f}\")\n        connection.close()\n\n        return order_id\n\ndef main():\n    \"\"\"\ud14c\uc2a4\ud2b8\uc6a9 \uba54\uc778\"\"\"\n    producer = OrderProducer()\n\n    # \uc0d8\ud50c \uc8fc\ubb38 \ubc1c\ud589\n    items = [\n        {'product_id': 1, 'product_name': '\ubb34\uc120 \ub9c8\uc6b0\uc2a4', 'quantity': 2, 'price': 29.99},\n        {'product_id': 2, 'product_name': '\ud0a4\ubcf4\ub4dc', 'quantity': 1, 'price': 89.99},\n    ]\n\n    order_id = producer.publish_order(user_id=123, items=items)\n    print(f\"\u2705 \uc8fc\ubb38 \uc811\uc218: {order_id}\")\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-consumer-\uc6cc\ucee4",children:"3. Consumer (\uc6cc\ucee4)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# consumer.py\nimport pika\nimport time\nimport random\nimport logging\nfrom models import Order\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass OrderWorker:\n    """\uc8fc\ubb38 \ucc98\ub9ac \uc6cc\ucee4"""\n\n    def __init__(self, worker_id: int, host=\'localhost\'):\n        self.worker_id = worker_id\n        self.host = host\n        self.queue_name = \'orders\'\n\n    def process_order(self, order: Order) -> bool:\n        """\uc8fc\ubb38 \ucc98\ub9ac (\ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1)"""\n        try:\n            logger.info(\n                f"\ud83d\udd28 Worker {self.worker_id} - "\n                f"\uc8fc\ubb38 \ucc98\ub9ac \uc2dc\uc791: {order.order_id}"\n            )\n\n            # 1. \uacb0\uc81c \ucc98\ub9ac (\uc2dc\ubbac\ub808\uc774\uc158)\n            time.sleep(random.uniform(1, 3))\n            logger.info(f"\ud83d\udcb3 \uacb0\uc81c \uc644\ub8cc: ${order.total_amount:.2f}")\n\n            # 2. \uc7ac\uace0 \ud655\uc778\n            time.sleep(random.uniform(0.5, 1))\n            logger.info(f"\ud83d\udce6 \uc7ac\uace0 \ud655\uc778 \uc644\ub8cc")\n\n            # 3. \ubc30\uc1a1 \uc900\ube44\n            time.sleep(random.uniform(0.5, 1))\n            logger.info(f"\ud83d\ude9a \ubc30\uc1a1 \uc900\ube44 \uc644\ub8cc")\n\n            # 10% \ud655\ub960\ub85c \uc2e4\ud328 \uc2dc\ubbac\ub808\uc774\uc158\n            if random.random() < 0.1:\n                raise Exception("\uacb0\uc81c \uac8c\uc774\ud2b8\uc6e8\uc774 \uc624\ub958")\n\n            logger.info(\n                f"\u2705 Worker {self.worker_id} - "\n                f"\uc8fc\ubb38 \ucc98\ub9ac \uc644\ub8cc: {order.order_id}"\n            )\n            return True\n\n        except Exception as e:\n            logger.error(\n                f"\u274c Worker {self.worker_id} - "\n                f"\uc8fc\ubb38 \ucc98\ub9ac \uc2e4\ud328: {order.order_id} - {e}"\n            )\n            return False\n\n    def callback(self, ch, method, properties, body):\n        """\uba54\uc2dc\uc9c0 \uc218\uc2e0 \ucf5c\ubc31"""\n        order = Order.from_json(body.decode())\n\n        # \uc8fc\ubb38 \ucc98\ub9ac\n        success = self.process_order(order)\n\n        if success:\n            # \uc131\uacf5 \uc2dc ACK\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n        else:\n            # \uc2e4\ud328 \uc2dc NACK (\uc7ac\uc2dc\ub3c4)\n            ch.basic_nack(\n                delivery_tag=method.delivery_tag,\n                requeue=True  # \ud050\uc5d0 \ub2e4\uc2dc \ub123\uae30\n            )\n\n    def start(self):\n        """\uc6cc\ucee4 \uc2dc\uc791"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.queue_declare(queue=self.queue_name, durable=True)\n\n        # Prefetch: \ud55c \ubc88\uc5d0 1\uac1c\uc529\ub9cc \ucc98\ub9ac\n        channel.basic_qos(prefetch_count=1)\n\n        channel.basic_consume(\n            queue=self.queue_name,\n            on_message_callback=self.callback\n        )\n\n        logger.info(\n            f"\ud83c\udfac Worker {self.worker_id} \uc2dc\uc791 - "\n            f"\uc8fc\ubb38 \ub300\uae30 \uc911..."\n        )\n        channel.start_consuming()\n\ndef main():\n    """\uc6cc\ucee4 \uc2e4\ud589"""\n    import sys\n\n    worker_id = int(sys.argv[1]) if len(sys.argv) > 1 else 1\n    worker = OrderWorker(worker_id=worker_id)\n\n    try:\n        worker.start()\n    except KeyboardInterrupt:\n        print(f"\\n\uc6cc\ucee4 {worker_id} \uc885\ub8cc")\n\nif __name__ == \'__main__\':\n    main()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",children:"4. \ud14c\uc2a4\ud2b8 \ucf54\ub4dc"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# test_order_system.py\nimport pytest\nimport pika\nimport json\nimport time\nfrom threading import Thread\nfrom models import Order, OrderItem\nfrom producer import OrderProducer\nfrom consumer import OrderWorker\n\nclass TestOrderSystem:\n    \"\"\"\uc8fc\ubb38 \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8\"\"\"\n\n    @pytest.fixture\n    def clean_queue(self):\n        \"\"\"\ud14c\uc2a4\ud2b8 \uc804 \ud050 \uc815\ub9ac\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        # \ud14c\uc2a4\ud2b8 \ud050 \uc0dd\uc131 \ubc0f \uc815\ub9ac\n        channel.queue_delete(queue='test_orders')\n        channel.queue_declare(queue='test_orders', durable=True)\n\n        yield\n\n        # \ud14c\uc2a4\ud2b8 \ud6c4 \uc815\ub9ac\n        channel.queue_delete(queue='test_orders')\n        connection.close()\n\n    def test_publish_order(self, clean_queue):\n        \"\"\"\uc8fc\ubb38 \ubc1c\ud589 \ud14c\uc2a4\ud2b8\"\"\"\n        producer = OrderProducer()\n        producer.queue_name = 'test_orders'\n\n        items = [\n            {'product_id': 1, 'product_name': '\ud14c\uc2a4\ud2b8 \uc0c1\ud488',\n             'quantity': 1, 'price': 10.0}\n        ]\n\n        order_id = producer.publish_order(user_id=1, items=items)\n\n        # \ud050\uc5d0 \uba54\uc2dc\uc9c0\uac00 \uc788\ub294\uc9c0 \ud655\uc778\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        method, properties, body = channel.basic_get(\n            queue='test_orders',\n            auto_ack=True\n        )\n\n        assert method is not None\n        order = Order.from_json(body.decode())\n        assert order.order_id == order_id\n\n        connection.close()\n\n    def test_worker_processing(self, clean_queue):\n        \"\"\"\uc6cc\ucee4 \ucc98\ub9ac \ud14c\uc2a4\ud2b8\"\"\"\n        # \uc8fc\ubb38 \ubc1c\ud589\n        producer = OrderProducer()\n        producer.queue_name = 'test_orders'\n\n        items = [\n            {'product_id': 1, 'product_name': '\ud14c\uc2a4\ud2b8',\n             'quantity': 1, 'price': 10.0}\n        ]\n\n        order_id = producer.publish_order(user_id=1, items=items)\n\n        # \uc6cc\ucee4\ub85c \ucc98\ub9ac\n        processed = []\n\n        def mock_process(order):\n            processed.append(order.order_id)\n            return True\n\n        worker = OrderWorker(worker_id=999)\n        worker.queue_name = 'test_orders'\n        worker.process_order = mock_process\n\n        # \uc6cc\ucee4\ub97c \ubcc4\ub3c4 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc2e4\ud589\n        worker_thread = Thread(target=worker.start)\n        worker_thread.daemon = True\n        worker_thread.start()\n\n        # \ucc98\ub9ac \ub300\uae30\n        time.sleep(2)\n\n        assert order_id in processed\n\n    def test_multiple_workers(self, clean_queue):\n        \"\"\"\ub2e4\uc911 \uc6cc\ucee4 \ud14c\uc2a4\ud2b8\"\"\"\n        producer = OrderProducer()\n        producer.queue_name = 'test_orders'\n\n        # 10\uac1c \uc8fc\ubb38 \ubc1c\ud589\n        for i in range(10):\n            items = [\n                {'product_id': i, 'product_name': f'\uc0c1\ud488{i}',\n                 'quantity': 1, 'price': 10.0}\n            ]\n            producer.publish_order(user_id=i, items=items)\n\n        # \uc6cc\ucee4 3\uac1c \uc2e4\ud589 \ud14c\uc2a4\ud2b8 \uc2dc\ubbac\ub808\uc774\uc158\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        # \ud050\uc5d0 10\uac1c \uba54\uc2dc\uc9c0 \ud655\uc778\n        queue_state = channel.queue_declare(\n            queue='test_orders',\n            passive=True\n        )\n        assert queue_state.method.message_count == 10\n\n        connection.close()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-\uc2e4\ud589-\ubc29\ubc95",children:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95"}),"\n",(0,o.jsx)(n.h3,{id:"1-\uc758\uc874\uc131-\uc124\uce58",children:"1. \uc758\uc874\uc131 \uc124\uce58"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install pika pytest\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-\uc5ec\ub7ec-\uc6cc\ucee4-\uc2e4\ud589",children:"2. \uc5ec\ub7ec \uc6cc\ucee4 \uc2e4\ud589"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 1 - Worker 1\npython consumer.py 1\n\n# \ud130\ubbf8\ub110 2 - Worker 2\npython consumer.py 2\n\n# \ud130\ubbf8\ub110 3 - Worker 3\npython consumer.py 3\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-\uc8fc\ubb38-\ubc1c\ud589",children:"3. \uc8fc\ubb38 \ubc1c\ud589"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 4 - Producer\npython producer.py\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-\ud14c\uc2a4\ud2b8-\uc2e4\ud589",children:"4. \ud14c\uc2a4\ud2b8 \uc2e4\ud589"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pytest test_order_system.py -v\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-management-ui\uc5d0\uc11c-\ud655\uc778",children:"\ud83d\udcca Management UI\uc5d0\uc11c \ud655\uc778"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"http://localhost:15672",children:"http://localhost:15672"})," \uc811\uc18d"]}),"\n",(0,o.jsxs)(n.li,{children:["Queues \ud0ed\uc5d0\uc11c ",(0,o.jsx)(n.code,{children:"orders"})," \ud050 \ud655\uc778"]}),"\n",(0,o.jsx)(n.li,{children:"\uba54\uc2dc\uc9c0 \ud750\ub984 \uadf8\ub798\ud504 \uad00\ucc30"}),"\n",(0,o.jsx)(n.li,{children:"\uac01 \uc6cc\ucee4\uc758 \ucc98\ub9ac \uc18d\ub3c4 \ud655\uc778"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-\uac1c\uc120-\uc0ac\ud56d",children:"\ud83d\udca1 \uac1c\uc120 \uc0ac\ud56d"}),"\n",(0,o.jsx)(n.h3,{id:"1-dead-letter-queue-\ucd94\uac00",children:"1. Dead Letter Queue \ucd94\uac00"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# DLQ \uc124\uc815\nchannel.queue_declare(\n    queue='orders_dlq',\n    durable=True\n)\n\nchannel.queue_declare(\n    queue='orders',\n    durable=True,\n    arguments={\n        'x-dead-letter-exchange': '',\n        'x-dead-letter-routing-key': 'orders_dlq',\n        'x-message-ttl': 60000,  # 1\ubd84\n        'x-max-retries': 3\n    }\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-\uc6b0\uc120\uc21c\uc704-\ud050",children:"2. \uc6b0\uc120\uc21c\uc704 \ud050"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# VIP \uace0\uac1d \uc8fc\ubb38 \uc6b0\uc120 \ucc98\ub9ac\nchannel.queue_declare(\n    queue='orders',\n    durable=True,\n    arguments={'x-max-priority': 10}\n)\n\n# \ubc1c\ud589 \uc2dc \uc6b0\uc120\uc21c\uc704 \uc124\uc815\nchannel.basic_publish(\n    exchange='',\n    routing_key='orders',\n    body=order.to_json(),\n    properties=pika.BasicProperties(\n        priority=10 if order.is_vip else 5\n    )\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-\ubaa8\ub2c8\ud130\ub9c1",children:"3. \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# \ucc98\ub9ac \uc2dc\uac04 \uce21\uc815\nimport time\n\nstart_time = time.time()\nsuccess = self.process_order(order)\nduration = time.time() - start_time\n\nlogger.info(f\"\ucc98\ub9ac \uc2dc\uac04: {duration:.2f}\ucd08\")\n\n# Prometheus \uba54\ud2b8\ub9ad\uc2a4 (\uc120\ud0dd)\nfrom prometheus_client import Counter, Histogram\n\norders_processed = Counter(\n    'orders_processed_total',\n    'Total orders processed'\n)\norder_duration = Histogram(\n    'order_processing_duration_seconds',\n    'Order processing duration'\n)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-\ubc30\uc6b4-\ub0b4\uc6a9",children:"\ud83c\udf93 \ubc30\uc6b4 \ub0b4\uc6a9"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Work Queue \ud328\ud134"}),": \uc791\uc5c5\uc744 \uc5ec\ub7ec \uc6cc\ucee4\uc5d0\uac8c \ubd84\uc0b0"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Durable Queue"}),": \ud050 \uc601\uc18d\ud654\ub85c RabbitMQ \uc7ac\uc2dc\uc791 \uc2dc\uc5d0\ub3c4 \ubcf4\uc874"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Message Persistence"}),": \uba54\uc2dc\uc9c0 \uc601\uc18d\ud654 (delivery_mode=2)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Prefetch"}),": \uc6cc\ucee4\ub2f9 \ucc98\ub9ac\ud560 \uba54\uc2dc\uc9c0 \uc218 \uc81c\ud55c"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ACK/NACK"}),": \uc218\ub3d9 \ud655\uc778\uc73c\ub85c \uc2e0\ub8b0\uc131 \ubcf4\uc7a5"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"../basic/work-queues",children:"Work Queue"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"../intermediate/message-durability",children:"Message Durability"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-\ub2e4\uc74c-\uc2dc\ub098\ub9ac\uc624",children:"\ud83c\udfaf \ub2e4\uc74c \uc2dc\ub098\ub9ac\uc624"}),"\n",(0,o.jsx)(n.p,{children:"\uc8fc\ubb38 \uc2dc\uc2a4\ud15c\uc744 \uc131\uacf5\uc801\uc73c\ub85c \uad6c\ucd95\ud588\uc2b5\ub2c8\ub2e4!"}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,o.jsx)(n.a,{href:"./scenario-02-notification-system",children:"\uc2dc\ub098\ub9ac\uc624 2: \uc54c\ub9bc \uc2dc\uc2a4\ud15c"})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"\ud83d\udcac \ud1a0\ub860"}),": \uc5ec\ub7ec\ubd84\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ube44\ub3d9\uae30 \uc791\uc5c5 \ucc98\ub9ac\ub97c \uc5b4\ub5bb\uac8c \ud558\uace0 \uacc4\uc2e0\uac00\uc694?"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var s=r(6540);const o={},i=s.createContext(o);function t(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);