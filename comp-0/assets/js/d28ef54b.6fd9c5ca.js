"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1749],{4706:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"fastapi/examples/scenario-07-file-storage","title":"\uc2dc\ub098\ub9ac\uc624 7: \ud30c\uc77c \uc800\uc7a5\uc18c \uc2dc\uc2a4\ud15c","description":"S3 \ud638\ud658 \uc800\uc7a5\uc18c\ub97c \ud65c\uc6a9\ud55c \ud30c\uc77c \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-07-file-storage.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-07-file-storage","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-07-file-storage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-07-file-storage.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 6: \uc804\uc790\uacb0\uc81c \uc2dc\uc2a4\ud15c","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-06-payment-system"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 8: \uc18c\uc15c \ubbf8\ub514\uc5b4 API","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-08-social-media"}}');var t=i(4848),a=i(8453);const l={sidebar_position:8},r="\uc2dc\ub098\ub9ac\uc624 7: \ud30c\uc77c \uc800\uc7a5\uc18c \uc2dc\uc2a4\ud15c",o={},d=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"s3_client.py",id:"s3_clientpy",level:3},{value:"image_processor.py",id:"image_processorpy",level:3},{value:"virus_scanner.py",id:"virus_scannerpy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"docker-compose.yml",id:"docker-composeyml",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"\uc2a4\ud2b8\ub9ac\ubc0d \ub2e4\uc6b4\ub85c\ub4dc",id:"\uc2a4\ud2b8\ub9ac\ubc0d-\ub2e4\uc6b4\ub85c\ub4dc",level:3},{value:"\ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5",id:"\ubc31\uadf8\ub77c\uc6b4\ub4dc-\uc791\uc5c5",level:3},{value:"\uacf5\uc720 \ub9c1\ud06c",id:"\uacf5\uc720-\ub9c1\ud06c",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-7-\ud30c\uc77c-\uc800\uc7a5\uc18c-\uc2dc\uc2a4\ud15c",children:"\uc2dc\ub098\ub9ac\uc624 7: \ud30c\uc77c \uc800\uc7a5\uc18c \uc2dc\uc2a4\ud15c"})}),"\n",(0,t.jsx)(n.p,{children:"S3 \ud638\ud658 \uc800\uc7a5\uc18c\ub97c \ud65c\uc6a9\ud55c \ud30c\uc77c \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 \ud30c\uc77c \uc5c5\ub85c\ub4dc (\uba40\ud2f0\ud30c\ud2b8, \uccad\ud06c \uc5c5\ub85c\ub4dc)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc (\uc2a4\ud2b8\ub9ac\ubc0d)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \uc774\ubbf8\uc9c0 \uc378\ub124\uc77c \uc790\ub3d9 \uc0dd\uc131"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \ud30c\uc77c \uba54\ud0c0\ub370\uc774\ud130 \uad00\ub9ac"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \uacf5\uc720 \ub9c1\ud06c \uc0dd\uc131 (\ub9cc\ub8cc \uc2dc\uac04)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 S3/MinIO \uc5f0\ub3d9"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \ubc14\uc774\ub7ec\uc2a4 \uc2a4\uce94 (ClamAV)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"file-storage/\n\u251c\u2500\u2500 main.py                 # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n\u251c\u2500\u2500 models.py               # DB \ubaa8\ub378 (File, FileShare)\n\u251c\u2500\u2500 schemas.py              # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py             # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 s3_client.py            # S3/MinIO \ud074\ub77c\uc774\uc5b8\ud2b8\n\u251c\u2500\u2500 image_processor.py      # \uc774\ubbf8\uc9c0 \ucc98\ub9ac (\uc378\ub124\uc77c \uc0dd\uc131)\n\u251c\u2500\u2500 virus_scanner.py        # \ubc14\uc774\ub7ec\uc2a4 \uc2a4\uce94 (ClamAV)\n\u251c\u2500\u2500 file_service.py         # \ud30c\uc77c \uad00\ub9ac \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n\u2514\u2500\u2500 requirements.txt        # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant C as Client\n    participant API as FastAPI\n    participant FS as FileService\n    participant S3 as S3/MinIO\n    participant VS as VirusScanner\n    participant IP as ImageProcessor\n    participant DB as Database\n\n    Note over C,DB: 1. \ud30c\uc77c \uc5c5\ub85c\ub4dc\n    C->>API: POST /files/upload<br/>multipart/form-data\n    API->>API: Receive file stream\n    API->>FS: process_upload()\n    FS->>VS: scan_file()\n    VS--\x3e>FS: Scan result (clean/infected)\n    alt File infected\n        FS--\x3e>API: Virus detected\n        API--\x3e>C: 400 Bad Request\n    else File clean\n        FS->>S3: upload_file()\n        S3--\x3e>FS: S3 URL + key\n        alt File is image\n            FS->>IP: generate_thumbnail()\n            IP->>IP: Resize image\n            IP->>S3: upload_thumbnail()\n            S3--\x3e>IP: Thumbnail URL\n            IP--\x3e>FS: Thumbnail info\n        end\n        FS->>DB: INSERT file metadata\n        DB--\x3e>FS: File record\n        FS--\x3e>API: File uploaded\n        API--\x3e>C: 201 Created + File info\n    end\n\n    Note over C,DB: 2. \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc (\uc2a4\ud2b8\ub9ac\ubc0d)\n    C->>API: GET /files/{id}/download\n    API->>DB: SELECT file metadata\n    DB--\x3e>API: File info\n    API->>S3: get_object() stream\n    S3--\x3e>API: File stream\n    API--\x3e>C: Stream file with<br/>Content-Disposition\n\n    Note over C,DB: 3. \uacf5\uc720 \ub9c1\ud06c \uc0dd\uc131\n    C->>API: POST /files/{id}/share<br/>{expires_in, max_downloads}\n    API->>DB: INSERT file_share (token, expires_at)\n    DB--\x3e>API: Share record\n    API--\x3e>C: {share_url, token, expires_at}\n\n    Note over C,DB: 4. \uacf5\uc720 \ub9c1\ud06c\ub85c \ub2e4\uc6b4\ub85c\ub4dc\n    C->>API: GET /share/{token}\n    API->>DB: SELECT file_share\n    DB--\x3e>API: Share info\n    alt Share expired or max downloads reached\n        API--\x3e>C: 403 Forbidden\n    else Share valid\n        API->>DB: INCREMENT download_count\n        API->>S3: get_object() stream\n        S3--\x3e>API: File stream\n        API--\x3e>C: Stream file\n    end\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,t.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, DateTime, Boolean, BigInteger, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\nimport enum\n\nclass FileType(str, enum.Enum):\n    image = "image"\n    video = "video"\n    document = "document"\n    archive = "archive"\n    other = "other"\n\nclass File(Base):\n    __tablename__ = "files"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey("users.id"))\n    filename = Column(String, index=True)\n    original_filename = Column(String)\n    file_type = Column(String)  # MIME type\n    category = Column(String)  # image, video, etc.\n    size = Column(BigInteger)  # bytes\n\n    # S3 \uc815\ubcf4\n    s3_bucket = Column(String)\n    s3_key = Column(String, unique=True)\n    s3_url = Column(String)\n\n    # \uc378\ub124\uc77c (\uc774\ubbf8\uc9c0\uc778 \uacbd\uc6b0)\n    thumbnail_s3_key = Column(String, nullable=True)\n    thumbnail_url = Column(String, nullable=True)\n\n    # \uba54\ud0c0\ub370\uc774\ud130\n    width = Column(Integer, nullable=True)\n    height = Column(Integer, nullable=True)\n    duration = Column(Integer, nullable=True)  # \ube44\ub514\uc624 \uae38\uc774 (\ucd08)\n\n    # \ubcf4\uc548\n    is_public = Column(Boolean, default=False)\n    virus_scanned = Column(Boolean, default=False)\n    virus_scan_result = Column(String, nullable=True)\n\n    # \ud0c0\uc784\uc2a4\ud0ec\ud504\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n    user = relationship("User")\n    shares = relationship("FileShare", back_populates="file")\n\nclass FileShare(Base):\n    __tablename__ = "file_shares"\n\n    id = Column(Integer, primary_key=True)\n    file_id = Column(Integer, ForeignKey("files.id"))\n    share_token = Column(String, unique=True, index=True)\n    expires_at = Column(DateTime(timezone=True))\n    download_count = Column(Integer, default=0)\n    max_downloads = Column(Integer, nullable=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    file = relationship("File", back_populates="shares")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"s3_clientpy",children:"s3_client.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import boto3\nfrom botocore.exceptions import ClientError\nfrom typing import BinaryIO, Optional\nimport os\n\nclass S3Client:\n    def __init__(self):\n        self.s3 = boto3.client(\n            's3',\n            endpoint_url=os.getenv('S3_ENDPOINT', 'http://localhost:9000'),\n            aws_access_key_id=os.getenv('S3_ACCESS_KEY', 'minioadmin'),\n            aws_secret_access_key=os.getenv('S3_SECRET_KEY', 'minioadmin'),\n            region_name=os.getenv('S3_REGION', 'us-east-1')\n        )\n        self.bucket = os.getenv('S3_BUCKET', 'files')\n        self._ensure_bucket()\n\n    def _ensure_bucket(self):\n        \"\"\"\ubc84\ud0b7\uc774 \uc5c6\uc73c\uba74 \uc0dd\uc131\"\"\"\n        try:\n            self.s3.head_bucket(Bucket=self.bucket)\n        except ClientError:\n            self.s3.create_bucket(Bucket=self.bucket)\n\n    def upload_file(\n        self,\n        file: BinaryIO,\n        key: str,\n        content_type: str,\n        metadata: Optional[dict] = None\n    ) -> str:\n        \"\"\"\ud30c\uc77c \uc5c5\ub85c\ub4dc\"\"\"\n        extra_args = {\n            'ContentType': content_type,\n            'Metadata': metadata or {}\n        }\n\n        self.s3.upload_fileobj(file, self.bucket, key, ExtraArgs=extra_args)\n\n        # URL \uc0dd\uc131\n        url = f\"{os.getenv('S3_ENDPOINT')}/{self.bucket}/{key}\"\n        return url\n\n    def download_file(self, key: str) -> bytes:\n        \"\"\"\ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc\"\"\"\n        response = self.s3.get_object(Bucket=self.bucket, Key=key)\n        return response['Body'].read()\n\n    def generate_presigned_url(self, key: str, expiration: int = 3600) -> str:\n        \"\"\"\ub9cc\ub8cc \uc2dc\uac04\uc774 \uc788\ub294 \ub2e4\uc6b4\ub85c\ub4dc URL \uc0dd\uc131\"\"\"\n        url = self.s3.generate_presigned_url(\n            'get_object',\n            Params={'Bucket': self.bucket, 'Key': key},\n            ExpiresIn=expiration\n        )\n        return url\n\n    def delete_file(self, key: str):\n        \"\"\"\ud30c\uc77c \uc0ad\uc81c\"\"\"\n        self.s3.delete_object(Bucket=self.bucket, Key=key)\n\n    def copy_file(self, source_key: str, dest_key: str):\n        \"\"\"\ud30c\uc77c \ubcf5\uc0ac\"\"\"\n        copy_source = {'Bucket': self.bucket, 'Key': source_key}\n        self.s3.copy_object(\n            CopySource=copy_source,\n            Bucket=self.bucket,\n            Key=dest_key\n        )\n"})}),"\n",(0,t.jsx)(n.h3,{id:"image_processorpy",children:"image_processor.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from PIL import Image\nimport io\nfrom typing import Tuple\n\nclass ImageProcessor:\n    @staticmethod\n    def create_thumbnail(\n        image_bytes: bytes,\n        size: Tuple[int, int] = (300, 300)\n    ) -> bytes:\n        \"\"\"\uc378\ub124\uc77c \uc0dd\uc131\"\"\"\n        image = Image.open(io.BytesIO(image_bytes))\n\n        # EXIF \ubc29\ud5a5 \uc815\ubcf4 \ucc98\ub9ac\n        try:\n            for orientation in ExifTags.TAGS.keys():\n                if ExifTags.TAGS[orientation] == 'Orientation':\n                    break\n            exif = image._getexif()\n            if exif is not None:\n                orientation_value = exif.get(orientation)\n                if orientation_value == 3:\n                    image = image.rotate(180, expand=True)\n                elif orientation_value == 6:\n                    image = image.rotate(270, expand=True)\n                elif orientation_value == 8:\n                    image = image.rotate(90, expand=True)\n        except (AttributeError, KeyError, IndexError):\n            pass\n\n        # \uc378\ub124\uc77c \uc0dd\uc131\n        image.thumbnail(size, Image.Resampling.LANCZOS)\n\n        # \ubc14\uc774\ud2b8\ub85c \ubcc0\ud658\n        output = io.BytesIO()\n        image.save(output, format='JPEG', quality=85)\n        output.seek(0)\n        return output.read()\n\n    @staticmethod\n    def get_image_info(image_bytes: bytes) -> dict:\n        \"\"\"\uc774\ubbf8\uc9c0 \uc815\ubcf4 \ucd94\ucd9c\"\"\"\n        image = Image.open(io.BytesIO(image_bytes))\n        return {\n            'width': image.width,\n            'height': image.height,\n            'format': image.format,\n            'mode': image.mode\n        }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"virus_scannerpy",children:"virus_scanner.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import clamd\nfrom typing import Optional\n\nclass VirusScanner:\n    def __init__(self):\n        try:\n            self.scanner = clamd.ClamdUnixSocket()\n            self.scanner.ping()\n            self.enabled = True\n        except:\n            self.enabled = False\n            print(\"Warning: ClamAV not available. Virus scanning disabled.\")\n\n    def scan(self, file_bytes: bytes) -> dict:\n        \"\"\"\ubc14\uc774\ub7ec\uc2a4 \uc2a4\uce94\"\"\"\n        if not self.enabled:\n            return {'clean': True, 'message': 'Scanning disabled'}\n\n        result = self.scanner.instream(io.BytesIO(file_bytes))\n        status = result['stream'][0]\n\n        if status == 'OK':\n            return {'clean': True, 'message': 'File is clean'}\n        else:\n            return {'clean': False, 'message': status}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, File, UploadFile, Depends, HTTPException, BackgroundTasks\nfrom fastapi.responses import StreamingResponse\nfrom sqlalchemy.orm import Session\nimport models, schemas\nfrom database import engine, get_db\nfrom s3_client import S3Client\nfrom image_processor import ImageProcessor\nfrom virus_scanner import VirusScanner\nfrom auth import get_current_user\nimport uuid\nfrom datetime import datetime, timedelta\nimport io\nimport mimetypes\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="File Storage API")\n\ns3_client = S3Client()\nimage_processor = ImageProcessor()\nvirus_scanner = VirusScanner()\n\ndef get_file_category(mime_type: str) -> str:\n    """MIME \ud0c0\uc785\uc73c\ub85c \uce74\ud14c\uace0\ub9ac \uacb0\uc815"""\n    if mime_type.startswith(\'image/\'):\n        return \'image\'\n    elif mime_type.startswith(\'video/\'):\n        return \'video\'\n    elif mime_type in [\'application/pdf\', \'application/msword\', \'text/\']:\n        return \'document\'\n    elif mime_type in [\'application/zip\', \'application/x-rar\']:\n        return \'archive\'\n    else:\n        return \'other\'\n\n@app.post("/files", response_model=schemas.File)\nasync def upload_file(\n    file: UploadFile = File(...),\n    background_tasks: BackgroundTasks,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ud30c\uc77c \uc5c5\ub85c\ub4dc"""\n    # \ud30c\uc77c \uc77d\uae30\n    file_bytes = await file.read()\n    file_size = len(file_bytes)\n\n    # \ud06c\uae30 \uc81c\ud55c (100MB)\n    if file_size > 100 * 1024 * 1024:\n        raise HTTPException(status_code=400, detail="File too large (max 100MB)")\n\n    # MIME \ud0c0\uc785 \ud655\uc778\n    mime_type = file.content_type or mimetypes.guess_type(file.filename)[0] or \'application/octet-stream\'\n    category = get_file_category(mime_type)\n\n    # \uace0\uc720 \ud30c\uc77c\uba85 \uc0dd\uc131\n    file_id = str(uuid.uuid4())\n    extension = file.filename.split(\'.\')[-1] if \'.\' in file.filename else \'\'\n    s3_key = f"users/{current_user.id}/{file_id}.{extension}" if extension else f"users/{current_user.id}/{file_id}"\n\n    # S3 \uc5c5\ub85c\ub4dc\n    s3_url = s3_client.upload_file(\n        io.BytesIO(file_bytes),\n        s3_key,\n        mime_type,\n        metadata={\n            \'original_filename\': file.filename,\n            \'user_id\': str(current_user.id)\n        }\n    )\n\n    # DB \uc800\uc7a5\n    db_file = models.File(\n        user_id=current_user.id,\n        filename=f"{file_id}.{extension}" if extension else file_id,\n        original_filename=file.filename,\n        file_type=mime_type,\n        category=category,\n        size=file_size,\n        s3_bucket=s3_client.bucket,\n        s3_key=s3_key,\n        s3_url=s3_url\n    )\n\n    # \uc774\ubbf8\uc9c0\uc778 \uacbd\uc6b0 \uc378\ub124\uc77c \uc0dd\uc131\n    if category == \'image\':\n        try:\n            # \uc774\ubbf8\uc9c0 \uc815\ubcf4\n            info = image_processor.get_image_info(file_bytes)\n            db_file.width = info[\'width\']\n            db_file.height = info[\'height\']\n\n            # \uc378\ub124\uc77c \uc0dd\uc131 (\ubc31\uadf8\ub77c\uc6b4\ub4dc)\n            background_tasks.add_task(\n                create_thumbnail_task,\n                file_id,\n                file_bytes,\n                s3_key,\n                db\n            )\n        except Exception as e:\n            print(f"Image processing error: {e}")\n\n    # \ubc14\uc774\ub7ec\uc2a4 \uc2a4\uce94 (\ubc31\uadf8\ub77c\uc6b4\ub4dc)\n    background_tasks.add_task(scan_virus_task, db_file.id, file_bytes, db)\n\n    db.add(db_file)\n    db.commit()\n    db.refresh(db_file)\n\n    return db_file\n\nasync def create_thumbnail_task(file_id: str, file_bytes: bytes, original_key: str, db: Session):\n    """\uc378\ub124\uc77c \uc0dd\uc131 \ud0dc\uc2a4\ud06c"""\n    try:\n        thumbnail_bytes = image_processor.create_thumbnail(file_bytes)\n        thumbnail_key = original_key.replace(f"{file_id}.", f"{file_id}_thumb.")\n\n        # S3 \uc5c5\ub85c\ub4dc\n        thumbnail_url = s3_client.upload_file(\n            io.BytesIO(thumbnail_bytes),\n            thumbnail_key,\n            \'image/jpeg\'\n        )\n\n        # DB \uc5c5\ub370\uc774\ud2b8\n        db_file = db.query(models.File).filter(models.File.filename.contains(file_id)).first()\n        if db_file:\n            db_file.thumbnail_s3_key = thumbnail_key\n            db_file.thumbnail_url = thumbnail_url\n            db.commit()\n    except Exception as e:\n        print(f"Thumbnail creation error: {e}")\n\nasync def scan_virus_task(file_id: int, file_bytes: bytes, db: Session):\n    """\ubc14\uc774\ub7ec\uc2a4 \uc2a4\uce94 \ud0dc\uc2a4\ud06c"""\n    result = virus_scanner.scan(file_bytes)\n\n    db_file = db.query(models.File).filter(models.File.id == file_id).first()\n    if db_file:\n        db_file.virus_scanned = True\n        db_file.virus_scan_result = \'clean\' if result[\'clean\'] else result[\'message\']\n\n        # \ubc14\uc774\ub7ec\uc2a4 \ubc1c\uacac \uc2dc \ud30c\uc77c \uc0ad\uc81c\n        if not result[\'clean\']:\n            s3_client.delete_file(db_file.s3_key)\n            db.delete(db_file)\n\n        db.commit()\n\n@app.get("/files/{file_id}/download")\nasync def download_file(\n    file_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc (\uc2a4\ud2b8\ub9ac\ubc0d)"""\n    file = db.query(models.File).filter(models.File.id == file_id).first()\n\n    if not file:\n        raise HTTPException(status_code=404, detail="File not found")\n\n    # \uad8c\ud55c \ud655\uc778\n    if file.user_id != current_user.id and not file.is_public:\n        raise HTTPException(status_code=403, detail="Access denied")\n\n    # S3\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc\n    file_bytes = s3_client.download_file(file.s3_key)\n\n    return StreamingResponse(\n        io.BytesIO(file_bytes),\n        media_type=file.file_type,\n        headers={\n            \'Content-Disposition\': f\'attachment; filename="{file.original_filename}"\'\n        }\n    )\n\n@app.post("/files/{file_id}/share")\ndef create_share_link(\n    file_id: int,\n    expires_in_hours: int = 24,\n    max_downloads: int = None,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uacf5\uc720 \ub9c1\ud06c \uc0dd\uc131"""\n    file = db.query(models.File).filter(\n        models.File.id == file_id,\n        models.File.user_id == current_user.id\n    ).first()\n\n    if not file:\n        raise HTTPException(status_code=404, detail="File not found")\n\n    # \uacf5\uc720 \ud1a0\ud070 \uc0dd\uc131\n    share_token = str(uuid.uuid4())\n    expires_at = datetime.utcnow() + timedelta(hours=expires_in_hours)\n\n    share = models.FileShare(\n        file_id=file_id,\n        share_token=share_token,\n        expires_at=expires_at,\n        max_downloads=max_downloads\n    )\n\n    db.add(share)\n    db.commit()\n\n    return {\n        "share_url": f"/shared/{share_token}",\n        "expires_at": expires_at,\n        "max_downloads": max_downloads\n    }\n\n@app.get("/shared/{share_token}")\nasync def download_shared_file(share_token: str, db: Session = Depends(get_db)):\n    """\uacf5\uc720 \ub9c1\ud06c\ub85c \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc"""\n    share = db.query(models.FileShare).filter(\n        models.FileShare.share_token == share_token\n    ).first()\n\n    if not share:\n        raise HTTPException(status_code=404, detail="Share not found")\n\n    # \ub9cc\ub8cc \ud655\uc778\n    if share.expires_at < datetime.utcnow():\n        raise HTTPException(status_code=410, detail="Share expired")\n\n    # \ub2e4\uc6b4\ub85c\ub4dc \ud69f\uc218 \ud655\uc778\n    if share.max_downloads and share.download_count >= share.max_downloads:\n        raise HTTPException(status_code=403, detail="Download limit reached")\n\n    # \ub2e4\uc6b4\ub85c\ub4dc \uce74\uc6b4\ud2b8 \uc99d\uac00\n    share.download_count += 1\n    db.commit()\n\n    # \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc\n    file = share.file\n    file_bytes = s3_client.download_file(file.s3_key)\n\n    return StreamingResponse(\n        io.BytesIO(file_bytes),\n        media_type=file.file_type,\n        headers={\n            \'Content-Disposition\': f\'attachment; filename="{file.original_filename}"\'\n        }\n    )\n\n@app.delete("/files/{file_id}")\ndef delete_file(\n    file_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ud30c\uc77c \uc0ad\uc81c"""\n    file = db.query(models.File).filter(\n        models.File.id == file_id,\n        models.File.user_id == current_user.id\n    ).first()\n\n    if not file:\n        raise HTTPException(status_code=404, detail="File not found")\n\n    # S3\uc5d0\uc11c \uc0ad\uc81c\n    s3_client.delete_file(file.s3_key)\n    if file.thumbnail_s3_key:\n        s3_client.delete_file(file.thumbnail_s3_key)\n\n    # DB\uc5d0\uc11c \uc0ad\uc81c\n    db.delete(file)\n    db.commit()\n\n    return {"message": "File deleted"}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"docker-composeyml",children:"docker-compose.yml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "8000:8000"\n    environment:\n      S3_ENDPOINT: http://minio:9000\n      S3_ACCESS_KEY: minioadmin\n      S3_SECRET_KEY: minioadmin\n      S3_BUCKET: files\n    depends_on:\n      - minio\n      - clamav\n\n  minio:\n    image: minio/minio\n    ports:\n      - "9000:9000"\n      - "9001:9001"\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n    command: server /data --console-address ":9001"\n    volumes:\n      - minio-data:/data\n\n  clamav:\n    image: clamav/clamav\n    ports:\n      - "3310:3310"\n\nvolumes:\n  minio-data:\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,t.jsx)(n.h3,{id:"\uc2a4\ud2b8\ub9ac\ubc0d-\ub2e4\uc6b4\ub85c\ub4dc",children:"\uc2a4\ud2b8\ub9ac\ubc0d \ub2e4\uc6b4\ub85c\ub4dc"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"StreamingResponse"}),"\ub85c \ub300\uc6a9\ub7c9 \ud30c\uc77c \ud6a8\uc728\uc801 \uc804\uc1a1"]}),"\n",(0,t.jsx)(n.li,{children:"\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ucd5c\uc18c\ud654"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\ubc31\uadf8\ub77c\uc6b4\ub4dc-\uc791\uc5c5",children:"\ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\uc378\ub124\uc77c \uc0dd\uc131, \ubc14\uc774\ub7ec\uc2a4 \uc2a4\uce94\uc740 \ube44\ub3d9\uae30 \ucc98\ub9ac"}),"\n",(0,t.jsx)(n.li,{children:"\uc0ac\uc6a9\uc790 \uc751\ub2f5 \uc2dc\uac04 \ub2e8\ucd95"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\uacf5\uc720-\ub9c1\ud06c",children:"\uacf5\uc720 \ub9c1\ud06c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\ub9cc\ub8cc \uc2dc\uac04\uacfc \ub2e4\uc6b4\ub85c\ub4dc \ud69f\uc218 \uc81c\ud55c"}),"\n",(0,t.jsx)(n.li,{children:"UUID\ub85c \uc608\uce21 \ubd88\uac00\ub2a5\ud55c \ud1a0\ud070 \uc0dd\uc131"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"./scenario-08-social-media",children:"\uc18c\uc15c \ubbf8\ub514\uc5b4 API"})]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(6540);const t={},a=s.createContext(t);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);