"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3116],{4861:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"rabbitmq/basic/topics","title":"Topics - \ud328\ud134 \ub9e4\uce6d","description":"Routing Key \ud328\ud134\uc744 \uc0ac\uc6a9\ud55c \uc720\uc5f0\ud55c \ub77c\uc6b0\ud305\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/basic/topics.md","sourceDirName":"rabbitmq/basic","slug":"/rabbitmq/basic/topics","permalink":"/docs/rabbitmq/basic/topics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/basic/topics.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"rabbitmqSidebar","previous":{"title":"Routing - \uc120\ud0dd\uc801 \ub77c\uc6b0\ud305","permalink":"/docs/rabbitmq/basic/routing"},"next":{"title":"\uc2e4\uc804 \uc2dc\ub098\ub9ac\uc624 \uc18c\uac1c","permalink":"/docs/rabbitmq/examples/intro"}}');var c=i(4848),t=i(8453);const l={sidebar_position:8},a="Topics - \ud328\ud134 \ub9e4\uce6d",s={},o=[{value:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c",id:"-\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"\ud83d\udcca \ud328\ud134 \uad6c\uc870",id:"-\ud328\ud134-\uad6c\uc870",level:2},{value:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624",id:"-\uc2dc\ub098\ub9ac\uc624",level:2},{value:"\ud83d\udd27 \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"Publisher (\ub85c\uadf8 \ubc1c\ud589)",id:"publisher-\ub85c\uadf8-\ubc1c\ud589",level:3},{value:"Critical Logger (<em>.critical.</em>)",id:"critical-logger-critical",level:3},{value:"Kernel Logger (kern.#)",id:"kernel-logger-kern",level:3},{value:"Disk Monitor (<em>.</em>.disk)",id:"disk-monitor-disk",level:3},{value:"All Logger (#)",id:"all-logger-",level:3},{value:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc",id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",level:2},{value:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c",id:"-\uc2e4\ud589-\uc608\uc81c",level:2},{value:"1. Logger\ub4e4 \uc2e4\ud589",id:"1-logger\ub4e4-\uc2e4\ud589",level:3},{value:"2. \ub85c\uadf8 \ubc1c\ud589",id:"2-\ub85c\uadf8-\ubc1c\ud589",level:3},{value:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"1. Topic Exchange",id:"1-topic-exchange",level:3},{value:"2. \uc640\uc77c\ub4dc\uce74\ub4dc",id:"2-\uc640\uc77c\ub4dc\uce74\ub4dc",level:3},{value:"3. \ud328\ud134 \uc870\ud569",id:"3-\ud328\ud134-\uc870\ud569",level:3},{value:"\ud83d\udd0d Exchange \ud0c0\uc785 \ucd1d\uc815\ub9ac",id:"-exchange-\ud0c0\uc785-\ucd1d\uc815\ub9ac",level:2},{value:"\ud83d\udca1 \uc2e4\uc804 \ud65c\uc6a9 \uc0ac\ub840",id:"-\uc2e4\uc804-\ud65c\uc6a9-\uc0ac\ub840",level:2},{value:"1. IoT \uc13c\uc11c \ub370\uc774\ud130",id:"1-iot-\uc13c\uc11c-\ub370\uc774\ud130",level:3},{value:"2. \uae08\uc735 \uac70\ub798 \uc54c\ub9bc",id:"2-\uae08\uc735-\uac70\ub798-\uc54c\ub9bc",level:3},{value:"3. \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc774\ubca4\ud2b8",id:"3-\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4-\uc774\ubca4\ud2b8",level:3},{value:"\u2705 \uc2e4\uc2b5 \uacfc\uc81c",id:"-\uc2e4\uc2b5-\uacfc\uc81c",level:2},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components},{Details:i}=e;return i||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.header,{children:(0,c.jsx)(e.h1,{id:"topics---\ud328\ud134-\ub9e4\uce6d",children:"Topics - \ud328\ud134 \ub9e4\uce6d"})}),"\n",(0,c.jsx)(e.p,{children:"Routing Key \ud328\ud134\uc744 \uc0ac\uc6a9\ud55c \uc720\uc5f0\ud55c \ub77c\uc6b0\ud305\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,c.jsx)(e.h2,{id:"-\ud559\uc2b5-\ubaa9\ud45c",children:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c"}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"Topic Exchange \uc774\ud574"}),"\n",(0,c.jsx)(e.li,{children:"\uc640\uc77c\ub4dc\uce74\ub4dc \ud328\ud134 \ud65c\uc6a9"}),"\n",(0,c.jsx)(e.li,{children:"\ubcf5\uc7a1\ud55c \ub77c\uc6b0\ud305 \uad6c\ud604"}),"\n",(0,c.jsx)(e.li,{children:"\uc2e4\uc804 \uc2dc\ub098\ub9ac\uc624 \uc801\uc6a9"}),"\n"]}),"\n",(0,c.jsx)(e.h2,{id:"-\ud328\ud134-\uad6c\uc870",children:"\ud83d\udcca \ud328\ud134 \uad6c\uc870"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"Producer \u2192 [Topic Exchange]\n   (kern.critical)     \u2193\n                   \u250c\u2192 Queue (*.critical)    \u2192 Critical Logger\n                   \u251c\u2192 Queue (kern.*)        \u2192 Kernel Logger\n                   \u2514\u2192 Queue (#)             \u2192 All Logger\n\n\ud328\ud134 \ub9e4\uce6d:\n* : \uc815\ud655\ud788 1\uac1c \ub2e8\uc5b4\n# : 0\uac1c \uc774\uc0c1\uc758 \ub2e8\uc5b4\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"\ud2b9\uc9d5"}),":"]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"\uc640\uc77c\ub4dc\uce74\ub4dc \ud328\ud134 \ub9e4\uce6d"}),"\n",(0,c.jsx)(e.li,{children:"\uc720\uc5f0\ud55c \ub77c\uc6b0\ud305"}),"\n",(0,c.jsx)(e.li,{children:"\uacc4\uce35\uc801 \uba54\uc2dc\uc9c0 \ubd84\ub958"}),"\n",(0,c.jsx)(e.li,{children:"\ubcf5\uc7a1\ud55c \uad6c\ub3c5 \uc2dc\ub098\ub9ac\uc624\uc5d0 \uc720\uc6a9"}),"\n"]}),"\n",(0,c.jsx)(e.h2,{id:"-\uc2dc\ub098\ub9ac\uc624",children:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624"}),"\n",(0,c.jsx)(e.p,{children:"\ubd84\uc0b0 \uc2dc\uc2a4\ud15c \ub85c\uadf8 \uc218\uc9d1:"}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\ub85c\uadf8 \ud615\uc2dd: ",(0,c.jsx)(e.code,{children:"<facility>.<severity>.<source>"}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"kern.critical.cpu"}),": \ucee4\ub110 \uc2ec\uac01\ud55c CPU \uc5d0\ub7ec"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"user.warning.disk"}),": \uc720\uc800 \uacbd\uace0 \ub514\uc2a4\ud06c"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:"kern.info.network"}),": \ucee4\ub110 \uc815\ubcf4 \ub124\ud2b8\uc6cc\ud06c"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["Consumer\ubcc4 \uad6c\ub3c5 \ud328\ud134:","\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["Critical Logger: ",(0,c.jsx)(e.code,{children:"*.critical.*"})," (\ubaa8\ub4e0 Critical)"]}),"\n",(0,c.jsxs)(e.li,{children:["Kernel Logger: ",(0,c.jsx)(e.code,{children:"kern.*.*"})," (\ubaa8\ub4e0 Kernel)"]}),"\n",(0,c.jsxs)(e.li,{children:["Disk Monitor: ",(0,c.jsx)(e.code,{children:"*.*.disk"})," (\ubaa8\ub4e0 Disk)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(e.h2,{id:"-\uad6c\ud604",children:"\ud83d\udd27 \uad6c\ud604"}),"\n",(0,c.jsx)(e.h3,{id:"publisher-\ub85c\uadf8-\ubc1c\ud589",children:"Publisher (\ub85c\uadf8 \ubc1c\ud589)"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# topic_publisher.py\nimport pika\nimport sys\nimport json\nfrom datetime import datetime\nfrom typing import Literal\n\nFacility = Literal['kern', 'user', 'mail', 'daemon']\nSeverity = Literal['critical', 'error', 'warning', 'info', 'debug']\nSource = Literal['cpu', 'disk', 'network', 'memory']\n\nclass TopicLogPublisher:\n    \"\"\"Topic Exchange \ub85c\uadf8 \ubc1c\ud589\uc790\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n        self.exchange = 'topic_logs'\n\n    def publish_log(\n        self,\n        facility: Facility,\n        severity: Severity,\n        source: Source,\n        message: str\n    ):\n        \"\"\"\n        \ub85c\uadf8 \ubc1c\ud589\n\n        Args:\n            facility: \uc2dc\uc2a4\ud15c \uad6c\ubd84 (kern, user, mail, daemon)\n            severity: \uc2ec\uac01\ub3c4 (critical, error, warning, info, debug)\n            source: \ucd9c\ucc98 (cpu, disk, network, memory)\n            message: \ub85c\uadf8 \uba54\uc2dc\uc9c0\n        \"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        # Topic Exchange \uc120\uc5b8\n        channel.exchange_declare(\n            exchange=self.exchange,\n            exchange_type='topic'\n        )\n\n        # Routing Key: facility.severity.source\n        routing_key = f\"{facility}.{severity}.{source}\"\n\n        log_data = {\n            'facility': facility,\n            'severity': severity,\n            'source': source,\n            'message': message,\n            'timestamp': datetime.now().isoformat()\n        }\n\n        channel.basic_publish(\n            exchange=self.exchange,\n            routing_key=routing_key,  # \ud83d\udd11 \uc810(.)\uc73c\ub85c \uad6c\ubd84\ub41c \ud328\ud134\n            body=json.dumps(log_data)\n        )\n\n        print(f\" [x] Sent [{routing_key}]: {message}\")\n        connection.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    publisher = TopicLogPublisher()\n\n    # \ub2e4\uc591\ud55c \ub85c\uadf8 \ubc1c\ud589\n    publisher.publish_log('kern', 'critical', 'cpu', 'CPU overheating detected!')\n    publisher.publish_log('user', 'warning', 'disk', 'Disk usage at 85%')\n    publisher.publish_log('kern', 'info', 'network', 'Network interface initialized')\n    publisher.publish_log('mail', 'error', 'disk', 'Mail queue full')\n    publisher.publish_log('daemon', 'critical', 'memory', 'Out of memory!')\n"})}),"\n",(0,c.jsxs)(e.h3,{id:"critical-logger-critical",children:["Critical Logger (",(0,c.jsx)(e.em,{children:".critical."}),")"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# critical_logger.py\nimport pika\nimport json\n\ndef handle_critical(ch, method, properties, body):\n    \"\"\"\ubaa8\ub4e0 Critical \ub85c\uadf8 \ucc98\ub9ac\"\"\"\n    log_data = json.loads(body.decode())\n\n    print(f\"\"\"\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \ud83d\udea8 CRITICAL ALERT\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    Routing Key: {method.routing_key}\n    Facility: {log_data['facility']}\n    Source: {log_data['source']}\n    Time: {log_data['timestamp']}\n    Message: {log_data['message']}\n\n    Action: Immediate intervention required!\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \"\"\")\n\n    # PagerDuty, Slack \ub4f1\uc73c\ub85c \uae34\uae09 \uc54c\ub9bc\n    # send_pagerduty_alert(log_data)\n\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start():\n    \"\"\"Critical Logger \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(\n        exchange='topic_logs',\n        exchange_type='topic'\n    )\n\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    # \ud83d\udd11 \ud328\ud134: *.critical.* (\ubaa8\ub4e0 critical \ub85c\uadf8)\n    binding_key = '*.critical.*'\n    channel.queue_bind(\n        exchange='topic_logs',\n        queue=queue_name,\n        routing_key=binding_key\n    )\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=handle_critical\n    )\n\n    print(f' [*] Critical Logger waiting for [{binding_key}]...')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nCritical Logger stopped')\n"})}),"\n",(0,c.jsx)(e.h3,{id:"kernel-logger-kern",children:"Kernel Logger (kern.#)"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# kernel_logger.py\nimport pika\nimport json\n\ndef handle_kernel(ch, method, properties, body):\n    \"\"\"\ubaa8\ub4e0 Kernel \ub85c\uadf8 \ucc98\ub9ac\"\"\"\n    log_data = json.loads(body.decode())\n\n    severity_icons = {\n        'critical': '\ud83d\udea8',\n        'error': '\u274c',\n        'warning': '\u26a0\ufe0f',\n        'info': '\u2139\ufe0f',\n        'debug': '\ud83d\udc1b'\n    }\n\n    icon = severity_icons.get(log_data['severity'], '\ud83d\udcdd')\n\n    print(f\"{icon} [KERNEL] [{method.routing_key}] \"\n          f\"{log_data['message']}\")\n\n    # Kernel \ub85c\uadf8\ub97c \ubcc4\ub3c4 \ud30c\uc77c\uc5d0 \uc800\uc7a5\n    with open('kernel.log', 'a', encoding='utf-8') as f:\n        f.write(f\"[{log_data['timestamp']}] [{method.routing_key}] \"\n                f\"{log_data['message']}\\n\")\n\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start():\n    \"\"\"Kernel Logger \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(\n        exchange='topic_logs',\n        exchange_type='topic'\n    )\n\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    # \ud83d\udd11 \ud328\ud134: kern.# (\ubaa8\ub4e0 kern \ub85c\uadf8)\n    # kern.critical.cpu \u2713\n    # kern.info.network \u2713\n    # kern.warning.disk.raid \u2713 (# = \uc5ec\ub7ec \ub2e8\uc5b4 \ub9e4\uce6d)\n    binding_key = 'kern.#'\n    channel.queue_bind(\n        exchange='topic_logs',\n        queue=queue_name,\n        routing_key=binding_key\n    )\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=handle_kernel\n    )\n\n    print(f' [*] Kernel Logger waiting for [{binding_key}]...')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nKernel Logger stopped')\n"})}),"\n",(0,c.jsxs)(e.h3,{id:"disk-monitor-disk",children:["Disk Monitor (",(0,c.jsx)(e.em,{children:"."}),".disk)"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# disk_monitor.py\nimport pika\nimport json\n\ndef handle_disk(ch, method, properties, body):\n    \"\"\"\ubaa8\ub4e0 Disk \uad00\ub828 \ub85c\uadf8 \ucc98\ub9ac\"\"\"\n    log_data = json.loads(body.decode())\n\n    print(f\"\"\"\n    \ud83d\udcbe DISK EVENT\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    Routing Key: {method.routing_key}\n    Facility: {log_data['facility']}\n    Severity: {log_data['severity']}\n    Message: {log_data['message']}\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \"\"\")\n\n    # \ub514\uc2a4\ud06c \uc0ac\uc6a9\ub7c9 \uccb4\ud06c, \uc54c\ub9bc \ub4f1\n    if log_data['severity'] in ['critical', 'error']:\n        print(\" [!] Running disk cleanup...\")\n\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start():\n    \"\"\"Disk Monitor \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(\n        exchange='topic_logs',\n        exchange_type='topic'\n    )\n\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    # \ud83d\udd11 \ud328\ud134: *.*.disk (\ubaa8\ub4e0 disk \ub85c\uadf8)\n    # kern.critical.disk \u2713\n    # user.warning.disk \u2713\n    # mail.error.disk \u2713\n    binding_key = '*.*.disk'\n    channel.queue_bind(\n        exchange='topic_logs',\n        queue=queue_name,\n        routing_key=binding_key\n    )\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=handle_disk\n    )\n\n    print(f' [*] Disk Monitor waiting for [{binding_key}]...')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nDisk Monitor stopped')\n"})}),"\n",(0,c.jsx)(e.h3,{id:"all-logger-",children:"All Logger (#)"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# all_topic_logger.py\nimport pika\nimport json\n\ndef log_all(ch, method, properties, body):\n    \"\"\"\ubaa8\ub4e0 \ub85c\uadf8 \uae30\ub85d\"\"\"\n    log_data = json.loads(body.decode())\n\n    print(f\"[{log_data['timestamp']}] [{method.routing_key}] \"\n          f\"{log_data['message']}\")\n\ndef start():\n    \"\"\"All Logger \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(\n        exchange='topic_logs',\n        exchange_type='topic'\n    )\n\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    # \ud83d\udd11 \ud328\ud134: # (\ubaa8\ub4e0 \ub85c\uadf8)\n    binding_key = '#'\n    channel.queue_bind(\n        exchange='topic_logs',\n        queue=queue_name,\n        routing_key=binding_key\n    )\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=log_all\n    )\n\n    print(f' [*] All Logger waiting for [{binding_key}]...')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nAll Logger stopped')\n"})}),"\n",(0,c.jsx)(e.h2,{id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",children:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# test_topics.py\nimport pytest\nimport pika\nimport json\n\nclass TestTopics:\n    \"\"\"Topic Exchange \ud14c\uc2a4\ud2b8\"\"\"\n\n    @pytest.fixture\n    def setup(self):\n        \"\"\"\ud14c\uc2a4\ud2b8 \ud658\uacbd \uc124\uc815\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        try:\n            channel.exchange_delete(exchange='test_topic_logs')\n        except:\n            pass\n\n        yield channel\n        connection.close()\n\n    def test_wildcard_star(self, setup):\n        \"\"\"* (\uc815\ud655\ud788 1\uac1c \ub2e8\uc5b4) \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        channel.exchange_declare(\n            exchange='test_topic_logs',\n            exchange_type='topic'\n        )\n\n        queue = channel.queue_declare(queue='', exclusive=True).method.queue\n\n        # \ud328\ud134: *.critical.*\n        channel.queue_bind(\n            exchange='test_topic_logs',\n            queue=queue,\n            routing_key='*.critical.*'\n        )\n\n        # \ub9e4\uce6d\ub418\ub294 \ucf00\uc774\uc2a4\n        matching_keys = [\n            'kern.critical.cpu',\n            'user.critical.disk',\n            'mail.critical.network'\n        ]\n\n        for key in matching_keys:\n            channel.basic_publish(\n                exchange='test_topic_logs',\n                routing_key=key,\n                body=f'Message: {key}'\n            )\n\n        # 3\uac1c \uba54\uc2dc\uc9c0 \ubaa8\ub450 \ubc1b\uc544\uc57c \ud568\n        for _ in range(3):\n            method, properties, body = channel.basic_get(\n                queue=queue,\n                auto_ack=True\n            )\n            assert method is not None\n\n        # \ud050\uac00 \ube44\uc5b4\uc788\uc5b4\uc57c \ud568\n        assert channel.basic_get(queue=queue, auto_ack=True)[0] is None\n\n    def test_wildcard_hash(self, setup):\n        \"\"\"# (0\uac1c \uc774\uc0c1\uc758 \ub2e8\uc5b4) \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        channel.exchange_declare(\n            exchange='test_topic_logs',\n            exchange_type='topic'\n        )\n\n        queue = channel.queue_declare(queue='', exclusive=True).method.queue\n\n        # \ud328\ud134: kern.#\n        channel.queue_bind(\n            exchange='test_topic_logs',\n            queue=queue,\n            routing_key='kern.#'\n        )\n\n        # \ub9e4\uce6d\ub418\ub294 \ucf00\uc774\uc2a4\n        matching_keys = [\n            'kern.critical',           # # = 1\uac1c \ub2e8\uc5b4\n            'kern.critical.cpu',       # # = 2\uac1c \ub2e8\uc5b4\n            'kern.info.network.eth0'   # # = 3\uac1c \ub2e8\uc5b4\n        ]\n\n        for key in matching_keys:\n            channel.basic_publish(\n                exchange='test_topic_logs',\n                routing_key=key,\n                body=f'Message: {key}'\n            )\n\n        # 3\uac1c \uba54\uc2dc\uc9c0 \ubaa8\ub450 \ubc1b\uc544\uc57c \ud568\n        for _ in range(3):\n            method, properties, body = channel.basic_get(\n                queue=queue,\n                auto_ack=True\n            )\n            assert method is not None\n\n        # \ub9e4\uce6d \uc548\ub418\ub294 \ucf00\uc774\uc2a4\n        channel.basic_publish(\n            exchange='test_topic_logs',\n            routing_key='user.critical.cpu',\n            body='Should not match'\n        )\n\n        # \ud050\uac00 \ube44\uc5b4\uc788\uc5b4\uc57c \ud568\n        assert channel.basic_get(queue=queue, auto_ack=True)[0] is None\n\n    def test_multiple_topic_bindings(self, setup):\n        \"\"\"\uc5ec\ub7ec \ud328\ud134 \ubc14\uc778\ub529 \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        channel.exchange_declare(\n            exchange='test_topic_logs',\n            exchange_type='topic'\n        )\n\n        queue = channel.queue_declare(queue='', exclusive=True).method.queue\n\n        # \uc5ec\ub7ec \ud328\ud134 \ubc14\uc778\ub529\n        patterns = ['*.critical.*', 'kern.#', '*.*.disk']\n        for pattern in patterns:\n            channel.queue_bind(\n                exchange='test_topic_logs',\n                queue=queue,\n                routing_key=pattern\n            )\n\n        # \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\n        test_cases = {\n            'kern.critical.cpu': True,    # 2\uac1c \ud328\ud134 \ub9e4\uce6d\n            'user.critical.disk': True,   # 2\uac1c \ud328\ud134 \ub9e4\uce6d\n            'kern.info.network': True,    # 1\uac1c \ud328\ud134 \ub9e4\uce6d\n            'user.warning.disk': True,    # 1\uac1c \ud328\ud134 \ub9e4\uce6d\n            'mail.info.network': False,   # \ub9e4\uce6d \uc548\ub428\n        }\n\n        for routing_key, should_match in test_cases.items():\n            channel.basic_publish(\n                exchange='test_topic_logs',\n                routing_key=routing_key,\n                body=f'Test: {routing_key}'\n            )\n\n            method, properties, body = channel.basic_get(\n                queue=queue,\n                auto_ack=True\n            )\n\n            if should_match:\n                assert method is not None, f\"{routing_key} should match\"\n            else:\n                assert method is None, f\"{routing_key} should not match\"\n"})}),"\n",(0,c.jsx)(e.h2,{id:"-\uc2e4\ud589-\uc608\uc81c",children:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c"}),"\n",(0,c.jsx)(e.h3,{id:"1-logger\ub4e4-\uc2e4\ud589",children:"1. Logger\ub4e4 \uc2e4\ud589"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 1 - Critical Logger (*.critical.*)\npython critical_logger.py\n\n# \ud130\ubbf8\ub110 2 - Kernel Logger (kern.#)\npython kernel_logger.py\n\n# \ud130\ubbf8\ub110 3 - Disk Monitor (*.*.disk)\npython disk_monitor.py\n\n# \ud130\ubbf8\ub110 4 - All Logger (#)\npython all_topic_logger.py\n"})}),"\n",(0,c.jsx)(e.h3,{id:"2-\ub85c\uadf8-\ubc1c\ud589",children:"2. \ub85c\uadf8 \ubc1c\ud589"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 5\npython topic_publisher.py\n"})}),"\n",(0,c.jsxs)(e.p,{children:[(0,c.jsx)(e.strong,{children:"\ucd9c\ub825 \uacb0\uacfc"}),":"]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"# Critical Logger (*.critical.*)\n\ud83d\udea8 CRITICAL ALERT\nRouting Key: kern.critical.cpu\nMessage: CPU overheating detected!\n---\n\ud83d\udea8 CRITICAL ALERT\nRouting Key: daemon.critical.memory\nMessage: Out of memory!\n\n# Kernel Logger (kern.#)\n\ud83d\udea8 [KERNEL] [kern.critical.cpu] CPU overheating detected!\n\u2139\ufe0f [KERNEL] [kern.info.network] Network interface initialized\n\n# Disk Monitor (*.*.disk)\n\ud83d\udcbe DISK EVENT\nRouting Key: user.warning.disk\nMessage: Disk usage at 85%\n---\n\ud83d\udcbe DISK EVENT\nRouting Key: mail.error.disk\nMessage: Mail queue full\n\n# All Logger (#)\n[2024-01-15T10:30:45] [kern.critical.cpu] CPU overheating detected!\n[2024-01-15T10:30:46] [user.warning.disk] Disk usage at 85%\n[2024-01-15T10:30:47] [kern.info.network] Network interface initialized\n[2024-01-15T10:30:48] [mail.error.disk] Mail queue full\n[2024-01-15T10:30:49] [daemon.critical.memory] Out of memory!\n"})}),"\n",(0,c.jsx)(e.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,c.jsx)(e.h3,{id:"1-topic-exchange",children:"1. Topic Exchange"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# Exchange \uc120\uc5b8\nchannel.exchange_declare(\n    exchange='topic_logs',\n    exchange_type='topic'  # \ud328\ud134 \ub9e4\uce6d\n)\n"})}),"\n",(0,c.jsx)(e.h3,{id:"2-\uc640\uc77c\ub4dc\uce74\ub4dc",children:"2. \uc640\uc77c\ub4dc\uce74\ub4dc"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# * : \uc815\ud655\ud788 1\uac1c \ub2e8\uc5b4\n'*.critical.*'\n# \u2713 kern.critical.cpu\n# \u2713 user.critical.disk\n# \u2717 critical.cpu (\ub2e8\uc5b4 2\uac1c)\n# \u2717 kern.critical.cpu.core0 (\ub2e8\uc5b4 4\uac1c)\n\n# # : 0\uac1c \uc774\uc0c1\uc758 \ub2e8\uc5b4\n'kern.#'\n# \u2713 kern\n# \u2713 kern.critical\n# \u2713 kern.critical.cpu\n# \u2713 kern.critical.cpu.core0\n# \u2717 user.critical (kern\uc774 \uc544\ub2d8)\n"})}),"\n",(0,c.jsx)(e.h3,{id:"3-\ud328\ud134-\uc870\ud569",children:"3. \ud328\ud134 \uc870\ud569"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# \uc5ec\ub7ec \ud328\ud134\uc744 \uc870\ud569\ud560 \uc218 \uc788\uc74c\npatterns = [\n    '*.critical.*',  # \ubaa8\ub4e0 critical\n    'kern.#',        # \ubaa8\ub4e0 kernel\n    '#.disk'         # \ubaa8\ub4e0 disk (\ub05d\uc5d0 disk)\n]\n\nfor pattern in patterns:\n    channel.queue_bind(\n        exchange='topic_logs',\n        queue=queue_name,\n        routing_key=pattern\n    )\n"})}),"\n",(0,c.jsx)(e.h2,{id:"-exchange-\ud0c0\uc785-\ucd1d\uc815\ub9ac",children:"\ud83d\udd0d Exchange \ud0c0\uc785 \ucd1d\uc815\ub9ac"}),"\n",(0,c.jsxs)(e.table,{children:[(0,c.jsx)(e.thead,{children:(0,c.jsxs)(e.tr,{children:[(0,c.jsx)(e.th,{children:"Exchange"}),(0,c.jsx)(e.th,{children:"Routing"}),(0,c.jsx)(e.th,{children:"\uc0ac\uc6a9 \uc608"})]})}),(0,c.jsxs)(e.tbody,{children:[(0,c.jsxs)(e.tr,{children:[(0,c.jsx)(e.td,{children:(0,c.jsx)(e.strong,{children:"Fanout"})}),(0,c.jsx)(e.td,{children:"routing_key \ubb34\uc2dc, \ubaa8\ub4e0 \ud050\uc5d0 \uc804\uc1a1"}),(0,c.jsx)(e.td,{children:"\uc2e4\uc2dc\uac04 \uc54c\ub9bc, \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8"})]}),(0,c.jsxs)(e.tr,{children:[(0,c.jsx)(e.td,{children:(0,c.jsx)(e.strong,{children:"Direct"})}),(0,c.jsx)(e.td,{children:"routing_key \uc815\ud655\ud788 \ub9e4\uce6d"}),(0,c.jsx)(e.td,{children:"\ub85c\uadf8 \ub808\ubca8\ubcc4 \ucc98\ub9ac"})]}),(0,c.jsxs)(e.tr,{children:[(0,c.jsx)(e.td,{children:(0,c.jsx)(e.strong,{children:"Topic"})}),(0,c.jsx)(e.td,{children:"routing_key \ud328\ud134 \ub9e4\uce6d (*, #)"}),(0,c.jsx)(e.td,{children:"\uacc4\uce35\uc801 \ub85c\uadf8, \ubcf5\uc7a1\ud55c \ub77c\uc6b0\ud305"})]})]})]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# Fanout\nrouting_key = ''  # \ubb34\uc2dc\ub428\nbinding_key = ''  # \ud544\uc694\uc5c6\uc74c\n\n# Direct\nrouting_key = 'error'\nbinding_key = 'error'  # \uc815\ud655\ud788 \uc77c\uce58\ud574\uc57c \ud568\n\n# Topic\nrouting_key = 'kern.critical.cpu'\nbinding_key = 'kern.#'  # \ud328\ud134 \ub9e4\uce6d\nbinding_key = '*.critical.*'  # \ud328\ud134 \ub9e4\uce6d\n"})}),"\n",(0,c.jsx)(e.h2,{id:"-\uc2e4\uc804-\ud65c\uc6a9-\uc0ac\ub840",children:"\ud83d\udca1 \uc2e4\uc804 \ud65c\uc6a9 \uc0ac\ub840"}),"\n",(0,c.jsx)(e.h3,{id:"1-iot-\uc13c\uc11c-\ub370\uc774\ud130",children:"1. IoT \uc13c\uc11c \ub370\uc774\ud130"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# \ud328\ud134: <location>.<device>.<metric>\n# home.livingroom.temperature\n# home.bedroom.humidity\n# office.server-room.cpu\n\n# \ubaa8\ub4e0 \uc628\ub3c4 \uc13c\uc11c\nbinding_key = '*.*.temperature'\n\n# \uc9d1\uc758 \ubaa8\ub4e0 \uc13c\uc11c\nbinding_key = 'home.#'\n\n# \uac70\uc2e4\uc758 \ubaa8\ub4e0 \uc13c\uc11c\nbinding_key = 'home.livingroom.*'\n"})}),"\n",(0,c.jsx)(e.h3,{id:"2-\uae08\uc735-\uac70\ub798-\uc54c\ub9bc",children:"2. \uae08\uc735 \uac70\ub798 \uc54c\ub9bc"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# \ud328\ud134: <market>.<asset>.<action>\n# stock.aapl.buy\n# crypto.btc.sell\n# forex.usd.alert\n\n# \ubaa8\ub4e0 \uc8fc\uc2dd \uac70\ub798\nbinding_key = 'stock.#'\n\n# \ubaa8\ub4e0 \uad6c\ub9e4 \uc54c\ub9bc\nbinding_key = '*.*.buy'\n\n# \ud2b9\uc815 \uc790\uc0b0\uc758 \ubaa8\ub4e0 \ud65c\ub3d9\nbinding_key = 'crypto.btc.*'\n"})}),"\n",(0,c.jsx)(e.h3,{id:"3-\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4-\uc774\ubca4\ud2b8",children:"3. \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc774\ubca4\ud2b8"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# \ud328\ud134: <service>.<entity>.<action>\n# user-service.user.created\n# order-service.order.completed\n# payment-service.payment.failed\n\n# \ubaa8\ub4e0 \uc0dd\uc131 \uc774\ubca4\ud2b8\nbinding_key = '*.*.created'\n\n# \ud2b9\uc815 \uc11c\ube44\uc2a4\uc758 \ubaa8\ub4e0 \uc774\ubca4\ud2b8\nbinding_key = 'user-service.#'\n\n# \ud2b9\uc815 \uc5d4\ud2f0\ud2f0\uc758 \ubaa8\ub4e0 \uc561\uc158\nbinding_key = '*.order.*'\n"})}),"\n",(0,c.jsx)(e.h2,{id:"-\uc2e4\uc2b5-\uacfc\uc81c",children:"\u2705 \uc2e4\uc2b5 \uacfc\uc81c"}),"\n",(0,c.jsx)(e.p,{children:"\ub2e4\uc74c \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694:"}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.strong,{children:"E-commerce \uc774\ubca4\ud2b8 \uc2dc\uc2a4\ud15c"})}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["\ud328\ud134: ",(0,c.jsx)(e.code,{children:"<service>.<action>.<region>"})]}),"\n",(0,c.jsxs)(e.li,{children:["Publisher: \ub2e4\uc591\ud55c \uc774\ubca4\ud2b8 \ubc1c\ud589","\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:(0,c.jsx)(e.code,{children:"order.created.us"})}),"\n",(0,c.jsx)(e.li,{children:(0,c.jsx)(e.code,{children:"payment.completed.asia"})}),"\n",(0,c.jsx)(e.li,{children:(0,c.jsx)(e.code,{children:"shipping.failed.europe"})}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(e.li,{children:["Consumers:","\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:["US Handler: ",(0,c.jsx)(e.code,{children:"*.*.us"})]}),"\n",(0,c.jsxs)(e.li,{children:["Order Monitor: ",(0,c.jsx)(e.code,{children:"order.#"})]}),"\n",(0,c.jsxs)(e.li,{children:["Failed Events: ",(0,c.jsx)(e.code,{children:"*.failed.*"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(i,{children:[(0,c.jsx)("summary",{children:"\uc815\ub2f5 \ubcf4\uae30"}),(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-python",children:"# us_handler.py\nimport pika\nimport json\n\ndef handle_us_events(ch, method, properties, body):\n    data = json.loads(body.decode())\n    print(f\" [US] {method.routing_key}: {data}\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters('localhost')\n)\nchannel = connection.channel()\n\nchannel.exchange_declare(exchange='ecommerce', exchange_type='topic')\nresult = channel.queue_declare(queue='', exclusive=True)\nqueue_name = result.method.queue\n\nchannel.queue_bind(\n    exchange='ecommerce',\n    queue=queue_name,\n    routing_key='*.*.us'\n)\n\nchannel.basic_consume(\n    queue=queue_name,\n    on_message_callback=handle_us_events\n)\n\nprint(' [*] US Handler waiting for [*.*.us]...')\nchannel.start_consuming()\n"})})]}),"\n",(0,c.jsx)(e.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.strong,{children:"Topic Exchange"}),": \ud328\ud134 \ub9e4\uce6d \ub77c\uc6b0\ud305"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.strong,{children:"\uc640\uc77c\ub4dc\uce74\ub4dc"}),": ",(0,c.jsx)(e.code,{children:"*"})," (1\uac1c \ub2e8\uc5b4), ",(0,c.jsx)(e.code,{children:"#"})," (0\uac1c \uc774\uc0c1)"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.strong,{children:"\uc720\uc5f0\ud55c \uad6c\ub3c5"}),": \ubcf5\uc7a1\ud55c \uc870\uac74\uc73c\ub85c \uba54\uc2dc\uc9c0 \ud544\ud130\ub9c1"]}),"\n",(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.strong,{children:"\uacc4\uce35\uc801 \uad6c\uc870"}),": \uc810(.)\uc73c\ub85c \uad6c\ubd84\ub41c \ub77c\uc6b0\ud305 \ud0a4"]}),"\n"]}),"\n",(0,c.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,c.jsx)(e.p,{children:"\uae30\ucd08\ud3b8\uc744 \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4! \uc774\uc81c \uc911\uae09 \ub0b4\uc6a9\uc73c\ub85c \ub118\uc5b4\uac00\ubd05\uc2dc\ub2e4."}),"\n",(0,c.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,c.jsx)(e.a,{href:"../intermediate/intro",children:"\uc911\uae09\ud3b8: RPC \ud328\ud134"})]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>a});var r=i(6540);const c={},t=r.createContext(c);function l(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:l(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);