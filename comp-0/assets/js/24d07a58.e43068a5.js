"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7634],{3618:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>_,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"crawling/examples/scenario-05-real-estate","title":"\uc2dc\ub098\ub9ac\uc624 5: \ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc2a4\ud06c\ub798\ud37c","description":"\ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc815\ubcf4\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\uc9d1\ud558\uace0, \ub9e4\ubb3c \uc0ac\uc9c4\uacfc \ud3c9\uba74\ub3c4\ub97c \ub2e4\uc6b4\ub85c\ub4dc\ud558\ub294 \uc2a4\ud06c\ub798\ud37c\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/crawling/examples/scenario-05-real-estate.md","sourceDirName":"crawling/examples","slug":"/crawling/examples/scenario-05-real-estate","permalink":"/tobias-docs/comp-0/docs/crawling/examples/scenario-05-real-estate","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/crawling/examples/scenario-05-real-estate.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"crawlingSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 4: \ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud37c","permalink":"/tobias-docs/comp-0/docs/crawling/examples/scenario-04-job-board"}}');var a=r(4848),i=r(8453);const o={sidebar_position:6},s="\uc2dc\ub098\ub9ac\uc624 5: \ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc2a4\ud06c\ub798\ud37c",l={},p=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604",id:"-\uc644\uc804\ud55c-\uad6c\ud604",level:2},{value:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:3},{value:"requirements.txt",id:"requirementstxt",level:3},{value:"config.py",id:"configpy",level:3},{value:"database/models.py",id:"databasemodelspy",level:3},{value:"database/crud.py",id:"databasecrudpy",level:3},{value:"scraper/image_manager.py",id:"scraperimage_managerpy",level:3},{value:"scraper/property_scraper.py",id:"scraperproperty_scraperpy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95",id:"-\uc2e4\ud589-\ubc29\ubc95",level:2},{value:"\ud83c\udfa8 \ucd9c\ub825 \uc608\uc2dc",id:"-\ucd9c\ub825-\uc608\uc2dc",level:2},{value:"\ud83d\udcf8 \uc774\ubbf8\uc9c0 \uae30\ub2a5 \ud2b9\uc9d5",id:"-\uc774\ubbf8\uc9c0-\uae30\ub2a5-\ud2b9\uc9d5",level:2},{value:"\ud83d\udd0d \ud655\uc7a5 \uc544\uc774\ub514\uc5b4",id:"-\ud655\uc7a5-\uc544\uc774\ub514\uc5b4",level:2},{value:"\ud83d\udcda \uc644\ub8cc!",id:"-\uc644\ub8cc",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-5-\ubd80\ub3d9\uc0b0-\ub9e4\ubb3c-\uc2a4\ud06c\ub798\ud37c",children:"\uc2dc\ub098\ub9ac\uc624 5: \ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc2a4\ud06c\ub798\ud37c"})}),"\n",(0,a.jsx)(n.p,{children:"\ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc815\ubcf4\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\uc9d1\ud558\uace0, \ub9e4\ubb3c \uc0ac\uc9c4\uacfc \ud3c9\uba74\ub3c4\ub97c \ub2e4\uc6b4\ub85c\ub4dc\ud558\ub294 \uc2a4\ud06c\ub798\ud37c\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,a.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\ubd80\ub3d9\uc0b0 \uc0ac\uc774\ud2b8\uc5d0\uc11c \ub9e4\ubb3c \uc815\ubcf4 \uc218\uc9d1"}),"\n",(0,a.jsx)(n.li,{children:"\uac00\uaca9, \uc704\uce58, \uba74\uc801, \ubc29/\uc695\uc2e4 \uc218 \ub4f1 \ucd94\ucd9c"}),"\n",(0,a.jsx)(n.li,{children:"\ub9e4\ubb3c \uc0ac\uc9c4 \ubc0f \ud3c9\uba74\ub3c4 \ub2e4\uc6b4\ub85c\ub4dc"}),"\n",(0,a.jsx)(n.li,{children:"\uc0ac\uc9c4 \uac24\ub7ec\ub9ac \uc0dd\uc131 \ubc0f \uba54\ud0c0\ub370\uc774\ud130 \ucd94\ucd9c"}),"\n",(0,a.jsx)(n.li,{children:"\uac00\uaca9 \ud2b8\ub80c\ub4dc \ucd94\uc801 \ubc0f \uc54c\ub9bc"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-\uc644\uc804\ud55c-\uad6c\ud604",children:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604"}),"\n",(0,a.jsx)(n.h3,{id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"real_estate_scraper/\n\u251c\u2500\u2500 scraper/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 property_scraper.py\n\u2502   \u251c\u2500\u2500 image_manager.py\n\u2502   \u2514\u2500\u2500 map_service.py\n\u251c\u2500\u2500 database/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2514\u2500\u2500 crud.py\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u251c\u2500\u2500 properties/\n\u2502   \u2502   \u251c\u2500\u2500 floorplans/\n\u2502   \u2502   \u2514\u2500\u2500 galleries/\n\u2502   \u2514\u2500\u2500 exports/\n\u251c\u2500\u2500 logs/\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n"})}),"\n",(0,a.jsx)(n.h3,{id:"requirementstxt",children:"requirements.txt"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-txt",children:"playwright==1.40.0\nsqlalchemy==2.0.23\npillow==10.1.0\nrequests==2.31.0\npython-dotenv==1.0.0\npydantic==2.0.0\npydantic-settings==2.1.0\ngeopy==2.4.0\nexifread==3.0.0\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configpy",children:"config.py"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import os\nfrom pydantic_settings import BaseSettings\nfrom typing import List\n\nclass Settings(BaseSettings):\n    # \ube0c\ub77c\uc6b0\uc800 \uc124\uc815\n    HEADLESS: bool = True\n    TIMEOUT: int = 30000\n\n    # \ud0c0\uac9f \uc0ac\uc774\ud2b8\n    BASE_URL: str = 'https://www.zillow.com'  # \uc608\uc2dc\n\n    # \uac80\uc0c9 \uc124\uc815\n    LOCATIONS: List[str] = ['Seoul', 'Gangnam', 'Bundang']\n    PROPERTY_TYPES: List[str] = ['apartment', 'house', 'villa']\n    MAX_PRICE: int = 1000000  # USD\n    MIN_PRICE: int = 100000\n    MIN_BEDROOMS: int = 2\n\n    # \uc774\ubbf8\uc9c0 \uc124\uc815\n    MAX_IMAGES_PER_PROPERTY: int = 20\n    DOWNLOAD_FLOORPLANS: bool = True\n    CREATE_GALLERY: bool = True\n    GALLERY_GRID_SIZE: tuple = (4, 5)  # 4x5 = 20 images\n\n    # \ub514\ub809\ud1a0\ub9ac\n    BASE_DIR: str = os.path.dirname(os.path.abspath(__file__))\n    DATA_DIR: str = os.path.join(BASE_DIR, 'data')\n    IMAGES_DIR: str = os.path.join(DATA_DIR, 'images')\n    PROPERTIES_DIR: str = os.path.join(IMAGES_DIR, 'properties')\n    FLOORPLANS_DIR: str = os.path.join(IMAGES_DIR, 'floorplans')\n    GALLERIES_DIR: str = os.path.join(IMAGES_DIR, 'galleries')\n    EXPORTS_DIR: str = os.path.join(DATA_DIR, 'exports')\n    LOGS_DIR: str = os.path.join(BASE_DIR, 'logs')\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4\n    DATABASE_URL: str = 'sqlite:///properties.db'\n\n    class Config:\n        env_file = '.env'\n\n    @classmethod\n    def ensure_directories(cls):\n        \"\"\"\ud544\uc694\ud55c \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\"\"\"\n        settings = cls()\n        for directory in [\n            settings.PROPERTIES_DIR,\n            settings.FLOORPLANS_DIR,\n            settings.GALLERIES_DIR,\n            settings.EXPORTS_DIR,\n            settings.LOGS_DIR\n        ]:\n            os.makedirs(directory, exist_ok=True)\n\nsettings = Settings()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"databasemodelspy",children:"database/models.py"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import (\n    Column, Integer, String, Float, DateTime,\n    Boolean, ForeignKey, Text, create_engine\n)\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship, sessionmaker\nfrom datetime import datetime\n\nBase = declarative_base()\n\nclass Property(Base):\n    __tablename__ = 'properties'\n\n    id = Column(Integer, primary_key=True)\n    external_id = Column(String(100), unique=True, nullable=False)\n\n    # \uae30\ubcf8 \uc815\ubcf4\n    title = Column(String(200))\n    address = Column(String(300))\n    city = Column(String(100))\n    state = Column(String(50))\n    zip_code = Column(String(20))\n    country = Column(String(50), default='South Korea')\n\n    # \uc704\uce58 \uc815\ubcf4\n    latitude = Column(Float)\n    longitude = Column(Float)\n\n    # \ub9e4\ubb3c \uc815\ubcf4\n    property_type = Column(String(50))  # apartment, house, villa, etc.\n    price = Column(Float)\n    currency = Column(String(10), default='USD')\n\n    bedrooms = Column(Integer)\n    bathrooms = Column(Float)\n    area_sqft = Column(Float)  # \ud3c9\ubc29\ud53c\ud2b8\n    area_sqm = Column(Float)   # \ud3c9\ubc29\ubbf8\ud130\n    area_pyeong = Column(Float)  # \ud3c9\n\n    # \ud2b9\uc9d5\n    year_built = Column(Integer)\n    parking_spaces = Column(Integer)\n    floor = Column(Integer)\n    total_floors = Column(Integer)\n\n    description = Column(Text)\n    features = Column(Text)  # JSON \ud615\ud0dc\ub85c \uc800\uc7a5\n\n    # URL \ubc0f \uc774\ubbf8\uc9c0\n    url = Column(String(500))\n    image_count = Column(Integer, default=0)\n    has_floorplan = Column(Boolean, default=False)\n    gallery_path = Column(String(500))\n\n    # \uc0c1\ud0dc\n    status = Column(String(50), default='for_sale')  # for_sale, sold, pending\n    is_active = Column(Boolean, default=True)\n\n    # \ud0c0\uc784\uc2a4\ud0ec\ud504\n    listed_date = Column(DateTime)\n    scraped_at = Column(DateTime, default=datetime.now)\n    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)\n\n    # \uad00\uacc4\n    images = relationship('PropertyImage', back_populates='property', cascade='all, delete-orphan')\n    price_history = relationship('PriceHistory', back_populates='property', cascade='all, delete-orphan')\n\nclass PropertyImage(Base):\n    __tablename__ = 'property_images'\n\n    id = Column(Integer, primary_key=True)\n    property_id = Column(Integer, ForeignKey('properties.id'))\n\n    url = Column(String(500))\n    local_path = Column(String(500))\n    image_type = Column(String(50))  # photo, floorplan, map\n    caption = Column(String(200))\n    order = Column(Integer, default=0)\n\n    width = Column(Integer)\n    height = Column(Integer)\n    file_size = Column(Integer)  # bytes\n\n    created_at = Column(DateTime, default=datetime.now)\n\n    # \uad00\uacc4\n    property = relationship('Property', back_populates='images')\n\nclass PriceHistory(Base):\n    __tablename__ = 'price_history'\n\n    id = Column(Integer, primary_key=True)\n    property_id = Column(Integer, ForeignKey('properties.id'))\n\n    price = Column(Float)\n    change_amount = Column(Float)\n    change_percent = Column(Float)\n\n    recorded_at = Column(DateTime, default=datetime.now)\n\n    # \uad00\uacc4\n    property = relationship('Property', back_populates='price_history')\n\n# \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd08\uae30\ud654\ndef init_db(database_url: str):\n    engine = create_engine(database_url)\n    Base.metadata.create_all(engine)\n    return sessionmaker(bind=engine)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"databasecrudpy",children:"database/crud.py"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import Session\nfrom database.models import Property, PropertyImage, PriceHistory\nfrom typing import Optional, List\nfrom datetime import datetime\n\nclass PropertyCRUD:\n    @staticmethod\n    def create(db: Session, external_id: str, **kwargs) -> Optional[Property]:\n        """\ub9e4\ubb3c \uc0dd\uc131 (\uc911\ubcf5 \uccb4\ud06c)"""\n        existing = db.query(Property).filter(Property.external_id == external_id).first()\n        if existing:\n            return None\n\n        property = Property(external_id=external_id, **kwargs)\n        db.add(property)\n        db.commit()\n        db.refresh(property)\n        return property\n\n    @staticmethod\n    def update(db: Session, property_id: int, **kwargs) -> Property:\n        """\ub9e4\ubb3c \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8"""\n        property = db.query(Property).filter(Property.id == property_id).first()\n        if property:\n            for key, value in kwargs.items():\n                setattr(property, key, value)\n            property.updated_at = datetime.now()\n            db.commit()\n            db.refresh(property)\n        return property\n\n    @staticmethod\n    def search(\n        db: Session,\n        city: Optional[str] = None,\n        property_type: Optional[str] = None,\n        min_price: Optional[float] = None,\n        max_price: Optional[float] = None,\n        min_bedrooms: Optional[int] = None\n    ) -> List[Property]:\n        """\ub9e4\ubb3c \uac80\uc0c9"""\n        query = db.query(Property).filter(Property.is_active == True)\n\n        if city:\n            query = query.filter(Property.city.ilike(f\'%{city}%\'))\n\n        if property_type:\n            query = query.filter(Property.property_type == property_type)\n\n        if min_price:\n            query = query.filter(Property.price >= min_price)\n\n        if max_price:\n            query = query.filter(Property.price <= max_price)\n\n        if min_bedrooms:\n            query = query.filter(Property.bedrooms >= min_bedrooms)\n\n        return query.all()\n\nclass PropertyImageCRUD:\n    @staticmethod\n    def create(db: Session, property_id: int, **kwargs) -> PropertyImage:\n        """\uc774\ubbf8\uc9c0 \ub808\ucf54\ub4dc \uc0dd\uc131"""\n        image = PropertyImage(property_id=property_id, **kwargs)\n        db.add(image)\n        db.commit()\n        db.refresh(image)\n        return image\n\n    @staticmethod\n    def get_by_property(db: Session, property_id: int, image_type: Optional[str] = None) -> List[PropertyImage]:\n        """\ub9e4\ubb3c\uc758 \uc774\ubbf8\uc9c0 \uc870\ud68c"""\n        query = db.query(PropertyImage).filter(PropertyImage.property_id == property_id)\n\n        if image_type:\n            query = query.filter(PropertyImage.image_type == image_type)\n\n        return query.order_by(PropertyImage.order).all()\n\nclass PriceHistoryCRUD:\n    @staticmethod\n    def create(db: Session, property_id: int, new_price: float):\n        """\uac00\uaca9 \ubcc0\ub3d9 \uae30\ub85d"""\n        property = db.query(Property).filter(Property.id == property_id).first()\n\n        if property and property.price:\n            change_amount = new_price - property.price\n            change_percent = (change_amount / property.price) * 100\n\n            history = PriceHistory(\n                property_id=property_id,\n                price=new_price,\n                change_amount=change_amount,\n                change_percent=change_percent\n            )\n            db.add(history)\n\n            # \ub9e4\ubb3c \uac00\uaca9 \uc5c5\ub370\uc774\ud2b8\n            property.price = new_price\n            db.commit()\n\n    @staticmethod\n    def get_history(db: Session, property_id: int) -> List[PriceHistory]:\n        """\uac00\uaca9 \ubcc0\ub3d9 \ub0b4\uc5ed \uc870\ud68c"""\n        return db.query(PriceHistory)\\\n            .filter(PriceHistory.property_id == property_id)\\\n            .order_by(PriceHistory.recorded_at.desc())\\\n            .all()\n'})}),"\n",(0,a.jsx)(n.h3,{id:"scraperimage_managerpy",children:"scraper/image_manager.py"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import os\nimport requests\nfrom PIL import Image, ImageDraw, ImageFont\nfrom io import BytesIO\nfrom typing import List, Optional, Dict\nimport logging\nimport exifread\n\nlogger = logging.getLogger(__name__)\n\nclass ImageManager:\n    def __init__(self, properties_dir: str, floorplans_dir: str, galleries_dir: str):\n        self.properties_dir = properties_dir\n        self.floorplans_dir = floorplans_dir\n        self.galleries_dir = galleries_dir\n        self.session = requests.Session()\n        self.session.headers.update({\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        })\n\n    def download_property_images(\n        self,\n        urls: List[str],\n        property_id: str,\n        max_images: int = 20\n    ) -> List[Dict[str, any]]:\n        \"\"\"\ub9e4\ubb3c \uc0ac\uc9c4 \ub2e4\uc6b4\ub85c\ub4dc\"\"\"\n        downloaded_images = []\n\n        # \ub9e4\ubb3c\ubcc4 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n        property_dir = os.path.join(self.properties_dir, property_id)\n        os.makedirs(property_dir, exist_ok=True)\n\n        for idx, url in enumerate(urls[:max_images], 1):\n            try:\n                filepath = self.download_image(url, property_dir, f\"photo_{idx}.jpg\")\n\n                if filepath:\n                    # \uc774\ubbf8\uc9c0 \uba54\ud0c0\ub370\uc774\ud130 \ucd94\ucd9c\n                    metadata = self.extract_metadata(filepath)\n\n                    downloaded_images.append({\n                        'url': url,\n                        'local_path': filepath,\n                        'order': idx,\n                        'image_type': 'photo',\n                        **metadata\n                    })\n\n                    logger.info(f\"\u2705 \uc0ac\uc9c4 {idx} \uc800\uc7a5: {property_id}\")\n\n            except Exception as e:\n                logger.error(f\"\uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc \uc2e4\ud328 ({idx}): {e}\")\n                continue\n\n        return downloaded_images\n\n    def download_floorplan(self, url: str, property_id: str) -> Optional[Dict[str, any]]:\n        \"\"\"\ud3c9\uba74\ub3c4 \ub2e4\uc6b4\ub85c\ub4dc\"\"\"\n        try:\n            filepath = self.download_image(url, self.floorplans_dir, f\"{property_id}_floorplan.jpg\")\n\n            if filepath:\n                metadata = self.extract_metadata(filepath)\n\n                logger.info(f\"\u2705 \ud3c9\uba74\ub3c4 \uc800\uc7a5: {property_id}\")\n\n                return {\n                    'url': url,\n                    'local_path': filepath,\n                    'image_type': 'floorplan',\n                    **metadata\n                }\n\n        except Exception as e:\n            logger.error(f\"\ud3c9\uba74\ub3c4 \ub2e4\uc6b4\ub85c\ub4dc \uc2e4\ud328: {e}\")\n            return None\n\n    def download_image(self, url: str, save_dir: str, filename: str) -> Optional[str]:\n        \"\"\"\uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc \uacf5\ud1b5 \ud568\uc218\"\"\"\n        try:\n            response = self.session.get(url, timeout=15)\n            response.raise_for_status()\n\n            img = Image.open(BytesIO(response.content))\n\n            # RGBA to RGB \ubcc0\ud658\n            if img.mode in ('RGBA', 'LA', 'P'):\n                background = Image.new('RGB', img.size, (255, 255, 255))\n                if img.mode == 'P':\n                    img = img.convert('RGBA')\n                background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)\n                img = background\n\n            # \uace0\ud488\uc9c8\ub85c \uc800\uc7a5\n            filepath = os.path.join(save_dir, filename)\n            img.save(filepath, 'JPEG', quality=90, optimize=True)\n\n            return filepath\n\n        except Exception as e:\n            logger.error(f\"\uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc \uc2e4\ud328 ({url}): {e}\")\n            return None\n\n    def create_gallery(\n        self,\n        image_paths: List[str],\n        property_id: str,\n        grid_size: tuple = (4, 5)\n    ) -> Optional[str]:\n        \"\"\"\uc0ac\uc9c4 \uac24\ub7ec\ub9ac \uc0dd\uc131 (\uadf8\ub9ac\ub4dc \ub808\uc774\uc544\uc6c3)\"\"\"\n        try:\n            if not image_paths:\n                return None\n\n            rows, cols = grid_size\n            max_images = rows * cols\n\n            # \uc774\ubbf8\uc9c0 \ub85c\ub4dc\n            images = []\n            for path in image_paths[:max_images]:\n                try:\n                    img = Image.open(path)\n                    images.append(img)\n                except Exception as e:\n                    logger.warning(f\"\uc774\ubbf8\uc9c0 \ub85c\ub4dc \uc2e4\ud328: {path}\")\n                    continue\n\n            if not images:\n                return None\n\n            # \uac01 \uc140 \ud06c\uae30 (300x200)\n            cell_width, cell_height = 300, 200\n\n            # \uce94\ubc84\uc2a4 \uc0dd\uc131\n            gallery_width = cols * cell_width\n            gallery_height = rows * cell_height\n            gallery = Image.new('RGB', (gallery_width, gallery_height), (255, 255, 255))\n\n            # \uc774\ubbf8\uc9c0 \ubc30\uce58\n            for idx, img in enumerate(images):\n                row = idx // cols\n                col = idx % cols\n\n                # \ub9ac\uc0ac\uc774\uc988 (\ube44\uc728 \uc720\uc9c0)\n                img.thumbnail((cell_width, cell_height), Image.Resampling.LANCZOS)\n\n                # \uc911\uc559 \uc815\ub82c\uc744 \uc704\ud55c \uc624\ud504\uc14b \uacc4\uc0b0\n                x_offset = (cell_width - img.width) // 2\n                y_offset = (cell_height - img.height) // 2\n\n                # \ubd99\uc5ec\ub123\uae30\n                x = col * cell_width + x_offset\n                y = row * cell_height + y_offset\n                gallery.paste(img, (x, y))\n\n            # \uc800\uc7a5\n            gallery_path = os.path.join(self.galleries_dir, f\"{property_id}_gallery.jpg\")\n            gallery.save(gallery_path, 'JPEG', quality=90)\n\n            logger.info(f\"\u2705 \uac24\ub7ec\ub9ac \uc0dd\uc131: {property_id} ({len(images)}\uc7a5)\")\n\n            return gallery_path\n\n        except Exception as e:\n            logger.error(f\"\uac24\ub7ec\ub9ac \uc0dd\uc131 \uc2e4\ud328: {e}\")\n            return None\n\n    def create_thumbnail(self, image_path: str, size: tuple = (300, 200)) -> Optional[str]:\n        \"\"\"\uc378\ub124\uc77c \uc0dd\uc131\"\"\"\n        try:\n            img = Image.open(image_path)\n            img.thumbnail(size, Image.Resampling.LANCZOS)\n\n            thumb_path = image_path.replace('.jpg', '_thumb.jpg')\n            img.save(thumb_path, 'JPEG', quality=85)\n\n            return thumb_path\n\n        except Exception as e:\n            logger.error(f\"\uc378\ub124\uc77c \uc0dd\uc131 \uc2e4\ud328: {e}\")\n            return None\n\n    def extract_metadata(self, image_path: str) -> Dict[str, any]:\n        \"\"\"\uc774\ubbf8\uc9c0 \uba54\ud0c0\ub370\uc774\ud130 \ucd94\ucd9c\"\"\"\n        metadata = {\n            'width': None,\n            'height': None,\n            'file_size': None\n        }\n\n        try:\n            # \uae30\ubcf8 \uc815\ubcf4\n            img = Image.open(image_path)\n            metadata['width'] = img.width\n            metadata['height'] = img.height\n            metadata['file_size'] = os.path.getsize(image_path)\n\n            # EXIF \ub370\uc774\ud130 (\uc120\ud0dd)\n            with open(image_path, 'rb') as f:\n                tags = exifread.process_file(f, details=False)\n                # GPS, \ucd2c\uc601 \ub0a0\uc9dc \ub4f1 \ucd94\uac00 \uac00\ub2a5\n\n        except Exception as e:\n            logger.warning(f\"\uba54\ud0c0\ub370\uc774\ud130 \ucd94\ucd9c \uc2e4\ud328: {e}\")\n\n        return metadata\n\n    def add_watermark(self, image_path: str, text: str = \"PropertyScraper\") -> Optional[str]:\n        \"\"\"\uc6cc\ud130\ub9c8\ud06c \ucd94\uac00\"\"\"\n        try:\n            img = Image.open(image_path)\n            draw = ImageDraw.Draw(img)\n\n            # \ud3f0\ud2b8 (\uae30\ubcf8 \ud3f0\ud2b8 \uc0ac\uc6a9)\n            try:\n                font = ImageFont.truetype(\"arial.ttf\", 30)\n            except:\n                font = ImageFont.load_default()\n\n            # \uc6cc\ud130\ub9c8\ud06c \uc704\uce58 (\uc6b0\uce21 \ud558\ub2e8)\n            text_bbox = draw.textbbox((0, 0), text, font=font)\n            text_width = text_bbox[2] - text_bbox[0]\n            text_height = text_bbox[3] - text_bbox[1]\n\n            x = img.width - text_width - 20\n            y = img.height - text_height - 20\n\n            # \ubc18\ud22c\uba85 \ubc30\uacbd\n            overlay = Image.new('RGBA', img.size, (255, 255, 255, 0))\n            overlay_draw = ImageDraw.Draw(overlay)\n            overlay_draw.rectangle(\n                [(x - 10, y - 5), (x + text_width + 10, y + text_height + 5)],\n                fill=(0, 0, 0, 100)\n            )\n\n            img = Image.alpha_composite(img.convert('RGBA'), overlay)\n\n            # \ud14d\uc2a4\ud2b8\n            draw = ImageDraw.Draw(img)\n            draw.text((x, y), text, fill=(255, 255, 255, 255), font=font)\n\n            # \uc800\uc7a5\n            watermarked_path = image_path.replace('.jpg', '_watermarked.jpg')\n            img.convert('RGB').save(watermarked_path, 'JPEG', quality=90)\n\n            return watermarked_path\n\n        except Exception as e:\n            logger.error(f\"\uc6cc\ud130\ub9c8\ud06c \ucd94\uac00 \uc2e4\ud328: {e}\")\n            return None\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scraperproperty_scraperpy",children:"scraper/property_scraper.py"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from playwright.sync_api import sync_playwright, Page\nfrom typing import List, Dict, Optional\nimport logging\nimport time\nimport re\n\nlogger = logging.getLogger(__name__)\n\nclass PropertyScraper:\n    def __init__(self, config):\n        self.config = config\n\n    def scrape_properties(self, location: str, property_type: str) -> List[Dict]:\n        \"\"\"\ub9e4\ubb3c \uc2a4\ud06c\ub798\ud551\"\"\"\n        logger.info(f\"\uac80\uc0c9 \uc2dc\uc791: {property_type} in {location}\")\n\n        with sync_playwright() as p:\n            browser = p.chromium.launch(headless=self.config.HEADLESS)\n            context = browser.new_context(\n                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n                viewport={'width': 1920, 'height': 1080}\n            )\n            page = context.new_page()\n\n            try:\n                properties = []\n\n                # \uac80\uc0c9 \ud398\uc774\uc9c0\ub85c \uc774\ub3d9\n                search_url = self._build_search_url(location, property_type)\n                page.goto(search_url, timeout=self.config.TIMEOUT)\n\n                # \ud398\uc774\uc9c0 \ub85c\ub4dc \ub300\uae30\n                page.wait_for_selector('.property-card, .listing-card', timeout=10000)\n                time.sleep(2)\n\n                # \uc2a4\ud06c\ub864\ud558\uba70 \ub354 \ub9ce\uc740 \uacb0\uacfc \ub85c\ub4dc\n                self._scroll_to_load_more(page)\n\n                # \ub9e4\ubb3c \uce74\ub4dc \ucd94\ucd9c\n                property_cards = page.query_selector_all('.property-card, .listing-card')\n\n                logger.info(f\"\ubc1c\uacac\ub41c \ub9e4\ubb3c: {len(property_cards)}\uac1c\")\n\n                for idx, card in enumerate(property_cards[:30], 1):\n                    try:\n                        property_data = self._extract_property_card(card, page)\n                        if property_data:\n                            properties.append(property_data)\n                            logger.info(f\"[{idx}] {property_data['title']} - ${property_data.get('price', 0):,.0f}\")\n\n                    except Exception as e:\n                        logger.error(f\"\uce74\ub4dc \ud30c\uc2f1 \uc2e4\ud328 (#{idx}): {e}\")\n                        continue\n\n                return properties\n\n            except Exception as e:\n                logger.error(f\"\uc2a4\ud06c\ub798\ud551 \uc911 \uc5d0\ub7ec: {e}\")\n                raise\n\n            finally:\n                browser.close()\n\n    def _build_search_url(self, location: str, property_type: str) -> str:\n        \"\"\"\uac80\uc0c9 URL \uc0dd\uc131\"\"\"\n        base = self.config.BASE_URL\n        params = f\"/homes/{location.replace(' ', '-')}_rb/?searchQueryState=\"\n        # \uc2e4\uc81c \uc0ac\uc774\ud2b8\uc5d0 \ub9de\uac8c \uc870\uc815 \ud544\uc694\n        return base + params\n\n    def _scroll_to_load_more(self, page: Page):\n        \"\"\"\uc2a4\ud06c\ub864\ud558\uc5ec \ub354 \ub9ce\uc740 \uacb0\uacfc \ub85c\ub4dc\"\"\"\n        for _ in range(3):\n            page.evaluate('window.scrollTo(0, document.body.scrollHeight)')\n            time.sleep(1.5)\n\n    def _extract_property_card(self, card, page: Page) -> Optional[Dict]:\n        \"\"\"\uac1c\ubcc4 \ub9e4\ubb3c \uce74\ub4dc \ud30c\uc2f1\"\"\"\n        try:\n            # \uc81c\ubaa9\n            title_elem = card.query_selector('h3, .property-title')\n            title = title_elem.inner_text().strip() if title_elem else 'N/A'\n\n            # \uac00\uaca9\n            price_elem = card.query_selector('.price, [data-test=\"property-card-price\"]')\n            price_text = price_elem.inner_text().strip() if price_elem else '$0'\n            price = self._parse_price(price_text)\n\n            # \uc8fc\uc18c\n            address_elem = card.query_selector('.address, [data-test=\"property-card-addr\"]')\n            address = address_elem.inner_text().strip() if address_elem else 'N/A'\n\n            # \uce68\uc2e4/\uc695\uc2e4/\uba74\uc801\n            details_elem = card.query_selector('.property-details, .home-info')\n            bedrooms, bathrooms, area = self._parse_details(details_elem.inner_text() if details_elem else '')\n\n            # URL\n            link_elem = card.query_selector('a[href*=\"/homedetails/\"]')\n            url = link_elem.get_attribute('href') if link_elem else None\n            if url and not url.startswith('http'):\n                url = self.config.BASE_URL + url\n\n            # \uc678\ubd80 ID (URL\uc5d0\uc11c \ucd94\ucd9c)\n            external_id = None\n            if url:\n                match = re.search(r'/(\\d+)_zpid/', url)\n                if match:\n                    external_id = match.group(1)\n\n            # \uc378\ub124\uc77c \uc774\ubbf8\uc9c0\n            img_elem = card.query_selector('img[src*=\"photos\"]')\n            thumbnail_url = img_elem.get_attribute('src') if img_elem else None\n\n            # \uc0c1\uc138 \ud398\uc774\uc9c0\ub85c \uc774\ub3d9\ud558\uc5ec \uc804\uccb4 \uc815\ubcf4 \ucd94\ucd9c\n            if url:\n                page.goto(url)\n                time.sleep(2)\n\n                details = self._extract_property_details(page)\n\n                return {\n                    'external_id': external_id or f\"{title}_{price}\".replace(' ', '_')[:50],\n                    'title': title,\n                    'address': address,\n                    'price': price,\n                    'bedrooms': bedrooms,\n                    'bathrooms': bathrooms,\n                    'area_sqft': area,\n                    'url': url,\n                    'thumbnail_url': thumbnail_url,\n                    **details\n                }\n\n            return None\n\n        except Exception as e:\n            logger.error(f\"\uce74\ub4dc \ucd94\ucd9c \uc5d0\ub7ec: {e}\")\n            return None\n\n    def _extract_property_details(self, page: Page) -> Dict:\n        \"\"\"\ub9e4\ubb3c \uc0c1\uc138 \uc815\ubcf4 \ucd94\ucd9c\"\"\"\n        details = {\n            'description': '',\n            'features': '',\n            'year_built': None,\n            'parking_spaces': None,\n            'floor': None,\n            'total_floors': None,\n            'property_type': 'apartment',\n            'latitude': None,\n            'longitude': None,\n            'image_urls': [],\n            'floorplan_url': None\n        }\n\n        try:\n            # \uc124\uba85\n            desc_elem = page.query_selector('.home-description, [data-test=\"description\"]')\n            if desc_elem:\n                details['description'] = desc_elem.inner_text().strip()\n\n            # \ud2b9\uc9d5\n            features_list = page.query_selector_all('.property-features li, .home-facts li')\n            features = [f.inner_text().strip() for f in features_list]\n            details['features'] = ', '.join(features)\n\n            # \uac74\ucd95 \uc5f0\ub3c4\n            year_elem = page.query_selector('span:has-text(\"Year built\")')\n            if year_elem:\n                parent = year_elem.evaluate_handle('el => el.parentElement')\n                year_text = parent.inner_text()\n                match = re.search(r'\\d{4}', year_text)\n                if match:\n                    details['year_built'] = int(match.group())\n\n            # \uc8fc\ucc28\n            parking_elem = page.query_selector('span:has-text(\"Parking\")')\n            if parking_elem:\n                parent = parking_elem.evaluate_handle('el => el.parentElement')\n                parking_text = parent.inner_text()\n                match = re.search(r'(\\d+)', parking_text)\n                if match:\n                    details['parking_spaces'] = int(match.group(1))\n\n            # \uc774\ubbf8\uc9c0 URL \ucd94\ucd9c\n            image_elems = page.query_selector_all('.media-stream img, [data-test=\"property-images\"] img')\n            details['image_urls'] = [\n                img.get_attribute('src') or img.get_attribute('data-src')\n                for img in image_elems\n                if img.get_attribute('src') or img.get_attribute('data-src')\n            ]\n\n            # \ud3c9\uba74\ub3c4 URL\n            floorplan_elem = page.query_selector('img[alt*=\"floor plan\"], img[src*=\"floorplan\"]')\n            if floorplan_elem:\n                details['floorplan_url'] = floorplan_elem.get_attribute('src')\n\n            # \uc9c0\ub3c4 \uc88c\ud45c (data attribute\ub098 \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \ucd94\ucd9c)\n            try:\n                coords_script = page.query_selector('script:has-text(\"latitude\")')\n                if coords_script:\n                    script_content = coords_script.inner_text()\n                    lat_match = re.search(r'\"latitude\":\\s*([-\\d.]+)', script_content)\n                    lon_match = re.search(r'\"longitude\":\\s*([-\\d.]+)', script_content)\n\n                    if lat_match and lon_match:\n                        details['latitude'] = float(lat_match.group(1))\n                        details['longitude'] = float(lon_match.group(1))\n            except:\n                pass\n\n        except Exception as e:\n            logger.error(f\"\uc0c1\uc138 \uc815\ubcf4 \ucd94\ucd9c \uc5d0\ub7ec: {e}\")\n\n        return details\n\n    def _parse_price(self, price_text: str) -> float:\n        \"\"\"\uac00\uaca9 \ud30c\uc2f1\"\"\"\n        try:\n            # \"$1,234,567\" -> 1234567\n            price_str = re.sub(r'[^\\d.]', '', price_text)\n            return float(price_str) if price_str else 0\n        except:\n            return 0\n\n    def _parse_details(self, details_text: str) -> tuple:\n        \"\"\"\uce68\uc2e4/\uc695\uc2e4/\uba74\uc801 \ud30c\uc2f1\"\"\"\n        bedrooms = bathrooms = area = None\n\n        try:\n            # \"3 beds, 2 baths, 1,500 sqft\"\n            bed_match = re.search(r'(\\d+)\\s*bed', details_text, re.IGNORECASE)\n            bath_match = re.search(r'([\\d.]+)\\s*bath', details_text, re.IGNORECASE)\n            area_match = re.search(r'([\\d,]+)\\s*sqft', details_text, re.IGNORECASE)\n\n            if bed_match:\n                bedrooms = int(bed_match.group(1))\n            if bath_match:\n                bathrooms = float(bath_match.group(1))\n            if area_match:\n                area = float(area_match.group(1).replace(',', ''))\n\n        except Exception as e:\n            logger.warning(f\"\uc0c1\uc138 \uc815\ubcf4 \ud30c\uc2f1 \uc5d0\ub7ec: {e}\")\n\n        return bedrooms, bathrooms, area\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import logging\nfrom datetime import datetime\nfrom sqlalchemy.orm import Session\n\nfrom config import settings\nfrom database.models import init_db\nfrom database.crud import PropertyCRUD, PropertyImageCRUD, PriceHistoryCRUD\nfrom scraper.property_scraper import PropertyScraper\nfrom scraper.image_manager import ImageManager\n\ndef setup_logger():\n    \"\"\"\ub85c\uac70 \uc124\uc815\"\"\"\n    settings.ensure_directories()\n\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler(\n                f'{settings.LOGS_DIR}/scraper_{datetime.now().strftime(\"%Y%m%d\")}.log'\n            ),\n            logging.StreamHandler()\n        ]\n    )\n\ndef convert_area(sqft: float) -> tuple:\n    \"\"\"\uba74\uc801 \ubcc0\ud658 (sqft -> sqm, pyeong)\"\"\"\n    sqm = sqft * 0.092903 if sqft else None\n    pyeong = sqm * 0.3025 if sqm else None\n    return sqm, pyeong\n\ndef main():\n    \"\"\"\uba54\uc778 \uc2e4\ud589 \ud568\uc218\"\"\"\n    setup_logger()\n    logger = logging.getLogger(__name__)\n\n    try:\n        logger.info(\"=\" * 60)\n        logger.info(\"\ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc2a4\ud06c\ub798\ud37c \uc2dc\uc791\")\n        logger.info(\"=\" * 60)\n\n        # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucd08\uae30\ud654\n        SessionLocal = init_db(settings.DATABASE_URL)\n        db: Session = SessionLocal()\n\n        # \uc2a4\ud06c\ub798\ud37c \ucd08\uae30\ud654\n        scraper = PropertyScraper(settings)\n        image_manager = ImageManager(\n            settings.PROPERTIES_DIR,\n            settings.FLOORPLANS_DIR,\n            settings.GALLERIES_DIR\n        )\n\n        new_properties = []\n\n        # \uc704\uce58 \ubc0f \ub9e4\ubb3c \ud0c0\uc785\ubcc4 \uac80\uc0c9\n        for location in settings.LOCATIONS:\n            for property_type in settings.PROPERTY_TYPES:\n                logger.info(f\"\\n\ud83d\udd0d \uac80\uc0c9: {property_type} in {location}\")\n\n                # \uc2a4\ud06c\ub798\ud551\n                properties = scraper.scrape_properties(location, property_type)\n\n                # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5\n                for prop_data in properties:\n                    # \uac00\uaca9 \ud544\ud130\ub9c1\n                    if prop_data['price'] < settings.MIN_PRICE or prop_data['price'] > settings.MAX_PRICE:\n                        continue\n\n                    # \uba74\uc801 \ubcc0\ud658\n                    area_sqm, area_pyeong = convert_area(prop_data.get('area_sqft'))\n\n                    # \ub9e4\ubb3c \uc800\uc7a5\n                    property = PropertyCRUD.create(\n                        db,\n                        external_id=prop_data['external_id'],\n                        title=prop_data['title'],\n                        address=prop_data['address'],\n                        city=location,\n                        property_type=property_type,\n                        price=prop_data['price'],\n                        bedrooms=prop_data.get('bedrooms'),\n                        bathrooms=prop_data.get('bathrooms'),\n                        area_sqft=prop_data.get('area_sqft'),\n                        area_sqm=area_sqm,\n                        area_pyeong=area_pyeong,\n                        description=prop_data.get('description'),\n                        features=prop_data.get('features'),\n                        year_built=prop_data.get('year_built'),\n                        parking_spaces=prop_data.get('parking_spaces'),\n                        latitude=prop_data.get('latitude'),\n                        longitude=prop_data.get('longitude'),\n                        url=prop_data.get('url')\n                    )\n\n                    if property:  # \uc0c8\ub85c\uc6b4 \ub9e4\ubb3c\uc778 \uacbd\uc6b0\n                        new_properties.append(prop_data)\n\n                        # \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc\n                        image_urls = prop_data.get('image_urls', [])\n                        if image_urls:\n                            downloaded_images = image_manager.download_property_images(\n                                image_urls,\n                                prop_data['external_id'],\n                                settings.MAX_IMAGES_PER_PROPERTY\n                            )\n\n                            # \uc774\ubbf8\uc9c0 \ub808\ucf54\ub4dc \uc800\uc7a5\n                            for img_data in downloaded_images:\n                                PropertyImageCRUD.create(db, property.id, **img_data)\n\n                            # \uc774\ubbf8\uc9c0 \uac1c\uc218 \uc5c5\ub370\uc774\ud2b8\n                            PropertyCRUD.update(db, property.id, image_count=len(downloaded_images))\n\n                            # \uac24\ub7ec\ub9ac \uc0dd\uc131\n                            if settings.CREATE_GALLERY and len(downloaded_images) > 1:\n                                image_paths = [img['local_path'] for img in downloaded_images]\n                                gallery_path = image_manager.create_gallery(\n                                    image_paths,\n                                    prop_data['external_id'],\n                                    settings.GALLERY_GRID_SIZE\n                                )\n                                if gallery_path:\n                                    PropertyCRUD.update(db, property.id, gallery_path=gallery_path)\n\n                        # \ud3c9\uba74\ub3c4 \ub2e4\uc6b4\ub85c\ub4dc\n                        if settings.DOWNLOAD_FLOORPLANS and prop_data.get('floorplan_url'):\n                            floorplan_data = image_manager.download_floorplan(\n                                prop_data['floorplan_url'],\n                                prop_data['external_id']\n                            )\n                            if floorplan_data:\n                                PropertyImageCRUD.create(db, property.id, **floorplan_data)\n                                PropertyCRUD.update(db, property.id, has_floorplan=True)\n\n                        logger.info(f\"\u2705 \uc0c8 \ub9e4\ubb3c \uc800\uc7a5: {property.title}\")\n\n                    else:\n                        # \uae30\uc874 \ub9e4\ubb3c - \uac00\uaca9 \ubcc0\ub3d9 \uccb4\ud06c\n                        existing = db.query(Property).filter(\n                            Property.external_id == prop_data['external_id']\n                        ).first()\n\n                        if existing and existing.price != prop_data['price']:\n                            PriceHistoryCRUD.create(db, existing.id, prop_data['price'])\n                            logger.info(f\"\ud83d\udcb0 \uac00\uaca9 \ubcc0\ub3d9: {existing.title} \"\n                                      f\"${existing.price:,.0f} \u2192 ${prop_data['price']:,.0f}\")\n\n        # \uc694\uc57d \ucd9c\ub825\n        print(\"\\n\" + \"=\" * 60)\n        print(\"\ud83d\udcca \uc218\uc9d1 \uacb0\uacfc\")\n        print(\"=\" * 60)\n        print(f\"\uc0c8\ub85c\uc6b4 \ub9e4\ubb3c: {len(new_properties)}\uac1c\")\n        print(f\"\ucd1d \ub9e4\ubb3c \uc218: {db.query(Property).count()}\uac1c\")\n\n        if new_properties:\n            print(\"\\n\ud83c\udfe0 \uc0c8\ub85c\uc6b4 \ub9e4\ubb3c:\")\n            for idx, prop in enumerate(new_properties[:10], 1):\n                print(f\"{idx}. {prop['title']}\")\n                print(f\"   \ud83d\udcb0 ${prop['price']:,.0f} | \"\n                      f\"\ud83d\udecf\ufe0f  {prop.get('bedrooms', 'N/A')} beds | \"\n                      f\"\ud83d\udec1 {prop.get('bathrooms', 'N/A')} baths\")\n                if prop.get('area_sqft'):\n                    area_sqm, area_pyeong = convert_area(prop['area_sqft'])\n                    print(f\"   \ud83d\udccf {prop['area_sqft']:,.0f} sqft \"\n                          f\"({area_sqm:.1f} \u33a1 / {area_pyeong:.1f}\ud3c9)\")\n\n        print(\"=\" * 60 + \"\\n\")\n\n        logger.info(\"\u2705 \ubaa8\ub4e0 \uc791\uc5c5 \uc644\ub8cc!\")\n\n        db.close()\n\n    except Exception as e:\n        logger.error(f\"\u274c \uc5d0\ub7ec \ubc1c\uc0dd: {e}\", exc_info=True)\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\uc2e4\ud589-\ubc29\ubc95",children:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# \uc758\uc874\uc131 \uc124\uce58\npip install -r requirements.txt\n\n# \ube0c\ub77c\uc6b0\uc800 \uc124\uce58\nplaywright install chromium\n\n# \uc2e4\ud589\npython main.py\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\ucd9c\ub825-\uc608\uc2dc",children:"\ud83c\udfa8 \ucd9c\ub825 \uc608\uc2dc"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"============================================================\n\ubd80\ub3d9\uc0b0 \ub9e4\ubb3c \uc2a4\ud06c\ub798\ud37c \uc2dc\uc791\n============================================================\n\n\ud83d\udd0d \uac80\uc0c9: apartment in Seoul\n[1] Luxury Apartment in Gangnam - $850,000\n[2] Modern Villa in Bundang - $1,200,000\n...\n\n\u2705 \uc0c8 \ub9e4\ubb3c \uc800\uc7a5: Luxury Apartment in Gangnam\n\u2705 \uc0ac\uc9c4 1 \uc800\uc7a5: prop_12345\n\u2705 \uc0ac\uc9c4 2 \uc800\uc7a5: prop_12345\n...\n\u2705 \uac24\ub7ec\ub9ac \uc0dd\uc131: prop_12345 (15\uc7a5)\n\u2705 \ud3c9\uba74\ub3c4 \uc800\uc7a5: prop_12345\n\n============================================================\n\ud83d\udcca \uc218\uc9d1 \uacb0\uacfc\n============================================================\n\uc0c8\ub85c\uc6b4 \ub9e4\ubb3c: 23\uac1c\n\ucd1d \ub9e4\ubb3c \uc218: 156\uac1c\n\n\ud83c\udfe0 \uc0c8\ub85c\uc6b4 \ub9e4\ubb3c:\n1. Luxury Apartment in Gangnam\n   \ud83d\udcb0 $850,000 | \ud83d\udecf\ufe0f  3 beds | \ud83d\udec1 2.5 baths\n   \ud83d\udccf 1,800 sqft (167.2 \u33a1 / 50.6\ud3c9)\n2. Modern Villa in Bundang\n   \ud83d\udcb0 $1,200,000 | \ud83d\udecf\ufe0f  4 beds | \ud83d\udec1 3 baths\n   \ud83d\udccf 2,500 sqft (232.3 \u33a1 / 70.3\ud3c9)\n...\n============================================================\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\uc774\ubbf8\uc9c0-\uae30\ub2a5-\ud2b9\uc9d5",children:"\ud83d\udcf8 \uc774\ubbf8\uc9c0 \uae30\ub2a5 \ud2b9\uc9d5"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ub9e4\ubb3c \uc0ac\uc9c4 \ub2e4\uc6b4\ub85c\ub4dc"}),": \ucd5c\ub300 20\uc7a5\uae4c\uc9c0 \uace0\ud574\uc0c1\ub3c4 \ub2e4\uc6b4\ub85c\ub4dc"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ud3c9\uba74\ub3c4 \ub2e4\uc6b4\ub85c\ub4dc"}),": \ud3c9\uba74\ub3c4 \uc774\ubbf8\uc9c0 \ubcc4\ub3c4 \uc800\uc7a5"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uc0ac\uc9c4 \uac24\ub7ec\ub9ac"}),": 4x5 \uadf8\ub9ac\ub4dc \ub808\uc774\uc544\uc6c3\uc73c\ub85c \uac24\ub7ec\ub9ac \uc0dd\uc131"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uba54\ud0c0\ub370\uc774\ud130 \ucd94\ucd9c"}),": \uc774\ubbf8\uc9c0 \ud06c\uae30, \ud574\uc0c1\ub3c4, EXIF \uc815\ubcf4 \ucd94\ucd9c"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uc378\ub124\uc77c \uc0dd\uc131"}),": \ube60\ub978 \ubbf8\ub9ac\ubcf4\uae30\uc6a9 \uc378\ub124\uc77c"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uc6cc\ud130\ub9c8\ud06c"}),": \uc120\ud0dd\uc801 \uc6cc\ud130\ub9c8\ud06c \ucd94\uac00"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-\ud655\uc7a5-\uc544\uc774\ub514\uc5b4",children:"\ud83d\udd0d \ud655\uc7a5 \uc544\uc774\ub514\uc5b4"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uc9c0\ub3c4 \uc2dc\uac01\ud654"}),": \ub9e4\ubb3c \uc704\uce58\ub97c \uc9c0\ub3c4\uc5d0 \ud45c\uc2dc"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uac00\uaca9 \uc608\uce21"}),": ML \ubaa8\ub378\ub85c \uc801\uc815 \uac00\uaca9 \uc608\uce21"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uc720\uc0ac \ub9e4\ubb3c \ucd94\ucc9c"}),": \uc774\ubbf8\uc9c0 \uc720\uc0ac\ub3c4 \ubd84\uc11d"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uac00\uc0c1 \ud22c\uc5b4"}),": 360\ub3c4 \uc774\ubbf8\uc9c0 \uc218\uc9d1"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\ud559\uad70/\uad50\ud1b5 \ubd84\uc11d"}),": \uc8fc\ubcc0 \ud658\uacbd \uc815\ubcf4 \ucd94\uac00"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-\uc644\ub8cc",children:"\ud83d\udcda \uc644\ub8cc!"}),"\n",(0,a.jsx)(n.p,{children:"5\uac00\uc9c0 \uc2e4\uc804 \ud06c\ub864\ub9c1 \uc2dc\ub098\ub9ac\uc624\ub97c \ubaa8\ub450 \uc644\uc131\ud588\uc2b5\ub2c8\ub2e4! \uac01 \uc2dc\ub098\ub9ac\uc624\ub294 \uc2e4\uc81c \ud504\ub85c\uc81d\ud2b8\uc5d0 \ubc14\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\ub294 \uc644\uc804\ud55c \uad6c\ud604\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4."})]})}function _(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(6540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);