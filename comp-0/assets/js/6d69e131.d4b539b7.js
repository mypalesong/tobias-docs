"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[9832],{1515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"rabbitmq/intermediate/dead-letter-exchange","title":"Dead Letter Exchange (DLX)","description":"\uc2e4\ud328\ud55c \uba54\uc2dc\uc9c0\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/intermediate/dead-letter-exchange.md","sourceDirName":"rabbitmq/intermediate","slug":"/rabbitmq/intermediate/dead-letter-exchange","permalink":"/tobias-docs/comp-0/docs/rabbitmq/intermediate/dead-letter-exchange","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/intermediate/dead-letter-exchange.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"rabbitmqSidebar","previous":{"title":"RPC (Remote Procedure Call)","permalink":"/tobias-docs/comp-0/docs/rabbitmq/intermediate/rpc"},"next":{"title":"Priority Queue - \uc6b0\uc120\uc21c\uc704 \ud050","permalink":"/tobias-docs/comp-0/docs/rabbitmq/intermediate/priority-queue"}}');var r=t(4848),s=t(8453);const l={sidebar_position:3},i="Dead Letter Exchange (DLX)",d={},c=[{value:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c",id:"-\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"\ud83d\udcca \ud328\ud134 \uad6c\uc870",id:"-\ud328\ud134-\uad6c\uc870",level:2},{value:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624",id:"-\uc2dc\ub098\ub9ac\uc624",level:2},{value:"\ud83d\udd27 \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"\uc124\uc815 \ubc0f \ubaa8\ub378",id:"\uc124\uc815-\ubc0f-\ubaa8\ub378",level:3},{value:"Queue \uc124\uc815 (DLX \ud3ec\ud568)",id:"queue-\uc124\uc815-dlx-\ud3ec\ud568",level:3},{value:"Producer (\uacb0\uc81c \uc694\uccad \ubc1c\ud589)",id:"producer-\uacb0\uc81c-\uc694\uccad-\ubc1c\ud589",level:3},{value:"Consumer (\uacb0\uc81c \ucc98\ub9ac)",id:"consumer-\uacb0\uc81c-\ucc98\ub9ac",level:3},{value:"DLQ Handler (\uc2e4\ud328 \uba54\uc2dc\uc9c0 \ucc98\ub9ac)",id:"dlq-handler-\uc2e4\ud328-\uba54\uc2dc\uc9c0-\ucc98\ub9ac",level:3},{value:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc",id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",level:2},{value:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c",id:"-\uc2e4\ud589-\uc608\uc81c",level:2},{value:"1. \ud050 \uc124\uc815",id:"1-\ud050-\uc124\uc815",level:3},{value:"2. Consumer\ub4e4 \uc2e4\ud589",id:"2-consumer\ub4e4-\uc2e4\ud589",level:3},{value:"3. \uacb0\uc81c \uc694\uccad \ubc1c\ud589",id:"3-\uacb0\uc81c-\uc694\uccad-\ubc1c\ud589",level:3},{value:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"1. DLX \uc124\uc815",id:"1-dlx-\uc124\uc815",level:3},{value:"2. Dead Letter \ubc1c\uc0dd \uc870\uac74",id:"2-dead-letter-\ubc1c\uc0dd-\uc870\uac74",level:3},{value:"3. \uc7ac\uc2dc\ub3c4 \ud328\ud134",id:"3-\uc7ac\uc2dc\ub3c4-\ud328\ud134",level:3},{value:"\ud83d\udcca DLX \ud750\ub984\ub3c4",id:"-dlx-\ud750\ub984\ub3c4",level:2},{value:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d",id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",level:2},{value:"1. DLX \ubb34\ud55c \ub8e8\ud504 \ubc29\uc9c0",id:"1-dlx-\ubb34\ud55c-\ub8e8\ud504-\ubc29\uc9c0",level:3},{value:"2. Retry \ud69f\uc218 \uad00\ub9ac",id:"2-retry-\ud69f\uc218-\uad00\ub9ac",level:3},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dead-letter-exchange-dlx",children:"Dead Letter Exchange (DLX)"})}),"\n",(0,r.jsx)(n.p,{children:"\uc2e4\ud328\ud55c \uba54\uc2dc\uc9c0\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsx)(n.h2,{id:"-\ud559\uc2b5-\ubaa9\ud45c",children:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dead Letter Exchange \uc774\ud574"}),"\n",(0,r.jsx)(n.li,{children:"\uba54\uc2dc\uc9c0 \uc2e4\ud328 \ucc98\ub9ac"}),"\n",(0,r.jsx)(n.li,{children:"\uc7ac\uc2dc\ub3c4 \uba54\ucee4\ub2c8\uc998 \uad6c\ud604"}),"\n",(0,r.jsx)(n.li,{children:"DLQ \ud328\ud134 \ud65c\uc6a9"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ud328\ud134-\uad6c\uc870",children:"\ud83d\udcca \ud328\ud134 \uad6c\uc870"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Producer \u2192 [Main Queue] \u2192 Consumer (\ucc98\ub9ac \uc2e4\ud328)\n                \u2193\n         [Dead Letter Exchange]\n                \u2193\n         [Dead Letter Queue] \u2192 Error Handler\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Dead Letter\uac00 \ubc1c\uc0dd\ud558\ub294 \uacbd\uc6b0"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Consumer\uac00 ",(0,r.jsx)(n.code,{children:"basic.reject"})," \ub610\ub294 ",(0,r.jsx)(n.code,{children:"basic.nack"})," (requeue=False)"]}),"\n",(0,r.jsx)(n.li,{children:"\uba54\uc2dc\uc9c0 TTL \ub9cc\ub8cc"}),"\n",(0,r.jsx)(n.li,{children:"\ud050 \uae38\uc774 \uc81c\ud55c \ucd08\uacfc"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\uc2dc\ub098\ub9ac\uc624",children:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624"}),"\n",(0,r.jsx)(n.p,{children:"\uacb0\uc81c \ucc98\ub9ac \uc2dc\uc2a4\ud15c:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uc815\uc0c1 \ucc98\ub9ac: \uacb0\uc81c \uc644\ub8cc"}),"\n",(0,r.jsx)(n.li,{children:"\uc77c\uc2dc\uc801 \uc2e4\ud328: \uc7ac\uc2dc\ub3c4 \ud050\ub85c \uc774\ub3d9"}),"\n",(0,r.jsx)(n.li,{children:"\uc601\uad6c \uc2e4\ud328: DLQ\ub85c \uc774\ub3d9 \u2192 \uc218\ub3d9 \ucc98\ub9ac"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\uad6c\ud604",children:"\ud83d\udd27 \uad6c\ud604"}),"\n",(0,r.jsx)(n.h3,{id:"\uc124\uc815-\ubc0f-\ubaa8\ub378",children:"\uc124\uc815 \ubc0f \ubaa8\ub378"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# models.py\nfrom dataclasses import dataclass, asdict\nfrom typing import Optional\nimport json\n\n@dataclass\nclass PaymentRequest:\n    """\uacb0\uc81c \uc694\uccad"""\n    payment_id: str\n    user_id: int\n    amount: float\n    retry_count: int = 0\n    error_message: Optional[str] = None\n\n    def to_json(self) -> str:\n        return json.dumps(asdict(self))\n\n    @classmethod\n    def from_json(cls, json_str: str):\n        return cls(**json.loads(json_str))\n'})}),"\n",(0,r.jsx)(n.h3,{id:"queue-\uc124\uc815-dlx-\ud3ec\ud568",children:"Queue \uc124\uc815 (DLX \ud3ec\ud568)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# queue_setup.py\nimport pika\n\ndef setup_queues():\n    \"\"\"DLX\uac00 \ud3ec\ud568\ub41c \ud050 \uc124\uc815\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # 1. Dead Letter Exchange \uc120\uc5b8\n    channel.exchange_declare(\n        exchange='dlx',\n        exchange_type='direct',\n        durable=True\n    )\n\n    # 2. Dead Letter Queue \uc120\uc5b8\n    channel.queue_declare(\n        queue='payment.dlq',\n        durable=True\n    )\n\n    # 3. DLX\uc640 DLQ \ubc14\uc778\ub529\n    channel.queue_bind(\n        exchange='dlx',\n        queue='payment.dlq',\n        routing_key='payment'\n    )\n\n    # 4. Main Queue \uc120\uc5b8 (DLX \uc124\uc815 \ud3ec\ud568)\n    channel.queue_declare(\n        queue='payment.main',\n        durable=True,\n        arguments={\n            # \ud83d\udd11 \ud575\uc2ec: Dead Letter Exchange \uc9c0\uc815\n            'x-dead-letter-exchange': 'dlx',\n            'x-dead-letter-routing-key': 'payment'\n        }\n    )\n\n    # 5. Retry Queue \uc120\uc5b8 (TTL + DLX)\n    channel.queue_declare(\n        queue='payment.retry',\n        durable=True,\n        arguments={\n            'x-dead-letter-exchange': '',  # Default exchange\n            'x-dead-letter-routing-key': 'payment.main',\n            'x-message-ttl': 5000  # 5\ucd08 \ud6c4 main\uc73c\ub85c \ubcf5\uadc0\n        }\n    )\n\n    print(\" [\u2713] Queues configured successfully\")\n    connection.close()\n\nif __name__ == '__main__':\n    setup_queues()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"producer-\uacb0\uc81c-\uc694\uccad-\ubc1c\ud589",children:"Producer (\uacb0\uc81c \uc694\uccad \ubc1c\ud589)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# payment_producer.py\nimport pika\nfrom models import PaymentRequest\n\nclass PaymentProducer:\n    \"\"\"\uacb0\uc81c \uc694\uccad \ubc1c\ud589\uc790\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n\n    def send_payment(self, payment: PaymentRequest):\n        \"\"\"\uacb0\uc81c \uc694\uccad \ubc1c\ud589\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.basic_publish(\n            exchange='',\n            routing_key='payment.main',\n            body=payment.to_json(),\n            properties=pika.BasicProperties(\n                delivery_mode=2,\n                content_type='application/json'\n            )\n        )\n\n        print(f\" [x] Sent payment request: {payment.payment_id}\")\n        connection.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    producer = PaymentProducer()\n\n    # \ud14c\uc2a4\ud2b8\uc6a9 \uacb0\uc81c \uc694\uccad\n    payments = [\n        PaymentRequest('PAY-001', 100, 50.0),   # \uc131\uacf5 \uc608\uc815\n        PaymentRequest('PAY-002', 101, 999.0),  # \uc2e4\ud328 \uc608\uc815 (\uae08\uc561 \ub108\ubb34 \ud07c)\n        PaymentRequest('PAY-003', 102, 25.0),   # \uc131\uacf5 \uc608\uc815\n        PaymentRequest('PAY-004', 103, 1500.0), # \uc2e4\ud328 \uc608\uc815\n    ]\n\n    for payment in payments:\n        producer.send_payment(payment)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"consumer-\uacb0\uc81c-\ucc98\ub9ac",children:"Consumer (\uacb0\uc81c \ucc98\ub9ac)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# payment_consumer.py\nimport pika\nimport random\nfrom models import PaymentRequest\n\nMAX_RETRIES = 3\n\ndef process_payment(payment: PaymentRequest) -> bool:\n    """\n    \uacb0\uc81c \ucc98\ub9ac (\uc2dc\ubbac\ub808\uc774\uc158)\n\n    Returns:\n        True: \uc131\uacf5\n        False: \uc2e4\ud328\n    """\n    # \uc2dc\ubbac\ub808\uc774\uc158: \uae08\uc561\uc774 1000 \uc774\uc0c1\uc774\uba74 \uc2e4\ud328\n    if payment.amount >= 1000:\n        raise ValueError(f"Amount too high: ${payment.amount}")\n\n    # \uc2dc\ubbac\ub808\uc774\uc158: 10% \ud655\ub960\ub85c \uc77c\uc2dc\uc801 \uc2e4\ud328\n    if random.random() < 0.1:\n        raise Exception("Temporary payment gateway error")\n\n    print(f" [\u2713] Payment processed: {payment.payment_id} (${payment.amount})")\n    return True\n\ndef callback(ch, method, properties, body):\n    """\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31"""\n    payment = PaymentRequest.from_json(body.decode())\n\n    try:\n        # \uacb0\uc81c \ucc98\ub9ac\n        process_payment(payment)\n\n        # \uc131\uacf5: ACK\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    except ValueError as e:\n        # \uc601\uad6c \uc2e4\ud328: DLQ\ub85c \uc804\uc1a1\n        print(f" [\u2717] Permanent failure: {payment.payment_id} - {e}")\n\n        payment.error_message = str(e)\n\n        # NACK (requeue=False) \u2192 DLX\ub85c \uc774\ub3d9\n        ch.basic_nack(\n            delivery_tag=method.delivery_tag,\n            requeue=False\n        )\n\n    except Exception as e:\n        # \uc77c\uc2dc\uc801 \uc2e4\ud328: \uc7ac\uc2dc\ub3c4\n        payment.retry_count += 1\n        payment.error_message = str(e)\n\n        print(f" [\u26a0] Temporary failure: {payment.payment_id} - {e}")\n        print(f" [\u21bb] Retry count: {payment.retry_count}/{MAX_RETRIES}")\n\n        if payment.retry_count < MAX_RETRIES:\n            # Retry Queue\ub85c \uc804\uc1a1\n            ch.basic_publish(\n                exchange=\'\',\n                routing_key=\'payment.retry\',\n                body=payment.to_json(),\n                properties=pika.BasicProperties(\n                    delivery_mode=2,\n                    content_type=\'application/json\'\n                )\n            )\n            print(f" [\u21bb] Moved to retry queue (will retry in 5s)")\n        else:\n            # \ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ucd08\uacfc: DLQ\ub85c \uc804\uc1a1\n            print(f" [\u2717] Max retries exceeded: {payment.payment_id}")\n\n        # \uc6d0\ubcf8 \uba54\uc2dc\uc9c0 ACK (\uc774\ubbf8 retry queue\ub85c \uc774\ub3d9)\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start():\n    """Payment Consumer \uc2dc\uc791"""\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(\'localhost\')\n    )\n    channel = connection.channel()\n\n    channel.basic_qos(prefetch_count=1)\n\n    channel.basic_consume(\n        queue=\'payment.main\',\n        on_message_callback=callback\n    )\n\n    print(\' [*] Payment Consumer waiting for requests...\')\n    print(f\' [*] Max retries: {MAX_RETRIES}\')\n    channel.start_consuming()\n\nif __name__ == \'__main__\':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print(\'\\nPayment Consumer stopped\')\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dlq-handler-\uc2e4\ud328-\uba54\uc2dc\uc9c0-\ucc98\ub9ac",children:"DLQ Handler (\uc2e4\ud328 \uba54\uc2dc\uc9c0 \ucc98\ub9ac)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# dlq_handler.py\nimport pika\nimport json\nfrom models import PaymentRequest\nfrom datetime import datetime\n\ndef handle_dead_letter(ch, method, properties, body):\n    \"\"\"Dead Letter \ucc98\ub9ac\"\"\"\n    payment = PaymentRequest.from_json(body.decode())\n\n    print(f\"\"\"\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \ud83d\udc80 DEAD LETTER DETECTED\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    Payment ID: {payment.payment_id}\n    User ID: {payment.user_id}\n    Amount: ${payment.amount}\n    Retry Count: {payment.retry_count}\n    Error: {payment.error_message}\n    Time: {datetime.now().isoformat()}\n\n    Action Required:\n    1. Investigate the error\n    2. Contact user if needed\n    3. Manual intervention required\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \"\"\")\n\n    # DLQ \ub85c\uadf8\ub97c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\n    save_to_database(payment)\n\n    # \uad00\ub9ac\uc790\uc5d0\uac8c \uc54c\ub9bc\n    # send_admin_alert(payment)\n\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef save_to_database(payment: PaymentRequest):\n    \"\"\"DLQ \ub85c\uadf8 \uc800\uc7a5 (\uc2dc\ubbac\ub808\uc774\uc158)\"\"\"\n    with open('dlq_log.jsonl', 'a', encoding='utf-8') as f:\n        log_entry = {\n            'timestamp': datetime.now().isoformat(),\n            'payment_id': payment.payment_id,\n            'user_id': payment.user_id,\n            'amount': payment.amount,\n            'retry_count': payment.retry_count,\n            'error': payment.error_message\n        }\n        f.write(json.dumps(log_entry) + '\\n')\n\ndef start():\n    \"\"\"DLQ Handler \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.basic_consume(\n        queue='payment.dlq',\n        on_message_callback=handle_dead_letter\n    )\n\n    print(' [*] DLQ Handler waiting for dead letters...')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nDLQ Handler stopped')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",children:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# test_dlx.py\nimport pytest\nimport pika\nimport time\nimport json\n\nclass TestDeadLetterExchange:\n    \"\"\"DLX \ud14c\uc2a4\ud2b8\"\"\"\n\n    @pytest.fixture\n    def setup(self):\n        \"\"\"\ud14c\uc2a4\ud2b8 \ud658\uacbd \uc124\uc815\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        # \uae30\uc874 \ud050 \uc0ad\uc81c\n        for queue in ['test.main', 'test.dlq']:\n            try:\n                channel.queue_delete(queue=queue)\n            except:\n                pass\n\n        try:\n            channel.exchange_delete(exchange='test.dlx')\n        except:\n            pass\n\n        yield channel\n        connection.close()\n\n    def test_nack_to_dlx(self, setup):\n        \"\"\"NACK (requeue=False) \uc2dc DLX\ub85c \uc774\ub3d9\"\"\"\n        channel = setup\n\n        # DLX \uc124\uc815\n        channel.exchange_declare(exchange='test.dlx', exchange_type='direct')\n        channel.queue_declare(queue='test.dlq')\n        channel.queue_bind(\n            exchange='test.dlx',\n            queue='test.dlq',\n            routing_key='test'\n        )\n\n        # Main queue (DLX \uc124\uc815)\n        channel.queue_declare(\n            queue='test.main',\n            arguments={\n                'x-dead-letter-exchange': 'test.dlx',\n                'x-dead-letter-routing-key': 'test'\n            }\n        )\n\n        # \uba54\uc2dc\uc9c0 \ubc1c\ud589\n        channel.basic_publish(\n            exchange='',\n            routing_key='test.main',\n            body='Test message'\n        )\n\n        # \uba54\uc2dc\uc9c0 \ubc1b\uace0 NACK\n        method, properties, body = channel.basic_get(\n            queue='test.main',\n            auto_ack=False\n        )\n        assert body == b'Test message'\n\n        # NACK (requeue=False) \u2192 DLX\ub85c \uc774\ub3d9\n        channel.basic_nack(\n            delivery_tag=method.delivery_tag,\n            requeue=False\n        )\n\n        # DLQ\uc5d0\uc11c \uba54\uc2dc\uc9c0 \ud655\uc778\n        time.sleep(0.1)\n        method, properties, body = channel.basic_get(\n            queue='test.dlq',\n            auto_ack=True\n        )\n        assert body == b'Test message'\n\n    def test_ttl_to_dlx(self, setup):\n        \"\"\"TTL \ub9cc\ub8cc \uc2dc DLX\ub85c \uc774\ub3d9\"\"\"\n        channel = setup\n\n        # DLX \uc124\uc815\n        channel.exchange_declare(exchange='test.dlx', exchange_type='direct')\n        channel.queue_declare(queue='test.dlq')\n        channel.queue_bind(\n            exchange='test.dlx',\n            queue='test.dlq',\n            routing_key='test'\n        )\n\n        # Main queue (TTL + DLX)\n        channel.queue_declare(\n            queue='test.main',\n            arguments={\n                'x-dead-letter-exchange': 'test.dlx',\n                'x-dead-letter-routing-key': 'test',\n                'x-message-ttl': 100  # 100ms\n            }\n        )\n\n        # \uba54\uc2dc\uc9c0 \ubc1c\ud589\n        channel.basic_publish(\n            exchange='',\n            routing_key='test.main',\n            body='Expire me'\n        )\n\n        # TTL \ub300\uae30\n        time.sleep(0.2)\n\n        # Main queue\ub294 \ube44\uc5b4\uc788\uc74c\n        assert channel.basic_get(queue='test.main', auto_ack=True)[0] is None\n\n        # DLQ\uc5d0 \uba54\uc2dc\uc9c0 \uc788\uc74c\n        method, properties, body = channel.basic_get(\n            queue='test.dlq',\n            auto_ack=True\n        )\n        assert body == b'Expire me'\n\n    def test_retry_mechanism(self, setup):\n        \"\"\"\uc7ac\uc2dc\ub3c4 \uba54\ucee4\ub2c8\uc998 \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        # Retry queue (1\ucd08 \ud6c4 main\uc73c\ub85c \ubcf5\uadc0)\n        channel.queue_declare(\n            queue='test.retry',\n            arguments={\n                'x-dead-letter-exchange': '',\n                'x-dead-letter-routing-key': 'test.main',\n                'x-message-ttl': 1000\n            }\n        )\n\n        channel.queue_declare(queue='test.main')\n\n        # Retry queue\uc5d0 \uba54\uc2dc\uc9c0 \ubc1c\ud589\n        channel.basic_publish(\n            exchange='',\n            routing_key='test.retry',\n            body='Retry me'\n        )\n\n        # Main queue\ub294 \ube44\uc5b4\uc788\uc74c\n        assert channel.basic_get(queue='test.main', auto_ack=True)[0] is None\n\n        # TTL \ub300\uae30\n        time.sleep(1.1)\n\n        # Main queue\ub85c \ub3cc\uc544\uc634\n        method, properties, body = channel.basic_get(\n            queue='test.main',\n            auto_ack=True\n        )\n        assert body == b'Retry me'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc2e4\ud589-\uc608\uc81c",children:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c"}),"\n",(0,r.jsx)(n.h3,{id:"1-\ud050-\uc124\uc815",children:"1. \ud050 \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python queue_setup.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-consumer\ub4e4-\uc2e4\ud589",children:"2. Consumer\ub4e4 \uc2e4\ud589"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 1 - Main Consumer\npython payment_consumer.py\n\n# \ud130\ubbf8\ub110 2 - DLQ Handler\npython dlq_handler.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-\uacb0\uc81c-\uc694\uccad-\ubc1c\ud589",children:"3. \uacb0\uc81c \uc694\uccad \ubc1c\ud589"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 3\npython payment_producer.py\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\ucd9c\ub825 \uacb0\uacfc"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Payment Consumer\n[\u2713] Payment processed: PAY-001 ($50.0)\n[\u2717] Permanent failure: PAY-002 - Amount too high: $999.0\n[\u2713] Payment processed: PAY-003 ($25.0)\n[\u2717] Permanent failure: PAY-004 - Amount too high: $1500.0\n\n# DLQ Handler\n\ud83d\udc80 DEAD LETTER DETECTED\nPayment ID: PAY-002\nAmount: $999.0\nError: Amount too high: $999.0\nAction Required: Manual intervention\n---\n\ud83d\udc80 DEAD LETTER DETECTED\nPayment ID: PAY-004\nAmount: $1500.0\nError: Amount too high: $1500.0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,r.jsx)(n.h3,{id:"1-dlx-\uc124\uc815",children:"1. DLX \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Queue \uc120\uc5b8 \uc2dc DLX \uc9c0\uc815\nchannel.queue_declare(\n    queue='my_queue',\n    arguments={\n        'x-dead-letter-exchange': 'my_dlx',\n        'x-dead-letter-routing-key': 'dead'\n    }\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-dead-letter-\ubc1c\uc0dd-\uc870\uac74",children:"2. Dead Letter \ubc1c\uc0dd \uc870\uac74"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# 1. NACK (requeue=False)\nch.basic_nack(delivery_tag=method.delivery_tag, requeue=False)\n\n# 2. REJECT (requeue=False)\nch.basic_reject(delivery_tag=method.delivery_tag, requeue=False)\n\n# 3. TTL \ub9cc\ub8cc (\uc790\ub3d9)\narguments={'x-message-ttl': 5000}\n\n# 4. \ud050 \uae38\uc774 \ucd08\uacfc (\uc790\ub3d9)\narguments={'x-max-length': 100}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-\uc7ac\uc2dc\ub3c4-\ud328\ud134",children:"3. \uc7ac\uc2dc\ub3c4 \ud328\ud134"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Retry Queue: TTL \ud6c4 Main\uc73c\ub85c \ubcf5\uadc0\nchannel.queue_declare(\n    queue='retry_queue',\n    arguments={\n        'x-dead-letter-exchange': '',  # Default\n        'x-dead-letter-routing-key': 'main_queue',\n        'x-message-ttl': 5000  # 5\ucd08 \ub300\uae30\n    }\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-dlx-\ud750\ub984\ub3c4",children:"\ud83d\udcca DLX \ud750\ub984\ub3c4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Producer   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Main Queue    \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n     \u2502       \u2502\n   \uc131\uacf5      \uc2e4\ud328 (NACK/TTL)\n     \u2502       \u2502\n     \u25bc       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   ACK   \u2502 \u2502    DLX     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502            \u2502\n         \uc7ac\uc2dc\ub3c4        \uc601\uad6c\uc2e4\ud328\n            \u2502            \u2502\n            \u25bc            \u25bc\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502Retry Queue \u2502 \u2502   DLQ   \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n           \u2502             \u2502\n        TTL \ud6c4           \u25bc\n           \u2502        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502 Handler  \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",children:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d"}),"\n",(0,r.jsx)(n.h3,{id:"1-dlx-\ubb34\ud55c-\ub8e8\ud504-\ubc29\uc9c0",children:"1. DLX \ubb34\ud55c \ub8e8\ud504 \ubc29\uc9c0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u274c \uc704\ud5d8: Main\uacfc DLX\uac00 \uc11c\ub85c\ub97c \uac00\ub9ac\ud0b4\nchannel.queue_declare(\n    queue='main',\n    arguments={'x-dead-letter-exchange': 'dlx'}\n)\nchannel.queue_declare(\n    queue='dlq',\n    arguments={'x-dead-letter-exchange': ''}  # main\uc73c\ub85c \ubcf5\uadc0\n)\n# \u2192 \ubb34\ud55c \ub8e8\ud504!\n\n# \u2705 \uc62c\ubc14\ub984: DLQ\ub294 DLX\ub97c \uc124\uc815\ud558\uc9c0 \uc54a\uc74c\nchannel.queue_declare(queue='dlq')  # \uc885\uc810\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-retry-\ud69f\uc218-\uad00\ub9ac",children:"2. Retry \ud69f\uc218 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \uba54\uc2dc\uc9c0\uc5d0 retry_count \ud3ec\ud568\n@dataclass\nclass Message:\n    data: str\n    retry_count: int = 0\n\n# Retry \uc2dc \uce74\uc6b4\ud2b8 \uc99d\uac00\nif message.retry_count < MAX_RETRIES:\n    message.retry_count += 1\n    send_to_retry(message)\nelse:\n    send_to_dlq(message)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DLX"}),": \uc2e4\ud328\ud55c \uba54\uc2dc\uc9c0\ub97c \ubcc4\ub3c4\ub85c \ucc98\ub9ac"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\uc7ac\uc2dc\ub3c4"}),": TTL\uc744 \uc774\uc6a9\ud55c \uc9c0\uc5f0 \uc7ac\uc2dc\ub3c4"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DLQ"}),": \ucd5c\uc885 \uc2e4\ud328 \uba54\uc2dc\uc9c0 \ubcf4\uad00"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ubaa8\ub2c8\ud130\ub9c1"}),": DLQ \ud06c\uae30 \uc8fc\uc2dc \ud544\uc218"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,r.jsx)(n.a,{href:"./priority-queue",children:"Priority Queue - \uc6b0\uc120\uc21c\uc704 \ud050"})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var a=t(6540);const r={},s=a.createContext(r);function l(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);