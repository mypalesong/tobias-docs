"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7840],{1103:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"rabbitmq/advanced/monitoring","title":"Monitoring - \ubaa8\ub2c8\ud130\ub9c1","description":"RabbitMQ\ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/advanced/monitoring.md","sourceDirName":"rabbitmq/advanced","slug":"/rabbitmq/advanced/monitoring","permalink":"/docs/rabbitmq/advanced/monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/advanced/monitoring.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"rabbitmqSidebar","previous":{"title":"Clustering - \ud074\ub7ec\uc2a4\ud130\ub9c1","permalink":"/docs/rabbitmq/advanced/clustering"},"next":{"title":"Performance - \uc131\ub2a5 \ucd5c\uc801\ud654","permalink":"/docs/rabbitmq/advanced/performance"}}');var t=s(4848),a=s(8453);const i={sidebar_position:3},o="Monitoring - \ubaa8\ub2c8\ud130\ub9c1",l={},u=[{value:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c",id:"-\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"\ud83d\udcca \uc8fc\uc694 \uba54\ud2b8\ub9ad",id:"-\uc8fc\uc694-\uba54\ud2b8\ub9ad",level:2},{value:"1. \ud050 \uba54\ud2b8\ub9ad",id:"1-\ud050-\uba54\ud2b8\ub9ad",level:3},{value:"2. \ub178\ub4dc \uba54\ud2b8\ub9ad",id:"2-\ub178\ub4dc-\uba54\ud2b8\ub9ad",level:3},{value:"3. \uc5f0\uacb0 \uba54\ud2b8\ub9ad",id:"3-\uc5f0\uacb0-\uba54\ud2b8\ub9ad",level:3},{value:"\ud83d\udd27 Prometheus + Grafana \uc124\uc815",id:"-prometheus--grafana-\uc124\uc815",level:2},{value:"docker-compose.yml (\ud655\uc7a5)",id:"docker-composeyml-\ud655\uc7a5",level:3},{value:"RabbitMQ \uc124\uc815",id:"rabbitmq-\uc124\uc815",level:3},{value:"Prometheus \uc124\uc815",id:"prometheus-\uc124\uc815",level:3},{value:"Grafana \ub370\uc774\ud130\uc18c\uc2a4 \uc124\uc815",id:"grafana-\ub370\uc774\ud130\uc18c\uc2a4-\uc124\uc815",level:3},{value:"\ud83d\udcc8 Python\uc73c\ub85c \uba54\ud2b8\ub9ad \uc218\uc9d1",id:"-python\uc73c\ub85c-\uba54\ud2b8\ub9ad-\uc218\uc9d1",level:2},{value:"Management API \uc0ac\uc6a9",id:"management-api-\uc0ac\uc6a9",level:3},{value:"\uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1",id:"\uc2e4\uc2dc\uac04-\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"\ud83d\udea8 \uc54c\ub9bc \uc124\uc815",id:"-\uc54c\ub9bc-\uc124\uc815",level:2},{value:"Prometheus Alerting Rules",id:"prometheus-alerting-rules",level:3},{value:"Python \uc54c\ub9bc \ubd07",id:"python-\uc54c\ub9bc-\ubd07",level:3},{value:"\ud83d\udcca Grafana \ub300\uc2dc\ubcf4\ub4dc",id:"-grafana-\ub300\uc2dc\ubcf4\ub4dc",level:2},{value:"\ub300\uc2dc\ubcf4\ub4dc JSON (\uc77c\ubd80)",id:"\ub300\uc2dc\ubcf4\ub4dc-json-\uc77c\ubd80",level:3},{value:"\ud83e\uddea \uc131\ub2a5 \ud14c\uc2a4\ud2b8 &amp; \ubaa8\ub2c8\ud130\ub9c1",id:"-\uc131\ub2a5-\ud14c\uc2a4\ud2b8--\ubaa8\ub2c8\ud130\ub9c1",level:2},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"monitoring---\ubaa8\ub2c8\ud130\ub9c1",children:"Monitoring - \ubaa8\ub2c8\ud130\ub9c1"})}),"\n",(0,t.jsx)(n.p,{children:"RabbitMQ\ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsx)(n.h2,{id:"-\ud559\uc2b5-\ubaa9\ud45c",children:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"RabbitMQ \uba54\ud2b8\ub9ad \uc774\ud574"}),"\n",(0,t.jsx)(n.li,{children:"Prometheus + Grafana \uc5f0\ub3d9"}),"\n",(0,t.jsx)(n.li,{children:"\uc54c\ub9bc \uc124\uc815"}),"\n",(0,t.jsx)(n.li,{children:"\uc131\ub2a5 \ub300\uc2dc\ubcf4\ub4dc \uad6c\ucd95"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\uc8fc\uc694-\uba54\ud2b8\ub9ad",children:"\ud83d\udcca \uc8fc\uc694 \uba54\ud2b8\ub9ad"}),"\n",(0,t.jsx)(n.h3,{id:"1-\ud050-\uba54\ud2b8\ub9ad",children:"1. \ud050 \uba54\ud2b8\ub9ad"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Messages Ready"}),": \ucc98\ub9ac \ub300\uae30 \uc911\uc778 \uba54\uc2dc\uc9c0 \uc218"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Messages Unacked"}),": \ucc98\ub9ac \uc911\uc778 \uba54\uc2dc\uc9c0 \uc218"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Message Rate"}),": \ucd08\ub2f9 \uba54\uc2dc\uc9c0 \ucc98\ub9ac\uc728"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consumer Count"}),": Consumer \uc218"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-\ub178\ub4dc-\uba54\ud2b8\ub9ad",children:"2. \ub178\ub4dc \uba54\ud2b8\ub9ad"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Used"}),": \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Disk Free"}),": \ub514\uc2a4\ud06c \uc5ec\uc720 \uacf5\uac04"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Descriptors"}),": \ud30c\uc77c \ub514\uc2a4\ud06c\ub9bd\ud130 \uc0ac\uc6a9"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Socket Descriptors"}),": \uc18c\ucf13 \uc0ac\uc6a9"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-\uc5f0\uacb0-\uba54\ud2b8\ub9ad",children:"3. \uc5f0\uacb0 \uba54\ud2b8\ub9ad"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connections"}),": \ud65c\uc131 \uc5f0\uacb0 \uc218"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Channels"}),": \ud65c\uc131 \ucc44\ub110 \uc218"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection Churn"}),": \uc5f0\uacb0 \uc0dd\uc131/\uc0ad\uc81c \uc18d\ub3c4"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-prometheus--grafana-\uc124\uc815",children:"\ud83d\udd27 Prometheus + Grafana \uc124\uc815"}),"\n",(0,t.jsx)(n.h3,{id:"docker-composeyml-\ud655\uc7a5",children:"docker-compose.yml (\ud655\uc7a5)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  rabbitmq:\n    image: rabbitmq:3-management\n    hostname: rabbitmq\n    environment:\n      - RABBITMQ_DEFAULT_USER=admin\n      - RABBITMQ_DEFAULT_PASS=admin123\n    ports:\n      - "5672:5672"\n      - "15672:15672"\n      - "15692:15692"  # Prometheus metrics\n    volumes:\n      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf\n      - ./enabled_plugins:/etc/rabbitmq/enabled_plugins\n    networks:\n      - monitoring\n\n  prometheus:\n    image: prom/prometheus:latest\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus-data:/prometheus\n    ports:\n      - "9090:9090"\n    networks:\n      - monitoring\n    depends_on:\n      - rabbitmq\n\n  grafana:\n    image: grafana/grafana:latest\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards\n      - ./grafana/datasources:/etc/grafana/provisioning/datasources\n    ports:\n      - "3000:3000"\n    networks:\n      - monitoring\n    depends_on:\n      - prometheus\n\nnetworks:\n  monitoring:\n    driver: bridge\n\nvolumes:\n  prometheus-data:\n  grafana-data:\n'})}),"\n",(0,t.jsx)(n.h3,{id:"rabbitmq-\uc124\uc815",children:"RabbitMQ \uc124\uc815"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"# rabbitmq.conf\n# Management Plugin\nmanagement.tcp.port = 15672\n\n# Prometheus Plugin\nprometheus.tcp.port = 15692\nprometheus.return_per_object_metrics = true\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"# enabled_plugins\n[rabbitmq_management,rabbitmq_prometheus].\n"})}),"\n",(0,t.jsx)(n.h3,{id:"prometheus-\uc124\uc815",children:"Prometheus \uc124\uc815"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'rabbitmq'\n    static_configs:\n      - targets: ['rabbitmq:15692']\n        labels:\n          instance: 'rabbitmq-main'\n\n  - job_name: 'rabbitmq-detailed'\n    static_configs:\n      - targets: ['rabbitmq:15692']\n    metrics_path: '/metrics/detailed'\n    params:\n      family: ['queue_coarse_metrics', 'queue_metrics']\n"})}),"\n",(0,t.jsx)(n.h3,{id:"grafana-\ub370\uc774\ud130\uc18c\uc2a4-\uc124\uc815",children:"Grafana \ub370\uc774\ud130\uc18c\uc2a4 \uc124\uc815"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# grafana/datasources/prometheus.yml\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n    editable: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-python\uc73c\ub85c-\uba54\ud2b8\ub9ad-\uc218\uc9d1",children:"\ud83d\udcc8 Python\uc73c\ub85c \uba54\ud2b8\ub9ad \uc218\uc9d1"}),"\n",(0,t.jsx)(n.h3,{id:"management-api-\uc0ac\uc6a9",children:"Management API \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# metrics_collector.py\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom datetime import datetime\n\nclass RabbitMQMetrics:\n    """RabbitMQ \uba54\ud2b8\ub9ad \uc218\uc9d1"""\n\n    def __init__(self, host=\'localhost\', port=15672, user=\'admin\', password=\'admin123\'):\n        self.base_url = f\'http://{host}:{port}/api\'\n        self.auth = HTTPBasicAuth(user, password)\n\n    def get_overview(self):\n        """\uc804\uccb4 \uac1c\uc694 \uc870\ud68c"""\n        response = requests.get(\n            f\'{self.base_url}/overview\',\n            auth=self.auth\n        )\n        return response.json()\n\n    def get_queues(self):\n        """\ubaa8\ub4e0 \ud050 \uc815\ubcf4 \uc870\ud68c"""\n        response = requests.get(\n            f\'{self.base_url}/queues\',\n            auth=self.auth\n        )\n        return response.json()\n\n    def get_queue_details(self, vhost, queue_name):\n        """\ud2b9\uc815 \ud050 \uc0c1\uc138 \uc815\ubcf4"""\n        vhost_encoded = vhost.replace(\'/\', \'%2F\')\n        response = requests.get(\n            f\'{self.base_url}/queues/{vhost_encoded}/{queue_name}\',\n            auth=self.auth\n        )\n        return response.json()\n\n    def get_connections(self):\n        """\uc5f0\uacb0 \uc815\ubcf4 \uc870\ud68c"""\n        response = requests.get(\n            f\'{self.base_url}/connections\',\n            auth=self.auth\n        )\n        return response.json()\n\n    def get_nodes(self):\n        """\ub178\ub4dc \uc815\ubcf4 \uc870\ud68c"""\n        response = requests.get(\n            f\'{self.base_url}/nodes\',\n            auth=self.auth\n        )\n        return response.json()\n\n    def print_summary(self):\n        """\uba54\ud2b8\ub9ad \uc694\uc57d \ucd9c\ub825"""\n        overview = self.get_overview()\n        queues = self.get_queues()\n        connections = self.get_connections()\n\n        print(" RabbitMQ Metrics Summary")\n        print(" " + "="*50)\n\n        # Message stats\n        msg_stats = overview.get(\'message_stats\', {})\n        print(f" Messages Published: {msg_stats.get(\'publish\', 0)}")\n        print(f" Messages Delivered: {msg_stats.get(\'deliver_get\', 0)}")\n        print(f" Messages Acked: {msg_stats.get(\'ack\', 0)}")\n\n        # Queue stats\n        total_messages = sum(q.get(\'messages\', 0) for q in queues)\n        total_ready = sum(q.get(\'messages_ready\', 0) for q in queues)\n        total_unacked = sum(q.get(\'messages_unacknowledged\', 0) for q in queues)\n\n        print(f"\\n Total Messages: {total_messages}")\n        print(f" Messages Ready: {total_ready}")\n        print(f" Messages Unacked: {total_unacked}")\n\n        # Connection stats\n        print(f"\\n Active Connections: {len(connections)}")\n        print(f" Total Queues: {len(queues)}")\n\n        # Top queues\n        print(f"\\n Top Queues by Messages:")\n        sorted_queues = sorted(\n            queues,\n            key=lambda q: q.get(\'messages\', 0),\n            reverse=True\n        )[:5]\n\n        for q in sorted_queues:\n            print(f"   {q[\'name\']}: {q.get(\'messages\', 0)} messages")\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    metrics = RabbitMQMetrics()\n    metrics.print_summary()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc2e4\uc2dc\uac04-\ubaa8\ub2c8\ud130\ub9c1",children:"\uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# realtime_monitor.py\nimport time\nfrom metrics_collector import RabbitMQMetrics\n\ndef monitor_queue(queue_name: str, interval: int = 5):\n    """\ud050 \uc2e4\uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1"""\n    metrics = RabbitMQMetrics()\n\n    print(f" Monitoring queue: {queue_name}")\n    print(f" Refresh interval: {interval}s")\n    print(" Press Ctrl+C to stop\\n")\n\n    try:\n        while True:\n            queue = metrics.get_queue_details(\'/\', queue_name)\n\n            messages = queue.get(\'messages\', 0)\n            ready = queue.get(\'messages_ready\', 0)\n            unacked = queue.get(\'messages_unacknowledged\', 0)\n            consumers = queue.get(\'consumers\', 0)\n\n            # Message rates\n            msg_stats = queue.get(\'message_stats\', {})\n            publish_rate = msg_stats.get(\'publish_details\', {}).get(\'rate\', 0)\n            deliver_rate = msg_stats.get(\'deliver_get_details\', {}).get(\'rate\', 0)\n\n            print(f"[{time.strftime(\'%H:%M:%S\')}] "\n                  f"Total: {messages:4d} | "\n                  f"Ready: {ready:4d} | "\n                  f"Unacked: {unacked:4d} | "\n                  f"Consumers: {consumers:2d} | "\n                  f"Pub/s: {publish_rate:5.1f} | "\n                  f"Del/s: {deliver_rate:5.1f}")\n\n            time.sleep(interval)\n\n    except KeyboardInterrupt:\n        print("\\n Monitoring stopped")\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    import sys\n    queue = sys.argv[1] if len(sys.argv) > 1 else \'orders\'\n    monitor_queue(queue)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc54c\ub9bc-\uc124\uc815",children:"\ud83d\udea8 \uc54c\ub9bc \uc124\uc815"}),"\n",(0,t.jsx)(n.h3,{id:"prometheus-alerting-rules",children:"Prometheus Alerting Rules"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# prometheus/alerts.yml\ngroups:\n  - name: rabbitmq_alerts\n    interval: 30s\n    rules:\n      # \ud050 \uba54\uc2dc\uc9c0 \ub204\uc801\n      - alert: QueueMessageBacklog\n        expr: rabbitmq_queue_messages_ready > 1000\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "Queue {{ $labels.queue }} has high backlog"\n          description: "{{ $labels.queue }} has {{ $value }} messages ready"\n\n      # \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \ub192\uc74c\n      - alert: HighMemoryUsage\n        expr: rabbitmq_node_mem_used / rabbitmq_node_mem_limit > 0.9\n        for: 2m\n        labels:\n          severity: critical\n        annotations:\n          summary: "Node {{ $labels.instance }} memory usage > 90%"\n          description: "Memory usage: {{ $value | humanizePercentage }}"\n\n      # \ub514\uc2a4\ud06c \uacf5\uac04 \ubd80\uc871\n      - alert: LowDiskSpace\n        expr: rabbitmq_node_disk_free < 1000000000  # 1GB\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "Node {{ $labels.instance }} low disk space"\n          description: "Free disk: {{ $value | humanize1024 }}B"\n\n      # Consumer \ubd80\uc871\n      - alert: NoConsumers\n        expr: rabbitmq_queue_consumers == 0 and rabbitmq_queue_messages > 0\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: "Queue {{ $labels.queue }} has no consumers"\n          description: "{{ $labels.queue }} has messages but no consumers"\n\n      # \uc5f0\uacb0 \uae09\uc99d\n      - alert: HighConnectionChurn\n        expr: rate(rabbitmq_connections_opened_total[5m]) > 10\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "High connection churn rate"\n          description: "Connection rate: {{ $value | humanize }}/s"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"python-\uc54c\ub9bc-\ubd07",children:"Python \uc54c\ub9bc \ubd07"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# alert_bot.py\nimport requests\nfrom metrics_collector import RabbitMQMetrics\nimport time\n\nclass AlertBot:\n    """RabbitMQ \uc54c\ub9bc \ubd07"""\n\n    def __init__(self, slack_webhook=None):\n        self.metrics = RabbitMQMetrics()\n        self.slack_webhook = slack_webhook\n\n    def check_queue_backlog(self, queue_name: str, threshold: int = 1000):\n        """\ud050 \uba54\uc2dc\uc9c0 \ub204\uc801 \uccb4\ud06c"""\n        queue = self.metrics.get_queue_details(\'/\', queue_name)\n        messages_ready = queue.get(\'messages_ready\', 0)\n\n        if messages_ready > threshold:\n            message = (\n                f"\u26a0\ufe0f Alert: Queue \'{queue_name}\' has {messages_ready} "\n                f"messages waiting (threshold: {threshold})"\n            )\n            self.send_alert(message)\n            return True\n        return False\n\n    def check_memory_usage(self, threshold_percent: float = 0.8):\n        """\uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9 \uccb4\ud06c"""\n        nodes = self.metrics.get_nodes()\n\n        for node in nodes:\n            mem_used = node.get(\'mem_used\', 0)\n            mem_limit = node.get(\'mem_limit\', 1)\n            usage_percent = mem_used / mem_limit\n\n            if usage_percent > threshold_percent:\n                message = (\n                    f"\ud83d\udea8 Critical: Node \'{node[\'name\']}\' memory usage "\n                    f"{usage_percent:.1%} (threshold: {threshold_percent:.1%})"\n                )\n                self.send_alert(message)\n                return True\n        return False\n\n    def check_disk_space(self, threshold_gb: float = 1.0):\n        """\ub514\uc2a4\ud06c \uacf5\uac04 \uccb4\ud06c"""\n        nodes = self.metrics.get_nodes()\n\n        for node in nodes:\n            disk_free = node.get(\'disk_free\', 0)\n            disk_free_gb = disk_free / (1024 ** 3)\n\n            if disk_free_gb < threshold_gb:\n                message = (\n                    f"\u26a0\ufe0f Warning: Node \'{node[\'name\']}\' has only "\n                    f"{disk_free_gb:.2f}GB free disk space"\n                )\n                self.send_alert(message)\n                return True\n        return False\n\n    def check_no_consumers(self):\n        """Consumer \uc5c6\ub294 \ud050 \uccb4\ud06c"""\n        queues = self.metrics.get_queues()\n\n        for queue in queues:\n            consumers = queue.get(\'consumers\', 0)\n            messages = queue.get(\'messages\', 0)\n\n            if consumers == 0 and messages > 0:\n                message = (\n                    f"\u26a0\ufe0f Warning: Queue \'{queue[\'name\']}\' has "\n                    f"{messages} messages but no consumers"\n                )\n                self.send_alert(message)\n\n    def send_alert(self, message: str):\n        """\uc54c\ub9bc \uc804\uc1a1"""\n        print(f" [ALERT] {message}")\n\n        # Slack \uc804\uc1a1\n        if self.slack_webhook:\n            payload = {\'text\': message}\n            try:\n                requests.post(self.slack_webhook, json=payload)\n            except Exception as e:\n                print(f" [ERROR] Failed to send Slack alert: {e}")\n\n    def run_continuous(self, interval: int = 60):\n        """\uc9c0\uc18d\uc801\uc778 \ubaa8\ub2c8\ud130\ub9c1"""\n        print(f" Alert Bot started (interval: {interval}s)")\n\n        try:\n            while True:\n                self.check_memory_usage()\n                self.check_disk_space()\n                self.check_no_consumers()\n\n                time.sleep(interval)\n\n        except KeyboardInterrupt:\n            print("\\n Alert Bot stopped")\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    # Slack Webhook URL (\uc120\ud0dd\uc0ac\ud56d)\n    # slack_url = \'https://hooks.slack.com/services/YOUR/WEBHOOK/URL\'\n\n    bot = AlertBot()\n    bot.run_continuous(interval=30)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-grafana-\ub300\uc2dc\ubcf4\ub4dc",children:"\ud83d\udcca Grafana \ub300\uc2dc\ubcf4\ub4dc"}),"\n",(0,t.jsx)(n.h3,{id:"\ub300\uc2dc\ubcf4\ub4dc-json-\uc77c\ubd80",children:"\ub300\uc2dc\ubcf4\ub4dc JSON (\uc77c\ubd80)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "RabbitMQ Overview",\n    "panels": [\n      {\n        "title": "Message Rate",\n        "targets": [\n          {\n            "expr": "rate(rabbitmq_global_messages_received_total[5m])",\n            "legendFormat": "Received"\n          },\n          {\n            "expr": "rate(rabbitmq_global_messages_delivered_total[5m])",\n            "legendFormat": "Delivered"\n          }\n        ],\n        "type": "graph"\n      },\n      {\n        "title": "Queue Messages",\n        "targets": [\n          {\n            "expr": "rabbitmq_queue_messages",\n            "legendFormat": "{{ queue }}"\n          }\n        ],\n        "type": "graph"\n      },\n      {\n        "title": "Memory Usage",\n        "targets": [\n          {\n            "expr": "rabbitmq_node_mem_used / rabbitmq_node_mem_limit",\n            "legendFormat": "{{ instance }}"\n          }\n        ],\n        "type": "gauge"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc131\ub2a5-\ud14c\uc2a4\ud2b8--\ubaa8\ub2c8\ud130\ub9c1",children:"\ud83e\uddea \uc131\ub2a5 \ud14c\uc2a4\ud2b8 & \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# performance_test.py\nimport pika\nimport threading\nimport time\nfrom metrics_collector import RabbitMQMetrics\n\nclass PerformanceTester:\n    """\uc131\ub2a5 \ud14c\uc2a4\ud2b8"""\n\n    def __init__(self):\n        self.metrics = RabbitMQMetrics()\n        self.sent_count = 0\n        self.received_count = 0\n        self.running = False\n\n    def producer_thread(self, queue_name: str, count: int):\n        """Producer \uc2a4\ub808\ub4dc"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(\'localhost\')\n        )\n        channel = connection.channel()\n        channel.queue_declare(queue=queue_name, durable=True)\n\n        for i in range(count):\n            channel.basic_publish(\n                exchange=\'\',\n                routing_key=queue_name,\n                body=f\'Message {i+1}\',\n                properties=pika.BasicProperties(delivery_mode=2)\n            )\n            self.sent_count += 1\n\n        connection.close()\n\n    def consumer_thread(self, queue_name: str):\n        """Consumer \uc2a4\ub808\ub4dc"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(\'localhost\')\n        )\n        channel = connection.channel()\n\n        def callback(ch, method, properties, body):\n            self.received_count += 1\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n\n        channel.basic_qos(prefetch_count=10)\n        channel.basic_consume(\n            queue=queue_name,\n            on_message_callback=callback\n        )\n\n        while self.running:\n            connection.process_data_events(time_limit=1)\n\n        connection.close()\n\n    def run_test(\n        self,\n        queue_name: str,\n        message_count: int,\n        producer_count: int,\n        consumer_count: int\n    ):\n        """\uc131\ub2a5 \ud14c\uc2a4\ud2b8 \uc2e4\ud589"""\n        self.running = True\n        self.sent_count = 0\n        self.received_count = 0\n\n        print(f" Performance Test")\n        print(f" " + "="*50)\n        print(f" Queue: {queue_name}")\n        print(f" Messages: {message_count}")\n        print(f" Producers: {producer_count}")\n        print(f" Consumers: {consumer_count}")\n        print()\n\n        start_time = time.time()\n\n        # Consumer \uc2dc\uc791\n        consumer_threads = []\n        for i in range(consumer_count):\n            t = threading.Thread(\n                target=self.consumer_thread,\n                args=(queue_name,)\n            )\n            t.start()\n            consumer_threads.append(t)\n\n        # Producer \uc2dc\uc791\n        messages_per_producer = message_count // producer_count\n\n        producer_threads = []\n        for i in range(producer_count):\n            t = threading.Thread(\n                target=self.producer_thread,\n                args=(queue_name, messages_per_producer)\n            )\n            t.start()\n            producer_threads.append(t)\n\n        # Producer \uc644\ub8cc \ub300\uae30\n        for t in producer_threads:\n            t.join()\n\n        print(f" [\u2713] All messages sent: {self.sent_count}")\n\n        # Consumer \uc644\ub8cc \ub300\uae30\n        while self.received_count < self.sent_count:\n            time.sleep(0.1)\n\n        self.running = False\n\n        for t in consumer_threads:\n            t.join()\n\n        end_time = time.time()\n        duration = end_time - start_time\n\n        # \uacb0\uacfc \ucd9c\ub825\n        print(f"\\n Results:")\n        print(f" " + "="*50)\n        print(f" Duration: {duration:.2f}s")\n        print(f" Throughput: {self.sent_count / duration:.2f} msg/s")\n        print(f" Sent: {self.sent_count}")\n        print(f" Received: {self.received_count}")\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    tester = PerformanceTester()\n    tester.run_test(\n        queue_name=\'perf_test\',\n        message_count=10000,\n        producer_count=5,\n        consumer_count=10\n    )\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prometheus Plugin"}),": RabbitMQ \uba54\ud2b8\ub9ad \uc218\uc9d1"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Grafana"}),": \uc2dc\uac01\ud654 \ub300\uc2dc\ubcf4\ub4dc"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Management API"}),": Python\uc73c\ub85c \uba54\ud2b8\ub9ad \uc870\ud68c"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\uc54c\ub9bc"}),": Prometheus Alertmanager \ub610\ub294 \ucee4\uc2a4\ud140 \ubd07"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"./performance",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"})]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);