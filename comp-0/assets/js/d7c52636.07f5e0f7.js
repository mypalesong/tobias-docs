"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7375],{5181:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"crawling/examples/scenario-03-social-media","title":"\uc2dc\ub098\ub9ac\uc624 3: \uc18c\uc15c \ubbf8\ub514\uc5b4 \ub370\uc774\ud130 \uc218\uc9d1","description":"Instagram \uc2a4\ud0c0\uc77c\uc758 \uc18c\uc15c \ubbf8\ub514\uc5b4\uc5d0\uc11c \uac8c\uc2dc\ubb3c, \ud504\ub85c\ud544 \uc0ac\uc9c4\uc744 \uc218\uc9d1\ud558\ub294 \uc2a4\ud06c\ub798\ud37c\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/crawling/examples/scenario-03-social-media.md","sourceDirName":"crawling/examples","slug":"/crawling/examples/scenario-03-social-media","permalink":"/docs/crawling/examples/scenario-03-social-media","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/crawling/examples/scenario-03-social-media.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"crawlingSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 2: \uc1fc\ud551\ubab0 \uac00\uaca9 \ubaa8\ub2c8\ud130\ub9c1","permalink":"/docs/crawling/examples/scenario-02-ecommerce-scraper"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 4: \ucc44\uc6a9 \uacf5\uace0 \uc2a4\ud06c\ub798\ud37c","permalink":"/docs/crawling/examples/scenario-04-job-board"}}');var s=i(4848),t=i(8453);const a={sidebar_position:4},o="\uc2dc\ub098\ub9ac\uc624 3: \uc18c\uc15c \ubbf8\ub514\uc5b4 \ub370\uc774\ud130 \uc218\uc9d1",l={},p=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604",id:"-\uc644\uc804\ud55c-\uad6c\ud604",level:2},{value:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:3},{value:"config.py",id:"configpy",level:3},{value:"scraper/image_manager.py",id:"scraperimage_managerpy",level:3},{value:"scraper/post_parser.py",id:"scraperpost_parserpy",level:3},{value:"scraper/instagram_scraper.py",id:"scraperinstagram_scraperpy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\uddbc\ufe0f \uc774\ubbf8\uc9c0 \uae30\ub2a5",id:"\ufe0f-\uc774\ubbf8\uc9c0-\uae30\ub2a5",level:2},{value:"1. \ud504\ub85c\ud544 \uc0ac\uc9c4 \ub2e4\uc6b4\ub85c\ub4dc",id:"1-\ud504\ub85c\ud544-\uc0ac\uc9c4-\ub2e4\uc6b4\ub85c\ub4dc",level:3},{value:"2. \uac8c\uc2dc\ubb3c \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc",id:"2-\uac8c\uc2dc\ubb3c-\uc774\ubbf8\uc9c0-\ub2e4\uc6b4\ub85c\ub4dc",level:3},{value:"3. \ucf5c\ub77c\uc8fc \uc0dd\uc131",id:"3-\ucf5c\ub77c\uc8fc-\uc0dd\uc131",level:3},{value:"\ud83d\udd10 \ub85c\uadf8\uc778 \uad00\ub9ac",id:"-\ub85c\uadf8\uc778-\uad00\ub9ac",level:2},{value:"\uc138\uc158 \ucfe0\ud0a4 \uc800\uc7a5",id:"\uc138\uc158-\ucfe0\ud0a4-\uc800\uc7a5",level:3},{value:"\ud658\uacbd \ubcc0\uc218 \uc0ac\uc6a9",id:"\ud658\uacbd-\ubcc0\uc218-\uc0ac\uc6a9",level:3},{value:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d",id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function g(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"\uc2dc\ub098\ub9ac\uc624-3-\uc18c\uc15c-\ubbf8\ub514\uc5b4-\ub370\uc774\ud130-\uc218\uc9d1",children:"\uc2dc\ub098\ub9ac\uc624 3: \uc18c\uc15c \ubbf8\ub514\uc5b4 \ub370\uc774\ud130 \uc218\uc9d1"})}),"\n",(0,s.jsx)(e.p,{children:"Instagram \uc2a4\ud0c0\uc77c\uc758 \uc18c\uc15c \ubbf8\ub514\uc5b4\uc5d0\uc11c \uac8c\uc2dc\ubb3c, \ud504\ub85c\ud544 \uc0ac\uc9c4\uc744 \uc218\uc9d1\ud558\ub294 \uc2a4\ud06c\ub798\ud37c\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,s.jsx)(e.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\uac8c\uc2dc\ubb3c \uc815\ubcf4 \uc218\uc9d1 (\ud14d\uc2a4\ud2b8, \uc88b\uc544\uc694, \ub313\uae00)"}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"\ud504\ub85c\ud544 \uc0ac\uc9c4 \ubc0f \uac8c\uc2dc\ubb3c \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc"})}),"\n",(0,s.jsx)(e.li,{children:"\ud574\uc2dc\ud0dc\uadf8 \ucd94\ucd9c"}),"\n",(0,s.jsx)(e.li,{children:"\ubb34\ud55c \uc2a4\ud06c\ub864 \ucc98\ub9ac"}),"\n",(0,s.jsx)(e.li,{children:"\ub85c\uadf8\uc778 \uc138\uc158 \uad00\ub9ac"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"-\uc644\uc804\ud55c-\uad6c\ud604",children:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604"}),"\n",(0,s.jsx)(e.h3,{id:"\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"social_scraper/\n\u251c\u2500\u2500 scraper/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 instagram_scraper.py\n\u2502   \u251c\u2500\u2500 image_manager.py\n\u2502   \u2514\u2500\u2500 post_parser.py\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 posts.json\n\u2502   \u2514\u2500\u2500 images/\n\u2502       \u251c\u2500\u2500 profiles/\n\u2502       \u2514\u2500\u2500 posts/\n\u251c\u2500\u2500 cookies/\n\u2502   \u2514\u2500\u2500 session.json\n\u251c\u2500\u2500 config.py\n\u2514\u2500\u2500 main.py\n"})}),"\n",(0,s.jsx)(e.h3,{id:"configpy",children:"config.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import os\n\nclass Config:\n    # \ube0c\ub77c\uc6b0\uc800\n    HEADLESS = False  # \ub85c\uadf8\uc778 \uc2dc \ud5e4\ub4dc\ud480 \ubaa8\ub4dc \uad8c\uc7a5\n    TIMEOUT = 30000\n\n    # \ud0c0\uac9f \uacc4\uc815 (\uc608\uc81c)\n    TARGET_USERNAME = 'natgeo'  # National Geographic\n    MAX_POSTS = 50\n\n    # \uc774\ubbf8\uc9c0 \uc124\uc815\n    DOWNLOAD_PROFILE_PICS = True\n    DOWNLOAD_POST_IMAGES = True\n    IMAGE_DIR = 'data/images'\n    PROFILE_DIR = os.path.join(IMAGE_DIR, 'profiles')\n    POST_DIR = os.path.join(IMAGE_DIR, 'posts')\n\n    # \ub85c\uadf8\uc778 (\uc120\ud0dd\uc0ac\ud56d)\n    USE_LOGIN = False  # True\ub85c \uc124\uc815 \uc2dc \ub85c\uadf8\uc778 \ud544\uc694\n    USERNAME = os.getenv('INSTAGRAM_USERNAME')\n    PASSWORD = os.getenv('INSTAGRAM_PASSWORD')\n\n    # \ucfe0\ud0a4 \uc800\uc7a5 \uacbd\ub85c\n    COOKIE_FILE = 'cookies/session.json'\n\n    # \uc2a4\ud06c\ub864 \uc124\uc815\n    SCROLL_PAUSE = 2\n    MAX_SCROLLS = 10\n\n    @classmethod\n    def ensure_directories(cls):\n        os.makedirs(cls.PROFILE_DIR, exist_ok=True)\n        os.makedirs(cls.POST_DIR, exist_ok=True)\n        os.makedirs('cookies', exist_ok=True)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"scraperimage_managerpy",children:"scraper/image_manager.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'import requests\nfrom PIL import Image\nimport io\nimport os\nimport hashlib\nimport logging\nfrom typing import Optional\n\nlogger = logging.getLogger(__name__)\n\nclass ImageManager:\n    def __init__(self, base_dir: str):\n        self.base_dir = base_dir\n        self.session = requests.Session()\n        self.session.headers.update({\n            \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\'\n        })\n\n    def download_image(\n        self,\n        url: str,\n        save_dir: str,\n        filename: Optional[str] = None\n    ) -> Optional[str]:\n        """\uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc"""\n        try:\n            response = self.session.get(url, timeout=15)\n            response.raise_for_status()\n\n            # \uc774\ubbf8\uc9c0 \uac80\uc99d\n            img = Image.open(io.BytesIO(response.content))\n\n            # \ud30c\uc77c\uba85 \uc0dd\uc131\n            if not filename:\n                url_hash = hashlib.md5(url.encode()).hexdigest()\n                filename = f"{url_hash}.jpg"\n\n            filepath = os.path.join(save_dir, filename)\n\n            # \uc774\ubbf8\uc9c0 \uc800\uc7a5\n            if img.mode in (\'RGBA\', \'LA\'):\n                # RGB\ub85c \ubcc0\ud658\n                rgb_img = Image.new(\'RGB\', img.size, (255, 255, 255))\n                rgb_img.paste(img, mask=img.split()[-1] if \'A\' in img.mode else None)\n                img = rgb_img\n\n            img.save(filepath, \'JPEG\', quality=90)\n\n            logger.info(f"\u2705 \uc774\ubbf8\uc9c0 \uc800\uc7a5: {filename}")\n            return filepath\n\n        except Exception as e:\n            logger.error(f"\u274c \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc \uc2e4\ud328: {url} - {e}")\n            return None\n\n    def download_profile_picture(\n        self,\n        url: str,\n        username: str,\n        save_dir: str\n    ) -> Optional[str]:\n        """\ud504\ub85c\ud544 \uc0ac\uc9c4 \ub2e4\uc6b4\ub85c\ub4dc"""\n        filename = f"{username}_profile.jpg"\n        return self.download_image(url, save_dir, filename)\n\n    def download_post_images(\n        self,\n        urls: list,\n        post_id: str,\n        save_dir: str\n    ) -> list:\n        """\uac8c\uc2dc\ubb3c \uc774\ubbf8\uc9c0\ub4e4 \ub2e4\uc6b4\ub85c\ub4dc"""\n        saved_paths = []\n\n        for idx, url in enumerate(urls, 1):\n            filename = f"{post_id}_{idx}.jpg"\n            filepath = self.download_image(url, save_dir, filename)\n\n            if filepath:\n                saved_paths.append(filepath)\n\n        return saved_paths\n\n    def create_collage(self, image_paths: list, output_path: str, grid_size=(3, 3)):\n        """\uc5ec\ub7ec \uc774\ubbf8\uc9c0\ub85c \ucf5c\ub77c\uc8fc \uc0dd\uc131"""\n        if not image_paths:\n            return None\n\n        try:\n            # \uc774\ubbf8\uc9c0 \ub85c\ub4dc\n            images = [Image.open(path) for path in image_paths[:grid_size[0]*grid_size[1]]]\n\n            # \ubaa8\ub4e0 \uc774\ubbf8\uc9c0\ub97c \uac19\uc740 \ud06c\uae30\ub85c \uc870\uc815\n            target_size = (300, 300)\n            resized_images = [img.resize(target_size, Image.Resampling.LANCZOS) for img in images]\n\n            # \ucf5c\ub77c\uc8fc \uce94\ubc84\uc2a4 \uc0dd\uc131\n            rows, cols = grid_size\n            collage_width = target_size[0] * cols\n            collage_height = target_size[1] * rows\n            collage = Image.new(\'RGB\', (collage_width, collage_height), \'white\')\n\n            # \uc774\ubbf8\uc9c0 \ubc30\uce58\n            for idx, img in enumerate(resized_images):\n                row = idx // cols\n                col = idx % cols\n                x = col * target_size[0]\n                y = row * target_size[1]\n                collage.paste(img, (x, y))\n\n            # \uc800\uc7a5\n            collage.save(output_path, \'JPEG\', quality=85)\n            logger.info(f"\u2705 \ucf5c\ub77c\uc8fc \uc0dd\uc131: {output_path}")\n\n            return output_path\n\n        except Exception as e:\n            logger.error(f"\ucf5c\ub77c\uc8fc \uc0dd\uc131 \uc2e4\ud328: {e}")\n            return None\n'})}),"\n",(0,s.jsx)(e.h3,{id:"scraperpost_parserpy",children:"scraper/post_parser.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import re\nfrom typing import List, Dict\n\nclass PostParser:\n    @staticmethod\n    def extract_hashtags(text: str) -> List[str]:\n        \"\"\"\ud574\uc2dc\ud0dc\uadf8 \ucd94\ucd9c\"\"\"\n        if not text:\n            return []\n\n        pattern = r'#(\\w+)'\n        hashtags = re.findall(pattern, text)\n        return list(set(hashtags))  # \uc911\ubcf5 \uc81c\uac70\n\n    @staticmethod\n    def extract_mentions(text: str) -> List[str]:\n        \"\"\"\uba58\uc158 \ucd94\ucd9c\"\"\"\n        if not text:\n            return []\n\n        pattern = r'@(\\w+)'\n        mentions = re.findall(pattern, text)\n        return list(set(mentions))\n\n    @staticmethod\n    def parse_post_stats(stats_text: str) -> Dict:\n        \"\"\"\uc88b\uc544\uc694, \ub313\uae00 \uc218 \ud30c\uc2f1\"\"\"\n        stats = {\n            'likes': 0,\n            'comments': 0\n        }\n\n        # \uc22b\uc790 \ucd94\ucd9c (\uc608: \"1,234 likes\" \u2192 1234)\n        like_match = re.search(r'([\\d,]+)\\s*like', stats_text, re.IGNORECASE)\n        if like_match:\n            stats['likes'] = int(like_match.group(1).replace(',', ''))\n\n        comment_match = re.search(r'([\\d,]+)\\s*comment', stats_text, re.IGNORECASE)\n        if comment_match:\n            stats['comments'] = int(comment_match.group(1).replace(',', ''))\n\n        return stats\n"})}),"\n",(0,s.jsx)(e.h3,{id:"scraperinstagram_scraperpy",children:"scraper/instagram_scraper.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from playwright.sync_api import sync_playwright\nfrom typing import List, Dict\nimport logging\nimport json\nimport time\nimport random\n\nlogger = logging.getLogger(__name__)\n\nclass InstagramScraper:\n    def __init__(self, config):\n        self.config = config\n\n    def scrape_profile(self, username: str) -> Dict:\n        \"\"\"\ud504\ub85c\ud544 \ubc0f \uac8c\uc2dc\ubb3c \uc2a4\ud06c\ub798\ud551\"\"\"\n        logger.info(f\"\ud504\ub85c\ud544 \uc2a4\ud06c\ub798\ud551: @{username}\")\n\n        with sync_playwright() as p:\n            browser = p.chromium.launch(headless=self.config.HEADLESS)\n            context = browser.new_context(\n                viewport={'width': 1920, 'height': 1080},\n                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n            )\n\n            # \ucfe0\ud0a4 \ub85c\ub4dc\n            self._load_cookies(context)\n\n            page = context.new_page()\n\n            try:\n                # \ud504\ub85c\ud544 \ud398\uc774\uc9c0 \ubc29\ubb38\n                url = f'https://www.instagram.com/{username}/'\n                page.goto(url, wait_until='networkidle')\n\n                # \ub85c\uadf8\uc778 \ud544\uc694 \uc2dc\n                if self.config.USE_LOGIN and not self._is_logged_in(page):\n                    self._login(page)\n                    page.goto(url, wait_until='networkidle')\n\n                # \ud504\ub85c\ud544 \uc815\ubcf4 \ucd94\ucd9c\n                profile_data = self._extract_profile_info(page)\n\n                # \uac8c\uc2dc\ubb3c \uc2a4\ud06c\ub864 \ubc0f \uc218\uc9d1\n                posts = self._scroll_and_collect_posts(page)\n\n                profile_data['posts'] = posts\n                profile_data['total_posts_scraped'] = len(posts)\n\n                # \ucfe0\ud0a4 \uc800\uc7a5\n                self._save_cookies(context)\n\n                return profile_data\n\n            finally:\n                browser.close()\n\n    def _extract_profile_info(self, page) -> Dict:\n        \"\"\"\ud504\ub85c\ud544 \uc815\ubcf4 \ucd94\ucd9c\"\"\"\n        profile = {\n            'username': '',\n            'full_name': '',\n            'bio': '',\n            'profile_pic_url': '',\n            'followers': 0,\n            'following': 0,\n            'posts_count': 0\n        }\n\n        try:\n            # \uc0ac\uc6a9\uc790\uba85\n            username_elem = page.query_selector('header h2')\n            if username_elem:\n                profile['username'] = username_elem.inner_text()\n\n            # \uc774\ub984 \ubc0f \ubc14\uc774\uc624\n            bio_section = page.query_selector('header section')\n            if bio_section:\n                name_elem = bio_section.query_selector('span')\n                if name_elem:\n                    profile['full_name'] = name_elem.inner_text()\n\n            # \ud504\ub85c\ud544 \uc0ac\uc9c4\n            img_elem = page.query_selector('header img')\n            if img_elem:\n                profile['profile_pic_url'] = img_elem.get_attribute('src')\n\n            # \ud1b5\uacc4 (\ud314\ub85c\uc6cc, \ud314\ub85c\uc789, \uac8c\uc2dc\ubb3c \uc218)\n            stats = page.query_selector_all('header section ul li')\n            if len(stats) >= 3:\n                # \uac8c\uc2dc\ubb3c \uc218\n                posts_text = stats[0].inner_text()\n                profile['posts_count'] = self._parse_number(posts_text)\n\n                # \ud314\ub85c\uc6cc\n                followers_text = stats[1].inner_text()\n                profile['followers'] = self._parse_number(followers_text)\n\n                # \ud314\ub85c\uc789\n                following_text = stats[2].inner_text()\n                profile['following'] = self._parse_number(following_text)\n\n        except Exception as e:\n            logger.error(f\"\ud504\ub85c\ud544 \uc815\ubcf4 \ucd94\ucd9c \uc2e4\ud328: {e}\")\n\n        return profile\n\n    def _scroll_and_collect_posts(self, page) -> List[Dict]:\n        \"\"\"\ubb34\ud55c \uc2a4\ud06c\ub864\ud558\uba70 \uac8c\uc2dc\ubb3c \uc218\uc9d1\"\"\"\n        posts = []\n        last_height = 0\n\n        for scroll_count in range(self.config.MAX_SCROLLS):\n            # \ud604\uc7ac \ubcf4\uc774\ub294 \uac8c\uc2dc\ubb3c\ub4e4\n            post_elements = page.query_selector_all('article a[href*=\"/p/\"]')\n\n            for elem in post_elements:\n                try:\n                    href = elem.get_attribute('href')\n                    post_id = href.split('/p/')[1].strip('/')\n\n                    # \uc911\ubcf5 \uccb4\ud06c\n                    if any(p['post_id'] == post_id for p in posts):\n                        continue\n\n                    # \uc774\ubbf8\uc9c0 URL\n                    img_elem = elem.query_selector('img')\n                    img_url = img_elem.get_attribute('src') if img_elem else None\n\n                    posts.append({\n                        'post_id': post_id,\n                        'url': f'https://www.instagram.com{href}',\n                        'thumbnail_url': img_url\n                    })\n\n                    if len(posts) >= self.config.MAX_POSTS:\n                        break\n\n                except Exception as e:\n                    logger.error(f\"\uac8c\uc2dc\ubb3c \ud30c\uc2f1 \uc2e4\ud328: {e}\")\n                    continue\n\n            if len(posts) >= self.config.MAX_POSTS:\n                break\n\n            # \uc2a4\ud06c\ub864\n            current_height = page.evaluate('document.body.scrollHeight')\n            if current_height == last_height:\n                break\n\n            page.evaluate('window.scrollTo(0, document.body.scrollHeight)')\n            time.sleep(random.uniform(\n                self.config.SCROLL_PAUSE,\n                self.config.SCROLL_PAUSE + 1\n            ))\n\n            last_height = current_height\n\n        logger.info(f\"\uc218\uc9d1\ub41c \uac8c\uc2dc\ubb3c: {len(posts)}\uac1c\")\n        return posts\n\n    def _parse_number(self, text: str) -> int:\n        \"\"\"\uc22b\uc790 \ud30c\uc2f1 (1.2K \u2192 1200, 1.5M \u2192 1500000)\"\"\"\n        text = text.strip().split()[0]  # \uccab \ubc88\uc9f8 \ub2e8\uc5b4\ub9cc\n\n        multipliers = {'K': 1000, 'M': 1000000, 'B': 1000000000}\n\n        for suffix, multiplier in multipliers.items():\n            if suffix in text.upper():\n                number = float(text.upper().replace(suffix, ''))\n                return int(number * multiplier)\n\n        # \uc27c\ud45c \uc81c\uac70\n        return int(text.replace(',', ''))\n\n    def _login(self, page):\n        \"\"\"Instagram \ub85c\uadf8\uc778\"\"\"\n        try:\n            logger.info(\"\ub85c\uadf8\uc778 \uc911...\")\n\n            page.fill('input[name=\"username\"]', self.config.USERNAME)\n            page.fill('input[name=\"password\"]', self.config.PASSWORD)\n            page.click('button[type=\"submit\"]')\n\n            page.wait_for_load_state('networkidle')\n            time.sleep(3)\n\n            logger.info(\"\ub85c\uadf8\uc778 \uc644\ub8cc\")\n\n        except Exception as e:\n            logger.error(f\"\ub85c\uadf8\uc778 \uc2e4\ud328: {e}\")\n\n    def _is_logged_in(self, page) -> bool:\n        \"\"\"\ub85c\uadf8\uc778 \uc5ec\ubd80 \ud655\uc778\"\"\"\n        return page.query_selector('input[name=\"username\"]') is None\n\n    def _load_cookies(self, context):\n        \"\"\"\ucfe0\ud0a4 \ub85c\ub4dc\"\"\"\n        try:\n            with open(self.config.COOKIE_FILE, 'r') as f:\n                cookies = json.load(f)\n            context.add_cookies(cookies)\n            logger.info(\"\ucfe0\ud0a4 \ub85c\ub4dc \uc644\ub8cc\")\n        except FileNotFoundError:\n            logger.info(\"\uc800\uc7a5\ub41c \ucfe0\ud0a4 \uc5c6\uc74c\")\n\n    def _save_cookies(self, context):\n        \"\"\"\ucfe0\ud0a4 \uc800\uc7a5\"\"\"\n        cookies = context.cookies()\n        with open(self.config.COOKIE_FILE, 'w') as f:\n            json.dump(cookies, f)\n        logger.info(\"\ucfe0\ud0a4 \uc800\uc7a5 \uc644\ub8cc\")\n"})}),"\n",(0,s.jsx)(e.h3,{id:"mainpy",children:"main.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'import logging\nimport json\nfrom config import Config\nfrom scraper.instagram_scraper import InstagramScraper\nfrom scraper.image_manager import ImageManager\nfrom scraper.post_parser import PostParser\n\ndef setup_logger():\n    Config.ensure_directories()\n\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\'%(asctime)s - %(levelname)s - %(message)s\',\n        handlers=[\n            logging.StreamHandler()\n        ]\n    )\n\ndef main():\n    setup_logger()\n    logger = logging.getLogger(__name__)\n\n    try:\n        logger.info("="*60)\n        logger.info(f"Instagram \uc2a4\ud06c\ub798\ud37c: @{Config.TARGET_USERNAME}")\n        logger.info("="*60)\n\n        # 1. \ud504\ub85c\ud544 \uc2a4\ud06c\ub798\ud551\n        scraper = InstagramScraper(Config)\n        profile_data = scraper.scrape_profile(Config.TARGET_USERNAME)\n\n        logger.info(f"\\n\ud504\ub85c\ud544 \uc815\ubcf4:")\n        logger.info(f"  \uc774\ub984: {profile_data[\'full_name\']}")\n        logger.info(f"  \ud314\ub85c\uc6cc: {profile_data[\'followers\']:,}")\n        logger.info(f"  \ud314\ub85c\uc789: {profile_data[\'following\']:,}")\n        logger.info(f"  \uac8c\uc2dc\ubb3c: {profile_data[\'posts_count\']:,}")\n\n        # 2. \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc\n        image_manager = ImageManager(Config.IMAGE_DIR)\n\n        # \ud504\ub85c\ud544 \uc0ac\uc9c4\n        if Config.DOWNLOAD_PROFILE_PICS and profile_data[\'profile_pic_url\']:\n            logger.info("\\n\ud504\ub85c\ud544 \uc0ac\uc9c4 \ub2e4\uc6b4\ub85c\ub4dc \uc911...")\n            image_manager.download_profile_picture(\n                profile_data[\'profile_pic_url\'],\n                profile_data[\'username\'],\n                Config.PROFILE_DIR\n            )\n\n        # \uac8c\uc2dc\ubb3c \uc774\ubbf8\uc9c0\n        if Config.DOWNLOAD_POST_IMAGES:\n            logger.info(f"\\n\uac8c\uc2dc\ubb3c \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc \uc911... (\ucd1d {len(profile_data[\'posts\'])}\uac1c)")\n\n            downloaded_images = []\n\n            for post in profile_data[\'posts\'][:20]:  # \ucc98\uc74c 20\uac1c\ub9cc\n                if post.get(\'thumbnail_url\'):\n                    filepath = image_manager.download_image(\n                        post[\'thumbnail_url\'],\n                        Config.POST_DIR,\n                        f"{post[\'post_id\']}.jpg"\n                    )\n\n                    if filepath:\n                        downloaded_images.append(filepath)\n\n            logger.info(f"\u2705 {len(downloaded_images)}\uac1c \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc \uc644\ub8cc")\n\n            # \ucf5c\ub77c\uc8fc \uc0dd\uc131\n            if downloaded_images:\n                collage_path = f"{Config.IMAGE_DIR}/collage_{Config.TARGET_USERNAME}.jpg"\n                image_manager.create_collage(downloaded_images, collage_path, grid_size=(3, 3))\n\n        # 3. JSON \uc800\uc7a5\n        output_file = f\'data/{Config.TARGET_USERNAME}_profile.json\'\n        with open(output_file, \'w\', encoding=\'utf-8\') as f:\n            json.dump(profile_data, f, ensure_ascii=False, indent=2)\n\n        logger.info(f"\\n\u2705 \ub370\uc774\ud130 \uc800\uc7a5: {output_file}")\n\n        print("\\n" + "="*60)\n        print("\ud83d\udcca \uc2a4\ud06c\ub798\ud551 \uc644\ub8cc")\n        print("="*60)\n        print(f"\uc218\uc9d1\ub41c \uac8c\uc2dc\ubb3c: {len(profile_data[\'posts\'])}\uac1c")\n        print(f"\ub2e4\uc6b4\ub85c\ub4dc\ub41c \uc774\ubbf8\uc9c0: {len(downloaded_images) if downloaded_images else 0}\uac1c")\n        print("="*60)\n\n    except Exception as e:\n        logger.error(f"\u274c \uc5d0\ub7ec \ubc1c\uc0dd: {e}", exc_info=True)\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-\uc774\ubbf8\uc9c0-\uae30\ub2a5",children:"\ud83d\uddbc\ufe0f \uc774\ubbf8\uc9c0 \uae30\ub2a5"}),"\n",(0,s.jsx)(e.h3,{id:"1-\ud504\ub85c\ud544-\uc0ac\uc9c4-\ub2e4\uc6b4\ub85c\ub4dc",children:"1. \ud504\ub85c\ud544 \uc0ac\uc9c4 \ub2e4\uc6b4\ub85c\ub4dc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"image_manager.download_profile_picture(\n    url='https://instagram.com/profile.jpg',\n    username='natgeo',\n    save_dir='data/images/profiles'\n)\n# \uc800\uc7a5: natgeo_profile.jpg\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-\uac8c\uc2dc\ubb3c-\uc774\ubbf8\uc9c0-\ub2e4\uc6b4\ub85c\ub4dc",children:"2. \uac8c\uc2dc\ubb3c \uc774\ubbf8\uc9c0 \ub2e4\uc6b4\ub85c\ub4dc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# \ub2e8\uc77c \uc774\ubbf8\uc9c0\nimage_manager.download_image(url, save_dir, 'post_123.jpg')\n\n# \uc5ec\ub7ec \uc774\ubbf8\uc9c0\nimage_manager.download_post_images(\n    urls=['url1', 'url2', 'url3'],\n    post_id='ABC123',\n    save_dir='data/images/posts'\n)\n# \uc800\uc7a5: ABC123_1.jpg, ABC123_2.jpg, ABC123_3.jpg\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-\ucf5c\ub77c\uc8fc-\uc0dd\uc131",children:"3. \ucf5c\ub77c\uc8fc \uc0dd\uc131"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# 9\uac1c \uc774\ubbf8\uc9c0\ub97c 3x3 \uadf8\ub9ac\ub4dc\ub85c\nimage_manager.create_collage(\n    image_paths=['img1.jpg', 'img2.jpg', ...],\n    output_path='collage.jpg',\n    grid_size=(3, 3)\n)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"-\ub85c\uadf8\uc778-\uad00\ub9ac",children:"\ud83d\udd10 \ub85c\uadf8\uc778 \uad00\ub9ac"}),"\n",(0,s.jsx)(e.h3,{id:"\uc138\uc158-\ucfe0\ud0a4-\uc800\uc7a5",children:"\uc138\uc158 \ucfe0\ud0a4 \uc800\uc7a5"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\uccab \ub85c\uadf8\uc778 \ud6c4 \ucfe0\ud0a4 \uc800\uc7a5"}),"\n",(0,s.jsx)(e.li,{children:"\ub2e4\uc74c \uc2e4\ud589 \uc2dc \uc790\ub3d9 \ub85c\uadf8\uc778"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\ud658\uacbd-\ubcc0\uc218-\uc0ac\uc6a9",children:"\ud658\uacbd \ubcc0\uc218 \uc0ac\uc6a9"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# .env \ud30c\uc77c\nINSTAGRAM_USERNAME=your_username\nINSTAGRAM_PASSWORD=your_password\n"})}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",children:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Instagram \uc774\uc6a9\uc57d\uad00 \uc900\uc218"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uc18d\ub3c4 \uc81c\ud55c"}),": \ub108\ubb34 \ube60\ub978 \uc2a4\ud06c\ub798\ud551 \uae08\uc9c0"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\uac1c\uc778\uc815\ubcf4 \ubcf4\ud638"}),": \uc218\uc9d1\ud55c \ub370\uc774\ud130 \uad00\ub9ac \uc8fc\uc758"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\ubd07 \ud0d0\uc9c0"}),": \uc138\uc158 \uad00\ub9ac \ubc0f \ub79c\ub364 \ub300\uae30 \uc0ac\uc6a9"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,s.jsx)(e.a,{href:"./scenario-04-job-board",children:"\ucc44\uc6a9 \uacf5\uace0 \ud06c\ub864\ub7ec"})]})]})}function c(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(g,{...n})}):g(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var r=i(6540);const s={},t=r.createContext(s);function a(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);