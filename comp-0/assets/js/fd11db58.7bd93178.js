"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1702],{4151:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>v,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rabbitmq/examples/scenario-03-event-driven","title":"\uc2dc\ub098\ub9ac\uc624 3: \uc774\ubca4\ud2b8 \uae30\ubc18 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4","description":"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac04 \uc774\ubca4\ud2b8 \uae30\ubc18 \ud1b5\uc2e0\uc744 \uad6c\ud604\ud574\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/examples/scenario-03-event-driven.md","sourceDirName":"rabbitmq/examples","slug":"/rabbitmq/examples/scenario-03-event-driven","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-03-event-driven","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/examples/scenario-03-event-driven.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"rabbitmqSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 2: \uc54c\ub9bc \uc2dc\uc2a4\ud15c","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-02-notification-system"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 4: \ubd84\uc0b0 \uc791\uc5c5 \uc2a4\ucf00\uc904\ub7ec","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-04-job-scheduler"}}');var i=t(4848),s=t(8453);const a={sidebar_position:4},o="\uc2dc\ub098\ub9ac\uc624 3: \uc774\ubca4\ud2b8 \uae30\ubc18 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4",d={},c=[{value:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85",id:"-\uc0c1\ud669-\uc124\uba85",level:2},{value:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98",id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"\ud83d\udcdd \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"\uc774\ubca4\ud2b8 \ubaa8\ub378",id:"\uc774\ubca4\ud2b8-\ubaa8\ub378",level:3},{value:"Event Bus",id:"event-bus",level:3},{value:"Order Service",id:"order-service",level:3},{value:"Payment Service",id:"payment-service",level:3},{value:"Inventory Service",id:"inventory-service",level:3},{value:"Notification Service",id:"notification-service",level:3},{value:"Audit Service",id:"audit-service",level:3},{value:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc",id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",level:2},{value:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95",id:"-\uc2e4\ud589-\ubc29\ubc95",level:2},{value:"1. \ubaa8\ub4e0 \uc11c\ube44\uc2a4 \uc2e4\ud589",id:"1-\ubaa8\ub4e0-\uc11c\ube44\uc2a4-\uc2e4\ud589",level:3},{value:"2. \uc608\uc0c1 \ucd9c\ub825",id:"2-\uc608\uc0c1-\ucd9c\ub825",level:3},{value:"\ud83d\udca1 \ud575\uc2ec \ud328\ud134",id:"-\ud575\uc2ec-\ud328\ud134",level:2},{value:"1. Saga Pattern (\ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158)",id:"1-saga-pattern-\ubd84\uc0b0-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"2. Event Sourcing",id:"2-event-sourcing",level:3},{value:"3. CQRS (Command Query Responsibility Segregation)",id:"3-cqrs-command-query-responsibility-segregation",level:3},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-3-\uc774\ubca4\ud2b8-\uae30\ubc18-\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4",children:"\uc2dc\ub098\ub9ac\uc624 3: \uc774\ubca4\ud2b8 \uae30\ubc18 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4"})}),"\n",(0,i.jsx)(n.p,{children:"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac04 \uc774\ubca4\ud2b8 \uae30\ubc18 \ud1b5\uc2e0\uc744 \uad6c\ud604\ud574\ubd05\uc2dc\ub2e4!"}),"\n",(0,i.jsx)(n.h2,{id:"-\uc0c1\ud669-\uc124\uba85",children:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85"}),"\n",(0,i.jsx)(n.p,{children:"\uc804\uc790\uc0c1\uac70\ub798 \ud50c\ub7ab\ud3fc\uc758 \uc8fc\ubb38 \ucc98\ub9ac \uacfc\uc815:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Order Service"}),": \uc8fc\ubb38 \uc0dd\uc131"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Payment Service"}),": \uacb0\uc81c \ucc98\ub9ac"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inventory Service"}),": \uc7ac\uace0 \ucc28\uac10"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shipping Service"}),": \ubc30\uc1a1 \uc900\ube44"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notification Service"}),": \uc54c\ub9bc \ubc1c\uc1a1"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\uac01 \uc11c\ube44\uc2a4\ub294 \ub3c5\ub9bd\uc801\uc73c\ub85c \ubc30\ud3ec\ub418\uba70, \uc774\ubca4\ud2b8\ub97c \ud1b5\ud574 \ud1b5\uc2e0\ud569\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",children:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Order Service \u2192 [Topic Exchange: events]\n                       \u2193\n         order.created.# \u2500\u2500\u2192 Payment Service\n         order.paid.#    \u2500\u2500\u2192 Inventory Service\n         order.shipped.# \u2500\u2500\u2192 Notification Service\n         #               \u2500\u2500\u2192 Audit Service (\ubaa8\ub4e0 \uc774\ubca4\ud2b8)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud328\ud134"}),": Event-Driven Architecture (Topic Exchange)"]}),"\n",(0,i.jsx)(n.h2,{id:"-\uad6c\ud604",children:"\ud83d\udcdd \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"\uc774\ubca4\ud2b8-\ubaa8\ub378",children:"\uc774\ubca4\ud2b8 \ubaa8\ub378"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# events.py\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime\nfrom typing import Dict, Any, List\nfrom enum import Enum\nimport json\n\nclass EventType(str, Enum):\n    \"\"\"\uc774\ubca4\ud2b8 \ud0c0\uc785\"\"\"\n    ORDER_CREATED = 'order.created'\n    ORDER_PAID = 'order.paid'\n    ORDER_FAILED = 'order.failed'\n    ORDER_SHIPPED = 'order.shipped'\n    INVENTORY_RESERVED = 'inventory.reserved'\n    INVENTORY_RELEASED = 'inventory.released'\n\n@dataclass\nclass Event:\n    \"\"\"\uae30\ubcf8 \uc774\ubca4\ud2b8\"\"\"\n    event_id: str\n    event_type: str\n    timestamp: str\n    source_service: str\n    data: Dict[str, Any]\n    correlation_id: str = None  # \ucd94\uc801\uc6a9\n\n    def __post_init__(self):\n        if self.timestamp is None:\n            self.timestamp = datetime.now().isoformat()\n\n    def to_json(self) -> str:\n        return json.dumps(asdict(self))\n\n    @classmethod\n    def from_json(cls, json_str: str):\n        return cls(**json.loads(json_str))\n\n@dataclass\nclass OrderCreatedEvent(Event):\n    \"\"\"\uc8fc\ubb38 \uc0dd\uc131 \uc774\ubca4\ud2b8\"\"\"\n\n    @staticmethod\n    def create(order_id: str, user_id: int, items: List[Dict], total: float):\n        return Event(\n            event_id=f'evt_{datetime.now().timestamp()}',\n            event_type=EventType.ORDER_CREATED,\n            timestamp=datetime.now().isoformat(),\n            source_service='order-service',\n            data={\n                'order_id': order_id,\n                'user_id': user_id,\n                'items': items,\n                'total': total\n            }\n        )\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-bus",children:"Event Bus"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# event_bus.py\nimport pika\nfrom events import Event\n\nclass EventBus:\n    """\uc774\ubca4\ud2b8 \ubc84\uc2a4"""\n\n    def __init__(self, host=\'localhost\'):\n        self.host = host\n        self.exchange = \'events\'\n\n    def publish(self, event: Event):\n        """\uc774\ubca4\ud2b8 \ubc1c\ud589"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        # Topic Exchange \uc120\uc5b8\n        channel.exchange_declare(\n            exchange=self.exchange,\n            exchange_type=\'topic\',\n            durable=True\n        )\n\n        # Routing Key = event_type (\uc608: order.created)\n        channel.basic_publish(\n            exchange=self.exchange,\n            routing_key=event.event_type,\n            body=event.to_json(),\n            properties=pika.BasicProperties(\n                delivery_mode=2,\n                content_type=\'application/json\',\n                correlation_id=event.correlation_id\n            )\n        )\n\n        print(f" [\u2192] Event published: {event.event_type} "\n              f"(id: {event.event_id})")\n\n        connection.close()\n\n    def subscribe(\n        self,\n        service_name: str,\n        patterns: list,\n        callback\n    ):\n        """\uc774\ubca4\ud2b8 \uad6c\ub3c5"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.exchange_declare(\n            exchange=self.exchange,\n            exchange_type=\'topic\',\n            durable=True\n        )\n\n        # \uc11c\ube44\uc2a4\ubcc4 \ud050 \uc0dd\uc131\n        queue_name = f\'{service_name}_queue\'\n        channel.queue_declare(queue=queue_name, durable=True)\n\n        # \ud328\ud134\ubcc4\ub85c \ubc14\uc778\ub529\n        for pattern in patterns:\n            channel.queue_bind(\n                exchange=self.exchange,\n                queue=queue_name,\n                routing_key=pattern\n            )\n\n            print(f" [*] {service_name} subscribed to: {pattern}")\n\n        channel.basic_qos(prefetch_count=1)\n\n        channel.basic_consume(\n            queue=queue_name,\n            on_message_callback=callback\n        )\n\n        print(f\' [*] {service_name} waiting for events...\')\n        channel.start_consuming()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"order-service",children:"Order Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# order_service.py\nfrom event_bus import EventBus\nfrom events import OrderCreatedEvent, Event, EventType\nimport uuid\n\nclass OrderService:\n    \"\"\"\uc8fc\ubb38 \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        self.event_bus = EventBus()\n\n    def create_order(self, user_id: int, items: list):\n        \"\"\"\uc8fc\ubb38 \uc0dd\uc131\"\"\"\n        order_id = f'ORD-{uuid.uuid4().hex[:8].upper()}'\n\n        # \uc8fc\ubb38 \ucd1d\uc561 \uacc4\uc0b0\n        total = sum(item['price'] * item['quantity'] for item in items)\n\n        print(f\" [ORDER] Creating order: {order_id}\")\n        print(f\"   User: {user_id}\")\n        print(f\"   Items: {len(items)}\")\n        print(f\"   Total: ${total:.2f}\")\n\n        # \uc774\ubca4\ud2b8 \ubc1c\ud589\n        event = OrderCreatedEvent.create(\n            order_id=order_id,\n            user_id=user_id,\n            items=items,\n            total=total\n        )\n\n        self.event_bus.publish(event)\n\n        print(f\" [ORDER] Order created successfully\")\n\n        return order_id\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    service = OrderService()\n\n    # \uc8fc\ubb38 \uc0dd\uc131\n    order_id = service.create_order(\n        user_id=1001,\n        items=[\n            {'product_id': 'P001', 'name': 'Laptop', 'price': 1200.00, 'quantity': 1},\n            {'product_id': 'P002', 'name': 'Mouse', 'price': 25.00, 'quantity': 2},\n        ]\n    )\n"})}),"\n",(0,i.jsx)(n.h3,{id:"payment-service",children:"Payment Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# payment_service.py\nimport pika\nfrom event_bus import EventBus\nfrom events import Event, EventType\nimport time\nimport random\n\nclass PaymentService:\n    \"\"\"\uacb0\uc81c \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        self.event_bus = EventBus()\n\n    def process_payment(self, event: Event):\n        \"\"\"\uacb0\uc81c \ucc98\ub9ac\"\"\"\n        order_id = event.data['order_id']\n        total = event.data['total']\n\n        print(f\" [PAYMENT] Processing payment for {order_id}\")\n        print(f\"   Amount: ${total:.2f}\")\n\n        # \uacb0\uc81c \ucc98\ub9ac (\uc2dc\ubbac\ub808\uc774\uc158)\n        time.sleep(1)\n\n        # 80% \ud655\ub960\ub85c \uc131\uacf5\n        success = random.random() < 0.8\n\n        if success:\n            print(f\" [PAYMENT] \u2713 Payment successful\")\n\n            # \uacb0\uc81c \uc644\ub8cc \uc774\ubca4\ud2b8 \ubc1c\ud589\n            paid_event = Event(\n                event_id=f'evt_{time.time()}',\n                event_type=EventType.ORDER_PAID,\n                timestamp=time.time(),\n                source_service='payment-service',\n                data={\n                    'order_id': order_id,\n                    'amount': total,\n                    'payment_id': f'PAY-{order_id}'\n                },\n                correlation_id=event.correlation_id\n            )\n\n            self.event_bus.publish(paid_event)\n\n        else:\n            print(f\" [PAYMENT] \u2717 Payment failed\")\n\n            # \uacb0\uc81c \uc2e4\ud328 \uc774\ubca4\ud2b8 \ubc1c\ud589\n            failed_event = Event(\n                event_id=f'evt_{time.time()}',\n                event_type=EventType.ORDER_FAILED,\n                timestamp=time.time(),\n                source_service='payment-service',\n                data={\n                    'order_id': order_id,\n                    'reason': 'Payment declined'\n                },\n                correlation_id=event.correlation_id\n            )\n\n            self.event_bus.publish(failed_event)\n\n    def callback(self, ch, method, properties, body):\n        \"\"\"\uc774\ubca4\ud2b8 \ucf5c\ubc31\"\"\"\n        event = Event.from_json(body.decode())\n\n        if event.event_type == EventType.ORDER_CREATED:\n            self.process_payment(event)\n\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        \"\"\"\uc11c\ube44\uc2a4 \uc2dc\uc791\"\"\"\n        self.event_bus.subscribe(\n            service_name='payment-service',\n            patterns=['order.created'],\n            callback=self.callback\n        )\n\nif __name__ == '__main__':\n    service = PaymentService()\n\n    try:\n        service.start()\n    except KeyboardInterrupt:\n        print('\\nPayment Service stopped')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"inventory-service",children:"Inventory Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# inventory_service.py\nimport pika\nfrom event_bus import EventBus\nfrom events import Event, EventType\nimport time\n\nclass InventoryService:\n    """\uc7ac\uace0 \uc11c\ube44\uc2a4"""\n\n    def __init__(self):\n        self.event_bus = EventBus()\n        self.inventory = {\n            \'P001\': 50,\n            \'P002\': 100,\n            \'P003\': 30\n        }\n\n    def reserve_inventory(self, event: Event):\n        """\uc7ac\uace0 \uc608\uc57d"""\n        order_id = event.data[\'order_id\']\n        items = event.data[\'items\']\n\n        print(f" [INVENTORY] Reserving items for {order_id}")\n\n        # \uc7ac\uace0 \ud655\uc778 \ubc0f \ucc28\uac10\n        for item in items:\n            product_id = item[\'product_id\']\n            quantity = item[\'quantity\']\n\n            if product_id in self.inventory:\n                if self.inventory[product_id] >= quantity:\n                    self.inventory[product_id] -= quantity\n                    print(f"   \u2713 Reserved {quantity}x {product_id} "\n                          f"(remaining: {self.inventory[product_id]})")\n                else:\n                    print(f"   \u2717 Insufficient stock for {product_id}")\n            else:\n                print(f"   \u2717 Product {product_id} not found")\n\n        # \uc7ac\uace0 \uc608\uc57d \uc774\ubca4\ud2b8 \ubc1c\ud589\n        reserved_event = Event(\n            event_id=f\'evt_{time.time()}\',\n            event_type=EventType.INVENTORY_RESERVED,\n            timestamp=time.time(),\n            source_service=\'inventory-service\',\n            data={\n                \'order_id\': order_id,\n                \'items\': items\n            },\n            correlation_id=event.correlation_id\n        )\n\n        self.event_bus.publish(reserved_event)\n\n    def callback(self, ch, method, properties, body):\n        """\uc774\ubca4\ud2b8 \ucf5c\ubc31"""\n        event = Event.from_json(body.decode())\n\n        if event.event_type == EventType.ORDER_PAID:\n            self.reserve_inventory(event)\n\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        """\uc11c\ube44\uc2a4 \uc2dc\uc791"""\n        self.event_bus.subscribe(\n            service_name=\'inventory-service\',\n            patterns=[\'order.paid\'],\n            callback=self.callback\n        )\n\nif __name__ == \'__main__\':\n    service = InventoryService()\n\n    try:\n        service.start()\n    except KeyboardInterrupt:\n        print(\'\\nInventory Service stopped\')\n'})}),"\n",(0,i.jsx)(n.h3,{id:"notification-service",children:"Notification Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# notification_service.py\nimport pika\nfrom event_bus import EventBus\nfrom events import Event, EventType\n\nclass NotificationService:\n    """\uc54c\ub9bc \uc11c\ube44\uc2a4"""\n\n    def __init__(self):\n        self.event_bus = EventBus()\n\n    def send_notification(self, event: Event):\n        """\uc54c\ub9bc \ubc1c\uc1a1"""\n        order_id = event.data.get(\'order_id\')\n        event_type = event.event_type\n\n        print(f" [NOTIFICATION] Sending notification")\n        print(f"   Order: {order_id}")\n        print(f"   Event: {event_type}")\n\n        # \uc774\ubca4\ud2b8\ubcc4 \uc54c\ub9bc \uba54\uc2dc\uc9c0\n        messages = {\n            EventType.ORDER_CREATED: f"\uc8fc\ubb38\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4: {order_id}",\n            EventType.ORDER_PAID: f"\uacb0\uc81c\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4: {order_id}",\n            EventType.ORDER_FAILED: f"\uc8fc\ubb38\uc774 \uc2e4\ud328\ud588\uc2b5\ub2c8\ub2e4: {order_id}",\n            EventType.ORDER_SHIPPED: f"\uc0c1\ud488\uc774 \ubc1c\uc1a1\ub418\uc5c8\uc2b5\ub2c8\ub2e4: {order_id}",\n        }\n\n        message = messages.get(event_type, "\uc8fc\ubb38 \uc0c1\ud0dc\uac00 \uc5c5\ub370\uc774\ud2b8\ub418\uc5c8\uc2b5\ub2c8\ub2e4")\n\n        print(f"   \ud83d\udce7 Email: {message}")\n        print(f"   \ud83d\udcf1 Push: {message}")\n        print()\n\n    def callback(self, ch, method, properties, body):\n        """\uc774\ubca4\ud2b8 \ucf5c\ubc31"""\n        event = Event.from_json(body.decode())\n\n        self.send_notification(event)\n\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        """\uc11c\ube44\uc2a4 \uc2dc\uc791"""\n        # \ubaa8\ub4e0 \uc8fc\ubb38 \uad00\ub828 \uc774\ubca4\ud2b8 \uad6c\ub3c5\n        self.event_bus.subscribe(\n            service_name=\'notification-service\',\n            patterns=[\'order.#\'],\n            callback=self.callback\n        )\n\nif __name__ == \'__main__\':\n    service = NotificationService()\n\n    try:\n        service.start()\n    except KeyboardInterrupt:\n        print(\'\\nNotification Service stopped\')\n'})}),"\n",(0,i.jsx)(n.h3,{id:"audit-service",children:"Audit Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# audit_service.py\nimport pika\nfrom event_bus import EventBus\nfrom events import Event\nimport json\n\nclass AuditService:\n    \"\"\"\uac10\uc0ac \uc11c\ube44\uc2a4\"\"\"\n\n    def __init__(self):\n        self.event_bus = EventBus()\n\n    def log_event(self, event: Event):\n        \"\"\"\uc774\ubca4\ud2b8 \ub85c\uae45\"\"\"\n        # \ud30c\uc77c\uc5d0 \uae30\ub85d\n        with open('audit.log', 'a', encoding='utf-8') as f:\n            log_entry = {\n                'event_id': event.event_id,\n                'event_type': event.event_type,\n                'timestamp': event.timestamp,\n                'source': event.source_service,\n                'data': event.data\n            }\n            f.write(json.dumps(log_entry, ensure_ascii=False) + '\\n')\n\n        print(f\" [AUDIT] Logged: {event.event_type} from {event.source_service}\")\n\n    def callback(self, ch, method, properties, body):\n        \"\"\"\uc774\ubca4\ud2b8 \ucf5c\ubc31\"\"\"\n        event = Event.from_json(body.decode())\n\n        self.log_event(event)\n\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        \"\"\"\uc11c\ube44\uc2a4 \uc2dc\uc791\"\"\"\n        # \ubaa8\ub4e0 \uc774\ubca4\ud2b8 \uad6c\ub3c5\n        self.event_bus.subscribe(\n            service_name='audit-service',\n            patterns=['#'],\n            callback=self.callback\n        )\n\nif __name__ == '__main__':\n    service = AuditService()\n\n    try:\n        service.start()\n    except KeyboardInterrupt:\n        print('\\nAudit Service stopped')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",children:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# test_event_driven.py\nimport pytest\nimport time\nfrom order_service import OrderService\nfrom event_bus import EventBus\nfrom events import Event\n\nclass TestEventDriven:\n    \"\"\"\uc774\ubca4\ud2b8 \uae30\ubc18 \uc544\ud0a4\ud14d\ucc98 \ud14c\uc2a4\ud2b8\"\"\"\n\n    @pytest.fixture\n    def event_bus(self):\n        return EventBus()\n\n    def test_order_flow(self, event_bus):\n        \"\"\"\uc804\uccb4 \uc8fc\ubb38 \ud750\ub984 \ud14c\uc2a4\ud2b8\"\"\"\n        received_events = []\n\n        def callback(ch, method, properties, body):\n            event = Event.from_json(body.decode())\n            received_events.append(event.event_type)\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n\n        # \uc774\ubca4\ud2b8 \uad6c\ub3c5\n        import threading\n        t = threading.Thread(\n            target=event_bus.subscribe,\n            args=('test-service', ['#'], callback)\n        )\n        t.daemon = True\n        t.start()\n\n        time.sleep(1)\n\n        # \uc8fc\ubb38 \uc0dd\uc131\n        order_service = OrderService()\n        order_service.create_order(\n            user_id=1001,\n            items=[{'product_id': 'P001', 'price': 100, 'quantity': 1}]\n        )\n\n        time.sleep(2)\n\n        # order.created \uc774\ubca4\ud2b8 \ud655\uc778\n        assert 'order.created' in received_events\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\uc2e4\ud589-\ubc29\ubc95",children:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95"}),"\n",(0,i.jsx)(n.h3,{id:"1-\ubaa8\ub4e0-\uc11c\ube44\uc2a4-\uc2e4\ud589",children:"1. \ubaa8\ub4e0 \uc11c\ube44\uc2a4 \uc2e4\ud589"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 1 - Payment Service\npython payment_service.py\n\n# \ud130\ubbf8\ub110 2 - Inventory Service\npython inventory_service.py\n\n# \ud130\ubbf8\ub110 3 - Notification Service\npython notification_service.py\n\n# \ud130\ubbf8\ub110 4 - Audit Service\npython audit_service.py\n\n# \ud130\ubbf8\ub110 5 - Order Service (\uc8fc\ubb38 \uc0dd\uc131)\npython order_service.py\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-\uc608\uc0c1-\ucd9c\ub825",children:"2. \uc608\uc0c1 \ucd9c\ub825"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Payment Service\n[PAYMENT] Processing payment for ORD-A1B2C3D4\n[PAYMENT] \u2713 Payment successful\n[\u2192] Event published: order.paid\n\n# Inventory Service\n[INVENTORY] Reserving items for ORD-A1B2C3D4\n  \u2713 Reserved 1x P001 (remaining: 49)\n[\u2192] Event published: inventory.reserved\n\n# Notification Service\n[NOTIFICATION] Sending notification\n  \ud83d\udce7 Email: \uc8fc\ubb38\uc774 \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4\n[NOTIFICATION] Sending notification\n  \ud83d\udce7 Email: \uacb0\uc81c\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4\n\n# Audit Service\n[AUDIT] Logged: order.created from order-service\n[AUDIT] Logged: order.paid from payment-service\n[AUDIT] Logged: inventory.reserved from inventory-service\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ud575\uc2ec-\ud328\ud134",children:"\ud83d\udca1 \ud575\uc2ec \ud328\ud134"}),"\n",(0,i.jsx)(n.h3,{id:"1-saga-pattern-\ubd84\uc0b0-\ud2b8\ub79c\uc7ad\uc158",children:"1. Saga Pattern (\ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \uac01 \uc11c\ube44\uc2a4\ub294 \uc790\uccb4 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac\n# \uc2e4\ud328 \uc2dc \ubcf4\uc0c1 \ud2b8\ub79c\uc7ad\uc158 (Compensating Transaction)\n\nif payment_failed:\n    # \uc7ac\uace0 \uc608\uc57d \ucde8\uc18c \uc774\ubca4\ud2b8 \ubc1c\ud589\n    event_bus.publish(Event(\n        event_type='inventory.release',\n        data={'order_id': order_id}\n    ))\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-event-sourcing",children:"2. Event Sourcing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \ubaa8\ub4e0 \uc0c1\ud0dc \ubcc0\uacbd\uc744 \uc774\ubca4\ud2b8\ub85c \uae30\ub85d\n# \uc774\ubca4\ud2b8 \ub85c\uadf8\ub97c \uc7ac\uc0dd\ud558\uc5ec \uc0c1\ud0dc \ubcf5\uc6d0 \uac00\ub2a5\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-cqrs-command-query-responsibility-segregation",children:"3. CQRS (Command Query Responsibility Segregation)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \uba85\ub839(Command)\uacfc \uc870\ud68c(Query) \ubd84\ub9ac\n# Event\ub97c \ud1b5\ud574 Read Model \uc5c5\ub370\uc774\ud2b8\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Topic Exchange"}),": \uc774\ubca4\ud2b8 \ud0c0\uc785\ubcc4 \ub77c\uc6b0\ud305"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ub290\uc2a8\ud55c \uacb0\ud569"}),": \uc11c\ube44\uc2a4 \uac04 \uc9c1\uc811 \uc758\uc874\uc131 \uc5c6\uc74c"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ud655\uc7a5\uc131"}),": \uc11c\ube44\uc2a4 \ub3c5\ub9bd \ubc30\ud3ec \ubc0f \ud655\uc7a5"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ucd94\uc801\uc131"}),": Correlation ID\ub85c \uc804\uccb4 \ud750\ub984 \ucd94\uc801"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.a,{href:"./scenario-04-job-scheduler",children:"\uc2dc\ub098\ub9ac\uc624 4: \ubd84\uc0b0 \uc791\uc5c5 \uc2a4\ucf00\uc904\ub7ec"})]})]})}function v(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);