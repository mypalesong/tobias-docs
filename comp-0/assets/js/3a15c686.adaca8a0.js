"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[6324],{7888:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"fastapi/examples/scenario-11-search-engine","title":"\uc2dc\ub098\ub9ac\uc624 11: \uac80\uc0c9 \uc5d4\uc9c4 API","description":"Elasticsearch\ub97c \ud65c\uc6a9\ud55c \uac15\ub825\ud55c \uac80\uc0c9 \uc5d4\uc9c4\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-11-search-engine.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-11-search-engine","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-11-search-engine","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-11-search-engine.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 10: \uc54c\ub9bc \uc2dc\uc2a4\ud15c","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-10-notification-system"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 12: GraphQL API","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-12-graphql-api"}}');var r=s(4848),i=s(8453);const a={sidebar_position:12},d="\uc2dc\ub098\ub9ac\uc624 11: \uac80\uc0c9 \uc5d4\uc9c4 API",o={},l=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"elasticsearch_client.py",id:"elasticsearch_clientpy",level:3},{value:"search_analytics.py",id:"search_analyticspy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"docker-compose.yml",id:"docker-composeyml",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"\uc804\ubb38 \uac80\uc0c9 (Full-text Search)",id:"\uc804\ubb38-\uac80\uc0c9-full-text-search",level:3},{value:"\ud328\uc2ef \uac80\uc0c9 (Faceted Search)",id:"\ud328\uc2ef-\uac80\uc0c9-faceted-search",level:3},{value:"\ud558\uc774\ub77c\uc774\ud305",id:"\ud558\uc774\ub77c\uc774\ud305",level:3},{value:"\uc790\ub3d9\uc644\uc131",id:"\uc790\ub3d9\uc644\uc131",level:3},{value:"\uac80\uc0c9 \ubd84\uc11d",id:"\uac80\uc0c9-\ubd84\uc11d",level:3},{value:"\ud83d\udcda \ud559\uc2b5 \uc644\ub8cc!",id:"-\ud559\uc2b5-\uc644\ub8cc",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-11-\uac80\uc0c9-\uc5d4\uc9c4-api",children:"\uc2dc\ub098\ub9ac\uc624 11: \uac80\uc0c9 \uc5d4\uc9c4 API"})}),"\n",(0,r.jsx)(n.p,{children:"Elasticsearch\ub97c \ud65c\uc6a9\ud55c \uac15\ub825\ud55c \uac80\uc0c9 \uc5d4\uc9c4\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 \uc804\ubb38 \uac80\uc0c9 (Full-text Search)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc790\ub3d9\uc644\uc131 (Autocomplete)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud328\uc2ef \uac80\uc0c9 (Faceted Search)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud558\uc774\ub77c\uc774\ud305"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc720\uc0ac \ubb38\uc11c \uac80\uc0c9"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uac80\uc0c9 \uc81c\uc548 (Did you mean?)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uac80\uc0c9 \ubd84\uc11d (\uc778\uae30 \uac80\uc0c9\uc5b4)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud544\ud130\ub9c1 \ubc0f \uc815\ub82c"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"search-engine/\n\u251c\u2500\u2500 main.py                 # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n\u251c\u2500\u2500 models.py               # DB \ubaa8\ub378 (Product, SearchLog)\n\u251c\u2500\u2500 schemas.py              # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py             # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 elasticsearch_client.py # Elasticsearch \ud074\ub77c\uc774\uc5b8\ud2b8\n\u251c\u2500\u2500 search_service.py       # \uac80\uc0c9 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n\u251c\u2500\u2500 indexer.py              # \ubb38\uc11c \uc778\ub371\uc2f1\n\u2514\u2500\u2500 requirements.txt        # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant U as User\n    participant API as FastAPI\n    participant SS as SearchService\n    participant ES as Elasticsearch\n    participant DB as Database\n\n    Note over U,DB: 1. \uc804\ubb38 \uac80\uc0c9\n    U->>API: GET /search?q=laptop&category=electronics\n    API->>SS: search(query, filters)\n    SS->>ES: Search query with filters, highlighting\n    ES--\x3e>SS: Search results + highlights + aggregations\n    SS->>DB: INSERT search_log\n    SS--\x3e>API: Results with facets\n    API--\x3e>U: 200 OK + Results\n\n    Note over U,DB: 2. \uc790\ub3d9\uc644\uc131\n    U->>API: GET /autocomplete?q=lap\n    API->>SS: autocomplete(prefix)\n    SS->>ES: Prefix query with completion suggester\n    ES--\x3e>SS: Suggested completions\n    SS--\x3e>API: Suggestions\n    API--\x3e>U: 200 OK + ["laptop", "laparoscopy", ...]\n\n    Note over U,DB: 3. \ubb38\uc11c \uc778\ub371\uc2f1\n    API->>DB: INSERT/UPDATE product\n    DB--\x3e>API: Product saved\n    API->>SS: index_document(product)\n    SS->>ES: Index/Update document\n    ES--\x3e>SS: Indexed\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,r.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, DateTime, Text, Float, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\n\nclass Product(Base):\n    """\uc0c1\ud488"""\n    __tablename__ = "products"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, index=True)\n    description = Column(Text)\n    category = Column(String, index=True)\n    brand = Column(String, index=True)\n    price = Column(Float)\n    stock = Column(Integer)\n    tags = Column(String)  # \uc27c\ud45c\ub85c \uad6c\ubd84\ub41c \ud0dc\uadf8\n\n    # \uac80\uc0c9 \ucd5c\uc801\ud654\n    search_keywords = Column(Text)  # \ucd94\uac00 \uac80\uc0c9 \ud0a4\uc6cc\ub4dc\n\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\nclass SearchLog(Base):\n    """\uac80\uc0c9 \ub85c\uadf8"""\n    __tablename__ = "search_logs"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\'users.id\'), nullable=True)\n    query = Column(String, index=True)\n    filters = Column(Text)  # JSON\n    results_count = Column(Integer)\n    clicked_result_id = Column(Integer, nullable=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)\n\n    user = relationship("User")\n\nclass SearchSuggestion(Base):\n    """\uac80\uc0c9 \uc81c\uc548"""\n    __tablename__ = "search_suggestions"\n\n    id = Column(Integer, primary_key=True)\n    query = Column(String, unique=True, index=True)\n    suggestion = Column(String)\n    count = Column(Integer, default=1)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"elasticsearch_clientpy",children:"elasticsearch_client.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from elasticsearch import Elasticsearch\nfrom typing import List, Dict, Optional\nimport os\n\nclass ElasticsearchClient:\n    def __init__(self):\n        self.es = Elasticsearch(\n            [os.getenv(\'ELASTICSEARCH_URL\', \'http://localhost:9200\')]\n        )\n        self.index_name = "products"\n        self._create_index()\n\n    def _create_index(self):\n        """\uc778\ub371\uc2a4 \uc0dd\uc131"""\n        if not self.es.indices.exists(index=self.index_name):\n            mapping = {\n                "mappings": {\n                    "properties": {\n                        "name": {\n                            "type": "text",\n                            "analyzer": "standard",\n                            "fields": {\n                                "keyword": {"type": "keyword"},\n                                "completion": {"type": "completion"}\n                            }\n                        },\n                        "description": {\n                            "type": "text",\n                            "analyzer": "standard"\n                        },\n                        "category": {\n                            "type": "keyword"\n                        },\n                        "brand": {\n                            "type": "keyword"\n                        },\n                        "price": {\n                            "type": "float"\n                        },\n                        "stock": {\n                            "type": "integer"\n                        },\n                        "tags": {\n                            "type": "keyword"\n                        },\n                        "search_keywords": {\n                            "type": "text"\n                        },\n                        "created_at": {\n                            "type": "date"\n                        }\n                    }\n                }\n            }\n            self.es.indices.create(index=self.index_name, body=mapping)\n\n    def index_product(self, product_id: int, product_data: dict):\n        """\uc0c1\ud488 \uc778\ub371\uc2f1"""\n        self.es.index(\n            index=self.index_name,\n            id=product_id,\n            body=product_data\n        )\n\n    def bulk_index_products(self, products: List[dict]):\n        """\ubc30\uce58 \uc778\ub371\uc2f1"""\n        from elasticsearch.helpers import bulk\n\n        actions = [\n            {\n                "_index": self.index_name,\n                "_id": product["id"],\n                "_source": product\n            }\n            for product in products\n        ]\n\n        bulk(self.es, actions)\n\n    def search(\n        self,\n        query: str,\n        filters: Optional[Dict] = None,\n        sort_by: Optional[str] = None,\n        from_: int = 0,\n        size: int = 10\n    ) -> dict:\n        """\uc804\ubb38 \uac80\uc0c9"""\n        # \uae30\ubcf8 \ucffc\ub9ac\n        must_clauses = []\n\n        if query:\n            must_clauses.append({\n                "multi_match": {\n                    "query": query,\n                    "fields": [\n                        "name^3",  # name \ud544\ub4dc\uc5d0 \uac00\uc911\uce58 3\n                        "description^2",\n                        "search_keywords",\n                        "brand",\n                        "tags"\n                    ],\n                    "fuzziness": "AUTO"  # \uc624\ud0c0 \ud5c8\uc6a9\n                }\n            })\n\n        # \ud544\ud130 \uc801\uc6a9\n        filter_clauses = []\n\n        if filters:\n            if "category" in filters:\n                filter_clauses.append({"term": {"category": filters["category"]}})\n\n            if "brand" in filters:\n                filter_clauses.append({"term": {"brand": filters["brand"]}})\n\n            if "min_price" in filters or "max_price" in filters:\n                price_range = {}\n                if "min_price" in filters:\n                    price_range["gte"] = filters["min_price"]\n                if "max_price" in filters:\n                    price_range["lte"] = filters["max_price"]\n\n                filter_clauses.append({"range": {"price": price_range}})\n\n            if "in_stock" in filters and filters["in_stock"]:\n                filter_clauses.append({"range": {"stock": {"gt": 0}}})\n\n        # \uc815\ub82c\n        sort_options = []\n        if sort_by == "price_asc":\n            sort_options.append({"price": {"order": "asc"}})\n        elif sort_by == "price_desc":\n            sort_options.append({"price": {"order": "desc"}})\n        elif sort_by == "newest":\n            sort_options.append({"created_at": {"order": "desc"}})\n        else:\n            sort_options.append("_score")  # \uad00\ub828\uc131 \uc21c\n\n        # \uac80\uc0c9 \ucffc\ub9ac \uad6c\uc131\n        search_body = {\n            "query": {\n                "bool": {\n                    "must": must_clauses if must_clauses else [{"match_all": {}}],\n                    "filter": filter_clauses\n                }\n            },\n            "sort": sort_options,\n            "from": from_,\n            "size": size,\n            "highlight": {\n                "fields": {\n                    "name": {},\n                    "description": {}\n                },\n                "pre_tags": ["<mark>"],\n                "post_tags": ["</mark>"]\n            },\n            "aggs": {\n                "categories": {\n                    "terms": {"field": "category", "size": 20}\n                },\n                "brands": {\n                    "terms": {"field": "brand", "size": 20}\n                },\n                "price_ranges": {\n                    "range": {\n                        "field": "price",\n                        "ranges": [\n                            {"to": 10000, "key": "0-10000"},\n                            {"from": 10000, "to": 50000, "key": "10000-50000"},\n                            {"from": 50000, "to": 100000, "key": "50000-100000"},\n                            {"from": 100000, "key": "100000+"}\n                        ]\n                    }\n                }\n            }\n        }\n\n        response = self.es.search(index=self.index_name, body=search_body)\n\n        # \uacb0\uacfc \ud3ec\ub9f7\ud305\n        results = []\n        for hit in response["hits"]["hits"]:\n            result = hit["_source"]\n            result["id"] = hit["_id"]\n            result["score"] = hit["_score"]\n\n            # \ud558\uc774\ub77c\uc774\ud2b8\n            if "highlight" in hit:\n                result["highlight"] = hit["highlight"]\n\n            results.append(result)\n\n        return {\n            "total": response["hits"]["total"]["value"],\n            "results": results,\n            "facets": {\n                "categories": response["aggregations"]["categories"]["buckets"],\n                "brands": response["aggregations"]["brands"]["buckets"],\n                "price_ranges": response["aggregations"]["price_ranges"]["buckets"]\n            }\n        }\n\n    def autocomplete(self, prefix: str, size: int = 5) -> List[str]:\n        """\uc790\ub3d9\uc644\uc131"""\n        search_body = {\n            "suggest": {\n                "product-suggest": {\n                    "prefix": prefix,\n                    "completion": {\n                        "field": "name.completion",\n                        "size": size,\n                        "skip_duplicates": True\n                    }\n                }\n            }\n        }\n\n        response = self.es.search(index=self.index_name, body=search_body)\n\n        suggestions = []\n        for option in response["suggest"]["product-suggest"][0]["options"]:\n            suggestions.append(option["text"])\n\n        return suggestions\n\n    def suggest_similar(self, query: str) -> List[str]:\n        """\uc720\uc0ac \uac80\uc0c9\uc5b4 \uc81c\uc548 (Did you mean?)"""\n        search_body = {\n            "suggest": {\n                "text": query,\n                "simple_phrase": {\n                    "phrase": {\n                        "field": "name",\n                        "size": 1,\n                        "gram_size": 3,\n                        "direct_generator": [{\n                            "field": "name",\n                            "suggest_mode": "always"\n                        }],\n                        "highlight": {\n                            "pre_tag": "<em>",\n                            "post_tag": "</em>"\n                        }\n                    }\n                }\n            }\n        }\n\n        response = self.es.search(index=self.index_name, body=search_body)\n\n        suggestions = []\n        for option in response["suggest"]["simple_phrase"][0]["options"]:\n            suggestions.append(option["text"])\n\n        return suggestions\n\n    def more_like_this(self, product_id: int, size: int = 5) -> List[dict]:\n        """\uc720\uc0ac \uc0c1\ud488 \ucd94\ucc9c"""\n        search_body = {\n            "query": {\n                "more_like_this": {\n                    "fields": ["name", "description", "category", "tags"],\n                    "like": [\n                        {\n                            "_index": self.index_name,\n                            "_id": product_id\n                        }\n                    ],\n                    "min_term_freq": 1,\n                    "max_query_terms": 12\n                }\n            },\n            "size": size\n        }\n\n        response = self.es.search(index=self.index_name, body=search_body)\n\n        results = []\n        for hit in response["hits"]["hits"]:\n            result = hit["_source"]\n            result["id"] = hit["_id"]\n            results.append(result)\n\n        return results\n\n    def delete_product(self, product_id: int):\n        """\uc0c1\ud488 \uc0ad\uc81c"""\n        self.es.delete(index=self.index_name, id=product_id)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"search_analyticspy",children:"search_analytics.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import Session\nfrom sqlalchemy import func, desc\nfrom datetime import datetime, timedelta\nimport models\n\nclass SearchAnalytics:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def log_search(\n        self,\n        query: str,\n        filters: dict,\n        results_count: int,\n        user_id: int = None\n    ):\n        """\uac80\uc0c9 \ub85c\uadf8 \uc800\uc7a5"""\n        import json\n\n        log = models.SearchLog(\n            user_id=user_id,\n            query=query,\n            filters=json.dumps(filters),\n            results_count=results_count\n        )\n\n        self.db.add(log)\n        self.db.commit()\n\n    def log_click(self, search_log_id: int, product_id: int):\n        """\uac80\uc0c9 \uacb0\uacfc \ud074\ub9ad \ub85c\uadf8"""\n        log = self.db.query(models.SearchLog).filter(\n            models.SearchLog.id == search_log_id\n        ).first()\n\n        if log:\n            log.clicked_result_id = product_id\n            self.db.commit()\n\n    def get_popular_searches(self, days: int = 7, limit: int = 10) -> List[dict]:\n        """\uc778\uae30 \uac80\uc0c9\uc5b4"""\n        since = datetime.now() - timedelta(days=days)\n\n        results = self.db.query(\n            models.SearchLog.query,\n            func.count(models.SearchLog.id).label(\'count\')\n        ).filter(\n            models.SearchLog.created_at >= since\n        ).group_by(\n            models.SearchLog.query\n        ).order_by(\n            desc(\'count\')\n        ).limit(limit).all()\n\n        return [{"query": r.query, "count": r.count} for r in results]\n\n    def get_trending_searches(self, hours: int = 24, limit: int = 10) -> List[dict]:\n        """\uc2e4\uc2dc\uac04 \ud2b8\ub80c\ub529 \uac80\uc0c9\uc5b4"""\n        since = datetime.now() - timedelta(hours=hours)\n\n        results = self.db.query(\n            models.SearchLog.query,\n            func.count(models.SearchLog.id).label(\'count\')\n        ).filter(\n            models.SearchLog.created_at >= since\n        ).group_by(\n            models.SearchLog.query\n        ).order_by(\n            desc(\'count\')\n        ).limit(limit).all()\n\n        return [{"query": r.query, "count": r.count} for r in results]\n\n    def get_zero_result_queries(self, days: int = 7, limit: int = 10) -> List[str]:\n        """\uac80\uc0c9 \uacb0\uacfc \uc5c6\ub294 \ucffc\ub9ac (\uac1c\uc120 \ud544\uc694)"""\n        since = datetime.now() - timedelta(days=days)\n\n        results = self.db.query(\n            models.SearchLog.query\n        ).filter(\n            models.SearchLog.created_at >= since,\n            models.SearchLog.results_count == 0\n        ).group_by(\n            models.SearchLog.query\n        ).limit(limit).all()\n\n        return [r.query for r in results]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, HTTPException, Query\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nimport models, schemas\nfrom database import engine, get_db\nfrom elasticsearch_client import ElasticsearchClient\nfrom search_analytics import SearchAnalytics\nfrom auth import get_current_user\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Search Engine API")\n\nes_client = ElasticsearchClient()\n\n# ==================== \uc0c1\ud488 \uad00\ub9ac ====================\n\n@app.post("/products", response_model=schemas.Product)\ndef create_product(\n    product: schemas.ProductCreate,\n    db: Session = Depends(get_db)\n):\n    """\uc0c1\ud488 \uc0dd\uc131 \ubc0f \uc778\ub371\uc2f1"""\n    db_product = models.Product(**product.dict())\n    db.add(db_product)\n    db.commit()\n    db.refresh(db_product)\n\n    # Elasticsearch \uc778\ub371\uc2f1\n    product_data = {\n        "id": db_product.id,\n        "name": db_product.name,\n        "description": db_product.description,\n        "category": db_product.category,\n        "brand": db_product.brand,\n        "price": db_product.price,\n        "stock": db_product.stock,\n        "tags": db_product.tags.split(\',\') if db_product.tags else [],\n        "search_keywords": db_product.search_keywords,\n        "created_at": db_product.created_at.isoformat()\n    }\n\n    es_client.index_product(db_product.id, product_data)\n\n    return db_product\n\n@app.put("/products/{product_id}")\ndef update_product(\n    product_id: int,\n    product: schemas.ProductUpdate,\n    db: Session = Depends(get_db)\n):\n    """\uc0c1\ud488 \uc5c5\ub370\uc774\ud2b8 \ubc0f \uc7ac\uc778\ub371\uc2f1"""\n    db_product = db.query(models.Product).filter(\n        models.Product.id == product_id\n    ).first()\n\n    if not db_product:\n        raise HTTPException(status_code=404, detail="Product not found")\n\n    for key, value in product.dict(exclude_unset=True).items():\n        setattr(db_product, key, value)\n\n    db.commit()\n    db.refresh(db_product)\n\n    # \uc7ac\uc778\ub371\uc2f1\n    product_data = {\n        "id": db_product.id,\n        "name": db_product.name,\n        "description": db_product.description,\n        "category": db_product.category,\n        "brand": db_product.brand,\n        "price": db_product.price,\n        "stock": db_product.stock,\n        "tags": db_product.tags.split(\',\') if db_product.tags else [],\n        "search_keywords": db_product.search_keywords,\n        "created_at": db_product.created_at.isoformat()\n    }\n\n    es_client.index_product(db_product.id, product_data)\n\n    return db_product\n\n@app.delete("/products/{product_id}")\ndef delete_product(product_id: int, db: Session = Depends(get_db)):\n    """\uc0c1\ud488 \uc0ad\uc81c"""\n    db_product = db.query(models.Product).filter(\n        models.Product.id == product_id\n    ).first()\n\n    if not db_product:\n        raise HTTPException(status_code=404, detail="Product not found")\n\n    # Elasticsearch\uc5d0\uc11c \uc0ad\uc81c\n    es_client.delete_product(product_id)\n\n    # DB\uc5d0\uc11c \uc0ad\uc81c\n    db.delete(db_product)\n    db.commit()\n\n    return {"message": "Product deleted"}\n\n# ==================== \uac80\uc0c9 ====================\n\n@app.get("/search")\ndef search_products(\n    q: str = Query(..., description="\uac80\uc0c9\uc5b4"),\n    category: Optional[str] = None,\n    brand: Optional[str] = None,\n    min_price: Optional[float] = None,\n    max_price: Optional[float] = None,\n    in_stock: Optional[bool] = None,\n    sort_by: Optional[str] = Query(None, regex="^(price_asc|price_desc|newest|relevance)$"),\n    page: int = Query(1, ge=1),\n    size: int = Query(10, ge=1, le=100),\n    user: Optional[User] = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc0c1\ud488 \uac80\uc0c9"""\n    # \ud544\ud130 \uad6c\uc131\n    filters = {}\n    if category:\n        filters["category"] = category\n    if brand:\n        filters["brand"] = brand\n    if min_price is not None:\n        filters["min_price"] = min_price\n    if max_price is not None:\n        filters["max_price"] = max_price\n    if in_stock is not None:\n        filters["in_stock"] = in_stock\n\n    # \uac80\uc0c9 \uc2e4\ud589\n    from_ = (page - 1) * size\n    results = es_client.search(\n        query=q,\n        filters=filters,\n        sort_by=sort_by,\n        from_=from_,\n        size=size\n    )\n\n    # \uac80\uc0c9 \ub85c\uadf8\n    analytics = SearchAnalytics(db)\n    analytics.log_search(\n        query=q,\n        filters=filters,\n        results_count=results["total"],\n        user_id=user.id if user else None\n    )\n\n    return {\n        "query": q,\n        "total": results["total"],\n        "page": page,\n        "size": size,\n        "results": results["results"],\n        "facets": results["facets"]\n    }\n\n@app.get("/autocomplete")\ndef autocomplete(q: str = Query(..., min_length=1)):\n    """\uc790\ub3d9\uc644\uc131"""\n    suggestions = es_client.autocomplete(q)\n    return {"suggestions": suggestions}\n\n@app.get("/suggest")\ndef suggest_similar(q: str):\n    """\uac80\uc0c9\uc5b4 \uc81c\uc548 (Did you mean?)"""\n    suggestions = es_client.suggest_similar(q)\n    return {"suggestions": suggestions}\n\n@app.get("/products/{product_id}/similar")\ndef get_similar_products(product_id: int, limit: int = 5):\n    """\uc720\uc0ac \uc0c1\ud488 \ucd94\ucc9c"""\n    similar = es_client.more_like_this(product_id, limit)\n    return {"similar_products": similar}\n\n# ==================== \uac80\uc0c9 \ubd84\uc11d ====================\n\n@app.get("/analytics/popular-searches")\ndef get_popular_searches(\n    days: int = Query(7, ge=1, le=30),\n    limit: int = Query(10, ge=1, le=50),\n    db: Session = Depends(get_db)\n):\n    """\uc778\uae30 \uac80\uc0c9\uc5b4"""\n    analytics = SearchAnalytics(db)\n    results = analytics.get_popular_searches(days, limit)\n    return {"popular_searches": results}\n\n@app.get("/analytics/trending-searches")\ndef get_trending_searches(\n    hours: int = Query(24, ge=1, le=168),\n    limit: int = Query(10, ge=1, le=50),\n    db: Session = Depends(get_db)\n):\n    """\uc2e4\uc2dc\uac04 \ud2b8\ub80c\ub529 \uac80\uc0c9\uc5b4"""\n    analytics = SearchAnalytics(db)\n    results = analytics.get_trending_searches(hours, limit)\n    return {"trending_searches": results}\n\n@app.get("/analytics/zero-result-queries")\ndef get_zero_result_queries(\n    days: int = Query(7, ge=1, le=30),\n    limit: int = Query(10, ge=1, le=50),\n    db: Session = Depends(get_db)\n):\n    """\uac80\uc0c9 \uacb0\uacfc \uc5c6\ub294 \ucffc\ub9ac"""\n    analytics = SearchAnalytics(db)\n    results = analytics.get_zero_result_queries(days, limit)\n    return {"zero_result_queries": results}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"docker-composeyml",children:"docker-compose.yml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "8000:8000"\n    environment:\n      ELASTICSEARCH_URL: http://elasticsearch:9200\n      DATABASE_URL: postgresql://user:password@db:5432/searchdb\n    depends_on:\n      - elasticsearch\n      - db\n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0\n    ports:\n      - "9200:9200"\n    environment:\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"\n    volumes:\n      - es-data:/usr/share/elasticsearch/data\n\n  db:\n    image: postgres:14\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: searchdb\n    volumes:\n      - db-data:/var/lib/postgresql/data\n\nvolumes:\n  es-data:\n  db-data:\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,r.jsx)(n.h3,{id:"\uc804\ubb38-\uac80\uc0c9-full-text-search",children:"\uc804\ubb38 \uac80\uc0c9 (Full-text Search)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"multi_match"}),"\ub85c \uc5ec\ub7ec \ud544\ub4dc \uac80\uc0c9"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud544\ub4dc\ubcc4 \uac00\uc911\uce58 \uc124\uc815 (",(0,r.jsx)(n.code,{children:"^3"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fuzziness"}),"\ub85c \uc624\ud0c0 \ud5c8\uc6a9"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud328\uc2ef-\uac80\uc0c9-faceted-search",children:"\ud328\uc2ef \uac80\uc0c9 (Faceted Search)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Aggregations\ub85c \uce74\ud14c\uace0\ub9ac/\ube0c\ub79c\ub4dc/\uac00\uaca9\ub300 \uc9d1\uacc4"}),"\n",(0,r.jsx)(n.li,{children:"\ub3d9\uc801 \ud544\ud130\ub9c1"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud558\uc774\ub77c\uc774\ud305",children:"\ud558\uc774\ub77c\uc774\ud305"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uac80\uc0c9\uc5b4\uac00 \ud3ec\ud568\ub41c \ubd80\ubd84 \uac15\uc870"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<mark>"})," \ud0dc\uadf8\ub85c \uac10\uc2f8\uae30"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\uc790\ub3d9\uc644\uc131",children:"\uc790\ub3d9\uc644\uc131"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"completion"})," \ud0c0\uc785 \ud544\ub4dc \uc0ac\uc6a9"]}),"\n",(0,r.jsx)(n.li,{children:"prefix \uae30\ubc18 \ube60\ub978 \uc81c\uc548"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\uac80\uc0c9-\ubd84\uc11d",children:"\uac80\uc0c9 \ubd84\uc11d"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uac80\uc0c9 \ub85c\uadf8 \uc800\uc7a5"}),"\n",(0,r.jsx)(n.li,{children:"\uc778\uae30 \uac80\uc0c9\uc5b4, \ud2b8\ub80c\ub529 \uac80\uc0c9\uc5b4 \ucd94\ucd9c"}),"\n",(0,r.jsx)(n.li,{children:"\uac1c\uc120 \ud544\uc694\ud55c \ucffc\ub9ac \ud30c\uc545"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ud559\uc2b5-\uc644\ub8cc",children:"\ud83d\udcda \ud559\uc2b5 \uc644\ub8cc!"}),"\n",(0,r.jsx)(n.p,{children:"\ucd95\ud558\ud569\ub2c8\ub2e4! FastAPI \uc2e4\uc804 \uc608\uc81c 11\uac1c\ub97c \ubaa8\ub450 \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4!"}),"\n",(0,r.jsx)(n.p,{children:"\uc774\uc81c \uc5ec\ub7ec\ubd84\uc740 \ub2e4\uc74c\uc744 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CRUD API (To-Do, \ube14\ub85c\uadf8)"}),"\n",(0,r.jsx)(n.li,{children:"E-commerce \uc2dc\uc2a4\ud15c"}),"\n",(0,r.jsx)(n.li,{children:"\uc2e4\uc2dc\uac04 \ucc44\ud305"}),"\n",(0,r.jsx)(n.li,{children:"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4"}),"\n",(0,r.jsx)(n.li,{children:"\uacb0\uc81c \uc2dc\uc2a4\ud15c"}),"\n",(0,r.jsx)(n.li,{children:"\ud30c\uc77c \uc800\uc7a5\uc18c"}),"\n",(0,r.jsx)(n.li,{children:"\uc18c\uc15c \ubbf8\ub514\uc5b4"}),"\n",(0,r.jsx)(n.li,{children:"\uc608\uc57d \uc2dc\uc2a4\ud15c"}),"\n",(0,r.jsx)(n.li,{children:"\uc54c\ub9bc \uc2dc\uc2a4\ud15c"}),"\n",(0,r.jsx)(n.li,{children:"\uac80\uc0c9 \uc5d4\uc9c4"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\ud83d\udc49 \uc2e4\uc81c \ud504\ub85c\ub355\uc158 \uc11c\ube44\uc2a4\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uc138\uc694!"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);