"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[8496],{6824:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rabbitmq/examples/scenario-05-iot-telemetry","title":"\uc2dc\ub098\ub9ac\uc624 5: IoT \ud154\ub808\uba54\ud2b8\ub9ac \ucc98\ub9ac","description":"\uc218\ucc9c \uac1c\uc758 IoT \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c \uc2e4\uc2dc\uac04 \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uace0 \ucc98\ub9ac\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud574\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/examples/scenario-05-iot-telemetry.md","sourceDirName":"rabbitmq/examples","slug":"/rabbitmq/examples/scenario-05-iot-telemetry","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-05-iot-telemetry","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/examples/scenario-05-iot-telemetry.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"rabbitmqSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 4: \ubd84\uc0b0 \uc791\uc5c5 \uc2a4\ucf00\uc904\ub7ec","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-04-job-scheduler"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 6: \uac10\uc0ac \ucd94\uc801 \uc2dc\uc2a4\ud15c","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-06-audit-trail"}}');var i=t(4848),s=t(8453);const a={sidebar_position:6},l="\uc2dc\ub098\ub9ac\uc624 5: IoT \ud154\ub808\uba54\ud2b8\ub9ac \ucc98\ub9ac",o={},c=[{value:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85",id:"-\uc0c1\ud669-\uc124\uba85",level:2},{value:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98",id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"\ud83d\udcdd \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"\ud154\ub808\uba54\ud2b8\ub9ac \ubaa8\ub378",id:"\ud154\ub808\uba54\ud2b8\ub9ac-\ubaa8\ub378",level:3},{value:"IoT Gateway (Publisher)",id:"iot-gateway-publisher",level:3},{value:"Temperature Processor",id:"temperature-processor",level:3},{value:"Alert Service",id:"alert-service",level:3},{value:"Data Archiver",id:"data-archiver",level:3},{value:"\ud83e\uddea \uc131\ub2a5 \ud14c\uc2a4\ud2b8",id:"-\uc131\ub2a5-\ud14c\uc2a4\ud2b8",level:2},{value:"\ud83d\udcca \uc2e4\ud589 \uacb0\uacfc \uc608\uc2dc",id:"-\uc2e4\ud589-\uacb0\uacfc-\uc608\uc2dc",level:2},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-5-iot-\ud154\ub808\uba54\ud2b8\ub9ac-\ucc98\ub9ac",children:"\uc2dc\ub098\ub9ac\uc624 5: IoT \ud154\ub808\uba54\ud2b8\ub9ac \ucc98\ub9ac"})}),"\n",(0,i.jsx)(n.p,{children:"\uc218\ucc9c \uac1c\uc758 IoT \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c \uc2e4\uc2dc\uac04 \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uace0 \ucc98\ub9ac\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud574\ubd05\uc2dc\ub2e4!"}),"\n",(0,i.jsx)(n.h2,{id:"-\uc0c1\ud669-\uc124\uba85",children:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85"}),"\n",(0,i.jsx)(n.p,{children:"\uc2a4\ub9c8\ud2b8 \ube4c\ub529 \uad00\ub9ac \uc2dc\uc2a4\ud15c:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ub514\ubc14\uc774\uc2a4 \ud0c0\uc785"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\uc628\ub3c4 \uc13c\uc11c (1000\uac1c)"}),"\n",(0,i.jsx)(n.li,{children:"\uc2b5\ub3c4 \uc13c\uc11c (1000\uac1c)"}),"\n",(0,i.jsx)(n.li,{children:"\uc804\ub825 \ubbf8\ud130 (500\uac1c)"}),"\n",(0,i.jsx)(n.li,{children:"\ubcf4\uc548 \uce74\uba54\ub77c (200\uac1c)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\uc694\uad6c\uc0ac\ud56d"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\ucd08\ub2f9 \uc218\ucc9c \uac74\uc758 \ub370\uc774\ud130 \ucc98\ub9ac"}),"\n",(0,i.jsx)(n.li,{children:"\uc2e4\uc2dc\uac04 \uc54c\ub9bc (\uc784\uacc4\uac12 \ucd08\uacfc \uc2dc)"}),"\n",(0,i.jsx)(n.li,{children:"\ub370\uc774\ud130 \uc9d1\uacc4 \ubc0f \ubd84\uc11d"}),"\n",(0,i.jsx)(n.li,{children:"\uc7a5\uae30 \uc800\uc7a5"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",children:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"IoT Devices \u2192 [Topic Exchange: telemetry]\n                       \u2193\n         sensor.*.temperature \u2192 Temperature Processor\n         sensor.*.humidity    \u2192 Humidity Processor\n         sensor.*.power       \u2192 Power Processor\n         sensor.#             \u2192 Data Archiver\n         *.*.alert            \u2192 Alert Service\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud328\ud134"}),": Topic Exchange\ub85c \ub370\uc774\ud130 \ud0c0\uc785\ubcc4 \ub77c\uc6b0\ud305"]}),"\n",(0,i.jsx)(n.h2,{id:"-\uad6c\ud604",children:"\ud83d\udcdd \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"\ud154\ub808\uba54\ud2b8\ub9ac-\ubaa8\ub378",children:"\ud154\ub808\uba54\ud2b8\ub9ac \ubaa8\ub378"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# models.py\nfrom dataclasses import dataclass, asdict, field\nfrom datetime import datetime\nfrom typing import Optional\nfrom enum import Enum\nimport json\n\nclass DeviceType(str, Enum):\n    \"\"\"\ub514\ubc14\uc774\uc2a4 \ud0c0\uc785\"\"\"\n    TEMPERATURE = 'temperature'\n    HUMIDITY = 'humidity'\n    POWER = 'power'\n    CAMERA = 'camera'\n\n@dataclass\nclass Telemetry:\n    \"\"\"\ud154\ub808\uba54\ud2b8\ub9ac \ub370\uc774\ud130\"\"\"\n    device_id: str\n    device_type: DeviceType\n    location: str  # \uc608: building1.floor2.room201\n    value: float\n    unit: str\n    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())\n    is_alert: bool = False\n\n    def to_json(self) -> str:\n        data = asdict(self)\n        data['device_type'] = self.device_type.value\n        return json.dumps(data)\n\n    @classmethod\n    def from_json(cls, json_str: str):\n        data = json.loads(json_str)\n        data['device_type'] = DeviceType(data['device_type'])\n        return cls(**data)\n\n    def get_routing_key(self) -> str:\n        \"\"\"Routing key \uc0dd\uc131\"\"\"\n        # sensor.building1.floor2.temperature\n        location_parts = self.location.replace('.', '_')\n\n        if self.is_alert:\n            return f'sensor.{location_parts}.alert'\n        else:\n            return f'sensor.{location_parts}.{self.device_type.value}'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"iot-gateway-publisher",children:"IoT Gateway (Publisher)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# iot_gateway.py\nimport pika\nimport random\nimport time\nfrom models import Telemetry, DeviceType\nfrom datetime import datetime\n\nclass IoTGateway:\n    \"\"\"IoT \uac8c\uc774\ud2b8\uc6e8\uc774 (\ub514\ubc14\uc774\uc2a4 \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \ubc1c\ud589)\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters(host)\n        )\n        self.channel = self.connection.channel()\n\n        # Topic Exchange \uc120\uc5b8\n        self.channel.exchange_declare(\n            exchange='telemetry',\n            exchange_type='topic',\n            durable=True\n        )\n\n    def publish(self, telemetry: Telemetry):\n        \"\"\"\ud154\ub808\uba54\ud2b8\ub9ac \ub370\uc774\ud130 \ubc1c\ud589\"\"\"\n        routing_key = telemetry.get_routing_key()\n\n        self.channel.basic_publish(\n            exchange='telemetry',\n            routing_key=routing_key,\n            body=telemetry.to_json(),\n            properties=pika.BasicProperties(\n                delivery_mode=1,  # Non-persistent (\uace0\uc18d \ucc98\ub9ac)\n                content_type='application/json',\n                timestamp=int(datetime.now().timestamp())\n            )\n        )\n\n    def simulate_temperature_sensor(self, device_id: str, location: str):\n        \"\"\"\uc628\ub3c4 \uc13c\uc11c \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        # \uc815\uc0c1 \ubc94\uc704: 18-26\xb0C\n        base_temp = 22.0\n        value = base_temp + random.uniform(-4, 4)\n\n        # \uc784\uacc4\uac12 \uccb4\ud06c\n        is_alert = value < 18.0 or value > 26.0\n\n        telemetry = Telemetry(\n            device_id=device_id,\n            device_type=DeviceType.TEMPERATURE,\n            location=location,\n            value=round(value, 1),\n            unit='\xb0C',\n            is_alert=is_alert\n        )\n\n        self.publish(telemetry)\n\n        return telemetry\n\n    def simulate_humidity_sensor(self, device_id: str, location: str):\n        \"\"\"\uc2b5\ub3c4 \uc13c\uc11c \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        # \uc815\uc0c1 \ubc94\uc704: 40-60%\n        base_humidity = 50.0\n        value = base_humidity + random.uniform(-15, 15)\n\n        is_alert = value < 40.0 or value > 60.0\n\n        telemetry = Telemetry(\n            device_id=device_id,\n            device_type=DeviceType.HUMIDITY,\n            location=location,\n            value=round(value, 1),\n            unit='%',\n            is_alert=is_alert\n        )\n\n        self.publish(telemetry)\n\n        return telemetry\n\n    def simulate_power_meter(self, device_id: str, location: str):\n        \"\"\"\uc804\ub825 \ubbf8\ud130 \uc2dc\ubbac\ub808\uc774\uc158\"\"\"\n        # \uc815\uc0c1 \ubc94\uc704: 0-100kW\n        value = random.uniform(10, 90)\n\n        is_alert = value > 80.0  # 80kW \ucd08\uacfc \uc2dc \uc54c\ub9bc\n\n        telemetry = Telemetry(\n            device_id=device_id,\n            device_type=DeviceType.POWER,\n            location=location,\n            value=round(value, 2),\n            unit='kW',\n            is_alert=is_alert\n        )\n\n        self.publish(telemetry)\n\n        return telemetry\n\n    def run_continuous(self, interval: float = 0.1):\n        \"\"\"\uc9c0\uc18d\uc801\uc778 \ub370\uc774\ud130 \ubc1c\ud589\"\"\"\n        print(f\" [*] IoT Gateway started\")\n        print(f\" [*] Publishing every {interval}s...\\n\")\n\n        devices = [\n            ('TEMP-001', 'building1.floor1.room101', 'temperature'),\n            ('TEMP-002', 'building1.floor1.room102', 'temperature'),\n            ('HUM-001', 'building1.floor2.room201', 'humidity'),\n            ('HUM-002', 'building1.floor2.room202', 'humidity'),\n            ('POW-001', 'building1.basement', 'power'),\n        ]\n\n        try:\n            while True:\n                # \ubaa8\ub4e0 \ub514\ubc14\uc774\uc2a4\uc5d0\uc11c \ub370\uc774\ud130 \ubc1c\ud589\n                for device_id, location, device_type in devices:\n                    if device_type == 'temperature':\n                        telemetry = self.simulate_temperature_sensor(device_id, location)\n                    elif device_type == 'humidity':\n                        telemetry = self.simulate_humidity_sensor(device_id, location)\n                    elif device_type == 'power':\n                        telemetry = self.simulate_power_meter(device_id, location)\n\n                    if telemetry.is_alert:\n                        print(f\" [\u26a0] Alert: {telemetry.device_id} = \"\n                              f\"{telemetry.value}{telemetry.unit}\")\n\n                time.sleep(interval)\n\n        except KeyboardInterrupt:\n            print(\"\\n IoT Gateway stopped\")\n            self.connection.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    gateway = IoTGateway()\n    gateway.run_continuous(interval=1.0)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"temperature-processor",children:"Temperature Processor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# temperature_processor.py\nimport pika\nfrom models import Telemetry\nfrom collections import defaultdict\nimport time\n\nclass TemperatureProcessor:\n    """\uc628\ub3c4 \ub370\uc774\ud130 \ucc98\ub9ac"""\n\n    def __init__(self, host=\'localhost\'):\n        self.host = host\n        self.readings = defaultdict(list)  # \uc704\uce58\ubcc4 \uc628\ub3c4 \uae30\ub85d\n        self.last_aggregation = time.time()\n\n    def process(self, telemetry: Telemetry):\n        """\uc628\ub3c4 \ub370\uc774\ud130 \ucc98\ub9ac"""\n        # \uc704\uce58\ubcc4\ub85c \uc628\ub3c4 \uae30\ub85d\n        self.readings[telemetry.location].append(telemetry.value)\n\n        # \uc2e4\uc2dc\uac04 \ud45c\uc2dc\n        print(f" [TEMP] {telemetry.device_id} @ {telemetry.location}: "\n              f"{telemetry.value}\xb0C")\n\n        # 5\ucd08\ub9c8\ub2e4 \uc9d1\uacc4\n        now = time.time()\n        if now - self.last_aggregation >= 5:\n            self.aggregate()\n            self.last_aggregation = now\n\n    def aggregate(self):\n        """\uc628\ub3c4 \uc9d1\uacc4"""\n        print("\\n [\ud83d\udcca] Temperature Aggregation:")\n\n        for location, temps in self.readings.items():\n            if temps:\n                avg_temp = sum(temps) / len(temps)\n                min_temp = min(temps)\n                max_temp = max(temps)\n\n                print(f"   {location}:")\n                print(f"     Avg: {avg_temp:.1f}\xb0C | "\n                      f"Min: {min_temp:.1f}\xb0C | "\n                      f"Max: {max_temp:.1f}\xb0C | "\n                      f"Samples: {len(temps)}")\n\n        print()\n\n        # \uc9d1\uacc4 \ud6c4 \ucd08\uae30\ud654\n        self.readings.clear()\n\n    def callback(self, ch, method, properties, body):\n        """\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31"""\n        telemetry = Telemetry.from_json(body.decode())\n        self.process(telemetry)\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        """\ud504\ub85c\uc138\uc11c \uc2dc\uc791"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.exchange_declare(\n            exchange=\'telemetry\',\n            exchange_type=\'topic\',\n            durable=True\n        )\n\n        # \uc784\uc2dc \ud050\n        result = channel.queue_declare(queue=\'\', exclusive=True)\n        queue_name = result.method.queue\n\n        # \ubaa8\ub4e0 \uc628\ub3c4 \ub370\uc774\ud130 \uad6c\ub3c5\n        channel.queue_bind(\n            exchange=\'telemetry\',\n            queue=queue_name,\n            routing_key=\'sensor.*.temperature\'\n        )\n\n        channel.basic_qos(prefetch_count=100)  # \ubc30\uce58 \ucc98\ub9ac\n\n        channel.basic_consume(\n            queue=queue_name,\n            on_message_callback=self.callback\n        )\n\n        print(\' [*] Temperature Processor started\')\n        print(\' [*] Subscribed to: sensor.*.temperature\\n\')\n\n        channel.start_consuming()\n\nif __name__ == \'__main__\':\n    processor = TemperatureProcessor()\n\n    try:\n        processor.start()\n    except KeyboardInterrupt:\n        print(\'\\nTemperature Processor stopped\')\n'})}),"\n",(0,i.jsx)(n.h3,{id:"alert-service",children:"Alert Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# alert_service.py\nimport pika\nfrom models import Telemetry\n\nclass AlertService:\n    """\uc54c\ub9bc \uc11c\ube44\uc2a4"""\n\n    def __init__(self, host=\'localhost\'):\n        self.host = host\n\n    def send_alert(self, telemetry: Telemetry):\n        """\uc54c\ub9bc \ubc1c\uc1a1"""\n        print(f"""\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        \ud83d\udea8 CRITICAL ALERT\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        Device: {telemetry.device_id}\n        Type: {telemetry.device_type.value}\n        Location: {telemetry.location}\n        Value: {telemetry.value} {telemetry.unit}\n        Time: {telemetry.timestamp}\n\n        Action Required: Check device immediately!\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        """)\n\n        # \uc2e4\uc81c\ub85c\ub294 \uc774\uba54\uc77c, SMS, Slack \ub4f1\uc73c\ub85c \uc54c\ub9bc\n        # send_email_alert(telemetry)\n        # send_sms_alert(telemetry)\n\n    def callback(self, ch, method, properties, body):\n        """\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31"""\n        telemetry = Telemetry.from_json(body.decode())\n        self.send_alert(telemetry)\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        """\uc11c\ube44\uc2a4 \uc2dc\uc791"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.exchange_declare(\n            exchange=\'telemetry\',\n            exchange_type=\'topic\',\n            durable=True\n        )\n\n        result = channel.queue_declare(queue=\'\', exclusive=True)\n        queue_name = result.method.queue\n\n        # \ubaa8\ub4e0 alert \uba54\uc2dc\uc9c0 \uad6c\ub3c5\n        channel.queue_bind(\n            exchange=\'telemetry\',\n            queue=queue_name,\n            routing_key=\'*.*.alert\'\n        )\n\n        channel.basic_consume(\n            queue=queue_name,\n            on_message_callback=self.callback\n        )\n\n        print(\' [*] Alert Service started\')\n        print(\' [*] Subscribed to: *.*.alert\\n\')\n\n        channel.start_consuming()\n\nif __name__ == \'__main__\':\n    service = AlertService()\n\n    try:\n        service.start()\n    except KeyboardInterrupt:\n        print(\'\\nAlert Service stopped\')\n'})}),"\n",(0,i.jsx)(n.h3,{id:"data-archiver",children:"Data Archiver"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# data_archiver.py\nimport pika\nfrom models import Telemetry\nimport json\n\nclass DataArchiver:\n    \"\"\"\ub370\uc774\ud130 \uc544\uce74\uc774\ubc84 (\uc7a5\uae30 \uc800\uc7a5)\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n\n    def archive(self, telemetry: Telemetry):\n        \"\"\"\ub370\uc774\ud130 \uc800\uc7a5\"\"\"\n        # \ud30c\uc77c\uc5d0 \uc800\uc7a5 (\uc2e4\uc81c\ub85c\ub294 TimescaleDB, InfluxDB \ub4f1 \uc0ac\uc6a9)\n        with open('telemetry_archive.jsonl', 'a', encoding='utf-8') as f:\n            f.write(telemetry.to_json() + '\\n')\n\n        # \ud1b5\uacc4 \ucd9c\ub825 (\ub9e4 100\uac74\ub9c8\ub2e4)\n        if not hasattr(self, 'count'):\n            self.count = 0\n\n        self.count += 1\n\n        if self.count % 100 == 0:\n            print(f\" [ARCHIVE] {self.count} records archived\")\n\n    def callback(self, ch, method, properties, body):\n        \"\"\"\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31\"\"\"\n        telemetry = Telemetry.from_json(body.decode())\n        self.archive(telemetry)\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        \"\"\"\uc544\uce74\uc774\ubc84 \uc2dc\uc791\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.exchange_declare(\n            exchange='telemetry',\n            exchange_type='topic',\n            durable=True\n        )\n\n        # \uc601\uad6c \ud050 (\ub370\uc774\ud130 \uc190\uc2e4 \ubc29\uc9c0)\n        channel.queue_declare(queue='telemetry.archive', durable=True)\n\n        # \ubaa8\ub4e0 \uc13c\uc11c \ub370\uc774\ud130 \uad6c\ub3c5\n        channel.queue_bind(\n            exchange='telemetry',\n            queue='telemetry.archive',\n            routing_key='sensor.#'\n        )\n\n        channel.basic_qos(prefetch_count=1000)  # \ub300\ub7c9 \ucc98\ub9ac\n\n        channel.basic_consume(\n            queue='telemetry.archive',\n            on_message_callback=self.callback\n        )\n\n        print(' [*] Data Archiver started')\n        print(' [*] Subscribed to: sensor.#\\n')\n\n        channel.start_consuming()\n\nif __name__ == '__main__':\n    archiver = DataArchiver()\n\n    try:\n        archiver.start()\n    except KeyboardInterrupt:\n        print('\\nData Archiver stopped')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\uc131\ub2a5-\ud14c\uc2a4\ud2b8",children:"\ud83e\uddea \uc131\ub2a5 \ud14c\uc2a4\ud2b8"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# load_test.py\nimport pika\nimport time\nimport threading\nfrom models import Telemetry, DeviceType\nimport random\n\nclass LoadTester:\n    """\ubd80\ud558 \ud14c\uc2a4\ud2b8"""\n\n    def __init__(self, host=\'localhost\'):\n        self.host = host\n        self.sent_count = 0\n        self.lock = threading.Lock()\n\n    def publisher_thread(self, thread_id: int, messages_per_sec: int):\n        """Publisher \uc2a4\ub808\ub4dc"""\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.exchange_declare(\n            exchange=\'telemetry\',\n            exchange_type=\'topic\',\n            durable=True\n        )\n\n        interval = 1.0 / messages_per_sec\n\n        start_time = time.time()\n        duration = 60  # 1\ubd84\n\n        while time.time() - start_time < duration:\n            # \ub79c\ub364 \ud154\ub808\uba54\ud2b8\ub9ac \uc0dd\uc131\n            telemetry = Telemetry(\n                device_id=f\'DEVICE-{thread_id}-{random.randint(1, 100)}\',\n                device_type=random.choice(list(DeviceType)),\n                location=f\'building1.floor{random.randint(1, 5)}\',\n                value=random.uniform(20, 25),\n                unit=\'\xb0C\',\n                is_alert=False\n            )\n\n            routing_key = telemetry.get_routing_key()\n\n            channel.basic_publish(\n                exchange=\'telemetry\',\n                routing_key=routing_key,\n                body=telemetry.to_json(),\n                properties=pika.BasicProperties(delivery_mode=1)\n            )\n\n            with self.lock:\n                self.sent_count += 1\n\n            time.sleep(interval)\n\n        connection.close()\n\n    def run_test(self, publisher_count: int = 10, messages_per_sec: int = 100):\n        """\ubd80\ud558 \ud14c\uc2a4\ud2b8 \uc2e4\ud589"""\n        print(f" Load Test")\n        print(" " + "="*50)\n        print(f" Publishers: {publisher_count}")\n        print(f" Target Rate: {messages_per_sec * publisher_count} msg/s")\n        print(f" Duration: 60s\\n")\n\n        # Publisher \uc2a4\ub808\ub4dc \uc2dc\uc791\n        threads = []\n        start_time = time.time()\n\n        for i in range(publisher_count):\n            t = threading.Thread(\n                target=self.publisher_thread,\n                args=(i+1, messages_per_sec)\n            )\n            t.start()\n            threads.append(t)\n\n        # \uc9c4\ud589 \uc0c1\ud669 \ud45c\uc2dc\n        while any(t.is_alive() for t in threads):\n            elapsed = time.time() - start_time\n            rate = self.sent_count / elapsed if elapsed > 0 else 0\n\n            print(f"\\r Sent: {self.sent_count:6d} | "\n                  f"Rate: {rate:6.1f} msg/s | "\n                  f"Elapsed: {elapsed:4.1f}s",\n                  end=\'\')\n\n            time.sleep(1)\n\n        # \ubaa8\ub4e0 \uc2a4\ub808\ub4dc \uc644\ub8cc \ub300\uae30\n        for t in threads:\n            t.join()\n\n        # \uacb0\uacfc \ucd9c\ub825\n        total_time = time.time() - start_time\n        actual_rate = self.sent_count / total_time\n\n        print(f"\\n\\n Results:")\n        print(" " + "="*50)\n        print(f" Total Sent: {self.sent_count}")\n        print(f" Duration: {total_time:.2f}s")\n        print(f" Actual Rate: {actual_rate:.2f} msg/s")\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    tester = LoadTester()\n    tester.run_test(publisher_count=10, messages_per_sec=100)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-\uc2e4\ud589-\uacb0\uacfc-\uc608\uc2dc",children:"\ud83d\udcca \uc2e4\ud589 \uacb0\uacfc \uc608\uc2dc"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# IoT Gateway\n[*] IoT Gateway started\n[\u26a0] Alert: TEMP-001 = 27.2\xb0C\n[\u26a0] Alert: POW-001 = 85.3kW\n\n# Temperature Processor\n[TEMP] TEMP-001 @ building1.floor1.room101: 22.5\xb0C\n[TEMP] TEMP-002 @ building1.floor1.room102: 23.1\xb0C\n\n[\ud83d\udcca] Temperature Aggregation:\n   building1.floor1.room101:\n     Avg: 22.8\xb0C | Min: 21.5\xb0C | Max: 24.2\xb0C | Samples: 5\n\n# Alert Service\n\ud83d\udea8 CRITICAL ALERT\nDevice: TEMP-001\nValue: 27.2 \xb0C\nAction Required: Check device immediately!\n\n# Data Archiver\n[ARCHIVE] 100 records archived\n[ARCHIVE] 200 records archived\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Topic Exchange"}),": \ub370\uc774\ud130 \ud0c0\uc785\ubcc4 \uc720\uc5f0\ud55c \ub77c\uc6b0\ud305"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\uace0\uc18d \ucc98\ub9ac"}),": Non-persistent \uba54\uc2dc\uc9c0, Prefetch \ucd5c\uc801\ud654"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\uc2e4\uc2dc\uac04 \uc54c\ub9bc"}),": Alert \ud328\ud134 \ubcc4\ub3c4 \ucc98\ub9ac"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ub370\uc774\ud130 \uc9d1\uacc4"}),": \uc2dc\uac04 \uae30\ubc18 \ubc30\uce58 \ucc98\ub9ac"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.a,{href:"./scenario-06-audit-trail",children:"\uc2dc\ub098\ub9ac\uc624 6: \uac10\uc0ac \ucd94\uc801 \uc2dc\uc2a4\ud15c"})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);