"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[8320],{8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>a});var t=n(6540);const s={},d=t.createContext(s);function i(e){const o=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(d.Provider,{value:o},e.children)}},8555:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>r,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"fastapi/examples/scenario-01-todo-api","title":"\uc2dc\ub098\ub9ac\uc624 1: To-Do API","description":"\uc644\uc804\ud55c CRUD \uae30\ub2a5\uc744 \uac16\ucd98 To-Do API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-01-todo-api.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-01-todo-api","permalink":"/docs/fastapi/examples/scenario-01-todo-api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-01-todo-api.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"fastapiSidebar","previous":{"title":"\uc2e4\uc804 \uc608\uc81c \uc18c\uac1c","permalink":"/docs/fastapi/examples/intro"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 2: \ube14\ub85c\uadf8 API","permalink":"/docs/fastapi/examples/scenario-02-blog-api"}}');var s=n(4848),d=n(8453);const i={sidebar_position:2},a="\uc2dc\ub098\ub9ac\uc624 1: To-Do API",r={},l=[{value:"\ud83d\udccc \uae30\ub2a5 \uc694\uad6c\uc0ac\ud56d",id:"-\uae30\ub2a5-\uc694\uad6c\uc0ac\ud56d",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604",id:"-\uc644\uc804\ud55c-\uad6c\ud604",level:2},{value:"models.py",id:"modelspy",level:3},{value:"schemas.py",id:"schemaspy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"test_main.py",id:"test_mainpy",level:3},{value:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95",id:"-\uc2e4\ud589-\ubc29\ubc95",level:2},{value:"\ud83d\udcca API \ubb38\uc11c",id:"-api-\ubb38\uc11c",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function p(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"\uc2dc\ub098\ub9ac\uc624-1-to-do-api",children:"\uc2dc\ub098\ub9ac\uc624 1: To-Do API"})}),"\n",(0,s.jsx)(o.p,{children:"\uc644\uc804\ud55c CRUD \uae30\ub2a5\uc744 \uac16\ucd98 To-Do API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,s.jsx)(o.h2,{id:"-\uae30\ub2a5-\uc694\uad6c\uc0ac\ud56d",children:"\ud83d\udccc \uae30\ub2a5 \uc694\uad6c\uc0ac\ud56d"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"\u2705 \ud560 \uc77c \uc0dd\uc131"}),"\n",(0,s.jsx)(o.li,{children:"\u2705 \ud560 \uc77c \ubaa9\ub85d \uc870\ud68c (\ud544\ud130\ub9c1, \uc815\ub82c)"}),"\n",(0,s.jsx)(o.li,{children:"\u2705 \ud560 \uc77c \uc218\uc815"}),"\n",(0,s.jsx)(o.li,{children:"\u2705 \ud560 \uc77c \uc0ad\uc81c"}),"\n",(0,s.jsx)(o.li,{children:"\u2705 \uc644\ub8cc \uc0c1\ud0dc \ud1a0\uae00"}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:"todo-api/\n\u251c\u2500\u2500 main.py              # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 & API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\u251c\u2500\u2500 models.py            # SQLAlchemy \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378\n\u251c\u2500\u2500 schemas.py           # Pydantic \uc2a4\ud0a4\ub9c8 (\uc694\uccad/\uc751\ub2f5)\n\u251c\u2500\u2500 database.py          # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc124\uc815\n\u251c\u2500\u2500 test_main.py         # \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\n\u251c\u2500\u2500 requirements.txt     # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n\u2514\u2500\u2500 todo.db             # SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud30c\uc77c (\uc790\ub3d9 \uc0dd\uc131)\n"})}),"\n",(0,s.jsx)(o.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant C as Client\n    participant API as FastAPI\n    participant DB as Database\n\n    Note over C,DB: 1. \ud560 \uc77c \uc0dd\uc131\n    C->>API: POST /todos<br/>{title, description}\n    API->>DB: INSERT INTO todos\n    DB--\x3e>API: Todo created\n    API--\x3e>C: 201 Created<br/>Todo object\n\n    Note over C,DB: 2. \ud560 \uc77c \ubaa9\ub85d \uc870\ud68c\n    C->>API: GET /todos?completed=false\n    API->>DB: SELECT * FROM todos<br/>WHERE completed=false\n    DB--\x3e>API: List of todos\n    API--\x3e>C: 200 OK<br/>Todo list\n\n    Note over C,DB: 3. \ud560 \uc77c \uc218\uc815\n    C->>API: PUT /todos/{id}<br/>{title, completed}\n    API->>DB: UPDATE todos<br/>WHERE id={id}\n    DB--\x3e>API: Todo updated\n    API--\x3e>C: 200 OK<br/>Updated todo\n\n    Note over C,DB: 4. \uc644\ub8cc \uc0c1\ud0dc \ud1a0\uae00\n    C->>API: PATCH /todos/{id}/toggle\n    API->>DB: UPDATE todos<br/>SET completed=NOT completed\n    DB--\x3e>API: Todo toggled\n    API--\x3e>C: 200 OK<br/>Toggled todo\n\n    Note over C,DB: 5. \ud560 \uc77c \uc0ad\uc81c\n    C->>API: DELETE /todos/{id}\n    API->>DB: DELETE FROM todos<br/>WHERE id={id}\n    DB--\x3e>API: Todo deleted\n    API--\x3e>C: 204 No Content\n"})}),"\n",(0,s.jsx)(o.h2,{id:"-\uc644\uc804\ud55c-\uad6c\ud604",children:"\ud83d\udcdd \uc644\uc804\ud55c \uad6c\ud604"}),"\n",(0,s.jsx)(o.h3,{id:"modelspy",children:"models.py"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'# models.py\nfrom sqlalchemy import Column, Integer, String, Boolean, DateTime\nfrom sqlalchemy.sql import func\nfrom database import Base\n\nclass Todo(Base):\n    __tablename__ = "todos"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(String, nullable=True)\n    completed = Column(Boolean, default=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n'})}),"\n",(0,s.jsx)(o.h3,{id:"schemaspy",children:"schemas.py"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:"# schemas.py\nfrom pydantic import BaseModel\nfrom datetime import datetime\nfrom typing import Optional\n\nclass TodoBase(BaseModel):\n    title: str\n    description: Optional[str] = None\n\nclass TodoCreate(TodoBase):\n    pass\n\nclass TodoUpdate(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n    completed: Optional[bool] = None\n\nclass Todo(TodoBase):\n    id: int\n    completed: bool\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n\n    class Config:\n        from_attributes = True\n"})}),"\n",(0,s.jsx)(o.h3,{id:"mainpy",children:"main.py"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'# main.py\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nimport models, schemas\nfrom database import engine, get_db\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="To-Do API")\n\n@app.post("/todos", response_model=schemas.Todo, status_code=status.HTTP_201_CREATED)\ndef create_todo(todo: schemas.TodoCreate, db: Session = Depends(get_db)):\n    """\uc0c8\ub85c\uc6b4 \ud560 \uc77c \uc0dd\uc131"""\n    db_todo = models.Todo(**todo.dict())\n    db.add(db_todo)\n    db.commit()\n    db.refresh(db_todo)\n    return db_todo\n\n@app.get("/todos", response_model=List[schemas.Todo])\ndef list_todos(\n    skip: int = 0,\n    limit: int = 10,\n    completed: Optional[bool] = None,\n    db: Session = Depends(get_db)\n):\n    """\ud560 \uc77c \ubaa9\ub85d \uc870\ud68c"""\n    query = db.query(models.Todo)\n\n    if completed is not None:\n        query = query.filter(models.Todo.completed == completed)\n\n    todos = query.offset(skip).limit(limit).all()\n    return todos\n\n@app.get("/todos/{todo_id}", response_model=schemas.Todo)\ndef get_todo(todo_id: int, db: Session = Depends(get_db)):\n    """\ud2b9\uc815 \ud560 \uc77c \uc870\ud68c"""\n    todo = db.query(models.Todo).filter(models.Todo.id == todo_id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="Todo not found")\n    return todo\n\n@app.put("/todos/{todo_id}", response_model=schemas.Todo)\ndef update_todo(\n    todo_id: int,\n    todo_update: schemas.TodoUpdate,\n    db: Session = Depends(get_db)\n):\n    """\ud560 \uc77c \uc218\uc815"""\n    todo = db.query(models.Todo).filter(models.Todo.id == todo_id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="Todo not found")\n\n    for key, value in todo_update.dict(exclude_unset=True).items():\n        setattr(todo, key, value)\n\n    db.commit()\n    db.refresh(todo)\n    return todo\n\n@app.delete("/todos/{todo_id}", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_todo(todo_id: int, db: Session = Depends(get_db)):\n    """\ud560 \uc77c \uc0ad\uc81c"""\n    todo = db.query(models.Todo).filter(models.Todo.id == todo_id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="Todo not found")\n\n    db.delete(todo)\n    db.commit()\n\n@app.patch("/todos/{todo_id}/toggle", response_model=schemas.Todo)\ndef toggle_todo(todo_id: int, db: Session = Depends(get_db)):\n    """\uc644\ub8cc \uc0c1\ud0dc \ud1a0\uae00"""\n    todo = db.query(models.Todo).filter(models.Todo.id == todo_id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="Todo not found")\n\n    todo.completed = not todo.completed\n    db.commit()\n    db.refresh(todo)\n    return todo\n'})}),"\n",(0,s.jsx)(o.h3,{id:"test_mainpy",children:"test_main.py"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'# test_main.py\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef test_create_todo():\n    response = client.post("/todos", json={"title": "Test Todo"})\n    assert response.status_code == 201\n    assert response.json()["title"] == "Test Todo"\n    assert response.json()["completed"] == False\n\ndef test_list_todos():\n    response = client.get("/todos")\n    assert response.status_code == 200\n    assert isinstance(response.json(), list)\n\ndef test_get_todo():\n    # Create a todo first\n    create_response = client.post("/todos", json={"title": "Test"})\n    todo_id = create_response.json()["id"]\n\n    # Get the todo\n    response = client.get(f"/todos/{todo_id}")\n    assert response.status_code == 200\n    assert response.json()["id"] == todo_id\n\ndef test_update_todo():\n    # Create\n    create_response = client.post("/todos", json={"title": "Original"})\n    todo_id = create_response.json()["id"]\n\n    # Update\n    response = client.put(\n        f"/todos/{todo_id}",\n        json={"title": "Updated", "completed": True}\n    )\n    assert response.status_code == 200\n    assert response.json()["title"] == "Updated"\n    assert response.json()["completed"] == True\n\ndef test_toggle_todo():\n    # Create\n    create_response = client.post("/todos", json={"title": "Test"})\n    todo_id = create_response.json()["id"]\n\n    # Toggle\n    response = client.patch(f"/todos/{todo_id}/toggle")\n    assert response.status_code == 200\n    assert response.json()["completed"] == True\n\n    # Toggle again\n    response = client.patch(f"/todos/{todo_id}/toggle")\n    assert response.json()["completed"] == False\n\ndef test_delete_todo():\n    # Create\n    create_response = client.post("/todos", json={"title": "Test"})\n    todo_id = create_response.json()["id"]\n\n    # Delete\n    response = client.delete(f"/todos/{todo_id}")\n    assert response.status_code == 204\n\n    # Verify deleted\n    response = client.get(f"/todos/{todo_id}")\n    assert response.status_code == 404\n'})}),"\n",(0,s.jsx)(o.h2,{id:"-\uc2e4\ud589-\ubc29\ubc95",children:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:"# \uc2e4\ud589\nuvicorn main:app --reload\n\n# \ud14c\uc2a4\ud2b8\npytest test_main.py -v\n"})}),"\n",(0,s.jsx)(o.h2,{id:"-api-\ubb38\uc11c",children:"\ud83d\udcca API \ubb38\uc11c"}),"\n",(0,s.jsxs)(o.p,{children:["\ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c ",(0,s.jsx)(o.a,{href:"http://127.0.0.1:8000/docs%EB%A5%BC",children:"http://127.0.0.1:8000/docs\ub97c"})," \uc5f4\uc5b4 \uc790\ub3d9 \uc0dd\uc131\ub41c API \ubb38\uc11c\ub97c \ud655\uc778\ud558\uc138\uc694!"]}),"\n",(0,s.jsx)(o.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsxs)(o.p,{children:["\ud83d\udc49 ",(0,s.jsx)(o.a,{href:"./scenario-02-blog-api",children:"\ube14\ub85c\uadf8 API (\uc778\uc99d \ud3ec\ud568)"})]})]})}function c(e={}){const{wrapper:o}={...(0,d.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);