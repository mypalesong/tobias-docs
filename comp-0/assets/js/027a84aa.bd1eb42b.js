"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7699],{6362:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rabbitmq/intermediate/message-ttl","title":"Message TTL - \uba54\uc2dc\uc9c0 \ub9cc\ub8cc","description":"\uba54\uc2dc\uc9c0\uc758 \uc720\ud6a8 \uae30\uac04\uc744 \uc124\uc815\ud558\uc5ec \uc790\ub3d9\uc73c\ub85c \ub9cc\ub8cc\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/intermediate/message-ttl.md","sourceDirName":"rabbitmq/intermediate","slug":"/rabbitmq/intermediate/message-ttl","permalink":"/docs/rabbitmq/intermediate/message-ttl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/intermediate/message-ttl.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"rabbitmqSidebar","previous":{"title":"Priority Queue - \uc6b0\uc120\uc21c\uc704 \ud050","permalink":"/docs/rabbitmq/intermediate/priority-queue"}}');var i=s(4848),o=s(8453);const r={sidebar_position:5},c="Message TTL - \uba54\uc2dc\uc9c0 \ub9cc\ub8cc",a={},l=[{value:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c",id:"-\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"\ud83d\udcca \ud328\ud134 \uad6c\uc870",id:"-\ud328\ud134-\uad6c\uc870",level:2},{value:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624",id:"-\uc2dc\ub098\ub9ac\uc624",level:2},{value:"\ud83d\udd27 \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"\ubaa8\ub378 \uc815\uc758",id:"\ubaa8\ub378-\uc815\uc758",level:3},{value:"Queue \uc124\uc815 (Queue TTL)",id:"queue-\uc124\uc815-queue-ttl",level:3},{value:"Producer (\ucfe0\ud3f0 \ubc1c\ud589)",id:"producer-\ucfe0\ud3f0-\ubc1c\ud589",level:3},{value:"Consumer (\ucfe0\ud3f0 \uc0ac\uc6a9)",id:"consumer-\ucfe0\ud3f0-\uc0ac\uc6a9",level:3},{value:"Expired Coupon Handler",id:"expired-coupon-handler",level:3},{value:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc",id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",level:2},{value:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c",id:"-\uc2e4\ud589-\uc608\uc81c",level:2},{value:"1. Queue \uc124\uc815",id:"1-queue-\uc124\uc815",level:3},{value:"2. Handler\ub4e4 \uc2e4\ud589",id:"2-handler\ub4e4-\uc2e4\ud589",level:3},{value:"3. \ucfe0\ud3f0 \ubc1c\ud589",id:"3-\ucfe0\ud3f0-\ubc1c\ud589",level:3},{value:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"1. Queue TTL",id:"1-queue-ttl",level:3},{value:"2. Message TTL",id:"2-message-ttl",level:3},{value:"3. TTL \uc6b0\uc120\uc21c\uc704",id:"3-ttl-\uc6b0\uc120\uc21c\uc704",level:3},{value:"4. TTL + DLX",id:"4-ttl--dlx",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 \ud65c\uc6a9 \uc0ac\ub840",id:"-\uc2e4\uc804-\ud65c\uc6a9-\uc0ac\ub840",level:2},{value:"1. \uc138\uc158 \uad00\ub9ac",id:"1-\uc138\uc158-\uad00\ub9ac",level:3},{value:"2. \uce90\uc2dc \uc2dc\uc2a4\ud15c",id:"2-\uce90\uc2dc-\uc2dc\uc2a4\ud15c",level:3},{value:"3. \uc784\uc2dc \uc791\uc5c5 \ud050",id:"3-\uc784\uc2dc-\uc791\uc5c5-\ud050",level:3},{value:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d",id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",level:2},{value:"1. TTL\uc740 \ubb38\uc790\uc5f4 vs \uc815\uc218",id:"1-ttl\uc740-\ubb38\uc790\uc5f4-vs-\uc815\uc218",level:3},{value:"2. TTL\uacfc \uc131\ub2a5",id:"2-ttl\uacfc-\uc131\ub2a5",level:3},{value:"3. Per-Message TTL \uc21c\uc11c",id:"3-per-message-ttl-\uc21c\uc11c",level:3},{value:"\ud83d\udcca TTL \ud328\ud134 \ube44\uad50",id:"-ttl-\ud328\ud134-\ube44\uad50",level:2},{value:"\u2705 \uc2e4\uc2b5 \uacfc\uc81c",id:"-\uc2e4\uc2b5-\uacfc\uc81c",level:2},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"message-ttl---\uba54\uc2dc\uc9c0-\ub9cc\ub8cc",children:"Message TTL - \uba54\uc2dc\uc9c0 \ub9cc\ub8cc"})}),"\n",(0,i.jsx)(n.p,{children:"\uba54\uc2dc\uc9c0\uc758 \uc720\ud6a8 \uae30\uac04\uc744 \uc124\uc815\ud558\uc5ec \uc790\ub3d9\uc73c\ub85c \ub9cc\ub8cc\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,i.jsx)(n.h2,{id:"-\ud559\uc2b5-\ubaa9\ud45c",children:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Message TTL \uc774\ud574"}),"\n",(0,i.jsx)(n.li,{children:"Queue TTL \uc124\uc815"}),"\n",(0,i.jsx)(n.li,{children:"\uba54\uc2dc\uc9c0 \ub9cc\ub8cc \ucc98\ub9ac"}),"\n",(0,i.jsx)(n.li,{children:"\uce90\uc2dc \ud328\ud134 \uad6c\ud604"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\ud328\ud134-\uad6c\uc870",children:"\ud83d\udcca \ud328\ud134 \uad6c\uc870"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Producer \u2192 [Queue (TTL=10s)] \u2192 Consumer\n                \u2193\n           10\ucd08 \ud6c4 \ub9cc\ub8cc\n                \u2193\n         [Dead Letter Exchange]\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TTL \uc124\uc815 \ubc29\ubc95"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Queue TTL"}),": \ud050 \uc804\uccb4\uc5d0 \uc801\uc6a9"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message TTL"}),": \uba54\uc2dc\uc9c0\ubcc4 \uac1c\ubcc4 \uc124\uc815"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ub450 \uac00\uc9c0 \uc870\ud569"}),": \ub354 \uc9e7\uc740 \uc2dc\uac04 \uc801\uc6a9"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\uc2dc\ub098\ub9ac\uc624",children:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624"}),"\n",(0,i.jsx)(n.p,{children:"\uc2e4\uc2dc\uac04 \ud560\uc778 \ucfe0\ud3f0 \uc2dc\uc2a4\ud15c:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"10\ucd08 \ub3d9\uc548\ub9cc \uc720\ud6a8\ud55c \ud2b9\ubcc4 \ud560\uc778"}),"\n",(0,i.jsx)(n.li,{children:"\uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74 \uc790\ub3d9 \ub9cc\ub8cc"}),"\n",(0,i.jsx)(n.li,{children:"\ub9cc\ub8cc\ub41c \ucfe0\ud3f0\uc740 \ud1b5\uacc4 \uc218\uc9d1"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\uad6c\ud604",children:"\ud83d\udd27 \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"\ubaa8\ub378-\uc815\uc758",children:"\ubaa8\ub378 \uc815\uc758"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# models.py\nfrom dataclasses import dataclass, asdict\nfrom datetime import datetime, timedelta\nfrom typing import Optional\nimport json\n\n@dataclass\nclass Coupon:\n    """\ud560\uc778 \ucfe0\ud3f0"""\n    coupon_id: str\n    user_id: int\n    discount_percent: int\n    expires_in_seconds: int\n    created_at: str = None\n\n    def __post_init__(self):\n        if self.created_at is None:\n            self.created_at = datetime.now().isoformat()\n\n    def to_json(self) -> str:\n        return json.dumps(asdict(self))\n\n    @classmethod\n    def from_json(cls, json_str: str):\n        return cls(**json.loads(json_str))\n\n    def get_expiry_time(self) -> datetime:\n        """\ub9cc\ub8cc \uc2dc\uac04 \uacc4\uc0b0"""\n        created = datetime.fromisoformat(self.created_at)\n        return created + timedelta(seconds=self.expires_in_seconds)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"queue-\uc124\uc815-queue-ttl",children:"Queue \uc124\uc815 (Queue TTL)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# queue_setup.py\nimport pika\n\ndef setup_queues_with_ttl():\n    \"\"\"TTL\uc774 \uc124\uc815\ub41c \ud050\ub4e4 \uc0dd\uc131\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # 1. Dead Letter Exchange \uc124\uc815\n    channel.exchange_declare(\n        exchange='expired_coupons',\n        exchange_type='direct',\n        durable=True\n    )\n\n    # 2. \ub9cc\ub8cc \ucfe0\ud3f0 \uc218\uc9d1 \ud050\n    channel.queue_declare(\n        queue='expired_coupon_stats',\n        durable=True\n    )\n\n    channel.queue_bind(\n        exchange='expired_coupons',\n        queue='expired_coupon_stats',\n        routing_key='expired'\n    )\n\n    # 3. \ud65c\uc131 \ucfe0\ud3f0 \ud050 (Queue TTL = 10\ucd08)\n    channel.queue_declare(\n        queue='active_coupons',\n        durable=True,\n        arguments={\n            # \ud83d\udd11 Queue TTL: \ubaa8\ub4e0 \uba54\uc2dc\uc9c0\uac00 10\ucd08 \ud6c4 \ub9cc\ub8cc\n            'x-message-ttl': 10000,  # 10\ucd08 (\ubc00\ub9ac\ucd08)\n\n            # \ub9cc\ub8cc \uc2dc DLX\ub85c \uc774\ub3d9\n            'x-dead-letter-exchange': 'expired_coupons',\n            'x-dead-letter-routing-key': 'expired'\n        }\n    )\n\n    # 4. \ube60\ub978 \ub9cc\ub8cc \ud050 (Queue TTL = 5\ucd08)\n    channel.queue_declare(\n        queue='flash_coupons',\n        durable=True,\n        arguments={\n            'x-message-ttl': 5000,  # 5\ucd08\n            'x-dead-letter-exchange': 'expired_coupons',\n            'x-dead-letter-routing-key': 'expired'\n        }\n    )\n\n    # 5. TTL \uc5c6\ub294 \ud050 (\uba54\uc2dc\uc9c0\ubcc4 TTL \uc0ac\uc6a9)\n    channel.queue_declare(\n        queue='custom_ttl_coupons',\n        durable=True,\n        arguments={\n            'x-dead-letter-exchange': 'expired_coupons',\n            'x-dead-letter-routing-key': 'expired'\n        }\n    )\n\n    print(\" [\u2713] Queues with TTL configured:\")\n    print(\"     - active_coupons (10s)\")\n    print(\"     - flash_coupons (5s)\")\n    print(\"     - custom_ttl_coupons (per-message TTL)\")\n\n    connection.close()\n\nif __name__ == '__main__':\n    setup_queues_with_ttl()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"producer-\ucfe0\ud3f0-\ubc1c\ud589",children:"Producer (\ucfe0\ud3f0 \ubc1c\ud589)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# coupon_producer.py\nimport pika\nfrom models import Coupon\n\nclass CouponProducer:\n    \"\"\"\ucfe0\ud3f0 \ubc1c\ud589\uc790\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n\n    def issue_coupon(\n        self,\n        coupon: Coupon,\n        queue: str = 'active_coupons',\n        custom_ttl: int = None\n    ):\n        \"\"\"\n        \ucfe0\ud3f0 \ubc1c\ud589\n\n        Args:\n            coupon: \ucfe0\ud3f0 \uc815\ubcf4\n            queue: \ub300\uc0c1 \ud050\n            custom_ttl: \uac1c\ubcc4 TTL (\ubc00\ub9ac\ucd08, \uc120\ud0dd\uc0ac\ud56d)\n        \"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        properties = pika.BasicProperties(\n            delivery_mode=2,\n            content_type='application/json'\n        )\n\n        # \ud83d\udd11 Message TTL \uc124\uc815 (\uc120\ud0dd\uc0ac\ud56d)\n        if custom_ttl:\n            properties.expiration = str(custom_ttl)\n\n        channel.basic_publish(\n            exchange='',\n            routing_key=queue,\n            body=coupon.to_json(),\n            properties=properties\n        )\n\n        ttl_info = f\"TTL={custom_ttl}ms\" if custom_ttl else \"queue TTL\"\n        print(f\" [x] Issued coupon {coupon.coupon_id} ({ttl_info})\")\n\n        connection.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    producer = CouponProducer()\n\n    # 1. Queue TTL \uc0ac\uc6a9 (10\ucd08)\n    coupon1 = Coupon(\n        'COUP-001',\n        user_id=1001,\n        discount_percent=20,\n        expires_in_seconds=10\n    )\n    producer.issue_coupon(coupon1, queue='active_coupons')\n\n    # 2. \ube60\ub978 \ub9cc\ub8cc (5\ucd08)\n    coupon2 = Coupon(\n        'COUP-002',\n        user_id=1002,\n        discount_percent=50,\n        expires_in_seconds=5\n    )\n    producer.issue_coupon(coupon2, queue='flash_coupons')\n\n    # 3. \uac1c\ubcc4 TTL (3\ucd08)\n    coupon3 = Coupon(\n        'COUP-003',\n        user_id=1003,\n        discount_percent=30,\n        expires_in_seconds=3\n    )\n    producer.issue_coupon(\n        coupon3,\n        queue='custom_ttl_coupons',\n        custom_ttl=3000  # 3\ucd08\n    )\n\n    print(\"\\n [i] Coupons issued!\")\n    print(\" [i] They will expire automatically if not used\")\n"})}),"\n",(0,i.jsx)(n.h3,{id:"consumer-\ucfe0\ud3f0-\uc0ac\uc6a9",children:"Consumer (\ucfe0\ud3f0 \uc0ac\uc6a9)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# coupon_consumer.py\nimport pika\nimport time\nfrom datetime import datetime\nfrom models import Coupon\n\ndef use_coupon(coupon: Coupon) -> bool:\n    """\n    \ucfe0\ud3f0 \uc0ac\uc6a9\n\n    Returns:\n        True: \uc131\uacf5\n        False: \uc2e4\ud328\n    """\n    now = datetime.now()\n    expiry = coupon.get_expiry_time()\n\n    print(f"""\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \ud83c\udf9f\ufe0f  Coupon Usage\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    Coupon ID: {coupon.coupon_id}\n    User ID: {coupon.user_id}\n    Discount: {coupon.discount_percent}%\n    Created: {coupon.created_at}\n    Expires: {expiry.isoformat()}\n    Status: {\'\u2713 Valid\' if now < expiry else \'\u2717 Expired\'}\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    """)\n\n    # \ucfe0\ud3f0 \uc801\uc6a9 (\uc2dc\ubbac\ub808\uc774\uc158)\n    time.sleep(1)\n\n    return True\n\ndef callback(ch, method, properties, body):\n    """\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31"""\n    coupon = Coupon.from_json(body.decode())\n\n    use_coupon(coupon)\n\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start(queue_name: str = \'active_coupons\'):\n    """Coupon Consumer \uc2dc\uc791"""\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(\'localhost\')\n    )\n    channel = connection.channel()\n\n    channel.basic_qos(prefetch_count=1)\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=callback\n    )\n\n    print(f\' [*] Coupon Consumer waiting on [{queue_name}]...\')\n    print(\' [*] Coupons will expire if not consumed in time\')\n    channel.start_consuming()\n\nif __name__ == \'__main__\':\n    import sys\n    queue = sys.argv[1] if len(sys.argv) > 1 else \'active_coupons\'\n\n    try:\n        start(queue)\n    except KeyboardInterrupt:\n        print(\'\\nCoupon Consumer stopped\')\n'})}),"\n",(0,i.jsx)(n.h3,{id:"expired-coupon-handler",children:"Expired Coupon Handler"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# expired_handler.py\nimport pika\nimport json\nfrom datetime import datetime\nfrom models import Coupon\n\ndef handle_expired_coupon(ch, method, properties, body):\n    \"\"\"\ub9cc\ub8cc\ub41c \ucfe0\ud3f0 \ucc98\ub9ac\"\"\"\n    coupon = Coupon.from_json(body.decode())\n\n    print(f\"\"\"\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \u23f0 COUPON EXPIRED\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    Coupon ID: {coupon.coupon_id}\n    User ID: {coupon.user_id}\n    Discount: {coupon.discount_percent}%\n    Created: {coupon.created_at}\n    Expired: {datetime.now().isoformat()}\n\n    Reason: Not used within {coupon.expires_in_seconds}s\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \"\"\")\n\n    # \ud1b5\uacc4 \uc800\uc7a5\n    save_expiry_stats(coupon)\n\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef save_expiry_stats(coupon: Coupon):\n    \"\"\"\ub9cc\ub8cc \ud1b5\uacc4 \uc800\uc7a5\"\"\"\n    with open('expired_coupons.jsonl', 'a', encoding='utf-8') as f:\n        stats = {\n            'coupon_id': coupon.coupon_id,\n            'user_id': coupon.user_id,\n            'discount': coupon.discount_percent,\n            'expired_at': datetime.now().isoformat(),\n            'ttl': coupon.expires_in_seconds\n        }\n        f.write(json.dumps(stats) + '\\n')\n\ndef start():\n    \"\"\"Expired Coupon Handler \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.basic_consume(\n        queue='expired_coupon_stats',\n        on_message_callback=handle_expired_coupon\n    )\n\n    print(' [*] Expired Coupon Handler waiting...')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nExpired Handler stopped')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",children:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# test_message_ttl.py\nimport pytest\nimport pika\nimport time\n\nclass TestMessageTTL:\n    \"\"\"Message TTL \ud14c\uc2a4\ud2b8\"\"\"\n\n    @pytest.fixture\n    def setup(self):\n        \"\"\"\ud14c\uc2a4\ud2b8 \ud658\uacbd \uc124\uc815\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        # \uae30\uc874 \ud050 \uc0ad\uc81c\n        for queue in ['test.ttl.queue', 'test.ttl.dlq']:\n            try:\n                channel.queue_delete(queue=queue)\n            except:\n                pass\n\n        try:\n            channel.exchange_delete(exchange='test.dlx')\n        except:\n            pass\n\n        yield channel\n        connection.close()\n\n    def test_queue_ttl(self, setup):\n        \"\"\"Queue TTL \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        # DLX \uc124\uc815\n        channel.exchange_declare(exchange='test.dlx', exchange_type='direct')\n        channel.queue_declare(queue='test.ttl.dlq')\n        channel.queue_bind(\n            exchange='test.dlx',\n            queue='test.ttl.dlq',\n            routing_key='expired'\n        )\n\n        # Queue TTL = 1\ucd08\n        channel.queue_declare(\n            queue='test.ttl.queue',\n            arguments={\n                'x-message-ttl': 1000,  # 1\ucd08\n                'x-dead-letter-exchange': 'test.dlx',\n                'x-dead-letter-routing-key': 'expired'\n            }\n        )\n\n        # \uba54\uc2dc\uc9c0 \ubc1c\ud589\n        channel.basic_publish(\n            exchange='',\n            routing_key='test.ttl.queue',\n            body='Will expire'\n        )\n\n        # \uc989\uc2dc\ub294 \uba54\uc2dc\uc9c0 \uc788\uc74c\n        method, properties, body = channel.basic_get(\n            queue='test.ttl.queue',\n            auto_ack=True\n        )\n        assert body == b'Will expire'\n\n        # \ub2e4\uc2dc \ubc1c\ud589\n        channel.basic_publish(\n            exchange='',\n            routing_key='test.ttl.queue',\n            body='Will expire'\n        )\n\n        # 1\ucd08 \ub300\uae30\n        time.sleep(1.1)\n\n        # Main \ud050\ub294 \ube44\uc5b4\uc788\uc74c\n        assert channel.basic_get(queue='test.ttl.queue', auto_ack=True)[0] is None\n\n        # DLQ\uc5d0 \uc788\uc74c\n        method, properties, body = channel.basic_get(\n            queue='test.ttl.dlq',\n            auto_ack=True\n        )\n        assert body == b'Will expire'\n\n    def test_message_ttl(self, setup):\n        \"\"\"Message TTL \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        channel.exchange_declare(exchange='test.dlx', exchange_type='direct')\n        channel.queue_declare(queue='test.ttl.dlq')\n        channel.queue_bind(\n            exchange='test.dlx',\n            queue='test.ttl.dlq',\n            routing_key='expired'\n        )\n\n        # Queue TTL \uc5c6\uc74c\n        channel.queue_declare(\n            queue='test.ttl.queue',\n            arguments={\n                'x-dead-letter-exchange': 'test.dlx',\n                'x-dead-letter-routing-key': 'expired'\n            }\n        )\n\n        # \uba54\uc2dc\uc9c0\ubcc4 TTL = 0.5\ucd08\n        channel.basic_publish(\n            exchange='',\n            routing_key='test.ttl.queue',\n            body='Quick expire',\n            properties=pika.BasicProperties(\n                expiration='500'  # 500ms\n            )\n        )\n\n        time.sleep(0.6)\n\n        # Main \ud050\ub294 \ube44\uc5b4\uc788\uc74c\n        assert channel.basic_get(queue='test.ttl.queue', auto_ack=True)[0] is None\n\n        # DLQ\uc5d0 \uc788\uc74c\n        method, properties, body = channel.basic_get(\n            queue='test.ttl.dlq',\n            auto_ack=True\n        )\n        assert body == b'Quick expire'\n\n    def test_mixed_ttl(self, setup):\n        \"\"\"Queue TTL\uacfc Message TTL \ud63c\ud569\"\"\"\n        channel = setup\n\n        # Queue TTL = 2\ucd08\n        channel.queue_declare(\n            queue='test.ttl.queue',\n            arguments={'x-message-ttl': 2000}\n        )\n\n        # Message TTL = 1\ucd08 (\ub354 \uc9e7\uc74c)\n        channel.basic_publish(\n            exchange='',\n            routing_key='test.ttl.queue',\n            body='Shorter TTL wins',\n            properties=pika.BasicProperties(expiration='1000')\n        )\n\n        # 1\ucd08 \ub300\uae30\n        time.sleep(1.1)\n\n        # \uba54\uc2dc\uc9c0 \ub9cc\ub8cc\ub428 (Message TTL\uc774 \ub354 \uc9e7\uc544\uc11c)\n        assert channel.basic_get(queue='test.ttl.queue', auto_ack=True)[0] is None\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\uc2e4\ud589-\uc608\uc81c",children:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c"}),"\n",(0,i.jsx)(n.h3,{id:"1-queue-\uc124\uc815",children:"1. Queue \uc124\uc815"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python queue_setup.py\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-handler\ub4e4-\uc2e4\ud589",children:"2. Handler\ub4e4 \uc2e4\ud589"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 1 - Expired Handler\npython expired_handler.py\n\n# \ud130\ubbf8\ub110 2 - Coupon Consumer (\ub290\ub9ac\uac8c \ucc98\ub9ac)\npython coupon_consumer.py\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-\ucfe0\ud3f0-\ubc1c\ud589",children:"3. \ucfe0\ud3f0 \ubc1c\ud589"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 3\npython coupon_producer.py\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\uacb0\uacfc"})," (Consumer\uac00 \ub290\ub9b4 \ub54c):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Producer\n[x] Issued coupon COUP-001 (queue TTL)\n[x] Issued coupon COUP-002 (queue TTL)\n[x] Issued coupon COUP-003 (TTL=3000ms)\n\n# Coupon Consumer (\uc77c\ubd80\ub9cc \ucc98\ub9ac)\n\ud83c\udf9f\ufe0f  Coupon Usage\nCoupon ID: COUP-001\nStatus: \u2713 Valid\n\n# Expired Handler (\ub098\uba38\uc9c0\ub294 \ub9cc\ub8cc)\n\u23f0 COUPON EXPIRED\nCoupon ID: COUP-002\nReason: Not used within 10s\n---\n\u23f0 COUPON EXPIRED\nCoupon ID: COUP-003\nReason: Not used within 3s\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,i.jsx)(n.h3,{id:"1-queue-ttl",children:"1. Queue TTL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \ud050 \uc804\uccb4\uc5d0 TTL \uc801\uc6a9\nchannel.queue_declare(\n    queue='my_queue',\n    arguments={\n        'x-message-ttl': 10000  # 10\ucd08 (\ubc00\ub9ac\ucd08)\n    }\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-message-ttl",children:"2. Message TTL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \uba54\uc2dc\uc9c0\ubcc4 \uac1c\ubcc4 TTL\nchannel.basic_publish(\n    exchange='',\n    routing_key='my_queue',\n    body=message,\n    properties=pika.BasicProperties(\n        expiration='5000'  # 5\ucd08 (\ubb38\uc790\uc5f4!)\n    )\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-ttl-\uc6b0\uc120\uc21c\uc704",children:"3. TTL \uc6b0\uc120\uc21c\uc704"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Queue TTL = 10\ucd08\n# Message TTL = 5\ucd08\n# \u2192 \ub354 \uc9e7\uc740 5\ucd08 \uc801\uc6a9\n\n# Queue TTL = 5\ucd08\n# Message TTL = 10\ucd08\n# \u2192 \ub354 \uc9e7\uc740 5\ucd08 \uc801\uc6a9\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-ttl--dlx",children:"4. TTL + DLX"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# TTL \ub9cc\ub8cc \uc2dc DLX\ub85c \uc774\ub3d9\nchannel.queue_declare(\n    queue='main',\n    arguments={\n        'x-message-ttl': 10000,\n        'x-dead-letter-exchange': 'dlx',\n        'x-dead-letter-routing-key': 'expired'\n    }\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\uc2e4\uc804-\ud65c\uc6a9-\uc0ac\ub840",children:"\ud83d\udca1 \uc2e4\uc804 \ud65c\uc6a9 \uc0ac\ub840"}),"\n",(0,i.jsx)(n.h3,{id:"1-\uc138\uc158-\uad00\ub9ac",children:"1. \uc138\uc158 \uad00\ub9ac"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# session_manager.py\nimport pika\nimport json\n\ndef create_session(user_id: int, session_id: str):\n    \"\"\"\uc138\uc158 \uc0dd\uc131 (30\ubd84 TTL)\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # \uc138\uc158 \ud050 (30\ubd84 TTL)\n    channel.queue_declare(\n        queue='sessions',\n        arguments={\n            'x-message-ttl': 1800000,  # 30\ubd84\n            'x-dead-letter-exchange': 'expired_sessions'\n        }\n    )\n\n    session_data = {\n        'user_id': user_id,\n        'session_id': session_id,\n        'created_at': datetime.now().isoformat()\n    }\n\n    channel.basic_publish(\n        exchange='',\n        routing_key='sessions',\n        body=json.dumps(session_data)\n    )\n\n    print(f\" [x] Session created: {session_id} (expires in 30min)\")\n    connection.close()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-\uce90\uc2dc-\uc2dc\uc2a4\ud15c",children:"2. \uce90\uc2dc \uc2dc\uc2a4\ud15c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# cache_system.py\nimport pika\nimport json\n\nclass MessageCache:\n    \"\"\"\uba54\uc2dc\uc9c0 \uae30\ubc18 \uce90\uc2dc (TTL \uc0ac\uc6a9)\"\"\"\n\n    def __init__(self):\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        self.channel = self.connection.channel()\n\n        # \uce90\uc2dc \ud050 (5\ubd84 TTL)\n        self.channel.queue_declare(\n            queue='cache',\n            arguments={'x-message-ttl': 300000}  # 5\ubd84\n        )\n\n    def set(self, key: str, value: str, ttl_ms: int = None):\n        \"\"\"\uce90\uc2dc \uc124\uc815\"\"\"\n        cache_entry = {'key': key, 'value': value}\n\n        properties = pika.BasicProperties()\n        if ttl_ms:\n            properties.expiration = str(ttl_ms)\n\n        self.channel.basic_publish(\n            exchange='',\n            routing_key='cache',\n            body=json.dumps(cache_entry),\n            properties=properties\n        )\n\n# \uc0ac\uc6a9 \uc608\ncache = MessageCache()\ncache.set('user:1001', '{\"name\": \"Alice\"}', ttl_ms=60000)  # 1\ubd84\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-\uc784\uc2dc-\uc791\uc5c5-\ud050",children:"3. \uc784\uc2dc \uc791\uc5c5 \ud050"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# temp_tasks.py\nimport pika\n\ndef schedule_temp_task(task: str, ttl_seconds: int):\n    \"\"\"\uc784\uc2dc \uc791\uc5c5 \uc2a4\ucf00\uc904\ub9c1\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # \uc784\uc2dc \uc791\uc5c5 \ud050\n    channel.queue_declare(\n        queue='temp_tasks',\n        arguments={\n            'x-dead-letter-exchange': 'cancelled_tasks'\n        }\n    )\n\n    channel.basic_publish(\n        exchange='',\n        routing_key='temp_tasks',\n        body=task,\n        properties=pika.BasicProperties(\n            expiration=str(ttl_seconds * 1000)\n        )\n    )\n\n    print(f\" [x] Task scheduled (expires in {ttl_seconds}s)\")\n    connection.close()\n\n# \uc0ac\uc6a9 \uc608\nschedule_temp_task('cleanup_temp_files', ttl_seconds=3600)  # 1\uc2dc\uac04\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",children:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d"}),"\n",(0,i.jsx)(n.h3,{id:"1-ttl\uc740-\ubb38\uc790\uc5f4-vs-\uc815\uc218",children:"1. TTL\uc740 \ubb38\uc790\uc5f4 vs \uc815\uc218"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Queue TTL: \uc815\uc218 (\ubc00\ub9ac\ucd08)\narguments={'x-message-ttl': 10000}\n\n# Message TTL: \ubb38\uc790\uc5f4 (\ubc00\ub9ac\ucd08)\nproperties=pika.BasicProperties(expiration='10000')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-ttl\uacfc-\uc131\ub2a5",children:"2. TTL\uacfc \uc131\ub2a5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Message TTL (\uac1c\ubcc4): \uc131\ub2a5 \uc800\ud558\n# - \uba54\uc2dc\uc9c0\ub9c8\ub2e4 \ub9cc\ub8cc \uc2dc\uac04 \uccb4\ud06c\n# - \ud050\uac00 \ub290\ub824\uc9c8 \uc218 \uc788\uc74c\n\n# Queue TTL (\uc804\uccb4): \ube60\ub984\n# - \ud55c\ubc88\ub9cc \uccb4\ud06c\n# - \uad8c\uc7a5 \ubc29\uc2dd\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-per-message-ttl-\uc21c\uc11c",children:"3. Per-Message TTL \uc21c\uc11c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Per-Message TTL\uc740 \ud050 \uc55e\uc5d0\uc11c\ub9cc \uccb4\ud06c\ub428!\n\n# \uba54\uc2dc\uc9c0 \ubc1c\ud589 \uc21c\uc11c:\n# msg1 (TTL=10s)\n# msg2 (TTL=1s)  \u2190 \uc774\uac83\uc774 \uba3c\uc800 \ub9cc\ub8cc\ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc\n# msg3 (TTL=5s)\n\n# \u2192 msg1\uc774 \ucc98\ub9ac/\ub9cc\ub8cc\ub418\uae30 \uc804\uae4c\uc9c0 msg2\ub294 \ub9cc\ub8cc \uc548\ub428!\n# \u2192 \uc21c\uc11c \ubb38\uc81c \ubc1c\uc0dd \uac00\ub2a5\n\n# \ud574\uacb0: Queue TTL \uc0ac\uc6a9 \uad8c\uc7a5\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-ttl-\ud328\ud134-\ube44\uad50",children:"\ud83d\udcca TTL \ud328\ud134 \ube44\uad50"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"\ud328\ud134"}),(0,i.jsx)(n.th,{children:"\uc0ac\uc6a9 \uc0ac\ub840"}),(0,i.jsx)(n.th,{children:"\uc7a5\uc810"}),(0,i.jsx)(n.th,{children:"\ub2e8\uc810"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Queue TTL"})}),(0,i.jsx)(n.td,{children:"\ubaa8\ub4e0 \uba54\uc2dc\uc9c0 \ub3d9\uc77c TTL"}),(0,i.jsx)(n.td,{children:"\ube60\ub984, \uc608\uce21 \uac00\ub2a5"}),(0,i.jsx)(n.td,{children:"\uc720\uc5f0\uc131 \ub0ae\uc74c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Message TTL"})}),(0,i.jsx)(n.td,{children:"\uba54\uc2dc\uc9c0\ubcc4 \ub2e4\ub978 TTL"}),(0,i.jsx)(n.td,{children:"\uc720\uc5f0\ud568"}),(0,i.jsx)(n.td,{children:"\ub290\ub9bc, \uc21c\uc11c \ubb38\uc81c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"TTL + DLX"})}),(0,i.jsx)(n.td,{children:"\ub9cc\ub8cc \uba54\uc2dc\uc9c0 \ucc98\ub9ac"}),(0,i.jsx)(n.td,{children:"\ud1b5\uacc4/\ubaa8\ub2c8\ud130\ub9c1"}),(0,i.jsx)(n.td,{children:"\ubcf5\uc7a1\ud568"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Retry Queue"})}),(0,i.jsx)(n.td,{children:"\uc9c0\uc5f0 \uc7ac\uc2dc\ub3c4"}),(0,i.jsx)(n.td,{children:"\uc790\ub3d9 \uc7ac\uc2dc\ub3c4"}),(0,i.jsx)(n.td,{children:"\uad00\ub9ac \ud544\uc694"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"-\uc2e4\uc2b5-\uacfc\uc81c",children:"\u2705 \uc2e4\uc2b5 \uacfc\uc81c"}),"\n",(0,i.jsx)(n.p,{children:"\ub2e4\uc74c \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud558\uc138\uc694:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\uc54c\ub9bc \uc2dc\uc2a4\ud15c"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\uae34\uae09 \uc54c\ub9bc: 10\ucd08 TTL"}),"\n",(0,i.jsx)(n.li,{children:"\uc77c\ubc18 \uc54c\ub9bc: 1\ubd84 TTL"}),"\n",(0,i.jsx)(n.li,{children:"\uad11\uace0 \uc54c\ub9bc: 10\ubd84 TTL"}),"\n",(0,i.jsx)(n.li,{children:"\ub9cc\ub8cc\ub41c \uc54c\ub9bc\uc740 \ud1b5\uacc4 \uc218\uc9d1"}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"\uc815\ub2f5 \ubcf4\uae30"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# notification_system.py\nimport pika\nimport json\n\ndef send_notification(message: str, urgency: str):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # TTL \ub9e4\ud551\n    ttl_map = {\n        'urgent': 10000,    # 10\ucd08\n        'normal': 60000,    # 1\ubd84\n        'ad': 600000        # 10\ubd84\n    }\n\n    # \uc54c\ub9bc \ud050 (DLX \uc124\uc815)\n    channel.queue_declare(\n        queue='notifications',\n        arguments={\n            'x-dead-letter-exchange': 'expired_notifications'\n        }\n    )\n\n    ttl = ttl_map.get(urgency, 60000)\n\n    channel.basic_publish(\n        exchange='',\n        routing_key='notifications',\n        body=json.dumps({'message': message, 'urgency': urgency}),\n        properties=pika.BasicProperties(\n            expiration=str(ttl)\n        )\n    )\n\n    print(f\" [x] Notification sent ({urgency}, TTL={ttl}ms)\")\n    connection.close()\n\n# \ud14c\uc2a4\ud2b8\nsend_notification('Server down!', 'urgent')\nsend_notification('New message', 'normal')\nsend_notification('Sale today!', 'ad')\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Queue TTL"}),": \ud050 \uc804\uccb4\uc5d0 TTL \uc801\uc6a9 (",(0,i.jsx)(n.code,{children:"x-message-ttl"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message TTL"}),": \uba54\uc2dc\uc9c0\ubcc4 \uac1c\ubcc4 TTL (",(0,i.jsx)(n.code,{children:"expiration"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\ub9cc\ub8cc \ucc98\ub9ac"}),": DLX\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\uc5ec \ub9cc\ub8cc \uba54\uc2dc\uc9c0 \ucc98\ub9ac"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\uc131\ub2a5"}),": Queue TTL\uc774 Message TTL\ubcf4\ub2e4 \ube60\ub984"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,i.jsx)(n.p,{children:"\uc911\uae09\ud3b8\uc744 \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4! \uc774\uc81c \uace0\uae09 \ub0b4\uc6a9\uc73c\ub85c \ub118\uc5b4\uac00\ubd05\uc2dc\ub2e4."}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.a,{href:"../advanced/intro",children:"\uace0\uae09\ud3b8: \ud074\ub7ec\uc2a4\ud130\ub9c1"})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);