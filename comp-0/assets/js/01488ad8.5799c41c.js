"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[511],{2500:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>r,default:()=>d,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"github/advanced/git-hooks","title":"Git Hooks","description":"Git Hooks\ub97c \uc0ac\uc6a9\ud558\uc5ec Git \uc774\ubca4\ud2b8\uc5d0 \ub530\ub77c \uc790\ub3d9\ud654\ub41c \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/github/advanced/git-hooks.md","sourceDirName":"github/advanced","slug":"/github/advanced/git-hooks","permalink":"/tobias-docs/comp-0/docs/github/advanced/git-hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/github/advanced/git-hooks.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"githubSidebar","previous":{"title":"\uace0\uae09\ud3b8 \uc2dc\uc791\ud558\uae30","permalink":"/tobias-docs/comp-0/docs/github/advanced/intro"},"next":{"title":"Cherry-pick","permalink":"/tobias-docs/comp-0/docs/github/advanced/cherry-pick"}}');var o=i(4848),c=i(8453);const t={sidebar_position:2},r="Git Hooks",h={},l=[{value:"Git Hooks\ub780?",id:"git-hooks\ub780",level:2},{value:"Hooks \uc704\uce58",id:"hooks-\uc704\uce58",level:2},{value:"Client-side Hooks",id:"client-side-hooks",level:2},{value:"pre-commit",id:"pre-commit",level:3},{value:"prepare-commit-msg",id:"prepare-commit-msg",level:3},{value:"commit-msg",id:"commit-msg",level:3},{value:"pre-push",id:"pre-push",level:3},{value:"Server-side Hooks",id:"server-side-hooks",level:2},{value:"pre-receive",id:"pre-receive",level:3},{value:"update",id:"update",level:3},{value:"post-receive",id:"post-receive",level:3},{value:"\uc2e4\uc2b5 \uc608\uc81c",id:"\uc2e4\uc2b5-\uc608\uc81c",level:2},{value:"\uc608\uc81c 1: \ub9b0\ud130 \uc790\ub3d9 \uc2e4\ud589",id:"\uc608\uc81c-1-\ub9b0\ud130-\uc790\ub3d9-\uc2e4\ud589",level:3},{value:"\uc608\uc81c 2: \ucee4\ubc0b \uba54\uc2dc\uc9c0\uc5d0 Issue \ubc88\ud638 \ud544\uc218",id:"\uc608\uc81c-2-\ucee4\ubc0b-\uba54\uc2dc\uc9c0\uc5d0-issue-\ubc88\ud638-\ud544\uc218",level:3},{value:"\uc608\uc81c 3: \ubbfc\uac10\ud55c \uc815\ubcf4 \uac80\uc0ac",id:"\uc608\uc81c-3-\ubbfc\uac10\ud55c-\uc815\ubcf4-\uac80\uc0ac",level:3},{value:"Hooks \uacf5\uc720\ud558\uae30",id:"hooks-\uacf5\uc720\ud558\uae30",level:2},{value:"\ubc29\ubc95 1: \uc2a4\ud06c\ub9bd\ud2b8 \ub514\ub809\ud1a0\ub9ac",id:"\ubc29\ubc95-1-\uc2a4\ud06c\ub9bd\ud2b8-\ub514\ub809\ud1a0\ub9ac",level:3},{value:"\ubc29\ubc95 2: Husky \uc0ac\uc6a9 (Node.js)",id:"\ubc29\ubc95-2-husky-\uc0ac\uc6a9-nodejs",level:3},{value:"\ubc29\ubc95 3: pre-commit Framework",id:"\ubc29\ubc95-3-pre-commit-framework",level:3},{value:"\uace0\uae09 Hooks",id:"\uace0\uae09-hooks",level:2},{value:"\uc870\uac74\ubd80 \uc2e4\ud589",id:"\uc870\uac74\ubd80-\uc2e4\ud589",level:3},{value:"\uc5ec\ub7ec \uba85\ub839\uc5b4 \uc2e4\ud589",id:"\uc5ec\ub7ec-\uba85\ub839\uc5b4-\uc2e4\ud589",level:3},{value:"\uc131\ub2a5 \ucd5c\uc801\ud654",id:"\uc131\ub2a5-\ucd5c\uc801\ud654",level:3},{value:"\ub514\ubc84\uae45",id:"\ub514\ubc84\uae45",level:2},{value:"Hook \uc2e4\ud589 \ud655\uc778",id:"hook-\uc2e4\ud589-\ud655\uc778",level:3},{value:"Hook \uc77c\uc2dc \ube44\ud65c\uc131\ud654",id:"hook-\uc77c\uc2dc-\ube44\ud65c\uc131\ud654",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. \ube60\ub974\uac8c \uc720\uc9c0",id:"1-\ube60\ub974\uac8c-\uc720\uc9c0",level:3},{value:"2. \uba85\ud655\ud55c \uc5d0\ub7ec \uba54\uc2dc\uc9c0",id:"2-\uba85\ud655\ud55c-\uc5d0\ub7ec-\uba54\uc2dc\uc9c0",level:3},{value:"3. \uc120\ud0dd\uc801 \uc2e4\ud589",id:"3-\uc120\ud0dd\uc801-\uc2e4\ud589",level:3},{value:"4. \ubb38\uc11c\ud654",id:"4-\ubb38\uc11c\ud654",level:3},{value:"\ub2e4\uc74c \ub2e8\uacc4",id:"\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"git-hooks",children:"Git Hooks"})}),"\n",(0,o.jsx)(n.p,{children:"Git Hooks\ub97c \uc0ac\uc6a9\ud558\uc5ec Git \uc774\ubca4\ud2b8\uc5d0 \ub530\ub77c \uc790\ub3d9\ud654\ub41c \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.h2,{id:"git-hooks\ub780",children:"Git Hooks\ub780?"}),"\n",(0,o.jsx)(n.p,{children:"Git Hooks\ub294 Git \uc774\ubca4\ud2b8\uac00 \ubc1c\uc0dd\ud560 \ub54c \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ub418\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uc785\ub2c8\ub2e4. \ucf54\ub4dc \ud488\uc9c8 \uac80\uc99d, \ucee4\ubc0b \uba54\uc2dc\uc9c0 \uac80\uc0ac, \uc790\ub3d9 \ubc30\ud3ec \ub4f1\uc5d0 \ud65c\uc6a9\ub429\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.h2,{id:"hooks-\uc704\uce58",children:"Hooks \uc704\uce58"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# \ub85c\uceec hooks\n.git/hooks/\n\n# \uc0d8\ud50c \ud30c\uc77c\ub4e4\n.git/hooks/pre-commit.sample\n.git/hooks/commit-msg.sample\n.git/hooks/pre-push.sample\n"})}),"\n",(0,o.jsx)(n.h2,{id:"client-side-hooks",children:"Client-side Hooks"}),"\n",(0,o.jsx)(n.h3,{id:"pre-commit",children:"pre-commit"}),"\n",(0,o.jsx)(n.p,{children:"\ucee4\ubc0b \uc804\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ucf54\ub4dc \ud488\uc9c8 \uac80\uc0ac\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".git/hooks/pre-commit"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\n# \ub9b0\ud2b8 \uac80\uc0ac\necho "Running linter..."\nnpm run lint\nif [ $? -ne 0 ]; then\n  echo "\u274c Lint failed. Please fix errors before committing."\n  exit 1\nfi\n\n# \ud14c\uc2a4\ud2b8 \uc2e4\ud589\necho "Running tests..."\nnpm test\nif [ $? -ne 0 ]; then\n  echo "\u274c Tests failed. Please fix before committing."\n  exit 1\nfi\n\necho "\u2705 All checks passed!"\nexit 0\n'})}),"\n",(0,o.jsx)(n.p,{children:"\uc2e4\ud589 \uad8c\ud55c \ubd80\uc5ec:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"chmod +x .git/hooks/pre-commit\n"})}),"\n",(0,o.jsx)(n.h3,{id:"prepare-commit-msg",children:"prepare-commit-msg"}),"\n",(0,o.jsx)(n.p,{children:"\ucee4\ubc0b \uba54\uc2dc\uc9c0\ub97c \uc791\uc131\ud558\uae30 \uc804\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".git/hooks/prepare-commit-msg"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\nCOMMIT_MSG_FILE=$1\nCOMMIT_SOURCE=$2\nSHA1=$3\n\n# \ube0c\ub79c\uce58 \uc774\ub984\uc744 \ucee4\ubc0b \uba54\uc2dc\uc9c0\uc5d0 \ucd94\uac00\nBRANCH_NAME=$(git symbolic-ref --short HEAD)\n\n# \uc774\ubbf8 \uba54\uc2dc\uc9c0\uac00 \uc788\uc73c\uba74 \uac74\ub108\ub6f0\uae30\nif [ -z "$COMMIT_SOURCE" ]; then\n  echo "[$BRANCH_NAME] $(cat $COMMIT_MSG_FILE)" > $COMMIT_MSG_FILE\nfi\n'})}),"\n",(0,o.jsx)(n.h3,{id:"commit-msg",children:"commit-msg"}),"\n",(0,o.jsx)(n.p,{children:"\ucee4\ubc0b \uba54\uc2dc\uc9c0\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".git/hooks/commit-msg"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\nCOMMIT_MSG_FILE=$1\nCOMMIT_MSG=$(cat $COMMIT_MSG_FILE)\n\n# Conventional Commits \uac80\uc99d\nPATTERN="^(feat|fix|docs|style|refactor|test|chore)(\\(.+\\))?: .{10,}"\n\nif ! echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then\n  echo "\u274c Invalid commit message format!"\n  echo "Format: <type>(<scope>): <subject>"\n  echo "Example: feat(auth): add login functionality"\n  exit 1\nfi\n\necho "\u2705 Commit message is valid"\nexit 0\n'})}),"\n",(0,o.jsx)(n.h3,{id:"pre-push",children:"pre-push"}),"\n",(0,o.jsx)(n.p,{children:"\ud478\uc2dc \uc804\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".git/hooks/pre-push"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\n# \ubcf4\ud638\ub41c \ube0c\ub79c\uce58\uc5d0 \ud478\uc2dc \ubc29\uc9c0\nprotected_branch=\'main\'\ncurrent_branch=$(git symbolic-ref HEAD | sed -e \'s,.*/\\(.*\\),\\1,\')\n\nif [ $current_branch = $protected_branch ]; then\n  echo "\u274c Direct push to $protected_branch is not allowed!"\n  echo "Please create a Pull Request instead."\n  exit 1\nfi\n\n# \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\necho "Running all tests before push..."\nnpm test\nif [ $? -ne 0 ]; then\n  echo "\u274c Tests failed. Push aborted."\n  exit 1\nfi\n\necho "\u2705 All checks passed. Pushing..."\nexit 0\n'})}),"\n",(0,o.jsx)(n.h2,{id:"server-side-hooks",children:"Server-side Hooks"}),"\n",(0,o.jsx)(n.h3,{id:"pre-receive",children:"pre-receive"}),"\n",(0,o.jsx)(n.p,{children:"\uc11c\ubc84\uac00 \ud478\uc2dc\ub97c \ubc1b\uae30 \uc804\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\n# \ucee4\ubc0b \ud06c\uae30 \uc81c\ud55c\nwhile read oldrev newrev refname; do\n  # \ud070 \ud30c\uc77c \uac80\uc0ac\n  if git diff --name-only $oldrev $newrev | xargs git show :| grep -q "\\.zip\\|\\.exe"; then\n    echo "\u274c Binary files are not allowed!"\n    exit 1\n  fi\ndone\n'})}),"\n",(0,o.jsx)(n.h3,{id:"update",children:"update"}),"\n",(0,o.jsx)(n.p,{children:"\uac01 \ube0c\ub79c\uce58\ub9c8\ub2e4 \uc2e4\ud589\ub429\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\nrefname=$1\noldrev=$2\nnewrev=$3\n\n# main \ube0c\ub79c\uce58\ub294 fast-forward\ub9cc \ud5c8\uc6a9\nif [ "$refname" = "refs/heads/main" ]; then\n  if ! git merge-base --is-ancestor $oldrev $newrev; then\n    echo "\u274c Only fast-forward merges are allowed on main!"\n    exit 1\n  fi\nfi\n\nexit 0\n'})}),"\n",(0,o.jsx)(n.h3,{id:"post-receive",children:"post-receive"}),"\n",(0,o.jsx)(n.p,{children:"\ud478\uc2dc\uac00 \uc644\ub8cc\ub41c \ud6c4 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ubc30\ud3ec\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\n# \uc790\ub3d9 \ubc30\ud3ec\nwhile read oldrev newrev refname; do\n  branch=$(git rev-parse --symbolic --abbrev-ref $refname)\n\n  if [ "$branch" = "main" ]; then\n    echo "Deploying to production..."\n    cd /var/www/app\n    git pull\n    npm install\n    npm run build\n    pm2 restart app\n  fi\ndone\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\uc2e4\uc2b5-\uc608\uc81c",children:"\uc2e4\uc2b5 \uc608\uc81c"}),"\n",(0,o.jsx)(n.h3,{id:"\uc608\uc81c-1-\ub9b0\ud130-\uc790\ub3d9-\uc2e4\ud589",children:"\uc608\uc81c 1: \ub9b0\ud130 \uc790\ub3d9 \uc2e4\ud589"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".git/hooks/pre-commit"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\nFILES=$(git diff --cached --name-only --diff-filter=ACM | grep \'\\.js$\\|\\.ts$\')\n\nif [ -n "$FILES" ]; then\n  echo "Running ESLint..."\n  echo "$FILES" | xargs npx eslint\n\n  if [ $? -ne 0 ]; then\n    echo "\u274c ESLint failed. Please fix errors."\n    exit 1\n  fi\n\n  echo "Running Prettier..."\n  echo "$FILES" | xargs npx prettier --check\n\n  if [ $? -ne 0 ]; then\n    echo "\u274c Code formatting issues. Run \'npm run format\'"\n    exit 1\n  fi\nfi\n\necho "\u2705 All checks passed!"\nexit 0\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\uc608\uc81c-2-\ucee4\ubc0b-\uba54\uc2dc\uc9c0\uc5d0-issue-\ubc88\ud638-\ud544\uc218",children:"\uc608\uc81c 2: \ucee4\ubc0b \uba54\uc2dc\uc9c0\uc5d0 Issue \ubc88\ud638 \ud544\uc218"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".git/hooks/commit-msg"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\nCOMMIT_MSG=$(cat $1)\n\n# Issue \ubc88\ud638 \ud655\uc778 (#123 \ud615\uc2dd)\nif ! echo "$COMMIT_MSG" | grep -qE "#[0-9]+"; then\n  echo "\u274c Commit message must include issue number (e.g., #123)"\n  exit 1\nfi\n\nexit 0\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\uc608\uc81c-3-\ubbfc\uac10\ud55c-\uc815\ubcf4-\uac80\uc0ac",children:"\uc608\uc81c 3: \ubbfc\uac10\ud55c \uc815\ubcf4 \uac80\uc0ac"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:".git/hooks/pre-commit"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\n# \ubbfc\uac10\ud55c \uc815\ubcf4 \ud328\ud134\nPATTERNS=(\n  "API_KEY"\n  "SECRET_KEY"\n  "PASSWORD"\n  "aws_secret"\n  "private_key"\n)\n\nfor pattern in "${PATTERNS[@]}"; do\n  if git diff --cached | grep -iE "$pattern"; then\n    echo "\u274c Warning: Possible secret detected: $pattern"\n    echo "Please remove sensitive information before committing."\n    exit 1\n  fi\ndone\n\nexit 0\n'})}),"\n",(0,o.jsx)(n.h2,{id:"hooks-\uacf5\uc720\ud558\uae30",children:"Hooks \uacf5\uc720\ud558\uae30"}),"\n",(0,o.jsxs)(n.p,{children:["Git hooks\ub294 \uae30\ubcf8\uc801\uc73c\ub85c ",(0,o.jsx)(n.code,{children:".git/hooks/"}),"\uc5d0 \uc788\uc5b4 \ubc84\uc804 \uad00\ub9ac\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud300\uacfc \uacf5\uc720\ud558\ub824\uba74:"]}),"\n",(0,o.jsx)(n.h3,{id:"\ubc29\ubc95-1-\uc2a4\ud06c\ub9bd\ud2b8-\ub514\ub809\ud1a0\ub9ac",children:"\ubc29\ubc95 1: \uc2a4\ud06c\ub9bd\ud2b8 \ub514\ub809\ud1a0\ub9ac"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# 1. \ud504\ub85c\uc81d\ud2b8 \ub8e8\ud2b8\uc5d0 hooks \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\nmkdir .githooks\n\n# 2. hooks \uc791\uc131\ncat > .githooks/pre-commit << 'EOF'\n#!/bin/sh\nnpm run lint && npm test\nEOF\n\n# 3. \uc2e4\ud589 \uad8c\ud55c\nchmod +x .githooks/pre-commit\n\n# 4. Git \uc124\uc815\ngit config core.hooksPath .githooks\n\n# 5. README\uc5d0 \uc548\ub0b4\necho \"Run: git config core.hooksPath .githooks\" >> README.md\n"})}),"\n",(0,o.jsx)(n.h3,{id:"\ubc29\ubc95-2-husky-\uc0ac\uc6a9-nodejs",children:"\ubc29\ubc95 2: Husky \uc0ac\uc6a9 (Node.js)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# \uc124\uce58\nnpm install --save-dev husky\n\n# \ucd08\uae30\ud654\nnpx husky install\n\n# Hook \ucd94\uac00\nnpx husky add .husky/pre-commit "npm test"\nnpx husky add .husky/commit-msg \'npx commitlint --edit $1\'\n\n# package.json\uc5d0 \ucd94\uac00\nnpm pkg set scripts.prepare="husky install"\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "prepare": "husky install"\n  },\n  "devDependencies": {\n    "husky": "^8.0.0",\n    "@commitlint/cli": "^17.0.0",\n    "@commitlint/config-conventional": "^17.0.0"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ubc29\ubc95-3-pre-commit-framework",children:"\ubc29\ubc95 3: pre-commit Framework"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# \uc124\uce58\npip install pre-commit\n\n# .pre-commit-config.yaml \uc0dd\uc131\ncat > .pre-commit-config.yaml << 'EOF'\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-added-large-files\n\n  - repo: https://github.com/pre-commit/mirrors-eslint\n    rev: v8.44.0\n    hooks:\n      - id: eslint\n        files: \\.[jt]sx?$\n        types: [file]\nEOF\n\n# \uc124\uce58\npre-commit install\n\n# \uc218\ub3d9 \uc2e4\ud589\npre-commit run --all-files\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\uace0\uae09-hooks",children:"\uace0\uae09 Hooks"}),"\n",(0,o.jsx)(n.h3,{id:"\uc870\uac74\ubd80-\uc2e4\ud589",children:"\uc870\uac74\ubd80 \uc2e4\ud589"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\n# CI \ud658\uacbd\uc5d0\uc11c\ub294 \uac74\ub108\ub6f0\uae30\nif [ -n "$CI" ]; then\n  echo "Skipping hooks in CI environment"\n  exit 0\nfi\n\n# \ube0c\ub79c\uce58\ubcc4\ub85c \ub2e4\ub978 \uac80\uc0ac\nBRANCH=$(git symbolic-ref --short HEAD)\n\nif [[ $BRANCH == feature/* ]]; then\n  npm run lint\nelif [[ $BRANCH == hotfix/* ]]; then\n  npm test -- --critical-only\nfi\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\uc5ec\ub7ec-\uba85\ub839\uc5b4-\uc2e4\ud589",children:"\uc5ec\ub7ec \uba85\ub839\uc5b4 \uc2e4\ud589"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\nrun_check() {\n  echo "Running $1..."\n  $2\n  if [ $? -ne 0 ]; then\n    echo "\u274c $1 failed!"\n    exit 1\n  fi\n  echo "\u2705 $1 passed"\n}\n\nrun_check "Linter" "npm run lint"\nrun_check "Type Check" "npm run type-check"\nrun_check "Tests" "npm test"\nrun_check "Build" "npm run build"\n\necho "\u2705 All checks passed!"\nexit 0\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\n# \ubcc0\uacbd\ub41c \ud30c\uc77c\ub9cc \uac80\uc0ac\nSTAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep \'\\.js$\')\n\nif [ -z "$STAGED_FILES" ]; then\n  echo "No JS files to check"\n  exit 0\nfi\n\n# \ubcd1\ub82c \uc2e4\ud589\necho "$STAGED_FILES" | xargs -P 4 -n 10 npx eslint\n\nexit $?\n'})}),"\n",(0,o.jsx)(n.h2,{id:"\ub514\ubc84\uae45",children:"\ub514\ubc84\uae45"}),"\n",(0,o.jsx)(n.h3,{id:"hook-\uc2e4\ud589-\ud655\uc778",children:"Hook \uc2e4\ud589 \ud655\uc778"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Hook \uc2e4\ud589 \uc5ec\ubd80 \ud655\uc778\nGIT_TRACE=1 git commit -m "test"\n\n# Hook \uc2a4\ud06c\ub9bd\ud2b8 \ub514\ubc84\uadf8\n#!/bin/sh\nset -x  # \uba85\ub839\uc5b4 \ucd9c\ub825\n# ... hooks \ucf54\ub4dc ...\n'})}),"\n",(0,o.jsx)(n.h3,{id:"hook-\uc77c\uc2dc-\ube44\ud65c\uc131\ud654",children:"Hook \uc77c\uc2dc \ube44\ud65c\uc131\ud654"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# \ud55c \ubc88\ub9cc \uac74\ub108\ub6f0\uae30\ngit commit --no-verify -m "skip hooks"\n\n# \ub610\ub294\nHUSKY=0 git commit -m "skip husky hooks"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"1-\ube60\ub974\uac8c-\uc720\uc9c0",children:"1. \ube60\ub974\uac8c \uc720\uc9c0"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# \u274c \ub290\ub9b0 hook\nnpm test  # \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 (5\ubd84)\n\n# \u2705 \ube60\ub978 hook\nnpm run test:changed  # \ubcc0\uacbd\ub41c \ud30c\uc77c\ub9cc (10\ucd08)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-\uba85\ud655\ud55c-\uc5d0\ub7ec-\uba54\uc2dc\uc9c0",children:"2. \uba85\ud655\ud55c \uc5d0\ub7ec \uba54\uc2dc\uc9c0"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# \u274c \ub098\uc05c \uc608\nexit 1\n\n# \u2705 \uc88b\uc740 \uc608\necho "\u274c Lint failed. Run \'npm run lint:fix\' to auto-fix issues."\necho "Affected files:"\necho "$FILES"\nexit 1\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-\uc120\ud0dd\uc801-\uc2e4\ud589",children:"3. \uc120\ud0dd\uc801 \uc2e4\ud589"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# \ud658\uacbd \ubcc0\uc218\ub85c \uc81c\uc5b4\nif [ "$SKIP_HOOKS" != "true" ]; then\n  npm run lint\nfi\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-\ubb38\uc11c\ud654",children:"4. \ubb38\uc11c\ud654"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:"# Hooks\n\n## Pre-commit\n- Runs ESLint\n- Runs Prettier\n- Runs type checking\n\n## Commit-msg\n- Validates conventional commit format\n\n## Pre-push\n- Runs all tests\n- Checks for TODO comments in main branch\n\n## Skip hooks\n\\`\\`\\`bash\ngit commit --no-verify\n# or\nSKIP_HOOKS=true git commit\n\\`\\`\\`\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\ub2e4\uc74c-\ub2e8\uacc4",children:"\ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,o.jsxs)(n.p,{children:["Git Hooks\ub97c \ub9c8\uc2a4\ud130\ud588\uc2b5\ub2c8\ub2e4! \uc774\uc81c ",(0,o.jsx)(n.a,{href:"./git-internals",children:"Git Internals"}),"\uc744 \ubc30\uc6cc\ubcf4\uc138\uc694."]})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var s=i(6540);const o={},c=s.createContext(o);function t(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);