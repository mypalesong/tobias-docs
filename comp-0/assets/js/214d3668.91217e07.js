"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[301],{2211:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rabbitmq/examples/scenario-06-audit-trail","title":"\uc2dc\ub098\ub9ac\uc624 6: \uac10\uc0ac \ucd94\uc801 \uc2dc\uc2a4\ud15c","description":"\uae08\uc735/\uc758\ub8cc \ub4f1 \ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4\uac00 \uc911\uc694\ud55c \uc2dc\uc2a4\ud15c\uc758 \uac10\uc0ac \ub85c\uadf8\ub97c \uc548\uc804\ud558\uac8c \uc218\uc9d1\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud574\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/examples/scenario-06-audit-trail.md","sourceDirName":"rabbitmq/examples","slug":"/rabbitmq/examples/scenario-06-audit-trail","permalink":"/docs/rabbitmq/examples/scenario-06-audit-trail","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/examples/scenario-06-audit-trail.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"rabbitmqSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 5: IoT \ud154\ub808\uba54\ud2b8\ub9ac \ucc98\ub9ac","permalink":"/docs/rabbitmq/examples/scenario-05-iot-telemetry"},"next":{"title":"\uc911\uae09\ud3b8 \uc18c\uac1c","permalink":"/docs/rabbitmq/intermediate/intro"}}');var r=i(4848),s=i(8453);const a={sidebar_position:7},o="\uc2dc\ub098\ub9ac\uc624 6: \uac10\uc0ac \ucd94\uc801 \uc2dc\uc2a4\ud15c",l={},c=[{value:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85",id:"-\uc0c1\ud669-\uc124\uba85",level:2},{value:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98",id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"\ud83d\udcdd \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"\uac10\uc0ac \ub85c\uadf8 \ubaa8\ub378",id:"\uac10\uc0ac-\ub85c\uadf8-\ubaa8\ub378",level:3},{value:"Queue \uc124\uc815",id:"queue-\uc124\uc815",level:3},{value:"Audit Logger (Publisher)",id:"audit-logger-publisher",level:3},{value:"Log Writer (Consumer)",id:"log-writer-consumer",level:3},{value:"Compliance Checker",id:"compliance-checker",level:3},{value:"Audit Search",id:"audit-search",level:3},{value:"\ud83e\uddea \ud1b5\ud569 \ud14c\uc2a4\ud2b8",id:"-\ud1b5\ud569-\ud14c\uc2a4\ud2b8",level:2},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udd12 \ubcf4\uc548 \ubc0f \ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4",id:"-\ubcf4\uc548-\ubc0f-\ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4",level:2},{value:"1. \uba54\uc2dc\uc9c0 \uc554\ud638\ud654 (\uc120\ud0dd\uc0ac\ud56d)",id:"1-\uba54\uc2dc\uc9c0-\uc554\ud638\ud654-\uc120\ud0dd\uc0ac\ud56d",level:3},{value:"2. \uc811\uadfc \uc81c\uc5b4",id:"2-\uc811\uadfc-\uc81c\uc5b4",level:3},{value:"\ud83d\udcda \ub9c8\ubb34\ub9ac",id:"-\ub9c8\ubb34\ub9ac",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\uc2dc\ub098\ub9ac\uc624-6-\uac10\uc0ac-\ucd94\uc801-\uc2dc\uc2a4\ud15c",children:"\uc2dc\ub098\ub9ac\uc624 6: \uac10\uc0ac \ucd94\uc801 \uc2dc\uc2a4\ud15c"})}),"\n",(0,r.jsx)(e.p,{children:"\uae08\uc735/\uc758\ub8cc \ub4f1 \ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4\uac00 \uc911\uc694\ud55c \uc2dc\uc2a4\ud15c\uc758 \uac10\uc0ac \ub85c\uadf8\ub97c \uc548\uc804\ud558\uac8c \uc218\uc9d1\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud574\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsx)(e.h2,{id:"-\uc0c1\ud669-\uc124\uba85",children:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85"}),"\n",(0,r.jsx)(e.p,{children:"\uae08\uc735 \ud50c\ub7ab\ud3fc\uc758 \uac10\uc0ac \ucd94\uc801:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uac10\uc0ac \ub300\uc0c1"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\uc0ac\uc6a9\uc790 \uc778\uc99d (\ub85c\uadf8\uc778/\ub85c\uadf8\uc544\uc6c3)"}),"\n",(0,r.jsx)(e.li,{children:"\uae08\uc735 \uac70\ub798 (\uc774\uccb4, \uacb0\uc81c)"}),"\n",(0,r.jsx)(e.li,{children:"\ub370\uc774\ud130 \uc811\uadfc (\uc870\ud68c, \uc218\uc815, \uc0ad\uc81c)"}),"\n",(0,r.jsx)(e.li,{children:"\uad8c\ud55c \ubcc0\uacbd"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uc694\uad6c\uc0ac\ud56d"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"100% \uba54\uc2dc\uc9c0 \ubcf4\uc7a5 (\uc190\uc2e4 \ubd88\uac00)"}),"\n",(0,r.jsx)(e.li,{children:"\ubcc0\uc870 \ubc29\uc9c0"}),"\n",(0,r.jsx)(e.li,{children:"\uc7a5\uae30 \ubcf4\uad00 (7\ub144)"}),"\n",(0,r.jsx)(e.li,{children:"\ube60\ub978 \uac80\uc0c9"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",children:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Application Services \u2192 [Quorum Queue: audit.logs]\n                              \u2193\n                         \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n                         \u2502         \u2502\n                    Log Writer  Compliance Checker\n                         \u2502         \u2502\n                         \u25bc         \u25bc\n                    Database   Alert System\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"\ud575\uc2ec"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Quorum Queue\ub85c \ub370\uc774\ud130 \uc548\uc815\uc131 \ubcf4\uc7a5"}),"\n",(0,r.jsx)(e.li,{children:"Persistent \uba54\uc2dc\uc9c0\ub85c \uc190\uc2e4 \ubc29\uc9c0"}),"\n",(0,r.jsx)(e.li,{children:"Publisher Confirms\ub85c \uc2e0\ub8b0\uc131 \ud655\ubcf4"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"-\uad6c\ud604",children:"\ud83d\udcdd \uad6c\ud604"}),"\n",(0,r.jsx)(e.h3,{id:"\uac10\uc0ac-\ub85c\uadf8-\ubaa8\ub378",children:"\uac10\uc0ac \ub85c\uadf8 \ubaa8\ub378"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# models.py\nfrom dataclasses import dataclass, asdict, field\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional\nfrom enum import Enum\nimport json\nimport hashlib\n\nclass AuditAction(str, Enum):\n    \"\"\"\uac10\uc0ac \uc561\uc158\"\"\"\n    LOGIN = 'user.login'\n    LOGOUT = 'user.logout'\n    TRANSACTION = 'transaction.execute'\n    DATA_ACCESS = 'data.access'\n    DATA_MODIFY = 'data.modify'\n    DATA_DELETE = 'data.delete'\n    PERMISSION_CHANGE = 'permission.change'\n\nclass AuditSeverity(str, Enum):\n    \"\"\"\uc911\uc694\ub3c4\"\"\"\n    INFO = 'info'\n    WARNING = 'warning'\n    CRITICAL = 'critical'\n\n@dataclass\nclass AuditLog:\n    \"\"\"\uac10\uc0ac \ub85c\uadf8\"\"\"\n    log_id: str\n    timestamp: str\n    action: AuditAction\n    severity: AuditSeverity\n    user_id: Optional[int]\n    user_ip: str\n    resource: str\n    details: Dict[str, Any]\n    checksum: str = field(default='')\n\n    def __post_init__(self):\n        if not self.timestamp:\n            self.timestamp = datetime.now().isoformat()\n\n        # \uccb4\ud06c\uc12c \uc0dd\uc131 (\ubcc0\uc870 \ubc29\uc9c0)\n        if not self.checksum:\n            self.checksum = self.calculate_checksum()\n\n    def calculate_checksum(self) -> str:\n        \"\"\"\uccb4\ud06c\uc12c \uacc4\uc0b0 (SHA-256)\"\"\"\n        data = f\"{self.log_id}{self.timestamp}{self.action.value}\" \\\n               f\"{self.user_id}{self.resource}{json.dumps(self.details, sort_keys=True)}\"\n\n        return hashlib.sha256(data.encode()).hexdigest()\n\n    def verify_checksum(self) -> bool:\n        \"\"\"\uccb4\ud06c\uc12c \uac80\uc99d\"\"\"\n        expected = self.calculate_checksum()\n        return self.checksum == expected\n\n    def to_json(self) -> str:\n        data = asdict(self)\n        data['action'] = self.action.value\n        data['severity'] = self.severity.value\n        return json.dumps(data)\n\n    @classmethod\n    def from_json(cls, json_str: str):\n        data = json.loads(json_str)\n        data['action'] = AuditAction(data['action'])\n        data['severity'] = AuditSeverity(data['severity'])\n        return cls(**data)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"queue-\uc124\uc815",children:"Queue \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# queue_setup.py\nimport pika\n\ndef setup_audit_queue():\n    \"\"\"\uac10\uc0ac \ub85c\uadf8 \ud050 \uc124\uc815\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # \ud83d\udd11 Quorum Queue (\uace0\uac00\uc6a9\uc131)\n    channel.queue_declare(\n        queue='audit.logs',\n        durable=True,\n        arguments={\n            'x-queue-type': 'quorum',  # Quorum Queue\n            'x-max-in-memory-length': 0  # \ubaa8\ub450 \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\n        }\n    )\n\n    # \uc911\uc694 \ub85c\uadf8 \ud050 (CRITICAL\ub9cc)\n    channel.queue_declare(\n        queue='audit.critical',\n        durable=True,\n        arguments={\n            'x-queue-type': 'quorum'\n        }\n    )\n\n    print(\" [\u2713] Audit queues configured:\")\n    print(\"     - audit.logs (quorum, all logs)\")\n    print(\"     - audit.critical (quorum, critical only)\")\n\n    connection.close()\n\nif __name__ == '__main__':\n    setup_audit_queue()\n"})}),"\n",(0,r.jsx)(e.h3,{id:"audit-logger-publisher",children:"Audit Logger (Publisher)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# audit_logger.py\nimport pika\nimport uuid\nfrom models import AuditLog, AuditAction, AuditSeverity\nfrom datetime import datetime\n\nclass AuditLogger:\n    \"\"\"\uac10\uc0ac \ub85c\uac70\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n\n    def log(self, audit: AuditLog):\n        \"\"\"\uac10\uc0ac \ub85c\uadf8 \ubc1c\ud589 (\ud655\uc778 \ud544\uc218)\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        # \ud83d\udd11 Publisher Confirms \ud65c\uc131\ud654\n        channel.confirm_delivery()\n\n        try:\n            # \uba54\uc2dc\uc9c0 \ubc1c\ud589\n            channel.basic_publish(\n                exchange='',\n                routing_key='audit.logs',\n                body=audit.to_json(),\n                properties=pika.BasicProperties(\n                    delivery_mode=2,  # Persistent\n                    content_type='application/json',\n                    priority=10 if audit.severity == AuditSeverity.CRITICAL else 5\n                ),\n                mandatory=True  # \ub77c\uc6b0\ud305 \uc2e4\ud328 \uc2dc \uc5d0\ub7ec\n            )\n\n            # CRITICAL\uc740 \ubcc4\ub3c4 \ud050\uc5d0\ub3c4 \ubc1c\ud589\n            if audit.severity == AuditSeverity.CRITICAL:\n                channel.basic_publish(\n                    exchange='',\n                    routing_key='audit.critical',\n                    body=audit.to_json(),\n                    properties=pika.BasicProperties(\n                        delivery_mode=2,\n                        content_type='application/json'\n                    )\n                )\n\n            print(f\" [\u2713] Audit log published: {audit.log_id} \"\n                  f\"({audit.action.value})\")\n\n            return True\n\n        except pika.exceptions.UnroutableError:\n            print(f\" [\u2717] Failed to route audit log: {audit.log_id}\")\n            return False\n\n        except pika.exceptions.NackError:\n            print(f\" [\u2717] Audit log nacked: {audit.log_id}\")\n            return False\n\n        finally:\n            connection.close()\n\n    def log_login(self, user_id: int, user_ip: str, success: bool):\n        \"\"\"\ub85c\uadf8\uc778 \uac10\uc0ac\"\"\"\n        audit = AuditLog(\n            log_id=f'AUDIT-{uuid.uuid4().hex[:12].upper()}',\n            timestamp=datetime.now().isoformat(),\n            action=AuditAction.LOGIN,\n            severity=AuditSeverity.WARNING if not success else AuditSeverity.INFO,\n            user_id=user_id,\n            user_ip=user_ip,\n            resource='auth.login',\n            details={\n                'success': success,\n                'method': 'password'\n            }\n        )\n\n        return self.log(audit)\n\n    def log_transaction(\n        self,\n        user_id: int,\n        user_ip: str,\n        transaction_id: str,\n        amount: float,\n        recipient: str\n    ):\n        \"\"\"\uac70\ub798 \uac10\uc0ac\"\"\"\n        audit = AuditLog(\n            log_id=f'AUDIT-{uuid.uuid4().hex[:12].upper()}',\n            timestamp=datetime.now().isoformat(),\n            action=AuditAction.TRANSACTION,\n            severity=AuditSeverity.CRITICAL if amount > 10000 else AuditSeverity.INFO,\n            user_id=user_id,\n            user_ip=user_ip,\n            resource=f'transaction.{transaction_id}',\n            details={\n                'transaction_id': transaction_id,\n                'amount': amount,\n                'recipient': recipient\n            }\n        )\n\n        return self.log(audit)\n\n    def log_data_access(\n        self,\n        user_id: int,\n        user_ip: str,\n        resource: str,\n        action: str\n    ):\n        \"\"\"\ub370\uc774\ud130 \uc811\uadfc \uac10\uc0ac\"\"\"\n        severity = AuditSeverity.CRITICAL if action in ['modify', 'delete'] else AuditSeverity.INFO\n\n        audit = AuditLog(\n            log_id=f'AUDIT-{uuid.uuid4().hex[:12].upper()}',\n            timestamp=datetime.now().isoformat(),\n            action=AuditAction.DATA_ACCESS,\n            severity=severity,\n            user_id=user_id,\n            user_ip=user_ip,\n            resource=resource,\n            details={\n                'action': action\n            }\n        )\n\n        return self.log(audit)\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    logger = AuditLogger()\n\n    # \ub85c\uadf8\uc778 \uac10\uc0ac\n    logger.log_login(user_id=1001, user_ip='192.168.1.100', success=True)\n    logger.log_login(user_id=1002, user_ip='192.168.1.101', success=False)\n\n    # \uac70\ub798 \uac10\uc0ac\n    logger.log_transaction(\n        user_id=1001,\n        user_ip='192.168.1.100',\n        transaction_id='TXN-001',\n        amount=5000.0,\n        recipient='ACC-9999'\n    )\n\n    logger.log_transaction(\n        user_id=1001,\n        user_ip='192.168.1.100',\n        transaction_id='TXN-002',\n        amount=15000.0,  # CRITICAL (>10000)\n        recipient='ACC-8888'\n    )\n\n    # \ub370\uc774\ud130 \uc811\uadfc \uac10\uc0ac\n    logger.log_data_access(\n        user_id=1001,\n        user_ip='192.168.1.100',\n        resource='customer.1234.info',\n        action='read'\n    )\n\n    logger.log_data_access(\n        user_id=1001,\n        user_ip='192.168.1.100',\n        resource='customer.1234.info',\n        action='modify'  # CRITICAL\n    )\n"})}),"\n",(0,r.jsx)(e.h3,{id:"log-writer-consumer",children:"Log Writer (Consumer)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# log_writer.py\nimport pika\nfrom models import AuditLog\nimport sqlite3\nfrom datetime import datetime\n\nclass LogWriter:\n    \"\"\"\uac10\uc0ac \ub85c\uadf8 \uc800\uc7a5\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n\n        # SQLite DB \ucd08\uae30\ud654\n        self.db = sqlite3.connect('audit_logs.db')\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\ud14c\uc774\ube14 \uc0dd\uc131\"\"\"\n        cursor = self.db.cursor()\n\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS audit_logs (\n                log_id TEXT PRIMARY KEY,\n                timestamp TEXT,\n                action TEXT,\n                severity TEXT,\n                user_id INTEGER,\n                user_ip TEXT,\n                resource TEXT,\n                details TEXT,\n                checksum TEXT,\n                stored_at TEXT\n            )\n        ''')\n\n        cursor.execute('''\n            CREATE INDEX IF NOT EXISTS idx_timestamp\n            ON audit_logs(timestamp)\n        ''')\n\n        cursor.execute('''\n            CREATE INDEX IF NOT EXISTS idx_user_id\n            ON audit_logs(user_id)\n        ''')\n\n        cursor.execute('''\n            CREATE INDEX IF NOT EXISTS idx_action\n            ON audit_logs(action)\n        ''')\n\n        self.db.commit()\n\n    def save_log(self, audit: AuditLog):\n        \"\"\"\ub85c\uadf8 \uc800\uc7a5\"\"\"\n        # \uccb4\ud06c\uc12c \uac80\uc99d\n        if not audit.verify_checksum():\n            print(f\" [\u2717] Checksum verification failed: {audit.log_id}\")\n            return False\n\n        cursor = self.db.cursor()\n\n        try:\n            cursor.execute('''\n                INSERT INTO audit_logs VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n            ''', (\n                audit.log_id,\n                audit.timestamp,\n                audit.action.value,\n                audit.severity.value,\n                audit.user_id,\n                audit.user_ip,\n                audit.resource,\n                str(audit.details),\n                audit.checksum,\n                datetime.now().isoformat()\n            ))\n\n            self.db.commit()\n\n            print(f\" [\u2713] Saved: {audit.log_id} ({audit.action.value})\")\n\n            return True\n\n        except sqlite3.IntegrityError:\n            print(f\" [!] Duplicate log: {audit.log_id}\")\n            return False\n\n    def callback(self, ch, method, properties, body):\n        \"\"\"\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31\"\"\"\n        audit = AuditLog.from_json(body.decode())\n\n        if self.save_log(audit):\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n        else:\n            # \uc800\uc7a5 \uc2e4\ud328: NACK (\uc7ac\uc2dc\ub3c4)\n            ch.basic_nack(\n                delivery_tag=method.delivery_tag,\n                requeue=True\n            )\n\n    def start(self):\n        \"\"\"Log Writer \uc2dc\uc791\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        channel.basic_qos(prefetch_count=1)\n\n        channel.basic_consume(\n            queue='audit.logs',\n            on_message_callback=self.callback\n        )\n\n        print(' [*] Log Writer started')\n        print(' [*] Waiting for audit logs...\\n')\n\n        try:\n            channel.start_consuming()\n        except KeyboardInterrupt:\n            print('\\nLog Writer stopped')\n            self.db.close()\n\nif __name__ == '__main__':\n    writer = LogWriter()\n    writer.start()\n"})}),"\n",(0,r.jsx)(e.h3,{id:"compliance-checker",children:"Compliance Checker"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# compliance_checker.py\nimport pika\nfrom models import AuditLog, AuditSeverity\n\nclass ComplianceChecker:\n    \"\"\"\ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4 \uac80\uc0ac\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n\n    def check_compliance(self, audit: AuditLog):\n        \"\"\"\ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4 \uaddc\uce59 \uac80\uc0ac\"\"\"\n        violations = []\n\n        # \uaddc\uce59 1: \ub300\ub7c9 \uac70\ub798 (>10000) \uac80\ud1a0 \ud544\uc694\n        if audit.action.value == 'transaction.execute':\n            amount = audit.details.get('amount', 0)\n\n            if amount > 10000:\n                violations.append({\n                    'rule': 'HIGH_VALUE_TRANSACTION',\n                    'description': f'Amount ${amount} exceeds threshold',\n                    'action_required': 'Manual review required'\n                })\n\n        # \uaddc\uce59 2: \ub85c\uadf8\uc778 \uc2e4\ud328 3\ud68c \uc774\uc0c1 (\uac19\uc740 IP)\n        # (\uc2e4\uc81c\ub85c\ub294 DB\uc5d0\uc11c \uc870\ud68c)\n\n        # \uaddc\uce59 3: \ubbfc\uac10\ud55c \ub370\uc774\ud130 \uc218\uc815 (CRITICAL)\n        if audit.severity == AuditSeverity.CRITICAL:\n            violations.append({\n                'rule': 'CRITICAL_OPERATION',\n                'description': 'Critical operation detected',\n                'action_required': 'Notify security team'\n            })\n\n        return violations\n\n    def handle_violation(self, audit: AuditLog, violations: list):\n        \"\"\"\uc704\ubc18 \ucc98\ub9ac\"\"\"\n        print(f\"\"\"\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        \u26a0\ufe0f  COMPLIANCE VIOLATION\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        Log ID: {audit.log_id}\n        Action: {audit.action.value}\n        User ID: {audit.user_id}\n        Resource: {audit.resource}\n\n        Violations:\n        \"\"\")\n\n        for v in violations:\n            print(f\"   \u2022 {v['rule']}: {v['description']}\")\n            print(f\"     \u2192 {v['action_required']}\")\n\n        print(\" \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\")\n\n        # \uc2e4\uc81c\ub85c\ub294 \uc54c\ub9bc \ubc1c\uc1a1, \ud2f0\ucf13 \uc0dd\uc131 \ub4f1\n        # send_compliance_alert(audit, violations)\n        # create_review_ticket(audit, violations)\n\n    def callback(self, ch, method, properties, body):\n        \"\"\"\uba54\uc2dc\uc9c0 \ucc98\ub9ac \ucf5c\ubc31\"\"\"\n        audit = AuditLog.from_json(body.decode())\n\n        # \ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4 \uac80\uc0ac\n        violations = self.check_compliance(audit)\n\n        if violations:\n            self.handle_violation(audit, violations)\n\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    def start(self):\n        \"\"\"Compliance Checker \uc2dc\uc791\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        # CRITICAL \ub85c\uadf8\ub9cc \uac80\uc0ac\n        channel.basic_consume(\n            queue='audit.critical',\n            on_message_callback=self.callback\n        )\n\n        print(' [*] Compliance Checker started')\n        print(' [*] Monitoring critical audit logs...\\n')\n\n        channel.start_consuming()\n\nif __name__ == '__main__':\n    checker = ComplianceChecker()\n\n    try:\n        checker.start()\n    except KeyboardInterrupt:\n        print('\\nCompliance Checker stopped')\n"})}),"\n",(0,r.jsx)(e.h3,{id:"audit-search",children:"Audit Search"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# audit_search.py\nimport sqlite3\nfrom datetime import datetime, timedelta\n\nclass AuditSearch:\n    """\uac10\uc0ac \ub85c\uadf8 \uac80\uc0c9"""\n\n    def __init__(self):\n        self.db = sqlite3.connect(\'audit_logs.db\')\n\n    def search_by_user(self, user_id: int, limit: int = 100):\n        """\uc0ac\uc6a9\uc790\ubcc4 \uac80\uc0c9"""\n        cursor = self.db.cursor()\n\n        cursor.execute(\'\'\'\n            SELECT * FROM audit_logs\n            WHERE user_id = ?\n            ORDER BY timestamp DESC\n            LIMIT ?\n        \'\'\', (user_id, limit))\n\n        return cursor.fetchall()\n\n    def search_by_action(self, action: str, limit: int = 100):\n        """\uc561\uc158\ubcc4 \uac80\uc0c9"""\n        cursor = self.db.cursor()\n\n        cursor.execute(\'\'\'\n            SELECT * FROM audit_logs\n            WHERE action = ?\n            ORDER BY timestamp DESC\n            LIMIT ?\n        \'\'\', (action, limit))\n\n        return cursor.fetchall()\n\n    def search_by_timerange(\n        self,\n        start_time: str,\n        end_time: str,\n        limit: int = 1000\n    ):\n        """\uc2dc\uac04 \ubc94\uc704 \uac80\uc0c9"""\n        cursor = self.db.cursor()\n\n        cursor.execute(\'\'\'\n            SELECT * FROM audit_logs\n            WHERE timestamp BETWEEN ? AND ?\n            ORDER BY timestamp DESC\n            LIMIT ?\n        \'\'\', (start_time, end_time, limit))\n\n        return cursor.fetchall()\n\n    def search_critical(self, days: int = 7):\n        """\ucd5c\uadfc \uc911\uc694 \ub85c\uadf8 \uac80\uc0c9"""\n        start_time = (datetime.now() - timedelta(days=days)).isoformat()\n\n        cursor = self.db.cursor()\n\n        cursor.execute(\'\'\'\n            SELECT * FROM audit_logs\n            WHERE severity = \'critical\'\n            AND timestamp >= ?\n            ORDER BY timestamp DESC\n        \'\'\', (start_time,))\n\n        return cursor.fetchall()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == \'__main__\':\n    search = AuditSearch()\n\n    # \uc0ac\uc6a9\uc790\ubcc4 \uac80\uc0c9\n    print(" User 1001 Audit Logs:")\n    logs = search.search_by_user(1001, limit=10)\n\n    for log in logs:\n        print(f"   {log[0]}: {log[2]} @ {log[1]}")\n\n    # \uc911\uc694 \ub85c\uadf8 \uac80\uc0c9\n    print("\\n Critical Logs (last 7 days):")\n    critical_logs = search.search_critical(days=7)\n\n    for log in critical_logs:\n        print(f"   {log[0]}: {log[2]} (user: {log[4]})")\n'})}),"\n",(0,r.jsx)(e.h2,{id:"-\ud1b5\ud569-\ud14c\uc2a4\ud2b8",children:"\ud83e\uddea \ud1b5\ud569 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# test_audit_system.py\nimport pytest\nfrom audit_logger import AuditLogger\nfrom log_writer import LogWriter\nimport time\nimport threading\n\ndef test_audit_flow():\n    \"\"\"\uc804\uccb4 \uac10\uc0ac \ud750\ub984 \ud14c\uc2a4\ud2b8\"\"\"\n    # Log Writer \uc2dc\uc791\n    writer = LogWriter()\n    writer_thread = threading.Thread(target=writer.start)\n    writer_thread.daemon = True\n    writer_thread.start()\n\n    time.sleep(2)\n\n    # \uac10\uc0ac \ub85c\uadf8 \ubc1c\ud589\n    logger = AuditLogger()\n\n    # \ub85c\uadf8\uc778\n    assert logger.log_login(1001, '192.168.1.100', True)\n\n    # \uac70\ub798\n    assert logger.log_transaction(\n        1001, '192.168.1.100',\n        'TXN-001', 5000.0, 'ACC-9999'\n    )\n\n    time.sleep(2)\n\n    # DB \uac80\uc99d\n    from audit_search import AuditSearch\n    search = AuditSearch()\n\n    logs = search.search_by_user(1001)\n    assert len(logs) >= 2\n"})}),"\n",(0,r.jsx)(e.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Quorum Queue"}),": \ub370\uc774\ud130 \uc190\uc2e4 \ubc29\uc9c0"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Publisher Confirms"}),": \ubc1c\ud589 \ubcf4\uc7a5"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\uccb4\ud06c\uc12c"}),": \ubcc0\uc870 \ubc29\uc9c0"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Persistent"}),": \uc7ac\uc2dc\uc791 \ud6c4\uc5d0\ub3c4 \ubcf4\uc874"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"-\ubcf4\uc548-\ubc0f-\ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4",children:"\ud83d\udd12 \ubcf4\uc548 \ubc0f \ucef4\ud50c\ub77c\uc774\uc5b8\uc2a4"}),"\n",(0,r.jsx)(e.h3,{id:"1-\uba54\uc2dc\uc9c0-\uc554\ud638\ud654-\uc120\ud0dd\uc0ac\ud56d",children:"1. \uba54\uc2dc\uc9c0 \uc554\ud638\ud654 (\uc120\ud0dd\uc0ac\ud56d)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from cryptography.fernet import Fernet\n\n# \uc554\ud638\ud654 \ud0a4 \uc0dd\uc131\nkey = Fernet.generate_key()\ncipher = Fernet(key)\n\n# \uba54\uc2dc\uc9c0 \uc554\ud638\ud654\nencrypted = cipher.encrypt(audit.to_json().encode())\n\n# \uba54\uc2dc\uc9c0 \ubcf5\ud638\ud654\ndecrypted = cipher.decrypt(encrypted)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-\uc811\uadfc-\uc81c\uc5b4",children:"2. \uc811\uadfc \uc81c\uc5b4"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# RabbitMQ \uc0ac\uc6a9\uc790 \uad8c\ud55c \uc124\uc815\nrabbitmqctl set_permissions -p / audit_logger "^audit\\\\..*" "^audit\\\\..*" ""\nrabbitmqctl set_permissions -p / audit_reader "" "" "^audit\\\\..*"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"-\ub9c8\ubb34\ub9ac",children:"\ud83d\udcda \ub9c8\ubb34\ub9ac"}),"\n",(0,r.jsx)(e.p,{children:"\ucd95\ud558\ud569\ub2c8\ub2e4! RabbitMQ\uc758 \ubaa8\ub4e0 \ud575\uc2ec \uae30\ub2a5\uacfc \uc2e4\uc804 \uc2dc\ub098\ub9ac\uc624\ub97c \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udc49 \ucc98\uc74c\uc73c\ub85c \ub3cc\uc544\uac00\uae30: ",(0,r.jsx)(e.a,{href:"../intro",children:"RabbitMQ \uc18c\uac1c"})]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);