"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3398],{6013:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>_,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"fastapi/examples/scenario-13-analytics-dashboard","title":"\uc2dc\ub098\ub9ac\uc624 13: \ub370\uc774\ud130 \ubd84\uc11d \ub300\uc2dc\ubcf4\ub4dc API","description":"Pandas\uc640 \ub370\uc774\ud130 \uc2dc\uac01\ud654\ub97c \ud65c\uc6a9\ud55c \ubd84\uc11d \ub300\uc2dc\ubcf4\ub4dc API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-13-analytics-dashboard.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-13-analytics-dashboard","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-13-analytics-dashboard","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-13-analytics-dashboard.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 12: GraphQL API","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-12-graphql-api"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 14: AI/ML \uc11c\ube44\uc2a4 API","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-14-ai-ml-service"}}');var s=t(4848),r=t(8453);const i={sidebar_position:14},d="\uc2dc\ub098\ub9ac\uc624 13: \ub370\uc774\ud130 \ubd84\uc11d \ub300\uc2dc\ubcf4\ub4dc API",o={},l=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"analytics_service.py",id:"analytics_servicepy",level:3},{value:"visualization_service.py",id:"visualization_servicepy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"Pandas \ud65c\uc6a9",id:"pandas-\ud65c\uc6a9",level:3},{value:"\ub370\uc774\ud130 \uc2dc\uac01\ud654",id:"\ub370\uc774\ud130-\uc2dc\uac01\ud654",level:3},{value:"\uc131\ub2a5 \ucd5c\uc801\ud654",id:"\uc131\ub2a5-\ucd5c\uc801\ud654",level:3},{value:"\ub0b4\ubcf4\ub0b4\uae30",id:"\ub0b4\ubcf4\ub0b4\uae30",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-13-\ub370\uc774\ud130-\ubd84\uc11d-\ub300\uc2dc\ubcf4\ub4dc-api",children:"\uc2dc\ub098\ub9ac\uc624 13: \ub370\uc774\ud130 \ubd84\uc11d \ub300\uc2dc\ubcf4\ub4dc API"})}),"\n",(0,s.jsx)(n.p,{children:"Pandas\uc640 \ub370\uc774\ud130 \uc2dc\uac01\ud654\ub97c \ud65c\uc6a9\ud55c \ubd84\uc11d \ub300\uc2dc\ubcf4\ub4dc API\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,s.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 \ud310\ub9e4 \ub370\uc774\ud130 \ubd84\uc11d"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uc2dc\uacc4\uc5f4 \ubd84\uc11d"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uadf8\ub8f9\ubcc4 \ud1b5\uacc4"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \ub370\uc774\ud130 \uc2dc\uac01\ud654 (\ucc28\ud2b8 \uc0dd\uc131)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 CSV/Excel \ub0b4\ubcf4\ub0b4\uae30"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uc2e4\uc2dc\uac04 \ub300\uc2dc\ubcf4\ub4dc \uba54\ud2b8\ub9ad"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uce90\uc2f1\uc73c\ub85c \uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"analytics-dashboard/\n\u251c\u2500\u2500 main.py                 # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n\u251c\u2500\u2500 models.py               # DB \ubaa8\ub378 (Sale, Product, Customer)\n\u251c\u2500\u2500 schemas.py              # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py             # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 analytics_service.py    # \ub370\uc774\ud130 \ubd84\uc11d \ub85c\uc9c1\n\u251c\u2500\u2500 chart_generator.py      # \ucc28\ud2b8 \uc0dd\uc131 (Plotly/Matplotlib)\n\u251c\u2500\u2500 export_service.py       # CSV/Excel \ub0b4\ubcf4\ub0b4\uae30\n\u2514\u2500\u2500 requirements.txt        # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant U as User\n    participant API as FastAPI\n    participant AS as AnalyticsService\n    participant Cache as Redis\n    participant DB as Database\n    participant CG as ChartGenerator\n\n    Note over U,DB: 1. \ub300\uc2dc\ubcf4\ub4dc \uba54\ud2b8\ub9ad \uc870\ud68c (\uce90\uc2f1)\n    U->>API: GET /analytics/dashboard\n    API->>Cache: Check cache\n    alt Cache hit\n        Cache--\x3e>API: Cached metrics\n        API--\x3e>U: 200 OK + Metrics\n    else Cache miss\n        API->>AS: calculate_metrics()\n        AS->>DB: SELECT SUM, COUNT, AVG...\n        DB--\x3e>AS: Raw data\n        AS->>AS: Process with Pandas\n        AS--\x3e>API: Metrics\n        API->>Cache: Store in cache (TTL: 5min)\n        API--\x3e>U: 200 OK + Metrics\n    end\n\n    Note over U,DB: 2. \uc2dc\uacc4\uc5f4 \ucc28\ud2b8 \uc0dd\uc131\n    U->>API: GET /analytics/sales/timeseries\n    API->>AS: get_sales_timeseries()\n    AS->>DB: SELECT date, SUM(amount)<br/>GROUP BY date\n    DB--\x3e>AS: Time series data\n    AS->>CG: generate_chart(data, type='line')\n    CG--\x3e>AS: Chart image/JSON\n    AS--\x3e>API: Chart data\n    API--\x3e>U: 200 OK + Chart\n\n    Note over U,DB: 3. Excel \ub0b4\ubcf4\ub0b4\uae30\n    U->>API: GET /analytics/export?format=xlsx\n    API->>AS: export_data()\n    AS->>DB: SELECT * FROM sales\n    DB--\x3e>AS: Sales data\n    AS->>AS: Create Excel with Pandas\n    AS--\x3e>API: Excel file bytes\n    API--\x3e>U: Excel file download\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,s.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\n\nclass Sale(Base):\n    """\ud310\ub9e4 \ub370\uc774\ud130"""\n    __tablename__ = "sales"\n\n    id = Column(Integer, primary_key=True)\n    product_id = Column(Integer, ForeignKey(\'products.id\'))\n    customer_id = Column(Integer, ForeignKey(\'customers.id\'))\n    quantity = Column(Integer)\n    unit_price = Column(Float)\n    total_amount = Column(Float)\n    sale_date = Column(DateTime(timezone=True), index=True)\n    region = Column(String, index=True)\n    category = Column(String, index=True)\n\n    product = relationship("Product")\n    customer = relationship("Customer")\n\nclass Product(Base):\n    __tablename__ = "products"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    category = Column(String, index=True)\n    cost = Column(Float)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\nclass Customer(Base):\n    __tablename__ = "customers"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n    region = Column(String, index=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"analytics_servicepy",children:"analytics_service.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pandas as pd\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import func, desc, extract\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional\nimport models\n\nclass AnalyticsService:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def get_sales_dataframe(\n        self,\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None\n    ) -> pd.DataFrame:\n        \"\"\"\ud310\ub9e4 \ub370\uc774\ud130\ub97c Pandas DataFrame\uc73c\ub85c \ubcc0\ud658\"\"\"\n        query = self.db.query(\n            models.Sale.id,\n            models.Sale.product_id,\n            models.Sale.customer_id,\n            models.Sale.quantity,\n            models.Sale.unit_price,\n            models.Sale.total_amount,\n            models.Sale.sale_date,\n            models.Sale.region,\n            models.Sale.category,\n            models.Product.name.label('product_name'),\n            models.Customer.name.label('customer_name')\n        ).join(\n            models.Product\n        ).join(\n            models.Customer\n        )\n\n        if start_date:\n            query = query.filter(models.Sale.sale_date >= start_date)\n\n        if end_date:\n            query = query.filter(models.Sale.sale_date <= end_date)\n\n        # DataFrame\uc73c\ub85c \ubcc0\ud658\n        df = pd.read_sql(query.statement, self.db.bind)\n        df['sale_date'] = pd.to_datetime(df['sale_date'])\n\n        return df\n\n    def get_summary_stats(\n        self,\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None\n    ) -> Dict:\n        \"\"\"\uc694\uc57d \ud1b5\uacc4\"\"\"\n        df = self.get_sales_dataframe(start_date, end_date)\n\n        return {\n            \"total_sales\": float(df['total_amount'].sum()),\n            \"total_orders\": int(len(df)),\n            \"average_order_value\": float(df['total_amount'].mean()),\n            \"total_quantity\": int(df['quantity'].sum()),\n            \"unique_customers\": int(df['customer_id'].nunique()),\n            \"unique_products\": int(df['product_id'].nunique())\n        }\n\n    def get_sales_by_period(\n        self,\n        period: str = \"day\",  # day, week, month, year\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None\n    ) -> List[Dict]:\n        \"\"\"\uae30\uac04\ubcc4 \ub9e4\ucd9c\"\"\"\n        df = self.get_sales_dataframe(start_date, end_date)\n\n        # \uae30\uac04\ubcc4 \uadf8\ub8f9\ud654\n        if period == \"day\":\n            df['period'] = df['sale_date'].dt.date\n        elif period == \"week\":\n            df['period'] = df['sale_date'].dt.to_period('W').dt.start_time\n        elif period == \"month\":\n            df['period'] = df['sale_date'].dt.to_period('M').dt.start_time\n        elif period == \"year\":\n            df['period'] = df['sale_date'].dt.to_period('Y').dt.start_time\n\n        # \uc9d1\uacc4\n        result = df.groupby('period').agg({\n            'total_amount': 'sum',\n            'id': 'count',\n            'quantity': 'sum'\n        }).reset_index()\n\n        result.columns = ['period', 'total_sales', 'order_count', 'total_quantity']\n\n        return result.to_dict('records')\n\n    def get_sales_by_category(\n        self,\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None\n    ) -> List[Dict]:\n        \"\"\"\uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c\"\"\"\n        df = self.get_sales_dataframe(start_date, end_date)\n\n        result = df.groupby('category').agg({\n            'total_amount': 'sum',\n            'id': 'count',\n            'quantity': 'sum'\n        }).reset_index()\n\n        result.columns = ['category', 'total_sales', 'order_count', 'total_quantity']\n        result = result.sort_values('total_sales', ascending=False)\n\n        return result.to_dict('records')\n\n    def get_sales_by_region(\n        self,\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None\n    ) -> List[Dict]:\n        \"\"\"\uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c\"\"\"\n        df = self.get_sales_dataframe(start_date, end_date)\n\n        result = df.groupby('region').agg({\n            'total_amount': 'sum',\n            'id': 'count',\n            'customer_id': 'nunique'\n        }).reset_index()\n\n        result.columns = ['region', 'total_sales', 'order_count', 'unique_customers']\n        result = result.sort_values('total_sales', ascending=False)\n\n        return result.to_dict('records')\n\n    def get_top_products(\n        self,\n        limit: int = 10,\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None\n    ) -> List[Dict]:\n        \"\"\"\uc778\uae30 \uc0c1\ud488 TOP N\"\"\"\n        df = self.get_sales_dataframe(start_date, end_date)\n\n        result = df.groupby(['product_id', 'product_name']).agg({\n            'total_amount': 'sum',\n            'quantity': 'sum',\n            'id': 'count'\n        }).reset_index()\n\n        result.columns = ['product_id', 'product_name', 'total_sales', 'total_quantity', 'order_count']\n        result = result.sort_values('total_sales', ascending=False).head(limit)\n\n        return result.to_dict('records')\n\n    def get_top_customers(\n        self,\n        limit: int = 10,\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None\n    ) -> List[Dict]:\n        \"\"\"\uc6b0\uc218 \uace0\uac1d TOP N\"\"\"\n        df = self.get_sales_dataframe(start_date, end_date)\n\n        result = df.groupby(['customer_id', 'customer_name']).agg({\n            'total_amount': 'sum',\n            'id': 'count'\n        }).reset_index()\n\n        result.columns = ['customer_id', 'customer_name', 'total_spent', 'order_count']\n        result = result.sort_values('total_spent', ascending=False).head(limit)\n\n        return result.to_dict('records')\n\n    def get_cohort_analysis(self, cohort_type: str = \"month\") -> pd.DataFrame:\n        \"\"\"\ucf54\ud638\ud2b8 \ubd84\uc11d (\uace0\uac1d \uc720\uc9c0\uc728)\"\"\"\n        df = self.get_sales_dataframe()\n\n        # \uace0\uac1d\ubcc4 \uccab \uad6c\ub9e4 \ub0a0\uc9dc\n        df['first_purchase'] = df.groupby('customer_id')['sale_date'].transform('min')\n\n        if cohort_type == \"month\":\n            df['cohort'] = df['first_purchase'].dt.to_period('M')\n            df['period'] = df['sale_date'].dt.to_period('M')\n        elif cohort_type == \"week\":\n            df['cohort'] = df['first_purchase'].dt.to_period('W')\n            df['period'] = df['sale_date'].dt.to_period('W')\n\n        # \ucf54\ud638\ud2b8 \uae30\uac04 \uacc4\uc0b0\n        df['cohort_period'] = (df['period'] - df['cohort']).apply(lambda x: x.n)\n\n        # \ucf54\ud638\ud2b8\ubcc4 \ud65c\uc131 \uace0\uac1d \uc218\n        cohort_data = df.groupby(['cohort', 'cohort_period'])['customer_id'].nunique().reset_index()\n        cohort_data.columns = ['cohort', 'period', 'customers']\n\n        # \ud53c\ubc97 \ud14c\uc774\ube14\n        cohort_pivot = cohort_data.pivot_table(\n            index='cohort',\n            columns='period',\n            values='customers'\n        )\n\n        # \uc720\uc9c0\uc728 \uacc4\uc0b0\n        cohort_size = cohort_pivot.iloc[:, 0]\n        retention = cohort_pivot.divide(cohort_size, axis=0) * 100\n\n        return retention\n\n    def get_revenue_forecast(self, days: int = 30) -> List[Dict]:\n        \"\"\"\ub9e4\ucd9c \uc608\uce21 (\ub2e8\uc21c \uc774\ub3d9 \ud3c9\uade0)\"\"\"\n        df = self.get_sales_dataframe()\n\n        # \uc77c\ubcc4 \ub9e4\ucd9c\n        daily_sales = df.groupby(df['sale_date'].dt.date)['total_amount'].sum().reset_index()\n        daily_sales.columns = ['date', 'sales']\n\n        # 7\uc77c \uc774\ub3d9 \ud3c9\uade0\n        daily_sales['ma_7'] = daily_sales['sales'].rolling(window=7).mean()\n        daily_sales['ma_30'] = daily_sales['sales'].rolling(window=30).mean()\n\n        # \uc608\uce21 (\ub2e8\uc21c\ud558\uac8c \ucd5c\uadfc 7\uc77c \ud3c9\uade0 \uc0ac\uc6a9)\n        forecast_value = daily_sales['ma_7'].iloc[-1]\n\n        # \ubbf8\ub798 \ub0a0\uc9dc \uc0dd\uc131\n        last_date = daily_sales['date'].max()\n        future_dates = pd.date_range(\n            start=last_date + timedelta(days=1),\n            periods=days,\n            freq='D'\n        )\n\n        forecast = [\n            {\n                \"date\": str(date.date()),\n                \"predicted_sales\": float(forecast_value)\n            }\n            for date in future_dates\n        ]\n\n        return forecast\n"})}),"\n",(0,s.jsx)(n.h3,{id:"visualization_servicepy",children:"visualization_service.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import matplotlib\nmatplotlib.use(\'Agg\')  # GUI \uc5c6\uc774 \uc0ac\uc6a9\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom io import BytesIO\nimport base64\n\nclass VisualizationService:\n    def __init__(self):\n        sns.set_style("whitegrid")\n        plt.rcParams[\'figure.figsize\'] = (12, 6)\n\n    def create_line_chart(self, data: pd.DataFrame, x: str, y: str, title: str) -> str:\n        """\ub77c\uc778 \ucc28\ud2b8 \uc0dd\uc131"""\n        plt.figure()\n        plt.plot(data[x], data[y], marker=\'o\')\n        plt.title(title)\n        plt.xlabel(x)\n        plt.ylabel(y)\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n\n        return self._fig_to_base64()\n\n    def create_bar_chart(self, data: pd.DataFrame, x: str, y: str, title: str) -> str:\n        """\ubc14 \ucc28\ud2b8 \uc0dd\uc131"""\n        plt.figure()\n        plt.bar(data[x], data[y])\n        plt.title(title)\n        plt.xlabel(x)\n        plt.ylabel(y)\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n\n        return self._fig_to_base64()\n\n    def create_pie_chart(self, data: pd.DataFrame, labels: str, values: str, title: str) -> str:\n        """\ud30c\uc774 \ucc28\ud2b8 \uc0dd\uc131"""\n        plt.figure()\n        plt.pie(data[values], labels=data[labels], autopct=\'%1.1f%%\')\n        plt.title(title)\n        plt.tight_layout()\n\n        return self._fig_to_base64()\n\n    def create_heatmap(self, data: pd.DataFrame, title: str) -> str:\n        """\ud788\ud2b8\ub9f5 \uc0dd\uc131 (\ucf54\ud638\ud2b8 \ubd84\uc11d\uc6a9)"""\n        plt.figure(figsize=(14, 8))\n        sns.heatmap(data, annot=True, fmt=\'.1f\', cmap=\'YlGnBu\')\n        plt.title(title)\n        plt.tight_layout()\n\n        return self._fig_to_base64()\n\n    def _fig_to_base64(self) -> str:\n        """Figure\ub97c Base64 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658"""\n        buffer = BytesIO()\n        plt.savefig(buffer, format=\'png\', dpi=100)\n        buffer.seek(0)\n        image_base64 = base64.b64encode(buffer.read()).decode()\n        plt.close()\n\n        return f"data:image/png;base64,{image_base64}"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, Query, Response\nfrom fastapi.responses import StreamingResponse\nfrom sqlalchemy.orm import Session\nfrom datetime import datetime, timedelta\nfrom typing import Optional\nimport models\nfrom database import engine, get_db\nfrom analytics_service import AnalyticsService\nfrom visualization_service import VisualizationService\nfrom functools import lru_cache\nimport pandas as pd\nimport io\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Analytics Dashboard API")\n\nviz_service = VisualizationService()\n\n# ==================== \uc694\uc57d \ud1b5\uacc4 ====================\n\n@app.get("/analytics/summary")\n@lru_cache(maxsize=128)\ndef get_summary(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """\uc694\uc57d \ud1b5\uacc4"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    return service.get_summary_stats(start, end)\n\n# ==================== \uc2dc\uacc4\uc5f4 \ubd84\uc11d ====================\n\n@app.get("/analytics/sales-by-period")\ndef get_sales_by_period(\n    period: str = Query("day", regex="^(day|week|month|year)$"),\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """\uae30\uac04\ubcc4 \ub9e4\ucd9c"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    return service.get_sales_by_period(period, start, end)\n\n# ==================== \uce74\ud14c\uace0\ub9ac/\uc9c0\uc5ed \ubd84\uc11d ====================\n\n@app.get("/analytics/sales-by-category")\ndef get_sales_by_category(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """\uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    return service.get_sales_by_category(start, end)\n\n@app.get("/analytics/sales-by-region")\ndef get_sales_by_region(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """\uc9c0\uc5ed\ubcc4 \ub9e4\ucd9c"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    return service.get_sales_by_region(start, end)\n\n# ==================== TOP N ====================\n\n@app.get("/analytics/top-products")\ndef get_top_products(\n    limit: int = Query(10, ge=1, le=100),\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """\uc778\uae30 \uc0c1\ud488 TOP N"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    return service.get_top_products(limit, start, end)\n\n@app.get("/analytics/top-customers")\ndef get_top_customers(\n    limit: int = Query(10, ge=1, le=100),\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """\uc6b0\uc218 \uace0\uac1d TOP N"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    return service.get_top_customers(limit, start, end)\n\n# ==================== \uace0\uae09 \ubd84\uc11d ====================\n\n@app.get("/analytics/cohort-analysis")\ndef get_cohort_analysis(\n    cohort_type: str = Query("month", regex="^(week|month)$"),\n    db: Session = Depends(get_db)\n):\n    """\ucf54\ud638\ud2b8 \ubd84\uc11d (\uace0\uac1d \uc720\uc9c0\uc728)"""\n    service = AnalyticsService(db)\n    cohort_data = service.get_cohort_analysis(cohort_type)\n\n    return cohort_data.to_dict()\n\n@app.get("/analytics/forecast")\ndef get_forecast(\n    days: int = Query(30, ge=1, le=365),\n    db: Session = Depends(get_db)\n):\n    """\ub9e4\ucd9c \uc608\uce21"""\n    service = AnalyticsService(db)\n    return service.get_revenue_forecast(days)\n\n# ==================== \uc2dc\uac01\ud654 ====================\n\n@app.get("/analytics/charts/sales-trend")\ndef get_sales_trend_chart(\n    period: str = Query("day", regex="^(day|week|month)$"),\n    db: Session = Depends(get_db)\n):\n    """\ub9e4\ucd9c \ud2b8\ub80c\ub4dc \ucc28\ud2b8"""\n    service = AnalyticsService(db)\n    data = service.get_sales_by_period(period)\n\n    df = pd.DataFrame(data)\n    chart = viz_service.create_line_chart(\n        df,\n        \'period\',\n        \'total_sales\',\n        f\'Sales Trend by {period.capitalize()}\'\n    )\n\n    return {"chart": chart}\n\n@app.get("/analytics/charts/category-distribution")\ndef get_category_chart(db: Session = Depends(get_db)):\n    """\uce74\ud14c\uace0\ub9ac\ubcc4 \ub9e4\ucd9c \ubd84\ud3ec \ucc28\ud2b8"""\n    service = AnalyticsService(db)\n    data = service.get_sales_by_category()\n\n    df = pd.DataFrame(data)\n    chart = viz_service.create_pie_chart(\n        df,\n        \'category\',\n        \'total_sales\',\n        \'Sales Distribution by Category\'\n    )\n\n    return {"chart": chart}\n\n@app.get("/analytics/charts/cohort-heatmap")\ndef get_cohort_heatmap(db: Session = Depends(get_db)):\n    """\ucf54\ud638\ud2b8 \ud788\ud2b8\ub9f5"""\n    service = AnalyticsService(db)\n    cohort_data = service.get_cohort_analysis()\n\n    chart = viz_service.create_heatmap(\n        cohort_data,\n        \'Customer Retention Cohort Analysis (%)\'\n    )\n\n    return {"chart": chart}\n\n# ==================== \ub370\uc774\ud130 \ub0b4\ubcf4\ub0b4\uae30 ====================\n\n@app.get("/analytics/export/csv")\ndef export_csv(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """CSV \ub0b4\ubcf4\ub0b4\uae30"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    df = service.get_sales_dataframe(start, end)\n\n    # CSV\ub85c \ubcc0\ud658\n    stream = io.StringIO()\n    df.to_csv(stream, index=False)\n\n    response = StreamingResponse(\n        iter([stream.getvalue()]),\n        media_type="text/csv"\n    )\n    response.headers["Content-Disposition"] = "attachment; filename=sales_data.csv"\n\n    return response\n\n@app.get("/analytics/export/excel")\ndef export_excel(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    """Excel \ub0b4\ubcf4\ub0b4\uae30"""\n    service = AnalyticsService(db)\n\n    start = datetime.fromisoformat(start_date) if start_date else None\n    end = datetime.fromisoformat(end_date) if end_date else None\n\n    df = service.get_sales_dataframe(start, end)\n\n    # Excel\ub85c \ubcc0\ud658\n    stream = io.BytesIO()\n    with pd.ExcelWriter(stream, engine=\'openpyxl\') as writer:\n        df.to_excel(writer, sheet_name=\'Sales Data\', index=False)\n\n        # \uc694\uc57d \uc2dc\ud2b8 \ucd94\uac00\n        summary = service.get_summary_stats(start, end)\n        summary_df = pd.DataFrame([summary])\n        summary_df.to_excel(writer, sheet_name=\'Summary\', index=False)\n\n    stream.seek(0)\n\n    response = StreamingResponse(\n        iter([stream.getvalue()]),\n        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"\n    )\n    response.headers["Content-Disposition"] = "attachment; filename=sales_data.xlsx"\n\n    return response\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,s.jsx)(n.h3,{id:"pandas-\ud65c\uc6a9",children:"Pandas \ud65c\uc6a9"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"read_sql"}),"\ub85c SQLAlchemy \ucffc\ub9ac\ub97c DataFrame\uc73c\ub85c \ubcc0\ud658"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"groupby"}),", ",(0,s.jsx)(n.code,{children:"agg"}),"\ub85c \uc9d1\uacc4"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pivot_table"}),"\ub85c \ud53c\ubc97 \ud14c\uc774\ube14 \uc0dd\uc131"]}),"\n",(0,s.jsxs)(n.li,{children:["\uc2dc\uacc4\uc5f4 \ub370\uc774\ud130 \ucc98\ub9ac (",(0,s.jsx)(n.code,{children:"dt"})," accessor)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ub370\uc774\ud130-\uc2dc\uac01\ud654",children:"\ub370\uc774\ud130 \uc2dc\uac01\ud654"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Matplotlib\ub85c \ucc28\ud2b8 \uc0dd\uc131"}),"\n",(0,s.jsx)(n.li,{children:"Base64 \uc778\ucf54\ub529\uc73c\ub85c \uc774\ubbf8\uc9c0 \uc804\uc1a1"}),"\n",(0,s.jsx)(n.li,{children:"Seaborn\uc73c\ub85c \ud1b5\uacc4 \uc2dc\uac01\ud654"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@lru_cache"}),"\ub85c \uacb0\uacfc \uce90\uc2f1"]}),"\n",(0,s.jsx)(n.li,{children:"DataFrame \uc5f0\uc0b0\uc73c\ub85c \ube60\ub978 \uc9d1\uacc4"}),"\n",(0,s.jsx)(n.li,{children:"\ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \ucc28\ud2b8 \uc0dd\uc131"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ub0b4\ubcf4\ub0b4\uae30",children:"\ub0b4\ubcf4\ub0b4\uae30"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["CSV: ",(0,s.jsx)(n.code,{children:"to_csv"})]}),"\n",(0,s.jsxs)(n.li,{children:["Excel: ",(0,s.jsx)(n.code,{children:"to_excel"})," with openpyxl"]}),"\n",(0,s.jsx)(n.li,{children:"StreamingResponse\ub85c \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,s.jsx)(n.a,{href:"./scenario-14-ai-ml-service",children:"AI/ML \uc11c\ube44\uc2a4 API"})]})]})}function _(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);