"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2116],{3896:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"fastapi/examples/scenario-08-social-media","title":"\uc2dc\ub098\ub9ac\uc624 8: \uc18c\uc15c \ubbf8\ub514\uc5b4 API","description":"\ud2b8\uc704\ud130/\uc778\uc2a4\ud0c0\uadf8\ub7a8 \uc2a4\ud0c0\uc77c\uc758 \uc18c\uc15c \ubbf8\ub514\uc5b4 \ud50c\ub7ab\ud3fc\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-08-social-media.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-08-social-media","permalink":"/docs/fastapi/examples/scenario-08-social-media","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-08-social-media.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 7: \ud30c\uc77c \uc800\uc7a5\uc18c \uc2dc\uc2a4\ud15c","permalink":"/docs/fastapi/examples/scenario-07-file-storage"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 9: \uc608\uc57d \uc2dc\uc2a4\ud15c","permalink":"/docs/fastapi/examples/scenario-09-booking-system"}}');var r=t(4848),o=t(8453);const i={sidebar_position:9},a="\uc2dc\ub098\ub9ac\uc624 8: \uc18c\uc15c \ubbf8\ub514\uc5b4 API",d={},l=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"text_processor.py",id:"text_processorpy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"\ub2e4\ub300\ub2e4 \uad00\uacc4",id:"\ub2e4\ub300\ub2e4-\uad00\uacc4",level:3},{value:"\ud14d\uc2a4\ud2b8 \ucc98\ub9ac",id:"\ud14d\uc2a4\ud2b8-\ucc98\ub9ac",level:3},{value:"\ud53c\ub4dc \uc54c\uace0\ub9ac\uc998",id:"\ud53c\ub4dc-\uc54c\uace0\ub9ac\uc998",level:3},{value:"\ud1b5\uacc4 \ud544\ub4dc",id:"\ud1b5\uacc4-\ud544\ub4dc",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-8-\uc18c\uc15c-\ubbf8\ub514\uc5b4-api",children:"\uc2dc\ub098\ub9ac\uc624 8: \uc18c\uc15c \ubbf8\ub514\uc5b4 API"})}),"\n",(0,r.jsx)(n.p,{children:"\ud2b8\uc704\ud130/\uc778\uc2a4\ud0c0\uadf8\ub7a8 \uc2a4\ud0c0\uc77c\uc758 \uc18c\uc15c \ubbf8\ub514\uc5b4 \ud50c\ub7ab\ud3fc\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 \ud314\ub85c\uc6b0/\uc5b8\ud314\ub85c\uc6b0"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud3ec\uc2a4\ud2b8 \uc791\uc131 (\ud14d\uc2a4\ud2b8, \uc774\ubbf8\uc9c0)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc88b\uc544\uc694, \ub313\uae00, \ub9ac\ud2b8\uc717"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud574\uc2dc\ud0dc\uadf8 \uc790\ub3d9 \ucd94\ucd9c"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uba58\uc158(@username)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud0c0\uc784\ub77c\uc778 \ud53c\ub4dc (\ud314\ub85c\uc6b0\ud55c \uc0ac\ub78c\ub4e4)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud2b8\ub80c\ub529 \ud574\uc2dc\ud0dc\uadf8"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc54c\ub9bc \uc2dc\uc2a4\ud15c"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"social-media/\n\u251c\u2500\u2500 main.py                 # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n\u251c\u2500\u2500 models.py               # DB \ubaa8\ub378 (User, Post, Comment, Hashtag)\n\u251c\u2500\u2500 schemas.py              # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py             # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 auth.py                 # JWT \uc778\uc99d\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 post_service.py     # \ud3ec\uc2a4\ud2b8 \uad00\ub9ac\n\u2502   \u251c\u2500\u2500 feed_service.py     # \ud0c0\uc784\ub77c\uc778 \ud53c\ub4dc \uc0dd\uc131\n\u2502   \u251c\u2500\u2500 hashtag_service.py  # \ud574\uc2dc\ud0dc\uadf8 \ucc98\ub9ac\n\u2502   \u2514\u2500\u2500 notification_service.py  # \uc54c\ub9bc \ucc98\ub9ac\n\u2514\u2500\u2500 requirements.txt        # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant U as User\n    participant API as FastAPI\n    participant Auth as JWT Auth\n    participant PS as PostService\n    participant HS as HashtagService\n    participant FS as FeedService\n    participant NS as NotificationService\n    participant DB as Database\n\n    Note over U,DB: 1. \ud314\ub85c\uc6b0\n    U->>API: POST /users/{id}/follow<br/>Authorization: Bearer {token}\n    API->>Auth: Verify token\n    Auth--\x3e>API: Current user\n    API->>DB: INSERT INTO followers\n    DB--\x3e>API: Follow created\n    API->>NS: Send notification (new follower)\n    API--\x3e>U: 200 OK\n\n    Note over U,DB: 2. \ud3ec\uc2a4\ud2b8 \uc791\uc131\n    U->>API: POST /posts<br/>{content, images}\n    API->>Auth: Verify token\n    Auth--\x3e>API: Current user\n    API->>PS: create_post()\n    PS->>HS: extract_hashtags(content)\n    HS--\x3e>PS: List of hashtags\n    PS->>DB: INSERT post\n    PS->>DB: INSERT/UPDATE hashtags\n    PS->>DB: INSERT post_hashtags\n    DB--\x3e>PS: Post created\n    PS->>HS: update_trending()\n    PS--\x3e>API: Post data\n    API--\x3e>U: 201 Created\n\n    Note over U,DB: 3. \ud0c0\uc784\ub77c\uc778 \ud53c\ub4dc \uc870\ud68c\n    U->>API: GET /feed<br/>Authorization: Bearer {token}\n    API->>Auth: Verify token\n    Auth--\x3e>API: Current user\n    API->>FS: generate_feed(user_id)\n    FS->>DB: SELECT posts FROM users<br/>WHERE id IN (following_ids)<br/>ORDER BY created_at DESC\n    DB--\x3e>FS: Posts list\n    FS--\x3e>API: Feed data\n    API--\x3e>U: 200 OK + Feed\n\n    Note over U,DB: 4. \uc88b\uc544\uc694 & \uc54c\ub9bc\n    U->>API: POST /posts/{id}/like\n    API->>Auth: Verify token\n    Auth--\x3e>API: Current user\n    API->>DB: INSERT INTO post_likes\n    DB--\x3e>API: Like created\n    API->>DB: SELECT post author\n    DB--\x3e>API: Author info\n    API->>NS: notify_like(author_id, liker_username, post_id)\n    NS->>DB: INSERT notification\n    API--\x3e>U: 200 OK\n\n    Note over U,DB: 5. \ud2b8\ub80c\ub529 \ud574\uc2dc\ud0dc\uadf8 \uc870\ud68c\n    U->>API: GET /hashtags/trending\n    API->>HS: get_trending_hashtags()\n    HS->>DB: SELECT hashtags<br/>WHERE created_at > now() - 24h<br/>GROUP BY tag<br/>ORDER BY count DESC\n    DB--\x3e>HS: Trending tags\n    HS--\x3e>API: Hashtag list\n    API--\x3e>U: 200 OK + Trending\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,r.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Table, Text, Index\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\n\n# \ub2e4\ub300\ub2e4 \uad00\uacc4 \ud14c\uc774\ube14\ub4e4\nfollowers = Table(\n    \'followers\',\n    Base.metadata,\n    Column(\'follower_id\', Integer, ForeignKey(\'users.id\'), primary_key=True),\n    Column(\'following_id\', Integer, ForeignKey(\'users.id\'), primary_key=True),\n    Column(\'created_at\', DateTime(timezone=True), server_default=func.now())\n)\n\npost_likes = Table(\n    \'post_likes\',\n    Base.metadata,\n    Column(\'user_id\', Integer, ForeignKey(\'users.id\'), primary_key=True),\n    Column(\'post_id\', Integer, ForeignKey(\'posts.id\'), primary_key=True),\n    Column(\'created_at\', DateTime(timezone=True), server_default=func.now())\n)\n\nclass User(Base):\n    __tablename__ = "users"\n\n    id = Column(Integer, primary_key=True)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n    display_name = Column(String)\n    bio = Column(Text, nullable=True)\n    profile_image = Column(String, nullable=True)\n    hashed_password = Column(String)\n\n    # \ud1b5\uacc4\n    followers_count = Column(Integer, default=0)\n    following_count = Column(Integer, default=0)\n    posts_count = Column(Integer, default=0)\n\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    # \uad00\uacc4\n    posts = relationship("Post", back_populates="author", foreign_keys="Post.author_id")\n\n    # \ud314\ub85c\uc6cc/\ud314\ub85c\uc789\n    followers = relationship(\n        "User",\n        secondary=followers,\n        primaryjoin=id == followers.c.following_id,\n        secondaryjoin=id == followers.c.follower_id,\n        backref="following"\n    )\n\nclass Post(Base):\n    __tablename__ = "posts"\n    __table_args__ = (\n        Index(\'idx_author_created\', \'author_id\', \'created_at\'),\n    )\n\n    id = Column(Integer, primary_key=True)\n    author_id = Column(Integer, ForeignKey(\'users.id\'), index=True)\n    content = Column(Text)\n    image_url = Column(String, nullable=True)\n\n    # \ub9ac\ud2b8\uc717\n    is_repost = Column(Integer, default=False)\n    original_post_id = Column(Integer, ForeignKey(\'posts.id\'), nullable=True)\n\n    # \ud1b5\uacc4\n    likes_count = Column(Integer, default=0)\n    comments_count = Column(Integer, default=0)\n    reposts_count = Column(Integer, default=0)\n\n    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)\n\n    # \uad00\uacc4\n    author = relationship("User", back_populates="posts", foreign_keys=[author_id])\n    original_post = relationship("Post", remote_side=[id], foreign_keys=[original_post_id])\n    likes = relationship("User", secondary=post_likes, backref="liked_posts")\n    comments = relationship("Comment", back_populates="post")\n    hashtags = relationship("PostHashtag", back_populates="post")\n    mentions = relationship("PostMention", back_populates="post")\n\nclass Comment(Base):\n    __tablename__ = "comments"\n\n    id = Column(Integer, primary_key=True)\n    post_id = Column(Integer, ForeignKey(\'posts.id\'), index=True)\n    author_id = Column(Integer, ForeignKey(\'users.id\'))\n    content = Column(Text)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    post = relationship("Post", back_populates="comments")\n    author = relationship("User")\n\nclass Hashtag(Base):\n    __tablename__ = "hashtags"\n\n    id = Column(Integer, primary_key=True)\n    tag = Column(String, unique=True, index=True)\n    posts_count = Column(Integer, default=0)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    posts = relationship("PostHashtag", back_populates="hashtag")\n\nclass PostHashtag(Base):\n    __tablename__ = "post_hashtags"\n\n    post_id = Column(Integer, ForeignKey(\'posts.id\'), primary_key=True)\n    hashtag_id = Column(Integer, ForeignKey(\'hashtags.id\'), primary_key=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    post = relationship("Post", back_populates="hashtags")\n    hashtag = relationship("Hashtag", back_populates="posts")\n\nclass PostMention(Base):\n    __tablename__ = "post_mentions"\n\n    id = Column(Integer, primary_key=True)\n    post_id = Column(Integer, ForeignKey(\'posts.id\'), index=True)\n    mentioned_user_id = Column(Integer, ForeignKey(\'users.id\'), index=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    post = relationship("Post", back_populates="mentions")\n    mentioned_user = relationship("User")\n\nclass Notification(Base):\n    __tablename__ = "notifications"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\'users.id\'), index=True)\n    type = Column(String)  # "follow", "like", "comment", "mention", "repost"\n    from_user_id = Column(Integer, ForeignKey(\'users.id\'))\n    post_id = Column(Integer, ForeignKey(\'posts.id\'), nullable=True)\n    is_read = Column(Integer, default=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\n    user = relationship("User", foreign_keys=[user_id])\n    from_user = relationship("User", foreign_keys=[from_user_id])\n    post = relationship("Post")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"text_processorpy",children:"text_processor.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import re\nfrom typing import List, Tuple\n\nclass TextProcessor:\n    @staticmethod\n    def extract_hashtags(text: str) -> List[str]:\n        """\ud574\uc2dc\ud0dc\uadf8 \ucd94\ucd9c"""\n        pattern = r\'#(\\w+)\'\n        hashtags = re.findall(pattern, text)\n        return [tag.lower() for tag in hashtags]\n\n    @staticmethod\n    def extract_mentions(text: str) -> List[str]:\n        """\uba58\uc158 \ucd94\ucd9c"""\n        pattern = r\'@(\\w+)\'\n        mentions = re.findall(pattern, text)\n        return mentions\n\n    @staticmethod\n    def linkify_text(text: str) -> str:\n        """\ud574\uc2dc\ud0dc\uadf8\uc640 \uba58\uc158\uc744 \ub9c1\ud06c\ub85c \ubcc0\ud658"""\n        # \ud574\uc2dc\ud0dc\uadf8 \ub9c1\ud06c\ud654\n        text = re.sub(\n            r\'#(\\w+)\',\n            r\'<a href="/hashtags/\\1">#\\1</a>\',\n            text\n        )\n\n        # \uba58\uc158 \ub9c1\ud06c\ud654\n        text = re.sub(\n            r\'@(\\w+)\',\n            r\'<a href="/users/\\1">@\\1</a>\',\n            text\n        )\n\n        return text\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, HTTPException, BackgroundTasks\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import desc, func, and_, or_\nfrom typing import List, Optional\nimport models, schemas\nfrom database import engine, get_db\nfrom auth import get_current_user\nfrom text_processor import TextProcessor\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Social Media API")\n\ntext_processor = TextProcessor()\n\n# ==================== \ud314\ub85c\uc6b0 ====================\n\n@app.post("/users/{username}/follow")\ndef follow_user(\n    username: str,\n    current_user: User = Depends(get_current_user),\n    background_tasks: BackgroundTasks,\n    db: Session = Depends(get_db)\n):\n    """\uc0ac\uc6a9\uc790 \ud314\ub85c\uc6b0"""\n    target_user = db.query(models.User).filter(\n        models.User.username == username\n    ).first()\n\n    if not target_user:\n        raise HTTPException(status_code=404, detail="User not found")\n\n    if target_user.id == current_user.id:\n        raise HTTPException(status_code=400, detail="Cannot follow yourself")\n\n    # \uc774\ubbf8 \ud314\ub85c\uc6b0 \uc911\uc778\uc9c0 \ud655\uc778\n    if target_user in current_user.following:\n        raise HTTPException(status_code=400, detail="Already following")\n\n    # \ud314\ub85c\uc6b0 \ucd94\uac00\n    current_user.following.append(target_user)\n    current_user.following_count += 1\n    target_user.followers_count += 1\n\n    db.commit()\n\n    # \uc54c\ub9bc \uc0dd\uc131\n    background_tasks.add_task(\n        create_notification,\n        db,\n        target_user.id,\n        "follow",\n        current_user.id\n    )\n\n    return {"message": f"Now following @{username}"}\n\n@app.delete("/users/{username}/follow")\ndef unfollow_user(\n    username: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc5b8\ud314\ub85c\uc6b0"""\n    target_user = db.query(models.User).filter(\n        models.User.username == username\n    ).first()\n\n    if not target_user:\n        raise HTTPException(status_code=404, detail="User not found")\n\n    if target_user not in current_user.following:\n        raise HTTPException(status_code=400, detail="Not following")\n\n    # \uc5b8\ud314\ub85c\uc6b0\n    current_user.following.remove(target_user)\n    current_user.following_count -= 1\n    target_user.followers_count -= 1\n\n    db.commit()\n\n    return {"message": f"Unfollowed @{username}"}\n\n@app.get("/users/{username}/followers", response_model=List[schemas.User])\ndef get_followers(\n    username: str,\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db)\n):\n    """\ud314\ub85c\uc6cc \ubaa9\ub85d"""\n    user = db.query(models.User).filter(models.User.username == username).first()\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n\n    return user.followers[skip:skip+limit]\n\n# ==================== \ud3ec\uc2a4\ud2b8 ====================\n\n@app.post("/posts", response_model=schemas.Post)\ndef create_post(\n    post: schemas.PostCreate,\n    current_user: User = Depends(get_current_user),\n    background_tasks: BackgroundTasks,\n    db: Session = Depends(get_db)\n):\n    """\ud3ec\uc2a4\ud2b8 \uc791\uc131"""\n    # \ud3ec\uc2a4\ud2b8 \uc0dd\uc131\n    db_post = models.Post(\n        author_id=current_user.id,\n        content=post.content,\n        image_url=post.image_url\n    )\n    db.add(db_post)\n    db.flush()\n\n    # \ud574\uc2dc\ud0dc\uadf8 \ucd94\ucd9c \ubc0f \uc800\uc7a5\n    hashtags = text_processor.extract_hashtags(post.content)\n    for tag in hashtags:\n        hashtag = db.query(models.Hashtag).filter(\n            models.Hashtag.tag == tag\n        ).first()\n\n        if not hashtag:\n            hashtag = models.Hashtag(tag=tag)\n            db.add(hashtag)\n            db.flush()\n\n        # \ud3ec\uc2a4\ud2b8-\ud574\uc2dc\ud0dc\uadf8 \uc5f0\uacb0\n        post_hashtag = models.PostHashtag(\n            post_id=db_post.id,\n            hashtag_id=hashtag.id\n        )\n        db.add(post_hashtag)\n        hashtag.posts_count += 1\n\n    # \uba58\uc158 \ucd94\ucd9c \ubc0f \uc800\uc7a5\n    mentions = text_processor.extract_mentions(post.content)\n    for mention in mentions:\n        mentioned_user = db.query(models.User).filter(\n            models.User.username == mention\n        ).first()\n\n        if mentioned_user:\n            post_mention = models.PostMention(\n                post_id=db_post.id,\n                mentioned_user_id=mentioned_user.id\n            )\n            db.add(post_mention)\n\n            # \uba58\uc158 \uc54c\ub9bc\n            background_tasks.add_task(\n                create_notification,\n                db,\n                mentioned_user.id,\n                "mention",\n                current_user.id,\n                db_post.id\n            )\n\n    current_user.posts_count += 1\n    db.commit()\n    db.refresh(db_post)\n\n    return db_post\n\n@app.get("/timeline", response_model=List[schemas.Post])\ndef get_timeline(\n    skip: int = 0,\n    limit: int = 20,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ud0c0\uc784\ub77c\uc778 \ud53c\ub4dc (\ud314\ub85c\uc6b0\ud55c \uc0ac\uc6a9\uc790\ub4e4\uc758 \ud3ec\uc2a4\ud2b8)"""\n    # \ud314\ub85c\uc6b0\ud55c \uc0ac\uc6a9\uc790 ID \ubaa9\ub85d\n    following_ids = [user.id for user in current_user.following]\n    following_ids.append(current_user.id)  # \ubcf8\uc778 \ud3ec\uc2a4\ud2b8\ub3c4 \ud3ec\ud568\n\n    posts = db.query(models.Post).filter(\n        models.Post.author_id.in_(following_ids)\n    ).order_by(desc(models.Post.created_at)).offset(skip).limit(limit).all()\n\n    return posts\n\n@app.post("/posts/{post_id}/like")\ndef like_post(\n    post_id: int,\n    current_user: User = Depends(get_current_user),\n    background_tasks: BackgroundTasks,\n    db: Session = Depends(get_db)\n):\n    """\ud3ec\uc2a4\ud2b8 \uc88b\uc544\uc694"""\n    post = db.query(models.Post).filter(models.Post.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail="Post not found")\n\n    # \uc774\ubbf8 \uc88b\uc544\uc694 \ud588\ub294\uc9c0 \ud655\uc778\n    if post in current_user.liked_posts:\n        raise HTTPException(status_code=400, detail="Already liked")\n\n    # \uc88b\uc544\uc694 \ucd94\uac00\n    current_user.liked_posts.append(post)\n    post.likes_count += 1\n    db.commit()\n\n    # \uc54c\ub9bc\n    if post.author_id != current_user.id:\n        background_tasks.add_task(\n            create_notification,\n            db,\n            post.author_id,\n            "like",\n            current_user.id,\n            post_id\n        )\n\n    return {"message": "Post liked"}\n\n@app.delete("/posts/{post_id}/like")\ndef unlike_post(\n    post_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc88b\uc544\uc694 \ucde8\uc18c"""\n    post = db.query(models.Post).filter(models.Post.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail="Post not found")\n\n    if post not in current_user.liked_posts:\n        raise HTTPException(status_code=400, detail="Not liked")\n\n    current_user.liked_posts.remove(post)\n    post.likes_count -= 1\n    db.commit()\n\n    return {"message": "Like removed"}\n\n@app.post("/posts/{post_id}/repost")\ndef repost(\n    post_id: int,\n    current_user: User = Depends(get_current_user),\n    background_tasks: BackgroundTasks,\n    db: Session = Depends(get_db)\n):\n    """\ub9ac\ud2b8\uc717"""\n    original_post = db.query(models.Post).filter(models.Post.id == post_id).first()\n    if not original_post:\n        raise HTTPException(status_code=404, detail="Post not found")\n\n    # \ub9ac\ud3ec\uc2a4\ud2b8 \uc0dd\uc131\n    repost = models.Post(\n        author_id=current_user.id,\n        content=original_post.content,\n        image_url=original_post.image_url,\n        is_repost=True,\n        original_post_id=original_post.id\n    )\n    db.add(repost)\n\n    original_post.reposts_count += 1\n    current_user.posts_count += 1\n    db.commit()\n\n    # \uc54c\ub9bc\n    if original_post.author_id != current_user.id:\n        background_tasks.add_task(\n            create_notification,\n            db,\n            original_post.author_id,\n            "repost",\n            current_user.id,\n            post_id\n        )\n\n    return {"message": "Post reposted", "repost_id": repost.id}\n\n@app.post("/posts/{post_id}/comments", response_model=schemas.Comment)\ndef create_comment(\n    post_id: int,\n    comment: schemas.CommentCreate,\n    current_user: User = Depends(get_current_user),\n    background_tasks: BackgroundTasks,\n    db: Session = Depends(get_db)\n):\n    """\ub313\uae00 \uc791\uc131"""\n    post = db.query(models.Post).filter(models.Post.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail="Post not found")\n\n    db_comment = models.Comment(\n        post_id=post_id,\n        author_id=current_user.id,\n        content=comment.content\n    )\n    db.add(db_comment)\n\n    post.comments_count += 1\n    db.commit()\n    db.refresh(db_comment)\n\n    # \uc54c\ub9bc\n    if post.author_id != current_user.id:\n        background_tasks.add_task(\n            create_notification,\n            db,\n            post.author_id,\n            "comment",\n            current_user.id,\n            post_id\n        )\n\n    return db_comment\n\n# ==================== \ud574\uc2dc\ud0dc\uadf8 ====================\n\n@app.get("/hashtags/trending", response_model=List[schemas.Hashtag])\ndef get_trending_hashtags(limit: int = 10, db: Session = Depends(get_db)):\n    """\ud2b8\ub80c\ub529 \ud574\uc2dc\ud0dc\uadf8"""\n    hashtags = db.query(models.Hashtag).order_by(\n        desc(models.Hashtag.posts_count)\n    ).limit(limit).all()\n\n    return hashtags\n\n@app.get("/hashtags/{tag}/posts", response_model=List[schemas.Post])\ndef get_posts_by_hashtag(\n    tag: str,\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db)\n):\n    """\ud574\uc2dc\ud0dc\uadf8\ub85c \ud3ec\uc2a4\ud2b8 \uac80\uc0c9"""\n    hashtag = db.query(models.Hashtag).filter(\n        models.Hashtag.tag == tag.lower()\n    ).first()\n\n    if not hashtag:\n        return []\n\n    post_ids = [ph.post_id for ph in hashtag.posts]\n    posts = db.query(models.Post).filter(\n        models.Post.id.in_(post_ids)\n    ).order_by(desc(models.Post.created_at)).offset(skip).limit(limit).all()\n\n    return posts\n\n# ==================== \uc54c\ub9bc ====================\n\n@app.get("/notifications", response_model=List[schemas.Notification])\ndef get_notifications(\n    unread_only: bool = False,\n    skip: int = 0,\n    limit: int = 20,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc54c\ub9bc \uc870\ud68c"""\n    query = db.query(models.Notification).filter(\n        models.Notification.user_id == current_user.id\n    )\n\n    if unread_only:\n        query = query.filter(models.Notification.is_read == False)\n\n    notifications = query.order_by(\n        desc(models.Notification.created_at)\n    ).offset(skip).limit(limit).all()\n\n    return notifications\n\n@app.put("/notifications/{notification_id}/read")\ndef mark_notification_read(\n    notification_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc54c\ub9bc \uc77d\uc74c \ud45c\uc2dc"""\n    notification = db.query(models.Notification).filter(\n        models.Notification.id == notification_id,\n        models.Notification.user_id == current_user.id\n    ).first()\n\n    if not notification:\n        raise HTTPException(status_code=404, detail="Notification not found")\n\n    notification.is_read = True\n    db.commit()\n\n    return {"message": "Notification marked as read"}\n\n# ==================== \ud5ec\ud37c \ud568\uc218 ====================\n\ndef create_notification(\n    db: Session,\n    user_id: int,\n    type: str,\n    from_user_id: int,\n    post_id: int = None\n):\n    """\uc54c\ub9bc \uc0dd\uc131"""\n    notification = models.Notification(\n        user_id=user_id,\n        type=type,\n        from_user_id=from_user_id,\n        post_id=post_id\n    )\n    db.add(notification)\n    db.commit()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,r.jsx)(n.h3,{id:"\ub2e4\ub300\ub2e4-\uad00\uacc4",children:"\ub2e4\ub300\ub2e4 \uad00\uacc4"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ud314\ub85c\uc6b0: User \u2194 User"}),"\n",(0,r.jsx)(n.li,{children:"\uc88b\uc544\uc694: User \u2194 Post"}),"\n",(0,r.jsxs)(n.li,{children:["SQLAlchemy\uc758 ",(0,r.jsx)(n.code,{children:"secondary"})," \ud14c\uc774\ube14 \ud65c\uc6a9"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud14d\uc2a4\ud2b8-\ucc98\ub9ac",children:"\ud14d\uc2a4\ud2b8 \ucc98\ub9ac"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\uc815\uaddc\ud45c\ud604\uc2dd\uc73c\ub85c \ud574\uc2dc\ud0dc\uadf8/\uba58\uc158 \ucd94\ucd9c"}),"\n",(0,r.jsx)(n.li,{children:"\uc790\ub3d9 \ub9c1\ud06c\ud654"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud53c\ub4dc-\uc54c\uace0\ub9ac\uc998",children:"\ud53c\ub4dc \uc54c\uace0\ub9ac\uc998"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ud314\ub85c\uc6b0\ud55c \uc0ac\uc6a9\uc790\ub4e4\uc758 \ud3ec\uc2a4\ud2b8\ub97c \uc2dc\uac04\uc21c \uc815\ub82c"}),"\n",(0,r.jsx)(n.li,{children:"\uc2e4\uc81c\ub85c\ub294 \ucd94\ucc9c \uc54c\uace0\ub9ac\uc998 \uc801\uc6a9 \uac00\ub2a5"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\ud1b5\uacc4-\ud544\ub4dc",children:"\ud1b5\uacc4 \ud544\ub4dc"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"followers_count"}),", ",(0,r.jsx)(n.code,{children:"likes_count"})," \ub4f1 \ube44\uc815\uaddc\ud654"]}),"\n",(0,r.jsx)(n.li,{children:"\uc131\ub2a5 \ucd5c\uc801\ud654 (COUNT \ucffc\ub9ac \ucd5c\uc18c\ud654)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,r.jsx)(n.a,{href:"./scenario-09-booking-system",children:"\uc608\uc57d \uc2dc\uc2a4\ud15c"})]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);