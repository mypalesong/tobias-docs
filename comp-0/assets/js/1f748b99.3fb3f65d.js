"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[4891],{190:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"fastapi/examples/scenario-06-payment-system","title":"\uc2dc\ub098\ub9ac\uc624 6: \uc804\uc790\uacb0\uc81c \uc2dc\uc2a4\ud15c","description":"\uc548\uc804\ud55c \uc804\uc790\uacb0\uc81c \ucc98\ub9ac \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-06-payment-system.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-06-payment-system","permalink":"/docs/fastapi/examples/scenario-06-payment-system","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-06-payment-system.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 5: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4","permalink":"/docs/fastapi/examples/scenario-05-microservices"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 7: \ud30c\uc77c \uc800\uc7a5\uc18c \uc2dc\uc2a4\ud15c","permalink":"/docs/fastapi/examples/scenario-07-file-storage"}}');var s=t(4848),r=t(8453);const i={sidebar_position:7},d="\uc2dc\ub098\ub9ac\uc624 6: \uc804\uc790\uacb0\uc81c \uc2dc\uc2a4\ud15c",o={},m=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"pg_client.py (PG\uc0ac API \ud074\ub77c\uc774\uc5b8\ud2b8)",id:"pg_clientpy-pg\uc0ac-api-\ud074\ub77c\uc774\uc5b8\ud2b8",level:3},{value:"payment_service.py",id:"payment_servicepy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\udd12 \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d",id:"-\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",level:2},{value:"1. \uc554\ud638\ud654",id:"1-\uc554\ud638\ud654",level:3},{value:"2. \uba71\ub4f1\uc131",id:"2-\uba71\ub4f1\uc131",level:3},{value:"3. \ub85c\uae45",id:"3-\ub85c\uae45",level:3},{value:"4. \uc7ac\uc2dc\ub3c4",id:"4-\uc7ac\uc2dc\ub3c4",level:3},{value:"\ud83d\udcda \ud559\uc2b5 \uc644\ub8cc!",id:"-\ud559\uc2b5-\uc644\ub8cc",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-6-\uc804\uc790\uacb0\uc81c-\uc2dc\uc2a4\ud15c",children:"\uc2dc\ub098\ub9ac\uc624 6: \uc804\uc790\uacb0\uc81c \uc2dc\uc2a4\ud15c"})}),"\n",(0,s.jsx)(n.p,{children:"\uc548\uc804\ud55c \uc804\uc790\uacb0\uc81c \ucc98\ub9ac \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,s.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 PG\uc0ac \uc5f0\ub3d9 (\uc2dc\ubbac\ub808\uc774\uc158)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uacb0\uc81c \uc694\uccad/\uc2b9\uc778/\ucde8\uc18c"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Webhook \ucc98\ub9ac"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uc554\ud638\ud654 \ubc0f \uc11c\uba85 \uac80\uc99d"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uba71\ub4f1\uc131(Idempotency) \ubcf4\uc7a5"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uacb0\uc81c \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \ud658\ubd88 \ucc98\ub9ac"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"payment-system/\n\u251c\u2500\u2500 main.py                 # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 & API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\u251c\u2500\u2500 models.py               # DB \ubaa8\ub378 (Payment, PaymentLog)\n\u251c\u2500\u2500 schemas.py              # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py             # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 payment_service.py      # \uacb0\uc81c \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n\u251c\u2500\u2500 pg_client.py            # PG\uc0ac API \ud074\ub77c\uc774\uc5b8\ud2b8\n\u251c\u2500\u2500 utils.py                # \uc554\ud638\ud654, \uc11c\uba85 \uac80\uc99d \uc720\ud2f8\ub9ac\ud2f0\n\u2514\u2500\u2500 requirements.txt        # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant C as Client\n    participant API as FastAPI\n    participant PS as PaymentService\n    participant PG as PG Client\n    participant PGS as PG Server<br/>(External)\n    participant DB as Database\n\n    Note over C,DB: 1. \uacb0\uc81c \uc0dd\uc131 (\uba71\ub4f1\uc131 \ubcf4\uc7a5)\n    C->>API: POST /payments<br/>Idempotency-Key: {uuid}\n    API->>PS: create_payment()\n    PS->>DB: Check idempotency_key exists\n    alt Key exists (\uc911\ubcf5 \uc694\uccad)\n        DB--\x3e>PS: Existing payment\n        PS--\x3e>API: Return existing payment\n        API--\x3e>C: 200 OK (idempotent)\n    else New request\n        PS->>DB: INSERT payment (pending)\n        PS->>PG: request_payment()\n        PG->>PG: Generate signature\n        PG->>PGS: POST /v1/payments<br/>Authorization + X-Signature\n        alt Payment success\n            PGS--\x3e>PG: {status: "success", transaction_id}\n            PG--\x3e>PS: Payment approved\n            PS->>DB: UPDATE payment (completed)\n            PS->>DB: INSERT payment_log\n            PS--\x3e>API: Payment completed\n            API--\x3e>C: 201 Created + Payment\n        else Payment failed\n            PGS--\x3e>PG: {status: "failed", error}\n            PG--\x3e>PS: Payment failed\n            PS->>DB: UPDATE payment (failed)\n            PS->>DB: INSERT payment_log\n            PS--\x3e>API: Payment failed\n            API--\x3e>C: 400 Bad Request\n        end\n    end\n\n    Note over C,DB: 2. Webhook \ucc98\ub9ac (\ube44\ub3d9\uae30)\n    PGS->>API: POST /webhook/payment<br/>X-Signature: {hmac}\n    API->>API: Verify webhook signature\n    alt Signature valid\n        API->>API: Add to background tasks\n        API--\x3e>PGS: 200 OK {status: "received"}\n        API->>PS: process_webhook() (async)\n        PS->>DB: Find payment by transaction_id\n        PS->>DB: UPDATE payment status\n        PS->>DB: INSERT payment_log\n    else Signature invalid\n        API--\x3e>PGS: 401 Unauthorized\n    end\n\n    Note over C,DB: 3. \uacb0\uc81c \ucde8\uc18c\n    C->>API: POST /payments/{id}/cancel<br/>{reason}\n    API->>PS: cancel_payment()\n    PS->>DB: SELECT payment\n    alt Status = completed\n        PS->>PG: cancel_payment()\n        PG->>PG: Generate signature\n        PG->>PGS: POST /v1/payments/{id}/cancel\n        PGS--\x3e>PG: {status: "success"}\n        PG--\x3e>PS: Cancelled\n        PS->>DB: UPDATE payment (cancelled)\n        PS->>DB: INSERT payment_log\n        PS--\x3e>API: Cancel successful\n        API--\x3e>C: 200 OK\n    else Status != completed\n        PS--\x3e>API: Cannot cancel\n        API--\x3e>C: 400 Bad Request\n    end\n\n    Note over C,DB: 4. \ud658\ubd88 \ucc98\ub9ac\n    C->>API: POST /payments/{id}/refund<br/>{amount, reason}\n    API->>PS: refund_payment()\n    PS->>DB: SELECT payment\n    PS->>PG: refund_payment()\n    PG->>PGS: POST /v1/payments/{id}/refund\n    PGS--\x3e>PG: {status: "success", refund_id}\n    PG--\x3e>PS: Refund processed\n    PS->>DB: UPDATE payment (refunded)\n    PS->>DB: INSERT payment_log\n    PS--\x3e>API: Refund successful\n    API--\x3e>C: 200 OK\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,s.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, Float, DateTime, Enum as SQLEnum, Boolean\nfrom sqlalchemy.sql import func\nfrom database import Base\nimport enum\n\nclass PaymentStatus(str, enum.Enum):\n    pending = "pending"\n    processing = "processing"\n    completed = "completed"\n    failed = "failed"\n    cancelled = "cancelled"\n    refunded = "refunded"\n\nclass Payment(Base):\n    __tablename__ = "payments"\n\n    id = Column(Integer, primary_key=True)\n    order_id = Column(Integer, unique=True, index=True)\n    user_id = Column(Integer, index=True)\n    amount = Column(Float)\n    currency = Column(String, default="KRW")\n    status = Column(SQLEnum(PaymentStatus), default=PaymentStatus.pending)\n\n    # PG\uc0ac \uc815\ubcf4\n    pg_provider = Column(String)  # "toss", "kakao", "naver"\n    pg_transaction_id = Column(String, unique=True, nullable=True)\n\n    # \uba71\ub4f1\uc131 \ud0a4\n    idempotency_key = Column(String, unique=True, index=True)\n\n    # \uacb0\uc81c \uc218\ub2e8\n    payment_method = Column(String)  # "card", "bank_transfer", "virtual_account"\n    card_info = Column(String, nullable=True)  # \ub9c8\uc9c0\ub9c9 4\uc790\ub9ac\ub9cc \uc800\uc7a5\n\n    # \ud0c0\uc784\uc2a4\ud0ec\ud504\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    completed_at = Column(DateTime(timezone=True), nullable=True)\n\n    # \uc7ac\uc2dc\ub3c4\n    retry_count = Column(Integer, default=0)\n    last_error = Column(String, nullable=True)\n\nclass PaymentLog(Base):\n    __tablename__ = "payment_logs"\n\n    id = Column(Integer, primary_key=True)\n    payment_id = Column(Integer, index=True)\n    action = Column(String)  # "request", "approve", "cancel", "refund"\n    status = Column(String)\n    request_data = Column(String)\n    response_data = Column(String)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pg_clientpy-pg\uc0ac-api-\ud074\ub77c\uc774\uc5b8\ud2b8",children:"pg_client.py (PG\uc0ac API \ud074\ub77c\uc774\uc5b8\ud2b8)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import httpx\nimport hashlib\nimport hmac\nimport json\nfrom datetime import datetime\n\nclass PGClient:\n    """PG\uc0ac API \ud074\ub77c\uc774\uc5b8\ud2b8 (\uc2dc\ubbac\ub808\uc774\uc158)"""\n\n    def __init__(self, provider: str, api_key: str, secret_key: str):\n        self.provider = provider\n        self.api_key = api_key\n        self.secret_key = secret_key\n        self.base_url = self._get_base_url(provider)\n\n    def _get_base_url(self, provider: str) -> str:\n        urls = {\n            "toss": "https://api.tosspayments.com",\n            "kakao": "https://kapi.kakao.com",\n            "naver": "https://pay.naver.com/api"\n        }\n        return urls.get(provider, "https://example.com")\n\n    def _generate_signature(self, data: dict) -> str:\n        """\uc694\uccad \uc11c\uba85 \uc0dd\uc131"""\n        message = json.dumps(data, sort_keys=True)\n        signature = hmac.new(\n            self.secret_key.encode(),\n            message.encode(),\n            hashlib.sha256\n        ).hexdigest()\n        return signature\n\n    def _verify_signature(self, data: dict, signature: str) -> bool:\n        """\uc751\ub2f5 \uc11c\uba85 \uac80\uc99d"""\n        expected = self._generate_signature(data)\n        return hmac.compare_digest(expected, signature)\n\n    async def request_payment(\n        self,\n        order_id: int,\n        amount: float,\n        payment_method: str,\n        user_info: dict\n    ) -> dict:\n        """\uacb0\uc81c \uc694\uccad"""\n        data = {\n            "order_id": order_id,\n            "amount": amount,\n            "payment_method": payment_method,\n            "user_info": user_info,\n            "timestamp": datetime.utcnow().isoformat()\n        }\n\n        signature = self._generate_signature(data)\n        headers = {\n            "Authorization": f"Bearer {self.api_key}",\n            "X-Signature": signature\n        }\n\n        # \uc2e4\uc81c\ub85c\ub294 PG\uc0ac API \ud638\ucd9c\n        # async with httpx.AsyncClient() as client:\n        #     response = await client.post(\n        #         f"{self.base_url}/v1/payments",\n        #         json=data,\n        #         headers=headers\n        #     )\n        #     return response.json()\n\n        # \uc2dc\ubbac\ub808\uc774\uc158\n        import random\n        success = random.random() > 0.1  # 90% \uc131\uacf5\ub960\n\n        if success:\n            return {\n                "status": "success",\n                "transaction_id": f"TXN{order_id}{int(datetime.now().timestamp())}",\n                "approved_at": datetime.utcnow().isoformat()\n            }\n        else:\n            return {\n                "status": "failed",\n                "error_code": "INSUFFICIENT_BALANCE",\n                "error_message": "\uc794\uc561 \ubd80\uc871"\n            }\n\n    async def cancel_payment(self, transaction_id: str, reason: str) -> dict:\n        """\uacb0\uc81c \ucde8\uc18c"""\n        data = {\n            "transaction_id": transaction_id,\n            "reason": reason,\n            "timestamp": datetime.utcnow().isoformat()\n        }\n\n        signature = self._generate_signature(data)\n        headers = {\n            "Authorization": f"Bearer {self.api_key}",\n            "X-Signature": signature\n        }\n\n        # \uc2dc\ubbac\ub808\uc774\uc158\n        return {\n            "status": "success",\n            "cancelled_at": datetime.utcnow().isoformat()\n        }\n\n    async def refund_payment(\n        self,\n        transaction_id: str,\n        amount: float,\n        reason: str\n    ) -> dict:\n        """\ud658\ubd88 \ucc98\ub9ac"""\n        data = {\n            "transaction_id": transaction_id,\n            "amount": amount,\n            "reason": reason,\n            "timestamp": datetime.utcnow().isoformat()\n        }\n\n        signature = self._generate_signature(data)\n\n        # \uc2dc\ubbac\ub808\uc774\uc158\n        return {\n            "status": "success",\n            "refund_id": f"RFD{transaction_id}",\n            "refunded_at": datetime.utcnow().isoformat()\n        }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"payment_servicepy",children:"payment_service.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import HTTPException\nfrom sqlalchemy.orm import Session\nfrom datetime import datetime\nimport models\nfrom pg_client import PGClient\nimport json\n\nclass PaymentService:\n    def __init__(self, db: Session):\n        self.db = db\n        # \uc2e4\uc81c\ub85c\ub294 \ud658\uacbd\ubcc0\uc218\uc5d0\uc11c \ub85c\ub4dc\n        self.pg_clients = {\n            "toss": PGClient("toss", "test_api_key", "test_secret_key"),\n            "kakao": PGClient("kakao", "test_api_key", "test_secret_key")\n        }\n\n    def _log_payment(\n        self,\n        payment_id: int,\n        action: str,\n        status: str,\n        request_data: dict,\n        response_data: dict\n    ):\n        """\uacb0\uc81c \ub85c\uadf8 \uc800\uc7a5"""\n        log = models.PaymentLog(\n            payment_id=payment_id,\n            action=action,\n            status=status,\n            request_data=json.dumps(request_data),\n            response_data=json.dumps(response_data)\n        )\n        self.db.add(log)\n        self.db.commit()\n\n    async def create_payment(\n        self,\n        order_id: int,\n        user_id: int,\n        amount: float,\n        payment_method: str,\n        pg_provider: str,\n        idempotency_key: str\n    ) -> models.Payment:\n        """\uacb0\uc81c \uc0dd\uc131 (\uba71\ub4f1\uc131 \ubcf4\uc7a5)"""\n        # \uba71\ub4f1\uc131 \ud0a4\ub85c \uc911\ubcf5 \uc694\uccad \ud655\uc778\n        existing = self.db.query(models.Payment).filter(\n            models.Payment.idempotency_key == idempotency_key\n        ).first()\n\n        if existing:\n            return existing\n\n        # \uacb0\uc81c \ub808\ucf54\ub4dc \uc0dd\uc131\n        payment = models.Payment(\n            order_id=order_id,\n            user_id=user_id,\n            amount=amount,\n            payment_method=payment_method,\n            pg_provider=pg_provider,\n            idempotency_key=idempotency_key,\n            status=models.PaymentStatus.pending\n        )\n        self.db.add(payment)\n        self.db.commit()\n        self.db.refresh(payment)\n\n        # PG\uc0ac\uc5d0 \uacb0\uc81c \uc694\uccad\n        await self.process_payment(payment.id)\n\n        return payment\n\n    async def process_payment(self, payment_id: int) -> models.Payment:\n        """\uacb0\uc81c \ucc98\ub9ac"""\n        payment = self.db.query(models.Payment).filter(\n            models.Payment.id == payment_id\n        ).first()\n\n        if not payment:\n            raise HTTPException(status_code=404, detail="Payment not found")\n\n        if payment.status != models.PaymentStatus.pending:\n            return payment\n\n        # \uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8\n        payment.status = models.PaymentStatus.processing\n        self.db.commit()\n\n        try:\n            # PG\uc0ac API \ud638\ucd9c\n            pg_client = self.pg_clients[payment.pg_provider]\n\n            request_data = {\n                "order_id": payment.order_id,\n                "amount": payment.amount,\n                "payment_method": payment.payment_method,\n                "user_info": {"user_id": payment.user_id}\n            }\n\n            response = await pg_client.request_payment(**request_data)\n\n            # \ub85c\uadf8 \uc800\uc7a5\n            self._log_payment(payment.id, "request", response["status"], request_data, response)\n\n            if response["status"] == "success":\n                payment.status = models.PaymentStatus.completed\n                payment.pg_transaction_id = response["transaction_id"]\n                payment.completed_at = datetime.utcnow()\n            else:\n                payment.status = models.PaymentStatus.failed\n                payment.last_error = response.get("error_message", "Unknown error")\n\n            self.db.commit()\n            self.db.refresh(payment)\n            return payment\n\n        except Exception as e:\n            payment.status = models.PaymentStatus.failed\n            payment.retry_count += 1\n            payment.last_error = str(e)\n            self.db.commit()\n            raise HTTPException(status_code=500, detail="Payment processing failed")\n\n    async def cancel_payment(self, payment_id: int, reason: str) -> models.Payment:\n        """\uacb0\uc81c \ucde8\uc18c"""\n        payment = self.db.query(models.Payment).filter(\n            models.Payment.id == payment_id\n        ).first()\n\n        if not payment:\n            raise HTTPException(status_code=404, detail="Payment not found")\n\n        if payment.status != models.PaymentStatus.completed:\n            raise HTTPException(status_code=400, detail="Cannot cancel non-completed payment")\n\n        # PG\uc0ac\uc5d0 \ucde8\uc18c \uc694\uccad\n        pg_client = self.pg_clients[payment.pg_provider]\n        response = await pg_client.cancel_payment(payment.pg_transaction_id, reason)\n\n        # \ub85c\uadf8 \uc800\uc7a5\n        self._log_payment(payment.id, "cancel", response["status"], {"reason": reason}, response)\n\n        if response["status"] == "success":\n            payment.status = models.PaymentStatus.cancelled\n            self.db.commit()\n\n        return payment\n\n    async def refund_payment(\n        self,\n        payment_id: int,\n        amount: float,\n        reason: str\n    ) -> models.Payment:\n        """\ud658\ubd88 \ucc98\ub9ac"""\n        payment = self.db.query(models.Payment).filter(\n            models.Payment.id == payment_id\n        ).first()\n\n        if not payment:\n            raise HTTPException(status_code=404, detail="Payment not found")\n\n        if payment.status != models.PaymentStatus.completed:\n            raise HTTPException(status_code=400, detail="Cannot refund non-completed payment")\n\n        if amount > payment.amount:\n            raise HTTPException(status_code=400, detail="Refund amount exceeds payment amount")\n\n        # PG\uc0ac\uc5d0 \ud658\ubd88 \uc694\uccad\n        pg_client = self.pg_clients[payment.pg_provider]\n        response = await pg_client.refund_payment(\n            payment.pg_transaction_id,\n            amount,\n            reason\n        )\n\n        # \ub85c\uadf8 \uc800\uc7a5\n        self._log_payment(\n            payment.id,\n            "refund",\n            response["status"],\n            {"amount": amount, "reason": reason},\n            response\n        )\n\n        if response["status"] == "success":\n            payment.status = models.PaymentStatus.refunded\n            self.db.commit()\n\n        return payment\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, HTTPException, Header, BackgroundTasks\nfrom sqlalchemy.orm import Session\nimport models, schemas\nfrom database import engine, get_db\nfrom payment_service import PaymentService\nimport hmac\nimport hashlib\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Payment System")\n\nWEBHOOK_SECRET = "your-webhook-secret"\n\ndef verify_webhook_signature(payload: bytes, signature: str) -> bool:\n    """Webhook \uc11c\uba85 \uac80\uc99d"""\n    expected = hmac.new(\n        WEBHOOK_SECRET.encode(),\n        payload,\n        hashlib.sha256\n    ).hexdigest()\n    return hmac.compare_digest(expected, signature)\n\n@app.post("/payments", response_model=schemas.Payment)\nasync def create_payment(\n    payment_request: schemas.PaymentRequest,\n    idempotency_key: str = Header(...),\n    db: Session = Depends(get_db)\n):\n    """\uacb0\uc81c \uc0dd\uc131"""\n    service = PaymentService(db)\n\n    payment = await service.create_payment(\n        order_id=payment_request.order_id,\n        user_id=payment_request.user_id,\n        amount=payment_request.amount,\n        payment_method=payment_request.payment_method,\n        pg_provider=payment_request.pg_provider,\n        idempotency_key=idempotency_key\n    )\n\n    return payment\n\n@app.post("/payments/{payment_id}/cancel")\nasync def cancel_payment(\n    payment_id: int,\n    reason: str,\n    db: Session = Depends(get_db)\n):\n    """\uacb0\uc81c \ucde8\uc18c"""\n    service = PaymentService(db)\n    payment = await service.cancel_payment(payment_id, reason)\n    return {"message": "Payment cancelled", "payment": payment}\n\n@app.post("/payments/{payment_id}/refund")\nasync def refund_payment(\n    payment_id: int,\n    amount: float,\n    reason: str,\n    db: Session = Depends(get_db)\n):\n    """\ud658\ubd88 \ucc98\ub9ac"""\n    service = PaymentService(db)\n    payment = await service.refund_payment(payment_id, amount, reason)\n    return {"message": "Refund processed", "payment": payment}\n\n@app.post("/webhook/payment")\nasync def payment_webhook(\n    request: Request,\n    x_signature: str = Header(...),\n    background_tasks: BackgroundTasks,\n    db: Session = Depends(get_db)\n):\n    """PG\uc0ac Webhook"""\n    body = await request.body()\n\n    # \uc11c\uba85 \uac80\uc99d\n    if not verify_webhook_signature(body, x_signature):\n        raise HTTPException(status_code=401, detail="Invalid signature")\n\n    data = await request.json()\n\n    # \ube44\ub3d9\uae30 \ucc98\ub9ac\n    background_tasks.add_task(process_webhook, data, db)\n\n    return {"status": "received"}\n\nasync def process_webhook(data: dict, db: Session):\n    """Webhook \ub370\uc774\ud130 \ucc98\ub9ac"""\n    payment = db.query(models.Payment).filter(\n        models.Payment.pg_transaction_id == data["transaction_id"]\n    ).first()\n\n    if payment:\n        if data["status"] == "completed":\n            payment.status = models.PaymentStatus.completed\n            payment.completed_at = datetime.utcnow()\n        elif data["status"] == "failed":\n            payment.status = models.PaymentStatus.failed\n            payment.last_error = data.get("error_message")\n\n        db.commit()\n\n@app.get("/payments/{payment_id}")\ndef get_payment(payment_id: int, db: Session = Depends(get_db)):\n    """\uacb0\uc81c \uc870\ud68c"""\n    payment = db.query(models.Payment).filter(models.Payment.id == payment_id).first()\n    if not payment:\n        raise HTTPException(status_code=404, detail="Payment not found")\n    return payment\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",children:"\ud83d\udd12 \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d"}),"\n",(0,s.jsx)(n.h3,{id:"1-\uc554\ud638\ud654",children:"1. \uc554\ud638\ud654"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PG\uc0ac \ud1b5\uc2e0 \uc2dc HTTPS \ud544\uc218"}),"\n",(0,s.jsx)(n.li,{children:"\ubbfc\uac10 \uc815\ubcf4(\uce74\ub4dc\ubc88\ud638)\ub294 \uc800\uc7a5\ud558\uc9c0 \uc54a\uac70\ub098 \uc554\ud638\ud654"}),"\n",(0,s.jsx)(n.li,{children:"\uc11c\uba85\uc744 \ud1b5\ud55c \uc694\uccad/\uc751\ub2f5 \uac80\uc99d"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-\uba71\ub4f1\uc131",children:"2. \uba71\ub4f1\uc131"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Idempotency-Key \ud5e4\ub354\ub85c \uc911\ubcf5 \uacb0\uc81c \ubc29\uc9c0"}),"\n",(0,s.jsx)(n.li,{children:"\uac19\uc740 \ud0a4\ub85c \uc7ac\uc694\uccad \uc2dc \uae30\uc874 \uacb0\uacfc \ubc18\ud658"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-\ub85c\uae45",children:"3. \ub85c\uae45"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\ubaa8\ub4e0 \uacb0\uc81c \uc774\ubca4\ud2b8 \ub85c\uadf8 \uc800\uc7a5"}),"\n",(0,s.jsx)(n.li,{children:"\uac10\uc0ac(Audit) \ubaa9\uc801\uc73c\ub85c \ubd88\ubcc0 \ub85c\uadf8 \uc720\uc9c0"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-\uc7ac\uc2dc\ub3c4",children:"4. \uc7ac\uc2dc\ub3c4"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\ub124\ud2b8\uc6cc\ud06c \uc624\ub958 \uc2dc \uc790\ub3d9 \uc7ac\uc2dc\ub3c4"}),"\n",(0,s.jsx)(n.li,{children:"Exponential backoff \uc801\uc6a9"}),"\n",(0,s.jsx)(n.li,{children:"\ucd5c\ub300 \uc7ac\uc2dc\ub3c4 \ud69f\uc218 \uc81c\ud55c"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ud559\uc2b5-\uc644\ub8cc",children:"\ud83d\udcda \ud559\uc2b5 \uc644\ub8cc!"}),"\n",(0,s.jsx)(n.p,{children:"\ucd95\ud558\ud569\ub2c8\ub2e4! FastAPI \ub9c8\uc2a4\ud130 \uacfc\uc815\uc744 \ubaa8\ub450 \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udc49 \uc774\uc81c \uc2e4\uc81c \ud504\ub85c\ub355\uc158 \uc11c\ube44\uc2a4\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uc138\uc694!"})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);