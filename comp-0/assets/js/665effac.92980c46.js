"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[4497],{694:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"fastapi/examples/scenario-10-notification-system","title":"\uc2dc\ub098\ub9ac\uc624 10: \uc54c\ub9bc \uc2dc\uc2a4\ud15c","description":"\uba40\ud2f0\ucc44\ub110 \uc54c\ub9bc \uc2dc\uc2a4\ud15c (\uc774\uba54\uc77c, SMS, \ud478\uc2dc, \uc6f9\uc18c\ucf13)\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-10-notification-system.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-10-notification-system","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-10-notification-system","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-10-notification-system.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 9: \uc608\uc57d \uc2dc\uc2a4\ud15c","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-09-booking-system"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 11: \uac80\uc0c9 \uc5d4\uc9c4 API","permalink":"/tobias-docs/comp-0/docs/fastapi/examples/scenario-11-search-engine"}}');var s=t(4848),a=t(8453);const o={sidebar_position:11},r="\uc2dc\ub098\ub9ac\uc624 10: \uc54c\ub9bc \uc2dc\uc2a4\ud15c",l={},d=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"email_sender.py",id:"email_senderpy",level:3},{value:"sms_sender.py",id:"sms_senderpy",level:3},{value:"push_sender.py",id:"push_senderpy",level:3},{value:"template_engine.py",id:"template_enginepy",level:3},{value:"notification_service.py",id:"notification_servicepy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"\uba40\ud2f0\ucc44\ub110 \uc9c0\uc6d0",id:"\uba40\ud2f0\ucc44\ub110-\uc9c0\uc6d0",level:3},{value:"\ud15c\ud50c\ub9bf \uc5d4\uc9c4",id:"\ud15c\ud50c\ub9bf-\uc5d4\uc9c4",level:3},{value:"\uc7ac\uc2dc\ub3c4 \ub85c\uc9c1",id:"\uc7ac\uc2dc\ub3c4-\ub85c\uc9c1",level:3},{value:"\ubc30\uce58 \ubc1c\uc1a1",id:"\ubc30\uce58-\ubc1c\uc1a1",level:3},{value:"\uc2a4\ucf00\uc904\ub9c1",id:"\uc2a4\ucf00\uc904\ub9c1",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"\uc2dc\ub098\ub9ac\uc624-10-\uc54c\ub9bc-\uc2dc\uc2a4\ud15c",children:"\uc2dc\ub098\ub9ac\uc624 10: \uc54c\ub9bc \uc2dc\uc2a4\ud15c"})}),"\n",(0,s.jsx)(e.p,{children:"\uba40\ud2f0\ucc44\ub110 \uc54c\ub9bc \uc2dc\uc2a4\ud15c (\uc774\uba54\uc77c, SMS, \ud478\uc2dc, \uc6f9\uc18c\ucf13)\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,s.jsx)(e.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\u2705 \uc774\uba54\uc77c \uc54c\ub9bc (SMTP)"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 SMS \uc54c\ub9bc (Twilio)"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \ud478\uc2dc \uc54c\ub9bc (FCM)"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \uc2e4\uc2dc\uac04 \uc6f9 \uc54c\ub9bc (WebSocket)"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \uc54c\ub9bc \uc6b0\uc120\uc21c\uc704 \uad00\ub9ac"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \uc54c\ub9bc \ud15c\ud50c\ub9bf \uc2dc\uc2a4\ud15c"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \uc0ac\uc6a9\uc790\ubcc4 \uc54c\ub9bc \uc124\uc815"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \ubc30\uce58 \ubc1c\uc1a1"}),"\n",(0,s.jsx)(e.li,{children:"\u2705 \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"notification-system/\n\u251c\u2500\u2500 main.py                 # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\n\u251c\u2500\u2500 models.py               # DB \ubaa8\ub378 (Notification, Template, Settings)\n\u251c\u2500\u2500 schemas.py              # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py             # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 channels/\n\u2502   \u251c\u2500\u2500 email_sender.py     # SMTP \uc774\uba54\uc77c \ubc1c\uc1a1\n\u2502   \u251c\u2500\u2500 sms_sender.py       # Twilio SMS \ubc1c\uc1a1\n\u2502   \u251c\u2500\u2500 push_sender.py      # FCM \ud478\uc2dc \uc54c\ub9bc\n\u2502   \u2514\u2500\u2500 websocket_manager.py # \uc2e4\uc2dc\uac04 \uc6f9 \uc54c\ub9bc\n\u251c\u2500\u2500 notification_service.py # \uc54c\ub9bc \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\n\u251c\u2500\u2500 template_engine.py      # \ud15c\ud50c\ub9bf \ub80c\ub354\ub9c1\n\u2514\u2500\u2500 requirements.txt        # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,s.jsx)(e.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant App as Application\n    participant API as FastAPI\n    participant NS as NotificationService\n    participant TE as TemplateEngine\n    participant ES as EmailSender\n    participant SS as SMSSender\n    participant PS as PushSender\n    participant WS as WebSocketManager\n    participant DB as Database\n\n    Note over App,DB: 1. \uc54c\ub9bc \ubc1c\uc1a1 \uc694\uccad\n    App->>API: POST /notifications/send<br/>{user_id, template, data}\n    API->>NS: send_notification()\n    NS->>DB: SELECT user_notification_settings\n    DB--\x3e>NS: User settings (channels enabled)\n    NS->>DB: SELECT notification_template\n    DB--\x3e>NS: Template data\n    NS->>TE: render_template(template, data)\n    TE--\x3e>NS: Rendered content\n\n    par Send to enabled channels\n        alt Email enabled\n            NS->>ES: send_email()\n            ES->>ES: SMTP send\n            ES--\x3e>NS: Email sent/failed\n        end\n        alt SMS enabled\n            NS->>SS: send_sms()\n            SS->>SS: Twilio API\n            SS--\x3e>NS: SMS sent/failed\n        end\n        alt Push enabled\n            NS->>PS: send_push()\n            PS->>PS: FCM API\n            PS--\x3e>NS: Push sent/failed\n        end\n        alt WebSocket enabled\n            NS->>WS: broadcast_to_user()\n            WS->>WS: Send via WS connection\n            WS--\x3e>NS: Delivered\n        end\n    end\n\n    NS->>DB: INSERT notifications (log)\n    NS--\x3e>API: Notification sent\n    API--\x3e>App: 200 OK\n\n    Note over App,DB: 2. \ubc30\uce58 \ubc1c\uc1a1\n    App->>API: POST /notifications/batch<br/>{user_ids[], template}\n    API->>NS: send_batch_notifications()\n    loop For each user\n        NS->>NS: Queue notification job\n    end\n    NS--\x3e>API: Batch queued\n    API--\x3e>App: 202 Accepted\n\n    Note over App,DB: 3. \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1 (\ubc31\uadf8\ub77c\uc6b4\ub4dc)\n    NS->>DB: SELECT failed notifications<br/>WHERE retry_count < max_retries\n    DB--\x3e>NS: Failed notifications\n    loop For each failed notification\n        NS->>NS: Calculate backoff delay\n        NS->>NS: Retry send\n        alt Retry success\n            NS->>DB: UPDATE status=sent\n        else Retry failed\n            NS->>DB: UPDATE retry_count++\n        end\n    end\n"})}),"\n",(0,s.jsx)(e.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,s.jsx)(e.h3,{id:"modelspy",children:"models.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, DateTime, Boolean, ForeignKey, Text, Enum as SQLEnum\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\nimport enum\nfrom datetime import datetime\n\nclass NotificationChannel(str, enum.Enum):\n    email = "email"\n    sms = "sms"\n    push = "push"\n    websocket = "websocket"\n    in_app = "in_app"\n\nclass NotificationPriority(str, enum.Enum):\n    low = "low"\n    medium = "medium"\n    high = "high"\n    urgent = "urgent"\n\nclass NotificationStatus(str, enum.Enum):\n    pending = "pending"\n    sent = "sent"\n    failed = "failed"\n    read = "read"\n\nclass NotificationTemplate(Base):\n    """\uc54c\ub9bc \ud15c\ud50c\ub9bf"""\n    __tablename__ = "notification_templates"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True, index=True)\n    channel = Column(SQLEnum(NotificationChannel))\n\n    # \uc774\uba54\uc77c\n    subject_template = Column(String, nullable=True)\n    body_template = Column(Text, nullable=True)\n\n    # SMS/\ud478\uc2dc\n    message_template = Column(Text, nullable=True)\n\n    # \ubcc0\uc218 \uc608: "\uc548\ub155\ud558\uc138\uc694 {{username}}\ub2d8, {{message}}"\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n\nclass UserNotificationSettings(Base):\n    """\uc0ac\uc6a9\uc790\ubcc4 \uc54c\ub9bc \uc124\uc815"""\n    __tablename__ = "user_notification_settings"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\'users.id\'), unique=True)\n\n    # \ucc44\ub110\ubcc4 \ud65c\uc131\ud654\n    email_enabled = Column(Boolean, default=True)\n    sms_enabled = Column(Boolean, default=False)\n    push_enabled = Column(Boolean, default=True)\n    websocket_enabled = Column(Boolean, default=True)\n\n    # \uc5f0\ub77d\ucc98\n    email = Column(String)\n    phone = Column(String, nullable=True)\n    fcm_token = Column(String, nullable=True)  # Firebase Cloud Messaging\n\n    # \uc54c\ub9bc \uc720\ud615\ubcc4 \uc124\uc815\n    marketing_enabled = Column(Boolean, default=False)\n    newsletter_enabled = Column(Boolean, default=True)\n\n    user = relationship("User")\n\nclass Notification(Base):\n    __tablename__ = "notifications"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\'users.id\'), index=True)\n\n    # \ub0b4\uc6a9\n    title = Column(String)\n    message = Column(Text)\n    channel = Column(SQLEnum(NotificationChannel), index=True)\n    priority = Column(SQLEnum(NotificationPriority), default=NotificationPriority.medium)\n\n    # \uba54\ud0c0\ub370\uc774\ud130\n    data = Column(Text, nullable=True)  # JSON \ud615\ud0dc\uc758 \ucd94\uac00 \ub370\uc774\ud130\n    link = Column(String, nullable=True)  # \ud074\ub9ad \uc2dc \uc774\ub3d9\ud560 URL\n\n    # \uc0c1\ud0dc\n    status = Column(SQLEnum(NotificationStatus), default=NotificationStatus.pending, index=True)\n\n    # \ubc1c\uc1a1 \uc815\ubcf4\n    scheduled_at = Column(DateTime(timezone=True), nullable=True)\n    sent_at = Column(DateTime(timezone=True), nullable=True)\n    read_at = Column(DateTime(timezone=True), nullable=True)\n    failed_reason = Column(String, nullable=True)\n\n    # \uc7ac\uc2dc\ub3c4\n    retry_count = Column(Integer, default=0)\n    max_retries = Column(Integer, default=3)\n\n    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)\n\n    user = relationship("User")\n'})}),"\n",(0,s.jsx)(e.h3,{id:"email_senderpy",children:"email_sender.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nimport os\n\nclass EmailSender:\n    def __init__(self):\n        self.smtp_host = os.getenv('SMTP_HOST', 'smtp.gmail.com')\n        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))\n        self.smtp_user = os.getenv('SMTP_USER')\n        self.smtp_password = os.getenv('SMTP_PASSWORD')\n        self.from_email = os.getenv('FROM_EMAIL', self.smtp_user)\n\n    def send(self, to_email: str, subject: str, body: str, html: bool = True) -> bool:\n        \"\"\"\uc774\uba54\uc77c \ubc1c\uc1a1\"\"\"\n        try:\n            message = MIMEMultipart('alternative')\n            message['Subject'] = subject\n            message['From'] = self.from_email\n            message['To'] = to_email\n\n            if html:\n                part = MIMEText(body, 'html')\n            else:\n                part = MIMEText(body, 'plain')\n\n            message.attach(part)\n\n            # SMTP \uc5f0\uacb0\n            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:\n                server.starttls()\n                server.login(self.smtp_user, self.smtp_password)\n                server.send_message(message)\n\n            return True\n\n        except Exception as e:\n            print(f\"Email send error: {e}\")\n            return False\n"})}),"\n",(0,s.jsx)(e.h3,{id:"sms_senderpy",children:"sms_sender.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from twilio.rest import Client\nimport os\n\nclass SMSSender:\n    def __init__(self):\n        account_sid = os.getenv(\'TWILIO_ACCOUNT_SID\')\n        auth_token = os.getenv(\'TWILIO_AUTH_TOKEN\')\n        self.from_number = os.getenv(\'TWILIO_FROM_NUMBER\')\n\n        if account_sid and auth_token:\n            self.client = Client(account_sid, auth_token)\n            self.enabled = True\n        else:\n            self.client = None\n            self.enabled = False\n            print("Warning: Twilio not configured. SMS disabled.")\n\n    def send(self, to_number: str, message: str) -> bool:\n        """SMS \ubc1c\uc1a1"""\n        if not self.enabled:\n            print(f"SMS to {to_number}: {message} (disabled)")\n            return False\n\n        try:\n            self.client.messages.create(\n                body=message,\n                from_=self.from_number,\n                to=to_number\n            )\n            return True\n\n        except Exception as e:\n            print(f"SMS send error: {e}")\n            return False\n'})}),"\n",(0,s.jsx)(e.h3,{id:"push_senderpy",children:"push_sender.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from firebase_admin import messaging\nimport firebase_admin\nfrom firebase_admin import credentials\nimport os\n\nclass PushSender:\n    def __init__(self):\n        cred_path = os.getenv(\'FIREBASE_CREDENTIALS\')\n\n        if cred_path and os.path.exists(cred_path):\n            cred = credentials.Certificate(cred_path)\n            firebase_admin.initialize_app(cred)\n            self.enabled = True\n        else:\n            self.enabled = False\n            print("Warning: Firebase not configured. Push notifications disabled.")\n\n    def send(self, fcm_token: str, title: str, body: str, data: dict = None) -> bool:\n        """\ud478\uc2dc \uc54c\ub9bc \ubc1c\uc1a1"""\n        if not self.enabled:\n            print(f"Push to {fcm_token}: {title} - {body} (disabled)")\n            return False\n\n        try:\n            message = messaging.Message(\n                notification=messaging.Notification(\n                    title=title,\n                    body=body\n                ),\n                data=data or {},\n                token=fcm_token\n            )\n\n            response = messaging.send(message)\n            print(f"Push sent: {response}")\n            return True\n\n        except Exception as e:\n            print(f"Push send error: {e}")\n            return False\n'})}),"\n",(0,s.jsx)(e.h3,{id:"template_enginepy",children:"template_engine.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from jinja2 import Template\n\nclass TemplateEngine:\n    @staticmethod\n    def render(template_string: str, context: dict) -> str:\n        """\ud15c\ud50c\ub9bf \ub80c\ub354\ub9c1"""\n        template = Template(template_string)\n        return template.render(**context)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"notification_servicepy",children:"notification_service.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from sqlalchemy.orm import Session\nfrom datetime import datetime\nimport models\nfrom email_sender import EmailSender\nfrom sms_sender import SMSSender\nfrom push_sender import PushSender\nfrom template_engine import TemplateEngine\nimport json\n\nclass NotificationService:\n    def __init__(self, db: Session):\n        self.db = db\n        self.email_sender = EmailSender()\n        self.sms_sender = SMSSender()\n        self.push_sender = PushSender()\n        self.template_engine = TemplateEngine()\n\n    def send_notification(\n        self,\n        user_id: int,\n        channel: str,\n        title: str,\n        message: str,\n        template_name: str = None,\n        context: dict = None,\n        priority: str = "medium",\n        data: dict = None,\n        link: str = None,\n        scheduled_at: datetime = None\n    ) -> models.Notification:\n        """\uc54c\ub9bc \uc0dd\uc131 \ubc0f \ubc1c\uc1a1"""\n        # \uc0ac\uc6a9\uc790 \uc124\uc815 \ud655\uc778\n        settings = self.db.query(models.UserNotificationSettings).filter(\n            models.UserNotificationSettings.user_id == user_id\n        ).first()\n\n        if not settings:\n            raise ValueError("User notification settings not found")\n\n        # \ucc44\ub110\ubcc4 \ud65c\uc131\ud654 \ud655\uc778\n        if channel == "email" and not settings.email_enabled:\n            return None\n        elif channel == "sms" and not settings.sms_enabled:\n            return None\n        elif channel == "push" and not settings.push_enabled:\n            return None\n\n        # \ud15c\ud50c\ub9bf \uc0ac\uc6a9\n        if template_name and context:\n            template = self.db.query(models.NotificationTemplate).filter(\n                models.NotificationTemplate.name == template_name,\n                models.NotificationTemplate.channel == channel\n            ).first()\n\n            if template:\n                if channel == "email":\n                    title = self.template_engine.render(template.subject_template, context)\n                    message = self.template_engine.render(template.body_template, context)\n                else:\n                    message = self.template_engine.render(template.message_template, context)\n\n        # \uc54c\ub9bc \ub808\ucf54\ub4dc \uc0dd\uc131\n        notification = models.Notification(\n            user_id=user_id,\n            title=title,\n            message=message,\n            channel=channel,\n            priority=priority,\n            data=json.dumps(data) if data else None,\n            link=link,\n            scheduled_at=scheduled_at\n        )\n\n        self.db.add(notification)\n        self.db.commit()\n        self.db.refresh(notification)\n\n        # \uc989\uc2dc \ubc1c\uc1a1 (\uc2a4\ucf00\uc904\ub9c1 \uc548 \ub41c \uacbd\uc6b0)\n        if not scheduled_at:\n            self._send(notification, settings)\n\n        return notification\n\n    def _send(self, notification: models.Notification, settings: models.UserNotificationSettings) -> bool:\n        """\uc2e4\uc81c \ubc1c\uc1a1"""\n        success = False\n\n        try:\n            if notification.channel == "email":\n                success = self.email_sender.send(\n                    settings.email,\n                    notification.title,\n                    notification.message\n                )\n\n            elif notification.channel == "sms":\n                if settings.phone:\n                    success = self.sms_sender.send(\n                        settings.phone,\n                        notification.message\n                    )\n\n            elif notification.channel == "push":\n                if settings.fcm_token:\n                    data = json.loads(notification.data) if notification.data else {}\n                    success = self.push_sender.send(\n                        settings.fcm_token,\n                        notification.title,\n                        notification.message,\n                        data\n                    )\n\n            elif notification.channel == "in_app":\n                # \uc778\uc571 \uc54c\ub9bc\uc740 DB\uc5d0\ub9cc \uc800\uc7a5\n                success = True\n\n            if success:\n                notification.status = models.NotificationStatus.sent\n                notification.sent_at = datetime.utcnow()\n            else:\n                notification.status = models.NotificationStatus.failed\n                notification.failed_reason = "Send failed"\n\n        except Exception as e:\n            notification.status = models.NotificationStatus.failed\n            notification.failed_reason = str(e)\n            notification.retry_count += 1\n\n        self.db.commit()\n        return success\n\n    def retry_failed_notifications(self):\n        """\uc2e4\ud328\ud55c \uc54c\ub9bc \uc7ac\uc2dc\ub3c4"""\n        failed = self.db.query(models.Notification).filter(\n            models.Notification.status == models.NotificationStatus.failed,\n            models.Notification.retry_count < models.Notification.max_retries\n        ).all()\n\n        for notification in failed:\n            settings = self.db.query(models.UserNotificationSettings).filter(\n                models.UserNotificationSettings.user_id == notification.user_id\n            ).first()\n\n            if settings:\n                self._send(notification, settings)\n\n    def send_scheduled_notifications(self):\n        """\uc2a4\ucf00\uc904\ub41c \uc54c\ub9bc \ubc1c\uc1a1"""\n        scheduled = self.db.query(models.Notification).filter(\n            models.Notification.status == models.NotificationStatus.pending,\n            models.Notification.scheduled_at <= datetime.utcnow()\n        ).all()\n\n        for notification in scheduled:\n            settings = self.db.query(models.UserNotificationSettings).filter(\n                models.UserNotificationSettings.user_id == notification.user_id\n            ).first()\n\n            if settings:\n                self._send(notification, settings)\n\n    def send_bulk(self, user_ids: list, **kwargs):\n        """\ubc30\uce58 \ubc1c\uc1a1"""\n        notifications = []\n\n        for user_id in user_ids:\n            try:\n                notification = self.send_notification(user_id, **kwargs)\n                if notification:\n                    notifications.append(notification)\n            except Exception as e:\n                print(f"Failed to send to user {user_id}: {e}")\n\n        return notifications\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mainpy",children:"main.py"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from fastapi import FastAPI, Depends, HTTPException, WebSocket, WebSocketDisconnect\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nimport models, schemas\nfrom database import engine, get_db\nfrom notification_service import NotificationService\nfrom auth import get_current_user\nfrom datetime import datetime\nimport asyncio\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Notification System API")\n\n# WebSocket \uc5f0\uacb0 \uad00\ub9ac\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: dict[int, WebSocket] = {}\n\n    async def connect(self, user_id: int, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections[user_id] = websocket\n\n    def disconnect(self, user_id: int):\n        if user_id in self.active_connections:\n            del self.active_connections[user_id]\n\n    async def send_to_user(self, user_id: int, message: dict):\n        if user_id in self.active_connections:\n            websocket = self.active_connections[user_id]\n            try:\n                await websocket.send_json(message)\n            except:\n                self.disconnect(user_id)\n\nmanager = ConnectionManager()\n\n# ==================== \uc54c\ub9bc \uc124\uc815 ====================\n\n@app.post("/notification-settings")\ndef create_or_update_settings(\n    settings: schemas.NotificationSettingsCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc54c\ub9bc \uc124\uc815 \uc0dd\uc131/\uc5c5\ub370\uc774\ud2b8"""\n    existing = db.query(models.UserNotificationSettings).filter(\n        models.UserNotificationSettings.user_id == current_user.id\n    ).first()\n\n    if existing:\n        for key, value in settings.dict(exclude_unset=True).items():\n            setattr(existing, key, value)\n        db.commit()\n        return existing\n    else:\n        db_settings = models.UserNotificationSettings(\n            user_id=current_user.id,\n            **settings.dict()\n        )\n        db.add(db_settings)\n        db.commit()\n        db.refresh(db_settings)\n        return db_settings\n\n@app.get("/notification-settings")\ndef get_settings(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ub0b4 \uc54c\ub9bc \uc124\uc815 \uc870\ud68c"""\n    settings = db.query(models.UserNotificationSettings).filter(\n        models.UserNotificationSettings.user_id == current_user.id\n    ).first()\n\n    if not settings:\n        raise HTTPException(status_code=404, detail="Settings not found")\n\n    return settings\n\n# ==================== \uc54c\ub9bc \ubc1c\uc1a1 ====================\n\n@app.post("/notifications/send")\ndef send_notification(\n    notification: schemas.NotificationSend,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc54c\ub9bc \ubc1c\uc1a1"""\n    service = NotificationService(db)\n\n    result = service.send_notification(\n        user_id=notification.user_id,\n        channel=notification.channel,\n        title=notification.title,\n        message=notification.message,\n        template_name=notification.template_name,\n        context=notification.context,\n        priority=notification.priority,\n        data=notification.data,\n        link=notification.link,\n        scheduled_at=notification.scheduled_at\n    )\n\n    # WebSocket \uc5f0\uacb0\ub41c \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc2e4\uc2dc\uac04 \uc804\uc1a1\n    if notification.channel in ["websocket", "in_app"]:\n        asyncio.create_task(manager.send_to_user(\n            notification.user_id,\n            {\n                "id": result.id,\n                "title": result.title,\n                "message": result.message,\n                "link": result.link,\n                "created_at": result.created_at.isoformat()\n            }\n        ))\n\n    return result\n\n@app.post("/notifications/bulk")\ndef send_bulk_notification(\n    bulk: schemas.BulkNotificationSend,\n    db: Session = Depends(get_db)\n):\n    """\ubc30\uce58 \uc54c\ub9bc \ubc1c\uc1a1"""\n    service = NotificationService(db)\n\n    notifications = service.send_bulk(\n        user_ids=bulk.user_ids,\n        channel=bulk.channel,\n        title=bulk.title,\n        message=bulk.message,\n        priority=bulk.priority\n    )\n\n    return {"sent_count": len(notifications)}\n\n# ==================== \uc54c\ub9bc \uc870\ud68c ====================\n\n@app.get("/notifications", response_model=List[schemas.Notification])\ndef get_notifications(\n    unread_only: bool = False,\n    channel: Optional[str] = None,\n    skip: int = 0,\n    limit: int = 20,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\ub0b4 \uc54c\ub9bc \ubaa9\ub85d"""\n    query = db.query(models.Notification).filter(\n        models.Notification.user_id == current_user.id\n    )\n\n    if unread_only:\n        query = query.filter(models.Notification.read_at == None)\n\n    if channel:\n        query = query.filter(models.Notification.channel == channel)\n\n    notifications = query.order_by(\n        models.Notification.created_at.desc()\n    ).offset(skip).limit(limit).all()\n\n    return notifications\n\n@app.put("/notifications/{notification_id}/read")\ndef mark_as_read(\n    notification_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc54c\ub9bc \uc77d\uc74c \ucc98\ub9ac"""\n    notification = db.query(models.Notification).filter(\n        models.Notification.id == notification_id,\n        models.Notification.user_id == current_user.id\n    ).first()\n\n    if not notification:\n        raise HTTPException(status_code=404, detail="Notification not found")\n\n    notification.status = models.NotificationStatus.read\n    notification.read_at = datetime.utcnow()\n    db.commit()\n\n    return {"message": "Marked as read"}\n\n@app.delete("/notifications/{notification_id}")\ndef delete_notification(\n    notification_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    """\uc54c\ub9bc \uc0ad\uc81c"""\n    notification = db.query(models.Notification).filter(\n        models.Notification.id == notification_id,\n        models.Notification.user_id == current_user.id\n    ).first()\n\n    if not notification:\n        raise HTTPException(status_code=404, detail="Notification not found")\n\n    db.delete(notification)\n    db.commit()\n\n    return {"message": "Notification deleted"}\n\n# ==================== WebSocket ====================\n\n@app.websocket("/ws/notifications")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    token: str,\n    db: Session = Depends(get_db)\n):\n    """\uc2e4\uc2dc\uac04 \uc54c\ub9bc WebSocket"""\n    from auth import get_current_user_from_token\n\n    user = await get_current_user_from_token(token, db)\n    if not user:\n        await websocket.close(code=1008)\n        return\n\n    await manager.connect(user.id, websocket)\n\n    try:\n        while True:\n            # \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c\ubd80\ud130 \uba54\uc2dc\uc9c0 \uc218\uc2e0 (\uc5f0\uacb0 \uc720\uc9c0)\n            await websocket.receive_text()\n\n    except WebSocketDisconnect:\n        manager.disconnect(user.id)\n\n# ==================== \ud15c\ud50c\ub9bf \uad00\ub9ac ====================\n\n@app.post("/notification-templates")\ndef create_template(\n    template: schemas.NotificationTemplateCreate,\n    db: Session = Depends(get_db)\n):\n    """\uc54c\ub9bc \ud15c\ud50c\ub9bf \uc0dd\uc131"""\n    db_template = models.NotificationTemplate(**template.dict())\n    db.add(db_template)\n    db.commit()\n    db.refresh(db_template)\n    return db_template\n\n@app.get("/notification-templates", response_model=List[schemas.NotificationTemplate])\ndef list_templates(db: Session = Depends(get_db)):\n    """\ud15c\ud50c\ub9bf \ubaa9\ub85d"""\n    return db.query(models.NotificationTemplate).all()\n'})}),"\n",(0,s.jsx)(e.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,s.jsx)(e.h3,{id:"\uba40\ud2f0\ucc44\ub110-\uc9c0\uc6d0",children:"\uba40\ud2f0\ucc44\ub110 \uc9c0\uc6d0"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\uc774\uba54\uc77c, SMS, \ud478\uc2dc, WebSocket \ud1b5\ud569"}),"\n",(0,s.jsx)(e.li,{children:"\ucc44\ub110\ubcc4 \ud65c\uc131\ud654/\ube44\ud65c\uc131\ud654 \uc124\uc815"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\ud15c\ud50c\ub9bf-\uc5d4\uc9c4",children:"\ud15c\ud50c\ub9bf \uc5d4\uc9c4"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Jinja2\ub85c \ub3d9\uc801 \uba54\uc2dc\uc9c0 \uc0dd\uc131"}),"\n",(0,s.jsx)(e.li,{children:"\ubcc0\uc218 \uce58\ud658\uc73c\ub85c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\uc7ac\uc2dc\ub3c4-\ub85c\uc9c1",children:"\uc7ac\uc2dc\ub3c4 \ub85c\uc9c1"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\uc2e4\ud328 \uc2dc \uc790\ub3d9 \uc7ac\uc2dc\ub3c4"}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"retry_count"}),"\uc640 ",(0,s.jsx)(e.code,{children:"max_retries"}),"\ub85c \uc81c\uc5b4"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\ubc30\uce58-\ubc1c\uc1a1",children:"\ubc30\uce58 \ubc1c\uc1a1"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"\uc5ec\ub7ec \uc0ac\uc6a9\uc790\uc5d0\uac8c \ub3d9\uc2dc \ubc1c\uc1a1"}),"\n",(0,s.jsx)(e.li,{children:"\ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5\uc73c\ub85c \uc131\ub2a5 \ucd5c\uc801\ud654"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\uc2a4\ucf00\uc904\ub9c1",children:"\uc2a4\ucf00\uc904\ub9c1"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"scheduled_at"}),"\uc73c\ub85c \uc608\uc57d \ubc1c\uc1a1"]}),"\n",(0,s.jsx)(e.li,{children:"Cron job\uc73c\ub85c \uc8fc\uae30\uc801 \ud655\uc778"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,s.jsx)(e.a,{href:"./scenario-11-search-engine",children:"\uac80\uc0c9 \uc5d4\uc9c4 API"})]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);