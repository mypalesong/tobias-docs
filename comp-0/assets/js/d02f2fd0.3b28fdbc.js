"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[9567],{7298:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rabbitmq/examples/scenario-02-notification-system","title":"\uc2dc\ub098\ub9ac\uc624 2: \uc54c\ub9bc \uc2dc\uc2a4\ud15c","description":"\uc774\uba54\uc77c, SMS, \ud478\uc2dc \uc54c\ub9bc\uc744 \ub3d9\uc2dc\uc5d0 \ubc1c\uc1a1\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/examples/scenario-02-notification-system.md","sourceDirName":"rabbitmq/examples","slug":"/rabbitmq/examples/scenario-02-notification-system","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-02-notification-system","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/examples/scenario-02-notification-system.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"rabbitmqSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 1: \uc8fc\ubb38 \ucc98\ub9ac \uc2dc\uc2a4\ud15c","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-01-order-processing"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 3: \uc774\ubca4\ud2b8 \uae30\ubc18 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4","permalink":"/tobias-docs/comp-0/docs/rabbitmq/examples/scenario-03-event-driven"}}');var o=i(4848),s=i(8453);const t={sidebar_position:3},c="\uc2dc\ub098\ub9ac\uc624 2: \uc54c\ub9bc \uc2dc\uc2a4\ud15c",r={},l=[{value:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85",id:"-\uc0c1\ud669-\uc124\uba85",level:2},{value:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98",id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"\ud83d\udcdd \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"\uc54c\ub9bc \ubaa8\ub378",id:"\uc54c\ub9bc-\ubaa8\ub378",level:3},{value:"Publisher (\uc54c\ub9bc \ubc1c\ud589)",id:"publisher-\uc54c\ub9bc-\ubc1c\ud589",level:3},{value:"Email Subscriber",id:"email-subscriber",level:3},{value:"SMS Subscriber",id:"sms-subscriber",level:3},{value:"Push Notification Subscriber",id:"push-notification-subscriber",level:3},{value:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc",id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",level:2},{value:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95",id:"-\uc2e4\ud589-\ubc29\ubc95",level:2},{value:"1. \ubaa8\ub4e0 \uad6c\ub3c5\uc790 \uc2e4\ud589",id:"1-\ubaa8\ub4e0-\uad6c\ub3c5\uc790-\uc2e4\ud589",level:3},{value:"2. \uc54c\ub9bc \ubc1c\ud589",id:"2-\uc54c\ub9bc-\ubc1c\ud589",level:3},{value:"\ud83d\udca1 \ud655\uc7a5 \uc544\uc774\ub514\uc5b4",id:"-\ud655\uc7a5-\uc544\uc774\ub514\uc5b4",level:2},{value:"1. \uc120\ud0dd\uc801 \uad6c\ub3c5",id:"1-\uc120\ud0dd\uc801-\uad6c\ub3c5",level:3},{value:"2. \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1",id:"2-\uc7ac\uc2dc\ub3c4-\ub85c\uc9c1",level:3},{value:"3. \uc54c\ub9bc \uc774\ub825 \uc800\uc7a5",id:"3-\uc54c\ub9bc-\uc774\ub825-\uc800\uc7a5",level:3},{value:"\ud83c\udf93 \ubc30\uc6b4 \ub0b4\uc6a9",id:"-\ubc30\uc6b4-\ub0b4\uc6a9",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"\uc2dc\ub098\ub9ac\uc624-2-\uc54c\ub9bc-\uc2dc\uc2a4\ud15c",children:"\uc2dc\ub098\ub9ac\uc624 2: \uc54c\ub9bc \uc2dc\uc2a4\ud15c"})}),"\n",(0,o.jsx)(e.p,{children:"\uc774\uba54\uc77c, SMS, \ud478\uc2dc \uc54c\ub9bc\uc744 \ub3d9\uc2dc\uc5d0 \ubc1c\uc1a1\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,o.jsx)(e.h2,{id:"-\uc0c1\ud669-\uc124\uba85",children:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85"}),"\n",(0,o.jsx)(e.p,{children:"\uc1fc\ud551\ubab0\uc5d0\uc11c \uc8fc\ubb38 \uc644\ub8cc \uc2dc \uace0\uac1d\uc5d0\uac8c \uc5ec\ub7ec \ucc44\ub110\ub85c \uc54c\ub9bc\uc744 \ubcf4\ub0b4\uc57c \ud569\ub2c8\ub2e4:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\uc774\uba54\uc77c: \uc8fc\ubb38 \ud655\uc778 \uba54\uc77c"}),"\n",(0,o.jsx)(e.li,{children:"SMS: \uac04\ub2e8\ud55c \uc8fc\ubb38 \uc54c\ub9bc"}),"\n",(0,o.jsx)(e.li,{children:"\ud478\uc2dc: \ubaa8\ubc14\uc77c \uc571 \uc54c\ub9bc"}),"\n",(0,o.jsx)(e.li,{children:"\uc2ac\ub799: \uad00\ub9ac\uc790\uc5d0\uac8c \uc54c\ub9bc"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",children:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Order Service (Publisher)\n         \u2193\n   [Fanout Exchange]\n    /    |    \\    \\\n   /     |     \\    \\\n[Email] [SMS] [Push] [Slack]\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"\ud328\ud134"}),": Publish/Subscribe (Fanout)"]}),"\n",(0,o.jsx)(e.h2,{id:"-\uad6c\ud604",children:"\ud83d\udcdd \uad6c\ud604"}),"\n",(0,o.jsx)(e.h3,{id:"\uc54c\ub9bc-\ubaa8\ub378",children:"\uc54c\ub9bc \ubaa8\ub378"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# models.py\nfrom dataclasses import dataclass, asdict\nfrom typing import Dict\nimport json\n\n@dataclass\nclass Notification:\n    """\uc54c\ub9bc \ub370\uc774\ud130"""\n    order_id: str\n    user_id: int\n    user_name: str\n    user_email: str\n    user_phone: str\n    order_total: float\n    items_count: int\n\n    def to_json(self) -> str:\n        return json.dumps(asdict(self))\n\n    @classmethod\n    def from_json(cls, json_str: str):\n        return cls(**json.loads(json_str))\n'})}),"\n",(0,o.jsx)(e.h3,{id:"publisher-\uc54c\ub9bc-\ubc1c\ud589",children:"Publisher (\uc54c\ub9bc \ubc1c\ud589)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# notification_publisher.py\nimport pika\nfrom models import Notification\n\nclass NotificationPublisher:\n    \"\"\"\uc54c\ub9bc \ubc1c\ud589\uc790\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n        self.exchange = 'notifications'\n\n    def publish(self, notification: Notification):\n        \"\"\"\uc54c\ub9bc \ubc1c\ud589\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        # Fanout Exchange \uc120\uc5b8\n        channel.exchange_declare(\n            exchange=self.exchange,\n            exchange_type='fanout',\n            durable=True\n        )\n\n        # \uba54\uc2dc\uc9c0 \ubc1c\ud589 (\ubaa8\ub4e0 \uad6c\ub3c5\uc790\uc5d0\uac8c \uc804\uc1a1)\n        channel.basic_publish(\n            exchange=self.exchange,\n            routing_key='',  # fanout\uc740 routing_key \ubb34\uc2dc\n            body=notification.to_json(),\n            properties=pika.BasicProperties(\n                delivery_mode=2,\n                content_type='application/json'\n            )\n        )\n\n        print(f\" [x] Sent notification for order: {notification.order_id}\")\n        connection.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    publisher = NotificationPublisher()\n\n    notification = Notification(\n        order_id='ORD-12345',\n        user_id=100,\n        user_name='\ud64d\uae38\ub3d9',\n        user_email='hong@example.com',\n        user_phone='010-1234-5678',\n        order_total=149.99,\n        items_count=3\n    )\n\n    publisher.publish(notification)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"email-subscriber",children:"Email Subscriber"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# email_subscriber.py\nimport pika\nfrom models import Notification\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(\'EmailService\')\n\ndef send_email(notification: Notification):\n    """\uc774\uba54\uc77c \ubc1c\uc1a1 (\uc2dc\ubbac\ub808\uc774\uc158)"""\n    logger.info(f"""\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \ud83d\udce7 EMAIL SENT\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    To: {notification.user_email}\n    Subject: \uc8fc\ubb38 \uc644\ub8cc - {notification.order_id}\n\n    \uc548\ub155\ud558\uc138\uc694 {notification.user_name}\ub2d8,\n\n    \uc8fc\ubb38\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n    \uc8fc\ubb38\ubc88\ud638: {notification.order_id}\n    \uc0c1\ud488 \uc218\ub7c9: {notification.items_count}\uac1c\n    \ucd1d \uae08\uc561: ${notification.order_total:.2f}\n\n    \uac10\uc0ac\ud569\ub2c8\ub2e4!\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    """)\n\ndef callback(ch, method, properties, body):\n    """\uba54\uc2dc\uc9c0 \uc218\uc2e0 \ucf5c\ubc31"""\n    notification = Notification.from_json(body.decode())\n    send_email(notification)\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start():\n    """Email Subscriber \uc2dc\uc791"""\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(\'localhost\')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(\n        exchange=\'notifications\',\n        exchange_type=\'fanout\',\n        durable=True\n    )\n\n    # \uc784\uc2dc \ud050 \uc0dd\uc131\n    result = channel.queue_declare(queue=\'\', exclusive=True)\n    queue_name = result.method.queue\n\n    # Exchange\uc5d0 \ud050 \ubc14\uc778\ub529\n    channel.queue_bind(\n        exchange=\'notifications\',\n        queue=queue_name\n    )\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=callback\n    )\n\n    logger.info(\' [*] Email service waiting for notifications...\')\n    channel.start_consuming()\n\nif __name__ == \'__main__\':\n    start()\n'})}),"\n",(0,o.jsx)(e.h3,{id:"sms-subscriber",children:"SMS Subscriber"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# sms_subscriber.py\nimport pika\nfrom models import Notification\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(\'SMSService\')\n\ndef send_sms(notification: Notification):\n    """SMS \ubc1c\uc1a1 (\uc2dc\ubbac\ub808\uc774\uc158)"""\n    message = (\n        f"[\uc1fc\ud551\ubab0] \uc8fc\ubb38\uc644\ub8cc! "\n        f"\uc8fc\ubb38\ubc88\ud638: {notification.order_id}, "\n        f"\uae08\uc561: ${notification.order_total:.2f}"\n    )\n\n    logger.info(f"""\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \ud83d\udcf1 SMS SENT\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    To: {notification.user_phone}\n    Message: {message}\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    """)\n\ndef callback(ch, method, properties, body):\n    notification = Notification.from_json(body.decode())\n    send_sms(notification)\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start():\n    """SMS Subscriber \uc2dc\uc791"""\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(\'localhost\')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(\n        exchange=\'notifications\',\n        exchange_type=\'fanout\',\n        durable=True\n    )\n\n    result = channel.queue_declare(queue=\'\', exclusive=True)\n    queue_name = result.method.queue\n\n    channel.queue_bind(\n        exchange=\'notifications\',\n        queue=queue_name\n    )\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=callback\n    )\n\n    logger.info(\' [*] SMS service waiting for notifications...\')\n    channel.start_consuming()\n\nif __name__ == \'__main__\':\n    start()\n'})}),"\n",(0,o.jsx)(e.h3,{id:"push-notification-subscriber",children:"Push Notification Subscriber"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# push_subscriber.py\nimport pika\nfrom models import Notification\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger('PushService')\n\ndef send_push(notification: Notification):\n    \"\"\"\ud478\uc2dc \uc54c\ub9bc \ubc1c\uc1a1\"\"\"\n    logger.info(f\"\"\"\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \ud83d\udd14 PUSH NOTIFICATION SENT\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    User ID: {notification.user_id}\n    Title: \uc8fc\ubb38 \uc644\ub8cc\n    Body: {notification.items_count}\uac1c \uc0c1\ud488, ${notification.order_total:.2f}\n    \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n    \"\"\")\n\ndef callback(ch, method, properties, body):\n    notification = Notification.from_json(body.decode())\n    send_push(notification)\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef start():\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(\n        exchange='notifications',\n        exchange_type='fanout',\n        durable=True\n    )\n\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    channel.queue_bind(\n        exchange='notifications',\n        queue=queue_name\n    )\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=callback\n    )\n\n    logger.info(' [*] Push service waiting for notifications...')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    start()\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",children:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# test_notification_system.py\nimport pytest\nimport pika\nimport time\nfrom threading import Thread\nfrom notification_publisher import NotificationPublisher\nfrom models import Notification\n\nclass TestNotificationSystem:\n    \"\"\"\uc54c\ub9bc \uc2dc\uc2a4\ud15c \ud14c\uc2a4\ud2b8\"\"\"\n\n    @pytest.fixture\n    def setup(self):\n        \"\"\"\ud14c\uc2a4\ud2b8 \ud658\uacbd \uc124\uc815\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        # Exchange \uc815\ub9ac\n        try:\n            channel.exchange_delete(exchange='test_notifications')\n        except:\n            pass\n\n        yield channel\n        connection.close()\n\n    def test_fanout_exchange(self, setup):\n        \"\"\"Fanout Exchange \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        # Exchange \uc120\uc5b8\n        channel.exchange_declare(\n            exchange='test_notifications',\n            exchange_type='fanout',\n            durable=True\n        )\n\n        # 3\uac1c \ud050 \uc0dd\uc131 \ubc0f \ubc14\uc778\ub529\n        queues = []\n        for i in range(3):\n            result = channel.queue_declare(queue='', exclusive=True)\n            queue_name = result.method.queue\n            channel.queue_bind(\n                exchange='test_notifications',\n                queue=queue_name\n            )\n            queues.append(queue_name)\n\n        # \uba54\uc2dc\uc9c0 \ubc1c\ud589\n        channel.basic_publish(\n            exchange='test_notifications',\n            routing_key='',\n            body='Test Message'\n        )\n\n        # \ubaa8\ub4e0 \ud050\uc5d0 \uba54\uc2dc\uc9c0\uac00 \uc788\ub294\uc9c0 \ud655\uc778\n        for queue_name in queues:\n            method, properties, body = channel.basic_get(\n                queue=queue_name,\n                auto_ack=True\n            )\n            assert body == b'Test Message'\n\n    def test_multiple_subscribers(self, setup):\n        \"\"\"\uc5ec\ub7ec \uad6c\ub3c5\uc790 \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n        received_messages = {'email': [], 'sms': [], 'push': []}\n\n        def create_callback(service_name):\n            def callback(ch, method, properties, body):\n                received_messages[service_name].append(body.decode())\n                ch.basic_ack(delivery_tag=method.delivery_tag)\n            return callback\n\n        # Exchange \uc0dd\uc131\n        channel.exchange_declare(\n            exchange='test_notifications',\n            exchange_type='fanout'\n        )\n\n        # 3\uac1c \uc11c\ube44\uc2a4 (email, sms, push) \uad6c\ub3c5\n        for service in ['email', 'sms', 'push']:\n            result = channel.queue_declare(queue='', exclusive=True)\n            queue_name = result.method.queue\n            channel.queue_bind(\n                exchange='test_notifications',\n                queue=queue_name\n            )\n            channel.basic_consume(\n                queue=queue_name,\n                on_message_callback=create_callback(service)\n            )\n\n        # \uc54c\ub9bc \ubc1c\ud589\n        notification = Notification(\n            order_id='TEST-001',\n            user_id=1,\n            user_name='Test User',\n            user_email='test@example.com',\n            user_phone='010-0000-0000',\n            order_total=100.0,\n            items_count=2\n        )\n\n        channel.basic_publish(\n            exchange='test_notifications',\n            routing_key='',\n            body=notification.to_json()\n        )\n\n        # \uba54\uc2dc\uc9c0 \ucc98\ub9ac\n        connection = channel.connection\n        connection.process_data_events(time_limit=1)\n\n        # \ubaa8\ub4e0 \uc11c\ube44\uc2a4\uac00 \uba54\uc2dc\uc9c0\ub97c \ubc1b\uc558\ub294\uc9c0 \ud655\uc778\n        assert len(received_messages['email']) == 1\n        assert len(received_messages['sms']) == 1\n        assert len(received_messages['push']) == 1\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-\uc2e4\ud589-\ubc29\ubc95",children:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95"}),"\n",(0,o.jsx)(e.h3,{id:"1-\ubaa8\ub4e0-\uad6c\ub3c5\uc790-\uc2e4\ud589",children:"1. \ubaa8\ub4e0 \uad6c\ub3c5\uc790 \uc2e4\ud589"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 1 - Email Service\npython email_subscriber.py\n\n# \ud130\ubbf8\ub110 2 - SMS Service\npython sms_subscriber.py\n\n# \ud130\ubbf8\ub110 3 - Push Service\npython push_subscriber.py\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-\uc54c\ub9bc-\ubc1c\ud589",children:"2. \uc54c\ub9bc \ubc1c\ud589"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 4\npython notification_publisher.py\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"\uacb0\uacfc"}),": 3\uac1c \uc11c\ube44\uc2a4 \ubaa8\ub450 \ub3d9\uc2dc\uc5d0 \uc54c\ub9bc\uc744 \ubc1b\uc2b5\ub2c8\ub2e4!"]}),"\n",(0,o.jsx)(e.h2,{id:"-\ud655\uc7a5-\uc544\uc774\ub514\uc5b4",children:"\ud83d\udca1 \ud655\uc7a5 \uc544\uc774\ub514\uc5b4"}),"\n",(0,o.jsx)(e.h3,{id:"1-\uc120\ud0dd\uc801-\uad6c\ub3c5",children:"1. \uc120\ud0dd\uc801 \uad6c\ub3c5"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"# \uc0ac\uc6a9\uc790 \uc124\uc815\uc5d0 \ub530\ub77c \uc54c\ub9bc \ucc44\ub110 \uc120\ud0dd\nuser_preferences = {\n    'email': True,\n    'sms': False,\n    'push': True\n}\n\n# Topic Exchange\ub85c \ubcc0\uacbd\nchannel.exchange_declare(\n    exchange='notifications',\n    exchange_type='topic'\n)\n\n# \ucc44\ub110\ubcc4\ub85c \ub2e4\ub978 routing key\nif user_preferences['email']:\n    channel.basic_publish(\n        exchange='notifications',\n        routing_key='notification.email',\n        body=message\n    )\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-\uc7ac\uc2dc\ub3c4-\ub85c\uc9c1",children:"2. \uc7ac\uc2dc\ub3c4 \ub85c\uc9c1"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'def callback(ch, method, properties, body):\n    try:\n        send_email(body)\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n    except Exception as e:\n        logger.error(f"Failed to send: {e}")\n        # \uc7ac\uc2dc\ub3c4\ub97c \uc704\ud574 NACK\n        ch.basic_nack(\n            delivery_tag=method.delivery_tag,\n            requeue=True\n        )\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-\uc54c\ub9bc-\uc774\ub825-\uc800\uc7a5",children:"3. \uc54c\ub9bc \uc774\ub825 \uc800\uc7a5"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"def callback(ch, method, properties, body):\n    notification = Notification.from_json(body.decode())\n\n    # \uc54c\ub9bc \ubc1c\uc1a1\n    send_email(notification)\n\n    # \uc774\ub825 \uc800\uc7a5\n    save_to_database({\n        'order_id': notification.order_id,\n        'channel': 'email',\n        'status': 'sent',\n        'timestamp': datetime.now()\n    })\n\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n"})}),"\n",(0,o.jsx)(e.h2,{id:"-\ubc30\uc6b4-\ub0b4\uc6a9",children:"\ud83c\udf93 \ubc30\uc6b4 \ub0b4\uc6a9"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Fanout Exchange"}),": \ubaa8\ub4e0 \uad6c\ub3c5\uc790\uc5d0\uac8c \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Multiple Subscribers"}),": \uc5ec\ub7ec \uc11c\ube44\uc2a4\uac00 \ub3d9\uc77c \uba54\uc2dc\uc9c0 \uc218\uc2e0"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Exclusive Queue"}),": \uc784\uc2dc \ud050 (\uc5f0\uacb0 \uc885\ub8cc \uc2dc \uc790\ub3d9 \uc0ad\uc81c)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Decoupling"}),": \uc11c\ube44\uc2a4 \uac04 \ub290\uc2a8\ud55c \uacb0\ud569"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,o.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,o.jsx)(e.a,{href:"./scenario-03-event-driven",children:"\uc2dc\ub098\ub9ac\uc624 3: \uc774\ubca4\ud2b8 \uae30\ubc18 \uc544\ud0a4\ud14d\ucc98"})]})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>c});var a=i(6540);const o={},s=a.createContext(o);function t(n){const e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:t(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);