"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[587],{5799:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"fastapi/examples/scenario-05-microservices","title":"\uc2dc\ub098\ub9ac\uc624 5: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4","description":"\uc5ec\ub7ec FastAPI \uc11c\ube44\uc2a4\ub85c \uad6c\uc131\ub41c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc544\ud0a4\ud14d\ucc98\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-05-microservices.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-05-microservices","permalink":"/docs/fastapi/examples/scenario-05-microservices","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-05-microservices.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 4: \uc2e4\uc2dc\uac04 \ucc44\ud305","permalink":"/docs/fastapi/examples/scenario-04-realtime-chat"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 6: \uc804\uc790\uacb0\uc81c \uc2dc\uc2a4\ud15c","permalink":"/docs/fastapi/examples/scenario-06-payment-system"}}');var t=r(4848),d=r(8453);const o={sidebar_position:6},i="\uc2dc\ub098\ub9ac\uc624 5: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4",a={},c=[{value:"\ud83d\udccc \uc544\ud0a4\ud14d\ucc98",id:"-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \uc11c\ube44\uc2a4 \uad6c\uc131",id:"-\uc11c\ube44\uc2a4-\uad6c\uc131",level:2},{value:"1. User Service (:8001)",id:"1-user-service-8001",level:3},{value:"2. Product Service (:8002)",id:"2-product-service-8002",level:3},{value:"3. Order Service (:8003)",id:"3-order-service-8003",level:3},{value:"4. API Gateway (:8000)",id:"4-api-gateway-8000",level:3},{value:"docker-compose.yml",id:"docker-composeyml",level:3},{value:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95",id:"-\uc2e4\ud589-\ubc29\ubc95",level:2},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0",id:"\uc11c\ube44\uc2a4-\uac04-\ud1b5\uc2e0",level:3},{value:"API Gateway \ud328\ud134",id:"api-gateway-\ud328\ud134",level:3},{value:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubd84\ub9ac",id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ubd84\ub9ac",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-5-\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4",children:"\uc2dc\ub098\ub9ac\uc624 5: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4"})}),"\n",(0,t.jsx)(n.p,{children:"\uc5ec\ub7ec FastAPI \uc11c\ube44\uc2a4\ub85c \uad6c\uc131\ub41c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc544\ud0a4\ud14d\ucc98\ub97c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsx)(n.h2,{id:"-\uc544\ud0a4\ud14d\ucc98",children:"\ud83d\udccc \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 API Gateway \u2502 :8000\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n   \u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   \u2502   \u2502              \u2502\n\u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u25bc\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User    \u2502   \u2502 Product   \u2502   \u2502 Order        \u2502\n\u2502 Service \u2502   \u2502 Service   \u2502   \u2502 Service      \u2502\n\u2502 :8001   \u2502   \u2502 :8002     \u2502   \u2502 :8003        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"microservices/\n\u251c\u2500\u2500 gateway/                 # API Gateway (:8000)\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u2502\n\u251c\u2500\u2500 user_service/           # User Service (:8001)\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u2502\n\u251c\u2500\u2500 product_service/        # Product Service (:8002)\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u2502\n\u251c\u2500\u2500 order_service/          # Order Service (:8003)\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u2502\n\u2514\u2500\u2500 docker-compose.yml      # Docker Compose \uc124\uc815\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant C as Client\n    participant GW as API Gateway<br/>:8000\n    participant US as User Service<br/>:8001\n    participant PS as Product Service<br/>:8002\n    participant OS as Order Service<br/>:8003\n\n    Note over C,OS: 1. \uc0ac\uc6a9\uc790 \ub4f1\ub85d & \ub85c\uadf8\uc778\n    C->>GW: POST /api/users<br/>{email, password}\n    GW->>US: Forward POST /users\n    US->>US: Hash password\n    US->>US: Save to DB\n    US--\x3e>GW: User created\n    GW--\x3e>C: 201 Created\n\n    C->>GW: POST /api/login\n    GW->>US: Forward POST /login\n    US->>US: Verify credentials\n    US->>US: Generate JWT\n    US--\x3e>GW: {access_token}\n    GW--\x3e>C: 200 OK + JWT token\n\n    Note over C,OS: 2. \uc0c1\ud488 \uc870\ud68c\n    C->>GW: GET /api/products\n    GW->>PS: Forward GET /products\n    PS->>PS: Query DB\n    PS--\x3e>GW: Product list\n    GW--\x3e>C: 200 OK + Products\n\n    Note over C,OS: 3. \uc8fc\ubb38 \uc0dd\uc131 (\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0)\n    C->>GW: POST /api/orders<br/>Authorization: Bearer {token}\n    GW->>GW: Verify JWT\n    GW->>OS: Forward POST /orders\n\n    OS->>US: GET /users/{user_id}<br/>(Verify user exists)\n    US->>US: Query DB\n    US--\x3e>OS: User data\n\n    loop For each product in order\n        OS->>PS: GET /products/{product_id}<br/>(Check stock)\n        PS->>PS: Query DB\n        PS--\x3e>OS: Product data + stock\n        alt Stock available\n            OS->>PS: PUT /products/{id}/stock<br/>(Decrease stock)\n            PS->>PS: Update DB\n            PS--\x3e>OS: Stock updated\n        else Stock unavailable\n            OS--\x3e>GW: 400 Insufficient stock\n            GW--\x3e>C: 400 Bad Request\n        end\n    end\n\n    OS->>OS: Create order in DB\n    OS--\x3e>GW: Order created\n    GW--\x3e>C: 201 Created + Order\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc11c\ube44\uc2a4-\uad6c\uc131",children:"\ud83d\udcdd \uc11c\ube44\uc2a4 \uad6c\uc131"}),"\n",(0,t.jsx)(n.h3,{id:"1-user-service-8001",children:"1. User Service (:8001)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# user_service/main.py\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom sqlalchemy.orm import Session\nimport models, schemas\nfrom database import engine, get_db\nfrom auth import create_access_token, verify_password, hash_password\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="User Service")\n\n@app.post("/users", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    """\uc0ac\uc6a9\uc790 \uc0dd\uc131"""\n    # \uc911\ubcf5 \ud655\uc778\n    existing = db.query(models.User).filter(\n        models.User.email == user.email\n    ).first()\n    if existing:\n        raise HTTPException(status_code=400, detail="Email already registered")\n\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    hashed_password = hash_password(user.password)\n    db_user = models.User(\n        email=user.email,\n        username=user.username,\n        hashed_password=hashed_password\n    )\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n@app.post("/login")\ndef login(email: str, password: str, db: Session = Depends(get_db)):\n    """\ub85c\uadf8\uc778"""\n    user = db.query(models.User).filter(models.User.email == email).first()\n    if not user or not verify_password(password, user.hashed_password):\n        raise HTTPException(status_code=401, detail="Invalid credentials")\n\n    token = create_access_token({"sub": user.email, "id": user.id})\n    return {"access_token": token, "token_type": "bearer"}\n\n@app.get("/users/{user_id}", response_model=schemas.User)\ndef get_user(user_id: int, db: Session = Depends(get_db)):\n    """\uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc870\ud68c"""\n    user = db.query(models.User).filter(models.User.id == user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    return user\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8001)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-product-service-8002",children:"2. Product Service (:8002)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# product_service/main.py\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom sqlalchemy.orm import Session\nfrom typing import List\nimport models, schemas\nfrom database import engine, get_db\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Product Service")\n\n@app.post("/products", response_model=schemas.Product)\ndef create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):\n    """\uc0c1\ud488 \uc0dd\uc131"""\n    db_product = models.Product(**product.dict())\n    db.add(db_product)\n    db.commit()\n    db.refresh(db_product)\n    return db_product\n\n@app.get("/products", response_model=List[schemas.Product])\ndef list_products(\n    skip: int = 0,\n    limit: int = 100,\n    db: Session = Depends(get_db)\n):\n    """\uc0c1\ud488 \ubaa9\ub85d"""\n    products = db.query(models.Product).offset(skip).limit(limit).all()\n    return products\n\n@app.get("/products/{product_id}", response_model=schemas.Product)\ndef get_product(product_id: int, db: Session = Depends(get_db)):\n    """\uc0c1\ud488 \uc870\ud68c"""\n    product = db.query(models.Product).filter(models.Product.id == product_id).first()\n    if not product:\n        raise HTTPException(status_code=404, detail="Product not found")\n    return product\n\n@app.put("/products/{product_id}/stock")\ndef update_stock(product_id: int, quantity: int, db: Session = Depends(get_db)):\n    """\uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8 (\ub0b4\ubd80 API)"""\n    product = db.query(models.Product).filter(models.Product.id == product_id).first()\n    if not product:\n        raise HTTPException(status_code=404, detail="Product not found")\n\n    product.stock += quantity\n    db.commit()\n    return {"stock": product.stock}\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8002)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-order-service-8003",children:"3. Order Service (:8003)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# order_service/main.py\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom sqlalchemy.orm import Session\nfrom typing import List\nimport httpx\nimport models, schemas\nfrom database import engine, get_db\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Order Service")\n\nUSER_SERVICE_URL = "http://localhost:8001"\nPRODUCT_SERVICE_URL = "http://localhost:8002"\n\nasync def verify_user(user_id: int) -> bool:\n    """User Service\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ud655\uc778"""\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(f"{USER_SERVICE_URL}/users/{user_id}")\n            return response.status_code == 200\n        except:\n            return False\n\nasync def get_product(product_id: int) -> dict:\n    """Product Service\uc5d0\uc11c \uc0c1\ud488 \uc815\ubcf4 \uc870\ud68c"""\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(f"{PRODUCT_SERVICE_URL}/products/{product_id}")\n            if response.status_code == 200:\n                return response.json()\n            return None\n        except:\n            return None\n\nasync def update_product_stock(product_id: int, quantity: int):\n    """Product Service\uc5d0\uc11c \uc7ac\uace0 \uc5c5\ub370\uc774\ud2b8"""\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.put(\n                f"{PRODUCT_SERVICE_URL}/products/{product_id}/stock",\n                params={"quantity": quantity}\n            )\n            return response.status_code == 200\n        except:\n            return False\n\n@app.post("/orders", response_model=schemas.Order)\nasync def create_order(order: schemas.OrderCreate, db: Session = Depends(get_db)):\n    """\uc8fc\ubb38 \uc0dd\uc131"""\n    # \uc0ac\uc6a9\uc790 \ud655\uc778\n    if not await verify_user(order.user_id):\n        raise HTTPException(status_code=400, detail="Invalid user")\n\n    # \uc0c1\ud488 \ud655\uc778 \ubc0f \ucd1d\uc561 \uacc4\uc0b0\n    total_price = 0\n    order_items = []\n\n    for item in order.items:\n        product = await get_product(item.product_id)\n        if not product:\n            raise HTTPException(\n                status_code=400,\n                detail=f"Product {item.product_id} not found"\n            )\n\n        if product["stock"] < item.quantity:\n            raise HTTPException(\n                status_code=400,\n                detail=f"Insufficient stock for product {product[\'name\']}"\n            )\n\n        # \uc7ac\uace0 \ucc28\uac10\n        if not await update_product_stock(item.product_id, -item.quantity):\n            raise HTTPException(status_code=500, detail="Failed to update stock")\n\n        order_items.append(models.OrderItem(\n            product_id=item.product_id,\n            quantity=item.quantity,\n            price=product["price"]\n        ))\n\n        total_price += product["price"] * item.quantity\n\n    # \uc8fc\ubb38 \uc0dd\uc131\n    db_order = models.Order(\n        user_id=order.user_id,\n        total_price=total_price,\n        items=order_items\n    )\n    db.add(db_order)\n    db.commit()\n    db.refresh(db_order)\n    return db_order\n\n@app.get("/orders", response_model=List[schemas.Order])\ndef list_orders(user_id: int, db: Session = Depends(get_db)):\n    """\uc8fc\ubb38 \ubaa9\ub85d (\ud2b9\uc815 \uc0ac\uc6a9\uc790)"""\n    orders = db.query(models.Order).filter(\n        models.Order.user_id == user_id\n    ).all()\n    return orders\n\n@app.get("/orders/{order_id}", response_model=schemas.Order)\ndef get_order(order_id: int, db: Session = Depends(get_db)):\n    """\uc8fc\ubb38 \uc870\ud68c"""\n    order = db.query(models.Order).filter(models.Order.id == order_id).first()\n    if not order:\n        raise HTTPException(status_code=404, detail="Order not found")\n    return order\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8003)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-api-gateway-8000",children:"4. API Gateway (:8000)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# gateway/main.py\nfrom fastapi import FastAPI, Request, HTTPException, Depends\nfrom fastapi.responses import JSONResponse\nimport httpx\nfrom auth import verify_token\n\napp = FastAPI(title="API Gateway")\n\nSERVICE_URLS = {\n    "user": "http://localhost:8001",\n    "product": "http://localhost:8002",\n    "order": "http://localhost:8003"\n}\n\nasync def forward_request(service: str, path: str, request: Request):\n    """\uc694\uccad\uc744 \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4\ub85c \uc804\ub2ec"""\n    url = f"{SERVICE_URLS[service]}{path}"\n    headers = dict(request.headers)\n\n    async with httpx.AsyncClient() as client:\n        if request.method == "GET":\n            response = await client.get(url, params=request.query_params, headers=headers)\n        elif request.method == "POST":\n            body = await request.json()\n            response = await client.post(url, json=body, headers=headers)\n        elif request.method == "PUT":\n            body = await request.json()\n            response = await client.put(url, json=body, headers=headers)\n        elif request.method == "DELETE":\n            response = await client.delete(url, headers=headers)\n        else:\n            raise HTTPException(status_code=405, detail="Method not allowed")\n\n        return JSONResponse(\n            content=response.json(),\n            status_code=response.status_code\n        )\n\n# User Service \ub77c\uc6b0\ud305\n@app.post("/api/users")\nasync def create_user(request: Request):\n    return await forward_request("user", "/users", request)\n\n@app.post("/api/login")\nasync def login(request: Request):\n    return await forward_request("user", "/login", request)\n\n@app.get("/api/users/{user_id}")\nasync def get_user(user_id: int, request: Request, token: str = Depends(verify_token)):\n    return await forward_request("user", f"/users/{user_id}", request)\n\n# Product Service \ub77c\uc6b0\ud305\n@app.get("/api/products")\nasync def list_products(request: Request):\n    return await forward_request("product", "/products", request)\n\n@app.post("/api/products")\nasync def create_product(request: Request, token: str = Depends(verify_token)):\n    return await forward_request("product", "/products", request)\n\n@app.get("/api/products/{product_id}")\nasync def get_product(product_id: int, request: Request):\n    return await forward_request("product", f"/products/{product_id}", request)\n\n# Order Service \ub77c\uc6b0\ud305\n@app.post("/api/orders")\nasync def create_order(request: Request, token: str = Depends(verify_token)):\n    return await forward_request("order", "/orders", request)\n\n@app.get("/api/orders")\nasync def list_orders(request: Request, token: str = Depends(verify_token)):\n    return await forward_request("order", "/orders", request)\n\n@app.get("/api/orders/{order_id}")\nasync def get_order(order_id: int, request: Request, token: str = Depends(verify_token)):\n    return await forward_request("order", f"/orders/{order_id}", request)\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"docker-composeyml",children:"docker-compose.yml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  user-service:\n    build: ./user_service\n    ports:\n      - "8001:8001"\n    environment:\n      DATABASE_URL: postgresql://user:password@user-db:5432/users\n    depends_on:\n      - user-db\n\n  product-service:\n    build: ./product_service\n    ports:\n      - "8002:8002"\n    environment:\n      DATABASE_URL: postgresql://user:password@product-db:5432/products\n    depends_on:\n      - product-db\n\n  order-service:\n    build: ./order_service\n    ports:\n      - "8003:8003"\n    environment:\n      DATABASE_URL: postgresql://user:password@order-db:5432/orders\n      USER_SERVICE_URL: http://user-service:8001\n      PRODUCT_SERVICE_URL: http://product-service:8002\n    depends_on:\n      - order-db\n\n  gateway:\n    build: ./gateway\n    ports:\n      - "8000:8000"\n    environment:\n      USER_SERVICE_URL: http://user-service:8001\n      PRODUCT_SERVICE_URL: http://product-service:8002\n      ORDER_SERVICE_URL: http://order-service:8003\n    depends_on:\n      - user-service\n      - product-service\n      - order-service\n\n  user-db:\n    image: postgres:14\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: users\n    volumes:\n      - user-data:/var/lib/postgresql/data\n\n  product-db:\n    image: postgres:14\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: products\n    volumes:\n      - product-data:/var/lib/postgresql/data\n\n  order-db:\n    image: postgres:14\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: orders\n    volumes:\n      - order-data:/var/lib/postgresql/data\n\nvolumes:\n  user-data:\n  product-data:\n  order-data:\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc2e4\ud589-\ubc29\ubc95",children:"\ud83d\ude80 \uc2e4\ud589 \ubc29\ubc95"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Docker Compose\ub85c \uc804\uccb4 \uc2dc\uc2a4\ud15c \uc2e4\ud589\ndocker-compose up --build\n\n# API Gateway\ub97c \ud1b5\ud574 \uc694\uccad\ncurl http://localhost:8000/api/products\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,t.jsx)(n.h3,{id:"\uc11c\ube44\uc2a4-\uac04-\ud1b5\uc2e0",children:"\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ub3d9\uae30"}),": httpx\ub97c \uc0ac\uc6a9\ud55c HTTP \uc694\uccad"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ube44\ub3d9\uae30"}),": async/await\ub85c \uc131\ub2a5 \ucd5c\uc801\ud654"]}),"\n",(0,t.jsx)(n.li,{children:"Service discovery\ub294 Docker Compose\uc758 service name \ud65c\uc6a9"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"api-gateway-\ud328\ud134",children:"API Gateway \ud328\ud134"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\ub2e8\uc77c \uc9c4\uc785\uc810 \uc81c\uacf5"}),"\n",(0,t.jsx)(n.li,{children:"\uc778\uc99d/\uc778\uac00 \uc911\uc559\ud654"}),"\n",(0,t.jsx)(n.li,{children:"\ub77c\uc6b0\ud305 \ubc0f \ub85c\ub4dc \ubc38\ub7f0\uc2f1"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ubd84\ub9ac",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubd84\ub9ac"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\uac01 \uc11c\ube44\uc2a4\uac00 \ub3c5\ub9bd\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.li,{children:"\uc11c\ube44\uc2a4 \uac04 \uc9c1\uc811 DB \uc811\uadfc \uae08\uc9c0"}),"\n",(0,t.jsx)(n.li,{children:"API\ub97c \ud1b5\ud55c \ub370\uc774\ud130 \uc870\ud68c"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"./scenario-06-payment-system",children:"\uc804\uc790\uacb0\uc81c \uc2dc\uc2a4\ud15c"})]})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(6540);const t={},d=s.createContext(t);function o(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);