"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3006],{5160:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>t});const l=JSON.parse('{"id":"rabbitmq/basic/publish-subscribe","title":"Publish/Subscribe - \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305","description":"\ud558\ub098\uc758 \uba54\uc2dc\uc9c0\ub97c \uc5ec\ub7ec Consumer\uc5d0\uac8c \uc804\ub2ec\ud558\ub294 \ud328\ud134\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!","source":"@site/docs/rabbitmq/basic/publish-subscribe.md","sourceDirName":"rabbitmq/basic","slug":"/rabbitmq/basic/publish-subscribe","permalink":"/docs/rabbitmq/basic/publish-subscribe","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rabbitmq/basic/publish-subscribe.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"rabbitmqSidebar","previous":{"title":"Work Queue - \uc791\uc5c5 \ubd84\ubc30","permalink":"/docs/rabbitmq/basic/work-queues"},"next":{"title":"Routing - \uc120\ud0dd\uc801 \ub77c\uc6b0\ud305","permalink":"/docs/rabbitmq/basic/routing"}}');var a=s(4848),r=s(8453);const i={sidebar_position:6},c="Publish/Subscribe - \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305",o={},t=[{value:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c",id:"-\ud559\uc2b5-\ubaa9\ud45c",level:2},{value:"\ud83d\udcca \ud328\ud134 \uad6c\uc870",id:"-\ud328\ud134-\uad6c\uc870",level:2},{value:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624",id:"-\uc2dc\ub098\ub9ac\uc624",level:2},{value:"\ud83d\udd27 \uad6c\ud604",id:"-\uad6c\ud604",level:2},{value:"Publisher (\ub85c\uadf8 \ubc1c\ud589)",id:"publisher-\ub85c\uadf8-\ubc1c\ud589",level:3},{value:"Console Logger (\uad6c\ub3c5\uc790 1)",id:"console-logger-\uad6c\ub3c5\uc790-1",level:3},{value:"File Logger (\uad6c\ub3c5\uc790 2)",id:"file-logger-\uad6c\ub3c5\uc790-2",level:3},{value:"Alert Service (\uad6c\ub3c5\uc790 3)",id:"alert-service-\uad6c\ub3c5\uc790-3",level:3},{value:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc",id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",level:2},{value:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c",id:"-\uc2e4\ud589-\uc608\uc81c",level:2},{value:"1. \ubaa8\ub4e0 Logger \uc2e4\ud589",id:"1-\ubaa8\ub4e0-logger-\uc2e4\ud589",level:3},{value:"2. \ub85c\uadf8 \ubc1c\ud589",id:"2-\ub85c\uadf8-\ubc1c\ud589",level:3},{value:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"1. Fanout Exchange",id:"1-fanout-exchange",level:3},{value:"2. \uc784\uc2dc \ud050 (Exclusive Queue)",id:"2-\uc784\uc2dc-\ud050-exclusive-queue",level:3},{value:"3. \ud050 \ubc14\uc778\ub529",id:"3-\ud050-\ubc14\uc778\ub529",level:3},{value:"\ud83d\udd0d Work Queue vs Publish/Subscribe",id:"-work-queue-vs-publishsubscribe",level:2},{value:"Work Queue (1\uac1c \uba54\uc2dc\uc9c0 \u2192 1\uac1c Worker)",id:"work-queue-1\uac1c-\uba54\uc2dc\uc9c0--1\uac1c-worker",level:3},{value:"Publish/Subscribe (1\uac1c \uba54\uc2dc\uc9c0 \u2192 \ubaa8\ub4e0 Subscriber)",id:"publishsubscribe-1\uac1c-\uba54\uc2dc\uc9c0--\ubaa8\ub4e0-subscriber",level:3},{value:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d",id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",level:2},{value:"1. Exchange\ub97c \uba3c\uc800 \uc120\uc5b8\ud558\uae30",id:"1-exchange\ub97c-\uba3c\uc800-\uc120\uc5b8\ud558\uae30",level:3},{value:"2. Consumer \uba3c\uc800 \uc2dc\uc791",id:"2-consumer-\uba3c\uc800-\uc2dc\uc791",level:3},{value:"3. \ud050 \uc790\ub3d9 \uc0ad\uc81c \uc8fc\uc758",id:"3-\ud050-\uc790\ub3d9-\uc0ad\uc81c-\uc8fc\uc758",level:3},{value:"\ud83d\udcca \uc2e4\uc804 \ud65c\uc6a9 \uc0ac\ub840",id:"-\uc2e4\uc804-\ud65c\uc6a9-\uc0ac\ub840",level:2},{value:"1. \ucc44\ud305 \uc571 \uc2e4\uc2dc\uac04 \uba54\uc2dc\uc9c0",id:"1-\ucc44\ud305-\uc571-\uc2e4\uc2dc\uac04-\uba54\uc2dc\uc9c0",level:3},{value:"2. \uc8fc\uc2dd \uac00\uaca9 \uc2e4\uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8",id:"2-\uc8fc\uc2dd-\uac00\uaca9-\uc2e4\uc2dc\uac04-\uc5c5\ub370\uc774\ud2b8",level:3},{value:"3. \uc2dc\uc2a4\ud15c \uc0c1\ud0dc \ubaa8\ub2c8\ud130\ub9c1",id:"3-\uc2dc\uc2a4\ud15c-\uc0c1\ud0dc-\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"\u2705 \uc2e4\uc2b5 \uacfc\uc81c",id:"-\uc2e4\uc2b5-\uacfc\uc81c",level:2},{value:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac",id:"-\ud575\uc2ec-\uc815\ub9ac",level:2},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"publishsubscribe---\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305",children:"Publish/Subscribe - \ube0c\ub85c\ub4dc\uce90\uc2a4\ud305"})}),"\n",(0,a.jsx)(n.p,{children:"\ud558\ub098\uc758 \uba54\uc2dc\uc9c0\ub97c \uc5ec\ub7ec Consumer\uc5d0\uac8c \uc804\ub2ec\ud558\ub294 \ud328\ud134\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,a.jsx)(n.h2,{id:"-\ud559\uc2b5-\ubaa9\ud45c",children:"\ud83c\udfaf \ud559\uc2b5 \ubaa9\ud45c"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Fanout Exchange \uc774\ud574"}),"\n",(0,a.jsx)(n.li,{children:"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud305 \ud328\ud134 \uad6c\ud604"}),"\n",(0,a.jsx)(n.li,{children:"\uc5ec\ub7ec Consumer \ub3d9\uc2dc \ucc98\ub9ac"}),"\n",(0,a.jsx)(n.li,{children:"\uc784\uc2dc \ud050 \ud65c\uc6a9"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-\ud328\ud134-\uad6c\uc870",children:"\ud83d\udcca \ud328\ud134 \uad6c\uc870"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Producer  --\x3e  [Fanout Exchange]  --\x3e  Queue 1  --\x3e  Consumer 1\n                                   --\x3e  Queue 2  --\x3e  Consumer 2\n                                   --\x3e  Queue 3  --\x3e  Consumer 3\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"\ud2b9\uc9d5"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["1",":N"," \ud1b5\uc2e0"]}),"\n",(0,a.jsx)(n.li,{children:"\ubaa8\ub4e0 Consumer\uac00 \ub3d9\uc77c \uba54\uc2dc\uc9c0 \uc218\uc2e0"}),"\n",(0,a.jsx)(n.li,{children:"Exchange\uac00 \ud050\uc5d0 \ubcf5\uc0ac\ubcf8 \uc804\ub2ec"}),"\n",(0,a.jsx)(n.li,{children:"\ub85c\uadf8 \uc2dc\uc2a4\ud15c, \uc2e4\uc2dc\uac04 \uc54c\ub9bc\uc5d0 \uc720\uc6a9"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-\uc2dc\ub098\ub9ac\uc624",children:"\ud83d\udcdd \uc2dc\ub098\ub9ac\uc624"}),"\n",(0,a.jsx)(n.p,{children:"\uc2e4\uc2dc\uac04 \ub85c\uadf8 \ubaa8\ub2c8\ud130\ub9c1 \uc2dc\uc2a4\ud15c:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Application\uc774 \ub85c\uadf8 \ubc1c\ud589"}),"\n",(0,a.jsxs)(n.li,{children:["\uc5ec\ub7ec \uc11c\ube44\uc2a4\uac00 \ub3d9\uc2dc\uc5d0 \ub85c\uadf8 \uad6c\ub3c5","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Console Logger: \ucf58\uc194 \ucd9c\ub825"}),"\n",(0,a.jsx)(n.li,{children:"File Logger: \ud30c\uc77c \uc800\uc7a5"}),"\n",(0,a.jsx)(n.li,{children:"Alert Service: \uc5d0\ub7ec \uc2dc \uc54c\ub9bc"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-\uad6c\ud604",children:"\ud83d\udd27 \uad6c\ud604"}),"\n",(0,a.jsx)(n.h3,{id:"publisher-\ub85c\uadf8-\ubc1c\ud589",children:"Publisher (\ub85c\uadf8 \ubc1c\ud589)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# log_publisher.py\nimport pika\nimport sys\nimport json\nfrom datetime import datetime\n\nclass LogPublisher:\n    \"\"\"\ub85c\uadf8 \ubc1c\ud589\uc790\"\"\"\n\n    def __init__(self, host='localhost'):\n        self.host = host\n        self.exchange = 'logs'\n\n    def publish_log(self, level: str, message: str):\n        \"\"\"\ub85c\uadf8 \ubc1c\ud589\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters(self.host)\n        )\n        channel = connection.channel()\n\n        # Fanout Exchange \uc120\uc5b8\n        channel.exchange_declare(\n            exchange=self.exchange,\n            exchange_type='fanout'\n        )\n\n        log_data = {\n            'level': level,\n            'message': message,\n            'timestamp': datetime.now().isoformat()\n        }\n\n        # Exchange\ub85c \ubc1c\ud589 (routing_key \ubd88\ud544\uc694)\n        channel.basic_publish(\n            exchange=self.exchange,\n            routing_key='',  # fanout\uc740 routing_key \ubb34\uc2dc\n            body=json.dumps(log_data)\n        )\n\n        print(f\" [x] Sent {level}: {message}\")\n        connection.close()\n\n# \uc0ac\uc6a9 \uc608\nif __name__ == '__main__':\n    publisher = LogPublisher()\n\n    # \ub2e4\uc591\ud55c \ub85c\uadf8 \ubc1c\ud589\n    publisher.publish_log('INFO', 'Application started')\n    publisher.publish_log('WARNING', 'High memory usage detected')\n    publisher.publish_log('ERROR', 'Database connection failed')\n    publisher.publish_log('DEBUG', 'Processing request ID: 12345')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"console-logger-\uad6c\ub3c5\uc790-1",children:"Console Logger (\uad6c\ub3c5\uc790 1)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# console_logger.py\nimport pika\nimport json\n\ndef log_to_console(ch, method, properties, body):\n    \"\"\"\ucf58\uc194\uc5d0 \ub85c\uadf8 \ucd9c\ub825\"\"\"\n    log_data = json.loads(body.decode())\n\n    # \ub85c\uadf8 \ub808\ubca8\uc5d0 \ub530\ub978 \uc0c9\uc0c1 \ucf54\ub4dc\n    colors = {\n        'DEBUG': '\\033[36m',    # Cyan\n        'INFO': '\\033[32m',     # Green\n        'WARNING': '\\033[33m',  # Yellow\n        'ERROR': '\\033[31m',    # Red\n        'RESET': '\\033[0m'\n    }\n\n    color = colors.get(log_data['level'], colors['RESET'])\n\n    print(f\"{color}[{log_data['timestamp']}] \"\n          f\"{log_data['level']}: {log_data['message']}\"\n          f\"{colors['RESET']}\")\n\ndef start():\n    \"\"\"Console Logger \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    # Exchange \uc120\uc5b8\n    channel.exchange_declare(exchange='logs', exchange_type='fanout')\n\n    # \uc784\uc2dc \ud050 \uc0dd\uc131 (Consumer \uc885\ub8cc \uc2dc \uc790\ub3d9 \uc0ad\uc81c)\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    # Exchange\uc5d0 \ud050 \ubc14\uc778\ub529\n    channel.queue_bind(exchange='logs', queue=queue_name)\n\n    print(' [*] Console Logger waiting for logs...')\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=log_to_console,\n        auto_ack=True\n    )\n\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nConsole Logger stopped')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"file-logger-\uad6c\ub3c5\uc790-2",children:"File Logger (\uad6c\ub3c5\uc790 2)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# file_logger.py\nimport pika\nimport json\nfrom datetime import datetime\n\ndef log_to_file(ch, method, properties, body):\n    \"\"\"\ud30c\uc77c\uc5d0 \ub85c\uadf8 \uc800\uc7a5\"\"\"\n    log_data = json.loads(body.decode())\n\n    # \ub0a0\uc9dc\ubcc4 \ub85c\uadf8 \ud30c\uc77c\n    date_str = datetime.now().strftime('%Y-%m-%d')\n    filename = f'logs/app_{date_str}.log'\n\n    with open(filename, 'a', encoding='utf-8') as f:\n        f.write(\n            f\"[{log_data['timestamp']}] \"\n            f\"{log_data['level']}: {log_data['message']}\\n\"\n        )\n\n    print(f\" [\u2713] Saved to {filename}\")\n\ndef start():\n    \"\"\"File Logger \uc2dc\uc791\"\"\"\n    # logs \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\n    import os\n    os.makedirs('logs', exist_ok=True)\n\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(exchange='logs', exchange_type='fanout')\n\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    channel.queue_bind(exchange='logs', queue=queue_name)\n\n    print(' [*] File Logger waiting for logs...')\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=log_to_file,\n        auto_ack=True\n    )\n\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nFile Logger stopped')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"alert-service-\uad6c\ub3c5\uc790-3",children:"Alert Service (\uad6c\ub3c5\uc790 3)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# alert_service.py\nimport pika\nimport json\n\ndef send_alert(ch, method, properties, body):\n    \"\"\"\uc5d0\ub7ec \ub85c\uadf8 \uc2dc \uc54c\ub9bc \ubc1c\uc1a1\"\"\"\n    log_data = json.loads(body.decode())\n\n    # ERROR \ub808\ubca8\ub9cc \ucc98\ub9ac\n    if log_data['level'] == 'ERROR':\n        print(f\"\"\"\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        \ud83d\udea8 ALERT: ERROR DETECTED!\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        Time: {log_data['timestamp']}\n        Message: {log_data['message']}\n\n        Action Required: Please investigate immediately\n        \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n        \"\"\")\n\ndef start():\n    \"\"\"Alert Service \uc2dc\uc791\"\"\"\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters('localhost')\n    )\n    channel = connection.channel()\n\n    channel.exchange_declare(exchange='logs', exchange_type='fanout')\n\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n\n    channel.queue_bind(exchange='logs', queue=queue_name)\n\n    print(' [*] Alert Service waiting for errors...')\n\n    channel.basic_consume(\n        queue=queue_name,\n        on_message_callback=send_alert,\n        auto_ack=True\n    )\n\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    try:\n        start()\n    except KeyboardInterrupt:\n        print('\\nAlert Service stopped')\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\ud14c\uc2a4\ud2b8-\ucf54\ub4dc",children:"\ud83e\uddea \ud14c\uc2a4\ud2b8 \ucf54\ub4dc"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# test_publish_subscribe.py\nimport pytest\nimport pika\nimport json\nimport time\nfrom threading import Thread\n\nclass TestPublishSubscribe:\n    \"\"\"Publish/Subscribe \ud14c\uc2a4\ud2b8\"\"\"\n\n    @pytest.fixture\n    def setup(self):\n        \"\"\"\ud14c\uc2a4\ud2b8 \ud658\uacbd \uc124\uc815\"\"\"\n        connection = pika.BlockingConnection(\n            pika.ConnectionParameters('localhost')\n        )\n        channel = connection.channel()\n\n        # Exchange \uc815\ub9ac\n        try:\n            channel.exchange_delete(exchange='test_logs')\n        except:\n            pass\n\n        yield channel\n        connection.close()\n\n    def test_fanout_exchange(self, setup):\n        \"\"\"Fanout Exchange \uae30\ubcf8 \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n\n        # Exchange \uc120\uc5b8\n        channel.exchange_declare(\n            exchange='test_logs',\n            exchange_type='fanout'\n        )\n\n        # 3\uac1c \ud050 \uc0dd\uc131 \ubc0f \ubc14\uc778\ub529\n        queues = []\n        for i in range(3):\n            result = channel.queue_declare(queue='', exclusive=True)\n            queue_name = result.method.queue\n            channel.queue_bind(\n                exchange='test_logs',\n                queue=queue_name\n            )\n            queues.append(queue_name)\n\n        # \uba54\uc2dc\uc9c0 \ubc1c\ud589\n        test_message = json.dumps({'level': 'INFO', 'message': 'Test'})\n        channel.basic_publish(\n            exchange='test_logs',\n            routing_key='',\n            body=test_message\n        )\n\n        # \ubaa8\ub4e0 \ud050\uc5d0 \uba54\uc2dc\uc9c0\uac00 \uc788\ub294\uc9c0 \ud655\uc778\n        for queue_name in queues:\n            method, properties, body = channel.basic_get(\n                queue=queue_name,\n                auto_ack=True\n            )\n            assert body.decode() == test_message\n\n    def test_multiple_subscribers(self, setup):\n        \"\"\"\uc5ec\ub7ec \uad6c\ub3c5\uc790 \ub3d9\uc2dc \uc218\uc2e0 \ud14c\uc2a4\ud2b8\"\"\"\n        channel = setup\n        received_messages = {'logger1': [], 'logger2': [], 'logger3': []}\n\n        def create_callback(logger_name):\n            def callback(ch, method, properties, body):\n                received_messages[logger_name].append(body.decode())\n                ch.basic_ack(delivery_tag=method.delivery_tag)\n            return callback\n\n        # Exchange \uc0dd\uc131\n        channel.exchange_declare(\n            exchange='test_logs',\n            exchange_type='fanout'\n        )\n\n        # 3\uac1c Logger \uad6c\ub3c5\n        for logger in ['logger1', 'logger2', 'logger3']:\n            result = channel.queue_declare(queue='', exclusive=True)\n            queue_name = result.method.queue\n            channel.queue_bind(\n                exchange='test_logs',\n                queue=queue_name\n            )\n            channel.basic_consume(\n                queue=queue_name,\n                on_message_callback=create_callback(logger)\n            )\n\n        # \ub85c\uadf8 \ubc1c\ud589\n        log_message = json.dumps({\n            'level': 'ERROR',\n            'message': 'Test error'\n        })\n\n        channel.basic_publish(\n            exchange='test_logs',\n            routing_key='',\n            body=log_message\n        )\n\n        # \uba54\uc2dc\uc9c0 \ucc98\ub9ac\n        connection = channel.connection\n        connection.process_data_events(time_limit=1)\n\n        # \ubaa8\ub4e0 Logger\uac00 \uba54\uc2dc\uc9c0\ub97c \ubc1b\uc558\ub294\uc9c0 \ud655\uc778\n        assert len(received_messages['logger1']) == 1\n        assert len(received_messages['logger2']) == 1\n        assert len(received_messages['logger3']) == 1\n\n        # \uba54\uc2dc\uc9c0 \ub0b4\uc6a9 \ud655\uc778\n        for logger in received_messages.values():\n            assert log_message in logger\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\uc2e4\ud589-\uc608\uc81c",children:"\ud83c\udfa8 \uc2e4\ud589 \uc608\uc81c"}),"\n",(0,a.jsx)(n.h3,{id:"1-\ubaa8\ub4e0-logger-\uc2e4\ud589",children:"1. \ubaa8\ub4e0 Logger \uc2e4\ud589"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 1 - Console Logger\npython console_logger.py\n\n# \ud130\ubbf8\ub110 2 - File Logger\npython file_logger.py\n\n# \ud130\ubbf8\ub110 3 - Alert Service\npython alert_service.py\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-\ub85c\uadf8-\ubc1c\ud589",children:"2. \ub85c\uadf8 \ubc1c\ud589"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# \ud130\ubbf8\ub110 4\npython log_publisher.py\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"\uacb0\uacfc"}),": 3\uac1c \uc11c\ube44\uc2a4 \ubaa8\ub450 \ub3d9\uc77c\ud55c \ub85c\uadf8\ub97c \ubc1b\uc2b5\ub2c8\ub2e4!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"# Console Logger \ucd9c\ub825\n[2024-01-15T10:30:45] INFO: Application started\n[2024-01-15T10:30:46] WARNING: High memory usage detected\n[2024-01-15T10:30:47] ERROR: Database connection failed\n\n# File Logger \ucd9c\ub825\n[\u2713] Saved to logs/app_2024-01-15.log\n[\u2713] Saved to logs/app_2024-01-15.log\n[\u2713] Saved to logs/app_2024-01-15.log\n\n# Alert Service \ucd9c\ub825 (ERROR\ub9cc)\n\ud83d\udea8 ALERT: ERROR DETECTED!\nTime: 2024-01-15T10:30:47\nMessage: Database connection failed\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udca1 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,a.jsx)(n.h3,{id:"1-fanout-exchange",children:"1. Fanout Exchange"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Exchange \uc120\uc5b8 (Publisher)\nchannel.exchange_declare(\n    exchange='logs',\n    exchange_type='fanout'  # \ubaa8\ub4e0 \ud050\uc5d0 \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\n)\n\n# \ubc1c\ud589 \uc2dc routing_key \ubb34\uc2dc\ub428\nchannel.basic_publish(\n    exchange='logs',\n    routing_key='',  # fanout\uc740 \uc774 \uac12\uc744 \ubb34\uc2dc\n    body=message\n)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-\uc784\uc2dc-\ud050-exclusive-queue",children:"2. \uc784\uc2dc \ud050 (Exclusive Queue)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# \uc784\uc2dc \ud050 \uc0dd\uc131\nresult = channel.queue_declare(queue='', exclusive=True)\nqueue_name = result.method.queue  # \ub79c\ub364 \uc774\ub984 (\uc608: amq.gen-JzTY20...)\n\n# \ud2b9\uc9d5:\n# - queue='' : \ub79c\ub364 \uc774\ub984 \uc790\ub3d9 \uc0dd\uc131\n# - exclusive=True : Consumer \uc885\ub8cc \uc2dc \uc790\ub3d9 \uc0ad\uc81c\n# - \uc784\uc2dc \ub370\uc774\ud130\uc5d0 \uc801\ud569 (\ub85c\uadf8, \uc2e4\uc2dc\uac04 \uc54c\ub9bc \ub4f1)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-\ud050-\ubc14\uc778\ub529",children:"3. \ud050 \ubc14\uc778\ub529"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Exchange\uc640 Queue \uc5f0\uacb0\nchannel.queue_bind(\n    exchange='logs',\n    queue=queue_name\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-work-queue-vs-publishsubscribe",children:"\ud83d\udd0d Work Queue vs Publish/Subscribe"}),"\n",(0,a.jsx)(n.h3,{id:"work-queue-1\uac1c-\uba54\uc2dc\uc9c0--1\uac1c-worker",children:"Work Queue (1\uac1c \uba54\uc2dc\uc9c0 \u2192 1\uac1c Worker)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# \uba54\uc2dc\uc9c0\uac00 Worker\ub4e4 \uc0ac\uc774\uc5d0 \ubd84\ubc30\ub428\nProducer  --\x3e  [Queue]  --\x3e  Worker 1 (\ucc98\ub9ac)\n                        --\x3e  Worker 2 (\ub300\uae30)\n                        --\x3e  Worker 3 (\ub300\uae30)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"publishsubscribe-1\uac1c-\uba54\uc2dc\uc9c0--\ubaa8\ub4e0-subscriber",children:"Publish/Subscribe (1\uac1c \uba54\uc2dc\uc9c0 \u2192 \ubaa8\ub4e0 Subscriber)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# \uba54\uc2dc\uc9c0\uac00 \ubaa8\ub4e0 Subscriber\uc5d0\uac8c \ubcf5\uc0ac\ub428\nProducer  --\x3e  [Exchange]  --\x3e  Subscriber 1 (\ucc98\ub9ac)\n                           --\x3e  Subscriber 2 (\ucc98\ub9ac)\n                           --\x3e  Subscriber 3 (\ucc98\ub9ac)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"\ufe0f-\uc8fc\uc758\uc0ac\ud56d",children:"\u26a0\ufe0f \uc8fc\uc758\uc0ac\ud56d"}),"\n",(0,a.jsx)(n.h3,{id:"1-exchange\ub97c-\uba3c\uc800-\uc120\uc5b8\ud558\uae30",children:"1. Exchange\ub97c \uba3c\uc800 \uc120\uc5b8\ud558\uae30"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# \u2705 \uc62c\ubc14\ub984: Publisher\ub3c4 Exchange \uc120\uc5b8\nchannel.exchange_declare(exchange='logs', exchange_type='fanout')\nchannel.basic_publish(exchange='logs', routing_key='', body=message)\n\n# \u274c \uc704\ud5d8: Exchange \uc5c6\uc774 \ubc1c\ud589 \u2192 \uba54\uc2dc\uc9c0 \uc190\uc2e4\nchannel.basic_publish(exchange='logs', routing_key='', body=message)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-consumer-\uba3c\uc800-\uc2dc\uc791",children:"2. Consumer \uba3c\uc800 \uc2dc\uc791"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Fanout\uc740 \uc2e4\uc2dc\uac04 \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\uc774\ubbc0\ub85c\n# Consumer\uac00 \uba3c\uc800 \uc2e4\ud589\ub418\uc5b4\uc57c \uba54\uc2dc\uc9c0 \uc218\uc2e0 \uac00\ub2a5\n\n# \u2705 \uc21c\uc11c:\n# 1. Consumer \uc2e4\ud589 (\ud050 \uc0dd\uc131 \ubc0f \ubc14\uc778\ub529)\n# 2. Publisher \uc2e4\ud589 (\uba54\uc2dc\uc9c0 \ubc1c\ud589)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-\ud050-\uc790\ub3d9-\uc0ad\uc81c-\uc8fc\uc758",children:"3. \ud050 \uc790\ub3d9 \uc0ad\uc81c \uc8fc\uc758"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# exclusive=True \uc0ac\uc6a9 \uc2dc\n# Consumer \uc885\ub8cc\ud558\uba74 \ud050\uac00 \uc0ad\uc81c\ub428\n# \u2192 \uc601\uad6c \uc800\uc7a5\uc774 \ud544\uc694\ud558\uba74 exclusive=False \uc0ac\uc6a9\n\n# \uc601\uad6c \ud050\nchannel.queue_declare(\n    queue='permanent_logs',\n    durable=True,\n    exclusive=False\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\uc2e4\uc804-\ud65c\uc6a9-\uc0ac\ub840",children:"\ud83d\udcca \uc2e4\uc804 \ud65c\uc6a9 \uc0ac\ub840"}),"\n",(0,a.jsx)(n.h3,{id:"1-\ucc44\ud305-\uc571-\uc2e4\uc2dc\uac04-\uba54\uc2dc\uc9c0",children:"1. \ucc44\ud305 \uc571 \uc2e4\uc2dc\uac04 \uba54\uc2dc\uc9c0"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# \ucc44\ud305\ubc29 \uba54\uc2dc\uc9c0\ub97c \ubaa8\ub4e0 \ucc38\uc5ec\uc790\uc5d0\uac8c \uc804\uc1a1\nchannel.exchange_declare(exchange='chat_room_123', exchange_type='fanout')\nchannel.basic_publish(\n    exchange='chat_room_123',\n    routing_key='',\n    body=json.dumps({'user': 'Alice', 'message': 'Hello!'})\n)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-\uc8fc\uc2dd-\uac00\uaca9-\uc2e4\uc2dc\uac04-\uc5c5\ub370\uc774\ud2b8",children:"2. \uc8fc\uc2dd \uac00\uaca9 \uc2e4\uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# \uc8fc\uc2dd \uac00\uaca9 \ubcc0\ub3d9\uc744 \ubaa8\ub4e0 \uad6c\ub3c5\uc790\uc5d0\uac8c \uc804\uc1a1\nchannel.exchange_declare(exchange='stock_prices', exchange_type='fanout')\nchannel.basic_publish(\n    exchange='stock_prices',\n    routing_key='',\n    body=json.dumps({'symbol': 'AAPL', 'price': 150.25})\n)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-\uc2dc\uc2a4\ud15c-\uc0c1\ud0dc-\ubaa8\ub2c8\ud130\ub9c1",children:"3. \uc2dc\uc2a4\ud15c \uc0c1\ud0dc \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# \uc11c\ubc84 \uc0c1\ud0dc\ub97c \uc5ec\ub7ec \ubaa8\ub2c8\ud130\ub9c1 \ub3c4\uad6c\uc5d0 \uc804\uc1a1\nchannel.exchange_declare(exchange='system_stats', exchange_type='fanout')\nchannel.basic_publish(\n    exchange='system_stats',\n    routing_key='',\n    body=json.dumps({'cpu': 45.2, 'memory': 78.5})\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-\uc2e4\uc2b5-\uacfc\uc81c",children:"\u2705 \uc2e4\uc2b5 \uacfc\uc81c"}),"\n",(0,a.jsx)(n.p,{children:"\ub85c\uadf8 \ub808\ubca8\ubcc4 \ud544\ud130\ub9c1 \uae30\ub2a5\uc744 \ucd94\uac00\ud558\uc138\uc694:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Console Logger: \ubaa8\ub4e0 \ub808\ubca8 \ucd9c\ub825"}),"\n",(0,a.jsx)(n.li,{children:"File Logger: INFO \uc774\uc0c1\ub9cc \uc800\uc7a5"}),"\n",(0,a.jsx)(n.li,{children:"Alert Service: ERROR\ub9cc \uc54c\ub9bc"}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"\ud78c\ud2b8"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# alert_service.py\uc758 \ucf5c\ubc31 \ud568\uc218\uc5d0\uc11c\ndef send_alert(ch, method, properties, body):\n    log_data = json.loads(body.decode())\n\n    # \ub808\ubca8 \ud544\ud130\ub9c1\n    if log_data['level'] == 'ERROR':\n        # \uc54c\ub9bc \ubc1c\uc1a1\n        pass\n"})})]}),"\n",(0,a.jsx)(n.h2,{id:"-\ud575\uc2ec-\uc815\ub9ac",children:"\ud83d\udcda \ud575\uc2ec \uc815\ub9ac"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Fanout Exchange"}),": \ubaa8\ub4e0 \ubc14\uc778\ub529\ub41c \ud050\uc5d0 \uba54\uc2dc\uc9c0 \ubcf5\uc0ac"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Exclusive Queue"}),": Consumer \uc885\ub8cc \uc2dc \uc790\ub3d9 \uc0ad\uc81c\ub418\ub294 \uc784\uc2dc \ud050"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Broadcasting"}),": 1\uac1c \uba54\uc2dc\uc9c0 \u2192 N\uac1c Consumer"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"\uc2e4\uc2dc\uac04 \ub370\uc774\ud130"}),": \ub85c\uadf8, \uc54c\ub9bc, \ucc44\ud305, \uc8fc\uc2dd \uac00\uaca9 \ub4f1"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,a.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,a.jsx)(n.a,{href:"./routing",children:"Routing - \uc120\ud0dd\uc801 \ub77c\uc6b0\ud305"})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var l=s(6540);const a={},r=l.createContext(a);function i(e){const n=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);