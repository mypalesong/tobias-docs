"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[274],{5834:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"fastapi/examples/scenario-04-realtime-chat","title":"\uc2dc\ub098\ub9ac\uc624 4: \uc2e4\uc2dc\uac04 \ucc44\ud305","description":"WebSocket\uc744 \ud65c\uc6a9\ud55c \uc2e4\uc2dc\uac04 \ucc44\ud305 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!","source":"@site/docs/fastapi/examples/scenario-04-realtime-chat.md","sourceDirName":"fastapi/examples","slug":"/fastapi/examples/scenario-04-realtime-chat","permalink":"/docs/fastapi/examples/scenario-04-realtime-chat","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fastapi/examples/scenario-04-realtime-chat.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"fastapiSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 3: E-commerce API","permalink":"/docs/fastapi/examples/scenario-03-ecommerce-api"},"next":{"title":"\uc2dc\ub098\ub9ac\uc624 5: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4","permalink":"/docs/fastapi/examples/scenario-05-microservices"}}');var o=s(4848),i=s(8453);const a={sidebar_position:5},r="\uc2dc\ub098\ub9ac\uc624 4: \uc2e4\uc2dc\uac04 \ucc44\ud305",c={},d=[{value:"\ud83d\udccc \uae30\ub2a5",id:"-\uae30\ub2a5",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8",id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",level:2},{value:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc",id:"-\ud575\uc2ec-\ucf54\ub4dc",level:2},{value:"models.py",id:"modelspy",level:3},{value:"connection_manager.py",id:"connection_managerpy",level:3},{value:"main.py",id:"mainpy",level:3},{value:"\ud074\ub77c\uc774\uc5b8\ud2b8 \uc608\uc81c (JavaScript)",id:"\ud074\ub77c\uc774\uc5b8\ud2b8-\uc608\uc81c-javascript",level:3},{value:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150",id:"-\ud575\uc2ec-\uac1c\ub150",level:2},{value:"WebSocket \ub77c\uc774\ud504\uc0ac\uc774\ud074",id:"websocket-\ub77c\uc774\ud504\uc0ac\uc774\ud074",level:3},{value:"\uc5f0\uacb0 \uad00\ub9ac",id:"\uc5f0\uacb0-\uad00\ub9ac",level:3},{value:"\uba54\uc2dc\uc9c0 \ud0c0\uc785",id:"\uba54\uc2dc\uc9c0-\ud0c0\uc785",level:3},{value:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"\uc2dc\ub098\ub9ac\uc624-4-\uc2e4\uc2dc\uac04-\ucc44\ud305",children:"\uc2dc\ub098\ub9ac\uc624 4: \uc2e4\uc2dc\uac04 \ucc44\ud305"})}),"\n",(0,o.jsx)(n.p,{children:"WebSocket\uc744 \ud65c\uc6a9\ud55c \uc2e4\uc2dc\uac04 \ucc44\ud305 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4!"}),"\n",(0,o.jsx)(n.h2,{id:"-\uae30\ub2a5",children:"\ud83d\udccc \uae30\ub2a5"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u2705 \uc2e4\uc2dc\uac04 \uba54\uc2dc\uc9c0 \uc804\uc1a1/\uc218\uc2e0"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 \uc5ec\ub7ec \ucc44\ud305\ubc29 \uc9c0\uc6d0"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 \uc628\ub77c\uc778 \uc0ac\uc6a9\uc790 \ubaa9\ub85d"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 \ud0c0\uc774\ud551 \uc778\ub514\ucf00\uc774\ud130"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 \uba54\uc2dc\uc9c0 \ud788\uc2a4\ud1a0\ub9ac"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 \uc5f0\uacb0 \uc0c1\ud0dc \uad00\ub9ac"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"realtime-chat/\n\u251c\u2500\u2500 main.py                  # FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158 & WebSocket \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\u251c\u2500\u2500 models.py                # DB \ubaa8\ub378 (ChatRoom, Message, User)\n\u251c\u2500\u2500 schemas.py               # Pydantic \uc2a4\ud0a4\ub9c8\n\u251c\u2500\u2500 database.py              # \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\n\u251c\u2500\u2500 connection_manager.py    # WebSocket \uc5f0\uacb0 \uad00\ub9ac\uc790\n\u251c\u2500\u2500 auth.py                  # JWT \uc778\uc99d (WebSocket\uc6a9)\n\u251c\u2500\u2500 client/\n\u2502   \u2514\u2500\u2500 chat.js             # JavaScript \ud074\ub77c\uc774\uc5b8\ud2b8 \uc608\uc81c\n\u2514\u2500\u2500 requirements.txt         # \uc758\uc874\uc131 \ud328\ud0a4\uc9c0\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-\uc2dc\ud000\uc2a4-\ub2e4\uc774\uc5b4\uadf8\ub7a8",children:"\ud83d\udcca \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant C as Client\n    participant WS as WebSocket\n    participant CM as ConnectionManager\n    participant DB as Database\n\n    Note over C,DB: 1. WebSocket \uc5f0\uacb0\n    C->>WS: WebSocket Connect<br/>/ws/{room_id}?token={jwt}\n    WS->>WS: Verify JWT token\n    WS->>DB: Verify chat room exists\n    DB--\x3e>WS: Room data\n    WS->>CM: Register connection\n    CM->>CM: Add to active_connections[room_id]\n    CM->>CM: Add to online_users[room_id]\n    CM->>DB: Save join message\n    CM--\x3e>C: Connection accepted\n    CM->>WS: Broadcast "user_joined"\n    WS--\x3e>C: {type: "user_joined", online_users: [...]}\n\n    Note over C,DB: 2. \uba54\uc2dc\uc9c0 \uc804\uc1a1\n    C->>WS: Send message<br/>{type: "message", content: "Hello"}\n    WS->>DB: INSERT INTO messages\n    DB--\x3e>WS: Message saved\n    WS->>CM: Broadcast to room\n    loop For each connection in room\n        CM->>C: Send message<br/>{type: "message", username, content, timestamp}\n    end\n\n    Note over C,DB: 3. \ud0c0\uc774\ud551 \uc778\ub514\ucf00\uc774\ud130\n    C->>WS: Send typing<br/>{type: "typing", is_typing: true}\n    WS->>CM: Broadcast to others (exclude sender)\n    CM--\x3e>C: {type: "typing", username, is_typing: true}\n\n    Note over C,DB: 4. \uc5f0\uacb0 \ud574\uc81c\n    C->>WS: WebSocket Disconnect\n    WS->>CM: Remove connection\n    CM->>CM: Remove from active_connections\n    CM->>CM: Remove from online_users\n    CM->>DB: Save leave message\n    CM->>WS: Broadcast "user_left"\n    WS--\x3e>C: {type: "user_left", username, online_users: [...]}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-\ud575\uc2ec-\ucf54\ub4dc",children:"\ud83d\udcdd \ud575\uc2ec \ucf54\ub4dc"}),"\n",(0,o.jsx)(n.h3,{id:"modelspy",children:"models.py"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Text\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom database import Base\n\nclass ChatRoom(Base):\n    __tablename__ = "chat_rooms"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True, index=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    messages = relationship("Message", back_populates="room")\n\nclass Message(Base):\n    __tablename__ = "messages"\n    id = Column(Integer, primary_key=True)\n    room_id = Column(Integer, ForeignKey("chat_rooms.id"))\n    user_id = Column(Integer, ForeignKey("users.id"))\n    content = Column(Text)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    room = relationship("ChatRoom", back_populates="messages")\n    user = relationship("User")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"connection_managerpy",children:"connection_manager.py"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from fastapi import WebSocket\nfrom typing import Dict, List\nimport json\n\nclass ConnectionManager:\n    def __init__(self):\n        # room_id -> List of WebSocket connections\n        self.active_connections: Dict[int, List[WebSocket]] = {}\n        # room_id -> Set of usernames\n        self.online_users: Dict[int, set] = {}\n\n    async def connect(self, websocket: WebSocket, room_id: int, username: str):\n        """WebSocket \uc5f0\uacb0"""\n        await websocket.accept()\n\n        if room_id not in self.active_connections:\n            self.active_connections[room_id] = []\n            self.online_users[room_id] = set()\n\n        self.active_connections[room_id].append(websocket)\n        self.online_users[room_id].add(username)\n\n        # \uc785\uc7a5 \uc54c\ub9bc\n        await self.broadcast(\n            room_id,\n            {\n                "type": "user_joined",\n                "username": username,\n                "online_users": list(self.online_users[room_id])\n            },\n            exclude=websocket\n        )\n\n    def disconnect(self, websocket: WebSocket, room_id: int, username: str):\n        """WebSocket \uc5f0\uacb0 \ud574\uc81c"""\n        if room_id in self.active_connections:\n            self.active_connections[room_id].remove(websocket)\n            self.online_users[room_id].discard(username)\n\n            # \ubc29\uc774 \ube44\uc5c8\uc73c\uba74 \uc0ad\uc81c\n            if not self.active_connections[room_id]:\n                del self.active_connections[room_id]\n                del self.online_users[room_id]\n\n    async def broadcast(self, room_id: int, message: dict, exclude: WebSocket = None):\n        """\ubc29\uc758 \ubaa8\ub4e0 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uba54\uc2dc\uc9c0 \uc804\uc1a1"""\n        if room_id not in self.active_connections:\n            return\n\n        disconnected = []\n        for connection in self.active_connections[room_id]:\n            if connection == exclude:\n                continue\n\n            try:\n                await connection.send_json(message)\n            except Exception:\n                disconnected.append(connection)\n\n        # \uc5f0\uacb0\uc774 \ub04a\uae34 \uc18c\ucf13 \uc81c\uac70\n        for conn in disconnected:\n            if conn in self.active_connections[room_id]:\n                self.active_connections[room_id].remove(conn)\n\n    async def send_personal(self, websocket: WebSocket, message: dict):\n        """\ud2b9\uc815 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uba54\uc2dc\uc9c0 \uc804\uc1a1"""\n        try:\n            await websocket.send_json(message)\n        except Exception:\n            pass\n\nmanager = ConnectionManager()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\nimport models, schemas\nfrom database import engine, get_db\nfrom connection_manager import manager\nfrom auth import get_current_user_from_token\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI(title="Real-time Chat API")\n\n# REST API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\n@app.post("/rooms", response_model=schemas.ChatRoom)\ndef create_room(room: schemas.ChatRoomCreate, db: Session = Depends(get_db)):\n    """\ucc44\ud305\ubc29 \uc0dd\uc131"""\n    db_room = models.ChatRoom(**room.dict())\n    db.add(db_room)\n    db.commit()\n    db.refresh(db_room)\n    return db_room\n\n@app.get("/rooms", response_model=List[schemas.ChatRoom])\ndef list_rooms(db: Session = Depends(get_db)):\n    """\ucc44\ud305\ubc29 \ubaa9\ub85d"""\n    return db.query(models.ChatRoom).all()\n\n@app.get("/rooms/{room_id}/messages", response_model=List[schemas.Message])\ndef get_messages(\n    room_id: int,\n    limit: int = 50,\n    db: Session = Depends(get_db)\n):\n    """\uba54\uc2dc\uc9c0 \ud788\uc2a4\ud1a0\ub9ac"""\n    messages = db.query(models.Message).filter(\n        models.Message.room_id == room_id\n    ).order_by(models.Message.created_at.desc()).limit(limit).all()\n\n    return list(reversed(messages))\n\n# WebSocket \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\n@app.websocket("/ws/{room_id}")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    room_id: int,\n    token: str,\n    db: Session = Depends(get_db)\n):\n    """WebSocket \ucc44\ud305 \uc5f0\uacb0"""\n    try:\n        # \ud1a0\ud070\uc73c\ub85c \uc0ac\uc6a9\uc790 \uc778\uc99d\n        user = await get_current_user_from_token(token, db)\n        if not user:\n            await websocket.close(code=1008)\n            return\n\n        # \ubc29 \uc874\uc7ac \ud655\uc778\n        room = db.query(models.ChatRoom).filter(models.ChatRoom.id == room_id).first()\n        if not room:\n            await websocket.close(code=1008)\n            return\n\n        # \uc5f0\uacb0\n        await manager.connect(websocket, room_id, user.username)\n\n        # \uc785\uc7a5 \uba54\uc2dc\uc9c0 \uc800\uc7a5\n        join_message = models.Message(\n            room_id=room_id,\n            user_id=user.id,\n            content=f"{user.username}\ub2d8\uc774 \uc785\uc7a5\ud588\uc2b5\ub2c8\ub2e4."\n        )\n        db.add(join_message)\n        db.commit()\n\n        try:\n            while True:\n                # \uba54\uc2dc\uc9c0 \uc218\uc2e0\n                data = await websocket.receive_json()\n\n                if data["type"] == "message":\n                    # \uba54\uc2dc\uc9c0 \uc800\uc7a5\n                    message = models.Message(\n                        room_id=room_id,\n                        user_id=user.id,\n                        content=data["content"]\n                    )\n                    db.add(message)\n                    db.commit()\n                    db.refresh(message)\n\n                    # \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\n                    await manager.broadcast(\n                        room_id,\n                        {\n                            "type": "message",\n                            "id": message.id,\n                            "username": user.username,\n                            "content": message.content,\n                            "created_at": message.created_at.isoformat()\n                        }\n                    )\n\n                elif data["type"] == "typing":\n                    # \ud0c0\uc774\ud551 \uc0c1\ud0dc \uc804\uc1a1\n                    await manager.broadcast(\n                        room_id,\n                        {\n                            "type": "typing",\n                            "username": user.username,\n                            "is_typing": data["is_typing"]\n                        },\n                        exclude=websocket\n                    )\n\n        except WebSocketDisconnect:\n            manager.disconnect(websocket, room_id, user.username)\n\n            # \ud1f4\uc7a5 \uba54\uc2dc\uc9c0 \uc800\uc7a5\n            leave_message = models.Message(\n                room_id=room_id,\n                user_id=user.id,\n                content=f"{user.username}\ub2d8\uc774 \ud1f4\uc7a5\ud588\uc2b5\ub2c8\ub2e4."\n            )\n            db.add(leave_message)\n            db.commit()\n\n            # \ud1f4\uc7a5 \uc54c\ub9bc\n            await manager.broadcast(\n                room_id,\n                {\n                    "type": "user_left",\n                    "username": user.username,\n                    "online_users": list(manager.online_users.get(room_id, []))\n                }\n            )\n\n    except Exception as e:\n        print(f"Error: {e}")\n        await websocket.close(code=1011)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ud074\ub77c\uc774\uc5b8\ud2b8-\uc608\uc81c-javascript",children:"\ud074\ub77c\uc774\uc5b8\ud2b8 \uc608\uc81c (JavaScript)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// chat.js\nclass ChatClient {\n    constructor(roomId, token) {\n        this.roomId = roomId;\n        this.token = token;\n        this.ws = null;\n    }\n\n    connect() {\n        this.ws = new WebSocket(\n            `ws://localhost:8000/ws/${this.roomId}?token=${this.token}`\n        );\n\n        this.ws.onopen = () => {\n            console.log('Connected to chat room');\n        };\n\n        this.ws.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            this.handleMessage(data);\n        };\n\n        this.ws.onclose = () => {\n            console.log('Disconnected from chat room');\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n        };\n    }\n\n    sendMessage(content) {\n        this.ws.send(JSON.stringify({\n            type: 'message',\n            content: content\n        }));\n    }\n\n    sendTyping(isTyping) {\n        this.ws.send(JSON.stringify({\n            type: 'typing',\n            is_typing: isTyping\n        }));\n    }\n\n    handleMessage(data) {\n        switch(data.type) {\n            case 'message':\n                this.displayMessage(data);\n                break;\n            case 'user_joined':\n                this.displaySystemMessage(`${data.username} joined`);\n                this.updateOnlineUsers(data.online_users);\n                break;\n            case 'user_left':\n                this.displaySystemMessage(`${data.username} left`);\n                this.updateOnlineUsers(data.online_users);\n                break;\n            case 'typing':\n                this.displayTypingIndicator(data.username, data.is_typing);\n                break;\n        }\n    }\n\n    displayMessage(data) {\n        const messageElement = document.createElement('div');\n        messageElement.innerHTML = `\n            <strong>${data.username}</strong>: ${data.content}\n            <span class=\"time\">${new Date(data.created_at).toLocaleTimeString()}</span>\n        `;\n        document.getElementById('messages').appendChild(messageElement);\n    }\n\n    displaySystemMessage(text) {\n        const messageElement = document.createElement('div');\n        messageElement.className = 'system-message';\n        messageElement.textContent = text;\n        document.getElementById('messages').appendChild(messageElement);\n    }\n\n    updateOnlineUsers(users) {\n        const userList = document.getElementById('online-users');\n        userList.innerHTML = users.map(u => `<li>${u}</li>`).join('');\n    }\n\n    displayTypingIndicator(username, isTyping) {\n        const indicator = document.getElementById('typing-indicator');\n        if (isTyping) {\n            indicator.textContent = `${username} is typing...`;\n        } else {\n            indicator.textContent = '';\n        }\n    }\n\n    disconnect() {\n        if (this.ws) {\n            this.ws.close();\n        }\n    }\n}\n\n// \uc0ac\uc6a9 \uc608\uc81c\nconst chat = new ChatClient(1, 'your-jwt-token');\nchat.connect();\n\ndocument.getElementById('send-btn').onclick = () => {\n    const input = document.getElementById('message-input');\n    chat.sendMessage(input.value);\n    input.value = '';\n};\n\nlet typingTimeout;\ndocument.getElementById('message-input').oninput = () => {\n    chat.sendTyping(true);\n    clearTimeout(typingTimeout);\n    typingTimeout = setTimeout(() => chat.sendTyping(false), 1000);\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-\ud575\uc2ec-\uac1c\ub150",children:"\ud83d\udd11 \ud575\uc2ec \uac1c\ub150"}),"\n",(0,o.jsx)(n.h3,{id:"websocket-\ub77c\uc774\ud504\uc0ac\uc774\ud074",children:"WebSocket \ub77c\uc774\ud504\uc0ac\uc774\ud074"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"\uc5f0\uacb0"}),": ",(0,o.jsx)(n.code,{children:"websocket.accept()"})," - \ud074\ub77c\uc774\uc5b8\ud2b8 \uc5f0\uacb0 \uc218\ub77d"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"\ud1b5\uc2e0"}),": ",(0,o.jsx)(n.code,{children:"send_json()"}),", ",(0,o.jsx)(n.code,{children:"receive_json()"})," - \uc591\ubc29\ud5a5 \ud1b5\uc2e0"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"\ud574\uc81c"}),": ",(0,o.jsx)(n.code,{children:"WebSocketDisconnect"})," \uc608\uc678 \ucc98\ub9ac"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"\uc5f0\uacb0-\uad00\ub9ac",children:"\uc5f0\uacb0 \uad00\ub9ac"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Dictionary\ub85c room\ubcc4 \uc5f0\uacb0 \uad00\ub9ac"}),"\n",(0,o.jsx)(n.li,{children:"\ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8 \uc2dc \uc5f0\uacb0 \ub04a\uae34 \uc18c\ucf13 \uc790\ub3d9 \uc81c\uac70"}),"\n",(0,o.jsx)(n.li,{children:"\uc628\ub77c\uc778 \uc0ac\uc6a9\uc790 \ubaa9\ub85d \uc2e4\uc2dc\uac04 \uc5c5\ub370\uc774\ud2b8"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"\uba54\uc2dc\uc9c0-\ud0c0\uc785",children:"\uba54\uc2dc\uc9c0 \ud0c0\uc785"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"message"}),": \uc77c\ubc18 \ucc44\ud305 \uba54\uc2dc\uc9c0"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"typing"}),": \ud0c0\uc774\ud551 \uc778\ub514\ucf00\uc774\ud130"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"user_joined"}),": \uc0ac\uc6a9\uc790 \uc785\uc7a5"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"user_left"}),": \uc0ac\uc6a9\uc790 \ud1f4\uc7a5"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\udcda \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,o.jsx)(n.a,{href:"./scenario-05-microservices",children:"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4"})]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);