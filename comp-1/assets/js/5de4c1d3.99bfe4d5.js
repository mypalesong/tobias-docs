"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[8268],{4480:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"sqlalchemy/advanced/transactions","title":"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac","description":"\ubcf5\uc7a1\ud55c \ud2b8\ub79c\uc7ad\uc158 \uc2dc\ub098\ub9ac\uc624\ub97c \uc548\uc804\ud558\uac8c \ucc98\ub9ac\ud558\ub294 \uace0\uae09 \uae30\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/advanced/transactions.md","sourceDirName":"sqlalchemy/advanced","slug":"/sqlalchemy/advanced/transactions","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/advanced/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/advanced/transactions.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"sqlalchemySidebar","previous":{"title":"\uc131\ub2a5 \ucd5c\uc801\ud654","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/advanced/performance"},"next":{"title":"PostgreSQL \uc5f0\uacb0 \uc124\uc815","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/basic/connection"}}');var t=s(4848),o=s(8453);const r={sidebar_position:4},a="\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac",c={},l=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udd10 ACID \uc18d\uc131",id:"-acid-\uc18d\uc131",level:2},{value:"Atomicity (\uc6d0\uc790\uc131)",id:"atomicity-\uc6d0\uc790\uc131",level:3},{value:"Consistency (\uc77c\uad00\uc131)",id:"consistency-\uc77c\uad00\uc131",level:3},{value:"Isolation (\uaca9\ub9ac\uc131)",id:"isolation-\uaca9\ub9ac\uc131",level:3},{value:"Durability (\uc9c0\uc18d\uc131)",id:"durability-\uc9c0\uc18d\uc131",level:3},{value:"\ud83d\udcca \uaca9\ub9ac \uc218\uc900 (Isolation Levels)",id:"-\uaca9\ub9ac-\uc218\uc900-isolation-levels",level:2},{value:"PostgreSQL \uaca9\ub9ac \uc218\uc900",id:"postgresql-\uaca9\ub9ac-\uc218\uc900",level:3},{value:"\uaca9\ub9ac \uc218\uc900 \uc124\uc815",id:"\uaca9\ub9ac-\uc218\uc900-\uc124\uc815",level:3},{value:"READ COMMITTED (\uae30\ubcf8\uac12)",id:"read-committed-\uae30\ubcf8\uac12",level:3},{value:"REPEATABLE READ",id:"repeatable-read",level:3},{value:"SERIALIZABLE",id:"serializable",level:3},{value:"\ud83d\udd12 \uc7a0\uae08 (Locking)",id:"-\uc7a0\uae08-locking",level:2},{value:"\ube44\uad00\uc801 \uc7a0\uae08 (Pessimistic Locking)",id:"\ube44\uad00\uc801-\uc7a0\uae08-pessimistic-locking",level:3},{value:"\ub099\uad00\uc801 \uc7a0\uae08 (Optimistic Locking)",id:"\ub099\uad00\uc801-\uc7a0\uae08-optimistic-locking",level:3},{value:"\ud83d\udcbe Savepoint (\uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158)",id:"-savepoint-\uc911\ucca9-\ud2b8\ub79c\uc7ad\uc158",level:2},{value:"\uae30\ubcf8 Savepoint",id:"\uae30\ubcf8-savepoint",level:3},{value:"\uc2e4\uc804 \uc608\uc81c: \ubc30\uce58 \ucc98\ub9ac",id:"\uc2e4\uc804-\uc608\uc81c-\ubc30\uce58-\ucc98\ub9ac",level:3},{value:"\u26a0\ufe0f Deadlock \ucc98\ub9ac",id:"\ufe0f-deadlock-\ucc98\ub9ac",level:2},{value:"Deadlock\uc774\ub780?",id:"deadlock\uc774\ub780",level:3},{value:"Deadlock \ubc29\uc9c0",id:"deadlock-\ubc29\uc9c0",level:3},{value:"\ud83c\udf10 \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 (2-Phase Commit)",id:"-\ubd84\uc0b0-\ud2b8\ub79c\uc7ad\uc158-2-phase-commit",level:2},{value:"PostgreSQL PREPARE TRANSACTION",id:"postgresql-prepare-transaction",level:3},{value:"\uc5ec\ub7ec \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uac04 \ud2b8\ub79c\uc7ad\uc158",id:"\uc5ec\ub7ec-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uac04-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 \ud328\ud134",id:"-\uc2e4\uc804-\ud328\ud134",level:2},{value:"\ud328\ud134 1: \uc7ac\uace0 \uad00\ub9ac",id:"\ud328\ud134-1-\uc7ac\uace0-\uad00\ub9ac",level:3},{value:"\ud328\ud134 2: \uc8fc\ubb38 \ucc98\ub9ac",id:"\ud328\ud134-2-\uc8fc\ubb38-\ucc98\ub9ac",level:3},{value:"\ud328\ud134 3: \uacc4\uc88c \uc774\uccb4",id:"\ud328\ud134-3-\uacc4\uc88c-\uc774\uccb4",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. \ud2b8\ub79c\uc7ad\uc158\uc740 \uc9e7\uac8c",id:"1-\ud2b8\ub79c\uc7ad\uc158\uc740-\uc9e7\uac8c",level:3},{value:"2. \uaca9\ub9ac \uc218\uc900 \uc120\ud0dd",id:"2-\uaca9\ub9ac-\uc218\uc900-\uc120\ud0dd",level:3},{value:"3. \uc7a0\uae08 \uc804\ub7b5 \uc120\ud0dd",id:"3-\uc7a0\uae08-\uc804\ub7b5-\uc120\ud0dd",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\ud2b8\ub79c\uc7ad\uc158-\uad00\ub9ac",children:"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac"})}),"\n",(0,t.jsx)(e.p,{children:"\ubcf5\uc7a1\ud55c \ud2b8\ub79c\uc7ad\uc158 \uc2dc\ub098\ub9ac\uc624\ub97c \uc548\uc804\ud558\uac8c \ucc98\ub9ac\ud558\ub294 \uace0\uae09 \uae30\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u2705 ACID \uc18d\uc131 \uc774\ud574"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 \uaca9\ub9ac \uc218\uc900 (Isolation Levels)"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Deadlock \ubc29\uc9c0 \ubc0f \ud574\uacb0"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Savepoint\uc640 \uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 \ub099\uad00\uc801/\ube44\uad00\uc801 \uc7a0\uae08"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-acid-\uc18d\uc131",children:"\ud83d\udd10 ACID \uc18d\uc131"}),"\n",(0,t.jsx)(e.h3,{id:"atomicity-\uc6d0\uc790\uc131",children:"Atomicity (\uc6d0\uc790\uc131)"}),"\n",(0,t.jsx)(e.p,{children:"\ud2b8\ub79c\uc7ad\uc158\uc758 \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc131\uacf5\ud558\uac70\ub098 \ubaa8\ub450 \uc2e4\ud328\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"with Session(engine) as session:\n    with session.begin():\n        # \ubaa8\ub4e0 \uc791\uc5c5\uc774 \ud558\ub098\uc758 \ub2e8\uc704\n        account_from = session.get(Account, 1)\n        account_to = session.get(Account, 2)\n\n        account_from.balance -= 100\n        account_to.balance += 100\n\n        # \ub458 \ub2e4 \uc131\uacf5 \ub610\ub294 \ub458 \ub2e4 \uc2e4\ud328\n"})}),"\n",(0,t.jsx)(e.h3,{id:"consistency-\uc77c\uad00\uc131",children:"Consistency (\uc77c\uad00\uc131)"}),"\n",(0,t.jsx)(e.p,{children:"\ud2b8\ub79c\uc7ad\uc158 \uc804\ud6c4 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc77c\uad00\ub41c \uc0c1\ud0dc\ub97c \uc720\uc9c0\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class Account(Base):\n    __tablename__ = 'accounts'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    balance: Mapped[Decimal] = mapped_column(Numeric(10, 2))\n\n    __table_args__ = (\n        # \uc794\uc561\uc740 0 \uc774\uc0c1\n        CheckConstraint('balance >= 0', name='check_balance_positive'),\n    )\n\nwith Session(engine) as session:\n    with session.begin():\n        account = session.get(Account, 1)\n        account.balance -= 1000  # balance < 0\uc774\uba74 \uc5d0\ub7ec!\n"})}),"\n",(0,t.jsx)(e.h3,{id:"isolation-\uaca9\ub9ac\uc131",children:"Isolation (\uaca9\ub9ac\uc131)"}),"\n",(0,t.jsx)(e.p,{children:"\ub3d9\uc2dc \uc2e4\ud589 \uc911\uc778 \ud2b8\ub79c\uc7ad\uc158\uc774 \uc11c\ub85c \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Transaction 1\nwith Session(engine) as session1:\n    with session1.begin():\n        user = session1.get(User, 1)\n        user.balance -= 100\n\n        # Transaction 2\ub294 \uc774 \ubcc0\uacbd\uc744 \ubcfc \uc218 \uc5c6\uc74c (\uaca9\ub9ac \uc218\uc900\uc5d0 \ub530\ub77c)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"durability-\uc9c0\uc18d\uc131",children:"Durability (\uc9c0\uc18d\uc131)"}),"\n",(0,t.jsx)(e.p,{children:"\ucee4\ubc0b\ub41c \ud2b8\ub79c\uc7ad\uc158\uc740 \uc2dc\uc2a4\ud15c \uc7a5\uc560\uc5d0\ub3c4 \ubcf4\uc874\ub429\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"with Session(engine) as session:\n    with session.begin():\n        order = Order(amount=100)\n        session.add(order)\n        # commit \ud6c4 DB \uc800\uc7a5, \uc2dc\uc2a4\ud15c \uc7ac\uc2dc\uc791\ud574\ub3c4 \uc720\uc9c0\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\uaca9\ub9ac-\uc218\uc900-isolation-levels",children:"\ud83d\udcca \uaca9\ub9ac \uc218\uc900 (Isolation Levels)"}),"\n",(0,t.jsx)(e.h3,{id:"postgresql-\uaca9\ub9ac-\uc218\uc900",children:"PostgreSQL \uaca9\ub9ac \uc218\uc900"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"\uaca9\ub9ac \uc218\uc900"}),(0,t.jsx)(e.th,{children:"Dirty Read"}),(0,t.jsx)(e.th,{children:"Non-Repeatable Read"}),(0,t.jsx)(e.th,{children:"Phantom Read"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"READ UNCOMMITTED"}),(0,t.jsx)(e.td,{children:"\u274c"}),(0,t.jsx)(e.td,{children:"\u274c"}),(0,t.jsx)(e.td,{children:"\u274c"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"READ COMMITTED"}),(0,t.jsx)(e.td,{children:"\u2705"}),(0,t.jsx)(e.td,{children:"\u274c"}),(0,t.jsx)(e.td,{children:"\u274c"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"REPEATABLE READ"}),(0,t.jsx)(e.td,{children:"\u2705"}),(0,t.jsx)(e.td,{children:"\u2705"}),(0,t.jsx)(e.td,{children:"\u2705"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"SERIALIZABLE"}),(0,t.jsx)(e.td,{children:"\u2705"}),(0,t.jsx)(e.td,{children:"\u2705"}),(0,t.jsx)(e.td,{children:"\u2705"})]})]})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"PostgreSQL \ud2b9\uc774\uc0ac\ud56d"}),": READ UNCOMMITTED\ub294 READ COMMITTED\uc640 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791"]}),"\n",(0,t.jsx)(e.h3,{id:"\uaca9\ub9ac-\uc218\uc900-\uc124\uc815",children:"\uaca9\ub9ac \uc218\uc900 \uc124\uc815"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy import create_engine\n\n# Engine \ub808\ubca8 \uc124\uc815\nengine = create_engine(\n    \'postgresql://...\',\n    isolation_level="REPEATABLE READ"\n)\n\n# Session \ub808\ubca8 \uc124\uc815\nwith Session(engine) as session:\n    session.connection(execution_options={"isolation_level": "SERIALIZABLE"})\n\n    with session.begin():\n        # SERIALIZABLE \uaca9\ub9ac \uc218\uc900\uc73c\ub85c \uc2e4\ud589\n        pass\n'})}),"\n",(0,t.jsx)(e.h3,{id:"read-committed-\uae30\ubcf8\uac12",children:"READ COMMITTED (\uae30\ubcf8\uac12)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Transaction 1\nwith Session(engine) as session1:\n    user = session1.get(User, 1)\n    print(user.balance)  # 100\n\n    # Transaction 2\uac00 balance\ub97c 150\uc73c\ub85c \ubcc0\uacbd\ud558\uace0 \ucee4\ubc0b\n\n    # \ub2e4\uc2dc \uc870\ud68c\ud558\uba74 \ubcc0\uacbd\ub41c \uac12 \ubcf4\uc784\n    session1.refresh(user)\n    print(user.balance)  # 150 (Non-Repeatable Read)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"repeatable-read",children:"REPEATABLE READ"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# Transaction 1 (REPEATABLE READ)\nwith Session(engine) as session1:\n    session1.connection(execution_options={"isolation_level": "REPEATABLE READ"})\n\n    with session1.begin():\n        user = session1.get(User, 1)\n        print(user.balance)  # 100\n\n        # Transaction 2\uac00 balance\ub97c 150\uc73c\ub85c \ubcc0\uacbd\ud558\uace0 \ucee4\ubc0b\n\n        # \ub2e4\uc2dc \uc870\ud68c\ud574\ub3c4 \ucc98\uc74c \uac12 \uc720\uc9c0\n        session1.refresh(user)\n        print(user.balance)  # 100 (Repeatable Read)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"serializable",children:"SERIALIZABLE"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \uc644\uc804\ud55c \uaca9\ub9ac, \ub3d9\uc2dc \uc2e4\ud589 \ubd88\uac00\nengine = create_engine('postgresql://...', isolation_level=\"SERIALIZABLE\")\n\n# Transaction 1\nwith Session(engine) as session1:\n    with session1.begin():\n        stmt = select(func.sum(Account.balance))\n        total = session1.execute(stmt).scalar()\n\n        # Transaction 2\uac00 \uc0c8 \uacc4\uc88c\ub97c \ucd94\uac00\ud558\uba74 Serialization Error\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\uc7a0\uae08-locking",children:"\ud83d\udd12 \uc7a0\uae08 (Locking)"}),"\n",(0,t.jsx)(e.h3,{id:"\ube44\uad00\uc801-\uc7a0\uae08-pessimistic-locking",children:"\ube44\uad00\uc801 \uc7a0\uae08 (Pessimistic Locking)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"FOR UPDATE"}),": \ud589\uc744 \ub3c5\uc810 \uc7a0\uae08"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import select\n\n# \uc7ac\uace0 \ucc28\uac10 (\ub3d9\uc2dc\uc131 \uc81c\uc5b4)\nwith Session(engine) as session:\n    with session.begin():\n        # \ud589 \uc7a0\uae08 (\ub2e4\ub978 \ud2b8\ub79c\uc7ad\uc158\uc740 \ub300\uae30)\n        stmt = select(Product).where(Product.id == 1).with_for_update()\n        product = session.execute(stmt).scalar_one()\n\n        if product.stock >= quantity:\n            product.stock -= quantity\n            order = Order(product=product, quantity=quantity)\n            session.add(order)\n        else:\n            raise OutOfStockError()\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"FOR UPDATE SKIP LOCKED"}),": \uc7a0\uae34 \ud589\uc740 \uac74\ub108\ub700"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \uc791\uc5c5 \ud050 \ud328\ud134\nwith Session(engine) as session:\n    with session.begin():\n        # \uc7a0\uae30\uc9c0 \uc54a\uc740 \uc791\uc5c5\ub9cc \uac00\uc838\uc634\n        stmt = select(Task)\\\n            .where(Task.status == 'pending')\\\n            .limit(10)\\\n            .with_for_update(skip_locked=True)\n\n        tasks = session.execute(stmt).scalars().all()\n\n        for task in tasks:\n            task.status = 'processing'\n            process_task(task)\n            task.status = 'completed'\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"FOR UPDATE NOWAIT"}),": \uc989\uc2dc \uc5d0\ub7ec (\ub300\uae30 \uc548 \ud568)"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy.exc import OperationalError\n\nwith Session(engine) as session:\n    try:\n        with session.begin():\n            stmt = select(Resource)\\\n                .where(Resource.id == 1)\\\n                .with_for_update(nowait=True)\n\n            resource = session.execute(stmt).scalar_one()\n            # \uc791\uc5c5...\n\n    except OperationalError as e:\n        if 'could not obtain lock' in str(e):\n            print(\"\ub9ac\uc18c\uc2a4\uac00 \uc0ac\uc6a9 \uc911\uc785\ub2c8\ub2e4\")\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\ub099\uad00\uc801-\uc7a0\uae08-optimistic-locking",children:"\ub099\uad00\uc801 \uc7a0\uae08 (Optimistic Locking)"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Version Column \uc0ac\uc6a9"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import Integer\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n    stock: Mapped[int]\n\n    # Version \uceec\ub7fc\n    version: Mapped[int] = mapped_column(Integer, default=0)\n\n# \uc0ac\uc6a9\nwith Session(engine) as session:\n    with session.begin():\n        product = session.get(Product, 1)\n        original_version = product.version\n\n        # \uc791\uc5c5 \uc218\ud589\n        product.stock -= 10\n\n        # \ucee4\ubc0b \uc2dc version \uccb4\ud06c\n        # UPDATE products SET stock=?, version=version+1\n        # WHERE id=? AND version=?\n\n        # \ub2e4\ub978 \ud2b8\ub79c\uc7ad\uc158\uc774 \uba3c\uc800 \uc218\uc815\ud588\ub2e4\uba74 StaleDataError\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"SQLAlchemy\uc758 \uc790\ub3d9 \ub099\uad00\uc801 \uc7a0\uae08"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy.orm import Mapped, mapped_column, version_id_col\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    stock: Mapped[int]\n\n    # version_id_col\ub85c \uc790\ub3d9 \ubc84\uc804 \uad00\ub9ac\n    version_id: Mapped[int] = mapped_column(default=0)\n\n    __mapper_args__ = {\n        'version_id_col': version_id\n    }\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-savepoint-\uc911\ucca9-\ud2b8\ub79c\uc7ad\uc158",children:"\ud83d\udcbe Savepoint (\uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158)"}),"\n",(0,t.jsx)(e.h3,{id:"\uae30\ubcf8-savepoint",children:"\uae30\ubcf8 Savepoint"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"with Session(engine) as session:\n    session.begin()\n\n    try:\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(username='alice')\n        session.add(user)\n        session.flush()\n\n        # Savepoint \uc0dd\uc131\n        with session.begin_nested():\n            # \uc704\ud5d8\ud55c \uc791\uc5c5\n            risky_post = Post(title='Risky', user_id=user.id)\n            session.add(risky_post)\n\n            if check_spam(risky_post):\n                raise ValueError(\"Spam detected!\")\n\n        session.commit()\n\n    except ValueError:\n        # risky_post\ub9cc \ub864\ubc31, user\ub294 \uc720\uc9c0\n        session.rollback()\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"BEGIN;\n\nINSERT INTO users (username) VALUES ('alice');\n\nSAVEPOINT sa_savepoint_1;\n\nINSERT INTO posts (title, user_id) VALUES ('Risky', 1);\n\n-- \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc\nROLLBACK TO SAVEPOINT sa_savepoint_1;\n\nCOMMIT;\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uc2e4\uc804-\uc608\uc81c-\ubc30\uce58-\ucc98\ub9ac",children:"\uc2e4\uc804 \uc608\uc81c: \ubc30\uce58 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def batch_import_users(user_data_list):\n    """\uc0ac\uc6a9\uc790 \uc77c\uad04 \uc784\ud3ec\ud2b8 (\ubd80\ubd84 \uc2e4\ud328 \ud5c8\uc6a9)"""\n    success_count = 0\n    error_count = 0\n\n    with Session(engine) as session:\n        session.begin()\n\n        for user_data in user_data_list:\n            try:\n                with session.begin_nested():  # Savepoint\n                    user = User(**user_data)\n                    session.add(user)\n                    session.flush()\n\n                    success_count += 1\n\n            except Exception as e:\n                # \uc774 \uc0ac\uc6a9\uc790\ub9cc \ub864\ubc31, \ub2e4\uc74c \uc0ac\uc6a9\uc790 \uacc4\uc18d\n                print(f"Failed to import {user_data[\'username\']}: {e}")\n                error_count += 1\n\n        session.commit()\n\n    return {\n        \'success\': success_count,\n        \'errors\': error_count\n    }\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\ufe0f-deadlock-\ucc98\ub9ac",children:"\u26a0\ufe0f Deadlock \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.h3,{id:"deadlock\uc774\ub780",children:"Deadlock\uc774\ub780?"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# Transaction 1\nwith Session(engine) as session1:\n    session1.begin()\n    account_a = session1.get(Account, 1, with_for_update=True)\n    time.sleep(1)\n    account_b = session1.get(Account, 2, with_for_update=True)  # \ub300\uae30\n    session1.commit()\n\n# Transaction 2 (\ub3d9\uc2dc \uc2e4\ud589)\nwith Session(engine) as session2:\n    session2.begin()\n    account_b = session2.get(Account, 2, with_for_update=True)\n    time.sleep(1)\n    account_a = session2.get(Account, 1, with_for_update=True)  # \ub300\uae30\n    session2.commit()\n\n# \uacb0\uacfc: Deadlock! (\uc11c\ub85c\ub97c \uae30\ub2e4\ub9bc)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"deadlock-\ubc29\uc9c0",children:"Deadlock \ubc29\uc9c0"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"1. \uc77c\uad00\ub41c \uc21c\uc11c\ub85c \uc7a0\uae08"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \u2705 \ud56d\uc0c1 ID \uc21c\uc11c\ub300\ub85c \uc7a0\uae08\ndef transfer_money(session, from_id, to_id, amount):\n    # ID \uc21c\uc11c\ub300\ub85c \uc815\ub82c\n    ids = sorted([from_id, to_id])\n\n    # \uc21c\uc11c\ub300\ub85c \uc7a0\uae08 \ud68d\ub4dd\n    account1 = session.get(Account, ids[0], with_for_update=True)\n    account2 = session.get(Account, ids[1], with_for_update=True)\n\n    if from_id == ids[0]:\n        account1.balance -= amount\n        account2.balance += amount\n    else:\n        account2.balance -= amount\n        account1.balance += amount\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Deadlock \uc7ac\uc2dc\ub3c4"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from sqlalchemy.exc import OperationalError\nimport time\n\ndef execute_with_retry(func, max_retries=3):\n    """Deadlock \ubc1c\uc0dd \uc2dc \uc7ac\uc2dc\ub3c4"""\n    for attempt in range(max_retries):\n        try:\n            with Session(engine) as session:\n                with session.begin():\n                    return func(session)\n\n        except OperationalError as e:\n            if \'deadlock detected\' in str(e) and attempt < max_retries - 1:\n                print(f"Deadlock detected, retrying ({attempt + 1}/{max_retries})...")\n                time.sleep(0.1 * (2 ** attempt))  # Exponential backoff\n            else:\n                raise\n\n# \uc0ac\uc6a9\ndef transfer(session):\n    # \uc774\uccb4 \ub85c\uc9c1\n    pass\n\nexecute_with_retry(transfer)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-\ubd84\uc0b0-\ud2b8\ub79c\uc7ad\uc158-2-phase-commit",children:"\ud83c\udf10 \ubd84\uc0b0 \ud2b8\ub79c\uc7ad\uc158 (2-Phase Commit)"}),"\n",(0,t.jsx)(e.h3,{id:"postgresql-prepare-transaction",children:"PostgreSQL PREPARE TRANSACTION"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from sqlalchemy import text\n\n# Phase 1: Prepare\nwith Session(engine) as session:\n    session.begin()\n\n    user = User(username='alice')\n    session.add(user)\n    session.flush()\n\n    # \ud2b8\ub79c\uc7ad\uc158 \uc900\ube44\n    session.execute(text(\"PREPARE TRANSACTION 'txn_001'\"))\n\n# Phase 2: Commit\nwith engine.connect() as conn:\n    conn.execute(text(\"COMMIT PREPARED 'txn_001'\"))\n\n# \ub610\ub294 Rollback\n# conn.execute(text(\"ROLLBACK PREPARED 'txn_001'\"))\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uc5ec\ub7ec-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uac04-\ud2b8\ub79c\uc7ad\uc158",children:"\uc5ec\ub7ec \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uac04 \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# DB1: PostgreSQL\nengine1 = create_engine('postgresql://...')\n\n# DB2: PostgreSQL\nengine2 = create_engine('postgresql://...')\n\n# 2-Phase Commit\ndef distributed_transaction():\n    session1 = Session(engine1)\n    session2 = Session(engine2)\n\n    try:\n        # Phase 1: \uc791\uc5c5 \uc218\ud589\n        session1.begin()\n        session2.begin()\n\n        # DB1\uc5d0 \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(username='alice')\n        session1.add(user)\n        session1.flush()\n\n        # DB2\uc5d0 \ub85c\uadf8 \uae30\ub85d\n        log = AuditLog(action='user_created', user_id=user.id)\n        session2.add(log)\n        session2.flush()\n\n        # Phase 2: Prepare\n        session1.execute(text(\"PREPARE TRANSACTION 'txn1'\"))\n        session2.execute(text(\"PREPARE TRANSACTION 'txn2'\"))\n\n        # Phase 3: Commit\n        with engine1.connect() as conn:\n            conn.execute(text(\"COMMIT PREPARED 'txn1'\"))\n        with engine2.connect() as conn:\n            conn.execute(text(\"COMMIT PREPARED 'txn2'\"))\n\n    except Exception as e:\n        # Rollback\n        try:\n            with engine1.connect() as conn:\n                conn.execute(text(\"ROLLBACK PREPARED 'txn1'\"))\n        except:\n            pass\n\n        try:\n            with engine2.connect() as conn:\n                conn.execute(text(\"ROLLBACK PREPARED 'txn2'\"))\n        except:\n            pass\n\n        raise\n\n    finally:\n        session1.close()\n        session2.close()\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\uc2e4\uc804-\ud328\ud134",children:"\ud83d\udca1 \uc2e4\uc804 \ud328\ud134"}),"\n",(0,t.jsx)(e.h3,{id:"\ud328\ud134-1-\uc7ac\uace0-\uad00\ub9ac",children:"\ud328\ud134 1: \uc7ac\uace0 \uad00\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'class InventoryService:\n    def reserve_stock(self, product_id: int, quantity: int) -> bool:\n        """\uc7ac\uace0 \uc608\uc57d (\ub3d9\uc2dc\uc131 \uc81c\uc5b4)"""\n        with Session(engine) as session:\n            with session.begin():\n                # \ube44\uad00\uc801 \uc7a0\uae08\n                stmt = select(Product)\\\n                    .where(Product.id == product_id)\\\n                    .with_for_update()\n\n                product = session.execute(stmt).scalar_one()\n\n                if product.stock >= quantity:\n                    product.stock -= quantity\n                    reservation = StockReservation(\n                        product_id=product_id,\n                        quantity=quantity\n                    )\n                    session.add(reservation)\n                    return True\n\n                return False\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ud328\ud134-2-\uc8fc\ubb38-\ucc98\ub9ac",children:"\ud328\ud134 2: \uc8fc\ubb38 \ucc98\ub9ac"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def process_order(order_id: int):\n    """\uc8fc\ubb38 \ucc98\ub9ac (\ud2b8\ub79c\uc7ad\uc158)"""\n    with Session(engine) as session:\n        with session.begin():\n            # \uc8fc\ubb38 \uc870\ud68c\n            order = session.get(Order, order_id, with_for_update=True)\n\n            if order.status != \'pending\':\n                raise ValueError("Order already processed")\n\n            # Savepoint: \uacb0\uc81c \uc2dc\ub3c4\n            try:\n                with session.begin_nested():\n                    payment = process_payment(order)\n                    session.add(payment)\n\n                    order.status = \'paid\'\n\n            except PaymentError as e:\n                # \uacb0\uc81c \uc2e4\ud328, \uc8fc\ubb38\uc740 pending \uc720\uc9c0\n                order.payment_error = str(e)\n                raise\n\n            # \uc7ac\uace0 \ucc28\uac10\n            for item in order.items:\n                product = session.get(Product, item.product_id, with_for_update=True)\n                product.stock -= item.quantity\n\n            order.status = \'confirmed\'\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\ud328\ud134-3-\uacc4\uc88c-\uc774\uccb4",children:"\ud328\ud134 3: \uacc4\uc88c \uc774\uccb4"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'def transfer_money(from_account_id: int, to_account_id: int, amount: Decimal):\n    """\uacc4\uc88c \uc774\uccb4 (ACID \ubcf4\uc7a5)"""\n    with Session(engine) as session:\n        with session.begin():\n            # Deadlock \ubc29\uc9c0: ID \uc21c\uc11c\ub85c \uc7a0\uae08\n            ids = sorted([from_account_id, to_account_id])\n\n            account1 = session.get(Account, ids[0], with_for_update=True)\n            account2 = session.get(Account, ids[1], with_for_update=True)\n\n            from_account = account1 if account1.id == from_account_id else account2\n            to_account = account2 if account2.id == to_account_id else account1\n\n            # \uc794\uc561 \ud655\uc778\n            if from_account.balance < amount:\n                raise InsufficientFundsError()\n\n            # \uc774\uccb4\n            from_account.balance -= amount\n            to_account.balance += amount\n\n            # \uac70\ub798 \uae30\ub85d\n            transaction = Transaction(\n                from_account_id=from_account_id,\n                to_account_id=to_account_id,\n                amount=amount\n            )\n            session.add(transaction)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,t.jsx)(e.h3,{id:"1-\ud2b8\ub79c\uc7ad\uc158\uc740-\uc9e7\uac8c",children:"1. \ud2b8\ub79c\uc7ad\uc158\uc740 \uc9e7\uac8c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"# \u274c \ub098\uc05c \uc608: \uae34 \ud2b8\ub79c\uc7ad\uc158\nwith Session(engine) as session:\n    with session.begin():\n        data = fetch_data_from_api()  # \uc678\ubd80 API \ud638\ucd9c (\ub290\ub9bc)\n        process_data(data)  # \ubcf5\uc7a1\ud55c \uacc4\uc0b0\n        session.add(...)  # DB \uc791\uc5c5\n\n# \u2705 \uc88b\uc740 \uc608: \uc9e7\uc740 \ud2b8\ub79c\uc7ad\uc158\ndata = fetch_data_from_api()\nprocessed = process_data(data)\n\nwith Session(engine) as session:\n    with session.begin():\n        session.add(processed)  # DB \uc791\uc5c5\ub9cc\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-\uaca9\ub9ac-\uc218\uc900-\uc120\ud0dd",children:"2. \uaca9\ub9ac \uc218\uc900 \uc120\ud0dd"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"READ COMMITTED"}),": \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 (\uae30\ubcf8\uac12)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"REPEATABLE READ"}),": \uc77c\uad00\ub41c \uc77d\uae30\uac00 \uc911\uc694\ud560 \ub54c"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"SERIALIZABLE"}),": \uc644\uc804\ud55c \uaca9\ub9ac\uac00 \ud544\uc694\ud560 \ub54c (\uc131\ub2a5 \uc800\ud558)"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"3-\uc7a0\uae08-\uc804\ub7b5-\uc120\ud0dd",children:"3. \uc7a0\uae08 \uc804\ub7b5 \uc120\ud0dd"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\ub099\uad00\uc801 \uc7a0\uae08"}),": \ucda9\ub3cc\uc774 \ub4dc\ubb38 \uacbd\uc6b0 (\ubc84\uc804 \uceec\ub7fc)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\ube44\uad00\uc801 \uc7a0\uae08"}),": \ucda9\ub3cc\uc774 \ube48\ubc88\ud55c \uacbd\uc6b0 (FOR UPDATE)"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"../intermediate/sessions",children:"\uc138\uc158 \uad00\ub9ac"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"./performance",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://www.postgresql.org/docs/current/tutorial-transactions.html",children:"PostgreSQL \ud2b8\ub79c\uc7ad\uc158 \ubb38\uc11c"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(e.p,{children:"\uace0\uae09\ud3b8\uc744 \uc644\ub8cc\ud588\uc2b5\ub2c8\ub2e4! \uc774\uc81c \uc2e4\uc804 \uc2dc\ub098\ub9ac\uc624\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,t.jsx)(e.a,{href:"../scenarios/intro",children:"\uc2e4\uc804\ud3b8 \uc18c\uac1c"})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\ud83d\udca1 \ud301"}),": \ud2b8\ub79c\uc7ad\uc158\uc740 \uc9e7\uace0 \uac04\uacb0\ud558\uac8c! \uc678\ubd80 API \ud638\ucd9c\uc774\ub098 \ubcf5\uc7a1\ud55c \uacc4\uc0b0\uc740 \ud2b8\ub79c\uc7ad\uc158 \ubc16\uc5d0\uc11c \uc218\ud589\ud558\uc138\uc694!"]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>a});var i=s(6540);const t={},o=i.createContext(t);function r(n){const e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);