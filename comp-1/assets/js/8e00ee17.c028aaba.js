"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5176],{4883:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"sqlalchemy/scenarios/fastapi-integration","title":"FastAPI + SQLAlchemy \ud1b5\ud569","description":"FastAPI\uc640 SQLAlchemy\ub97c \ud1b5\ud569\ud558\uc5ec \ud604\ub300\uc801\uc778 RESTful API\ub97c \uad6c\ucd95\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/scenarios/fastapi-integration.md","sourceDirName":"sqlalchemy/scenarios","slug":"/sqlalchemy/scenarios/fastapi-integration","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/scenarios/fastapi-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/scenarios/fastapi-integration.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"sqlalchemySidebar","previous":{"title":"\uc804\uc790\uc0c1\uac70\ub798 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/scenarios/ecommerce"},"next":{"title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc2a4\ud305","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/scenarios/testing"}}');var t=s(4848),o=s(8453);const a={sidebar_position:3},i="FastAPI + SQLAlchemy \ud1b5\ud569",d={},c=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\ud83d\udd27 \ud575\uc2ec \uc124\uc815",id:"-\ud575\uc2ec-\uc124\uc815",level:2},{value:"core/config.py",id:"coreconfigpy",level:3},{value:"core/database.py",id:"coredatabasepy",level:3},{value:"core/security.py",id:"coresecuritypy",level:3},{value:"\ud83d\udcdd Pydantic \uc2a4\ud0a4\ub9c8",id:"-pydantic-\uc2a4\ud0a4\ub9c8",level:2},{value:"schemas/user.py",id:"schemasuserpy",level:3},{value:"schemas/product.py",id:"schemasproductpy",level:3},{value:"\ud83d\udd28 CRUD \uc791\uc5c5",id:"-crud-\uc791\uc5c5",level:2},{value:"crud/base.py",id:"crudbasepy",level:3},{value:"crud/user.py",id:"cruduserpy",level:3},{value:"\ud83d\udee1\ufe0f Dependencies",id:"\ufe0f-dependencies",level:2},{value:"api/deps.py",id:"apidepspy",level:3},{value:"\ud83d\ude80 API \uc5d4\ub4dc\ud3ec\uc778\ud2b8",id:"-api-\uc5d4\ub4dc\ud3ec\uc778\ud2b8",level:2},{value:"api/v1/users.py",id:"apiv1userspy",level:3},{value:"api/v1/auth.py",id:"apiv1authpy",level:3},{value:"api/v1/products.py",id:"apiv1productspy",level:3},{value:"\ud83c\udfc3 \uba54\uc778 \uc560\ud50c\ub9ac\ucf00\uc774\uc158",id:"-\uba54\uc778-\uc560\ud50c\ub9ac\ucf00\uc774\uc158",level:2},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. \uc5d0\ub7ec \ucc98\ub9ac",id:"1-\uc5d0\ub7ec-\ucc98\ub9ac",level:3},{value:"2. \ud2b8\ub79c\uc7ad\uc158 \ubbf8\ub4e4\uc6e8\uc5b4",id:"2-\ud2b8\ub79c\uc7ad\uc158-\ubbf8\ub4e4\uc6e8\uc5b4",level:3},{value:"3. \ud398\uc774\uc9d5 \ud5ec\ud37c",id:"3-\ud398\uc774\uc9d5-\ud5ec\ud37c",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"fastapi--sqlalchemy-\ud1b5\ud569",children:"FastAPI + SQLAlchemy \ud1b5\ud569"})}),"\n",(0,t.jsx)(n.p,{children:"FastAPI\uc640 SQLAlchemy\ub97c \ud1b5\ud569\ud558\uc5ec \ud604\ub300\uc801\uc778 RESTful API\ub97c \uad6c\ucd95\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 FastAPI\uc640 SQLAlchemy \ud1b5\ud569"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Dependency Injection \ud328\ud134"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Pydantic \uc2a4\ud0a4\ub9c8 \ud65c\uc6a9"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \uc778\uc99d/\uad8c\ud55c \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \uc5d0\ub7ec \ucc98\ub9ac \ubc0f \uac80\uc99d"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83d\udcc1 \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"myapp/\n\u251c\u2500\u2500 models/              # SQLAlchemy \ubaa8\ub378\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2514\u2500\u2500 product.py\n\u251c\u2500\u2500 schemas/             # Pydantic \uc2a4\ud0a4\ub9c8\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2514\u2500\u2500 product.py\n\u251c\u2500\u2500 crud/                # CRUD \uc791\uc5c5\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base.py\n\u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2514\u2500\u2500 product.py\n\u251c\u2500\u2500 api/                 # API \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 deps.py          # Dependencies\n\u2502   \u2514\u2500\u2500 v1/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 users.py\n\u2502       \u2514\u2500\u2500 products.py\n\u251c\u2500\u2500 core/                # \ud575\uc2ec \uc124\uc815\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u2514\u2500\u2500 security.py\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud575\uc2ec-\uc124\uc815",children:"\ud83d\udd27 \ud575\uc2ec \uc124\uc815"}),"\n",(0,t.jsx)(n.h3,{id:"coreconfigpy",children:"core/config.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    # \uc571 \uc124\uc815\n    PROJECT_NAME: str = "My E-Commerce API"\n    VERSION: str = "1.0.0"\n    API_V1_STR: str = "/api/v1"\n\n    # \ub370\uc774\ud130\ubca0\uc774\uc2a4\n    DATABASE_URL: str = "postgresql://user:pass@localhost/mydb"\n\n    # \ubcf4\uc548\n    SECRET_KEY: str\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30\n    ALGORITHM: str = "HS256"\n\n    # CORS\n    BACKEND_CORS_ORIGINS: list[str] = ["http://localhost:3000"]\n\n    class Config:\n        env_file = ".env"\n        case_sensitive = True\n\nsettings = Settings()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"coredatabasepy",children:"core/database.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom core.config import settings\n\n# Engine \uc0dd\uc131\nengine = create_engine(\n    settings.DATABASE_URL,\n    pool_pre_ping=True,\n    pool_size=10,\n    max_overflow=20\n)\n\n# SessionLocal Factory\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine\n)\n\n# Dependency\ndef get_db() -> Session:\n    """DB \uc138\uc158 \uc758\uc874\uc131"""\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"coresecuritypy",children:"core/security.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from datetime import datetime, timedelta\nfrom passlib.context import CryptContext\nfrom jose import JWTError, jwt\nfrom core.config import settings\n\n# \ube44\ubc00\ubc88\ud638 \ud574\uc2f1\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    """\ube44\ubc00\ubc88\ud638 \uac80\uc99d"""\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -> str:\n    """\ube44\ubc00\ubc88\ud638 \ud574\uc2f1"""\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None) -> str:\n    """JWT \ud1a0\ud070 \uc0dd\uc131"""\n    to_encode = data.copy()\n\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n\n    to_encode.update({"exp": expire})\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)\n\n    return encoded_jwt\n\ndef decode_access_token(token: str) -> dict:\n    """JWT \ud1a0\ud070 \ub514\ucf54\ub529"""\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])\n        return payload\n    except JWTError:\n        return None\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-pydantic-\uc2a4\ud0a4\ub9c8",children:"\ud83d\udcdd Pydantic \uc2a4\ud0a4\ub9c8"}),"\n",(0,t.jsx)(n.h3,{id:"schemasuserpy",children:"schemas/user.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, EmailStr, Field\nfrom uuid import UUID\nfrom datetime import datetime\n\n# Base \uc2a4\ud0a4\ub9c8\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str = Field(..., min_length=3, max_length=50)\n    first_name: str | None = None\n    last_name: str | None = None\n\n# \uc0dd\uc131 \uc2a4\ud0a4\ub9c8\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8)\n\n# \uc5c5\ub370\uc774\ud2b8 \uc2a4\ud0a4\ub9c8\nclass UserUpdate(BaseModel):\n    first_name: str | None = None\n    last_name: str | None = None\n    phone: str | None = None\n\n# \uc751\ub2f5 \uc2a4\ud0a4\ub9c8\nclass User(UserBase):\n    id: UUID\n    is_active: bool\n    is_verified: bool\n    created_at: datetime\n    updated_at: datetime\n\n    class Config:\n        from_attributes = True  # ORM \ubaa8\ub378 -> Pydantic\n\n# \ub85c\uadf8\uc778 \uc2a4\ud0a4\ub9c8\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str\n\n# \ud1a0\ud070 \uc2a4\ud0a4\ub9c8\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = "bearer"\n\nclass TokenData(BaseModel):\n    user_id: UUID | None = None\n'})}),"\n",(0,t.jsx)(n.h3,{id:"schemasproductpy",children:"schemas/product.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from pydantic import BaseModel, Field\nfrom uuid import UUID\nfrom decimal import Decimal\nfrom datetime import datetime\n\nclass ProductBase(BaseModel):\n    name: str = Field(..., min_length=1, max_length=255)\n    description: str\n    price: Decimal = Field(..., gt=0)\n    stock: int = Field(..., ge=0)\n    sku: str\n\nclass ProductCreate(ProductBase):\n    category_ids: list[UUID] = []\n    tags: list[str] = []\n\nclass ProductUpdate(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: Decimal | None = Field(None, gt=0)\n    stock: int | None = Field(None, ge=0)\n    is_active: bool | None = None\n\nclass Product(ProductBase):\n    id: UUID\n    slug: str\n    is_active: bool\n    is_featured: bool\n    created_at: datetime\n    updated_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# \ud398\uc774\uc9d5 \uc751\ub2f5\nclass ProductList(BaseModel):\n    items: list[Product]\n    total: int\n    page: int\n    per_page: int\n    total_pages: int\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-crud-\uc791\uc5c5",children:"\ud83d\udd28 CRUD \uc791\uc5c5"}),"\n",(0,t.jsx)(n.h3,{id:"crudbasepy",children:"crud/base.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from typing import Generic, TypeVar, Type, Optional, List\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import select\nfrom pydantic import BaseModel\nfrom models.base import Base\n\nModelType = TypeVar("ModelType", bound=Base)\nCreateSchemaType = TypeVar("CreateSchemaType", bound=BaseModel)\nUpdateSchemaType = TypeVar("UpdateSchemaType", bound=BaseModel)\n\nclass CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n\n    def get(self, db: Session, id: any) -> Optional[ModelType]:\n        """ID\ub85c \uc870\ud68c"""\n        return db.get(self.model, id)\n\n    def get_multi(\n        self,\n        db: Session,\n        skip: int = 0,\n        limit: int = 100\n    ) -> List[ModelType]:\n        """\uc804\uccb4 \uc870\ud68c (\ud398\uc774\uc9d5)"""\n        stmt = select(self.model).offset(skip).limit(limit)\n        return db.execute(stmt).scalars().all()\n\n    def create(self, db: Session, obj_in: CreateSchemaType) -> ModelType:\n        """\uc0dd\uc131"""\n        obj_data = obj_in.model_dump()\n        db_obj = self.model(**obj_data)\n        db.add(db_obj)\n        db.flush()\n        db.refresh(db_obj)\n        return db_obj\n\n    def update(\n        self,\n        db: Session,\n        db_obj: ModelType,\n        obj_in: UpdateSchemaType\n    ) -> ModelType:\n        """\uc5c5\ub370\uc774\ud2b8"""\n        obj_data = obj_in.model_dump(exclude_unset=True)\n        for field, value in obj_data.items():\n            setattr(db_obj, field, value)\n        db.flush()\n        db.refresh(db_obj)\n        return db_obj\n\n    def delete(self, db: Session, id: any) -> ModelType:\n        """\uc0ad\uc81c"""\n        obj = db.get(self.model, id)\n        db.delete(obj)\n        db.flush()\n        return obj\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cruduserpy",children:"crud/user.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import select\nfrom sqlalchemy.orm import Session\nfrom crud.base import CRUDBase\nfrom models.user import User\nfrom schemas.user import UserCreate, UserUpdate\nfrom core.security import get_password_hash, verify_password\n\nclass CRUDUser(CRUDBase[User, UserCreate, UserUpdate]):\n    def create(self, db: Session, obj_in: UserCreate) -> User:\n        """\uc0ac\uc6a9\uc790 \uc0dd\uc131 (\ube44\ubc00\ubc88\ud638 \ud574\uc2f1)"""\n        db_obj = User(\n            email=obj_in.email,\n            username=obj_in.username,\n            first_name=obj_in.first_name,\n            last_name=obj_in.last_name,\n            password_hash=get_password_hash(obj_in.password)\n        )\n        db.add(db_obj)\n        db.flush()\n        db.refresh(db_obj)\n        return db_obj\n\n    def get_by_email(self, db: Session, email: str) -> User | None:\n        """\uc774\uba54\uc77c\ub85c \uc870\ud68c"""\n        stmt = select(User).where(User.email == email)\n        return db.execute(stmt).scalar_one_or_none()\n\n    def get_by_username(self, db: Session, username: str) -> User | None:\n        """\uc0ac\uc6a9\uc790\uba85\uc73c\ub85c \uc870\ud68c"""\n        stmt = select(User).where(User.username == username)\n        return db.execute(stmt).scalar_one_or_none()\n\n    def authenticate(self, db: Session, email: str, password: str) -> User | None:\n        """\uc778\uc99d"""\n        user = self.get_by_email(db, email)\n        if not user:\n            return None\n        if not verify_password(password, user.password_hash):\n            return None\n        return user\n\n# \uc2f1\uae00\ud1a4 \uc778\uc2a4\ud134\uc2a4\nuser = CRUDUser(User)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-dependencies",children:"\ud83d\udee1\ufe0f Dependencies"}),"\n",(0,t.jsx)(n.h3,{id:"apidepspy",children:"api/deps.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom sqlalchemy.orm import Session\nfrom jose import JWTError\nfrom uuid import UUID\n\nfrom core.database import get_db\nfrom core.security import decode_access_token\nfrom crud.user import user as user_crud\nfrom models.user import User\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/v1/auth/login")\n\ndef get_current_user(\n    db: Session = Depends(get_db),\n    token: str = Depends(oauth2_scheme)\n) -> User:\n    """\ud604\uc7ac \uc778\uc99d\ub41c \uc0ac\uc6a9\uc790"""\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail="Could not validate credentials",\n        headers={"WWW-Authenticate": "Bearer"},\n    )\n\n    payload = decode_access_token(token)\n    if payload is None:\n        raise credentials_exception\n\n    user_id: UUID = payload.get("sub")\n    if user_id is None:\n        raise credentials_exception\n\n    user = user_crud.get(db, user_id)\n    if user is None:\n        raise credentials_exception\n\n    return user\n\ndef get_current_active_user(\n    current_user: User = Depends(get_current_user)\n) -> User:\n    """\ud65c\uc131 \uc0ac\uc6a9\uc790\ub9cc"""\n    if not current_user.is_active:\n        raise HTTPException(status_code=400, detail="Inactive user")\n    return current_user\n\ndef get_current_admin_user(\n    current_user: User = Depends(get_current_user)\n) -> User:\n    """\uad00\ub9ac\uc790\ub9cc"""\n    if not current_user.is_admin:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail="Not enough permissions"\n        )\n    return current_user\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-api-\uc5d4\ub4dc\ud3ec\uc778\ud2b8",children:"\ud83d\ude80 API \uc5d4\ub4dc\ud3ec\uc778\ud2b8"}),"\n",(0,t.jsx)(n.h3,{id:"apiv1userspy",children:"api/v1/users.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom uuid import UUID\n\nfrom api.deps import get_db, get_current_active_user, get_current_admin_user\nfrom crud.user import user as user_crud\nfrom schemas.user import User, UserCreate, UserUpdate\nfrom models.user import User as UserModel\n\nrouter = APIRouter()\n\n@router.post("/", response_model=User, status_code=status.HTTP_201_CREATED)\ndef create_user(\n    user_in: UserCreate,\n    db: Session = Depends(get_db)\n):\n    """\uc0c8 \uc0ac\uc6a9\uc790 \ub4f1\ub85d"""\n    # \uc911\ubcf5 \uccb4\ud06c\n    if user_crud.get_by_email(db, user_in.email):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail="Email already registered"\n        )\n\n    if user_crud.get_by_username(db, user_in.username):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail="Username already taken"\n        )\n\n    # \uc0dd\uc131\n    user = user_crud.create(db, user_in)\n    db.commit()\n\n    return user\n\n@router.get("/me", response_model=User)\ndef read_user_me(\n    current_user: UserModel = Depends(get_current_active_user)\n):\n    """\ud604\uc7ac \uc0ac\uc6a9\uc790 \uc815\ubcf4"""\n    return current_user\n\n@router.put("/me", response_model=User)\ndef update_user_me(\n    user_in: UserUpdate,\n    db: Session = Depends(get_db),\n    current_user: UserModel = Depends(get_current_active_user)\n):\n    """\ud604\uc7ac \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc218\uc815"""\n    user = user_crud.update(db, current_user, user_in)\n    db.commit()\n    return user\n\n@router.get("/{user_id}", response_model=User)\ndef read_user(\n    user_id: UUID,\n    db: Session = Depends(get_db),\n    _: UserModel = Depends(get_current_admin_user)  # \uad00\ub9ac\uc790\ub9cc\n):\n    """\uc0ac\uc6a9\uc790 \uc870\ud68c (\uad00\ub9ac\uc790)"""\n    user = user_crud.get(db, user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="User not found"\n        )\n    return user\n\n@router.get("/", response_model=list[User])\ndef read_users(\n    skip: int = 0,\n    limit: int = 100,\n    db: Session = Depends(get_db),\n    _: UserModel = Depends(get_current_admin_user)\n):\n    """\uc0ac\uc6a9\uc790 \ubaa9\ub85d (\uad00\ub9ac\uc790)"""\n    users = user_crud.get_multi(db, skip=skip, limit=limit)\n    return users\n'})}),"\n",(0,t.jsx)(n.h3,{id:"apiv1authpy",children:"api/v1/auth.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from datetime import timedelta\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.orm import Session\n\nfrom api.deps import get_db\nfrom core.config import settings\nfrom core.security import create_access_token\nfrom crud.user import user as user_crud\nfrom schemas.user import Token\n\nrouter = APIRouter()\n\n@router.post("/login", response_model=Token)\ndef login(\n    db: Session = Depends(get_db),\n    form_data: OAuth2PasswordRequestForm = Depends()\n):\n    """\ub85c\uadf8\uc778"""\n    user = user_crud.authenticate(db, form_data.username, form_data.password)\n\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail="Incorrect email or password",\n            headers={"WWW-Authenticate": "Bearer"},\n        )\n\n    if not user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail="Inactive user"\n        )\n\n    # JWT \ud1a0\ud070 \uc0dd\uc131\n    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={"sub": str(user.id)},\n        expires_delta=access_token_expires\n    )\n\n    return {"access_token": access_token, "token_type": "bearer"}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"apiv1productspy",children:"api/v1/products.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, Depends, HTTPException, Query, status\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import select, func\nfrom uuid import UUID\n\nfrom api.deps import get_db, get_current_admin_user\nfrom crud.product import product as product_crud\nfrom schemas.product import Product, ProductCreate, ProductUpdate, ProductList\nfrom models.user import User\n\nrouter = APIRouter()\n\n@router.get("/", response_model=ProductList)\ndef read_products(\n    page: int = Query(1, ge=1),\n    per_page: int = Query(10, ge=1, le=100),\n    db: Session = Depends(get_db)\n):\n    """\uc81c\ud488 \ubaa9\ub85d"""\n    skip = (page - 1) * per_page\n\n    # \uc804\uccb4 \uac1c\uc218\n    total_stmt = select(func.count(Product.id))\n    total = db.execute(total_stmt).scalar()\n\n    # \ud398\uc774\uc9d5 \uc870\ud68c\n    products = product_crud.get_multi(db, skip=skip, limit=per_page)\n\n    return {\n        "items": products,\n        "total": total,\n        "page": page,\n        "per_page": per_page,\n        "total_pages": (total + per_page - 1) // per_page\n    }\n\n@router.get("/{product_id}", response_model=Product)\ndef read_product(\n    product_id: UUID,\n    db: Session = Depends(get_db)\n):\n    """\uc81c\ud488 \uc0c1\uc138"""\n    product = product_crud.get(db, product_id)\n    if not product:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="Product not found"\n        )\n    return product\n\n@router.post("/", response_model=Product, status_code=status.HTTP_201_CREATED)\ndef create_product(\n    product_in: ProductCreate,\n    db: Session = Depends(get_db),\n    _: User = Depends(get_current_admin_user)\n):\n    """\uc81c\ud488 \uc0dd\uc131 (\uad00\ub9ac\uc790)"""\n    product = product_crud.create(db, product_in)\n    db.commit()\n    return product\n\n@router.put("/{product_id}", response_model=Product)\ndef update_product(\n    product_id: UUID,\n    product_in: ProductUpdate,\n    db: Session = Depends(get_db),\n    _: User = Depends(get_current_admin_user)\n):\n    """\uc81c\ud488 \uc218\uc815 (\uad00\ub9ac\uc790)"""\n    product = product_crud.get(db, product_id)\n    if not product:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="Product not found"\n        )\n\n    product = product_crud.update(db, product, product_in)\n    db.commit()\n    return product\n\n@router.delete("/{product_id}", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_product(\n    product_id: UUID,\n    db: Session = Depends(get_db),\n    _: User = Depends(get_current_admin_user)\n):\n    """\uc81c\ud488 \uc0ad\uc81c (\uad00\ub9ac\uc790)"""\n    product = product_crud.get(db, product_id)\n    if not product:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail="Product not found"\n        )\n\n    product_crud.delete(db, product_id)\n    db.commit()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uba54\uc778-\uc560\ud50c\ub9ac\ucf00\uc774\uc158",children:"\ud83c\udfc3 \uba54\uc778 \uc560\ud50c\ub9ac\ucf00\uc774\uc158"}),"\n",(0,t.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom core.config import settings\nfrom api.v1 import users, products, auth\n\napp = FastAPI(\n    title=settings.PROJECT_NAME,\n    version=settings.VERSION,\n    openapi_url=f"{settings.API_V1_STR}/openapi.json"\n)\n\n# CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.BACKEND_CORS_ORIGINS,\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# \ub77c\uc6b0\ud130 \ub4f1\ub85d\napp.include_router(auth.router, prefix=f"{settings.API_V1_STR}/auth", tags=["auth"])\napp.include_router(users.router, prefix=f"{settings.API_V1_STR}/users", tags=["users"])\napp.include_router(products.router, prefix=f"{settings.API_V1_STR}/products", tags=["products"])\n\n@app.get("/")\ndef root():\n    return {"message": "Welcome to the E-Commerce API"}\n\n@app.get("/health")\ndef health_check():\n    return {"status": "healthy"}\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,t.jsx)(n.h3,{id:"1-\uc5d0\ub7ec-\ucc98\ub9ac",children:"1. \uc5d0\ub7ec \ucc98\ub9ac"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import Request\nfrom fastapi.responses import JSONResponse\nfrom sqlalchemy.exc import IntegrityError\n\n@app.exception_handler(IntegrityError)\nasync def integrity_error_handler(request: Request, exc: IntegrityError):\n    return JSONResponse(\n        status_code=400,\n        content={"detail": "Database integrity error"}\n    )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-\ud2b8\ub79c\uc7ad\uc158-\ubbf8\ub4e4\uc6e8\uc5b4",children:"2. \ud2b8\ub79c\uc7ad\uc158 \ubbf8\ub4e4\uc6e8\uc5b4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import Request\nfrom sqlalchemy.orm import Session\n\n@app.middleware("http")\nasync def db_session_middleware(request: Request, call_next):\n    try:\n        request.state.db = SessionLocal()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n    return response\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-\ud398\uc774\uc9d5-\ud5ec\ud37c",children:"3. \ud398\uc774\uc9d5 \ud5ec\ud37c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from typing import Generic, TypeVar\nfrom pydantic import BaseModel\n\nT = TypeVar('T')\n\nclass Page(BaseModel, Generic[T]):\n    items: list[T]\n    total: int\n    page: int\n    per_page: int\n\n    @property\n    def total_pages(self) -> int:\n        return (self.total + self.per_page - 1) // self.per_page\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./ecommerce",children:"\uc804\uc790\uc0c1\uac70\ub798 \ub370\uc774\ud130\ubca0\uc774\uc2a4"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./testing",children:"\ud14c\uc2a4\ud305"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://fastapi.tiangolo.com/",children:"FastAPI \uacf5\uc2dd \ubb38\uc11c"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(n.p,{children:"FastAPI \ud1b5\ud569\uc744 \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud574\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"./testing",children:"\ud14c\uc2a4\ud305"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": FastAPI\uc758 \uc790\ub3d9 \ubb38\uc11c\ud654 \uae30\ub2a5\uc744 \ud65c\uc6a9\ud558\uc138\uc694! ",(0,t.jsx)(n.code,{children:"/docs"}),"\uc5d0\uc11c Swagger UI\ub85c API\ub97c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4!"]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);