"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3112],{3078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"oauth/advanced/pkce","title":"PKCE \uad6c\ud604","description":"PKCE (Proof Key for Code Exchange)\ub97c \uc774\ud574\ud558\uace0 FastAPI\uc5d0\uc11c \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/oauth/advanced/pkce.md","sourceDirName":"oauth/advanced","slug":"/oauth/advanced/pkce","permalink":"/tobias-docs/comp-1/docs/oauth/advanced/pkce","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oauth/advanced/pkce.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"oauthSidebar","previous":{"title":"OAuth 2.0 & OpenID Connect \uc644\ubcbd \uac00\uc774\ub4dc","permalink":"/tobias-docs/comp-1/docs/oauth/intro"},"next":{"title":"\ubcf4\uc548 Best Practices","permalink":"/tobias-docs/comp-1/docs/oauth/advanced/security"}}');var i=t(4848),o=t(8453);const a={sidebar_position:1},s="PKCE \uad6c\ud604",c={},d=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83e\udd14 PKCE\ub780?",id:"-pkce\ub780",level:2},{value:"\uc815\uc758",id:"\uc815\uc758",level:3},{value:"\u26a0\ufe0f \ubb38\uc81c: Authorization Code Interception",id:"\ufe0f-\ubb38\uc81c-authorization-code-interception",level:2},{value:"\uacf5\uaca9 \uc2dc\ub098\ub9ac\uc624",id:"\uacf5\uaca9-\uc2dc\ub098\ub9ac\uc624",level:3},{value:"PKCE\uc758 \ud574\uacb0 \ubc29\ubc95",id:"pkce\uc758-\ud574\uacb0-\ubc29\ubc95",level:3},{value:"\ud83d\udd27 PKCE \uad6c\uc131 \uc694\uc18c",id:"-pkce-\uad6c\uc131-\uc694\uc18c",level:2},{value:"1. Code Verifier",id:"1-code-verifier",level:3},{value:"2. Code Challenge",id:"2-code-challenge",level:3},{value:"3. Code Challenge Method",id:"3-code-challenge-method",level:3},{value:"\ud83d\udee0\ufe0f FastAPI\uc5d0\uc11c PKCE \uad6c\ud604",id:"\ufe0f-fastapi\uc5d0\uc11c-pkce-\uad6c\ud604",level:2},{value:"\uc644\uc804\ud55c \uad6c\ud604",id:"\uc644\uc804\ud55c-\uad6c\ud604",level:3},{value:"Authorization Server\uc758 \uac80\uc99d \ub85c\uc9c1",id:"authorization-server\uc758-\uac80\uc99d-\ub85c\uc9c1",level:3},{value:"\ud83c\udfa8 Authlib\uc640 \ud568\uaed8 \uc0ac\uc6a9",id:"-authlib\uc640-\ud568\uaed8-\uc0ac\uc6a9",level:2},{value:"Authlib PKCE \uc790\ub3d9 \ucc98\ub9ac",id:"authlib-pkce-\uc790\ub3d9-\ucc98\ub9ac",level:3},{value:"\uc218\ub3d9 PKCE (Authlib \uc5c6\uc774)",id:"\uc218\ub3d9-pkce-authlib-\uc5c6\uc774",level:3},{value:"\ud83d\udcf1 \ud074\ub77c\uc774\uc5b8\ud2b8\ubcc4 PKCE \uad6c\ud604",id:"-\ud074\ub77c\uc774\uc5b8\ud2b8\ubcc4-pkce-\uad6c\ud604",level:2},{value:"SPA (React)",id:"spa-react",level:3},{value:"\ubaa8\ubc14\uc77c (React Native)",id:"\ubaa8\ubc14\uc77c-react-native",level:3},{value:"\ud83d\udee1\ufe0f \ubcf4\uc548 Best Practices",id:"\ufe0f-\ubcf4\uc548-best-practices",level:2},{value:"1. \ud56d\uc0c1 S256 \uc0ac\uc6a9",id:"1-\ud56d\uc0c1-s256-\uc0ac\uc6a9",level:3},{value:"2. Code Verifier \uc548\uc804\ud558\uac8c \ubcf4\uad00",id:"2-code-verifier-\uc548\uc804\ud558\uac8c-\ubcf4\uad00",level:3},{value:"3. Code Verifier \ucda9\ubd84\ud55c \uc5d4\ud2b8\ub85c\ud53c",id:"3-code-verifier-\ucda9\ubd84\ud55c-\uc5d4\ud2b8\ub85c\ud53c",level:3},{value:"4. OAuth 2.1 \uc900\uc218",id:"4-oauth-21-\uc900\uc218",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pkce-\uad6c\ud604",children:"PKCE \uad6c\ud604"})}),"\n",(0,i.jsx)(n.p,{children:"PKCE (Proof Key for Code Exchange)\ub97c \uc774\ud574\ud558\uace0 FastAPI\uc5d0\uc11c \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 PKCE\uac00 \ud544\uc694\ud55c \uc774\uc720"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 PKCE \ub3d9\uc791 \uc6d0\ub9ac"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 FastAPI\uc5d0\uc11c PKCE \uad6c\ud604"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 OAuth 2.1 \ud45c\uc900 \uc900\uc218"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 \ubcf4\uc548 \uac15\ud654"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-pkce\ub780",children:"\ud83e\udd14 PKCE\ub780?"}),"\n",(0,i.jsx)(n.h3,{id:"\uc815\uc758",children:"\uc815\uc758"}),"\n",(0,i.jsx)(n.p,{children:'**PKCE (Proof Key for Code Exchange, "\ud53d\uc2dc"\ub85c \ubc1c\uc74c)**\ub294 Authorization Code Flow\uc5d0 \ubcf4\uc548 \ub808\uc774\uc5b4\ub97c \ucd94\uac00\ud558\uc5ec Authorization Code \ud0c8\ucde8 \uacf5\uaca9\uc744 \ubc29\uc9c0\ud558\ub294 \uba54\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'pkce = {\n    "\uc815\uc758": "Authorization Code \ubcf4\ud638 \uba54\ucee4\ub2c8\uc998",\n    "\ud45c\uc900": "RFC 7636",\n    "\ubaa9\uc801": "Authorization Code Interception Attack \ubc29\uc9c0",\n    "\ud544\uc218": "Public Clients (SPA, \ubaa8\ubc14\uc77c)",\n    "\uad8c\uc7a5": "\ubaa8\ub4e0 Clients (OAuth 2.1)"\n}\n\n# OAuth 2.1\uc5d0\uc11c\ub294 \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 PKCE \ud544\uc218!\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-\ubb38\uc81c-authorization-code-interception",children:"\u26a0\ufe0f \ubb38\uc81c: Authorization Code Interception"}),"\n",(0,i.jsx)(n.h3,{id:"\uacf5\uaca9-\uc2dc\ub098\ub9ac\uc624",children:"\uacf5\uaca9 \uc2dc\ub098\ub9ac\uc624"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# PKCE \uc5c6\ub294 \ud50c\ub85c\uc6b0\uc758 \ucde8\uc57d\uc810\n\n# 1. \uc815\uc0c1 \uc0ac\uc6a9\uc790\uac00 \ub85c\uadf8\uc778 \uc2dc\uc791\nauth_url = (\n    "https://auth.server.com/authorize"\n    "?client_id=malicious-app"  # \uacf5\uaca9\uc790\uc758 \uc571\n    "&redirect_uri=malicious://callback"\n    "&response_type=code"\n)\n\n# 2. \uc0ac\uc6a9\uc790\uac00 \uc2b9\uc778\n# \u2192 Authorization Code \ubc1c\uae09: "AUTH_CODE_123"\n\n# 3. \ub9ac\ub2e4\uc774\ub809\ud2b8\n# malicious://callback?code=AUTH_CODE_123\n\n# 4. \ubb38\uc81c: \uc545\uc131 \uc571\uc774 Code\ub97c \uac00\ub85c\ucc54\n# \u2192 \uacf5\uaca9\uc790\uac00 Code\ub85c Token \uad50\ud658 \uac00\ub2a5 (Public Client\ub294 Secret \uc5c6\uc74c)\n\n# 5. \uacf5\uaca9\uc790\uac00 Token \ud68d\ub4dd\ntoken_request = {\n    "code": "AUTH_CODE_123",  # \ud0c8\ucde8\ud55c Code\n    "client_id": "malicious-app",\n    "redirect_uri": "malicious://callback",\n    # Client Secret \uc5c6\uc74c (Public Client)\n}\n\n# \u2192 \uacf5\uaca9\uc790\uac00 \uc0ac\uc6a9\uc790\uc758 Access Token \ud68d\ub4dd! \ud83d\udea8\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pkce\uc758-\ud574\uacb0-\ubc29\ubc95",children:"PKCE\uc758 \ud574\uacb0 \ubc29\ubc95"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# PKCE\ub85c \ubcf4\ud638\ub41c \ud50c\ub85c\uc6b0\n\n# 1. \uc815\uc0c1 \uc571\uc774 Code Verifier \uc0dd\uc131 (\ub85c\uceec\uc5d0 \uc548\uc804\ud558\uac8c \ubcf4\uad00)\ncode_verifier = "random-secret-string"\n\n# 2. Code Challenge \uc0dd\uc131\ncode_challenge = SHA256(code_verifier)\n\n# 3. Authorization Request (Code Challenge \ud3ec\ud568)\nauth_url = (\n    "https://auth.server.com/authorize"\n    "?client_id=my-app"\n    "&redirect_uri=myapp://callback"\n    "&code_challenge=CHALLENGE_HASH"  # \u2705 Challenge \uc804\uc1a1\n    "&code_challenge_method=S256"\n)\n\n# 4. Code \ubc1c\uae09 (Challenge\uc640 \ud568\uaed8 \uc800\uc7a5\ub428)\n\n# 5. \uacf5\uaca9\uc790\uac00 Code \ud0c8\ucde8\ud574\ub3c4...\n\n# 6. Token Request (Code Verifier \ud544\uc694)\ntoken_request = {\n    "code": "AUTH_CODE_123",\n    "client_id": "my-app",\n    "code_verifier": "???"  # \u274c \uacf5\uaca9\uc790\ub294 \ubaa8\ub984!\n}\n\n# 7. Authorization Server \uac80\uc99d\n# SHA256(code_verifier) == saved_code_challenge ?\n# \u2192 \uc77c\uce58\ud558\uc9c0 \uc54a\uc73c\uba74 \uac70\ubd80! \u2705\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-pkce-\uad6c\uc131-\uc694\uc18c",children:"\ud83d\udd27 PKCE \uad6c\uc131 \uc694\uc18c"}),"\n",(0,i.jsx)(n.h3,{id:"1-code-verifier",children:"1. Code Verifier"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ub79c\ub364 \ubb38\uc790\uc5f4"})," (43-128\uc790)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import secrets\n\ndef generate_code_verifier() -> str:\n    """Code Verifier \uc0dd\uc131"""\n    # 43-128\uc790 \uc0ac\uc774\uc758 \ub79c\ub364 \ubb38\uc790\uc5f4\n    # A-Z, a-z, 0-9, -, ., _, ~ \uc0ac\uc6a9 \uac00\ub2a5\n\n    code_verifier = secrets.token_urlsafe(32)  # 43\uc790\n    return code_verifier\n\n# \uc608\uc2dc\ncode_verifier = "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"\n\n# \u26a0\ufe0f \uc911\uc694: \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc548\uc804\ud558\uac8c \ubcf4\uad00!\n# - \uba54\ubaa8\ub9ac, \uc138\uc158 \uc2a4\ud1a0\ub9ac\uc9c0, \ucfe0\ud0a4 \ub4f1\n# - \uc808\ub300 URL\uc5d0 \ud3ec\ud568\ud558\uc9c0 \ub9d0 \uac83\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-code-challenge",children:"2. Code Challenge"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Code Verifier\uc758 SHA-256 \ud574\uc2dc"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import hashlib\nimport base64\n\ndef generate_code_challenge(code_verifier: str) -> str:\n    """Code Challenge \uc0dd\uc131 (SHA-256)"""\n\n    # 1. SHA-256 \ud574\uc2dc\n    digest = hashlib.sha256(code_verifier.encode()).digest()\n\n    # 2. Base64 URL \uc778\ucf54\ub529\n    code_challenge = base64.urlsafe_b64encode(digest).decode().rstrip(\'=\')\n\n    return code_challenge\n\n# \uc608\uc2dc\ncode_verifier = "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"\ncode_challenge = "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"\n\n# SHA256(code_verifier) \u2192 Base64URL \u2192 code_challenge\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-code-challenge-method",children:"3. Code Challenge Method"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\ud574\uc2dc \uc54c\uace0\ub9ac\uc998 \uc9c0\uc815"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'code_challenge_methods = {\n    "S256": "SHA-256 (\uad8c\uc7a5)",  # \u2705 \ubcf4\uc548\n    "plain": "\ud3c9\ubb38 (\ube44\uad8c\uc7a5)"    # \u274c \ubcf4\uc548 \ucde8\uc57d\n}\n\n# \u2705 \ud56d\uc0c1 S256 \uc0ac\uc6a9\ncode_challenge_method = "S256"\n\n# \u274c plain\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\uc138\uc694\n# plain\uc740 code_challenge = code_verifier (\ud574\uc2f1 \uc5c6\uc74c)\n# \u2192 \uc911\uac04\uc5d0\uc11c \uac00\ub85c\ucc44\uba74 verifier \ub178\ucd9c!\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-fastapi\uc5d0\uc11c-pkce-\uad6c\ud604",children:"\ud83d\udee0\ufe0f FastAPI\uc5d0\uc11c PKCE \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"\uc644\uc804\ud55c-\uad6c\ud604",children:"\uc644\uc804\ud55c \uad6c\ud604"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from fastapi import FastAPI, Request, Response, HTTPException\nfrom fastapi.responses import RedirectResponse\nfrom starlette.middleware.sessions import SessionMiddleware\nimport secrets\nimport hashlib\nimport base64\nimport httpx\n\napp = FastAPI()\n\n# \uc138\uc158 \ubbf8\ub4e4\uc6e8\uc5b4\napp.add_middleware(\n    SessionMiddleware,\n    secret_key=secrets.token_urlsafe(32)\n)\n\n# OAuth \uc124\uc815\nCLIENT_ID = \"your-client-id\"\nCLIENT_SECRET = \"your-client-secret\"  # Public Client\ub294 \uc5c6\uc74c\nAUTHORIZATION_ENDPOINT = \"https://accounts.google.com/o/oauth2/v2/auth\"\nTOKEN_ENDPOINT = \"https://oauth2.googleapis.com/token\"\nREDIRECT_URI = \"http://localhost:8000/callback\"\n\n# ==================== PKCE \uc720\ud2f8\ub9ac\ud2f0 ====================\n\ndef generate_code_verifier() -> str:\n    \"\"\"Code Verifier \uc0dd\uc131 (43-128\uc790)\"\"\"\n    return secrets.token_urlsafe(32)  # 43\uc790\n\ndef generate_code_challenge(code_verifier: str) -> str:\n    \"\"\"Code Challenge \uc0dd\uc131 (SHA-256)\"\"\"\n    digest = hashlib.sha256(code_verifier.encode()).digest()\n    code_challenge = base64.urlsafe_b64encode(digest).decode().rstrip('=')\n    return code_challenge\n\n# ==================== \ub77c\uc6b0\ud2b8 ====================\n\n@app.get('/login')\nasync def login(request: Request):\n    \"\"\"\ub85c\uadf8\uc778 \uc2dc\uc791 (PKCE \ud3ec\ud568)\"\"\"\n\n    # 1. Code Verifier \uc0dd\uc131\n    code_verifier = generate_code_verifier()\n\n    # 2. Code Challenge \uc0dd\uc131\n    code_challenge = generate_code_challenge(code_verifier)\n\n    # 3. Code Verifier\ub97c \uc138\uc158\uc5d0 \uc800\uc7a5\n    request.session['code_verifier'] = code_verifier\n\n    # 4. State (CSRF \ubc29\uc9c0)\n    state = secrets.token_urlsafe(32)\n    request.session['oauth_state'] = state\n\n    # 5. Authorization URL \uc0dd\uc131\n    params = {\n        'client_id': CLIENT_ID,\n        'redirect_uri': REDIRECT_URI,\n        'response_type': 'code',\n        'scope': 'openid email profile',\n        'state': state,\n        'code_challenge': code_challenge,        # \u2705 PKCE\n        'code_challenge_method': 'S256'          # \u2705 SHA-256\n    }\n\n    from urllib.parse import urlencode\n    auth_url = f\"{AUTHORIZATION_ENDPOINT}?{urlencode(params)}\"\n\n    return RedirectResponse(auth_url)\n\n@app.get('/callback')\nasync def callback(request: Request):\n    \"\"\"OAuth \ucf5c\ubc31 (PKCE \uac80\uc99d)\"\"\"\n\n    # 1. State \uac80\uc99d (CSRF)\n    state = request.query_params.get('state')\n    saved_state = request.session.pop('oauth_state', None)\n\n    if not state or state != saved_state:\n        raise HTTPException(status_code=400, detail=\"Invalid state\")\n\n    # 2. Authorization Code \ubc1b\uae30\n    code = request.query_params.get('code')\n    if not code:\n        raise HTTPException(status_code=400, detail=\"No code\")\n\n    # 3. Code Verifier \uac00\uc838\uc624\uae30\n    code_verifier = request.session.pop('code_verifier', None)\n    if not code_verifier:\n        raise HTTPException(status_code=400, detail=\"Missing code verifier\")\n\n    # 4. Token \uad50\ud658 (Code Verifier \ud3ec\ud568)\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            TOKEN_ENDPOINT,\n            data={\n                'grant_type': 'authorization_code',\n                'code': code,\n                'redirect_uri': REDIRECT_URI,\n                'client_id': CLIENT_ID,\n                # 'client_secret': CLIENT_SECRET,  # Public Client\ub294 \uc0dd\ub7b5\n                'code_verifier': code_verifier  # \u2705 PKCE Verifier\n            }\n        )\n\n        if response.status_code != 200:\n            raise HTTPException(\n                status_code=response.status_code,\n                detail=f\"Token exchange failed: {response.text}\"\n            )\n\n        token_data = response.json()\n\n    # 5. \ud1a0\ud070 \uc800\uc7a5\n    request.session['access_token'] = token_data['access_token']\n    request.session['id_token'] = token_data.get('id_token')\n\n    return {\n        \"message\": \"Login successful\",\n        \"access_token\": token_data['access_token'][:20] + \"...\"\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"authorization-server\uc758-\uac80\uc99d-\ub85c\uc9c1",children:"Authorization Server\uc758 \uac80\uc99d \ub85c\uc9c1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Authorization Server\uac00 \ud558\ub294 \uc77c\n\n# 1. Authorization Request \ucc98\ub9ac\n@app.get('/authorize')\nasync def authorize(\n    client_id: str,\n    redirect_uri: str,\n    code_challenge: str,\n    code_challenge_method: str,\n    state: str,\n    scope: str\n):\n    \"\"\"Authorization Endpoint\"\"\"\n\n    # Code Challenge \uc800\uc7a5\n    authorization_code = generate_auth_code()\n\n    save_to_db({\n        'code': authorization_code,\n        'code_challenge': code_challenge,  # \u2705 \uc800\uc7a5\n        'code_challenge_method': code_challenge_method,\n        'client_id': client_id,\n        'redirect_uri': redirect_uri\n    })\n\n    # Redirect\n    return RedirectResponse(f\"{redirect_uri}?code={authorization_code}&state={state}\")\n\n# 2. Token Request \ucc98\ub9ac\n@app.post('/token')\nasync def token(\n    code: str,\n    code_verifier: str,  # \u2705 Verifier \ubc1b\uc74c\n    client_id: str,\n    redirect_uri: str\n):\n    \"\"\"Token Endpoint\"\"\"\n\n    # Code \uc870\ud68c\n    auth_data = get_from_db(code)\n\n    # PKCE \uac80\uc99d\n    if auth_data['code_challenge']:\n        # Code Challenge \uc7ac\uc0dd\uc131\n        if auth_data['code_challenge_method'] == 'S256':\n            computed_challenge = hashlib.sha256(\n                code_verifier.encode()\n            ).digest()\n            computed_challenge = base64.urlsafe_b64encode(\n                computed_challenge\n            ).decode().rstrip('=')\n        else:  # plain\n            computed_challenge = code_verifier\n\n        # \ube44\uad50\n        if computed_challenge != auth_data['code_challenge']:\n            raise HTTPException(status_code=400, detail=\"Invalid code verifier\")\n\n    # Token \ubc1c\uae09\n    access_token = generate_access_token(auth_data)\n\n    return {\n        'access_token': access_token,\n        'token_type': 'bearer',\n        'expires_in': 3600\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-authlib\uc640-\ud568\uaed8-\uc0ac\uc6a9",children:"\ud83c\udfa8 Authlib\uc640 \ud568\uaed8 \uc0ac\uc6a9"}),"\n",(0,i.jsx)(n.h3,{id:"authlib-pkce-\uc790\ub3d9-\ucc98\ub9ac",children:"Authlib PKCE \uc790\ub3d9 \ucc98\ub9ac"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from authlib.integrations.starlette_client import OAuth\nfrom starlette.config import Config\n\nconfig = Config('.env')\noauth = OAuth(config)\n\n# OAuth \ub4f1\ub85d\noauth.register(\n    name='google',\n    client_id=config('GOOGLE_CLIENT_ID'),\n    client_secret=config('GOOGLE_CLIENT_SECRET'),\n    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n    client_kwargs={\n        'scope': 'openid email profile',\n        'code_challenge_method': 'S256'  # \u2705 PKCE \ud65c\uc131\ud654\n    }\n)\n\n@app.get('/login')\nasync def login(request: Request):\n    \"\"\"Authlib\uac00 PKCE \uc790\ub3d9 \ucc98\ub9ac\"\"\"\n    redirect_uri = request.url_for('auth')\n    return await oauth.google.authorize_redirect(request, redirect_uri)\n\n@app.get('/auth')\nasync def auth(request: Request):\n    \"\"\"Authlib\uac00 code_verifier \uc790\ub3d9 \uc804\uc1a1\"\"\"\n    token = await oauth.google.authorize_access_token(request)\n    user = token.get('userinfo')\n    return user\n\n# Authlib\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c:\n# 1. Code Verifier \uc0dd\uc131 \ubc0f \uc138\uc158 \uc800\uc7a5\n# 2. Code Challenge \uacc4\uc0b0 \ubc0f Authorization Request\uc5d0 \ud3ec\ud568\n# 3. Token Request \uc2dc Code Verifier \uc790\ub3d9 \uc804\uc1a1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\uc218\ub3d9-pkce-authlib-\uc5c6\uc774",children:"\uc218\ub3d9 PKCE (Authlib \uc5c6\uc774)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from urllib.parse import urlencode\n\n@app.get('/login/manual')\nasync def login_manual(request: Request):\n    \"\"\"\uc218\ub3d9 PKCE \uad6c\ud604\"\"\"\n\n    # PKCE\n    code_verifier = secrets.token_urlsafe(32)\n    request.session['code_verifier'] = code_verifier\n\n    digest = hashlib.sha256(code_verifier.encode()).digest()\n    code_challenge = base64.urlsafe_b64encode(digest).decode().rstrip('=')\n\n    # State\n    state = secrets.token_urlsafe(32)\n    request.session['state'] = state\n\n    # Authorization URL\n    params = {\n        'client_id': CLIENT_ID,\n        'redirect_uri': REDIRECT_URI,\n        'response_type': 'code',\n        'scope': 'openid email',\n        'state': state,\n        'code_challenge': code_challenge,\n        'code_challenge_method': 'S256'\n    }\n\n    auth_url = f\"{AUTHORIZATION_ENDPOINT}?{urlencode(params)}\"\n\n    return RedirectResponse(auth_url)\n\n@app.get('/callback/manual')\nasync def callback_manual(request: Request):\n    \"\"\"\uc218\ub3d9 Token \uad50\ud658\"\"\"\n\n    # State \uac80\uc99d\n    state = request.query_params.get('state')\n    if state != request.session.pop('state', None):\n        raise HTTPException(status_code=400, detail=\"Invalid state\")\n\n    # Code \ubc1b\uae30\n    code = request.query_params.get('code')\n\n    # Verifier \uac00\uc838\uc624\uae30\n    code_verifier = request.session.pop('code_verifier')\n\n    # Token \uad50\ud658\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            TOKEN_ENDPOINT,\n            data={\n                'grant_type': 'authorization_code',\n                'code': code,\n                'redirect_uri': REDIRECT_URI,\n                'client_id': CLIENT_ID,\n                'code_verifier': code_verifier\n            },\n            headers={'Content-Type': 'application/x-www-form-urlencoded'}\n        )\n\n        return response.json()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ud074\ub77c\uc774\uc5b8\ud2b8\ubcc4-pkce-\uad6c\ud604",children:"\ud83d\udcf1 \ud074\ub77c\uc774\uc5b8\ud2b8\ubcc4 PKCE \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"spa-react",children:"SPA (React)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// React\uc5d0\uc11c PKCE\nimport { useEffect, useState } from 'react';\n\nfunction useOAuthPKCE() {\n    const [codeVerifier, setCodeVerifier] = useState(null);\n\n    // Code Verifier \uc0dd\uc131\n    function generateCodeVerifier() {\n        const array = new Uint8Array(32);\n        crypto.getRandomValues(array);\n        return base64URLEncode(array);\n    }\n\n    // Code Challenge \uc0dd\uc131\n    async function generateCodeChallenge(verifier) {\n        const encoder = new TextEncoder();\n        const data = encoder.encode(verifier);\n        const digest = await crypto.subtle.digest('SHA-256', data);\n        return base64URLEncode(new Uint8Array(digest));\n    }\n\n    // Base64 URL \uc778\ucf54\ub529\n    function base64URLEncode(buffer) {\n        return btoa(String.fromCharCode(...buffer))\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '');\n    }\n\n    // \ub85c\uadf8\uc778\n    async function login() {\n        // 1. Code Verifier \uc0dd\uc131 \ubc0f \uc800\uc7a5\n        const verifier = generateCodeVerifier();\n        sessionStorage.setItem('code_verifier', verifier);\n        setCodeVerifier(verifier);\n\n        // 2. Code Challenge \uc0dd\uc131\n        const challenge = await generateCodeChallenge(verifier);\n\n        // 3. State \uc0dd\uc131\n        const state = generateCodeVerifier();\n        sessionStorage.setItem('oauth_state', state);\n\n        // 4. Authorization URL\n        const params = new URLSearchParams({\n            client_id: 'your-client-id',\n            redirect_uri: window.location.origin + '/callback',\n            response_type: 'code',\n            scope: 'openid email profile',\n            state: state,\n            code_challenge: challenge,\n            code_challenge_method: 'S256'\n        });\n\n        window.location.href = `https://auth.server.com/authorize?${params}`;\n    }\n\n    // \ucf5c\ubc31 \ucc98\ub9ac\n    async function handleCallback() {\n        const params = new URLSearchParams(window.location.search);\n        const code = params.get('code');\n        const state = params.get('state');\n\n        // State \uac80\uc99d\n        const savedState = sessionStorage.getItem('oauth_state');\n        if (state !== savedState) {\n            throw new Error('Invalid state');\n        }\n\n        // Code Verifier \uac00\uc838\uc624\uae30\n        const verifier = sessionStorage.getItem('code_verifier');\n\n        // Token \uad50\ud658\n        const response = await fetch('https://auth.server.com/token', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n            body: new URLSearchParams({\n                grant_type: 'authorization_code',\n                code: code,\n                redirect_uri: window.location.origin + '/callback',\n                client_id: 'your-client-id',\n                code_verifier: verifier\n            })\n        });\n\n        const tokens = await response.json();\n\n        // \uc815\ub9ac\n        sessionStorage.removeItem('code_verifier');\n        sessionStorage.removeItem('oauth_state');\n\n        return tokens;\n    }\n\n    return { login, handleCallback };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\ubaa8\ubc14\uc77c-react-native",children:"\ubaa8\ubc14\uc77c (React Native)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// React Native\uc5d0\uc11c PKCE\nimport * as Crypto from 'expo-crypto';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as AuthSession from 'expo-auth-session';\n\nasync function loginWithPKCE() {\n    // 1. Code Verifier \uc0dd\uc131\n    const codeVerifier = base64URLEncode(\n        await Crypto.getRandomBytesAsync(32)\n    );\n\n    // 2. Code Challenge \uc0dd\uc131\n    const digest = await Crypto.digestStringAsync(\n        Crypto.CryptoDigestAlgorithm.SHA256,\n        codeVerifier\n    );\n    const codeChallenge = base64URLEncode(digest);\n\n    // 3. Authorization Request\n    const result = await AuthSession.startAsync({\n        authUrl: `https://auth.server.com/authorize?${new URLSearchParams({\n            client_id: 'your-client-id',\n            redirect_uri: AuthSession.makeRedirectUri(),\n            response_type: 'code',\n            scope: 'openid email profile',\n            code_challenge: codeChallenge,\n            code_challenge_method: 'S256'\n        })}`\n    });\n\n    if (result.type === 'success') {\n        // 4. Token \uad50\ud658\n        const tokenResponse = await fetch('https://auth.server.com/token', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n            body: new URLSearchParams({\n                grant_type: 'authorization_code',\n                code: result.params.code,\n                redirect_uri: AuthSession.makeRedirectUri(),\n                client_id: 'your-client-id',\n                code_verifier: codeVerifier\n            })\n        });\n\n        return await tokenResponse.json();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-\ubcf4\uc548-best-practices",children:"\ud83d\udee1\ufe0f \ubcf4\uc548 Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-\ud56d\uc0c1-s256-\uc0ac\uc6a9",children:"1. \ud56d\uc0c1 S256 \uc0ac\uc6a9"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# \u2705 S256 (SHA-256)\ncode_challenge_method = "S256"\n\n# \u274c plain (\ud3c9\ubb38)\ncode_challenge_method = "plain"  # \uc808\ub300 \uc0ac\uc6a9 \uae08\uc9c0!\n\n# plain\uc740 code_challenge = code_verifier\n# \u2192 \uc911\uac04\uc5d0\uc11c \uac00\ub85c\ucc44\uba74 verifier \ub178\ucd9c!\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-code-verifier-\uc548\uc804\ud558\uac8c-\ubcf4\uad00",children:"2. Code Verifier \uc548\uc804\ud558\uac8c \ubcf4\uad00"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# \u2705 \uc548\uc804\ud55c \ubcf4\uad00\n# - \uba54\ubaa8\ub9ac (\ubcc0\uc218)\n# - \uc138\uc158 (HttpOnly Cookie)\n# - SessionStorage (\ube0c\ub77c\uc6b0\uc800)\n\nrequest.session['code_verifier'] = code_verifier\n\n# \u274c \uc704\ud5d8\ud55c \ubcf4\uad00\n# - URL \ud30c\ub77c\ubbf8\ud130\n# - LocalStorage (XSS \uc704\ud5d8)\n# - \ub85c\uadf8 \ud30c\uc77c\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-code-verifier-\ucda9\ubd84\ud55c-\uc5d4\ud2b8\ub85c\ud53c",children:"3. Code Verifier \ucda9\ubd84\ud55c \uc5d4\ud2b8\ub85c\ud53c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# \u2705 \ucda9\ubd84\ud55c \uae38\uc774 (\ucd5c\uc18c 43\uc790)\ncode_verifier = secrets.token_urlsafe(32)  # 43\uc790\n\n# \u274c \uc9e7\uc740 \uae38\uc774\ncode_verifier = "short"  # \ube0c\ub8e8\ud2b8 \ud3ec\uc2a4 \uacf5\uaca9 \uac00\ub2a5\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-oauth-21-\uc900\uc218",children:"4. OAuth 2.1 \uc900\uc218"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# OAuth 2.1\uc5d0\uc11c\ub294 \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 PKCE \ud544\uc218!\n\noauth_2_1_requirements = {\n    "Public Clients": "PKCE \ud544\uc218",\n    "Confidential Clients": "PKCE \uad8c\uc7a5",\n    "Implicit Flow": "\uae08\uc9c0 (Code + PKCE \uc0ac\uc6a9)",\n    "Password Flow": "\uae08\uc9c0"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../basic/flows",children:"Authorization Flows"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./security",children:"\ubcf4\uc548 Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../intermediate/fastapi-basics",children:"FastAPI OAuth \uae30\ucd08"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,i.jsx)(n.p,{children:"PKCE\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \uc804\uccb4 \ubcf4\uc548 Best Practices\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.a,{href:"./security",children:"\ubcf4\uc548 Best Practices"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": OAuth 2.1\uc5d0\uc11c\ub294 \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 PKCE\uac00 \ud544\uc218\uc785\ub2c8\ub2e4. \uc9c0\uae08\ubd80\ud130 PKCE\ub97c \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\uc138\uc694!"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);