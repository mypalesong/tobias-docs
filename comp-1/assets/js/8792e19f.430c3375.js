"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2190],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},9515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>_,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"oauth/advanced/token-management","title":"\ud1a0\ud070 \uad00\ub9ac","description":"OAuth \ud1a0\ud070\uc758 \uc804\uccb4 \ub77c\uc774\ud504\uc0ac\uc774\ud074\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/oauth/advanced/token-management.md","sourceDirName":"oauth/advanced","slug":"/oauth/advanced/token-management","permalink":"/tobias-docs/comp-1/docs/oauth/advanced/token-management","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oauth/advanced/token-management.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"oauthSidebar","previous":{"title":"\ubcf4\uc548 Best Practices","permalink":"/tobias-docs/comp-1/docs/oauth/advanced/security"},"next":{"title":"Multi-Provider \uc9c0\uc6d0","permalink":"/tobias-docs/comp-1/docs/oauth/advanced/multi-provider"}}');var s=t(4848),o=t(8453);const i={sidebar_position:3},a="\ud1a0\ud070 \uad00\ub9ac",l={},d=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udd04 \ud1a0\ud070 \ub77c\uc774\ud504\uc0ac\uc774\ud074",id:"-\ud1a0\ud070-\ub77c\uc774\ud504\uc0ac\uc774\ud074",level:2},{value:"1. \ud1a0\ud070 \ubc1c\uae09",id:"1-\ud1a0\ud070-\ubc1c\uae09",level:3},{value:"2. \ud1a0\ud070 \uac80\uc99d",id:"2-\ud1a0\ud070-\uac80\uc99d",level:3},{value:"3. \ud1a0\ud070 \uac31\uc2e0",id:"3-\ud1a0\ud070-\uac31\uc2e0",level:3},{value:"4. \ud1a0\ud070 \ud3d0\uae30",id:"4-\ud1a0\ud070-\ud3d0\uae30",level:3},{value:"\ud83d\udcbe \ud1a0\ud070 \uc800\uc7a5 \uc804\ub7b5",id:"-\ud1a0\ud070-\uc800\uc7a5-\uc804\ub7b5",level:2},{value:"1. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5",id:"1-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc800\uc7a5",level:3},{value:"2. Redis \uce90\uc2dc",id:"2-redis-\uce90\uc2dc",level:3},{value:"3. HttpOnly Cookie (\ube0c\ub77c\uc6b0\uc800)",id:"3-httponly-cookie-\ube0c\ub77c\uc6b0\uc800",level:3},{value:"\ud83d\udd04 Refresh Token Rotation",id:"-refresh-token-rotation",level:2},{value:"\uac1c\ub150",id:"\uac1c\ub150",level:3},{value:"\u23f0 \uc790\ub3d9 \ud1a0\ud070 \uac31\uc2e0",id:"-\uc790\ub3d9-\ud1a0\ud070-\uac31\uc2e0",level:2},{value:"1. \ubc31\uc5d4\ub4dc \ubbf8\ub4e4\uc6e8\uc5b4",id:"1-\ubc31\uc5d4\ub4dc-\ubbf8\ub4e4\uc6e8\uc5b4",level:3},{value:"2. \ud504\ub860\ud2b8\uc5d4\ub4dc (React)",id:"2-\ud504\ub860\ud2b8\uc5d4\ub4dc-react",level:3},{value:"3. Axios Interceptor",id:"3-axios-interceptor",level:3},{value:"\ud83d\udcca \ud1a0\ud070 \ubaa8\ub2c8\ud130\ub9c1",id:"-\ud1a0\ud070-\ubaa8\ub2c8\ud130\ub9c1",level:2},{value:"1. \uc774\ubca4\ud2b8 \ub85c\uae45",id:"1-\uc774\ubca4\ud2b8-\ub85c\uae45",level:3},{value:"2. \uba54\ud2b8\ub9ad \uc218\uc9d1",id:"2-\uba54\ud2b8\ub9ad-\uc218\uc9d1",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\ud1a0\ud070-\uad00\ub9ac",children:"\ud1a0\ud070 \uad00\ub9ac"})}),"\n",(0,s.jsx)(n.p,{children:"OAuth \ud1a0\ud070\uc758 \uc804\uccb4 \ub77c\uc774\ud504\uc0ac\uc774\ud074\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,s.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 \ud1a0\ud070 \ub77c\uc774\ud504\uc0ac\uc774\ud074 \uc774\ud574"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Refresh Token \uc804\ub7b5"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \ud1a0\ud070 \uc800\uc7a5 \ubc0f \ubcf4\ud638"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \uc790\ub3d9 \uac31\uc2e0 \uad6c\ud604"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 \ud1a0\ud070 \ubaa8\ub2c8\ud130\ub9c1"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ud1a0\ud070-\ub77c\uc774\ud504\uc0ac\uc774\ud074",children:"\ud83d\udd04 \ud1a0\ud070 \ub77c\uc774\ud504\uc0ac\uc774\ud074"}),"\n",(0,s.jsx)(n.h3,{id:"1-\ud1a0\ud070-\ubc1c\uae09",children:"1. \ud1a0\ud070 \ubc1c\uae09"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from datetime import datetime, timedelta\nfrom jose import jwt\nimport secrets\n\nclass TokenManager:\n    """\ud1a0\ud070 \uad00\ub9ac\uc790"""\n\n    def __init__(self, secret_key: str):\n        self.secret_key = secret_key\n        self.algorithm = "HS256"\n\n    def create_token_pair(self, user_id: str) -> dict:\n        """Access Token + Refresh Token \uc30d \uc0dd\uc131"""\n\n        now = datetime.utcnow()\n\n        # Access Token (\uc9e7\uc740 \uc218\uba85)\n        access_token_expires = now + timedelta(minutes=15)\n        access_token_payload = {\n            "sub": user_id,\n            "type": "access",\n            "exp": access_token_expires,\n            "iat": now,\n            "jti": secrets.token_urlsafe(16)  # \ud1a0\ud070 \uace0\uc720 ID\n        }\n        access_token = jwt.encode(\n            access_token_payload,\n            self.secret_key,\n            algorithm=self.algorithm\n        )\n\n        # Refresh Token (\uae34 \uc218\uba85)\n        refresh_token_expires = now + timedelta(days=30)\n        refresh_token_payload = {\n            "sub": user_id,\n            "type": "refresh",\n            "exp": refresh_token_expires,\n            "iat": now,\n            "jti": secrets.token_urlsafe(16)\n        }\n        refresh_token = jwt.encode(\n            refresh_token_payload,\n            self.secret_key,\n            algorithm=self.algorithm\n        )\n\n        return {\n            "access_token": access_token,\n            "refresh_token": refresh_token,\n            "token_type": "bearer",\n            "expires_in": 900,  # 15\ubd84 (\ucd08)\n            "refresh_expires_in": 2592000  # 30\uc77c (\ucd08)\n        }\n\n# \uc0ac\uc6a9\ntoken_manager = TokenManager(secret_key="your-secret-key")\ntokens = token_manager.create_token_pair(user_id="user123")\n\nprint(tokens)\n# {\n#   "access_token": "eyJ...",\n#   "refresh_token": "eyJ...",\n#   "token_type": "bearer",\n#   "expires_in": 900\n# }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-\ud1a0\ud070-\uac80\uc99d",children:"2. \ud1a0\ud070 \uac80\uc99d"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from jose import jwt, JWTError\nfrom fastapi import HTTPException, status\n\nclass TokenManager:\n    # ...\n\n    def verify_token(self, token: str, token_type: str = "access") -> dict:\n        """\ud1a0\ud070 \uac80\uc99d"""\n\n        try:\n            # JWT \ub514\ucf54\ub529 \ubc0f \uac80\uc99d\n            payload = jwt.decode(\n                token,\n                self.secret_key,\n                algorithms=[self.algorithm]\n            )\n\n            # \ud1a0\ud070 \ud0c0\uc785 \ud655\uc778\n            if payload.get("type") != token_type:\n                raise HTTPException(\n                    status_code=status.HTTP_401_UNAUTHORIZED,\n                    detail=f"Invalid token type. Expected {token_type}"\n                )\n\n            # \uc0ac\uc6a9\uc790 ID \ud655\uc778\n            user_id = payload.get("sub")\n            if not user_id:\n                raise HTTPException(\n                    status_code=status.HTTP_401_UNAUTHORIZED,\n                    detail="Invalid token: no subject"\n                )\n\n            return payload\n\n        except JWTError as e:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=f"Invalid token: {str(e)}"\n            )\n\n    def is_token_expired(self, token: str) -> bool:\n        """\ud1a0\ud070 \ub9cc\ub8cc \ud655\uc778 (\uac80\uc99d \uc5c6\uc774)"""\n        try:\n            payload = jwt.decode(\n                token,\n                options={"verify_signature": False, "verify_exp": False}\n            )\n            exp = payload.get("exp")\n            return datetime.fromtimestamp(exp) < datetime.utcnow()\n        except:\n            return True\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-\ud1a0\ud070-\uac31\uc2e0",children:"3. \ud1a0\ud070 \uac31\uc2e0"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class TokenManager:\n    # ...\n\n    def refresh_access_token(self, refresh_token: str) -> dict:\n        """Refresh Token\uc73c\ub85c \uc0c8 Access Token \ubc1c\uae09"""\n\n        # 1. Refresh Token \uac80\uc99d\n        payload = self.verify_token(refresh_token, token_type="refresh")\n\n        user_id = payload["sub"]\n\n        # 2. \ube14\ub799\ub9ac\uc2a4\ud2b8 \ud655\uc778 (\ud3d0\uae30\ub41c \ud1a0\ud070)\n        if self.is_token_blacklisted(refresh_token):\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail="Refresh token has been revoked"\n            )\n\n        # 3. \uc0c8 Access Token \uc0dd\uc131\n        now = datetime.utcnow()\n        access_token_expires = now + timedelta(minutes=15)\n\n        access_token_payload = {\n            "sub": user_id,\n            "type": "access",\n            "exp": access_token_expires,\n            "iat": now,\n            "jti": secrets.token_urlsafe(16)\n        }\n\n        access_token = jwt.encode(\n            access_token_payload,\n            self.secret_key,\n            algorithm=self.algorithm\n        )\n\n        return {\n            "access_token": access_token,\n            "token_type": "bearer",\n            "expires_in": 900\n        }\n\n    def is_token_blacklisted(self, token: str) -> bool:\n        """\ud1a0\ud070 \ube14\ub799\ub9ac\uc2a4\ud2b8 \ud655\uc778"""\n        # Redis \ub610\ub294 DB\uc5d0\uc11c \ud655\uc778\n        # \uad6c\ud604 \uc608\uc81c\ub294 \uc544\ub798 \ucc38\uc870\n        pass\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-\ud1a0\ud070-\ud3d0\uae30",children:"4. \ud1a0\ud070 \ud3d0\uae30"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import redis\n\nredis_client = redis.Redis(host=\'localhost\', port=6379, decode_responses=True)\n\nclass TokenManager:\n    # ...\n\n    def revoke_token(self, token: str):\n        """\ud1a0\ud070 \ud3d0\uae30 (\ube14\ub799\ub9ac\uc2a4\ud2b8 \ucd94\uac00)"""\n\n        # \ud1a0\ud070 \ub514\ucf54\ub529 (\uac80\uc99d \uc5c6\uc774)\n        payload = jwt.decode(\n            token,\n            options={"verify_signature": False}\n        )\n\n        # \ub0a8\uc740 \uc2dc\uac04 \uacc4\uc0b0\n        exp = payload.get("exp")\n        now = datetime.utcnow().timestamp()\n        ttl = int(exp - now)\n\n        if ttl > 0:\n            # Redis\uc5d0 \ube14\ub799\ub9ac\uc2a4\ud2b8 \uc800\uc7a5 (TTL \uc124\uc815)\n            jti = payload.get("jti")\n            redis_client.setex(\n                f"blacklist:token:{jti}",\n                ttl,\n                "1"\n            )\n\n    def is_token_blacklisted(self, token: str) -> bool:\n        """\ube14\ub799\ub9ac\uc2a4\ud2b8 \ud655\uc778"""\n\n        try:\n            payload = jwt.decode(\n                token,\n                options={"verify_signature": False}\n            )\n            jti = payload.get("jti")\n            return redis_client.exists(f"blacklist:token:{jti}") > 0\n        except:\n            return True\n\n    def revoke_all_user_tokens(self, user_id: str):\n        """\uc0ac\uc6a9\uc790\uc758 \ubaa8\ub4e0 \ud1a0\ud070 \ud3d0\uae30"""\n\n        # DB\uc5d0\uc11c \uc0ac\uc6a9\uc790\uc758 \ubaa8\ub4e0 refresh token \uc870\ud68c\n        refresh_tokens = db.query(RefreshToken).filter_by(user_id=user_id).all()\n\n        # \ubaa8\ub450 \ud3d0\uae30\n        for rt in refresh_tokens:\n            self.revoke_token(rt.token)\n\n        # DB\uc5d0\uc11c \uc0ad\uc81c\n        db.query(RefreshToken).filter_by(user_id=user_id).delete()\n        db.commit()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-\ud1a0\ud070-\uc800\uc7a5-\uc804\ub7b5",children:"\ud83d\udcbe \ud1a0\ud070 \uc800\uc7a5 \uc804\ub7b5"}),"\n",(0,s.jsx)(n.h3,{id:"1-\ub370\uc774\ud130\ubca0\uc774\uc2a4-\uc800\uc7a5",children:"1. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc800\uc7a5"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, DateTime, Boolean\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom datetime import datetime\nfrom passlib.context import CryptContext\n\nBase = declarative_base()\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\nclass RefreshToken(Base):\n    """Refresh Token \ubaa8\ub378"""\n\n    __tablename__ = \'refresh_tokens\'\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(String(255), nullable=False, index=True)\n    token_hash = Column(String(255), nullable=False, unique=True)  # \ud574\uc2dc \uc800\uc7a5\n    jti = Column(String(255), nullable=False, unique=True)  # JWT ID\n    expires_at = Column(DateTime, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    revoked = Column(Boolean, default=False)\n    replaced_by_jti = Column(String(255), nullable=True)  # Rotation\uc6a9\n\nclass TokenStore:\n    """\ud1a0\ud070 \uc800\uc7a5\uc18c"""\n\n    def __init__(self, db_session):\n        self.db = db_session\n\n    def store_refresh_token(self, user_id: str, refresh_token: str, expires_at: datetime):\n        """Refresh Token \uc800\uc7a5 (\ud574\uc2dc)"""\n\n        # JWT \ub514\ucf54\ub529 (JTI \ucd94\ucd9c)\n        payload = jwt.decode(refresh_token, options={"verify_signature": False})\n        jti = payload.get("jti")\n\n        # \ud574\uc2dc \uc800\uc7a5\n        token_hash = pwd_context.hash(refresh_token)\n\n        rt = RefreshToken(\n            user_id=user_id,\n            token_hash=token_hash,\n            jti=jti,\n            expires_at=expires_at\n        )\n\n        self.db.add(rt)\n        self.db.commit()\n\n    def verify_refresh_token(self, refresh_token: str) -> RefreshToken:\n        """Refresh Token \uac80\uc99d"""\n\n        # JTI \ucd94\ucd9c\n        payload = jwt.decode(refresh_token, options={"verify_signature": False})\n        jti = payload.get("jti")\n\n        # DB\uc5d0\uc11c \uc870\ud68c\n        rt = self.db.query(RefreshToken).filter_by(jti=jti).first()\n\n        if not rt:\n            raise ValueError("Token not found")\n\n        if rt.revoked:\n            raise ValueError("Token has been revoked")\n\n        if rt.expires_at < datetime.utcnow():\n            raise ValueError("Token expired")\n\n        # \ud574\uc2dc \uac80\uc99d\n        if not pwd_context.verify(refresh_token, rt.token_hash):\n            raise ValueError("Invalid token")\n\n        return rt\n\n    def revoke_refresh_token(self, jti: str):\n        """Refresh Token \ud3d0\uae30"""\n        rt = self.db.query(RefreshToken).filter_by(jti=jti).first()\n        if rt:\n            rt.revoked = True\n            self.db.commit()\n\n    def clean_expired_tokens(self):\n        """\ub9cc\ub8cc\ub41c \ud1a0\ud070 \uc815\ub9ac"""\n        self.db.query(RefreshToken).filter(\n            RefreshToken.expires_at < datetime.utcnow()\n        ).delete()\n        self.db.commit()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-redis-\uce90\uc2dc",children:"2. Redis \uce90\uc2dc"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import redis\nimport json\n\nredis_client = redis.Redis(host=\'localhost\', port=6379, decode_responses=True)\n\nclass TokenCache:\n    """Redis \ud1a0\ud070 \uce90\uc2dc"""\n\n    def __init__(self, redis_client):\n        self.redis = redis_client\n\n    def cache_access_token(self, user_id: str, access_token: str, expires_in: int):\n        """Access Token \uce90\uc2f1"""\n\n        # \ud1a0\ud070 \uc815\ubcf4 \uc800\uc7a5\n        key = f"access_token:{user_id}"\n        value = json.dumps({\n            "token": access_token,\n            "created_at": datetime.utcnow().isoformat()\n        })\n\n        # TTL \uc124\uc815\n        self.redis.setex(key, expires_in, value)\n\n    def get_cached_access_token(self, user_id: str) -> str | None:\n        """\uce90\uc2dc\ub41c Access Token \uac00\uc838\uc624\uae30"""\n\n        key = f"access_token:{user_id}"\n        value = self.redis.get(key)\n\n        if value:\n            data = json.loads(value)\n            return data["token"]\n\n        return None\n\n    def invalidate_user_tokens(self, user_id: str):\n        """\uc0ac\uc6a9\uc790 \ud1a0\ud070 \uce90\uc2dc \ubb34\ud6a8\ud654"""\n\n        patterns = [\n            f"access_token:{user_id}",\n            f"refresh_token:{user_id}*"\n        ]\n\n        for pattern in patterns:\n            keys = self.redis.keys(pattern)\n            if keys:\n                self.redis.delete(*keys)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-httponly-cookie-\ube0c\ub77c\uc6b0\uc800",children:"3. HttpOnly Cookie (\ube0c\ub77c\uc6b0\uc800)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import Response, Request\n\ndef set_tokens_in_cookies(response: Response, tokens: dict):\n    """\ud1a0\ud070\uc744 \uc548\uc804\ud55c \ucfe0\ud0a4\uc5d0 \uc800\uc7a5"""\n\n    # Access Token\n    response.set_cookie(\n        key="access_token",\n        value=tokens["access_token"],\n        httponly=True,    # JavaScript \uc811\uadfc \ubd88\uac00\n        secure=True,      # HTTPS\ub9cc\n        samesite=\'lax\',   # CSRF \ubc29\uc9c0\n        max_age=900       # 15\ubd84\n    )\n\n    # Refresh Token\n    response.set_cookie(\n        key="refresh_token",\n        value=tokens["refresh_token"],\n        httponly=True,\n        secure=True,\n        samesite=\'lax\',\n        max_age=2592000   # 30\uc77c\n    )\n\ndef get_tokens_from_cookies(request: Request) -> dict:\n    """\ucfe0\ud0a4\uc5d0\uc11c \ud1a0\ud070 \uac00\uc838\uc624\uae30"""\n\n    access_token = request.cookies.get("access_token")\n    refresh_token = request.cookies.get("refresh_token")\n\n    return {\n        "access_token": access_token,\n        "refresh_token": refresh_token\n    }\n\ndef clear_token_cookies(response: Response):\n    """\ud1a0\ud070 \ucfe0\ud0a4 \uc0ad\uc81c"""\n\n    response.delete_cookie("access_token")\n    response.delete_cookie("refresh_token")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-refresh-token-rotation",children:"\ud83d\udd04 Refresh Token Rotation"}),"\n",(0,s.jsx)(n.h3,{id:"\uac1c\ub150",children:"\uac1c\ub150"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Refresh Token Rotation"}),": \ub9e4\ubc88 \uc0c8\ub85c\uc6b4 Refresh Token \ubc1c\uae09\ud558\uc5ec \uc7ac\uc0ac\uc6a9 \ubc29\uc9c0"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class TokenManager:\n    # ...\n\n    def refresh_with_rotation(\n        self,\n        refresh_token: str,\n        token_store: TokenStore\n    ) -> dict:\n        """Refresh Token Rotation"""\n\n        # 1. \ud604\uc7ac Refresh Token \uac80\uc99d\n        rt_record = token_store.verify_refresh_token(refresh_token)\n\n        user_id = rt_record.user_id\n\n        # 2. \uc0c8 \ud1a0\ud070 \uc30d \uc0dd\uc131\n        new_tokens = self.create_token_pair(user_id)\n\n        # 3. \uc0c8 Refresh Token \uc800\uc7a5\n        new_rt_payload = jwt.decode(\n            new_tokens["refresh_token"],\n            options={"verify_signature": False}\n        )\n        new_jti = new_rt_payload.get("jti")\n\n        token_store.store_refresh_token(\n            user_id=user_id,\n            refresh_token=new_tokens["refresh_token"],\n            expires_at=datetime.fromtimestamp(new_rt_payload["exp"])\n        )\n\n        # 4. \uc774\uc804 Refresh Token \ud3d0\uae30\n        # - \uc989\uc2dc \ud3d0\uae30 OR\n        # - Grace Period (\uc7ac\uc0ac\uc6a9 \ud0d0\uc9c0\uc6a9)\n        old_jti = rt_record.jti\n\n        # Grace Period \ubc29\uc2dd\n        self.db.query(RefreshToken).filter_by(jti=old_jti).update({\n            "replaced_by_jti": new_jti\n        })\n\n        return new_tokens\n\n    def detect_token_reuse(self, refresh_token: str, token_store: TokenStore):\n        """Refresh Token \uc7ac\uc0ac\uc6a9 \ud0d0\uc9c0"""\n\n        payload = jwt.decode(refresh_token, options={"verify_signature": False})\n        jti = payload.get("jti")\n\n        # DB\uc5d0\uc11c \uc870\ud68c\n        rt = token_store.db.query(RefreshToken).filter_by(jti=jti).first()\n\n        if rt and rt.replaced_by_jti:\n            # \uc774\ubbf8 \uad50\uccb4\ub41c \ud1a0\ud070 \u2192 \uc7ac\uc0ac\uc6a9 \ud0d0\uc9c0!\n            # \ubcf4\uc548 \uc870\uce58: \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc758 \ubaa8\ub4e0 \ud1a0\ud070 \ud3d0\uae30\n            print(f"\u26a0\ufe0f Token reuse detected for user {rt.user_id}")\n\n            # \ud1a0\ud070 \uccb4\uc778 \uc804\uccb4 \ud3d0\uae30\n            self.revoke_token_family(rt.user_id, rt.jti, token_store)\n\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail="Token reuse detected. All tokens revoked."\n            )\n\n    def revoke_token_family(self, user_id: str, jti: str, token_store: TokenStore):\n        """\ud1a0\ud070 \ud328\ubc00\ub9ac \uc804\uccb4 \ud3d0\uae30"""\n\n        # \ud574\ub2f9 JTI\uc640 \uc5f0\uacb0\ub41c \ubaa8\ub4e0 \ud1a0\ud070 \ucc3e\uae30\n        token_chain = []\n        current_jti = jti\n\n        while current_jti:\n            rt = token_store.db.query(RefreshToken).filter_by(jti=current_jti).first()\n            if not rt:\n                break\n\n            token_chain.append(rt.jti)\n            current_jti = rt.replaced_by_jti\n\n        # \ubaa8\ub450 \ud3d0\uae30\n        token_store.db.query(RefreshToken).filter(\n            RefreshToken.jti.in_(token_chain)\n        ).update({"revoked": True}, synchronize_session=False)\n\n        token_store.db.commit()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-\uc790\ub3d9-\ud1a0\ud070-\uac31\uc2e0",children:"\u23f0 \uc790\ub3d9 \ud1a0\ud070 \uac31\uc2e0"}),"\n",(0,s.jsx)(n.h3,{id:"1-\ubc31\uc5d4\ub4dc-\ubbf8\ub4e4\uc6e8\uc5b4",children:"1. \ubc31\uc5d4\ub4dc \ubbf8\ub4e4\uc6e8\uc5b4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from starlette.middleware.base import BaseHTTPMiddleware\n\nclass TokenRefreshMiddleware(BaseHTTPMiddleware):\n    """\uc790\ub3d9 \ud1a0\ud070 \uac31\uc2e0 \ubbf8\ub4e4\uc6e8\uc5b4"""\n\n    async def dispatch(self, request, call_next):\n        # Access Token \uac00\uc838\uc624\uae30\n        access_token = request.cookies.get("access_token")\n\n        if access_token:\n            # \ub9cc\ub8cc \ud655\uc778\n            if token_manager.is_token_expired(access_token):\n                # Refresh Token\uc73c\ub85c \uac31\uc2e0\n                refresh_token = request.cookies.get("refresh_token")\n\n                if refresh_token:\n                    try:\n                        new_tokens = token_manager.refresh_with_rotation(\n                            refresh_token,\n                            token_store\n                        )\n\n                        # \uc0c8 \ud1a0\ud070\uc744 \ucfe0\ud0a4\uc5d0 \uc124\uc815\n                        response = await call_next(request)\n                        set_tokens_in_cookies(response, new_tokens)\n\n                        return response\n\n                    except:\n                        # Refresh \uc2e4\ud328 \u2192 \ub85c\uadf8\uc544\uc6c3\n                        response = await call_next(request)\n                        clear_token_cookies(response)\n                        return response\n\n        return await call_next(request)\n\napp.add_middleware(TokenRefreshMiddleware)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-\ud504\ub860\ud2b8\uc5d4\ub4dc-react",children:"2. \ud504\ub860\ud2b8\uc5d4\ub4dc (React)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// React\uc5d0\uc11c \uc790\ub3d9 \ud1a0\ud070 \uac31\uc2e0\n\nimport { useEffect, useRef } from 'react';\n\nfunction useTokenRefresh() {\n    const refreshTimerRef = useRef(null);\n\n    // Access Token \ud30c\uc2f1\n    function parseJWT(token) {\n        try {\n            const base64Url = token.split('.')[1];\n            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n            const jsonPayload = decodeURIComponent(\n                atob(base64)\n                    .split('')\n                    .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n                    .join('')\n            );\n            return JSON.parse(jsonPayload);\n        } catch {\n            return null;\n        }\n    }\n\n    // \ud1a0\ud070 \uac31\uc2e0\n    async function refreshToken() {\n        try {\n            const response = await fetch('/api/refresh', {\n                method: 'POST',\n                credentials: 'include'  // \ucfe0\ud0a4 \ud3ec\ud568\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                scheduleRefresh(data.expires_in);\n            } else {\n                // Refresh \uc2e4\ud328 \u2192 \ub85c\uadf8\uc544\uc6c3\n                window.location.href = '/login';\n            }\n        } catch (error) {\n            console.error('Token refresh failed:', error);\n        }\n    }\n\n    // \uac31\uc2e0 \uc2a4\ucf00\uc904\ub9c1\n    function scheduleRefresh(expiresIn) {\n        // \ub9cc\ub8cc 1\ubd84 \uc804\uc5d0 \uac31\uc2e0\n        const refreshTime = (expiresIn - 60) * 1000;\n\n        clearTimeout(refreshTimerRef.current);\n        refreshTimerRef.current = setTimeout(refreshToken, refreshTime);\n    }\n\n    // \ucd08\uae30\ud654\n    useEffect(() => {\n        // \ud604\uc7ac \ud1a0\ud070\uc758 \ub9cc\ub8cc \uc2dc\uac04 \ud655\uc778\n        fetch('/api/me', { credentials: 'include' })\n            .then(response => response.json())\n            .then(data => {\n                if (data.expires_in) {\n                    scheduleRefresh(data.expires_in);\n                }\n            })\n            .catch(console.error);\n\n        // Cleanup\n        return () => {\n            if (refreshTimerRef.current) {\n                clearTimeout(refreshTimerRef.current);\n            }\n        };\n    }, []);\n\n    return { refreshToken };\n}\n\n// \uc0ac\uc6a9\nfunction App() {\n    useTokenRefresh();\n\n    return <div>App Content</div>;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-axios-interceptor",children:"3. Axios Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Axios\ub85c \uc790\ub3d9 \uac31\uc2e0\n\nimport axios from 'axios';\n\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n        if (error) {\n            prom.reject(error);\n        } else {\n            prom.resolve(token);\n        }\n    });\n\n    failedQueue = [];\n};\n\n// Response Interceptor\naxios.interceptors.response.use(\n    response => response,\n    async error => {\n        const originalRequest = error.config;\n\n        // 401 \uc5d0\ub7ec && \uc7ac\uc2dc\ub3c4 \uc548 \ud588\uc73c\uba74\n        if (error.response?.status === 401 && !originalRequest._retry) {\n            if (isRefreshing) {\n                // \uc774\ubbf8 \uac31\uc2e0 \uc911\uc774\uba74 \ub300\uae30\n                return new Promise((resolve, reject) => {\n                    failedQueue.push({ resolve, reject });\n                }).then(() => {\n                    return axios(originalRequest);\n                });\n            }\n\n            originalRequest._retry = true;\n            isRefreshing = true;\n\n            try {\n                // Refresh Token\uc73c\ub85c \uac31\uc2e0\n                await axios.post('/api/refresh', {}, { withCredentials: true });\n\n                processQueue(null);\n                isRefreshing = false;\n\n                // \uc6d0\ub798 \uc694\uccad \uc7ac\uc2dc\ub3c4\n                return axios(originalRequest);\n            } catch (refreshError) {\n                processQueue(refreshError, null);\n                isRefreshing = false;\n\n                // Refresh \uc2e4\ud328 \u2192 \ub85c\uadf8\uc544\uc6c3\n                window.location.href = '/login';\n                return Promise.reject(refreshError);\n            }\n        }\n\n        return Promise.reject(error);\n    }\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-\ud1a0\ud070-\ubaa8\ub2c8\ud130\ub9c1",children:"\ud83d\udcca \ud1a0\ud070 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,s.jsx)(n.h3,{id:"1-\uc774\ubca4\ud2b8-\ub85c\uae45",children:"1. \uc774\ubca4\ud2b8 \ub85c\uae45"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from enum import Enum\nfrom datetime import datetime\n\nclass TokenEvent(str, Enum):\n    ISSUED = "issued"\n    REFRESHED = "refreshed"\n    REVOKED = "revoked"\n    EXPIRED = "expired"\n    REUSE_DETECTED = "reuse_detected"\n\nclass TokenAuditLog(Base):\n    """\ud1a0\ud070 \uac10\uc0ac \ub85c\uadf8"""\n\n    __tablename__ = \'token_audit_logs\'\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(String(255), nullable=False, index=True)\n    token_jti = Column(String(255), nullable=False)\n    event = Column(String(50), nullable=False)\n    ip_address = Column(String(45))  # IPv6 \uc9c0\uc6d0\n    user_agent = Column(String(500))\n    created_at = Column(DateTime, default=datetime.utcnow, index=True)\n\ndef log_token_event(\n    user_id: str,\n    token_jti: str,\n    event: TokenEvent,\n    request: Request\n):\n    """\ud1a0\ud070 \uc774\ubca4\ud2b8 \ub85c\uae45"""\n\n    log = TokenAuditLog(\n        user_id=user_id,\n        token_jti=token_jti,\n        event=event.value,\n        ip_address=request.client.host,\n        user_agent=request.headers.get("user-agent")\n    )\n\n    db.add(log)\n    db.commit()\n\n# \uc0ac\uc6a9\n@app.post(\'/token\')\nasync def token(request: Request):\n    tokens = token_manager.create_token_pair(user_id)\n\n    # \ub85c\uae45\n    payload = jwt.decode(tokens["access_token"], options={"verify_signature": False})\n    log_token_event(\n        user_id=user_id,\n        token_jti=payload["jti"],\n        event=TokenEvent.ISSUED,\n        request=request\n    )\n\n    return tokens\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-\uba54\ud2b8\ub9ad-\uc218\uc9d1",children:"2. \uba54\ud2b8\ub9ad \uc218\uc9d1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from prometheus_client import Counter, Histogram\n\n# \uba54\ud2b8\ub9ad \uc815\uc758\ntoken_issued_counter = Counter(\n    'oauth_tokens_issued_total',\n    'Total number of tokens issued',\n    ['token_type', 'user_id']\n)\n\ntoken_refresh_counter = Counter(\n    'oauth_tokens_refreshed_total',\n    'Total number of tokens refreshed',\n    ['user_id']\n)\n\ntoken_revoked_counter = Counter(\n    'oauth_tokens_revoked_total',\n    'Total number of tokens revoked',\n    ['reason']\n)\n\ntoken_lifetime = Histogram(\n    'oauth_token_lifetime_seconds',\n    'Token lifetime in seconds',\n    buckets=[60, 300, 900, 1800, 3600, 7200]\n)\n\n# \uc0ac\uc6a9\ndef create_token_pair(user_id: str):\n    tokens = token_manager.create_token_pair(user_id)\n\n    # \uba54\ud2b8\ub9ad \uae30\ub85d\n    token_issued_counter.labels(token_type='access', user_id=user_id).inc()\n    token_issued_counter.labels(token_type='refresh', user_id=user_id).inc()\n\n    return tokens\n\n# Grafana \ub300\uc2dc\ubcf4\ub4dc\uc5d0\uc11c \uc2dc\uac01\ud654\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./pkce",children:"PKCE \uad6c\ud604"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./security",children:"\ubcf4\uc548 Best Practices"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../intermediate/jwt-tokens",children:"JWT \ud1a0\ud070 \ucc98\ub9ac"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,s.jsx)(n.p,{children:"\ud1a0\ud070 \uad00\ub9ac\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \uc5ec\ub7ec Provider\ub97c \ud1b5\ud569\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,s.jsx)(n.a,{href:"./multi-provider",children:"Multi-Provider \uc9c0\uc6d0"})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": Refresh Token Rotation\uc740 \ubcf4\uc548\uc744 \ud06c\uac8c \ud5a5\uc0c1\uc2dc\ud0b5\ub2c8\ub2e4. \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 \ud544\uc218\ub85c \uad6c\ud604\ud558\uc138\uc694!"]})]})}function _(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);