"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5132],{8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var r=s(6540);const t={},l=r.createContext(t);function c(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(l.Provider,{value:n},e.children)}},8599:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"sqlalchemy/advanced/advanced-queries","title":"\uace0\uae09 \ucffc\ub9ac \uae30\ubc95","description":"Window Functions, CTE, Full-Text Search \ub4f1 PostgreSQL\uacfc SQLAlchemy\uc758 \uace0\uae09 \ucffc\ub9ac \uae30\ub2a5\uc744 \ub9c8\uc2a4\ud130\ud569\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/advanced/advanced-queries.md","sourceDirName":"sqlalchemy/advanced","slug":"/sqlalchemy/advanced/advanced-queries","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/advanced/advanced-queries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/advanced/advanced-queries.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"sqlalchemySidebar","previous":{"title":"\uace0\uae09\ud3b8 \uc18c\uac1c","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/advanced/intro"},"next":{"title":"\uc131\ub2a5 \ucd5c\uc801\ud654","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/advanced/performance"}}');var t=s(4848),l=s(8453);const c={sidebar_position:2},a="\uace0\uae09 \ucffc\ub9ac \uae30\ubc95",i={},o=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83e\ude9f Window Functions",id:"-window-functions",level:2},{value:"ROW_NUMBER() - \ud589 \ubc88\ud638",id:"row_number---\ud589-\ubc88\ud638",level:3},{value:"RANK() vs DENSE_RANK()",id:"rank-vs-dense_rank",level:3},{value:"LAG() / LEAD() - \uc774\uc804/\ub2e4\uc74c \ud589 \ucc38\uc870",id:"lag--lead---\uc774\uc804\ub2e4\uc74c-\ud589-\ucc38\uc870",level:3},{value:"SUM() / AVG() OVER - \ub204\uc801/\uc774\ub3d9 \ud3c9\uade0",id:"sum--avg-over---\ub204\uc801\uc774\ub3d9-\ud3c9\uade0",level:3},{value:"\uc2e4\uc804 \uc608\uc81c: Top N per Group",id:"\uc2e4\uc804-\uc608\uc81c-top-n-per-group",level:3},{value:"\ud83d\udcdd CTE (Common Table Expressions)",id:"-cte-common-table-expressions",level:2},{value:"\uae30\ubcf8 CTE",id:"\uae30\ubcf8-cte",level:3},{value:"\uc5ec\ub7ec CTE \uc0ac\uc6a9",id:"\uc5ec\ub7ec-cte-\uc0ac\uc6a9",level:3},{value:"Recursive CTE - \uacc4\uce35 \uad6c\uc870",id:"recursive-cte---\uacc4\uce35-\uad6c\uc870",level:3},{value:"\ud83d\udd0d Full-Text Search",id:"-full-text-search",level:2},{value:"\uae30\ubcf8 \uc804\ubb38 \uac80\uc0c9",id:"\uae30\ubcf8-\uc804\ubb38-\uac80\uc0c9",level:3},{value:"TSVECTOR \uceec\ub7fc \uc0ac\uc6a9 (\uc131\ub2a5 \ucd5c\uc801\ud654)",id:"tsvector-\uceec\ub7fc-\uc0ac\uc6a9-\uc131\ub2a5-\ucd5c\uc801\ud654",level:3},{value:"\uac80\uc0c9 \uc21c\uc704\uc640 \ud558\uc774\ub77c\uc774\ud2b8",id:"\uac80\uc0c9-\uc21c\uc704\uc640-\ud558\uc774\ub77c\uc774\ud2b8",level:3},{value:"\ud83d\udee0\ufe0f Raw SQL \ud1b5\ud569",id:"\ufe0f-raw-sql-\ud1b5\ud569",level:2},{value:"text() - \ub2e8\uc21c Raw SQL",id:"text---\ub2e8\uc21c-raw-sql",level:3},{value:"PostgreSQL \ud2b9\ud654 \ud568\uc218",id:"postgresql-\ud2b9\ud654-\ud568\uc218",level:3},{value:"PostgreSQL EXPLAIN",id:"postgresql-explain",level:3},{value:"\ud83d\udcca \ubcf5\uc7a1\ud55c \uc9d1\uacc4",id:"-\ubcf5\uc7a1\ud55c-\uc9d1\uacc4",level:2},{value:"FILTER - \uc870\uac74\ubd80 \uc9d1\uacc4",id:"filter---\uc870\uac74\ubd80-\uc9d1\uacc4",level:3},{value:"CASE - \uc870\uac74\ubd80 \ub85c\uc9c1",id:"case---\uc870\uac74\ubd80-\ub85c\uc9c1",level:3},{value:"PERCENTILE - \ubc31\ubd84\uc704\uc218",id:"percentile---\ubc31\ubd84\uc704\uc218",level:3},{value:"\ud83c\udfaf \uc2e4\uc804 \uc608\uc81c",id:"-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\ub300\uc2dc\ubcf4\ub4dc \ucffc\ub9ac \ucd5c\uc801\ud654",id:"\ub300\uc2dc\ubcf4\ub4dc-\ucffc\ub9ac-\ucd5c\uc801\ud654",level:3},{value:"\uc0c1\ud488 \ucd94\ucc9c \uc2dc\uc2a4\ud15c",id:"\uc0c1\ud488-\ucd94\ucc9c-\uc2dc\uc2a4\ud15c",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. Window Functions vs GROUP BY",id:"1-window-functions-vs-group-by",level:3},{value:"2. CTE vs \uc11c\ube0c\ucffc\ub9ac",id:"2-cte-vs-\uc11c\ube0c\ucffc\ub9ac",level:3},{value:"3. Full-Text Search \ucd5c\uc801\ud654",id:"3-full-text-search-\ucd5c\uc801\ud654",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\uace0\uae09-\ucffc\ub9ac-\uae30\ubc95",children:"\uace0\uae09 \ucffc\ub9ac \uae30\ubc95"})}),"\n",(0,t.jsx)(n.p,{children:"Window Functions, CTE, Full-Text Search \ub4f1 PostgreSQL\uacfc SQLAlchemy\uc758 \uace0\uae09 \ucffc\ub9ac \uae30\ub2a5\uc744 \ub9c8\uc2a4\ud130\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Window Functions \ud65c\uc6a9"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 CTE (Common Table Expressions)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Recursive Queries"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Full-Text Search"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Raw SQL \ud1b5\ud569"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 PostgreSQL \ud2b9\ud654 \uae30\ub2a5"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-window-functions",children:"\ud83e\ude9f Window Functions"}),"\n",(0,t.jsx)(n.h3,{id:"row_number---\ud589-\ubc88\ud638",children:"ROW_NUMBER() - \ud589 \ubc88\ud638"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func, over\n\nwith Session(engine) as session:\n    # \uac01 \ubd80\uc11c\ubcc4 \uae09\uc5ec \uc21c\uc704\n    stmt = select(\n        Employee.name,\n        Employee.department,\n        Employee.salary,\n        func.row_number().over(\n            partition_by=Employee.department,\n            order_by=Employee.salary.desc()\n        ).label('rank_in_dept')\n    )\n\n    results = session.execute(stmt).all()\n    for name, dept, salary, rank in results:\n        print(f\"{dept} - {rank}\uc704: {name} (${salary})\")\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT\n    employees.name,\n    employees.department,\n    employees.salary,\n    ROW_NUMBER() OVER (\n        PARTITION BY employees.department\n        ORDER BY employees.salary DESC\n    ) AS rank_in_dept\nFROM employees\n"})}),"\n",(0,t.jsx)(n.h3,{id:"rank-vs-dense_rank",children:"RANK() vs DENSE_RANK()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # RANK(): \ub3d9\uc810\uc774\uba74 \ub2e4\uc74c \uc21c\uc704 \uac74\ub108\ub700 (1, 2, 2, 4)\n    stmt = select(\n        Student.name,\n        Student.score,\n        func.rank().over(\n            order_by=Student.score.desc()\n        ).label('rank')\n    )\n\n    # DENSE_RANK(): \ub3d9\uc810\uc774\uc5b4\ub3c4 \ub2e4\uc74c \uc21c\uc704 \uc5f0\uc18d (1, 2, 2, 3)\n    stmt = select(\n        Student.name,\n        Student.score,\n        func.dense_rank().over(\n            order_by=Student.score.desc()\n        ).label('dense_rank')\n    )\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"lag--lead---\uc774\uc804\ub2e4\uc74c-\ud589-\ucc38\uc870",children:"LAG() / LEAD() - \uc774\uc804/\ub2e4\uc74c \ud589 \ucc38\uc870"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \uc774\uc804 \ub2ec \ub9e4\ucd9c\uacfc \ube44\uad50\n    stmt = select(\n        Sales.month,\n        Sales.revenue,\n        func.lag(Sales.revenue).over(\n            order_by=Sales.month\n        ).label('prev_month_revenue'),\n        (Sales.revenue - func.lag(Sales.revenue).over(order_by=Sales.month))\n            .label('growth')\n    )\n\n    results = session.execute(stmt).all()\n    for month, revenue, prev_revenue, growth in results:\n        if prev_revenue:\n            print(f\"{month}: ${revenue} (\uc131\uc7a5: ${growth})\")\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT\n    sales.month,\n    sales.revenue,\n    LAG(sales.revenue) OVER (ORDER BY sales.month) AS prev_month_revenue,\n    sales.revenue - LAG(sales.revenue) OVER (ORDER BY sales.month) AS growth\nFROM sales\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sum--avg-over---\ub204\uc801\uc774\ub3d9-\ud3c9\uade0",children:"SUM() / AVG() OVER - \ub204\uc801/\uc774\ub3d9 \ud3c9\uade0"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \ub204\uc801 \ud569\uacc4\n    stmt = select(\n        Order.date,\n        Order.amount,\n        func.sum(Order.amount).over(\n            order_by=Order.date,\n            rows=(None, 0)  # ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ).label('cumulative_total')\n    )\n\n    # 7\uc77c \uc774\ub3d9 \ud3c9\uade0\n    stmt = select(\n        Order.date,\n        Order.amount,\n        func.avg(Order.amount).over(\n            order_by=Order.date,\n            rows=(-6, 0)  # ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ).label('moving_avg_7d')\n    )\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc2e4\uc804-\uc608\uc81c-top-n-per-group",children:"\uc2e4\uc804 \uc608\uc81c: Top N per Group"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\nfrom sqlalchemy.orm import aliased\n\n# \uac01 \uce74\ud14c\uace0\ub9ac\ubcc4 \uc0c1\uc704 3\uac1c \uc81c\ud488\nwith Session(engine) as session:\n    # \uc11c\ube0c\ucffc\ub9ac\ub85c \uc21c\uc704 \uacc4\uc0b0\n    ranked = select(\n        Product.id,\n        Product.name,\n        Product.category,\n        Product.sales,\n        func.row_number().over(\n            partition_by=Product.category,\n            order_by=Product.sales.desc()\n        ).label('rank')\n    ).subquery()\n\n    # \uc21c\uc704 3 \uc774\ud558\ub9cc \uc120\ud0dd\n    stmt = select(ranked).where(ranked.c.rank <= 3)\n\n    results = session.execute(stmt).all()\n    for product in results:\n        print(f\"{product.category} - {product.rank}\uc704: {product.name}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-cte-common-table-expressions",children:"\ud83d\udcdd CTE (Common Table Expressions)"}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-cte",children:"\uae30\ubcf8 CTE"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # CTE \uc815\uc758: \ud65c\uc131 \uc0ac\uc6a9\uc790\n    active_users = select(User).where(User.is_active == True).cte('active_users')\n\n    # CTE \uc0ac\uc6a9\n    stmt = select(\n        active_users.c.username,\n        func.count(Post.id).label('post_count')\n    ).join(Post, active_users.c.id == Post.user_id)\\\n     .group_by(active_users.c.username)\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"WITH active_users AS (\n    SELECT * FROM users WHERE is_active = true\n)\nSELECT active_users.username, COUNT(posts.id) AS post_count\nFROM active_users\nJOIN posts ON active_users.id = posts.user_id\nGROUP BY active_users.username\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc5ec\ub7ec-cte-\uc0ac\uc6a9",children:"\uc5ec\ub7ec CTE \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # CTE 1: \ucd5c\uadfc 30\uc77c \uc8fc\ubb38\n    recent_orders = select(Order)\\\n        .where(Order.created_at >= func.current_date() - 30)\\\n        .cte('recent_orders')\n\n    # CTE 2: \uace0\uac1d\ubcc4 \uc8fc\ubb38 \uc218\n    customer_order_counts = select(\n        recent_orders.c.customer_id,\n        func.count(recent_orders.c.id).label('order_count')\n    ).group_by(recent_orders.c.customer_id)\\\n     .cte('customer_order_counts')\n\n    # \ucd5c\uc885 \ucffc\ub9ac\n    stmt = select(\n        Customer.name,\n        customer_order_counts.c.order_count\n    ).join(customer_order_counts, Customer.id == customer_order_counts.c.customer_id)\\\n     .where(customer_order_counts.c.order_count >= 5)\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"recursive-cte---\uacc4\uce35-\uad6c\uc870",children:"Recursive CTE - \uacc4\uce35 \uad6c\uc870"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, union_all\n\n# \uc608\uc81c: \uc870\uc9c1\ub3c4 (Employee - Manager \uad00\uacc4)\nwith Session(engine) as session:\n    # \uae30\ubcf8 \ucf00\uc774\uc2a4: \ucd5c\uc0c1\uc704 \uad00\ub9ac\uc790\n    base_case = select(\n        Employee.id,\n        Employee.name,\n        Employee.manager_id,\n        literal(0).label('level')\n    ).where(Employee.manager_id.is_(None))\n\n    # \uc7ac\uadc0 \ucf00\uc774\uc2a4\n    emp_cte = base_case.cte('employee_hierarchy', recursive=True)\n\n    recursive_case = select(\n        Employee.id,\n        Employee.name,\n        Employee.manager_id,\n        (emp_cte.c.level + 1).label('level')\n    ).join(emp_cte, Employee.manager_id == emp_cte.c.id)\n\n    # \uc7ac\uadc0 CTE \uc815\uc758\n    emp_hierarchy = union_all(base_case, recursive_case).cte(recursive=True)\n\n    # \uc0ac\uc6a9\n    stmt = select(emp_hierarchy).order_by(emp_hierarchy.c.level, emp_hierarchy.c.name)\n\n    results = session.execute(stmt).all()\n    for emp in results:\n        indent = \"  \" * emp.level\n        print(f\"{indent}{emp.name} (Level {emp.level})\")\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"WITH RECURSIVE employee_hierarchy AS (\n    -- Base case\n    SELECT id, name, manager_id, 0 AS level\n    FROM employees\n    WHERE manager_id IS NULL\n\n    UNION ALL\n\n    -- Recursive case\n    SELECT e.id, e.name, e.manager_id, eh.level + 1\n    FROM employees e\n    JOIN employee_hierarchy eh ON e.manager_id = eh.id\n)\nSELECT * FROM employee_hierarchy\nORDER BY level, name\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-full-text-search",children:"\ud83d\udd0d Full-Text Search"}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc804\ubb38-\uac80\uc0c9",children:"\uae30\ubcf8 \uc804\ubb38 \uac80\uc0c9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\nfrom sqlalchemy.dialects.postgresql import TSVECTOR\n\nwith Session(engine) as session:\n    # to_tsvector\ub85c \uac80\uc0c9\n    stmt = select(Article).where(\n        func.to_tsvector('english', Article.content).match('python & postgresql')\n    )\n\n    articles = session.execute(stmt).scalars().all()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM articles\nWHERE to_tsvector('english', articles.content) @@ to_tsquery('python & postgresql')\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tsvector-\uceec\ub7fc-\uc0ac\uc6a9-\uc131\ub2a5-\ucd5c\uc801\ud654",children:"TSVECTOR \uceec\ub7fc \uc0ac\uc6a9 (\uc131\ub2a5 \ucd5c\uc801\ud654)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String, Index\nfrom sqlalchemy.dialects.postgresql import TSVECTOR\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(Text)\n\n    # TSVECTOR \uceec\ub7fc\n    search_vector: Mapped[str] = mapped_column(TSVECTOR)\n\n    __table_args__ = (\n        # GIN \uc778\ub371\uc2a4 (\uc804\ubb38 \uac80\uc0c9 \ucd5c\uc801\ud654)\n        Index('idx_article_search', 'search_vector', postgresql_using='gin'),\n    )\n\n# \ud2b8\ub9ac\uac70\ub85c \uc790\ub3d9 \uc5c5\ub370\uc774\ud2b8\ncreate_trigger = \"\"\"\nCREATE TRIGGER article_search_vector_update\nBEFORE INSERT OR UPDATE ON articles\nFOR EACH ROW EXECUTE FUNCTION\ntsvector_update_trigger(\n    search_vector, 'pg_catalog.english', title, content\n);\n\"\"\"\n\n# \uac80\uc0c9\nwith Session(engine) as session:\n    stmt = select(Article).where(\n        Article.search_vector.match('python & database')\n    )\n    articles = session.execute(stmt).scalars().all()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uac80\uc0c9-\uc21c\uc704\uc640-\ud558\uc774\ub77c\uc774\ud2b8",children:"\uac80\uc0c9 \uc21c\uc704\uc640 \ud558\uc774\ub77c\uc774\ud2b8"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \uac80\uc0c9 \uc21c\uc704 \ud3ec\ud568\n    search_query = 'python tutorial'\n\n    stmt = select(\n        Article.title,\n        Article.content,\n        func.ts_rank(\n            func.to_tsvector('english', Article.content),\n            func.to_tsquery('english', search_query)\n        ).label('rank'),\n        func.ts_headline(\n            'english',\n            Article.content,\n            func.to_tsquery('english', search_query)\n        ).label('headline')\n    ).where(\n        func.to_tsvector('english', Article.content).match(search_query)\n    ).order_by(func.desc('rank'))\n\n    results = session.execute(stmt).all()\n    for article in results:\n        print(f\"\uc21c\uc704: {article.rank:.3f}\")\n        print(f\"\uc81c\ubaa9: {article.title}\")\n        print(f\"\ubbf8\ub9ac\ubcf4\uae30: {article.headline}\")\n        print()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-raw-sql-\ud1b5\ud569",children:"\ud83d\udee0\ufe0f Raw SQL \ud1b5\ud569"}),"\n",(0,t.jsx)(n.h3,{id:"text---\ub2e8\uc21c-raw-sql",children:"text() - \ub2e8\uc21c Raw SQL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import text\n\nwith Session(engine) as session:\n    # Raw SQL \uc2e4\ud589\n    result = session.execute(\n        text("SELECT * FROM users WHERE username = :username"),\n        {"username": "alice"}\n    )\n\n    for row in result:\n        print(row)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-\ud2b9\ud654-\ud568\uc218",children:"PostgreSQL \ud2b9\ud654 \ud568\uc218"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func, cast\nfrom sqlalchemy.dialects.postgresql import JSONB, ARRAY\n\nwith Session(engine) as session:\n    # JSONB \uc5f0\uc0b0\n    stmt = select(Product).where(\n        Product.specs['cpu'].astext.like('%Intel%')\n    )\n\n    # ARRAY \ud568\uc218\n    stmt = select(Post).where(\n        func.array_length(Post.tags, 1) > 3  # \ud0dc\uadf8\uac00 3\uac1c \uc774\uc0c1\n    )\n\n    # ARRAY contains\n    stmt = select(Post).where(\n        Post.tags.contains(['python', 'tutorial'])\n    )\n\n    # ARRAY overlap\n    stmt = select(Post).where(\n        Post.tags.overlap(['python', 'javascript'])\n    )\n"})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-explain",children:"PostgreSQL EXPLAIN"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import text\n\nwith Session(engine) as session:\n    # EXPLAIN ANALYZE\n    stmt = select(User).join(Post).where(Post.created_at > \'2024-01-01\')\n\n    # SQL \ucd94\ucd9c\n    compiled = stmt.compile(\n        dialect=engine.dialect,\n        compile_kwargs={"literal_binds": True}\n    )\n\n    # EXPLAIN \uc2e4\ud589\n    explain_query = f"EXPLAIN ANALYZE {compiled}"\n    result = session.execute(text(explain_query))\n\n    for row in result:\n        print(row[0])\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\ubcf5\uc7a1\ud55c-\uc9d1\uacc4",children:"\ud83d\udcca \ubcf5\uc7a1\ud55c \uc9d1\uacc4"}),"\n",(0,t.jsx)(n.h3,{id:"filter---\uc870\uac74\ubd80-\uc9d1\uacc4",children:"FILTER - \uc870\uac74\ubd80 \uc9d1\uacc4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func, case\n\nwith Session(engine) as session:\n    # PostgreSQL FILTER \uc808\n    stmt = select(\n        User.department,\n        func.count(User.id).label('total'),\n        func.count(User.id).filter(User.is_active == True).label('active'),\n        func.count(User.id).filter(User.salary > 50000).label('high_earners')\n    ).group_by(User.department)\n\n    results = session.execute(stmt).all()\n    for dept in results:\n        print(f\"{dept.department}: {dept.active}/{dept.total} \ud65c\uc131, {dept.high_earners} \uace0\uc18c\ub4dd\")\n"})}),"\n",(0,t.jsx)(n.h3,{id:"case---\uc870\uac74\ubd80-\ub85c\uc9c1",children:"CASE - \uc870\uac74\ubd80 \ub85c\uc9c1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func, case\n\nwith Session(engine) as session:\n    # CASE \ud45c\ud604\uc2dd\n    age_group = case(\n        (User.age < 20, 'Teen'),\n        (User.age < 30, '20s'),\n        (User.age < 40, '30s'),\n        else_='40+'\n    ).label('age_group')\n\n    stmt = select(\n        age_group,\n        func.count(User.id).label('count')\n    ).group_by(age_group)\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"percentile---\ubc31\ubd84\uc704\uc218",children:"PERCENTILE - \ubc31\ubd84\uc704\uc218"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \uc911\uc559\uac12, 90 \ubc31\ubd84\uc704\uc218\n    stmt = select(\n        func.percentile_cont(0.5).within_group(Order.amount).label('median'),\n        func.percentile_cont(0.9).within_group(Order.amount).label('p90'),\n        func.percentile_cont(0.95).within_group(Order.amount).label('p95')\n    )\n\n    result = session.execute(stmt).first()\n    print(f\"\uc911\uc559\uac12: ${result.median}\")\n    print(f\"90 \ubc31\ubd84\uc704: ${result.p90}\")\n    print(f\"95 \ubc31\ubd84\uc704: ${result.p95}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc2e4\uc804-\uc608\uc81c",children:"\ud83c\udfaf \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,t.jsx)(n.h3,{id:"\ub300\uc2dc\ubcf4\ub4dc-\ucffc\ub9ac-\ucd5c\uc801\ud654",children:"\ub300\uc2dc\ubcf4\ub4dc \ucffc\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func, case\nfrom datetime import datetime, timedelta\n\ndef get_dashboard_stats(session: Session):\n    \"\"\"\ub2e8\uc77c \ucffc\ub9ac\ub85c \ubaa8\ub4e0 \ud1b5\uacc4 \uc870\ud68c\"\"\"\n    thirty_days_ago = datetime.now() - timedelta(days=30)\n\n    # CTE: \ucd5c\uadfc 30\uc77c \uc8fc\ubb38\n    recent_orders = select(Order)\\\n        .where(Order.created_at >= thirty_days_ago)\\\n        .cte('recent_orders')\n\n    # \ubaa8\ub4e0 \ud1b5\uacc4\ub97c \ud55c \ubc88\uc5d0\n    stmt = select(\n        # \uc804\uccb4 \ud1b5\uacc4\n        func.count(func.distinct(recent_orders.c.id)).label('total_orders'),\n        func.sum(recent_orders.c.amount).label('total_revenue'),\n        func.avg(recent_orders.c.amount).label('avg_order_value'),\n\n        # \uc0c1\ud0dc\ubcc4 \uac1c\uc218\n        func.count(recent_orders.c.id).filter(\n            recent_orders.c.status == 'completed'\n        ).label('completed_orders'),\n        func.count(recent_orders.c.id).filter(\n            recent_orders.c.status == 'pending'\n        ).label('pending_orders'),\n\n        # \uace0\uac1d \ud1b5\uacc4\n        func.count(func.distinct(recent_orders.c.customer_id)).label('unique_customers'),\n\n        # \uc77c\ubcc4 \ud3c9\uade0\n        (func.sum(recent_orders.c.amount) / 30).label('daily_avg_revenue')\n    )\n\n    result = session.execute(stmt).first()\n\n    return {\n        'total_orders': result.total_orders,\n        'total_revenue': float(result.total_revenue or 0),\n        'avg_order_value': float(result.avg_order_value or 0),\n        'completed_orders': result.completed_orders,\n        'pending_orders': result.pending_orders,\n        'unique_customers': result.unique_customers,\n        'daily_avg_revenue': float(result.daily_avg_revenue or 0)\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc0c1\ud488-\ucd94\ucc9c-\uc2dc\uc2a4\ud15c",children:"\uc0c1\ud488 \ucd94\ucc9c \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select, func, and_\n\ndef get_recommended_products(\n    session: Session,\n    user_id: int,\n    limit: int = 10\n):\n    \"\"\"\ud611\uc5c5 \ud544\ud130\ub9c1 \uae30\ubc18 \uc0c1\ud488 \ucd94\ucc9c\"\"\"\n\n    # CTE 1: \uc0ac\uc6a9\uc790\uc758 \uad6c\ub9e4 \uc774\ub825\n    user_purchases = select(OrderItem.product_id)\\\n        .join(Order)\\\n        .where(Order.user_id == user_id)\\\n        .cte('user_purchases')\n\n    # CTE 2: \ube44\uc2b7\ud55c \uc81c\ud488\uc744 \uad6c\ub9e4\ud55c \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\n    similar_users = select(Order.user_id)\\\n        .join(OrderItem)\\\n        .where(\n            OrderItem.product_id.in_(select(user_purchases)),\n            Order.user_id != user_id\n        )\\\n        .group_by(Order.user_id)\\\n        .having(func.count(func.distinct(OrderItem.product_id)) >= 2)\\\n        .cte('similar_users')\n\n    # \ucd94\ucc9c \uc0c1\ud488 (\ube44\uc2b7\ud55c \uc0ac\uc6a9\uc790\uac00 \uad6c\ub9e4\ud588\uc9c0\ub9cc \ud604\uc7ac \uc0ac\uc6a9\uc790\ub294 \uc548 \uc0b0 \uac83)\n    stmt = select(\n        Product.id,\n        Product.name,\n        func.count(OrderItem.id).label('popularity')\n    ).join(OrderItem)\\\n     .join(Order)\\\n     .where(\n        and_(\n            Order.user_id.in_(select(similar_users)),\n            Product.id.notin_(select(user_purchases))\n        )\n    ).group_by(Product.id, Product.name)\\\n     .order_by(func.desc('popularity'))\\\n     .limit(limit)\n\n    return session.execute(stmt).all()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,t.jsx)(n.h3,{id:"1-window-functions-vs-group-by",children:"1. Window Functions vs GROUP BY"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u274c GROUP BY: \uc9d1\uacc4\ub41c \uacb0\uacfc\ub9cc\nstmt = select(\n    User.department,\n    func.avg(User.salary)\n).group_by(User.department)\n# \uacb0\uacfc: \ubd80\uc11c\ubcc4 \ud3c9\uade0\ub9cc\n\n# \u2705 Window Functions: \uac1c\ubcc4 \ud589 + \uc9d1\uacc4\nstmt = select(\n    User.name,\n    User.salary,\n    func.avg(User.salary).over(\n        partition_by=User.department\n    ).label('dept_avg')\n)\n# \uacb0\uacfc: \uac01 \uc9c1\uc6d0 + \ubd80\uc11c \ud3c9\uade0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-cte-vs-\uc11c\ube0c\ucffc\ub9ac",children:"2. CTE vs \uc11c\ube0c\ucffc\ub9ac"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u2705 CTE: \uac00\ub3c5\uc131 \uc88b\uc74c, \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ncte = select(User).where(User.is_active == True).cte()\nstmt1 = select(cte).where(cte.c.age > 25)\nstmt2 = select(func.count(cte.c.id))\n\n# \u26a0\ufe0f \uc11c\ube0c\ucffc\ub9ac: \ud55c \ubc88\ub9cc \uc0ac\uc6a9\ud560 \ub54c\nsubq = select(User.id).where(User.is_active == True).scalar_subquery()\nstmt = select(Post).where(Post.user_id == subq)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-full-text-search-\ucd5c\uc801\ud654",children:"3. Full-Text Search \ucd5c\uc801\ud654"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u274c \ub290\ub9bc: to_tsvector \ub9e4\ubc88 \uacc4\uc0b0\nstmt = select(Article).where(\n    func.to_tsvector('english', Article.content).match(query)\n)\n\n# \u2705 \ube60\ub984: TSVECTOR \uceec\ub7fc + GIN \uc778\ub371\uc2a4\nstmt = select(Article).where(Article.search_vector.match(query))\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../intermediate/queries",children:"\ucffc\ub9ac \uc791\uc131"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./performance",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.postgresql.org/docs/",children:"PostgreSQL \uacf5\uc2dd \ubb38\uc11c"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(n.p,{children:"\uace0\uae09 \ucffc\ub9ac\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"./performance",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": Window Functions\uacfc CTE\ub294 \ubcf5\uc7a1\ud55c \ucffc\ub9ac\ub97c \uc6b0\uc544\ud558\uac8c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 \uc5b4\ub824\uc6cc \ubcf4\uc774\uc9c0\ub9cc \uc775\uc219\ud574\uc9c0\uba74 \ud544\uc218 \ub3c4\uad6c\uac00 \ub429\ub2c8\ub2e4!"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);