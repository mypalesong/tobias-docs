"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[6092],{6916:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"sqlalchemy/basic/connection","title":"PostgreSQL \uc5f0\uacb0 \uc124\uc815","description":"SQLAlchemy\ub85c PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/basic/connection.md","sourceDirName":"sqlalchemy/basic","slug":"/sqlalchemy/basic/connection","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/basic/connection","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/basic/connection.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"sqlalchemySidebar","previous":{"title":"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/advanced/transactions"},"next":{"title":"ORM \ubaa8\ub378 \uc815\uc758","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/basic/models"}}');var r=s(4848),l=s(8453);const i={sidebar_position:1},t="PostgreSQL \uc5f0\uacb0 \uc124\uc815",a={},c=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udd0c PostgreSQL \uc5f0\uacb0 \ubb38\uc790\uc5f4",id:"-postgresql-\uc5f0\uacb0-\ubb38\uc790\uc5f4",level:2},{value:"\uae30\ubcf8 \ud615\uc2dd",id:"\uae30\ubcf8-\ud615\uc2dd",level:3},{value:"\uc608\uc81c",id:"\uc608\uc81c",level:3},{value:"\ud2b9\uc218 \ubb38\uc790 \ucc98\ub9ac",id:"\ud2b9\uc218-\ubb38\uc790-\ucc98\ub9ac",level:3},{value:"\ud83c\udfd7\ufe0f Engine \uc0dd\uc131",id:"\ufe0f-engine-\uc0dd\uc131",level:2},{value:"\uae30\ubcf8 Engine",id:"\uae30\ubcf8-engine",level:3},{value:"Engine \uc635\uc158",id:"engine-\uc635\uc158",level:3},{value:"\ube44\ub3d9\uae30 Engine (asyncio)",id:"\ube44\ub3d9\uae30-engine-asyncio",level:3},{value:"\ud83d\udcbe \uc5f0\uacb0 \ud480 \uad00\ub9ac",id:"-\uc5f0\uacb0-\ud480-\uad00\ub9ac",level:2},{value:"\uc5f0\uacb0 \ud480\uc774\ub780?",id:"\uc5f0\uacb0-\ud480\uc774\ub780",level:3},{value:"\uc5f0\uacb0 \ud480 \ubaa8\ub2c8\ud130\ub9c1",id:"\uc5f0\uacb0-\ud480-\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"\uc5f0\uacb0 \ud480 \ud0c0\uc785",id:"\uc5f0\uacb0-\ud480-\ud0c0\uc785",level:3},{value:"\u2699\ufe0f \ud658\uacbd\ubcc4 \uc124\uc815",id:"\ufe0f-\ud658\uacbd\ubcc4-\uc124\uc815",level:2},{value:"\uac1c\ubc1c/\ud504\ub85c\ub355\uc158 \ubd84\ub9ac",id:"\uac1c\ubc1c\ud504\ub85c\ub355\uc158-\ubd84\ub9ac",level:3},{value:".env \ud30c\uc77c \uc0ac\uc6a9",id:"env-\ud30c\uc77c-\uc0ac\uc6a9",level:3},{value:"\ud83d\udd0d \uc5f0\uacb0 \ud14c\uc2a4\ud2b8",id:"-\uc5f0\uacb0-\ud14c\uc2a4\ud2b8",level:2},{value:"\uae30\ubcf8 \uc5f0\uacb0 \ud14c\uc2a4\ud2b8",id:"\uae30\ubcf8-\uc5f0\uacb0-\ud14c\uc2a4\ud2b8",level:3},{value:"\uc5f0\uacb0 \ud480 \ud14c\uc2a4\ud2b8",id:"\uc5f0\uacb0-\ud480-\ud14c\uc2a4\ud2b8",level:3},{value:"\ud83d\udee0\ufe0f \uc2e4\uc804 \uc124\uc815 \uc608\uc81c",id:"\ufe0f-\uc2e4\uc804-\uc124\uc815-\uc608\uc81c",level:2},{value:"FastAPI \ud1b5\ud569",id:"fastapi-\ud1b5\ud569",level:3},{value:"Docker Compose \uc124\uc815",id:"docker-compose-\uc124\uc815",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. \uc5f0\uacb0 \ubb38\uc790\uc5f4 \ubcf4\uc548",id:"1-\uc5f0\uacb0-\ubb38\uc790\uc5f4-\ubcf4\uc548",level:3},{value:"2. \uc5f0\uacb0 \uc7ac\uc2dc\ub3c4",id:"2-\uc5f0\uacb0-\uc7ac\uc2dc\ub3c4",level:3},{value:"3. \ud5ec\uc2a4 \uccb4\ud06c",id:"3-\ud5ec\uc2a4-\uccb4\ud06c",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"postgresql-\uc5f0\uacb0-\uc124\uc815",children:"PostgreSQL \uc5f0\uacb0 \uc124\uc815"})}),"\n",(0,r.jsx)(n.p,{children:"SQLAlchemy\ub85c PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc5f0\uacb0\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 PostgreSQL \uc5f0\uacb0 \ubb38\uc790\uc5f4 \uc791\uc131"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Engine \uc0dd\uc131 \ubc0f \uc124\uc815"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc5f0\uacb0 \ud480 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ud658\uacbd\ubcc4 \uc124\uc815 \ubd84\ub9ac"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-postgresql-\uc5f0\uacb0-\ubb38\uc790\uc5f4",children:"\ud83d\udd0c PostgreSQL \uc5f0\uacb0 \ubb38\uc790\uc5f4"}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\ud615\uc2dd",children:"\uae30\ubcf8 \ud615\uc2dd"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"postgresql://[username]:[password]@[host]:[port]/[database]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc608\uc81c",children:"\uc608\uc81c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \ub85c\uceec \uac1c\ubc1c \ud658\uacbd\nDATABASE_URL = "postgresql://postgres:password@localhost:5432/myapp"\n\n# \ud504\ub85c\ub355\uc158 (AWS RDS)\nDATABASE_URL = "postgresql://admin:secretpass@mydb.abc123.us-east-1.rds.amazonaws.com:5432/prod_db"\n\n# Docker \ucee8\ud14c\uc774\ub108\nDATABASE_URL = "postgresql://user:pass@postgres-container:5432/app_db"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ud2b9\uc218-\ubb38\uc790-\ucc98\ub9ac",children:"\ud2b9\uc218 \ubb38\uc790 \ucc98\ub9ac"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from urllib.parse import quote_plus\n\npassword = "p@ssw0rd!#$"\nencoded_password = quote_plus(password)\n\nDATABASE_URL = f"postgresql://user:{encoded_password}@localhost/mydb"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-engine-\uc0dd\uc131",children:"\ud83c\udfd7\ufe0f Engine \uc0dd\uc131"}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-engine",children:"\uae30\ubcf8 Engine"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine\n\n# \uae30\ubcf8 \uc5f0\uacb0\nengine = create_engine('postgresql://postgres:password@localhost/myapp')\n\n# \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\nwith engine.connect() as conn:\n    result = conn.execute(text(\"SELECT 1\"))\n    print(result.scalar())  # 1\n"})}),"\n",(0,r.jsx)(n.h3,{id:"engine-\uc635\uc158",children:"Engine \uc635\uc158"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine\nfrom sqlalchemy.pool import QueuePool\n\nengine = create_engine(\n    \'postgresql://postgres:password@localhost/myapp\',\n\n    # \uc5f0\uacb0 \ud480 \uc124\uc815\n    poolclass=QueuePool,\n    pool_size=10,              # \uae30\ubcf8 \uc5f0\uacb0 \uc218\n    max_overflow=20,           # \ucd94\uac00 \uac00\ub2a5\ud55c \uc5f0\uacb0 \uc218\n    pool_timeout=30,           # \uc5f0\uacb0 \ub300\uae30 \uc2dc\uac04 (\ucd08)\n    pool_recycle=3600,         # \uc5f0\uacb0 \uc7ac\uc0ac\uc6a9 \uc8fc\uae30 (1\uc2dc\uac04)\n    pool_pre_ping=True,        # \uc5f0\uacb0 \uc720\ud6a8\uc131 \uc0ac\uc804 \uccb4\ud06c\n\n    # \ub514\ubc84\uadf8 \uc124\uc815\n    echo=False,                # SQL \ub85c\uadf8 \ucd9c\ub825 (\uac1c\ubc1c \uc2dc True)\n    echo_pool=False,           # \uc5f0\uacb0 \ud480 \ub85c\uadf8\n\n    # \uc131\ub2a5 \uc124\uc815\n    isolation_level="READ COMMITTED",  # \ud2b8\ub79c\uc7ad\uc158 \uaca9\ub9ac \uc218\uc900\n    connect_args={\n        "connect_timeout": 10,          # \uc5f0\uacb0 \ud0c0\uc784\uc544\uc6c3\n        "options": "-c timezone=UTC"    # PostgreSQL \uc635\uc158\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ube44\ub3d9\uae30-engine-asyncio",children:"\ube44\ub3d9\uae30 Engine (asyncio)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.ext.asyncio import create_async_engine\n\n# asyncpg \ub4dc\ub77c\uc774\ubc84 \uc0ac\uc6a9\nasync_engine = create_async_engine(\n    'postgresql+asyncpg://postgres:password@localhost/myapp',\n    echo=True,\n    pool_size=20,\n    max_overflow=0\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc5f0\uacb0-\ud480-\uad00\ub9ac",children:"\ud83d\udcbe \uc5f0\uacb0 \ud480 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\ud480\uc774\ub780",children:"\uc5f0\uacb0 \ud480\uc774\ub780?"}),"\n",(0,r.jsx)(n.p,{children:"\uc5f0\uacb0 \ud480\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\uc744 \uc7ac\uc0ac\uc6a9\ud558\uc5ec \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0b5\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine, text\n\nengine = create_engine(\n    'postgresql://postgres:password@localhost/myapp',\n    pool_size=5,        # \ud56d\uc0c1 \uc720\uc9c0\ud558\ub294 \uc5f0\uacb0 \uc218\n    max_overflow=10,    # \ud544\uc694 \uc2dc \ucd94\uac00 \uc0dd\uc131 \uac00\ub2a5\ud55c \uc218\n)\n\n# \ucd1d \ucd5c\ub300 \uc5f0\uacb0 \uc218 = pool_size + max_overflow = 15\n\n# \uc5f0\uacb0 \uc0ac\uc6a9\nwith engine.connect() as conn:\n    result = conn.execute(text(\"SELECT * FROM users\"))\n    # \uc790\ub3d9\uc73c\ub85c \uc5f0\uacb0\uc774 \ud480\ub85c \ubc18\ud658\ub428\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\ud480-\ubaa8\ub2c8\ud130\ub9c1",children:"\uc5f0\uacb0 \ud480 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \ud604\uc7ac \uc5f0\uacb0 \uc0c1\ud0dc \ud655\uc778\npool = engine.pool\nprint(f"Pool size: {pool.size()}")\nprint(f"Checked out: {pool.checkedout()}")\nprint(f"Overflow: {pool.overflow()}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\ud480-\ud0c0\uc785",children:"\uc5f0\uacb0 \ud480 \ud0c0\uc785"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.pool import NullPool, StaticPool, QueuePool\n\n# 1. QueuePool (\uae30\ubcf8\uac12, \uad8c\uc7a5)\n# - \uac00\uc7a5 \uc77c\ubc18\uc801, \uba40\ud2f0\uc2a4\ub808\ub4dc \uc548\uc804\nengine = create_engine(\n    'postgresql://...',\n    poolclass=QueuePool,\n    pool_size=10\n)\n\n# 2. NullPool (\ud480 \uc0ac\uc6a9 \uc548 \ud568)\n# - \ub9e4\ubc88 \uc0c8 \uc5f0\uacb0 \uc0dd\uc131, \ud14c\uc2a4\ud2b8/\ub514\ubc84\uae45\uc6a9\nengine = create_engine(\n    'postgresql://...',\n    poolclass=NullPool\n)\n\n# 3. StaticPool (\ub2e8\uc77c \uc5f0\uacb0)\n# - SQLite \uc778\uba54\ubaa8\ub9ac DB\uc6a9\nengine = create_engine(\n    'sqlite:///:memory:',\n    poolclass=StaticPool\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-\ud658\uacbd\ubcc4-\uc124\uc815",children:"\u2699\ufe0f \ud658\uacbd\ubcc4 \uc124\uc815"}),"\n",(0,r.jsx)(n.h3,{id:"\uac1c\ubc1c\ud504\ub85c\ub355\uc158-\ubd84\ub9ac",children:"\uac1c\ubc1c/\ud504\ub85c\ub355\uc158 \ubd84\ub9ac"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"config.py"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import os\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import NullPool, QueuePool\n\nclass Config:\n    """\uae30\ubcf8 \uc124\uc815"""\n    SQLALCHEMY_DATABASE_URI = os.getenv(\n        \'DATABASE_URL\',\n        \'postgresql://postgres:password@localhost/myapp\'\n    )\n    SQLALCHEMY_ECHO = False\n\nclass DevelopmentConfig(Config):\n    """\uac1c\ubc1c \ud658\uacbd"""\n    SQLALCHEMY_ECHO = True\n    SQLALCHEMY_POOL_SIZE = 5\n    SQLALCHEMY_MAX_OVERFLOW = 10\n\nclass ProductionConfig(Config):\n    """\ud504\ub85c\ub355\uc158 \ud658\uacbd"""\n    SQLALCHEMY_POOL_SIZE = 20\n    SQLALCHEMY_MAX_OVERFLOW = 40\n    SQLALCHEMY_POOL_RECYCLE = 3600\n    SQLALCHEMY_POOL_PRE_PING = True\n\nclass TestConfig(Config):\n    """\ud14c\uc2a4\ud2b8 \ud658\uacbd"""\n    SQLALCHEMY_DATABASE_URI = \'postgresql://postgres:password@localhost/test_db\'\n    SQLALCHEMY_POOLCLASS = NullPool\n\n# \ud658\uacbd \uc120\ud0dd\nconfig = {\n    \'development\': DevelopmentConfig,\n    \'production\': ProductionConfig,\n    \'testing\': TestConfig,\n}\n\ndef get_config():\n    env = os.getenv(\'ENV\', \'development\')\n    return config[env]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"database.py"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom config import get_config\n\nconfig = get_config()\n\n# Engine \uc0dd\uc131\nengine = create_engine(\n    config.SQLALCHEMY_DATABASE_URI,\n    echo=config.SQLALCHEMY_ECHO,\n    pool_size=config.SQLALCHEMY_POOL_SIZE,\n    max_overflow=config.SQLALCHEMY_MAX_OVERFLOW,\n    pool_recycle=getattr(config, 'SQLALCHEMY_POOL_RECYCLE', 3600),\n    pool_pre_ping=getattr(config, 'SQLALCHEMY_POOL_PRE_PING', False),\n)\n\n# Session Factory\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine\n)\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"env-\ud30c\uc77c-\uc0ac\uc6a9",children:".env \ud30c\uc77c \uc0ac\uc6a9"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:".env"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-env",children:"# \ub370\uc774\ud130\ubca0\uc774\uc2a4\nDATABASE_URL=postgresql://postgres:password@localhost:5432/myapp\nDATABASE_POOL_SIZE=10\nDATABASE_MAX_OVERFLOW=20\n\n# \ud658\uacbd\nENV=development\nDEBUG=True\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"config.py"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nDATABASE_URL = os.getenv('DATABASE_URL')\nDATABASE_POOL_SIZE = int(os.getenv('DATABASE_POOL_SIZE', 10))\nDATABASE_MAX_OVERFLOW = int(os.getenv('DATABASE_MAX_OVERFLOW', 20))\n\nengine = create_engine(\n    DATABASE_URL,\n    pool_size=DATABASE_POOL_SIZE,\n    max_overflow=DATABASE_MAX_OVERFLOW\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc5f0\uacb0-\ud14c\uc2a4\ud2b8",children:"\ud83d\udd0d \uc5f0\uacb0 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"\uae30\ubcf8-\uc5f0\uacb0-\ud14c\uc2a4\ud2b8",children:"\uae30\ubcf8 \uc5f0\uacb0 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine, text\n\ndef test_connection(database_url):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ud14c\uc2a4\ud2b8"""\n    try:\n        engine = create_engine(database_url)\n        with engine.connect() as conn:\n            result = conn.execute(text("SELECT version()"))\n            version = result.scalar()\n            print(f"\u2713 \uc5f0\uacb0 \uc131\uacf5!")\n            print(f"PostgreSQL \ubc84\uc804: {version}")\n            return True\n    except Exception as e:\n        print(f"\u2717 \uc5f0\uacb0 \uc2e4\ud328: {e}")\n        return False\n\n# \ud14c\uc2a4\ud2b8 \uc2e4\ud589\ntest_connection(\'postgresql://postgres:password@localhost/myapp\')\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\ud480-\ud14c\uc2a4\ud2b8",children:"\uc5f0\uacb0 \ud480 \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import time\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef execute_query(engine, query_id):\n    """\ucffc\ub9ac \uc2e4\ud589 \ud14c\uc2a4\ud2b8"""\n    start = time.time()\n    with engine.connect() as conn:\n        result = conn.execute(text("SELECT pg_sleep(1)"))\n        elapsed = time.time() - start\n        print(f"Query {query_id}: {elapsed:.2f}s")\n\n# \ub3d9\uc2dc \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\nengine = create_engine(\n    \'postgresql://postgres:password@localhost/myapp\',\n    pool_size=5,\n    max_overflow=5\n)\n\nwith ThreadPoolExecutor(max_workers=10) as executor:\n    futures = [executor.submit(execute_query, engine, i)\n               for i in range(10)]\n    for future in futures:\n        future.result()\n\n# pool_size=5, max_overflow=5\uc774\ubbc0\ub85c\n# \ucc98\uc74c 10\uac1c \uc5f0\uacb0 \uc0dd\uc131\n# \uc774\ud6c4 \uc5f0\uacb0 \uc7ac\uc0ac\uc6a9\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-\uc2e4\uc804-\uc124\uc815-\uc608\uc81c",children:"\ud83d\udee0\ufe0f \uc2e4\uc804 \uc124\uc815 \uc608\uc81c"}),"\n",(0,r.jsx)(n.h3,{id:"fastapi-\ud1b5\ud569",children:"FastAPI \ud1b5\ud569"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Depends\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, Session\n\n# Engine \uc0dd\uc131\nSQLALCHEMY_DATABASE_URL = "postgresql://postgres:password@localhost/myapp"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    pool_pre_ping=True,\n    pool_size=10,\n    max_overflow=20\n)\n\n# Session Factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# FastAPI \uc571\napp = FastAPI()\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.get("/users/")\ndef read_users(db: Session = Depends(get_db)):\n    users = db.query(User).all()\n    return users\n'})}),"\n",(0,r.jsx)(n.h3,{id:"docker-compose-\uc124\uc815",children:"Docker Compose \uc124\uc815"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"docker-compose.yml"}),":"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: myapp\n    ports:\n      - "5432:5432"\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n\n  app:\n    build: .\n    environment:\n      DATABASE_URL: postgresql://postgres:password@postgres:5432/myapp\n    depends_on:\n      - postgres\n    ports:\n      - "8000:8000"\n\nvolumes:\n  postgres-data:\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc5f0\uacb0:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import os\nfrom sqlalchemy import create_engine\n\n# Docker \ucee8\ud14c\uc774\ub108 \uac04 \uc5f0\uacb0\nDATABASE_URL = os.getenv(\n    'DATABASE_URL',\n    'postgresql://postgres:password@postgres:5432/myapp'\n)\n\nengine = create_engine(DATABASE_URL)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,r.jsx)(n.h3,{id:"1-\uc5f0\uacb0-\ubb38\uc790\uc5f4-\ubcf4\uc548",children:"1. \uc5f0\uacb0 \ubb38\uc790\uc5f4 \ubcf4\uc548"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import os\nfrom sqlalchemy import create_engine\n\n# \u274c \ub098\uc05c \uc608: \ud558\ub4dc\ucf54\ub529\nengine = create_engine('postgresql://postgres:password@localhost/myapp')\n\n# \u2705 \uc88b\uc740 \uc608: \ud658\uacbd \ubcc0\uc218\nDATABASE_URL = os.getenv('DATABASE_URL')\nengine = create_engine(DATABASE_URL)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-\uc5f0\uacb0-\uc7ac\uc2dc\ub3c4",children:"2. \uc5f0\uacb0 \uc7ac\uc2dc\ub3c4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine\nfrom sqlalchemy.exc import OperationalError\nimport time\n\ndef create_engine_with_retry(url, max_retries=5):\n    """\uc5f0\uacb0 \uc2e4\ud328 \uc2dc \uc7ac\uc2dc\ub3c4"""\n    for attempt in range(max_retries):\n        try:\n            engine = create_engine(url, pool_pre_ping=True)\n            # \uc5f0\uacb0 \ud14c\uc2a4\ud2b8\n            with engine.connect() as conn:\n                conn.execute(text("SELECT 1"))\n            print(f"\u2713 \uc5f0\uacb0 \uc131\uacf5 (\uc2dc\ub3c4 {attempt + 1})")\n            return engine\n        except OperationalError as e:\n            if attempt < max_retries - 1:\n                wait_time = 2 ** attempt\n                print(f"\u2717 \uc5f0\uacb0 \uc2e4\ud328, {wait_time}\ucd08 \ud6c4 \uc7ac\uc2dc\ub3c4...")\n                time.sleep(wait_time)\n            else:\n                raise\n\nengine = create_engine_with_retry(\'postgresql://postgres:password@localhost/myapp\')\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-\ud5ec\uc2a4-\uccb4\ud06c",children:"3. \ud5ec\uc2a4 \uccb4\ud06c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import text\n\ndef health_check(engine):\n    """\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud5ec\uc2a4 \uccb4\ud06c"""\n    try:\n        with engine.connect() as conn:\n            conn.execute(text("SELECT 1"))\n        return {"status": "healthy", "database": "connected"}\n    except Exception as e:\n        return {"status": "unhealthy", "error": str(e)}\n\n# FastAPI \uc5d4\ub4dc\ud3ec\uc778\ud2b8\n@app.get("/health")\ndef health():\n    return health_check(engine)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./models",children:"ORM \ubaa8\ub378 \uc815\uc758"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../intermediate/sessions",children:"\uc138\uc158 \uad00\ub9ac"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../advanced/performance",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsx)(n.p,{children:"\uc5f0\uacb0 \uc124\uc815\uc744 \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c ORM \ubaa8\ub378\uc744 \uc815\uc758\ud574\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,r.jsx)(n.a,{href:"./models",children:"ORM \ubaa8\ub378 \uc815\uc758"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": ",(0,r.jsx)(n.code,{children:"pool_pre_ping=True"}),"\ub97c \uc0ac\uc6a9\ud558\uba74 \ub04a\uc5b4\uc9c4 \uc5f0\uacb0\uc744 \uc790\ub3d9\uc73c\ub85c \uac10\uc9c0\ud558\uace0 \uc7ac\uc5f0\uacb0\ud569\ub2c8\ub2e4. \ud504\ub85c\ub355\uc158\uc5d0\uc11c \ud544\uc218!"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var o=s(6540);const r={},l=o.createContext(r);function i(e){const n=o.useContext(l);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);