"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5528],{4845:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>o,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"sqlalchemy/basic/models","title":"ORM \ubaa8\ub378 \uc815\uc758","description":"SQLAlchemy ORM\uc744 \uc0ac\uc6a9\ud558\uc5ec PostgreSQL \ud14c\uc774\ube14\uc744 Python \ud074\ub798\uc2a4\ub85c \uc815\uc758\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/basic/models.md","sourceDirName":"sqlalchemy/basic","slug":"/sqlalchemy/basic/models","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/basic/models","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/basic/models.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"sqlalchemySidebar","previous":{"title":"PostgreSQL \uc5f0\uacb0 \uc124\uc815","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/basic/connection"},"next":{"title":"\uae30\ubcf8 CRUD \uc791\uc5c5","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/basic/crud"}}');var t=a(4848),l=a(8453);const i={sidebar_position:2},s="ORM \ubaa8\ub378 \uc815\uc758",p={},d=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83c\udfd7\ufe0f Declarative Base",id:"\ufe0f-declarative-base",level:2},{value:"\uae30\ubcf8 \uc124\uc815",id:"\uae30\ubcf8-\uc124\uc815",level:3},{value:"Engine\uacfc Base \uc5f0\uacb0",id:"engine\uacfc-base-\uc5f0\uacb0",level:3},{value:"\ud83d\udccb \uae30\ubcf8 \ubaa8\ub378 \uc815\uc758",id:"-\uae30\ubcf8-\ubaa8\ub378-\uc815\uc758",level:2},{value:"\ub2e8\uc21c \ubaa8\ub378",id:"\ub2e8\uc21c-\ubaa8\ub378",level:3},{value:"\uc644\uc804\ud55c \uc608\uc81c \ubaa8\ub378",id:"\uc644\uc804\ud55c-\uc608\uc81c-\ubaa8\ub378",level:3},{value:"\ud83c\udfa8 PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785",id:"-postgresql-\ub370\uc774\ud130-\ud0c0\uc785",level:2},{value:"\uae30\ubcf8 \ud0c0\uc785",id:"\uae30\ubcf8-\ud0c0\uc785",level:3},{value:"PostgreSQL \ud2b9\ud654 \ud0c0\uc785",id:"postgresql-\ud2b9\ud654-\ud0c0\uc785",level:3},{value:"\ud83d\udd11 \uc81c\uc57d\uc870\uac74 (Constraints)",id:"-\uc81c\uc57d\uc870\uac74-constraints",level:2},{value:"Primary Key",id:"primary-key",level:3},{value:"Unique Constraint",id:"unique-constraint",level:3},{value:"Check Constraint",id:"check-constraint",level:3},{value:"NOT NULL",id:"not-null",level:3},{value:"\ud83d\udcca \uc778\ub371\uc2a4 (Indexes)",id:"-\uc778\ub371\uc2a4-indexes",level:2},{value:"\ub2e8\uc77c \uceec\ub7fc \uc778\ub371\uc2a4",id:"\ub2e8\uc77c-\uceec\ub7fc-\uc778\ub371\uc2a4",level:3},{value:"\ubcf5\ud569 \uc778\ub371\uc2a4",id:"\ubcf5\ud569-\uc778\ub371\uc2a4",level:3},{value:"PostgreSQL \ud2b9\ud654 \uc778\ub371\uc2a4",id:"postgresql-\ud2b9\ud654-\uc778\ub371\uc2a4",level:3},{value:"\ud83d\udd27 \ud14c\uc774\ube14 \uc635\uc158",id:"-\ud14c\uc774\ube14-\uc635\uc158",level:2},{value:"\uae30\ubcf8 \uc635\uc158",id:"\uae30\ubcf8-\uc635\uc158",level:3},{value:"\uc2a4\ud0a4\ub9c8 \uc9c0\uc815",id:"\uc2a4\ud0a4\ub9c8-\uc9c0\uc815",level:3},{value:"\ud83e\uddec \ubaa8\ub378 \uc0c1\uc18d",id:"-\ubaa8\ub378-\uc0c1\uc18d",level:2},{value:"Single Table Inheritance",id:"single-table-inheritance",level:3},{value:"Joined Table Inheritance",id:"joined-table-inheritance",level:3},{value:"\ud83c\udfad Mixin \ud328\ud134",id:"-mixin-\ud328\ud134",level:2},{value:"\ud0c0\uc784\uc2a4\ud0ec\ud504 Mixin",id:"\ud0c0\uc784\uc2a4\ud0ec\ud504-mixin",level:3},{value:"ID\uc640 \ud0c0\uc784\uc2a4\ud0ec\ud504 Mixin",id:"id\uc640-\ud0c0\uc784\uc2a4\ud0ec\ud504-mixin",level:3},{value:"\u2705 \uc720\ud6a8\uc131 \uac80\uc99d",id:"-\uc720\ud6a8\uc131-\uac80\uc99d",level:2},{value:"Python \ub808\ubca8 \uac80\uc99d",id:"python-\ub808\ubca8-\uac80\uc99d",level:3},{value:"\uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108",id:"\uc774\ubca4\ud2b8-\ub9ac\uc2a4\ub108",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 \ubaa8\ub378 \uc608\uc81c",id:"-\uc2e4\uc804-\ubaa8\ub378-\uc608\uc81c",level:2},{value:"\ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c",id:"\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"orm-\ubaa8\ub378-\uc815\uc758",children:"ORM \ubaa8\ub378 \uc815\uc758"})}),"\n",(0,t.jsx)(n.p,{children:"SQLAlchemy ORM\uc744 \uc0ac\uc6a9\ud558\uc5ec PostgreSQL \ud14c\uc774\ube14\uc744 Python \ud074\ub798\uc2a4\ub85c \uc815\uc758\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Declarative Base \uc774\ud574"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \ud14c\uc774\ube14\uacfc \uceec\ub7fc \uc815\uc758"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785 \ud65c\uc6a9"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \uc81c\uc57d\uc870\uac74 \ubc0f \uc778\ub371\uc2a4 \uc124\uc815"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \ubaa8\ub378 \uc0c1\uc18d \ubc0f Mixin \ud328\ud134"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-declarative-base",children:"\ud83c\udfd7\ufe0f Declarative Base"}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc124\uc815",children:"\uae30\ubcf8 \uc124\uc815"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"SQLAlchemy 2.0 \uc2a4\ud0c0\uc77c (\uad8c\uc7a5):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\n# Declarative Base \ud074\ub798\uc2a4\nclass Base(DeclarativeBase):\n    pass\n\n# \uc0ac\uc6a9 \uc608\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\ub808\uac70\uc2dc \uc2a4\ud0c0\uc77c (1.4):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import declarative_base\nfrom sqlalchemy import Column, Integer, String\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc774 \uac00\uc774\ub4dc\ub294 2.0 \uc2a4\ud0c0\uc77c\uc744 \uae30\ubcf8\uc73c\ub85c \ud569\ub2c8\ub2e4."})}),"\n",(0,t.jsx)(n.h3,{id:"engine\uacfc-base-\uc5f0\uacb0",children:"Engine\uacfc Base \uc5f0\uacb0"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n\n# Engine \uc0dd\uc131\nengine = create_engine('postgresql://postgres:password@localhost/myapp')\n\n# \ubaa8\ub4e0 \ud14c\uc774\ube14 \uc0dd\uc131\nBase.metadata.create_all(engine)\n\n# \ud2b9\uc815 \ud14c\uc774\ube14\ub9cc \uc0dd\uc131\nUser.__table__.create(engine, checkfirst=True)\n\n# \ubaa8\ub4e0 \ud14c\uc774\ube14 \uc0ad\uc81c\nBase.metadata.drop_all(engine)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uae30\ubcf8-\ubaa8\ub378-\uc815\uc758",children:"\ud83d\udccb \uae30\ubcf8 \ubaa8\ub378 \uc815\uc758"}),"\n",(0,t.jsx)(n.h3,{id:"\ub2e8\uc21c-\ubaa8\ub378",children:"\ub2e8\uc21c \ubaa8\ub378"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    # Primary Key\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # Required \ud544\ub4dc\n    username: Mapped[str] = mapped_column(String(50))\n    email: Mapped[str] = mapped_column(String(100))\n\n    # Optional \ud544\ub4dc (NULL \ud5c8\uc6a9)\n    full_name: Mapped[str | None] = mapped_column(String(100))\n\n    # \uae30\ubcf8\uac12 \uc124\uc815\n    is_active: Mapped[bool] = mapped_column(default=True)\n\n    def __repr__(self):\n        return f\"<User(id={self.id}, username='{self.username}')>\"\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    full_name VARCHAR(100),\n    is_active BOOLEAN DEFAULT true\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc644\uc804\ud55c-\uc608\uc81c-\ubaa8\ub378",children:"\uc644\uc804\ud55c \uc608\uc81c \ubaa8\ub378"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from datetime import datetime\nfrom sqlalchemy import String, Text, DateTime, func\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    # Primary Key\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # \ud544\uc218 \ud544\ub4dc\n    title: Mapped[str] = mapped_column(String(200))\n    slug: Mapped[str] = mapped_column(String(200), unique=True, index=True)\n    content: Mapped[str] = mapped_column(Text)\n\n    # Optional \ud544\ub4dc\n    summary: Mapped[str | None] = mapped_column(String(500))\n\n    # Boolean\n    is_published: Mapped[bool] = mapped_column(default=False)\n\n    # \ud0c0\uc784\uc2a4\ud0ec\ud504 (\uc11c\ubc84 \uae30\ubcf8\uac12)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now(),\n        onupdate=func.now()\n    )\n\n    # \uc22b\uc790\n    view_count: Mapped[int] = mapped_column(default=0)\n\n    def __repr__(self):\n        return f\"<Article(id={self.id}, title='{self.title}')>\"\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-postgresql-\ub370\uc774\ud130-\ud0c0\uc785",children:"\ud83c\udfa8 PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785"}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\ud0c0\uc785",children:"\uae30\ubcf8 \ud0c0\uc785"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Integer, BigInteger, SmallInteger\nfrom sqlalchemy import String, Text\nfrom sqlalchemy import Boolean\nfrom sqlalchemy import Float, Numeric\nfrom sqlalchemy import Date, Time, DateTime\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    # \uc815\uc218\n    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)\n    stock: Mapped[int] = mapped_column(SmallInteger, default=0)\n\n    # \ubb38\uc790\uc5f4\n    name: Mapped[str] = mapped_column(String(100))\n    description: Mapped[str] = mapped_column(Text)\n    sku: Mapped[str] = mapped_column(String(50), unique=True)\n\n    # \ubd88\ub9b0\n    is_available: Mapped[bool] = mapped_column(Boolean, default=True)\n\n    # \uc22b\uc790 (\uc815\ubc00\ub3c4 \uc911\uc694\ud55c \uae08\uc561)\n    price: Mapped[float] = mapped_column(Numeric(10, 2))  # 12345678.99\n    weight: Mapped[float] = mapped_column(Float)\n\n    # \ub0a0\uc9dc/\uc2dc\uac04\n    manufacturing_date: Mapped[datetime] = mapped_column(Date)\n    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True))\n"})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-\ud2b9\ud654-\ud0c0\uc785",children:"PostgreSQL \ud2b9\ud654 \ud0c0\uc785"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import ARRAY, JSON\nfrom sqlalchemy.dialects.postgresql import UUID, INET, JSONB, ENUM\nimport uuid\n\nclass AdvancedModel(Base):\n    __tablename__ = 'advanced'\n\n    # UUID (PostgreSQL UUID)\n    id: Mapped[uuid.UUID] = mapped_column(\n        UUID(as_uuid=True),\n        primary_key=True,\n        default=uuid.uuid4\n    )\n\n    # JSON/JSONB\n    metadata_json: Mapped[dict] = mapped_column(JSON)\n    settings: Mapped[dict] = mapped_column(JSONB)  # JSONB \uad8c\uc7a5 (\uc778\ub371\uc2f1 \uac00\ub2a5)\n\n    # ARRAY\n    tags: Mapped[list[str]] = mapped_column(ARRAY(String(50)))\n    ratings: Mapped[list[int]] = mapped_column(ARRAY(Integer))\n\n    # INET (IP \uc8fc\uc18c)\n    ip_address: Mapped[str] = mapped_column(INET)\n\n    # ENUM\n    status: Mapped[str] = mapped_column(\n        ENUM('draft', 'published', 'archived', name='status_enum')\n    )\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import Session\n\n# JSONB \uc0ac\uc6a9\nproduct = Product(\n    name=\"Laptop\",\n    settings={'color': 'black', 'warranty': '2 years'}\n)\n\n# ARRAY \uc0ac\uc6a9\narticle = Article(\n    title=\"My Article\",\n    tags=['python', 'sqlalchemy', 'postgresql']\n)\n\n# UUID \uc790\ub3d9 \uc0dd\uc131\nuser = User(username='alice')  # UUID \uc790\ub3d9 \uc0dd\uc131\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc81c\uc57d\uc870\uac74-constraints",children:"\ud83d\udd11 \uc81c\uc57d\uc870\uac74 (Constraints)"}),"\n",(0,t.jsx)(n.h3,{id:"primary-key",children:"Primary Key"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    # \ub2e8\uc77c Primary Key\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n\n# \ubcf5\ud569 Primary Key\nclass OrderItem(Base):\n    __tablename__ = 'order_items'\n\n    order_id: Mapped[int] = mapped_column(primary_key=True)\n    product_id: Mapped[int] = mapped_column(primary_key=True)\n    quantity: Mapped[int]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"unique-constraint",children:"Unique Constraint"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String, UniqueConstraint\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # \ub2e8\uc77c \uceec\ub7fc unique\n    email: Mapped[str] = mapped_column(String(100), unique=True)\n    username: Mapped[str] = mapped_column(String(50), unique=True)\n\n    # \ubcf5\ud569 unique (\ud14c\uc774\ube14 \ub808\ubca8)\n    first_name: Mapped[str] = mapped_column(String(50))\n    last_name: Mapped[str] = mapped_column(String(50))\n\n    __table_args__ = (\n        UniqueConstraint('first_name', 'last_name', name='uq_full_name'),\n    )\n"})}),"\n",(0,t.jsx)(n.h3,{id:"check-constraint",children:"Check Constraint"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import CheckConstraint, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(100))\n    price: Mapped[float]\n    stock: Mapped[int]\n    rating: Mapped[float]\n\n    __table_args__ = (\n        CheckConstraint('price > 0', name='check_price_positive'),\n        CheckConstraint('stock >= 0', name='check_stock_non_negative'),\n        CheckConstraint('rating >= 0 AND rating <= 5', name='check_rating_range'),\n    )\n"})}),"\n",(0,t.jsx)(n.h3,{id:"not-null",children:"NOT NULL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # NOT NULL (\uae30\ubcf8)\n    username: Mapped[str] = mapped_column(String(50))\n\n    # NULL \ud5c8\uc6a9\n    middle_name: Mapped[str | None] = mapped_column(String(50))\n\n    # \uba85\uc2dc\uc801 nullable=False\n    email: Mapped[str] = mapped_column(String(100), nullable=False)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc778\ub371\uc2a4-indexes",children:"\ud83d\udcca \uc778\ub371\uc2a4 (Indexes)"}),"\n",(0,t.jsx)(n.h3,{id:"\ub2e8\uc77c-\uceec\ub7fc-\uc778\ub371\uc2a4",children:"\ub2e8\uc77c \uceec\ub7fc \uc778\ub371\uc2a4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String, Index\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # \uceec\ub7fc \ub808\ubca8 \uc778\ub371\uc2a4\n    email: Mapped[str] = mapped_column(String(100), index=True)\n    username: Mapped[str] = mapped_column(String(50), index=True, unique=True)\n\n    # \uc774\ub984 \uc9c0\uc815\n    created_at: Mapped[datetime] = mapped_column(index=True)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\ubcf5\ud569-\uc778\ub371\uc2a4",children:"\ubcf5\ud569 \uc778\ub371\uc2a4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String, Index, DateTime\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Post(Base):\n    __tablename__ = 'posts'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int]\n    category: Mapped[str] = mapped_column(String(50))\n    created_at: Mapped[datetime] = mapped_column(DateTime)\n    is_published: Mapped[bool]\n\n    # \ubcf5\ud569 \uc778\ub371\uc2a4 (\ud14c\uc774\ube14 \ub808\ubca8)\n    __table_args__ = (\n        Index('idx_user_created', 'user_id', 'created_at'),\n        Index('idx_category_published', 'category', 'is_published'),\n    )\n"})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-\ud2b9\ud654-\uc778\ub371\uc2a4",children:"PostgreSQL \ud2b9\ud654 \uc778\ub371\uc2a4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String, Index, Text\nfrom sqlalchemy.dialects.postgresql import JSONB\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(Text)\n    metadata: Mapped[dict] = mapped_column(JSONB)\n\n    __table_args__ = (\n        # GIN \uc778\ub371\uc2a4 (JSONB\uc6a9)\n        Index('idx_metadata_gin', 'metadata', postgresql_using='gin'),\n\n        # \ubd80\ubd84 \uc778\ub371\uc2a4 (\uc870\uac74\ubd80)\n        Index('idx_published_recent', 'created_at',\n              postgresql_where=Column('is_published') == True),\n\n        # \uc804\ubb38 \uac80\uc0c9 \uc778\ub371\uc2a4\n        Index('idx_content_fulltext', 'content', postgresql_using='gin',\n              postgresql_ops={'content': 'gin_trgm_ops'}),\n    )\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud14c\uc774\ube14-\uc635\uc158",children:"\ud83d\udd27 \ud14c\uc774\ube14 \uc635\uc158"}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc635\uc158",children:"\uae30\ubcf8 \uc635\uc158"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n\n    __table_args__ = {\n        # PostgreSQL \uc804\uc6a9 \uc635\uc158\n        'postgresql_tablespace': 'fast_storage',\n\n        # \ud14c\uc774\ube14 \ucf54\uba58\ud2b8\n        'comment': '\uc0ac\uc6a9\uc790 \uacc4\uc815 \uc815\ubcf4',\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc2a4\ud0a4\ub9c8-\uc9c0\uc815",children:"\uc2a4\ud0a4\ub9c8 \uc9c0\uc815"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class User(Base):\n    __tablename__ = 'users'\n    __table_args__ = {'schema': 'auth'}  # auth.users\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n\nclass Product(Base):\n    __tablename__ = 'products'\n    __table_args__ = {'schema': 'shop'}  # shop.products\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ubaa8\ub378-\uc0c1\uc18d",children:"\ud83e\uddec \ubaa8\ub378 \uc0c1\uc18d"}),"\n",(0,t.jsx)(n.h3,{id:"single-table-inheritance",children:"Single Table Inheritance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Employee(Base):\n    __tablename__ = 'employees'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    type: Mapped[str] = mapped_column(String(50))  # Discriminator\n\n    __mapper_args__ = {\n        'polymorphic_on': type,\n        'polymorphic_identity': 'employee'\n    }\n\nclass Engineer(Employee):\n    # \uac19\uc740 \ud14c\uc774\ube14 \uc0ac\uc6a9\n    programming_language: Mapped[str | None] = mapped_column(String(50))\n\n    __mapper_args__ = {\n        'polymorphic_identity': 'engineer'\n    }\n\nclass Manager(Employee):\n    # \uac19\uc740 \ud14c\uc774\ube14 \uc0ac\uc6a9\n    department: Mapped[str | None] = mapped_column(String(50))\n\n    __mapper_args__ = {\n        'polymorphic_identity': 'manager'\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"joined-table-inheritance",children:"Joined Table Inheritance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Person(Base):\n    __tablename__ = 'people'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50))\n    type: Mapped[str] = mapped_column(String(50))\n\n    __mapper_args__ = {\n        'polymorphic_on': type,\n        'polymorphic_identity': 'person'\n    }\n\nclass Employee(Person):\n    __tablename__ = 'employees'\n\n    id: Mapped[int] = mapped_column(ForeignKey('people.id'), primary_key=True)\n    employee_number: Mapped[str] = mapped_column(String(20))\n\n    __mapper_args__ = {\n        'polymorphic_identity': 'employee'\n    }\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-mixin-\ud328\ud134",children:"\ud83c\udfad Mixin \ud328\ud134"}),"\n",(0,t.jsx)(n.h3,{id:"\ud0c0\uc784\uc2a4\ud0ec\ud504-mixin",children:"\ud0c0\uc784\uc2a4\ud0ec\ud504 Mixin"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\nfrom sqlalchemy import DateTime, func\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass TimestampMixin:\n    """\ud0c0\uc784\uc2a4\ud0ec\ud504 \uc790\ub3d9 \ucd94\uac00"""\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now(),\n        onupdate=func.now()\n    )\n\nclass User(TimestampMixin, Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n    # created_at, updated_at \uc790\ub3d9 \ud3ec\ud568\n\nclass Post(TimestampMixin, Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    # created_at, updated_at \uc790\ub3d9 \ud3ec\ud568\n'})}),"\n",(0,t.jsx)(n.h3,{id:"id\uc640-\ud0c0\uc784\uc2a4\ud0ec\ud504-mixin",children:"ID\uc640 \ud0c0\uc784\uc2a4\ud0ec\ud504 Mixin"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import uuid\nfrom datetime import datetime\nfrom sqlalchemy import DateTime, func\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass IDMixin:\n    """UUID Primary Key"""\n    id: Mapped[uuid.UUID] = mapped_column(\n        UUID(as_uuid=True),\n        primary_key=True,\n        default=uuid.uuid4\n    )\n\nclass TimestampMixin:\n    """\uc0dd\uc131/\uc218\uc815 \uc2dc\uac04"""\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now(),\n        onupdate=func.now()\n    )\n\nclass SoftDeleteMixin:\n    """\uc18c\ud504\ud2b8 \uc0ad\uc81c"""\n    is_deleted: Mapped[bool] = mapped_column(default=False)\n    deleted_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))\n\n# \ubaa8\ub4e0 Mixin \uc801\uc6a9\nclass Article(IDMixin, TimestampMixin, SoftDeleteMixin, Base):\n    __tablename__ = \'articles\'\n\n    title: Mapped[str]\n    content: Mapped[str]\n    # id, created_at, updated_at, is_deleted, deleted_at \uc790\ub3d9 \ud3ec\ud568\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc720\ud6a8\uc131-\uac80\uc99d",children:"\u2705 \uc720\ud6a8\uc131 \uac80\uc99d"}),"\n",(0,t.jsx)(n.h3,{id:"python-\ub808\ubca8-\uac80\uc99d",children:"Python \ub808\ubca8 \uac80\uc99d"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import String, event\nfrom sqlalchemy.orm import Mapped, mapped_column, validates\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n    email: Mapped[str] = mapped_column(String(100))\n    age: Mapped[int | None]\n\n    @validates(\'email\')\n    def validate_email(self, key, email):\n        """\uc774\uba54\uc77c \ud615\uc2dd \uac80\uc99d"""\n        if \'@\' not in email:\n            raise ValueError("Invalid email format")\n        return email.lower()\n\n    @validates(\'age\')\n    def validate_age(self, key, age):\n        """\ub098\uc774 \ubc94\uc704 \uac80\uc99d"""\n        if age is not None and (age < 0 or age > 150):\n            raise ValueError("Age must be between 0 and 150")\n        return age\n\n    @validates(\'username\')\n    def validate_username(self, key, username):\n        """\uc0ac\uc6a9\uc790\uba85 \uac80\uc99d"""\n        if len(username) < 3:\n            raise ValueError("Username must be at least 3 characters")\n        return username\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc774\ubca4\ud2b8-\ub9ac\uc2a4\ub108",children:"\uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import event\n\n@event.listens_for(User, \'before_insert\')\ndef before_insert(mapper, connection, target):\n    """\uc0bd\uc785 \uc804 \ucc98\ub9ac"""\n    # \uc774\uba54\uc77c \uc18c\ubb38\uc790 \ubcc0\ud658\n    target.email = target.email.lower()\n\n    # \uae30\ubcf8\uac12 \uc124\uc815\n    if not target.username:\n        target.username = target.email.split(\'@\')[0]\n\n@event.listens_for(User, \'before_update\')\ndef before_update(mapper, connection, target):\n    """\uc5c5\ub370\uc774\ud2b8 \uc804 \ucc98\ub9ac"""\n    # updated_at\uc740 onupdate\ub85c \uc790\ub3d9 \ucc98\ub9ac\ub418\uc9c0\ub9cc\n    # \ucd94\uac00 \ub85c\uc9c1\uc774 \ud544\uc694\ud558\uba74 \uc5ec\uae30\uc11c\n    pass\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc2e4\uc804-\ubaa8\ub378-\uc608\uc81c",children:"\ud83d\udca1 \uc2e4\uc804 \ubaa8\ub378 \uc608\uc81c"}),"\n",(0,t.jsx)(n.h3,{id:"\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c",children:"\ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import uuid\nfrom datetime import datetime\nfrom sqlalchemy import String, Text, DateTime, func, CheckConstraint\nfrom sqlalchemy.dialects.postgresql import UUID, ARRAY\nfrom sqlalchemy.orm import Mapped, mapped_column, validates\n\nclass Base(DeclarativeBase):\n    pass\n\nclass TimestampMixin:\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now(),\n        onupdate=func.now()\n    )\n\nclass User(TimestampMixin, Base):\n    __tablename__ = 'users'\n\n    id: Mapped[uuid.UUID] = mapped_column(\n        UUID(as_uuid=True),\n        primary_key=True,\n        default=uuid.uuid4\n    )\n    username: Mapped[str] = mapped_column(String(50), unique=True, index=True)\n    email: Mapped[str] = mapped_column(String(100), unique=True, index=True)\n    password_hash: Mapped[str] = mapped_column(String(255))\n    full_name: Mapped[str | None] = mapped_column(String(100))\n    bio: Mapped[str | None] = mapped_column(Text)\n    is_active: Mapped[bool] = mapped_column(default=True)\n    is_admin: Mapped[bool] = mapped_column(default=False)\n\n    @validates('email')\n    def validate_email(self, key, email):\n        if '@' not in email:\n            raise ValueError(\"Invalid email\")\n        return email.lower()\n\nclass Post(TimestampMixin, Base):\n    __tablename__ = 'posts'\n\n    id: Mapped[uuid.UUID] = mapped_column(\n        UUID(as_uuid=True),\n        primary_key=True,\n        default=uuid.uuid4\n    )\n    title: Mapped[str] = mapped_column(String(200), index=True)\n    slug: Mapped[str] = mapped_column(String(200), unique=True, index=True)\n    content: Mapped[str] = mapped_column(Text)\n    summary: Mapped[str | None] = mapped_column(String(500))\n\n    # PostgreSQL ARRAY\n    tags: Mapped[list[str]] = mapped_column(ARRAY(String(50)), default=list)\n\n    # Status\n    status: Mapped[str] = mapped_column(\n        String(20),\n        default='draft',\n        index=True\n    )\n\n    # \ud1b5\uacc4\n    view_count: Mapped[int] = mapped_column(default=0)\n    like_count: Mapped[int] = mapped_column(default=0)\n\n    # \uac8c\uc2dc \uc2dc\uac04\n    published_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))\n\n    __table_args__ = (\n        CheckConstraint(\"status IN ('draft', 'published', 'archived')\",\n                       name='check_status'),\n        CheckConstraint('view_count >= 0', name='check_view_count'),\n        CheckConstraint('like_count >= 0', name='check_like_count'),\n    )\n\n    @validates('status')\n    def validate_status(self, key, status):\n        allowed = ['draft', 'published', 'archived']\n        if status not in allowed:\n            raise ValueError(f\"Status must be one of {allowed}\")\n        return status\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./connection",children:"PostgreSQL \uc5f0\uacb0 \uc124\uc815"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./crud",children:"\uae30\ubcf8 CRUD \uc791\uc5c5"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./data-types",children:"\ub370\uc774\ud130 \ud0c0\uc785 \ub9e4\ud551"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(n.p,{children:"\ubaa8\ub378 \uc815\uc758\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c CRUD \uc791\uc5c5\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"./crud",children:"\uae30\ubcf8 CRUD \uc791\uc5c5"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": PostgreSQL \ud2b9\ud654 \uae30\ub2a5(JSONB, ARRAY, UUID \ub4f1)\uc744 \uc801\uadf9 \ud65c\uc6a9\ud558\uba74 \ub354 \uac15\ub825\ud55c \ubaa8\ub378\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4!"]})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var r=a(6540);const t={},l=r.createContext(t);function i(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);