"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5619],{834:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"oauth/scenarios/mobile-app","title":"\ubaa8\ubc14\uc77c \uc571 OAuth","description":"iOS, Android, React Native \ubaa8\ubc14\uc77c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c OAuth 2.0\uc744 \uc548\uc804\ud558\uac8c \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/oauth/scenarios/mobile-app.md","sourceDirName":"oauth/scenarios","slug":"/oauth/scenarios/mobile-app","permalink":"/docs/oauth/scenarios/mobile-app","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oauth/scenarios/mobile-app.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"oauthSidebar","previous":{"title":"SPA \ud1b5\ud569","permalink":"/docs/oauth/scenarios/spa-integration"}}');var i=t(4848),a=t(8453);const r={sidebar_position:4},s="\ubaa8\ubc14\uc77c \uc571 OAuth",c={},l=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcf1 \ubaa8\ubc14\uc77c\uc758 \ud2b9\uc218\uc131",id:"-\ubaa8\ubc14\uc77c\uc758-\ud2b9\uc218\uc131",level:2},{value:"\ubcf4\uc548 \uace0\ub824\uc0ac\ud56d",id:"\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",level:3},{value:"\u269b\ufe0f React Native \uad6c\ud604",id:"\ufe0f-react-native-\uad6c\ud604",level:2},{value:"1. \uc124\uce58",id:"1-\uc124\uce58",level:3},{value:"2. \uc124\uc815",id:"2-\uc124\uc815",level:3},{value:"iOS (Info.plist)",id:"ios-infoplist",level:4},{value:"Android (AndroidManifest.xml)",id:"android-androidmanifestxml",level:4},{value:"3. OAuth Config",id:"3-oauth-config",level:3},{value:"4. Auth Hook",id:"4-auth-hook",level:3},{value:"5. UI \ucef4\ud3ec\ub10c\ud2b8",id:"5-ui-\ucef4\ud3ec\ub10c\ud2b8",level:3},{value:"\ud83d\udcf1 \ub124\uc774\ud2f0\ube0c \uad6c\ud604",id:"-\ub124\uc774\ud2f0\ube0c-\uad6c\ud604",level:2},{value:"iOS (Swift)",id:"ios-swift",level:3},{value:"Android (Kotlin)",id:"android-kotlin",level:3},{value:"\ud83d\udd12 \ubcf4\uc548 Best Practices",id:"-\ubcf4\uc548-best-practices",level:2},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \uc644\ub8cc!",id:"-\uc644\ub8cc",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\ubaa8\ubc14\uc77c-\uc571-oauth",children:"\ubaa8\ubc14\uc77c \uc571 OAuth"})}),"\n",(0,i.jsx)(n.p,{children:"iOS, Android, React Native \ubaa8\ubc14\uc77c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c OAuth 2.0\uc744 \uc548\uc804\ud558\uac8c \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 \ubaa8\ubc14\uc77c OAuth \ubcf4\uc548 \uc774\ud574"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Authorization Code + PKCE \ud544\uc218"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Custom URL Scheme vs Universal Links"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 React Native \uad6c\ud604"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 \ub124\uc774\ud2f0\ube0c \uad6c\ud604 (iOS/Android)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\ubaa8\ubc14\uc77c\uc758-\ud2b9\uc218\uc131",children:"\ud83d\udcf1 \ubaa8\ubc14\uc77c\uc758 \ud2b9\uc218\uc131"}),"\n",(0,i.jsx)(n.h3,{id:"\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",children:"\ubcf4\uc548 \uace0\ub824\uc0ac\ud56d"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const mobile_challenges = {\n    "\uc571 \ub514\ucef4\ud30c\uc77c": "APK/IPA \ud30c\uc77c\uc5d0\uc11c \ube44\ubc00 \ucd94\ucd9c \uac00\ub2a5",\n    "Custom URL Scheme": "\ub2e4\ub978 \uc571\uc774 \uac00\ub85c\ucc44\uae30 \uac00\ub2a5",\n    "\ud0a4\uccb4\uc778/\ud0a4\uc2a4\ud1a0\uc5b4": "\uc548\uc804\ud55c \uc800\uc7a5\uc18c \ud544\uc694",\n    "\uc6f9\ubdf0 \ubcf4\uc548": "Embedded \uc6f9\ubdf0\ub294 \ud53c\uc2f1 \uc704\ud5d8",\n    "Deep Link": "Intent \ud544\ud130 \ucda9\ub3cc \uac00\ub2a5"\n};\n\nconst mobile_best_practices = {\n    "PKCE": "\u2705 \ud544\uc218 (Client Secret \uc0ac\uc6a9 \uae08\uc9c0)",\n    "System Browser": "\u2705 Chrome Custom Tabs, SFSafariViewController",\n    "Universal Links": "\u2705 https:// scheme (Custom URL\ubcf4\ub2e4 \uc548\uc804)",\n    "Secure Storage": "\u2705 Keychain (iOS), Keystore (Android)",\n    "Certificate Pinning": "\u2705 MITM \ubc29\uc9c0 (\uc120\ud0dd)"\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-react-native-\uad6c\ud604",children:"\u269b\ufe0f React Native \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"1-\uc124\uce58",children:"1. \uc124\uce58"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# React Native \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\nnpx react-native init MobileOAuthApp\ncd MobileOAuthApp\n\n# OAuth \ub77c\uc774\ube0c\ub7ec\ub9ac\nnpm install react-native-app-auth\nnpm install @react-native-async-storage/async-storage\n\n# iOS \uc758\uc874\uc131\ncd ios && pod install && cd ..\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-\uc124\uc815",children:"2. \uc124\uc815"}),"\n",(0,i.jsx)(n.h4,{id:"ios-infoplist",children:"iOS (Info.plist)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"\x3c!-- ios/MobileOAuthApp/Info.plist --\x3e\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLName</key>\n        <string>com.myapp.oauth</string>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>com.myapp</string>\n        </array>\n    </dict>\n</array>\n"})}),"\n",(0,i.jsx)(n.h4,{id:"android-androidmanifestxml",children:"Android (AndroidManifest.xml)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'\x3c!-- android/app/src/main/AndroidManifest.xml --\x3e\n<activity\n    android:name=".MainActivity"\n    android:launchMode="singleTask">\n    <intent-filter>\n        <action android:name="android.intent.action.VIEW" />\n        <category android:name="android.intent.category.DEFAULT" />\n        <category android:name="android.intent.category.BROWSABLE" />\n        <data\n            android:scheme="com.myapp"\n            android:host="oauth" />\n    </intent-filter>\n</activity>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-oauth-config",children:"3. OAuth Config"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// src/config/oauth.ts\nimport { authorize, refresh, revoke } from 'react-native-app-auth';\n\nexport const oauthConfig = {\n    // Google\n    google: {\n        issuer: 'https://accounts.google.com',\n        clientId: 'YOUR_CLIENT_ID.apps.googleusercontent.com',\n        redirectUrl: 'com.myapp:/oauth/callback',\n        scopes: ['openid', 'email', 'profile'],\n        serviceConfiguration: {\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n            tokenEndpoint: 'https://oauth2.googleapis.com/token',\n            revocationEndpoint: 'https://oauth2.googleapis.com/revoke'\n        }\n    },\n    // GitHub\n    github: {\n        clientId: 'YOUR_GITHUB_CLIENT_ID',\n        redirectUrl: 'com.myapp:/oauth/callback',\n        scopes: ['user:email'],\n        serviceConfiguration: {\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n            tokenEndpoint: 'https://github.com/login/oauth/access_token',\n            revocationEndpoint: 'https://github.com/settings/connections/applications'\n        }\n    }\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-auth-hook",children:"4. Auth Hook"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useAuth.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { authorize, refresh, revoke } from 'react-native-app-auth';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { oauthConfig } from '../config/oauth';\n\ninterface AuthState {\n    accessToken: string | null;\n    refreshToken: string | null;\n    idToken: string | null;\n    isAuthenticated: boolean;\n    isLoading: boolean;\n}\n\ninterface User {\n    id: string;\n    email: string;\n    name: string;\n    picture: string;\n}\n\nexport const useAuth = () => {\n    const [authState, setAuthState] = useState<AuthState>({\n        accessToken: null,\n        refreshToken: null,\n        idToken: null,\n        isAuthenticated: false,\n        isLoading: true\n    });\n\n    const [user, setUser] = useState<User | null>(null);\n\n    /**\n     * \ub85c\uadf8\uc778\n     */\n    const login = useCallback(async (provider: 'google' | 'github') => {\n        try {\n            // react-native-app-auth\uac00 PKCE \uc790\ub3d9 \ucc98\ub9ac\n            const result = await authorize(oauthConfig[provider]);\n\n            // \ud1a0\ud070 \uc800\uc7a5\n            await AsyncStorage.setItem('access_token', result.accessToken);\n            await AsyncStorage.setItem('refresh_token', result.refreshToken);\n            if (result.idToken) {\n                await AsyncStorage.setItem('id_token', result.idToken);\n            }\n\n            setAuthState({\n                accessToken: result.accessToken,\n                refreshToken: result.refreshToken,\n                idToken: result.idToken || null,\n                isAuthenticated: true,\n                isLoading: false\n            });\n\n            // \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30\n            await fetchUser(result.accessToken, provider);\n\n        } catch (error) {\n            console.error('Login failed:', error);\n            setAuthState(prev => ({\n                ...prev,\n                isLoading: false\n            }));\n        }\n    }, []);\n\n    /**\n     * \ud1a0\ud070 \uac31\uc2e0\n     */\n    const refreshAccessToken = useCallback(async (provider: 'google' | 'github') => {\n        const refreshToken = authState.refreshToken;\n        if (!refreshToken) return;\n\n        try {\n            const result = await refresh(oauthConfig[provider], {\n                refreshToken\n            });\n\n            await AsyncStorage.setItem('access_token', result.accessToken);\n\n            setAuthState(prev => ({\n                ...prev,\n                accessToken: result.accessToken\n            }));\n\n            return result.accessToken;\n\n        } catch (error) {\n            console.error('Token refresh failed:', error);\n            await logout();\n        }\n    }, [authState.refreshToken]);\n\n    /**\n     * \ub85c\uadf8\uc544\uc6c3\n     */\n    const logout = useCallback(async () => {\n        try {\n            // Token revocation (\uc120\ud0dd)\n            if (authState.accessToken) {\n                await revoke(oauthConfig.google, {\n                    tokenToRevoke: authState.accessToken,\n                    sendClientId: true\n                });\n            }\n\n            // \uc800\uc7a5\uc18c \uc815\ub9ac\n            await AsyncStorage.multiRemove([\n                'access_token',\n                'refresh_token',\n                'id_token'\n            ]);\n\n            setAuthState({\n                accessToken: null,\n                refreshToken: null,\n                idToken: null,\n                isAuthenticated: false,\n                isLoading: false\n            });\n\n            setUser(null);\n\n        } catch (error) {\n            console.error('Logout failed:', error);\n        }\n    }, [authState.accessToken]);\n\n    /**\n     * \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30\n     */\n    const fetchUser = useCallback(async (\n        accessToken: string,\n        provider: 'google' | 'github'\n    ) => {\n        try {\n            const endpoint = provider === 'google'\n                ? 'https://www.googleapis.com/oauth2/v2/userinfo'\n                : 'https://api.github.com/user';\n\n            const response = await fetch(endpoint, {\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                }\n            });\n\n            const data = await response.json();\n\n            if (provider === 'google') {\n                setUser({\n                    id: data.id,\n                    email: data.email,\n                    name: data.name,\n                    picture: data.picture\n                });\n            } else if (provider === 'github') {\n                setUser({\n                    id: data.id.toString(),\n                    email: data.email,\n                    name: data.name || data.login,\n                    picture: data.avatar_url\n                });\n            }\n\n        } catch (error) {\n            console.error('Failed to fetch user:', error);\n        }\n    }, []);\n\n    /**\n     * \ucd08\uae30\ud654 (\uc800\uc7a5\ub41c \ud1a0\ud070 \ub85c\ub4dc)\n     */\n    useEffect(() => {\n        const loadTokens = async () => {\n            try {\n                const [accessToken, refreshToken, idToken] = await AsyncStorage.multiGet([\n                    'access_token',\n                    'refresh_token',\n                    'id_token'\n                ]);\n\n                const access = accessToken[1];\n                const refresh = refreshToken[1];\n                const id = idToken[1];\n\n                if (access) {\n                    setAuthState({\n                        accessToken: access,\n                        refreshToken: refresh,\n                        idToken: id,\n                        isAuthenticated: true,\n                        isLoading: false\n                    });\n\n                    // \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30\n                    await fetchUser(access, 'google');\n                } else {\n                    setAuthState(prev => ({\n                        ...prev,\n                        isLoading: false\n                    }));\n                }\n            } catch (error) {\n                console.error('Failed to load tokens:', error);\n                setAuthState(prev => ({\n                    ...prev,\n                    isLoading: false\n                }));\n            }\n        };\n\n        loadTokens();\n    }, [fetchUser]);\n\n    return {\n        ...authState,\n        user,\n        login,\n        logout,\n        refreshAccessToken\n    };\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-ui-\ucef4\ud3ec\ub10c\ud2b8",children:"5. UI \ucef4\ud3ec\ub10c\ud2b8"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// App.tsx\nimport React from 'react';\nimport {\n    SafeAreaView,\n    View,\n    Text,\n    TouchableOpacity,\n    Image,\n    StyleSheet,\n    ActivityIndicator\n} from 'react-native';\nimport { useAuth } from './src/hooks/useAuth';\n\nconst App = () => {\n    const { isAuthenticated, isLoading, user, login, logout } = useAuth();\n\n    if (isLoading) {\n        return (\n            <View style={styles.container}>\n                <ActivityIndicator size=\"large\" color=\"#4285f4\" />\n            </View>\n        );\n    }\n\n    if (!isAuthenticated) {\n        return (\n            <SafeAreaView style={styles.container}>\n                <Text style={styles.title}>Mobile OAuth Demo</Text>\n\n                <TouchableOpacity\n                    style={[styles.button, styles.googleButton]}\n                    onPress={() => login('google')}\n                >\n                    <Text style={styles.buttonText}>Google\ub85c \ub85c\uadf8\uc778</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                    style={[styles.button, styles.githubButton]}\n                    onPress={() => login('github')}\n                >\n                    <Text style={styles.buttonText}>GitHub\ub85c \ub85c\uadf8\uc778</Text>\n                </TouchableOpacity>\n            </SafeAreaView>\n        );\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <Text style={styles.title}>\ud658\uc601\ud569\ub2c8\ub2e4!</Text>\n\n            {user && (\n                <View style={styles.userInfo}>\n                    <Image\n                        source={{ uri: user.picture }}\n                        style={styles.avatar}\n                    />\n                    <Text style={styles.name}>{user.name}</Text>\n                    <Text style={styles.email}>{user.email}</Text>\n                </View>\n            )}\n\n            <TouchableOpacity\n                style={[styles.button, styles.logoutButton]}\n                onPress={logout}\n            >\n                <Text style={styles.buttonText}>\ub85c\uadf8\uc544\uc6c3</Text>\n            </TouchableOpacity>\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#fff',\n        padding: 20\n    },\n    title: {\n        fontSize: 24,\n        fontWeight: 'bold',\n        marginBottom: 40\n    },\n    button: {\n        width: '100%',\n        padding: 16,\n        borderRadius: 8,\n        marginVertical: 8,\n        alignItems: 'center'\n    },\n    googleButton: {\n        backgroundColor: '#4285f4'\n    },\n    githubButton: {\n        backgroundColor: '#333'\n    },\n    logoutButton: {\n        backgroundColor: '#f44336'\n    },\n    buttonText: {\n        color: '#fff',\n        fontSize: 16,\n        fontWeight: '600'\n    },\n    userInfo: {\n        alignItems: 'center',\n        marginBottom: 40\n    },\n    avatar: {\n        width: 100,\n        height: 100,\n        borderRadius: 50,\n        marginBottom: 16\n    },\n    name: {\n        fontSize: 20,\n        fontWeight: '600',\n        marginBottom: 8\n    },\n    email: {\n        fontSize: 14,\n        color: '#666'\n    }\n});\n\nexport default App;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-\ub124\uc774\ud2f0\ube0c-\uad6c\ud604",children:"\ud83d\udcf1 \ub124\uc774\ud2f0\ube0c \uad6c\ud604"}),"\n",(0,i.jsx)(n.h3,{id:"ios-swift",children:"iOS (Swift)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'// OAuthManager.swift\nimport Foundation\nimport AuthenticationServices\n\nclass OAuthManager: NSObject, ObservableObject {\n    @Published var isAuthenticated = false\n    @Published var user: User?\n\n    private var authSession: ASWebAuthenticationSession?\n\n    // OAuth Config\n    let clientId = "YOUR_CLIENT_ID"\n    let redirectURI = "com.myapp:/oauth/callback"\n    let authEndpoint = "https://accounts.google.com/o/oauth2/v2/auth"\n    let tokenEndpoint = "https://oauth2.googleapis.com/token"\n\n    func login() {\n        // 1. PKCE Code Verifier\n        let codeVerifier = generateCodeVerifier()\n        let codeChallenge = generateCodeChallenge(verifier: codeVerifier)\n\n        // 2. State\n        let state = UUID().uuidString\n\n        // 3. Authorization URL\n        var components = URLComponents(string: authEndpoint)!\n        components.queryItems = [\n            URLQueryItem(name: "client_id", value: clientId),\n            URLQueryItem(name: "redirect_uri", value: redirectURI),\n            URLQueryItem(name: "response_type", value: "code"),\n            URLQueryItem(name: "scope", value: "openid email profile"),\n            URLQueryItem(name: "state", value: state),\n            URLQueryItem(name: "code_challenge", value: codeChallenge),\n            URLQueryItem(name: "code_challenge_method", value: "S256")\n        ]\n\n        // 4. ASWebAuthenticationSession\n        authSession = ASWebAuthenticationSession(\n            url: components.url!,\n            callbackURLScheme: "com.myapp"\n        ) { [weak self] callbackURL, error in\n            guard error == nil,\n                  let url = callbackURL,\n                  let code = URLComponents(url: url, resolvingAgainstBaseURL: false)?\n                    .queryItems?.first(where: { $0.name == "code" })?.value\n            else {\n                return\n            }\n\n            // Token \uad50\ud658\n            self?.exchangeToken(code: code, codeVerifier: codeVerifier)\n        }\n\n        authSession?.presentationContextProvider = self\n        authSession?.start()\n    }\n\n    private func exchangeToken(code: String, codeVerifier: String) {\n        var request = URLRequest(url: URL(string: tokenEndpoint)!)\n        request.httpMethod = "POST"\n        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")\n\n        let body = [\n            "grant_type": "authorization_code",\n            "code": code,\n            "redirect_uri": redirectURI,\n            "client_id": clientId,\n            "code_verifier": codeVerifier\n        ]\n\n        request.httpBody = body.percentEncoded()\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            guard let data = data else { return }\n\n            do {\n                let tokenResponse = try JSONDecoder().decode(TokenResponse.self, from: data)\n\n                // Keychain\uc5d0 \uc800\uc7a5\n                self.saveToKeychain(accessToken: tokenResponse.accessToken)\n\n                DispatchQueue.main.async {\n                    self.isAuthenticated = true\n                }\n            } catch {\n                print("Token exchange failed: \\\\(error)")\n            }\n        }.resume()\n    }\n\n    private func generateCodeVerifier() -> String {\n        var buffer = [UInt8](repeating: 0, count: 32)\n        _ = SecRandomCopyBytes(kSecRandomDefault, buffer.count, &buffer)\n        return Data(buffer).base64EncodedString()\n            .replacingOccurrences(of: "+", with: "-")\n            .replacingOccurrences(of: "/", with: "_")\n            .replacingOccurrences(of: "=", with: "")\n    }\n\n    private func generateCodeChallenge(verifier: String) -> String {\n        guard let data = verifier.data(using: .utf8) else { return "" }\n        var buffer = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))\n        data.withUnsafeBytes {\n            _ = CC_SHA256($0.baseAddress, CC_LONG(data.count), &buffer)\n        }\n        return Data(buffer).base64EncodedString()\n            .replacingOccurrences(of: "+", with: "-")\n            .replacingOccurrences(of: "/", with: "_")\n            .replacingOccurrences(of: "=", with: "")\n    }\n}\n\nextension OAuthManager: ASWebAuthenticationPresentationContextProviding {\n    func presentationAnchor(for session: ASWebAuthenticationSession) -> ASPresentationAnchor {\n        return ASPresentationAnchor()\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"android-kotlin",children:"Android (Kotlin)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'// OAuthManager.kt\nimport android.content.Intent\nimport android.net.Uri\nimport androidx.browser.customtabs.CustomTabsIntent\nimport net.openid.appauth.*\nimport java.security.MessageDigest\nimport java.util.*\n\nclass OAuthManager(private val activity: AppCompatActivity) {\n\n    private val clientId = "YOUR_CLIENT_ID"\n    private val redirectUri = Uri.parse("com.myapp:/oauth/callback")\n\n    private val serviceConfig = AuthorizationServiceConfiguration(\n        Uri.parse("https://accounts.google.com/o/oauth2/v2/auth"), // Auth endpoint\n        Uri.parse("https://oauth2.googleapis.com/token") // Token endpoint\n    )\n\n    fun login() {\n        // PKCE\n        val codeVerifier = CodeVerifierUtil.generateRandomCodeVerifier()\n        val codeChallenge = CodeVerifierUtil.deriveCodeVerifierChallenge(codeVerifier)\n\n        // Authorization Request\n        val authRequest = AuthorizationRequest.Builder(\n            serviceConfig,\n            clientId,\n            ResponseTypeValues.CODE,\n            redirectUri\n        )\n            .setScope("openid email profile")\n            .setCodeVerifier(codeVerifier, codeChallenge, "S256")\n            .build()\n\n        // Custom Tabs\ub85c \uc2dc\uc791\n        val authService = AuthorizationService(activity)\n        val authIntent = authService.getAuthorizationRequestIntent(authRequest)\n\n        activity.startActivityForResult(authIntent, RC_AUTH)\n    }\n\n    fun handleAuthResponse(intent: Intent) {\n        val response = AuthorizationResponse.fromIntent(intent)\n        val error = AuthorizationException.fromIntent(intent)\n\n        if (response != null) {\n            // Token \uad50\ud658\n            val authService = AuthorizationService(activity)\n            authService.performTokenRequest(\n                response.createTokenExchangeRequest()\n            ) { tokenResponse, exception ->\n                if (tokenResponse != null) {\n                    // \uc131\uacf5\n                    val accessToken = tokenResponse.accessToken\n                    saveToken(accessToken)\n                } else {\n                    // \uc2e4\ud328\n                    Log.e("OAuth", "Token exchange failed", exception)\n                }\n            }\n        }\n    }\n\n    private fun saveToken(token: String) {\n        // SharedPreferences (\uc554\ud638\ud654 \uad8c\uc7a5)\n        activity.getSharedPreferences("oauth", Context.MODE_PRIVATE)\n            .edit()\n            .putString("access_token", token)\n            .apply()\n    }\n\n    companion object {\n        const val RC_AUTH = 100\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-\ubcf4\uc548-best-practices",children:"\ud83d\udd12 \ubcf4\uc548 Best Practices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val mobile_security_checklist = listOf(\n    "\u2705 PKCE \ud544\uc218 \uc0ac\uc6a9",\n    "\u2705 System Browser \uc0ac\uc6a9 (ASWebAuthenticationSession, Custom Tabs)",\n    "\u2705 Universal Links / App Links (https://)",\n    "\u2705 Keychain (iOS) / Keystore (Android)\ub85c \ud1a0\ud070 \uc800\uc7a5",\n    "\u2705 Certificate Pinning (MITM \ubc29\uc9c0)",\n    "\u2705 Root/Jailbreak \uac10\uc9c0",\n    "\u2705 \ud1a0\ud070 \ub9cc\ub8cc \uc2dc \uc790\ub3d9 \uac31\uc2e0",\n    "\u274c Embedded WebView \uc0ac\uc6a9 \uae08\uc9c0",\n    "\u274c Client Secret \ud3ec\ud568 \uae08\uc9c0",\n    "\u274c Custom URL Scheme\ub9cc \uc0ac\uc6a9 \uae08\uc9c0"\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../advanced/pkce",children:"PKCE \uad6c\ud604"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../advanced/security",children:"\ubcf4\uc548 Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./spa-integration",children:"SPA \ud1b5\ud569"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-\uc644\ub8cc",children:"\ud83c\udfaf \uc644\ub8cc!"}),"\n",(0,i.jsx)(n.p,{children:"\ucd95\ud558\ud569\ub2c8\ub2e4! OAuth 2.0 / OIDC \uac00\uc774\ub4dc\ub97c \ubaa8\ub450 \ub9c8\uc2a4\ud130\ud588\uc2b5\ub2c8\ub2e4! \ud83c\udf89"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": \ubaa8\ubc14\uc77c\uc5d0\uc11c\ub294 \uc808\ub300 Client Secret\uc744 \ud3ec\ud568\ud558\uc9c0 \ub9c8\uc138\uc694. PKCE\ub85c \ucda9\ubd84\ud788 \uc548\uc804\ud569\ub2c8\ub2e4!"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);