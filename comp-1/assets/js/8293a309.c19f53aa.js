"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[212],{4078:(n,e,E)=>{E.r(e),E.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>r,frontMatter:()=>d,metadata:()=>s,toc:()=>R});const s=JSON.parse('{"id":"database/patterns/common-patterns","title":"\uacf5\ud1b5 \ud328\ud134","description":"\uc2e4\ubb34\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 \ud14c\uc774\ube14 \uc124\uacc4 \ud328\ud134","source":"@site/docs/database/patterns/common-patterns.md","sourceDirName":"database/patterns","slug":"/database/patterns/common-patterns","permalink":"/docs/database/patterns/common-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/database/patterns/common-patterns.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"slug":"/database/patterns/common-patterns"},"sidebar":"databaseSidebar","previous":{"title":"\uc81c\uc57d\uc870\uac74","permalink":"/docs/database/design/constraints"},"next":{"title":"\uc18c\ud504\ud2b8 \uc0ad\uc81c","permalink":"/docs/database/patterns/soft-delete"}}');var t=E(4848),T=E(8453);const d={sidebar_position:1,slug:"/database/patterns/common-patterns"},a="\uacf5\ud1b5 \ud328\ud134",i={},R=[{value:"\ud83c\udfaf \uae30\ubcf8 \ud328\ud134",id:"-\uae30\ubcf8-\ud328\ud134",level:2},{value:"\ud0c0\uc784\uc2a4\ud0ec\ud504 \ud328\ud134",id:"\ud0c0\uc784\uc2a4\ud0ec\ud504-\ud328\ud134",level:3},{value:"UUID \ud328\ud134",id:"uuid-\ud328\ud134",level:3},{value:"\uc18c\ud504\ud2b8 \uc0ad\uc81c \ud328\ud134",id:"\uc18c\ud504\ud2b8-\uc0ad\uc81c-\ud328\ud134",level:3},{value:"\uc0c1\ud0dc \uae30\uacc4 \ud328\ud134",id:"\uc0c1\ud0dc-\uae30\uacc4-\ud328\ud134",level:3},{value:"\ud83d\udd17 \uad00\uacc4 \ud328\ud134",id:"-\uad00\uacc4-\ud328\ud134",level:2},{value:"\ub2e4\ud615\uc131 \uad00\uacc4 \ud328\ud134",id:"\ub2e4\ud615\uc131-\uad00\uacc4-\ud328\ud134",level:3},{value:"\ud0dc\uadf8/\uce74\ud14c\uace0\ub9ac \ud328\ud134",id:"\ud0dc\uadf8\uce74\ud14c\uace0\ub9ac-\ud328\ud134",level:3},{value:"\uacc4\uce35 \uad6c\uc870 \ud328\ud134",id:"\uacc4\uce35-\uad6c\uc870-\ud328\ud134",level:3},{value:"\ud83d\udcca \uc9d1\uacc4 \ud328\ud134",id:"-\uc9d1\uacc4-\ud328\ud134",level:2},{value:"\uce74\uc6b4\ud130 \uce90\uc2dc \ud328\ud134",id:"\uce74\uc6b4\ud130-\uce90\uc2dc-\ud328\ud134",level:3},{value:"\ub204\uc801 \ud569\uacc4 \ud328\ud134",id:"\ub204\uc801-\ud569\uacc4-\ud328\ud134",level:3},{value:"\ud83d\udd10 \ubcf4\uc548 \ud328\ud134",id:"-\ubcf4\uc548-\ud328\ud134",level:2},{value:"\uc0ac\uc6a9\uc790 \uc778\uc99d \ud328\ud134",id:"\uc0ac\uc6a9\uc790-\uc778\uc99d-\ud328\ud134",level:3},{value:"\uc138\uc158 \uad00\ub9ac \ud328\ud134",id:"\uc138\uc158-\uad00\ub9ac-\ud328\ud134",level:3},{value:"\ud83d\udca1 \ud575\uc2ec \uc6d0\uce59",id:"-\ud575\uc2ec-\uc6d0\uce59",level:2},{value:"\ud83d\ude80 \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function N(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,T.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\uacf5\ud1b5-\ud328\ud134",children:"\uacf5\ud1b5 \ud328\ud134"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\uc2e4\ubb34\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 \ud14c\uc774\ube14 \uc124\uacc4 \ud328\ud134"})}),"\n",(0,t.jsx)(e.p,{children:"\ud6a8\uc728\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc124\uacc4\ub97c \uc704\ud574 \uac80\uc99d\ub41c \ud328\ud134\uc744 \ud65c\uc6a9\ud558\uc138\uc694. \ubc14\ud034\ub97c \ub2e4\uc2dc \ubc1c\uba85\ud558\uc9c0 \ub9c8\uc138\uc694!"}),"\n",(0,t.jsx)(e.h2,{id:"-\uae30\ubcf8-\ud328\ud134",children:"\ud83c\udfaf \uae30\ubcf8 \ud328\ud134"}),"\n",(0,t.jsx)(e.h3,{id:"\ud0c0\uc784\uc2a4\ud0ec\ud504-\ud328\ud134",children:"\ud0c0\uc784\uc2a4\ud0ec\ud504 \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\ubaa8\ub4e0 \ud14c\uc774\ube14\uc5d0 \uc0dd\uc131/\uc218\uc815 \uc2dc\uac04\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- \u2705 \uae30\ubcf8 \ud0c0\uc784\uc2a4\ud0ec\ud504\nCREATE TABLE posts (\n    id BIGSERIAL PRIMARY KEY,\n    title VARCHAR(200) NOT NULL,\n    content TEXT,\n\n    -- \uc0dd\uc131 \uc2dc\uac04 (\ubcc0\uacbd \ubd88\uac00)\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,\n\n    -- \uc218\uc815 \uc2dc\uac04 (\uc790\ub3d9 \uac31\uc2e0)\n    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL\n);\n\n-- \ud2b8\ub9ac\uac70\ub85c updated_at \uc790\ub3d9 \uac31\uc2e0\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER update_posts_updated_at\n    BEFORE UPDATE ON posts\n    FOR EACH ROW\n    EXECUTE FUNCTION update_updated_at_column();\n\n-- \uc0ac\uc6a9 \uc608\nINSERT INTO posts (title, content) VALUES\n('First Post', 'Hello World');\n-- created_at, updated_at \uc790\ub3d9 \uc124\uc815\n\nUPDATE posts SET title = 'Updated Title' WHERE id = 1;\n-- updated_at \uc790\ub3d9 \uac31\uc2e0\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uuid-\ud328\ud134",children:"UUID \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\ubd84\uc0b0 \uc2dc\uc2a4\ud15c\uc774\ub098 \uc678\ubd80 \ub178\ucd9c ID\uc5d0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:'-- UUID \ud655\uc7a5 \ud65c\uc131\ud654\nCREATE EXTENSION IF NOT EXISTS "pgcrypto";\n\n-- UUID\ub97c \uae30\ubcf8 \ud0a4\ub85c\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \uc7a5\uc810:\n-- - \uc608\uce21 \ubd88\uac00\ub2a5 (\ubcf4\uc548)\n-- - \ubd84\uc0b0 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ucda9\ub3cc \uc5c6\uc74c\n-- - \ubcd1\ud569 \uc2dc ID \uc7ac\ud560\ub2f9 \ubd88\ud544\uc694\n\n-- \ub2e8\uc810:\n-- - 16\ubc14\uc774\ud2b8 (BIGINT\uc758 2\ubc30)\n-- - \uc778\ub371\uc2a4 \ud06c\uae30 \uc99d\uac00\n-- - \uac00\ub3c5\uc131 \ub0ae\uc74c\n\n-- \u2705 \ud558\uc774\ube0c\ub9ac\ub4dc: BIGSERIAL + UUID\nCREATE TABLE orders (\n    id BIGSERIAL PRIMARY KEY,           -- \ub0b4\ubd80\uc6a9 (JOIN, \uc778\ub371\uc2a4)\n    public_id UUID UNIQUE DEFAULT gen_random_uuid(),  -- \uc678\ubd80\uc6a9 (URL, API)\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    total NUMERIC(10, 2) NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- URL\uc5d0\ub294 public_id \uc0ac\uc6a9\n-- /orders/f47ac10b-58cc-4372-a567-0e02b2c3d479\n\n-- \ub0b4\ubd80 JOIN\uc740 id \uc0ac\uc6a9 (\ube60\ub984)\nSELECT * FROM orders o\nJOIN order_items oi ON o.id = oi.order_id;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\uc18c\ud504\ud2b8-\uc0ad\uc81c-\ud328\ud134",children:"\uc18c\ud504\ud2b8 \uc0ad\uc81c \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\ub370\uc774\ud130\ub97c \uc2e4\uc81c\ub85c \uc0ad\uc81c\ud558\uc9c0 \uc54a\uace0 \ud45c\uc2dc\ub9cc \ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE users (\n    id BIGSERIAL PRIMARY KEY,\n    email VARCHAR(255) NOT NULL,\n    username VARCHAR(50) NOT NULL,\n\n    -- \uc18c\ud504\ud2b8 \uc0ad\uc81c\n    deleted_at TIMESTAMPTZ,  -- NULL = \ud65c\uc131, NOT NULL = \uc0ad\uc81c\ub428\n\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \ud65c\uc131 \uc0ac\uc6a9\uc790\ub9cc \uc870\ud68c\nSELECT * FROM users WHERE deleted_at IS NULL;\n\n-- \uc0ad\uc81c\ub41c \uc0ac\uc6a9\uc790 \ud3ec\ud568\nSELECT * FROM users;\n\n-- \uc18c\ud504\ud2b8 \uc0ad\uc81c \uc2e4\ud589\nUPDATE users\nSET deleted_at = CURRENT_TIMESTAMP\nWHERE id = 1;\n\n-- \ubcf5\uad6c\nUPDATE users\nSET deleted_at = NULL\nWHERE id = 1;\n\n-- \ubdf0\ub85c \ud3b8\uc758\uc131 \ud5a5\uc0c1\nCREATE VIEW active_users AS\nSELECT * FROM users\nWHERE deleted_at IS NULL;\n\n-- \ud65c\uc131 \uc0ac\uc6a9\uc790 \uc870\ud68c\nSELECT * FROM active_users;\n\n-- UNIQUE \uc81c\uc57d\uc870\uac74 (\ud65c\uc131 \uc0ac\uc6a9\uc790\ub9cc)\nCREATE UNIQUE INDEX uq_active_users_email\nON users(email)\nWHERE deleted_at IS NULL;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["\ud83d\udc49 \uc790\uc138\ud55c \ub0b4\uc6a9: ",(0,t.jsx)(e.a,{href:"./soft-delete",children:"\uc18c\ud504\ud2b8 \uc0ad\uc81c \ud328\ud134"})]}),"\n",(0,t.jsx)(e.h3,{id:"\uc0c1\ud0dc-\uae30\uacc4-\ud328\ud134",children:"\uc0c1\ud0dc \uae30\uacc4 \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\uc5d4\ud2f0\ud2f0\uc758 \uc0c1\ud0dc\ub97c \uba85\ud655\ud558\uac8c \uc815\uc758\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- \uc8fc\ubb38 \uc0c1\ud0dc\nCREATE TYPE order_status AS ENUM (\n    'pending',       -- \ub300\uae30\n    'confirmed',     -- \ud655\uc778\ub428\n    'processing',    -- \ucc98\ub9ac\uc911\n    'shipped',       -- \ubc30\uc1a1\uc911\n    'delivered',     -- \ubc30\uc1a1\uc644\ub8cc\n    'cancelled',     -- \ucde8\uc18c\ub428\n    'refunded'       -- \ud658\ubd88\ub428\n);\n\nCREATE TABLE orders (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    status order_status NOT NULL DEFAULT 'pending',\n\n    -- \uc0c1\ud0dc\ubcc4 \ud0c0\uc784\uc2a4\ud0ec\ud504\n    confirmed_at TIMESTAMPTZ,\n    processing_at TIMESTAMPTZ,\n    shipped_at TIMESTAMPTZ,\n    delivered_at TIMESTAMPTZ,\n    cancelled_at TIMESTAMPTZ,\n\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \uc0c1\ud0dc \ubcc0\uacbd \uc774\ub825 \ucd94\uc801\nCREATE TABLE order_status_history (\n    id BIGSERIAL PRIMARY KEY,\n    order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,\n    from_status order_status,\n    to_status order_status NOT NULL,\n    changed_by BIGINT REFERENCES users(id),\n    notes TEXT,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \uc0c1\ud0dc \ubcc0\uacbd \ud2b8\ub9ac\uac70\nCREATE OR REPLACE FUNCTION track_order_status_change()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF OLD.status IS DISTINCT FROM NEW.status THEN\n        INSERT INTO order_status_history (order_id, from_status, to_status)\n        VALUES (NEW.id, OLD.status, NEW.status);\n\n        -- \ud0c0\uc784\uc2a4\ud0ec\ud504 \uc124\uc815\n        CASE NEW.status\n            WHEN 'confirmed' THEN NEW.confirmed_at = CURRENT_TIMESTAMP;\n            WHEN 'processing' THEN NEW.processing_at = CURRENT_TIMESTAMP;\n            WHEN 'shipped' THEN NEW.shipped_at = CURRENT_TIMESTAMP;\n            WHEN 'delivered' THEN NEW.delivered_at = CURRENT_TIMESTAMP;\n            WHEN 'cancelled' THEN NEW.cancelled_at = CURRENT_TIMESTAMP;\n        END CASE;\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER order_status_change\nBEFORE UPDATE ON orders\nFOR EACH ROW\nEXECUTE FUNCTION track_order_status_change();\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\uad00\uacc4-\ud328\ud134",children:"\ud83d\udd17 \uad00\uacc4 \ud328\ud134"}),"\n",(0,t.jsx)(e.h3,{id:"\ub2e4\ud615\uc131-\uad00\uacc4-\ud328\ud134",children:"\ub2e4\ud615\uc131 \uad00\uacc4 \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\uc5ec\ub7ec \ud14c\uc774\ube14\uacfc \uad00\uacc4\ub97c \ub9fa\uc2b5\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- \uc2dc\ub098\ub9ac\uc624: \ub313\uae00\uc744 \uac8c\uc2dc\ubb3c, \uc0ac\uc9c4, \ube44\ub514\uc624\uc5d0 \ub2ec \uc218 \uc788\uc74c\n\n-- \u274c \ub098\uc05c \ubc29\ubc95: NULL \ud5c8\uc6a9 FK\nCREATE TABLE comments (\n    id BIGSERIAL PRIMARY KEY,\n    post_id BIGINT,\n    photo_id BIGINT,\n    video_id BIGINT,\n    content TEXT NOT NULL\n);\n\n-- \u2705 \uc88b\uc740 \ubc29\ubc95 1: \uac1c\ubcc4 \ud14c\uc774\ube14\nCREATE TABLE post_comments (\n    id BIGSERIAL PRIMARY KEY,\n    post_id BIGINT NOT NULL REFERENCES posts(id) ON DELETE CASCADE,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    content TEXT NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE photo_comments (\n    id BIGSERIAL PRIMARY KEY,\n    photo_id BIGINT NOT NULL REFERENCES photos(id) ON DELETE CASCADE,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    content TEXT NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \u2705 \uc88b\uc740 \ubc29\ubc95 2: \uacf5\ud1b5 \ubd80\ubaa8 \ud14c\uc774\ube14\nCREATE TABLE commentable_items (\n    id BIGSERIAL PRIMARY KEY,\n    item_type VARCHAR(20) NOT NULL  -- 'post', 'photo', 'video'\n);\n\nCREATE TABLE posts (\n    id BIGINT PRIMARY KEY REFERENCES commentable_items(id) ON DELETE CASCADE,\n    title VARCHAR(200) NOT NULL,\n    content TEXT\n);\n\nCREATE TABLE photos (\n    id BIGINT PRIMARY KEY REFERENCES commentable_items(id) ON DELETE CASCADE,\n    url VARCHAR(500) NOT NULL\n);\n\nCREATE TABLE comments (\n    id BIGSERIAL PRIMARY KEY,\n    commentable_id BIGINT NOT NULL REFERENCES commentable_items(id) ON DELETE CASCADE,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    content TEXT NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\ud0dc\uadf8\uce74\ud14c\uace0\ub9ac-\ud328\ud134",children:"\ud0dc\uadf8/\uce74\ud14c\uace0\ub9ac \ud328\ud134"}),"\n",(0,t.jsxs)(e.p,{children:["N",":M"," \uad00\uacc4\ub85c \ubd84\ub958 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud569\ub2c8\ub2e4."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- \ud0dc\uadf8 \uc2dc\uc2a4\ud15c\nCREATE TABLE posts (\n    id BIGSERIAL PRIMARY KEY,\n    title VARCHAR(200) NOT NULL,\n    content TEXT,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE tags (\n    id BIGSERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL,\n    slug VARCHAR(50) UNIQUE NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE post_tags (\n    post_id BIGINT NOT NULL REFERENCES posts(id) ON DELETE CASCADE,\n    tag_id BIGINT NOT NULL REFERENCES tags(id) ON DELETE CASCADE,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (post_id, tag_id)\n);\n\n-- \uc778\ub371\uc2a4\nCREATE INDEX idx_post_tags_post ON post_tags(post_id);\nCREATE INDEX idx_post_tags_tag ON post_tags(tag_id);\n\n-- \ud2b9\uc815 \ud0dc\uadf8\uc758 \uac8c\uc2dc\ubb3c \uc870\ud68c\nSELECT p.* FROM posts p\nJOIN post_tags pt ON p.id = pt.post_id\nJOIN tags t ON pt.tag_id = t.id\nWHERE t.slug = 'postgresql';\n\n-- \uc5ec\ub7ec \ud0dc\uadf8 OR \uc870\uac74\nSELECT DISTINCT p.* FROM posts p\nJOIN post_tags pt ON p.id = pt.post_id\nJOIN tags t ON pt.tag_id = t.id\nWHERE t.slug IN ('postgresql', 'database');\n\n-- \uc5ec\ub7ec \ud0dc\uadf8 AND \uc870\uac74 (\ubaa8\ub4e0 \ud0dc\uadf8 \ud3ec\ud568)\nSELECT p.*\nFROM posts p\nWHERE (\n    SELECT COUNT(DISTINCT pt.tag_id)\n    FROM post_tags pt\n    JOIN tags t ON pt.tag_id = t.id\n    WHERE pt.post_id = p.id\n      AND t.slug IN ('postgresql', 'database')\n) = 2;  -- \ud0dc\uadf8 \uac1c\uc218\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uacc4\uce35-\uad6c\uc870-\ud328\ud134",children:"\uacc4\uce35 \uad6c\uc870 \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\ud2b8\ub9ac \uad6c\uc870 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- \uc778\uc811 \ub9ac\uc2a4\ud2b8 \ubaa8\ub378 (Adjacent List)\nCREATE TABLE categories (\n    id BIGSERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    parent_id BIGINT REFERENCES categories(id),\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX idx_categories_parent ON categories(parent_id);\n\n-- \uc0d8\ud50c \ub370\uc774\ud130\nINSERT INTO categories (id, name, parent_id) VALUES\n(1, 'Electronics', NULL),\n(2, 'Computers', 1),\n(3, 'Laptops', 2),\n(4, 'Desktops', 2),\n(5, 'Phones', 1);\n\n-- \uc790\uc2dd \uce74\ud14c\uace0\ub9ac \uc870\ud68c\nSELECT * FROM categories WHERE parent_id = 1;\n\n-- \uc7ac\uadc0 CTE\ub85c \uc804\uccb4 \ud2b8\ub9ac\nWITH RECURSIVE category_tree AS (\n    -- \ucd5c\uc0c1\uc704 \uce74\ud14c\uace0\ub9ac\n    SELECT id, name, parent_id, 0 as level, ARRAY[id] as path\n    FROM categories\n    WHERE parent_id IS NULL\n\n    UNION ALL\n\n    -- \ud558\uc704 \uce74\ud14c\uace0\ub9ac\n    SELECT c.id, c.name, c.parent_id, ct.level + 1, ct.path || c.id\n    FROM categories c\n    JOIN category_tree ct ON c.parent_id = ct.id\n)\nSELECT\n    repeat('  ', level) || name as name,\n    level,\n    path\nFROM category_tree\nORDER BY path;\n\n-- Materialized Path (\uacbd\ub85c \uc800\uc7a5)\nCREATE TABLE categories_mp (\n    id BIGSERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    path VARCHAR(500) NOT NULL UNIQUE,  -- '/1/2/3/'\n    level INTEGER NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX idx_categories_mp_path ON categories_mp(path);\n\n-- \ud558\uc704 \uce74\ud14c\uace0\ub9ac \uc870\ud68c (\ube60\ub984)\nSELECT * FROM categories_mp\nWHERE path LIKE '/1/%';\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\uc9d1\uacc4-\ud328\ud134",children:"\ud83d\udcca \uc9d1\uacc4 \ud328\ud134"}),"\n",(0,t.jsx)(e.h3,{id:"\uce74\uc6b4\ud130-\uce90\uc2dc-\ud328\ud134",children:"\uce74\uc6b4\ud130 \uce90\uc2dc \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\uc790\uc8fc \uc138\ub294 \uac12\uc744 \ubbf8\ub9ac \uacc4\uc0b0\ud574 \uc800\uc7a5\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE posts (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    title VARCHAR(200) NOT NULL,\n    content TEXT,\n\n    -- \uce74\uc6b4\ud130 (\uc5ed\uc815\uaddc\ud654)\n    view_count BIGINT DEFAULT 0,\n    like_count INTEGER DEFAULT 0,\n    comment_count INTEGER DEFAULT 0,\n\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE comments (\n    id BIGSERIAL PRIMARY KEY,\n    post_id BIGINT NOT NULL REFERENCES posts(id) ON DELETE CASCADE,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    content TEXT NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \ud2b8\ub9ac\uac70\ub85c \uc790\ub3d9 \uce74\uc6b4\ud2b8 \uac31\uc2e0\nCREATE OR REPLACE FUNCTION update_post_comment_count()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF TG_OP = 'INSERT' THEN\n        UPDATE posts\n        SET comment_count = comment_count + 1\n        WHERE id = NEW.post_id;\n    ELSIF TG_OP = 'DELETE' THEN\n        UPDATE posts\n        SET comment_count = comment_count - 1\n        WHERE id = OLD.post_id;\n    END IF;\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER update_comment_count\nAFTER INSERT OR DELETE ON comments\nFOR EACH ROW\nEXECUTE FUNCTION update_post_comment_count();\n\n-- \uc870\ud68c (COUNT \uc5c6\uc774)\nSELECT title, comment_count\nFROM posts\nWHERE id = 1;\n\n-- vs COUNT (\ub290\ub9bc)\nSELECT p.title, COUNT(c.id) as comment_count\nFROM posts p\nLEFT JOIN comments c ON p.id = c.post_id\nWHERE p.id = 1\nGROUP BY p.id, p.title;\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\ub204\uc801-\ud569\uacc4-\ud328\ud134",children:"\ub204\uc801 \ud569\uacc4 \ud328\ud134"}),"\n",(0,t.jsx)(e.p,{children:"\uc2dc\uac04\uc5d0 \ub530\ub978 \ub204\uc801 \uac12\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE user_points (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    points INTEGER NOT NULL,  -- \uc99d\uac10\ub7c9\n    balance INTEGER NOT NULL,  -- \ub204\uc801 \uc794\uc561\n    reason VARCHAR(200),\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX idx_user_points_user ON user_points(user_id);\n\n-- \ud3ec\uc778\ud2b8 \uc99d\uac10 \ud568\uc218\nCREATE OR REPLACE FUNCTION add_user_points(\n    p_user_id BIGINT,\n    p_points INTEGER,\n    p_reason VARCHAR(200)\n) RETURNS void AS $$\nDECLARE\n    v_current_balance INTEGER;\nBEGIN\n    -- \ud604\uc7ac \uc794\uc561 \uc870\ud68c\n    SELECT COALESCE(balance, 0) INTO v_current_balance\n    FROM user_points\n    WHERE user_id = p_user_id\n    ORDER BY created_at DESC\n    LIMIT 1;\n\n    -- \uc0c8 \ub808\ucf54\ub4dc \ucd94\uac00\n    INSERT INTO user_points (user_id, points, balance, reason)\n    VALUES (p_user_id, p_points, v_current_balance + p_points, p_reason);\nEND;\n$$ LANGUAGE plpgsql;\n\n-- \uc0ac\uc6a9\nSELECT add_user_points(1, 100, '\uac8c\uc2dc\ubb3c \uc791\uc131');\nSELECT add_user_points(1, -30, '\uc0c1\ud488 \uad6c\ub9e4');\n\n-- \ud604\uc7ac \uc794\uc561 \uc870\ud68c\nSELECT balance\nFROM user_points\nWHERE user_id = 1\nORDER BY created_at DESC\nLIMIT 1;\n\n-- \uc774\ub825 \uc870\ud68c\nSELECT points, balance, reason, created_at\nFROM user_points\nWHERE user_id = 1\nORDER BY created_at DESC;\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\ubcf4\uc548-\ud328\ud134",children:"\ud83d\udd10 \ubcf4\uc548 \ud328\ud134"}),"\n",(0,t.jsx)(e.h3,{id:"\uc0ac\uc6a9\uc790-\uc778\uc99d-\ud328\ud134",children:"\uc0ac\uc6a9\uc790 \uc778\uc99d \ud328\ud134"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE users (\n    id BIGSERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    username VARCHAR(50) UNIQUE NOT NULL,\n\n    -- \ube44\ubc00\ubc88\ud638 (\ud574\uc2dc\ub9cc \uc800\uc7a5)\n    password_hash VARCHAR(255) NOT NULL,\n\n    -- \uc774\uba54\uc77c \uc778\uc99d\n    email_verified BOOLEAN DEFAULT false,\n    email_verification_token VARCHAR(255),\n    email_verified_at TIMESTAMPTZ,\n\n    -- \uacc4\uc815 \uc0c1\ud0dc\n    is_active BOOLEAN DEFAULT true,\n    is_locked BOOLEAN DEFAULT false,\n    locked_until TIMESTAMPTZ,\n\n    -- 2FA\n    two_factor_enabled BOOLEAN DEFAULT false,\n    two_factor_secret VARCHAR(255),\n\n    -- \ub9c8\uc9c0\ub9c9 \ub85c\uadf8\uc778\n    last_login_at TIMESTAMPTZ,\n    last_login_ip INET,\n\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \ube44\ubc00\ubc88\ud638 \uc7ac\uc124\uc815\nCREATE TABLE password_reset_tokens (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n    token VARCHAR(255) UNIQUE NOT NULL,\n    expires_at TIMESTAMPTZ NOT NULL,\n    used_at TIMESTAMPTZ,\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX idx_password_reset_tokens_user ON password_reset_tokens(user_id);\nCREATE INDEX idx_password_reset_tokens_token ON password_reset_tokens(token);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\uc138\uc158-\uad00\ub9ac-\ud328\ud134",children:"\uc138\uc158 \uad00\ub9ac \ud328\ud134"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE user_sessions (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n\n    -- \uc138\uc158 \uc815\ubcf4\n    token_hash VARCHAR(255) UNIQUE NOT NULL,  -- \ud1a0\ud070 \ud574\uc2dc \uc800\uc7a5\n    ip_address INET,\n    user_agent TEXT,\n\n    -- \ub9cc\ub8cc\n    expires_at TIMESTAMPTZ NOT NULL,\n    last_active_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n\n    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX idx_user_sessions_user ON user_sessions(user_id);\nCREATE INDEX idx_user_sessions_expires ON user_sessions(expires_at);\n\n-- \ub9cc\ub8cc\ub41c \uc138\uc158 \uc790\ub3d9 \uc0ad\uc81c\nCREATE OR REPLACE FUNCTION delete_expired_sessions()\nRETURNS void AS $$\nBEGIN\n    DELETE FROM user_sessions\n    WHERE expires_at < CURRENT_TIMESTAMP;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Cron\uc73c\ub85c \uc8fc\uae30\uc801 \uc2e4\ud589 (pg_cron \ud655\uc7a5)\nSELECT cron.schedule('delete-expired-sessions', '0 * * * *',\n    'SELECT delete_expired_sessions()');\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-\ud575\uc2ec-\uc6d0\uce59",children:"\ud83d\udca1 \ud575\uc2ec \uc6d0\uce59"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'pattern_principles = {\n    "\uc7ac\uc0ac\uc6a9": "\uac80\uc99d\ub41c \ud328\ud134\uc744 \ud65c\uc6a9\ud558\ub77c",\n    "\uc77c\uad00\uc131": "\ud504\ub85c\uc81d\ud2b8 \uc804\uccb4\uc5d0\uc11c \ub3d9\uc77c\ud55c \ud328\ud134 \uc0ac\uc6a9",\n    "\ubb38\uc11c\ud654": "\ud328\ud134 \uc120\ud0dd \uc774\uc720\ub97c \uae30\ub85d",\n    "\uc131\ub2a5": "\ud328\ud134 \uc801\uc6a9 \ud6c4 \uc131\ub2a5 \uce21\uc815",\n    "\ub2e8\uc21c\ud568": "\ubcf5\uc7a1\ud55c \ud328\ud134\ubcf4\ub2e4 \ub2e8\uc21c\ud55c \ud328\ud134 \uc6b0\uc120"\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83d\ude80 \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(e.p,{children:"\uacf5\ud1b5 \ud328\ud134\uc744 \ud559\uc2b5\ud588\ub2e4\uba74, \uc774\uc81c \uc18c\ud504\ud2b8 \uc0ad\uc81c \ud328\ud134\uc744 \uae4a\uc774\uc788\uac8c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsxs)(e.p,{children:["\ud83d\udc49 ",(0,t.jsx)(e.a,{href:"./soft-delete",children:"\uc18c\ud504\ud2b8 \uc0ad\uc81c"})]})]})}function r(n={}){const{wrapper:e}={...(0,T.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(N,{...n})}):N(n)}},8453:(n,e,E)=>{E.d(e,{R:()=>d,x:()=>a});var s=E(6540);const t={},T=s.createContext(t);function d(n){const e=s.useContext(T);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),s.createElement(T.Provider,{value:e},n.children)}}}]);