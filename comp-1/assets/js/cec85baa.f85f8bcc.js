"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1889],{773:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"ubuntu/scenarios/scenario-06-ml-ai","title":"\uc2dc\ub098\ub9ac\uc624 6: \uc608\uc9c4\uc758 ML/AI \uac1c\ubc1c \ud658\uacbd","description":"ML \uc5d4\uc9c0\ub2c8\uc5b4 \uc608\uc9c4\uc774 WSL 2\uc5d0\uc11c GPU\ub97c \ud65c\uc6a9\ud558\uc5ec TensorFlow\uc640 PyTorch\ub85c \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \ud6c8\ub828\ud569\ub2c8\ub2e4.","source":"@site/docs/ubuntu/scenarios/scenario-06-ml-ai.md","sourceDirName":"ubuntu/scenarios","slug":"/ubuntu/scenarios/scenario-06-ml-ai","permalink":"/docs/ubuntu/scenarios/scenario-06-ml-ai","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ubuntu/scenarios/scenario-06-ml-ai.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"ubuntuSidebar","previous":{"title":"\uc2dc\ub098\ub9ac\uc624 5: \ud604\uc6b0\uc758 DevOps \uc790\ub3d9\ud654 \ud658\uacbd","permalink":"/docs/ubuntu/scenarios/scenario-05-devops-automation"},"next":{"title":"\uc77c\ubc18\uc801\uc778 \ubb38\uc81c \ud574\uacb0","permalink":"/docs/ubuntu/troubleshooting/common-issues"}}');var r=s(4848),o=s(8453);const t={sidebar_position:7},i="\uc2dc\ub098\ub9ac\uc624 6: \uc608\uc9c4\uc758 ML/AI \uac1c\ubc1c \ud658\uacbd",a={},c=[{value:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85",id:"-\uc0c1\ud669-\uc124\uba85",level:2},{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\u26a1 \uc2e4\uc2b5",id:"-\uc2e4\uc2b5",level:2},{value:"1\ub2e8\uacc4: NVIDIA Driver \ud655\uc778 (Windows)",id:"1\ub2e8\uacc4-nvidia-driver-\ud655\uc778-windows",level:3},{value:"2\ub2e8\uacc4: WSL 2\uc5d0\uc11c CUDA \uc124\uc815",id:"2\ub2e8\uacc4-wsl-2\uc5d0\uc11c-cuda-\uc124\uc815",level:3},{value:"3\ub2e8\uacc4: Python \ud658\uacbd \uc124\uc815",id:"3\ub2e8\uacc4-python-\ud658\uacbd-\uc124\uc815",level:3},{value:"4\ub2e8\uacc4: \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc124\uce58",id:"4\ub2e8\uacc4-\ub525\ub7ec\ub2dd-\ud504\ub808\uc784\uc6cc\ud06c-\uc124\uce58",level:3},{value:"5\ub2e8\uacc4: GPU \ud655\uc778",id:"5\ub2e8\uacc4-gpu-\ud655\uc778",level:3},{value:"6\ub2e8\uacc4: Jupyter Lab \uc124\uc815",id:"6\ub2e8\uacc4-jupyter-lab-\uc124\uc815",level:3},{value:"7\ub2e8\uacc4: \uc774\ubbf8\uc9c0 \ubd84\ub958 \ubaa8\ub378 (TensorFlow)",id:"7\ub2e8\uacc4-\uc774\ubbf8\uc9c0-\ubd84\ub958-\ubaa8\ub378-tensorflow",level:3},{value:"8\ub2e8\uacc4: PyTorch \ubaa8\ub378",id:"8\ub2e8\uacc4-pytorch-\ubaa8\ub378",level:3},{value:"9\ub2e8\uacc4: MLflow\ub85c \uc2e4\ud5d8 \ucd94\uc801",id:"9\ub2e8\uacc4-mlflow\ub85c-\uc2e4\ud5d8-\ucd94\uc801",level:3},{value:"10\ub2e8\uacc4: TensorBoard",id:"10\ub2e8\uacc4-tensorboard",level:3},{value:"\u2705 \uac80\uc99d",id:"-\uac80\uc99d",level:2},{value:"\ud83c\udf93 \ubc30\uc6b4 \ub0b4\uc6a9",id:"-\ubc30\uc6b4-\ub0b4\uc6a9",level:2},{value:"GPU \uac00\uc18d",id:"gpu-\uac00\uc18d",level:3},{value:"ML \uc6cc\ud06c\ud50c\ub85c\uc6b0",id:"ml-\uc6cc\ud06c\ud50c\ub85c\uc6b0",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 \ud301",id:"-\uc2e4\uc804-\ud301",level:2},{value:"1. GPU \uba54\ubaa8\ub9ac \uad00\ub9ac",id:"1-gpu-\uba54\ubaa8\ub9ac-\uad00\ub9ac",level:3},{value:"2. \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc800\uc7a5",id:"2-\uccb4\ud06c\ud3ec\uc778\ud2b8-\uc800\uc7a5",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \uc644\ub8cc!",id:"-\uc644\ub8cc",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\uc2dc\ub098\ub9ac\uc624-6-\uc608\uc9c4\uc758-mlai-\uac1c\ubc1c-\ud658\uacbd",children:"\uc2dc\ub098\ub9ac\uc624 6: \uc608\uc9c4\uc758 ML/AI \uac1c\ubc1c \ud658\uacbd"})}),"\n",(0,r.jsx)(e.p,{children:"ML \uc5d4\uc9c0\ub2c8\uc5b4 \uc608\uc9c4\uc774 WSL 2\uc5d0\uc11c GPU\ub97c \ud65c\uc6a9\ud558\uc5ec TensorFlow\uc640 PyTorch\ub85c \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \ud6c8\ub828\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"-\uc0c1\ud669-\uc124\uba85",children:"\ud83d\udccc \uc0c1\ud669 \uc124\uba85"}),"\n",(0,r.jsx)(e.p,{children:"ML \uc5d4\uc9c0\ub2c8\uc5b4 \uc608\uc9c4\uc740 \uc774\ubbf8\uc9c0 \ubd84\ub958 \ubaa8\ub378\uc744 \uac1c\ubc1c\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. Windows PC\uc5d0 NVIDIA GPU\uac00 \uc788\uc73c\uba70, WSL 2\uc5d0\uc11c CUDA\ub97c \ud65c\uc6a9\ud558\uc5ec \ubaa8\ub378\uc744 \ud6c8\ub828\ud558\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. Jupyter Notebook\uc73c\ub85c \uc2e4\ud5d8\ud558\uace0, MLflow\ub85c \uc2e4\ud5d8\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(e.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u2705 NVIDIA CUDA \ubc0f cuDNN \uc124\uc815"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 Python \ub370\uc774\ud130 \uacfc\ud559 \ud658\uacbd \uad6c\ucd95"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 TensorFlow \ubc0f PyTorch \uc124\uce58"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 Jupyter Lab \ud658\uacbd \uad6c\uc131"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 GPU \uac00\uc18d \ud65c\uc6a9"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 MLflow\ub85c \uc2e4\ud5d8 \ucd94\uc801"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"-\uc2e4\uc2b5",children:"\u26a1 \uc2e4\uc2b5"}),"\n",(0,r.jsx)(e.h3,{id:"1\ub2e8\uacc4-nvidia-driver-\ud655\uc778-windows",children:"1\ub2e8\uacc4: NVIDIA Driver \ud655\uc778 (Windows)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-powershell",children:"# PowerShell\uc5d0\uc11c NVIDIA \ub4dc\ub77c\uc774\ubc84 \ud655\uc778\nnvidia-smi\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ucd9c\ub825:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 535.104.05   Driver Version: 535.104.05   CUDA Version: 12.2   |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce RTX 3080  | 00000000:01:00.0  On |                  N/A |\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2\ub2e8\uacc4-wsl-2\uc5d0\uc11c-cuda-\uc124\uc815",children:"2\ub2e8\uacc4: WSL 2\uc5d0\uc11c CUDA \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# NVIDIA CUDA \ud0a4\uc2a4\ud1a0\uc5b4 \ucd94\uac00\nwget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-keyring_1.1-1_all.deb\nsudo dpkg -i cuda-keyring_1.1-1_all.deb\n\n# \ud328\ud0a4\uc9c0 \uc5c5\ub370\uc774\ud2b8\nsudo apt update\n\n# CUDA Toolkit \uc124\uce58\nsudo apt install -y cuda-toolkit-12-2\n\n# \ud658\uacbd \ubcc0\uc218 \uc124\uc815\ncat >> ~/.bashrc << 'EOF'\nexport PATH=/usr/local/cuda-12.2/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/cuda-12.2/lib64:$LD_LIBRARY_PATH\nEOF\n\nsource ~/.bashrc\n\n# CUDA \ud655\uc778\nnvcc --version\nnvidia-smi  # WSL\uc5d0\uc11c\ub3c4 \uc791\ub3d9!\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3\ub2e8\uacc4-python-\ud658\uacbd-\uc124\uc815",children:"3\ub2e8\uacc4: Python \ud658\uacbd \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# \ud504\ub85c\uc81d\ud2b8 \ub514\ub809\ud1a0\ub9ac \uc0dd\uc131\nmkdir -p ~/projects/ml-image-classifier\ncd ~/projects/ml-image-classifier\n\n# Python \uac00\uc0c1 \ud658\uacbd \uc0dd\uc131\npython3 -m venv venv\nsource venv/bin/activate\n\n# \ud544\uc218 \ud328\ud0a4\uc9c0 \uc5c5\uadf8\ub808\uc774\ub4dc\npip install --upgrade pip setuptools wheel\n"})}),"\n",(0,r.jsx)(e.h3,{id:"4\ub2e8\uacc4-\ub525\ub7ec\ub2dd-\ud504\ub808\uc784\uc6cc\ud06c-\uc124\uce58",children:"4\ub2e8\uacc4: \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc124\uce58"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"requirements.txt"}),":"]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-txt",children:"# \ub370\uc774\ud130 \uacfc\ud559 \uae30\ubcf8\nnumpy==1.26.2\npandas==2.1.3\nmatplotlib==3.8.2\nseaborn==0.13.0\nscikit-learn==1.3.2\n\n# \uc774\ubbf8\uc9c0 \ucc98\ub9ac\nopencv-python==4.8.1.78\nPillow==10.1.0\n\n# TensorFlow (GPU)\ntensorflow[and-cuda]==2.15.0\n\n# PyTorch (GPU)\ntorch==2.1.1+cu121\ntorchvision==0.16.1+cu121\ntorchaudio==2.1.1+cu121\n--extra-index-url https://download.pytorch.org/whl/cu121\n\n# Jupyter\njupyterlab==4.0.9\nipywidgets==8.1.1\njupyter_contrib_nbextensions==0.7.0\n\n# MLOps\nmlflow==2.9.1\ntensorboard==2.15.1\n\n# \uc720\ud2f8\ub9ac\ud2f0\ntqdm==4.66.1\npython-dotenv==1.0.0\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# \uc124\uce58 (\uc2dc\uac04\uc774 \uac78\ub9b4 \uc218 \uc788\uc74c)\npip install -r requirements.txt\n"})}),"\n",(0,r.jsx)(e.h3,{id:"5\ub2e8\uacc4-gpu-\ud655\uc778",children:"5\ub2e8\uacc4: GPU \ud655\uc778"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"test_gpu.py"}),":"]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# TensorFlow GPU \ud655\uc778\nimport tensorflow as tf\nprint("TensorFlow version:", tf.__version__)\nprint("Num GPUs Available:", len(tf.config.list_physical_devices(\'GPU\')))\nprint("GPU Devices:", tf.config.list_physical_devices(\'GPU\'))\n\n# PyTorch GPU \ud655\uc778\nimport torch\nprint("\\nPyTorch version:", torch.__version__)\nprint("CUDA available:", torch.cuda.is_available())\nprint("CUDA version:", torch.version.cuda)\nprint("GPU Count:", torch.cuda.device_count())\nif torch.cuda.is_available():\n    print("GPU Name:", torch.cuda.get_device_name(0))\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"python test_gpu.py\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"\ucd9c\ub825:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"TensorFlow version: 2.15.0\nNum GPUs Available: 1\nGPU Devices: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n\nPyTorch version: 2.1.1+cu121\nCUDA available: True\nCUDA version: 12.1\nGPU Count: 1\nGPU Name: NVIDIA GeForce RTX 3080\n"})}),"\n",(0,r.jsx)(e.h3,{id:"6\ub2e8\uacc4-jupyter-lab-\uc124\uc815",children:"6\ub2e8\uacc4: Jupyter Lab \uc124\uc815"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Jupyter Lab \ud655\uc7a5 \uc124\uce58\njupyter labextension install @jupyter-widgets/jupyterlab-manager\n\n# Jupyter \uc124\uc815 \uc0dd\uc131\njupyter lab --generate-config\n\n# \ube44\ubc00\ubc88\ud638 \uc124\uc815 (\uc120\ud0dd\uc0ac\ud56d)\njupyter lab password\n\n# Jupyter Lab \uc2dc\uc791\njupyter lab --ip=0.0.0.0 --port=8888 --no-browser\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Windows \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c"})," ",(0,r.jsx)(e.code,{children:"http://localhost:8888"})," \uc811\uc18d"]}),"\n",(0,r.jsx)(e.h3,{id:"7\ub2e8\uacc4-\uc774\ubbf8\uc9c0-\ubd84\ub958-\ubaa8\ub378-tensorflow",children:"7\ub2e8\uacc4: \uc774\ubbf8\uc9c0 \ubd84\ub958 \ubaa8\ub378 (TensorFlow)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"notebooks/tensorflow_classifier.ipynb"}),":"]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# === 1. \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8 ===\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# GPU \ud655\uc778\nprint(\"GPU Available:\", tf.config.list_physical_devices('GPU'))\n\n# === 2. \ub370\uc774\ud130 \ub85c\ub4dc (CIFAR-10) ===\n(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()\n\n# \uc815\uaddc\ud654\nx_train = x_train.astype('float32') / 255.0\nx_test = x_test.astype('float32') / 255.0\n\n# \ud074\ub798\uc2a4 \uc774\ub984\nclass_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',\n               'dog', 'frog', 'horse', 'ship', 'truck']\n\nprint(f\"Training set: {x_train.shape}\")\nprint(f\"Test set: {x_test.shape}\")\n\n# === 3. \ub370\uc774\ud130 \uc2dc\uac01\ud654 ===\nplt.figure(figsize=(10, 10))\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(x_train[i])\n    plt.xlabel(class_names[y_train[i][0]])\nplt.show()\n\n# === 4. \ubaa8\ub378 \uc815\uc758 (CNN) ===\nmodel = keras.Sequential([\n    # Conv Block 1\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    layers.BatchNormalization(),\n    layers.Conv2D(32, (3, 3), activation='relu'),\n    layers.BatchNormalization(),\n    layers.MaxPooling2D((2, 2)),\n    layers.Dropout(0.25),\n\n    # Conv Block 2\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.BatchNormalization(),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.BatchNormalization(),\n    layers.MaxPooling2D((2, 2)),\n    layers.Dropout(0.25),\n\n    # Dense Layers\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.summary()\n\n# === 5. \ubaa8\ub378 \ucef4\ud30c\uc77c ===\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n# === 6. \ucf5c\ubc31 \uc124\uc815 ===\ncallbacks = [\n    keras.callbacks.ModelCheckpoint(\n        'best_model.h5',\n        save_best_only=True,\n        monitor='val_accuracy'\n    ),\n    keras.callbacks.EarlyStopping(\n        monitor='val_loss',\n        patience=5,\n        restore_best_weights=True\n    ),\n    keras.callbacks.ReduceLROnPlateau(\n        monitor='val_loss',\n        factor=0.5,\n        patience=3\n    ),\n    keras.callbacks.TensorBoard(\n        log_dir='./logs',\n        histogram_freq=1\n    )\n]\n\n# === 7. \ubaa8\ub378 \ud6c8\ub828 ===\nhistory = model.fit(\n    x_train, y_train,\n    batch_size=128,\n    epochs=50,\n    validation_data=(x_test, y_test),\n    callbacks=callbacks,\n    verbose=1\n)\n\n# === 8. \uacb0\uacfc \uc2dc\uac01\ud654 ===\nplt.figure(figsize=(12, 4))\n\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Train Accuracy')\nplt.plot(history.history['val_accuracy'], label='Val Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.grid(True)\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Train Loss')\nplt.plot(history.history['val_loss'], label='Val Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.grid(True)\n\nplt.show()\n\n# === 9. \ud3c9\uac00 ===\ntest_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)\nprint(f'\\nTest accuracy: {test_acc:.4f}')\n\n# === 10. \uc608\uce21 ===\npredictions = model.predict(x_test[:10])\n\nplt.figure(figsize=(15, 3))\nfor i in range(10):\n    plt.subplot(1, 10, i + 1)\n    plt.imshow(x_test[i])\n    plt.title(f\"Pred: {class_names[np.argmax(predictions[i])]}\\nTrue: {class_names[y_test[i][0]]}\")\n    plt.axis('off')\nplt.show()\n"})}),"\n",(0,r.jsx)(e.h3,{id:"8\ub2e8\uacc4-pytorch-\ubaa8\ub378",children:"8\ub2e8\uacc4: PyTorch \ubaa8\ub378"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"pytorch_classifier.py"}),":"]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms\nimport matplotlib.pyplot as plt\n\n# \ub514\ubc14\uc774\uc2a4 \uc124\uc815\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f\"Using device: {device}\")\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ntransform = transforms.Compose([\n    transforms.RandomHorizontalFlip(),\n    transforms.RandomCrop(32, padding=4),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n])\n\n# \ub370\uc774\ud130 \ub85c\ub4dc\ntrain_dataset = datasets.CIFAR10(\n    root='./data',\n    train=True,\n    download=True,\n    transform=transform\n)\n\ntest_dataset = datasets.CIFAR10(\n    root='./data',\n    train=False,\n    download=True,\n    transform=transform\n)\n\ntrain_loader = DataLoader(train_dataset, batch_size=128, shuffle=True, num_workers=2)\ntest_loader = DataLoader(test_dataset, batch_size=128, shuffle=False, num_workers=2)\n\n# CNN \ubaa8\ub378 \uc815\uc758\nclass CIFAR10Net(nn.Module):\n    def __init__(self):\n        super(CIFAR10Net, self).__init__()\n        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)\n        self.conv2 = nn.Conv2d(32, 32, 3, padding=1)\n        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)\n        self.conv4 = nn.Conv2d(64, 64, 3, padding=1)\n\n        self.pool = nn.MaxPool2d(2, 2)\n        self.dropout1 = nn.Dropout(0.25)\n        self.dropout2 = nn.Dropout(0.5)\n\n        self.fc1 = nn.Linear(64 * 8 * 8, 512)\n        self.fc2 = nn.Linear(512, 10)\n\n        self.bn1 = nn.BatchNorm2d(32)\n        self.bn2 = nn.BatchNorm2d(64)\n\n    def forward(self, x):\n        x = torch.relu(self.conv1(x))\n        x = self.bn1(x)\n        x = torch.relu(self.conv2(x))\n        x = self.bn1(x)\n        x = self.pool(x)\n        x = self.dropout1(x)\n\n        x = torch.relu(self.conv3(x))\n        x = self.bn2(x)\n        x = torch.relu(self.conv4(x))\n        x = self.bn2(x)\n        x = self.pool(x)\n        x = self.dropout1(x)\n\n        x = x.view(-1, 64 * 8 * 8)\n        x = torch.relu(self.fc1(x))\n        x = self.dropout2(x)\n        x = self.fc2(x)\n\n        return x\n\n# \ubaa8\ub378 \ucd08\uae30\ud654\nmodel = CIFAR10Net().to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=3)\n\n# \ud6c8\ub828 \ud568\uc218\ndef train_epoch(model, loader, criterion, optimizer, device):\n    model.train()\n    running_loss = 0.0\n    correct = 0\n    total = 0\n\n    for inputs, labels in loader:\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n        _, predicted = outputs.max(1)\n        total += labels.size(0)\n        correct += predicted.eq(labels).sum().item()\n\n    return running_loss / len(loader), 100. * correct / total\n\n# \ud3c9\uac00 \ud568\uc218\ndef evaluate(model, loader, criterion, device):\n    model.eval()\n    running_loss = 0.0\n    correct = 0\n    total = 0\n\n    with torch.no_grad():\n        for inputs, labels in loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n\n            running_loss += loss.item()\n            _, predicted = outputs.max(1)\n            total += labels.size(0)\n            correct += predicted.eq(labels).sum().item()\n\n    return running_loss / len(loader), 100. * correct / total\n\n# \ud6c8\ub828 \ub8e8\ud504\nnum_epochs = 50\nbest_acc = 0\n\nfor epoch in range(num_epochs):\n    train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n    val_loss, val_acc = evaluate(model, test_loader, criterion, device)\n\n    scheduler.step(val_loss)\n\n    print(f'Epoch {epoch+1}/{num_epochs}:')\n    print(f'  Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%')\n    print(f'  Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%')\n\n    if val_acc > best_acc:\n        best_acc = val_acc\n        torch.save(model.state_dict(), 'best_model_pytorch.pth')\n        print(f'  \u2713 Model saved! (Best Acc: {best_acc:.2f}%)')\n\nprint(f'\\nBest validation accuracy: {best_acc:.2f}%')\n"})}),"\n",(0,r.jsx)(e.h3,{id:"9\ub2e8\uacc4-mlflow\ub85c-\uc2e4\ud5d8-\ucd94\uc801",children:"9\ub2e8\uacc4: MLflow\ub85c \uc2e4\ud5d8 \ucd94\uc801"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"mlflow_tracking.py"}),":"]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'import mlflow\nimport mlflow.tensorflow\nimport tensorflow as tf\n\n# MLflow \uc124\uc815\nmlflow.set_experiment("image-classification")\n\nwith mlflow.start_run():\n    # \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ub85c\uae45\n    mlflow.log_param("batch_size", 128)\n    mlflow.log_param("epochs", 50)\n    mlflow.log_param("optimizer", "adam")\n\n    # \ubaa8\ub378 \ud6c8\ub828 (\uc704\uc758 \ucf54\ub4dc)\n    # history = model.fit(...)\n\n    # \uba54\ud2b8\ub9ad \ub85c\uae45\n    mlflow.log_metric("test_accuracy", test_acc)\n    mlflow.log_metric("test_loss", test_loss)\n\n    # \ubaa8\ub378 \uc800\uc7a5\n    mlflow.tensorflow.log_model(model, "model")\n\n    # \uc544\ud2f0\ud329\ud2b8 \uc800\uc7a5\n    mlflow.log_artifact("training_history.png")\n\nprint("MLflow tracking completed!")\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# MLflow UI \uc2dc\uc791\nmlflow ui --port 5000\n\n# \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c http://localhost:5000 \uc811\uc18d\n"})}),"\n",(0,r.jsx)(e.h3,{id:"10\ub2e8\uacc4-tensorboard",children:"10\ub2e8\uacc4: TensorBoard"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# TensorBoard \uc2dc\uc791\ntensorboard --logdir=./logs --port=6006\n\n# \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c http://localhost:6006 \uc811\uc18d\n"})}),"\n",(0,r.jsx)(e.h2,{id:"-\uac80\uc99d",children:"\u2705 \uac80\uc99d"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# GPU \uc0ac\uc6a9 \ud655\uc778\nnvidia-smi\n\n# Python \ud328\ud0a4\uc9c0 \ud655\uc778\npip list | grep -E 'tensorflow|torch'\n\n# CUDA \ubc84\uc804\nnvcc --version\n\n# \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\nfree -h\n"})}),"\n",(0,r.jsx)(e.h2,{id:"-\ubc30\uc6b4-\ub0b4\uc6a9",children:"\ud83c\udf93 \ubc30\uc6b4 \ub0b4\uc6a9"}),"\n",(0,r.jsx)(e.h3,{id:"gpu-\uac00\uc18d",children:"GPU \uac00\uc18d"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"CUDA"}),": NVIDIA GPU \ucef4\ud4e8\ud305"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"cuDNN"}),": \ub525\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"TensorFlow GPU"}),": \uc790\ub3d9 GPU \ud65c\uc6a9"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"PyTorch CUDA"}),": \uba85\uc2dc\uc801 \ub514\ubc14\uc774\uc2a4 \uad00\ub9ac"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"ml-\uc6cc\ud06c\ud50c\ub85c\uc6b0",children:"ML \uc6cc\ud06c\ud50c\ub85c\uc6b0"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ub370\uc774\ud130 \uc900\ube44"}),": \uc804\ucc98\ub9ac, \uc99d\uac15"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ubaa8\ub378 \uc815\uc758"}),": \uc544\ud0a4\ud14d\ucc98 \uc124\uacc4"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud6c8\ub828"}),": \ucd5c\uc801\ud654 \ubc0f \uc815\uaddc\ud654"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ud3c9\uac00"}),": \uc131\ub2a5 \uce21\uc815"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\ucd94\uc801"}),": MLflow, TensorBoard"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"-\uc2e4\uc804-\ud301",children:"\ud83d\udca1 \uc2e4\uc804 \ud301"}),"\n",(0,r.jsx)(e.h3,{id:"1-gpu-\uba54\ubaa8\ub9ac-\uad00\ub9ac",children:"1. GPU \uba54\ubaa8\ub9ac \uad00\ub9ac"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# TensorFlow GPU \uba54\ubaa8\ub9ac \uc81c\ud55c\ngpus = tf.config.list_physical_devices('GPU')\nif gpus:\n    tf.config.set_logical_device_configuration(\n        gpus[0],\n        [tf.config.LogicalDeviceConfiguration(memory_limit=4096)]\n    )\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-\uccb4\ud06c\ud3ec\uc778\ud2b8-\uc800\uc7a5",children:"2. \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc800\uc7a5"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# PyTorch \uccb4\ud06c\ud3ec\uc778\ud2b8\ntorch.save({\n    'epoch': epoch,\n    'model_state_dict': model.state_dict(),\n    'optimizer_state_dict': optimizer.state_dict(),\n    'loss': loss,\n}, 'checkpoint.pth')\n"})}),"\n",(0,r.jsx)(e.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.tensorflow.org/guide/gpu",children:"TensorFlow GPU \uac00\uc774\ub4dc"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://pytorch.org/docs/stable/cuda.html",children:"PyTorch CUDA"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.nvidia.com/cuda/wsl-user-guide/",children:"NVIDIA CUDA WSL"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"-\uc644\ub8cc",children:"\ud83c\udfaf \uc644\ub8cc!"}),"\n",(0,r.jsx)(e.p,{children:"\uc608\uc9c4\uc740 \uc644\ubcbd\ud55c ML/AI \uac1c\ubc1c \ud658\uacbd\uc744 \uad6c\ucd95\ud588\uc2b5\ub2c8\ub2e4!"}),"\n",(0,r.jsx)(e.p,{children:"\ubaa8\ub4e0 \uc2dc\ub098\ub9ac\uc624\ub97c \uc644\ub8cc\ud558\uc168\uc2b5\ub2c8\ub2e4. \ucd95\ud558\ud569\ub2c8\ub2e4! \ud83c\udf89"}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"\ud83d\udcac \ud1a0\ub860"}),": \uc5b4\ub5a4 ML/AI \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud558\uace0 \uacc4\uc2e0\uac00\uc694?"]})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>i});var l=s(6540);const r={},o=l.createContext(r);function t(n){const e=l.useContext(o);return l.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),l.createElement(o.Provider,{value:e},n.children)}}}]);