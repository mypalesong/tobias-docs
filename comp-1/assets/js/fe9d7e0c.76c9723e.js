"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7684],{8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(6540);const r={},a=n.createContext(r);function o(e){const s=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(a.Provider,{value:s},e.children)}},8832:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"sqlalchemy/scenarios/testing","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc2a4\ud305","description":"SQLAlchemy \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud6a8\uacfc\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc804\ub7b5\uacfc \ud328\ud134\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/scenarios/testing.md","sourceDirName":"sqlalchemy/scenarios","slug":"/sqlalchemy/scenarios/testing","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/scenarios/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/scenarios/testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"sqlalchemySidebar","previous":{"title":"FastAPI + SQLAlchemy \ud1b5\ud569","permalink":"/tobias-docs/comp-1/docs/sqlalchemy/scenarios/fastapi-integration"}}');var r=t(4848),a=t(8453);const o={sidebar_position:4},i="\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc2a4\ud305",c={},d=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udce6 \ud544\uc218 \ud328\ud0a4\uc9c0",id:"-\ud544\uc218-\ud328\ud0a4\uc9c0",level:2},{value:"\ud83d\udd27 \ud14c\uc2a4\ud2b8 \uc124\uc815",id:"-\ud14c\uc2a4\ud2b8-\uc124\uc815",level:2},{value:"conftest.py",id:"conftestpy",level:3},{value:"\ud83c\udfed Factory Pattern",id:"-factory-pattern",level:2},{value:"factories.py",id:"factoriespy",level:3},{value:"\ud83e\uddea Unit Tests",id:"-unit-tests",level:2},{value:"tests/test_models.py",id:"teststest_modelspy",level:3},{value:"tests/test_crud.py",id:"teststest_crudpy",level:3},{value:"tests/test_services.py",id:"teststest_servicespy",level:3},{value:"\ud83d\ude80 Integration Tests (FastAPI)",id:"-integration-tests-fastapi",level:2},{value:"tests/test_api_users.py",id:"teststest_api_userspy",level:3},{value:"tests/test_api_products.py",id:"teststest_api_productspy",level:3},{value:"\ud83c\udfaf \ud14c\uc2a4\ud2b8 \uc720\ud2f8\ub9ac\ud2f0",id:"-\ud14c\uc2a4\ud2b8-\uc720\ud2f8\ub9ac\ud2f0",level:2},{value:"tests/utils.py",id:"testsutilspy",level:3},{value:"\ud83d\udca1 \ud14c\uc2a4\ud2b8 Best Practices",id:"-\ud14c\uc2a4\ud2b8-best-practices",level:2},{value:"1. AAA \ud328\ud134",id:"1-aaa-\ud328\ud134",level:3},{value:"2. Fixture \uc7ac\uc0ac\uc6a9",id:"2-fixture-\uc7ac\uc0ac\uc6a9",level:3},{value:"3. Parametrize",id:"3-parametrize",level:3},{value:"\ud83d\udd0d \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0",id:"-\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",level:2},{value:"pytest-cov \uc0ac\uc6a9",id:"pytest-cov-\uc0ac\uc6a9",level:3},{value:".coveragerc",id:"coveragerc",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uaca9\ub9ac",id:"1-\ud14c\uc2a4\ud2b8-\ub370\uc774\ud130-\uaca9\ub9ac",level:3},{value:"2. Factory \ud65c\uc6a9",id:"2-factory-\ud65c\uc6a9",level:3},{value:"3. Mock \uc2e0\uc911\ud788 \uc0ac\uc6a9",id:"3-mock-\uc2e0\uc911\ud788-\uc0ac\uc6a9",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"\ub370\uc774\ud130\ubca0\uc774\uc2a4-\ud14c\uc2a4\ud305",children:"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc2a4\ud305"})}),"\n",(0,r.jsx)(s.p,{children:"SQLAlchemy \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud6a8\uacfc\uc801\uc778 \ud14c\uc2a4\ud2b8 \uc804\ub7b5\uacfc \ud328\ud134\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,r.jsx)(s.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"\u2705 pytest fixtures \ud65c\uc6a9"}),"\n",(0,r.jsx)(s.li,{children:"\u2705 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uaca9\ub9ac"}),"\n",(0,r.jsx)(s.li,{children:"\u2705 Factory Pattern (Factory Boy)"}),"\n",(0,r.jsx)(s.li,{children:"\u2705 Mock\uacfc Stub"}),"\n",(0,r.jsx)(s.li,{children:"\u2705 FastAPI \ud1b5\ud569 \ud14c\uc2a4\ud2b8"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"-\ud544\uc218-\ud328\ud0a4\uc9c0",children:"\ud83d\udce6 \ud544\uc218 \ud328\ud0a4\uc9c0"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"pip install pytest pytest-asyncio factory-boy faker httpx\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-\ud14c\uc2a4\ud2b8-\uc124\uc815",children:"\ud83d\udd27 \ud14c\uc2a4\ud2b8 \uc124\uc815"}),"\n",(0,r.jsx)(s.h3,{id:"conftestpy",children:"conftest.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom sqlalchemy.pool import StaticPool\n\nfrom models.base import Base\nfrom core.database import get_db\nfrom main import app\n\n# \ud14c\uc2a4\ud2b8 DB (in-memory SQLite)\nSQLALCHEMY_TEST_DATABASE_URL = "sqlite:///:memory:"\n\n@pytest.fixture(scope="function")\ndef test_engine():\n    """\ud14c\uc2a4\ud2b8 \uc5d4\uc9c4 (\ud568\uc218\ub9c8\ub2e4 \uc0c8\ub85c \uc0dd\uc131)"""\n    engine = create_engine(\n        SQLALCHEMY_TEST_DATABASE_URL,\n        connect_args={"check_same_thread": False},\n        poolclass=StaticPool,\n    )\n    Base.metadata.create_all(bind=engine)\n    yield engine\n    Base.metadata.drop_all(bind=engine)\n    engine.dispose()\n\n@pytest.fixture(scope="function")\ndef test_db(test_engine):\n    """\ud14c\uc2a4\ud2b8 DB \uc138\uc158"""\n    TestingSessionLocal = sessionmaker(\n        autocommit=False,\n        autoflush=False,\n        bind=test_engine\n    )\n\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@pytest.fixture(scope="function")\ndef client(test_db):\n    """FastAPI \ud14c\uc2a4\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8"""\n    def override_get_db():\n        try:\n            yield test_db\n        finally:\n            pass\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    from fastapi.testclient import TestClient\n    with TestClient(app) as c:\n        yield c\n\n    app.dependency_overrides.clear()\n'})}),"\n",(0,r.jsx)(s.h2,{id:"-factory-pattern",children:"\ud83c\udfed Factory Pattern"}),"\n",(0,r.jsx)(s.h3,{id:"factoriespy",children:"factories.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from factory import Factory, Faker, SubFactory\nfrom factory.alchemy import SQLAlchemyModelFactory\nfrom faker import Faker as FakerInstance\n\nfrom models.user import User\nfrom models.product import Product\nfrom models.order import Order, OrderItem\n\nfake = FakerInstance()\n\nclass UserFactory(SQLAlchemyModelFactory):\n    class Meta:\n        model = User\n        sqlalchemy_session_persistence = \"commit\"\n\n    email = Faker('email')\n    username = Faker('user_name')\n    password_hash = Faker('sha256')\n    first_name = Faker('first_name')\n    last_name = Faker('last_name')\n    is_active = True\n    is_verified = False\n    is_admin = False\n\n    @classmethod\n    def _create(cls, model_class, *args, **kwargs):\n        \"\"\"\ube44\ubc00\ubc88\ud638 \ud574\uc2f1\"\"\"\n        if 'password' in kwargs:\n            from core.security import get_password_hash\n            kwargs['password_hash'] = get_password_hash(kwargs.pop('password'))\n        return super()._create(model_class, *args, **kwargs)\n\nclass ProductFactory(SQLAlchemyModelFactory):\n    class Meta:\n        model = Product\n        sqlalchemy_session_persistence = \"commit\"\n\n    name = Faker('word')\n    slug = Faker('slug')\n    description = Faker('text')\n    price = Faker('pydecimal', left_digits=4, right_digits=2, positive=True)\n    cost = Faker('pydecimal', left_digits=4, right_digits=2, positive=True)\n    stock = Faker('random_int', min=0, max=1000)\n    sku = Faker('ean13')\n    is_active = True\n    is_featured = False\n\nclass OrderFactory(SQLAlchemyModelFactory):\n    class Meta:\n        model = Order\n        sqlalchemy_session_persistence = \"commit\"\n\n    user = SubFactory(UserFactory)\n    order_number = Faker('uuid4')\n    status = 'pending'\n    subtotal = Faker('pydecimal', left_digits=4, right_digits=2, positive=True)\n    shipping_cost = Faker('pydecimal', left_digits=2, right_digits=2, positive=True)\n    tax = Faker('pydecimal', left_digits=3, right_digits=2, positive=True)\n    total = Faker('pydecimal', left_digits=4, right_digits=2, positive=True)\n    shipping_address = {}\n\nclass OrderItemFactory(SQLAlchemyModelFactory):\n    class Meta:\n        model = OrderItem\n        sqlalchemy_session_persistence = \"commit\"\n\n    order = SubFactory(OrderFactory)\n    product = SubFactory(ProductFactory)\n    product_name = Faker('word')\n    price = Faker('pydecimal', left_digits=3, right_digits=2, positive=True)\n    quantity = Faker('random_int', min=1, max=10)\n    subtotal = Faker('pydecimal', left_digits=4, right_digits=2, positive=True)\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-unit-tests",children:"\ud83e\uddea Unit Tests"}),"\n",(0,r.jsx)(s.h3,{id:"teststest_modelspy",children:"tests/test_models.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"import pytest\nfrom models.user import User\nfrom models.product import Product\nfrom core.security import verify_password\n\ndef test_create_user(test_db):\n    \"\"\"\uc0ac\uc6a9\uc790 \uc0dd\uc131 \ud14c\uc2a4\ud2b8\"\"\"\n    user = User(\n        email='test@example.com',\n        username='testuser',\n        password_hash='hashed_password'\n    )\n\n    test_db.add(user)\n    test_db.commit()\n\n    assert user.id is not None\n    assert user.email == 'test@example.com'\n    assert user.is_active is True\n\ndef test_create_product(test_db):\n    \"\"\"\uc81c\ud488 \uc0dd\uc131 \ud14c\uc2a4\ud2b8\"\"\"\n    product = Product(\n        name='Test Product',\n        slug='test-product',\n        description='Description',\n        price=99.99,\n        cost=50.00,\n        stock=100,\n        sku='TEST-001'\n    )\n\n    test_db.add(product)\n    test_db.commit()\n\n    assert product.id is not None\n    assert product.price == 99.99\n\ndef test_product_stock_constraint(test_db):\n    \"\"\"\uc7ac\uace0 \uc81c\uc57d\uc870\uac74 \ud14c\uc2a4\ud2b8\"\"\"\n    from sqlalchemy.exc import IntegrityError\n\n    product = Product(\n        name='Test Product',\n        slug='test-product',\n        description='Description',\n        price=99.99,\n        cost=50.00,\n        stock=-10,  # \u274c \uc74c\uc218 \uc7ac\uace0\n        sku='TEST-001'\n    )\n\n    test_db.add(product)\n\n    with pytest.raises(IntegrityError):\n        test_db.commit()\n"})}),"\n",(0,r.jsx)(s.h3,{id:"teststest_crudpy",children:"tests/test_crud.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\nfrom crud.user import user as user_crud\nfrom schemas.user import UserCreate, UserUpdate\n\ndef test_create_user(test_db):\n    """\uc0ac\uc6a9\uc790 CRUD \uc0dd\uc131"""\n    user_in = UserCreate(\n        email=\'test@example.com\',\n        username=\'testuser\',\n        password=\'testpassword123\'\n    )\n\n    user = user_crud.create(test_db, user_in)\n    test_db.commit()\n\n    assert user.email == \'test@example.com\'\n    assert user.username == \'testuser\'\n    assert user.password_hash != \'testpassword123\'  # \ud574\uc2f1\ub428\n\ndef test_get_user_by_email(test_db, factories):\n    """\uc774\uba54\uc77c\ub85c \uc0ac\uc6a9\uc790 \uc870\ud68c"""\n    from factories import UserFactory\n\n    # Factory\ub85c \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create()\n    test_db.commit()\n\n    # \uc870\ud68c\n    found_user = user_crud.get_by_email(test_db, user.email)\n    assert found_user is not None\n    assert found_user.id == user.id\n\ndef test_update_user(test_db):\n    """\uc0ac\uc6a9\uc790 CRUD \uc5c5\ub370\uc774\ud2b8"""\n    from factories import UserFactory\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create()\n    test_db.commit()\n\n    # \uc5c5\ub370\uc774\ud2b8\n    user_in = UserUpdate(first_name=\'NewName\')\n    updated_user = user_crud.update(test_db, user, user_in)\n    test_db.commit()\n\n    assert updated_user.first_name == \'NewName\'\n\ndef test_delete_user(test_db):\n    """\uc0ac\uc6a9\uc790 CRUD \uc0ad\uc81c"""\n    from factories import UserFactory\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create()\n    test_db.commit()\n\n    user_id = user.id\n\n    # \uc0ad\uc81c\n    user_crud.delete(test_db, user_id)\n    test_db.commit()\n\n    # \ud655\uc778\n    deleted_user = user_crud.get(test_db, user_id)\n    assert deleted_user is None\n'})}),"\n",(0,r.jsx)(s.h3,{id:"teststest_servicespy",children:"tests/test_services.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\nfrom services.inventory import InventoryService\nfrom services.order import OrderService\nfrom factories import ProductFactory, UserFactory, AddressFactory\n\ndef test_reserve_stock(test_db):\n    """\uc7ac\uace0 \uc608\uc57d \ud14c\uc2a4\ud2b8"""\n    ProductFactory._meta.sqlalchemy_session = test_db\n    product = ProductFactory.create(stock=100)\n    test_db.commit()\n\n    service = InventoryService(test_db)\n\n    # \uc7ac\uace0 \uc608\uc57d\n    result = service.reserve_stock(product.id, 10)\n    test_db.commit()\n\n    assert result is True\n    assert product.stock == 90\n\ndef test_reserve_stock_insufficient(test_db):\n    """\uc7ac\uace0 \ubd80\uc871 \ud14c\uc2a4\ud2b8"""\n    ProductFactory._meta.sqlalchemy_session = test_db\n    product = ProductFactory.create(stock=5)\n    test_db.commit()\n\n    service = InventoryService(test_db)\n\n    # \uc7ac\uace0 \ubd80\uc871\n    result = service.reserve_stock(product.id, 10)\n\n    assert result is False\n    assert product.stock == 5  # \ubcc0\uacbd \uc548 \ub428\n\ndef test_create_order(test_db):\n    """\uc8fc\ubb38 \uc0dd\uc131 \ud14c\uc2a4\ud2b8"""\n    # Setup\n    UserFactory._meta.sqlalchemy_session = test_db\n    ProductFactory._meta.sqlalchemy_session = test_db\n    AddressFactory._meta.sqlalchemy_session = test_db\n\n    user = UserFactory.create()\n    address = AddressFactory.create(user=user)\n    product = ProductFactory.create(stock=100, price=50.00)\n\n    test_db.commit()\n\n    # \uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \uc0dd\uc131 (\uac04\ub2e8\ud788)\n    from models.cart import CartItem\n    cart_item = CartItem(\n        user_id=user.id,\n        product_id=product.id,\n        quantity=2\n    )\n    test_db.add(cart_item)\n    test_db.commit()\n\n    # \uc8fc\ubb38 \uc0dd\uc131\n    service = OrderService(test_db)\n    order = service.create_order(user.id, [cart_item], address.id)\n    test_db.commit()\n\n    # \uac80\uc99d\n    assert order.id is not None\n    assert order.user_id == user.id\n    assert order.status == \'pending\'\n    assert len(order.items) == 1\n    assert product.stock == 98  # \uc7ac\uace0 \ucc28\uac10\n'})}),"\n",(0,r.jsx)(s.h2,{id:"-integration-tests-fastapi",children:"\ud83d\ude80 Integration Tests (FastAPI)"}),"\n",(0,r.jsx)(s.h3,{id:"teststest_api_userspy",children:"tests/test_api_users.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\nfrom fastapi import status\n\ndef test_create_user(client):\n    """\uc0ac\uc6a9\uc790 \ub4f1\ub85d API"""\n    response = client.post(\n        "/api/v1/users/",\n        json={\n            "email": "test@example.com",\n            "username": "testuser",\n            "password": "testpassword123"\n        }\n    )\n\n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data["email"] == "test@example.com"\n    assert data["username"] == "testuser"\n    assert "password" not in data\n\ndef test_create_user_duplicate_email(client, test_db):\n    """\uc911\ubcf5 \uc774\uba54\uc77c \ub4f1\ub85d \ud14c\uc2a4\ud2b8"""\n    from factories import UserFactory\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create(email=\'existing@example.com\')\n    test_db.commit()\n\n    response = client.post(\n        "/api/v1/users/",\n        json={\n            "email": "existing@example.com",\n            "username": "newuser",\n            "password": "password123"\n        }\n    )\n\n    assert response.status_code == status.HTTP_400_BAD_REQUEST\n    assert "already registered" in response.json()["detail"]\n\ndef test_login(client, test_db):\n    """\ub85c\uadf8\uc778 API"""\n    from factories import UserFactory\n    from core.security import get_password_hash\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create(\n        email=\'test@example.com\',\n        password_hash=get_password_hash(\'testpass123\')\n    )\n    test_db.commit()\n\n    response = client.post(\n        "/api/v1/auth/login",\n        data={\n            "username": "test@example.com",\n            "password": "testpass123"\n        }\n    )\n\n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert "access_token" in data\n    assert data["token_type"] == "bearer"\n\ndef test_read_user_me(client, test_db):\n    """\ud604\uc7ac \uc0ac\uc6a9\uc790 \uc815\ubcf4 API"""\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ubc0f \ub85c\uadf8\uc778\n    from factories import UserFactory\n    from core.security import get_password_hash, create_access_token\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create()\n    test_db.commit()\n\n    # JWT \ud1a0\ud070 \uc0dd\uc131\n    access_token = create_access_token(data={"sub": str(user.id)})\n\n    # \uc778\uc99d\ub41c \uc694\uccad\n    response = client.get(\n        "/api/v1/users/me",\n        headers={"Authorization": f"Bearer {access_token}"}\n    )\n\n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert data["id"] == str(user.id)\n    assert data["email"] == user.email\n'})}),"\n",(0,r.jsx)(s.h3,{id:"teststest_api_productspy",children:"tests/test_api_products.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\nfrom fastapi import status\n\ndef test_read_products(client, test_db):\n    """\uc81c\ud488 \ubaa9\ub85d API"""\n    from factories import ProductFactory\n\n    ProductFactory._meta.sqlalchemy_session = test_db\n\n    # \uc81c\ud488 \uc0dd\uc131\n    for _ in range(5):\n        ProductFactory.create()\n    test_db.commit()\n\n    response = client.get("/api/v1/products/")\n\n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert data["total"] == 5\n    assert len(data["items"]) == 5\n\ndef test_read_product(client, test_db):\n    """\uc81c\ud488 \uc0c1\uc138 API"""\n    from factories import ProductFactory\n\n    ProductFactory._meta.sqlalchemy_session = test_db\n    product = ProductFactory.create()\n    test_db.commit()\n\n    response = client.get(f"/api/v1/products/{product.id}")\n\n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert data["id"] == str(product.id)\n    assert data["name"] == product.name\n\ndef test_create_product_admin(client, test_db):\n    """\uc81c\ud488 \uc0dd\uc131 API (\uad00\ub9ac\uc790)"""\n    from factories import UserFactory\n    from core.security import create_access_token\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    admin = UserFactory.create(is_admin=True)\n    test_db.commit()\n\n    access_token = create_access_token(data={"sub": str(admin.id)})\n\n    response = client.post(\n        "/api/v1/products/",\n        headers={"Authorization": f"Bearer {access_token}"},\n        json={\n            "name": "New Product",\n            "description": "Description",\n            "price": 99.99,\n            "cost": 50.00,\n            "stock": 100,\n            "sku": "NEW-001"\n        }\n    )\n\n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data["name"] == "New Product"\n\ndef test_create_product_forbidden(client, test_db):\n    """\uc81c\ud488 \uc0dd\uc131 \uad8c\ud55c \uc5c6\uc74c"""\n    from factories import UserFactory\n    from core.security import create_access_token\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create(is_admin=False)\n    test_db.commit()\n\n    access_token = create_access_token(data={"sub": str(user.id)})\n\n    response = client.post(\n        "/api/v1/products/",\n        headers={"Authorization": f"Bearer {access_token}"},\n        json={\n            "name": "New Product",\n            "description": "Description",\n            "price": 99.99,\n            "cost": 50.00,\n            "stock": 100,\n            "sku": "NEW-001"\n        }\n    )\n\n    assert response.status_code == status.HTTP_403_FORBIDDEN\n'})}),"\n",(0,r.jsx)(s.h2,{id:"-\ud14c\uc2a4\ud2b8-\uc720\ud2f8\ub9ac\ud2f0",children:"\ud83c\udfaf \ud14c\uc2a4\ud2b8 \uc720\ud2f8\ub9ac\ud2f0"}),"\n",(0,r.jsx)(s.h3,{id:"testsutilspy",children:"tests/utils.py"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'from typing import Dict\nfrom fastapi.testclient import TestClient\nfrom core.security import create_access_token\nfrom models.user import User\n\ndef get_auth_headers(user: User) -> Dict[str, str]:\n    """\uc778\uc99d \ud5e4\ub354 \uc0dd\uc131"""\n    access_token = create_access_token(data={"sub": str(user.id)})\n    return {"Authorization": f"Bearer {access_token}"}\n\ndef create_test_user(db, **kwargs):\n    """\ud14c\uc2a4\ud2b8 \uc0ac\uc6a9\uc790 \uc0dd\uc131"""\n    from factories import UserFactory\n\n    UserFactory._meta.sqlalchemy_session = db\n    user = UserFactory.create(**kwargs)\n    db.commit()\n    return user\n\ndef create_test_product(db, **kwargs):\n    """\ud14c\uc2a4\ud2b8 \uc81c\ud488 \uc0dd\uc131"""\n    from factories import ProductFactory\n\n    ProductFactory._meta.sqlalchemy_session = db\n    product = ProductFactory.create(**kwargs)\n    db.commit()\n    return product\n'})}),"\n",(0,r.jsx)(s.h2,{id:"-\ud14c\uc2a4\ud2b8-best-practices",children:"\ud83d\udca1 \ud14c\uc2a4\ud2b8 Best Practices"}),"\n",(0,r.jsx)(s.h3,{id:"1-aaa-\ud328\ud134",children:"1. AAA \ud328\ud134"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"def test_example(test_db):\n    # Arrange (\uc900\ube44)\n    user = UserFactory.create()\n    test_db.commit()\n\n    # Act (\uc2e4\ud589)\n    result = user_crud.get(test_db, user.id)\n\n    # Assert (\uac80\uc99d)\n    assert result is not None\n    assert result.id == user.id\n"})}),"\n",(0,r.jsx)(s.h3,{id:"2-fixture-\uc7ac\uc0ac\uc6a9",children:"2. Fixture \uc7ac\uc0ac\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'@pytest.fixture\ndef admin_user(test_db):\n    """\uad00\ub9ac\uc790 \uc0ac\uc6a9\uc790 Fixture"""\n    from factories import UserFactory\n\n    UserFactory._meta.sqlalchemy_session = test_db\n    user = UserFactory.create(is_admin=True)\n    test_db.commit()\n    return user\n\ndef test_admin_action(admin_user, test_db):\n    # admin_user \uc0ac\uc6a9\n    assert admin_user.is_admin is True\n'})}),"\n",(0,r.jsx)(s.h3,{id:"3-parametrize",children:"3. Parametrize"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'@pytest.mark.parametrize("stock,quantity,expected", [\n    (100, 10, True),  # \uc7ac\uace0 \ucda9\ubd84\n    (5, 10, False),   # \uc7ac\uace0 \ubd80\uc871\n    (10, 10, True),   # \uc7ac\uace0 \uc815\ud655\ud788 \uc77c\uce58\n])\ndef test_reserve_stock_scenarios(test_db, stock, quantity, expected):\n    from factories import ProductFactory\n    from services.inventory import InventoryService\n\n    ProductFactory._meta.sqlalchemy_session = test_db\n    product = ProductFactory.create(stock=stock)\n    test_db.commit()\n\n    service = InventoryService(test_db)\n    result = service.reserve_stock(product.id, quantity)\n\n    assert result is expected\n'})}),"\n",(0,r.jsx)(s.h2,{id:"-\ud14c\uc2a4\ud2b8-\ucee4\ubc84\ub9ac\uc9c0",children:"\ud83d\udd0d \ud14c\uc2a4\ud2b8 \ucee4\ubc84\ub9ac\uc9c0"}),"\n",(0,r.jsx)(s.h3,{id:"pytest-cov-\uc0ac\uc6a9",children:"pytest-cov \uc0ac\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"# \uc124\uce58\npip install pytest-cov\n\n# \uc2e4\ud589\npytest --cov=models --cov=crud --cov=api tests/\n\n# HTML \ub9ac\ud3ec\ud2b8\npytest --cov=. --cov-report=html tests/\n"})}),"\n",(0,r.jsx)(s.h3,{id:"coveragerc",children:".coveragerc"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ini",children:"[run]\nomit =\n    */tests/*\n    */venv/*\n    */alembic/*\n    */conftest.py\n\n[report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise AssertionError\n    raise NotImplementedError\n    if __name__ == .__main__.:\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,r.jsx)(s.h3,{id:"1-\ud14c\uc2a4\ud2b8-\ub370\uc774\ud130-\uaca9\ub9ac",children:"1. \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uaca9\ub9ac"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# \u2705 \uac01 \ud14c\uc2a4\ud2b8\ub9c8\ub2e4 \ub3c5\ub9bd\ub41c DB\n@pytest.fixture(scope="function")\ndef test_db():\n    # ...\n\n# \u274c \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\uac00 \uac19\uc740 DB \uacf5\uc720\n@pytest.fixture(scope="session")\ndef test_db():\n    # ...\n'})}),"\n",(0,r.jsx)(s.h3,{id:"2-factory-\ud65c\uc6a9",children:"2. Factory \ud65c\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"# \u2705 Factory \uc0ac\uc6a9 (\uac04\uacb0)\nuser = UserFactory.create()\n\n# \u274c \uc218\ub3d9 \uc0dd\uc131 (\uc7a5\ud669)\nuser = User(\n    email='test@example.com',\n    username='testuser',\n    password_hash='...',\n    is_active=True,\n    is_verified=False\n)\n"})}),"\n",(0,r.jsx)(s.h3,{id:"3-mock-\uc2e0\uc911\ud788-\uc0ac\uc6a9",children:"3. Mock \uc2e0\uc911\ud788 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"# \u2705 \uc678\ubd80 \uc11c\ube44\uc2a4\ub9cc Mock\nfrom unittest.mock import patch\n\n@patch('services.email.send_email')\ndef test_user_registration(mock_send_email, test_db):\n    # \uc2e4\uc81c DB \uc0ac\uc6a9, \uc774\uba54\uc77c\ub9cc Mock\n    pass\n\n# \u274c DB\uae4c\uc9c0 Mock (\ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc758\ubbf8 \uc5c6\uc74c)\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"./fastapi-integration",children:"FastAPI \ud1b5\ud569"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"./ecommerce",children:"\uc804\uc790\uc0c1\uac70\ub798 \ub370\uc774\ud130\ubca0\uc774\uc2a4"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://docs.pytest.org/",children:"pytest \uacf5\uc2dd \ubb38\uc11c"})}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"\ud83d\udca1 \ud301"}),": \ud14c\uc2a4\ud2b8\ub294 \ubb38\uc11c\uc785\ub2c8\ub2e4! \uba85\ud655\ud55c \ud14c\uc2a4\ud2b8 \uc774\ub984\uacfc \uad6c\uc870\ub85c \ucf54\ub4dc\uc758 \uc758\ub3c4\ub97c \ud45c\ud604\ud558\uc138\uc694!"]})]})}function m(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);