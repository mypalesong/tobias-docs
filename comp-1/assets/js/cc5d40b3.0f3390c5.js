"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5047],{7749:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"sqlalchemy/intermediate/queries","title":"\ucffc\ub9ac \uc791\uc131","description":"SQLAlchemy\uc758 \uac15\ub825\ud55c \ucffc\ub9ac API\ub85c \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \uc870\ud68c\ub97c Python\uc2a4\ub7fd\uac8c \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/intermediate/queries.md","sourceDirName":"sqlalchemy/intermediate","slug":"/sqlalchemy/intermediate/queries","permalink":"/docs/sqlalchemy/intermediate/queries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/intermediate/queries.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"sqlalchemySidebar","previous":{"title":"\uad00\uacc4(Relationship) \uc815\uc758","permalink":"/docs/sqlalchemy/intermediate/relationships"},"next":{"title":"Join\uacfc \ub85c\ub529 \uc804\ub7b5","permalink":"/docs/sqlalchemy/intermediate/joins"}}');var r=n(4848),l=n(8453);const i={sidebar_position:3},a="\ucffc\ub9ac \uc791\uc131",c={},o=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcd6 \uae30\ubcf8 \ucffc\ub9ac \ud328\ud134",id:"-\uae30\ubcf8-\ucffc\ub9ac-\ud328\ud134",level:2},{value:"SQLAlchemy 2.0 \uc2a4\ud0c0\uc77c",id:"sqlalchemy-20-\uc2a4\ud0c0\uc77c",level:3},{value:"\ud83d\udd0d select() - \uae30\ubcf8 \uc870\ud68c",id:"-select---\uae30\ubcf8-\uc870\ud68c",level:2},{value:"\uc804\uccb4 \uc870\ud68c",id:"\uc804\uccb4-\uc870\ud68c",level:3},{value:"\ud2b9\uc815 \uceec\ub7fc\ub9cc \uc870\ud68c",id:"\ud2b9\uc815-\uceec\ub7fc\ub9cc-\uc870\ud68c",level:3},{value:"\ub2e8\uc77c \uacb0\uacfc \uc870\ud68c",id:"\ub2e8\uc77c-\uacb0\uacfc-\uc870\ud68c",level:3},{value:"\u26a1 where() - \uc870\uac74 \ud544\ud130\ub9c1",id:"-where---\uc870\uac74-\ud544\ud130\ub9c1",level:2},{value:"\uae30\ubcf8 \uc870\uac74",id:"\uae30\ubcf8-\uc870\uac74",level:3},{value:"\uc5ec\ub7ec \uc870\uac74 (AND)",id:"\uc5ec\ub7ec-\uc870\uac74-and",level:3},{value:"OR \uc870\uac74",id:"or-\uc870\uac74",level:3},{value:"NOT \uc870\uac74",id:"not-\uc870\uac74",level:3},{value:"\ubb38\uc790\uc5f4 \ud328\ud134 \ub9e4\uce6d",id:"\ubb38\uc790\uc5f4-\ud328\ud134-\ub9e4\uce6d",level:3},{value:"IN / NOT IN",id:"in--not-in",level:3},{value:"BETWEEN",id:"between",level:3},{value:"\ud83d\udcca order_by() - \uc815\ub82c",id:"-order_by---\uc815\ub82c",level:2},{value:"\uae30\ubcf8 \uc815\ub82c",id:"\uae30\ubcf8-\uc815\ub82c",level:3},{value:"NULL \ucc98\ub9ac",id:"null-\ucc98\ub9ac",level:3},{value:"\ud83c\udfaf limit() / offset() - \ud398\uc774\uc9d5",id:"-limit--offset---\ud398\uc774\uc9d5",level:2},{value:"\uae30\ubcf8 \ud398\uc774\uc9d5",id:"\uae30\ubcf8-\ud398\uc774\uc9d5",level:3},{value:"\ud398\uc774\uc9d5 \ud568\uc218",id:"\ud398\uc774\uc9d5-\ud568\uc218",level:3},{value:"\ud83e\uddee \uc9d1\uacc4 \ud568\uc218",id:"-\uc9d1\uacc4-\ud568\uc218",level:2},{value:"COUNT",id:"count",level:3},{value:"SUM, AVG, MIN, MAX",id:"sum-avg-min-max",level:3},{value:"\ud83d\udcc8 group_by() - \uadf8\ub8f9\ud654",id:"-group_by---\uadf8\ub8f9\ud654",level:2},{value:"\uae30\ubcf8 \uadf8\ub8f9\ud654",id:"\uae30\ubcf8-\uadf8\ub8f9\ud654",level:3},{value:"HAVING",id:"having",level:3},{value:"\ubcf5\uc7a1\ud55c \uc9d1\uacc4",id:"\ubcf5\uc7a1\ud55c-\uc9d1\uacc4",level:3},{value:"\ud83d\udd17 JOIN",id:"-join",level:2},{value:"\uae30\ubcf8 JOIN",id:"\uae30\ubcf8-join",level:3},{value:"\uc5ec\ub7ec \ud14c\uc774\ube14 JOIN",id:"\uc5ec\ub7ec-\ud14c\uc774\ube14-join",level:3},{value:"\ud83d\udce6 \uc11c\ube0c\ucffc\ub9ac",id:"-\uc11c\ube0c\ucffc\ub9ac",level:2},{value:"\uc2a4\uce7c\ub77c \uc11c\ube0c\ucffc\ub9ac",id:"\uc2a4\uce7c\ub77c-\uc11c\ube0c\ucffc\ub9ac",level:3},{value:"IN \uc11c\ube0c\ucffc\ub9ac",id:"in-\uc11c\ube0c\ucffc\ub9ac",level:3},{value:"EXISTS \uc11c\ube0c\ucffc\ub9ac",id:"exists-\uc11c\ube0c\ucffc\ub9ac",level:3},{value:"\ud83d\udcdd CTE (Common Table Expression)",id:"-cte-common-table-expression",level:2},{value:"WITH\uc808 \uc0ac\uc6a9",id:"with\uc808-\uc0ac\uc6a9",level:3},{value:"\ud83c\udfa8 DISTINCT",id:"-distinct",level:2},{value:"DISTINCT \uc0ac\uc6a9",id:"distinct-\uc0ac\uc6a9",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 \ucffc\ub9ac \uc608\uc81c",id:"-\uc2e4\uc804-\ucffc\ub9ac-\uc608\uc81c",level:2},{value:"\ubcf5\uc7a1\ud55c \uac80\uc0c9",id:"\ubcf5\uc7a1\ud55c-\uac80\uc0c9",level:3},{value:"\ub300\uc2dc\ubcf4\ub4dc \ud1b5\uacc4",id:"\ub300\uc2dc\ubcf4\ub4dc-\ud1b5\uacc4",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. \uc870\uac74 \ub3d9\uc801 \uad6c\uc131",id:"1-\uc870\uac74-\ub3d9\uc801-\uad6c\uc131",level:3},{value:"2. \ucffc\ub9ac \uc7ac\uc0ac\uc6a9",id:"2-\ucffc\ub9ac-\uc7ac\uc0ac\uc6a9",level:3},{value:"3. label() \uc0ac\uc6a9",id:"3-label-\uc0ac\uc6a9",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"\ucffc\ub9ac-\uc791\uc131",children:"\ucffc\ub9ac \uc791\uc131"})}),"\n",(0,r.jsx)(s.p,{children:"SQLAlchemy\uc758 \uac15\ub825\ud55c \ucffc\ub9ac API\ub85c \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \uc870\ud68c\ub97c Python\uc2a4\ub7fd\uac8c \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,r.jsx)(s.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\u2705 ",(0,r.jsx)(s.code,{children:"select()"})," \ubb38 \uc791\uc131"]}),"\n",(0,r.jsxs)(s.li,{children:["\u2705 ",(0,r.jsx)(s.code,{children:"where()"})," \uc870\uac74 \ud544\ud130\ub9c1"]}),"\n",(0,r.jsxs)(s.li,{children:["\u2705 ",(0,r.jsx)(s.code,{children:"order_by()"})," \uc815\ub82c"]}),"\n",(0,r.jsxs)(s.li,{children:["\u2705 ",(0,r.jsx)(s.code,{children:"group_by()"})," \uadf8\ub8f9\ud654"]}),"\n",(0,r.jsx)(s.li,{children:"\u2705 \uc9d1\uacc4 \ud568\uc218 (COUNT, SUM, AVG)"}),"\n",(0,r.jsx)(s.li,{children:"\u2705 \uc11c\ube0c\ucffc\ub9ac\uc640 CTE"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"-\uae30\ubcf8-\ucffc\ub9ac-\ud328\ud134",children:"\ud83d\udcd6 \uae30\ubcf8 \ucffc\ub9ac \ud328\ud134"}),"\n",(0,r.jsx)(s.h3,{id:"sqlalchemy-20-\uc2a4\ud0c0\uc77c",children:"SQLAlchemy 2.0 \uc2a4\ud0c0\uc77c"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\n# \ud328\ud134\nstmt = select(Model).where(\uc870\uac74).order_by(\uc815\ub82c)\nresults = session.execute(stmt).scalars().all()\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\ub808\uac70\uc2dc vs 2.0:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"# \u274c \ub808\uac70\uc2dc (1.4, deprecated)\nusers = session.query(User).filter(User.age > 25).all()\n\n# \u2705 2.0 \uc2a4\ud0c0\uc77c (\uad8c\uc7a5)\nstmt = select(User).where(User.age > 25)\nusers = session.execute(stmt).scalars().all()\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-select---\uae30\ubcf8-\uc870\ud68c",children:"\ud83d\udd0d select() - \uae30\ubcf8 \uc870\ud68c"}),"\n",(0,r.jsx)(s.h3,{id:"\uc804\uccb4-\uc870\ud68c",children:"\uc804\uccb4 \uc870\ud68c"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # \ubaa8\ub4e0 \uc0ac\uc6a9\uc790\n    stmt = select(User)\n    users = session.execute(stmt).scalars().all()\n\n    for user in users:\n        print(user.username)\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT users.id, users.username, users.email, users.age\nFROM users\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\ud2b9\uc815-\uceec\ub7fc\ub9cc-\uc870\ud68c",children:"\ud2b9\uc815 \uceec\ub7fc\ub9cc \uc870\ud68c"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'with Session(engine) as session:\n    # username\uacfc email\ub9cc\n    stmt = select(User.username, User.email)\n    results = session.execute(stmt).all()\n\n    for username, email in results:\n        print(f"{username}: {email}")\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT users.username, users.email\nFROM users\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\ub2e8\uc77c-\uacb0\uacfc-\uc870\ud68c",children:"\ub2e8\uc77c \uacb0\uacfc \uc870\ud68c"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # scalar_one() - \uc815\ud655\ud788 1\uac1c, \uc5c6\uac70\ub098 \uc5ec\ub7ec \uac1c\uba74 \uc5d0\ub7ec\n    stmt = select(User).where(User.id == 1)\n    user = session.execute(stmt).scalar_one()\n\n    # scalar_one_or_none() - 0\uac1c \ub610\ub294 1\uac1c\n    user = session.execute(stmt).scalar_one_or_none()\n\n    # first() - \uccab \ubc88\uc9f8, \uc5c6\uc73c\uba74 None\n    user = session.execute(stmt).first()\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-where---\uc870\uac74-\ud544\ud130\ub9c1",children:"\u26a1 where() - \uc870\uac74 \ud544\ud130\ub9c1"}),"\n",(0,r.jsx)(s.h3,{id:"\uae30\ubcf8-\uc870\uac74",children:"\uae30\ubcf8 \uc870\uac74"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # \ub4f1\ud638 ==\n    stmt = select(User).where(User.username == 'alice')\n\n    # \ubd80\ub4f1\ud638\n    stmt = select(User).where(User.age > 25)\n    stmt = select(User).where(User.age >= 25)\n    stmt = select(User).where(User.age < 30)\n\n    # \uac19\uc9c0 \uc54a\uc74c !=\n    stmt = select(User).where(User.username != 'admin')\n\n    # IS NULL\n    stmt = select(User).where(User.email.is_(None))\n\n    # IS NOT NULL\n    stmt = select(User).where(User.email.isnot(None))\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\uc5ec\ub7ec-\uc870\uac74-and",children:"\uc5ec\ub7ec \uc870\uac74 (AND)"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \ubc29\ubc95 1: \uc27c\ud45c\ub85c \uad6c\ubd84\n    stmt = select(User).where(\n        User.age > 25,\n        User.email.like('%@gmail.com')\n    )\n\n    # \ubc29\ubc95 2: and_() \ud568\uc218\n    from sqlalchemy import and_\n\n    stmt = select(User).where(\n        and_(\n            User.age > 25,\n            User.email.like('%@gmail.com')\n        )\n    )\n\n    # \ubc29\ubc95 3: \uccb4\uc774\ub2dd\n    stmt = select(User)\\\n        .where(User.age > 25)\\\n        .where(User.email.like('%@gmail.com'))\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM users\nWHERE users.age > 25 AND users.email LIKE '%@gmail.com'\n"})}),"\n",(0,r.jsx)(s.h3,{id:"or-\uc870\uac74",children:"OR \uc870\uac74"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import or_\n\nwith Session(engine) as session:\n    # OR \uc870\uac74\n    stmt = select(User).where(\n        or_(\n            User.username == 'alice',\n            User.username == 'bob'\n        )\n    )\n\n    # AND + OR\n    stmt = select(User).where(\n        User.age > 25,\n        or_(\n            User.email.like('%@gmail.com'),\n            User.email.like('%@yahoo.com')\n        )\n    )\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM users\nWHERE users.age > 25\n  AND (users.email LIKE '%@gmail.com' OR users.email LIKE '%@yahoo.com')\n"})}),"\n",(0,r.jsx)(s.h3,{id:"not-\uc870\uac74",children:"NOT \uc870\uac74"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import not_\n\nwith Session(engine) as session:\n    # NOT\n    stmt = select(User).where(\n        not_(User.is_active == False)\n    )\n\n    # \uac04\ub2e8\ud558\uac8c: ~\n    stmt = select(User).where(~(User.is_active == False))\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\ubb38\uc790\uc5f4-\ud328\ud134-\ub9e4\uce6d",children:"\ubb38\uc790\uc5f4 \ud328\ud134 \ub9e4\uce6d"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # LIKE\n    stmt = select(User).where(User.username.like('ali%'))  # ali\ub85c \uc2dc\uc791\n\n    # ILIKE (\ub300\uc18c\ubb38\uc790 \ubb34\uc2dc)\n    stmt = select(User).where(User.username.ilike('ALI%'))\n\n    # NOT LIKE\n    stmt = select(User).where(User.username.notlike('%admin%'))\n\n    # \uc5ec\ub7ec \ud328\ud134\n    stmt = select(User).where(\n        or_(\n            User.username.like('alice%'),\n            User.username.like('bob%')\n        )\n    )\n"})}),"\n",(0,r.jsx)(s.h3,{id:"in--not-in",children:"IN / NOT IN"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # IN\n    stmt = select(User).where(User.id.in_([1, 2, 3]))\n\n    # NOT IN\n    stmt = select(User).where(User.id.notin_([1, 2, 3]))\n\n    # \uc11c\ube0c\ucffc\ub9ac\uc640 \ud568\uaed8\n    active_user_ids = select(User.id).where(User.is_active == True)\n    stmt = select(Post).where(Post.user_id.in_(active_user_ids))\n"})}),"\n",(0,r.jsx)(s.h3,{id:"between",children:"BETWEEN"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # BETWEEN\n    stmt = select(User).where(User.age.between(20, 30))\n\n    # \ub0a0\uc9dc \ubc94\uc704\n    from datetime import date\n    stmt = select(Post).where(\n        Post.created_at.between(\n            date(2024, 1, 1),\n            date(2024, 12, 31)\n        )\n    )\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-order_by---\uc815\ub82c",children:"\ud83d\udcca order_by() - \uc815\ub82c"}),"\n",(0,r.jsx)(s.h3,{id:"\uae30\ubcf8-\uc815\ub82c",children:"\uae30\ubcf8 \uc815\ub82c"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # \uc624\ub984\ucc28\uc21c (ASC, \uae30\ubcf8\uac12)\n    stmt = select(User).order_by(User.username)\n\n    # \ub0b4\ub9bc\ucc28\uc21c (DESC)\n    stmt = select(User).order_by(User.age.desc())\n\n    # \uc5ec\ub7ec \uceec\ub7fc\n    stmt = select(User).order_by(\n        User.age.desc(),\n        User.username  # age \uac19\uc73c\uba74 username \uc21c\n    )\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM users\nORDER BY users.age DESC, users.username ASC\n"})}),"\n",(0,r.jsx)(s.h3,{id:"null-\ucc98\ub9ac",children:"NULL \ucc98\ub9ac"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # NULLS FIRST\n    stmt = select(User).order_by(User.age.desc().nullsfirst())\n\n    # NULLS LAST\n    stmt = select(User).order_by(User.age.desc().nullslast())\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-limit--offset---\ud398\uc774\uc9d5",children:"\ud83c\udfaf limit() / offset() - \ud398\uc774\uc9d5"}),"\n",(0,r.jsx)(s.h3,{id:"\uae30\ubcf8-\ud398\uc774\uc9d5",children:"\uae30\ubcf8 \ud398\uc774\uc9d5"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \ucc98\uc74c 10\uac1c\n    stmt = select(User).limit(10)\n\n    # 11-20\ubc88\uc9f8 (\ud398\uc774\uc9c0 2)\n    stmt = select(User).limit(10).offset(10)\n\n    # \uc815\ub82c + \ud398\uc774\uc9d5\n    stmt = select(User)\\\n        .order_by(User.created_at.desc())\\\n        .limit(10)\\\n        .offset(0)\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\ud398\uc774\uc9d5-\ud568\uc218",children:"\ud398\uc774\uc9d5 \ud568\uc218"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'from typing import List\nfrom sqlalchemy import select\n\ndef get_page(\n    session: Session,\n    page: int = 1,\n    per_page: int = 10\n) -> List[User]:\n    """\ud398\uc774\uc9c0\ubcc4 \uc0ac\uc6a9\uc790 \uc870\ud68c"""\n    stmt = select(User)\\\n        .order_by(User.id)\\\n        .limit(per_page)\\\n        .offset((page - 1) * per_page)\n\n    return session.execute(stmt).scalars().all()\n\n# \uc0ac\uc6a9\nwith Session(engine) as session:\n    page1 = get_page(session, page=1, per_page=10)\n    page2 = get_page(session, page=2, per_page=10)\n'})}),"\n",(0,r.jsx)(s.h2,{id:"-\uc9d1\uacc4-\ud568\uc218",children:"\ud83e\uddee \uc9d1\uacc4 \ud568\uc218"}),"\n",(0,r.jsx)(s.h3,{id:"count",children:"COUNT"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \uc804\uccb4 \uac1c\uc218\n    stmt = select(func.count()).select_from(User)\n    total = session.execute(stmt).scalar()\n\n    # \uc870\uac74\ubd80 \uac1c\uc218\n    stmt = select(func.count()).select_from(User)\\\n        .where(User.is_active == True)\n    active_count = session.execute(stmt).scalar()\n\n    # COUNT(column)\n    stmt = select(func.count(User.id))\n    count = session.execute(stmt).scalar()\n\n    # COUNT(DISTINCT)\n    stmt = select(func.count(func.distinct(User.email)))\n    unique_emails = session.execute(stmt).scalar()\n"})}),"\n",(0,r.jsx)(s.h3,{id:"sum-avg-min-max",children:"SUM, AVG, MIN, MAX"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # SUM\n    stmt = select(func.sum(Order.total))\n    total_sales = session.execute(stmt).scalar()\n\n    # AVG\n    stmt = select(func.avg(Product.price))\n    avg_price = session.execute(stmt).scalar()\n\n    # MIN, MAX\n    stmt = select(\n        func.min(Product.price).label('min_price'),\n        func.max(Product.price).label('max_price')\n    )\n    result = session.execute(stmt).first()\n    print(f\"Price range: {result.min_price} - {result.max_price}\")\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-group_by---\uadf8\ub8f9\ud654",children:"\ud83d\udcc8 group_by() - \uadf8\ub8f9\ud654"}),"\n",(0,r.jsx)(s.h3,{id:"\uae30\ubcf8-\uadf8\ub8f9\ud654",children:"\uae30\ubcf8 \uadf8\ub8f9\ud654"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \uce74\ud14c\uace0\ub9ac\ubcc4 \uc81c\ud488 \uc218\n    stmt = select(\n        Product.category,\n        func.count(Product.id).label('count')\n    ).group_by(Product.category)\n\n    results = session.execute(stmt).all()\n    for category, count in results:\n        print(f\"{category}: {count}\uac1c\")\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT products.category, COUNT(products.id) AS count\nFROM products\nGROUP BY products.category\n"})}),"\n",(0,r.jsx)(s.h3,{id:"having",children:"HAVING"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \ud3ec\uc2a4\ud2b8\uac00 5\uac1c \uc774\uc0c1\uc778 \uc0ac\uc6a9\uc790\n    stmt = select(\n        User.username,\n        func.count(Post.id).label('post_count')\n    ).join(Post)\\\n     .group_by(User.username)\\\n     .having(func.count(Post.id) >= 5)\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT users.username, COUNT(posts.id) AS post_count\nFROM users\nJOIN posts ON users.id = posts.user_id\nGROUP BY users.username\nHAVING COUNT(posts.id) >= 5\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\ubcf5\uc7a1\ud55c-\uc9d1\uacc4",children:"\ubcf5\uc7a1\ud55c \uc9d1\uacc4"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \uc6d4\ubcc4 \uc8fc\ubb38 \ud1b5\uacc4\n    stmt = select(\n        func.date_trunc('month', Order.created_at).label('month'),\n        func.count(Order.id).label('order_count'),\n        func.sum(Order.total).label('total_sales'),\n        func.avg(Order.total).label('avg_order_value')\n    ).group_by(func.date_trunc('month', Order.created_at))\\\n     .order_by(func.date_trunc('month', Order.created_at).desc())\n\n    results = session.execute(stmt).all()\n    for month, count, total, avg_val in results:\n        print(f\"{month}: {count}\uac74, \ucd1d ${total}, \ud3c9\uade0 ${avg_val}\")\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-join",children:"\ud83d\udd17 JOIN"}),"\n",(0,r.jsx)(s.h3,{id:"\uae30\ubcf8-join",children:"\uae30\ubcf8 JOIN"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # INNER JOIN\n    stmt = select(User, Post).join(Post, User.id == Post.user_id)\n\n    # \ub610\ub294 relationship \uc0ac\uc6a9\n    stmt = select(User).join(User.posts)\n\n    # LEFT JOIN\n    stmt = select(User).outerjoin(User.posts)\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"-- INNER JOIN\nSELECT * FROM users\nJOIN posts ON users.id = posts.user_id\n\n-- LEFT JOIN\nSELECT * FROM users\nLEFT OUTER JOIN posts ON users.id = posts.user_id\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\uc5ec\ub7ec-\ud14c\uc774\ube14-join",children:"\uc5ec\ub7ec \ud14c\uc774\ube14 JOIN"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # User \u2192 Post \u2192 Comment\n    stmt = select(User, Post, Comment)\\\n        .join(Post, User.id == Post.user_id)\\\n        .join(Comment, Post.id == Comment.post_id)\\\n        .where(User.username == 'alice')\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-\uc11c\ube0c\ucffc\ub9ac",children:"\ud83d\udce6 \uc11c\ube0c\ucffc\ub9ac"}),"\n",(0,r.jsx)(s.h3,{id:"\uc2a4\uce7c\ub77c-\uc11c\ube0c\ucffc\ub9ac",children:"\uc2a4\uce7c\ub77c \uc11c\ube0c\ucffc\ub9ac"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \uac01 \uc0ac\uc6a9\uc790\uc758 \ud3ec\uc2a4\ud2b8 \uc218\ub97c \ud3ec\ud568\n    post_count_subq = select(func.count(Post.id))\\\n        .where(Post.user_id == User.id)\\\n        .scalar_subquery()\n\n    stmt = select(\n        User.username,\n        post_count_subq.label('post_count')\n    )\n\n    results = session.execute(stmt).all()\n    for username, count in results:\n        print(f\"{username}: {count}\uac1c \ud3ec\uc2a4\ud2b8\")\n"})}),"\n",(0,r.jsx)(s.h3,{id:"in-\uc11c\ube0c\ucffc\ub9ac",children:"IN \uc11c\ube0c\ucffc\ub9ac"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \ud3ec\uc2a4\ud2b8\uac00 \uc788\ub294 \uc0ac\uc6a9\uc790\ub9cc\n    users_with_posts = select(Post.user_id).distinct()\n\n    stmt = select(User).where(User.id.in_(users_with_posts))\n    users = session.execute(stmt).scalars().all()\n"})}),"\n",(0,r.jsx)(s.h3,{id:"exists-\uc11c\ube0c\ucffc\ub9ac",children:"EXISTS \uc11c\ube0c\ucffc\ub9ac"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import exists\n\nwith Session(engine) as session:\n    # \ud3ec\uc2a4\ud2b8\uac00 \uc788\ub294 \uc0ac\uc6a9\uc790\n    has_posts = exists().where(Post.user_id == User.id)\n\n    stmt = select(User).where(has_posts)\n    users = session.execute(stmt).scalars().all()\n\n    # \ud3ec\uc2a4\ud2b8\uac00 \uc5c6\ub294 \uc0ac\uc6a9\uc790\n    stmt = select(User).where(~has_posts)\n    users = session.execute(stmt).scalars().all()\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-cte-common-table-expression",children:"\ud83d\udcdd CTE (Common Table Expression)"}),"\n",(0,r.jsx)(s.h3,{id:"with\uc808-\uc0ac\uc6a9",children:"WITH\uc808 \uc0ac\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # CTE \uc815\uc758\n    popular_posts = select(\n        Post.id,\n        Post.title,\n        func.count(Comment.id).label('comment_count')\n    ).join(Comment)\\\n     .group_by(Post.id, Post.title)\\\n     .having(func.count(Comment.id) > 10)\\\n     .cte('popular_posts')\n\n    # CTE \uc0ac\uc6a9\n    stmt = select(\n        User.username,\n        popular_posts.c.title,\n        popular_posts.c.comment_count\n    ).join(Post, User.id == Post.user_id)\\\n     .join(popular_posts, Post.id == popular_posts.c.id)\n\n    results = session.execute(stmt).all()\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"WITH popular_posts AS (\n    SELECT posts.id, posts.title, COUNT(comments.id) AS comment_count\n    FROM posts\n    JOIN comments ON posts.id = comments.post_id\n    GROUP BY posts.id, posts.title\n    HAVING COUNT(comments.id) > 10\n)\nSELECT users.username, popular_posts.title, popular_posts.comment_count\nFROM users\nJOIN posts ON users.id = posts.user_id\nJOIN popular_posts ON posts.id = popular_posts.id\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-distinct",children:"\ud83c\udfa8 DISTINCT"}),"\n",(0,r.jsx)(s.h3,{id:"distinct-\uc0ac\uc6a9",children:"DISTINCT \uc0ac\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, distinct\n\nwith Session(engine) as session:\n    # \uc911\ubcf5 \uc81c\uac70\n    stmt = select(User.email).distinct()\n    emails = session.execute(stmt).scalars().all()\n\n    # func.distinct()\n    stmt = select(func.distinct(User.email))\n    emails = session.execute(stmt).scalars().all()\n\n    # COUNT(DISTINCT)\n    stmt = select(func.count(distinct(User.email)))\n    unique_count = session.execute(stmt).scalar()\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-\uc2e4\uc804-\ucffc\ub9ac-\uc608\uc81c",children:"\ud83d\udca1 \uc2e4\uc804 \ucffc\ub9ac \uc608\uc81c"}),"\n",(0,r.jsx)(s.h3,{id:"\ubcf5\uc7a1\ud55c-\uac80\uc0c9",children:"\ubcf5\uc7a1\ud55c \uac80\uc0c9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, or_, and_, func\n\ndef search_posts(\n    session: Session,\n    keyword: str = None,\n    author: str = None,\n    tags: List[str] = None,\n    min_likes: int = None,\n    page: int = 1,\n    per_page: int = 10\n):\n    \"\"\"\ub2e4\uc591\ud55c \uc870\uac74\uc73c\ub85c \ud3ec\uc2a4\ud2b8 \uac80\uc0c9\"\"\"\n    stmt = select(Post)\n\n    # \ud0a4\uc6cc\ub4dc \uac80\uc0c9\n    if keyword:\n        stmt = stmt.where(\n            or_(\n                Post.title.ilike(f'%{keyword}%'),\n                Post.content.ilike(f'%{keyword}%')\n            )\n        )\n\n    # \uc791\uc131\uc790 \ud544\ud130\n    if author:\n        stmt = stmt.join(User).where(User.username == author)\n\n    # \ud0dc\uadf8 \ud544\ud130\n    if tags:\n        stmt = stmt.join(Post.tags).where(Tag.name.in_(tags))\n\n    # \uc88b\uc544\uc694 \uc218 \ud544\ud130\n    if min_likes:\n        stmt = stmt.where(Post.like_count >= min_likes)\n\n    # \uc815\ub82c + \ud398\uc774\uc9d5\n    stmt = stmt\\\n        .order_by(Post.created_at.desc())\\\n        .limit(per_page)\\\n        .offset((page - 1) * per_page)\n\n    return session.execute(stmt).scalars().unique().all()\n\n# \uc0ac\uc6a9\nwith Session(engine) as session:\n    posts = search_posts(\n        session,\n        keyword='python',\n        tags=['tutorial', 'beginner'],\n        min_likes=10,\n        page=1\n    )\n"})}),"\n",(0,r.jsx)(s.h3,{id:"\ub300\uc2dc\ubcf4\ub4dc-\ud1b5\uacc4",children:"\ub300\uc2dc\ubcf4\ub4dc \ud1b5\uacc4"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select, func\nfrom datetime import datetime, timedelta\n\ndef get_dashboard_stats(session: Session):\n    \"\"\"\ub300\uc2dc\ubcf4\ub4dc \ud1b5\uacc4\"\"\"\n    now = datetime.now()\n    last_30_days = now - timedelta(days=30)\n\n    # \ucd1d \uc0ac\uc6a9\uc790 \uc218\n    total_users = session.execute(\n        select(func.count(User.id))\n    ).scalar()\n\n    # \ud65c\uc131 \uc0ac\uc6a9\uc790 \uc218\n    active_users = session.execute(\n        select(func.count(User.id)).where(User.is_active == True)\n    ).scalar()\n\n    # \ucd5c\uadfc 30\uc77c \uc2e0\uaddc \uac00\uc785\n    new_users = session.execute(\n        select(func.count(User.id)).where(User.created_at >= last_30_days)\n    ).scalar()\n\n    # \ucd1d \ud3ec\uc2a4\ud2b8 \uc218\n    total_posts = session.execute(\n        select(func.count(Post.id))\n    ).scalar()\n\n    # \ucd5c\uadfc 30\uc77c \ud3ec\uc2a4\ud2b8\n    recent_posts = session.execute(\n        select(func.count(Post.id)).where(Post.created_at >= last_30_days)\n    ).scalar()\n\n    # \uc778\uae30 \ud0dc\uadf8 TOP 10\n    popular_tags = session.execute(\n        select(\n            Tag.name,\n            func.count(post_tags.c.post_id).label('usage_count')\n        ).join(post_tags)\\\n         .group_by(Tag.name)\\\n         .order_by(func.count(post_tags.c.post_id).desc())\\\n         .limit(10)\n    ).all()\n\n    return {\n        'total_users': total_users,\n        'active_users': active_users,\n        'new_users_30d': new_users,\n        'total_posts': total_posts,\n        'recent_posts_30d': recent_posts,\n        'popular_tags': popular_tags\n    }\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,r.jsx)(s.h3,{id:"1-\uc870\uac74-\ub3d9\uc801-\uad6c\uc131",children:"1. \uc870\uac74 \ub3d9\uc801 \uad6c\uc131"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"def get_users(session, filters: dict):\n    \"\"\"\ub3d9\uc801 \ud544\ud130\"\"\"\n    stmt = select(User)\n\n    # \uc870\uac74\uc774 \uc788\uc744 \ub54c\ub9cc \ucd94\uac00\n    if 'min_age' in filters:\n        stmt = stmt.where(User.age >= filters['min_age'])\n\n    if 'email_domain' in filters:\n        stmt = stmt.where(User.email.like(f\"%@{filters['email_domain']}\"))\n\n    if 'is_active' in filters:\n        stmt = stmt.where(User.is_active == filters['is_active'])\n\n    return session.execute(stmt).scalars().all()\n\n# \uc0ac\uc6a9\nusers = get_users(session, {\n    'min_age': 25,\n    'email_domain': 'gmail.com'\n})\n"})}),"\n",(0,r.jsx)(s.h3,{id:"2-\ucffc\ub9ac-\uc7ac\uc0ac\uc6a9",children:"2. \ucffc\ub9ac \uc7ac\uc0ac\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"# \ubca0\uc774\uc2a4 \ucffc\ub9ac\nactive_users = select(User).where(User.is_active == True)\n\n# \ud655\uc7a5\nstmt1 = active_users.where(User.age > 25)\nstmt2 = active_users.order_by(User.created_at.desc()).limit(10)\n"})}),"\n",(0,r.jsx)(s.h3,{id:"3-label-\uc0ac\uc6a9",children:"3. label() \uc0ac\uc6a9"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"stmt = select(\n    User.username.label('name'),\n    func.count(Post.id).label('post_count')\n).join(Post).group_by(User.username)\n\nresults = session.execute(stmt).all()\nfor row in results:\n    print(f\"{row.name}: {row.post_count}\")  # label \uc774\ub984\uc73c\ub85c \uc811\uadfc\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"../basic/crud",children:"\uae30\ubcf8 CRUD \uc791\uc5c5"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"./relationships",children:"\uad00\uacc4(Relationship) \uc815\uc758"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"./joins",children:"Join\uacfc \ub85c\ub529 \uc804\ub7b5"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsx)(s.p,{children:"\ucffc\ub9ac \uc791\uc131\uc744 \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c JOIN \ucd5c\uc801\ud654\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsxs)(s.p,{children:["\ud83d\udc49 ",(0,r.jsx)(s.a,{href:"./joins",children:"Join\uacfc \ub85c\ub529 \uc804\ub7b5"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"\ud83d\udca1 \ud301"}),": \ubcf5\uc7a1\ud55c \ucffc\ub9ac\ub294 \uba3c\uc800 SQL\ub85c \uc791\uc131\ud574\ubcf8 \ud6c4 SQLAlchemy\ub85c \ubcc0\ud658\ud558\uba74 \uc774\ud574\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4!"]})]})}function u(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>a});var t=n(6540);const r={},l=t.createContext(r);function i(e){const s=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);