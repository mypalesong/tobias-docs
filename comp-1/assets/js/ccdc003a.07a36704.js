"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[3202],{3822:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"oauth/advanced/multi-provider","title":"Multi-Provider \uc9c0\uc6d0","description":"\uc5ec\ub7ec OAuth Provider (Google, GitHub, Microsoft \ub4f1)\ub97c \ud558\ub098\uc758 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud1b5\ud569\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/oauth/advanced/multi-provider.md","sourceDirName":"oauth/advanced","slug":"/oauth/advanced/multi-provider","permalink":"/docs/oauth/advanced/multi-provider","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oauth/advanced/multi-provider.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"oauthSidebar","previous":{"title":"\ud1a0\ud070 \uad00\ub9ac","permalink":"/docs/oauth/advanced/token-management"},"next":{"title":"OAuth 2.0 \ud575\uc2ec \uac1c\ub150","permalink":"/docs/oauth/basic/concepts"}}');var t=r(4848),o=r(8453);const d={sidebar_position:4},s="Multi-Provider \uc9c0\uc6d0",a={},u=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98 \uc124\uacc4",id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98-\uc124\uacc4",level:2},{value:"1. \uae30\ubcf8 \uad6c\uc870",id:"1-\uae30\ubcf8-\uad6c\uc870",level:3},{value:"\ud83d\udd27 FastAPI \uad6c\ud604",id:"-fastapi-\uad6c\ud604",level:2},{value:"\uc644\uc804\ud55c Multi-Provider \uad6c\ud604",id:"\uc644\uc804\ud55c-multi-provider-\uad6c\ud604",level:3},{value:"\ud83d\udcbe \ub370\uc774\ud130 \ubaa8\ub378",id:"-\ub370\uc774\ud130-\ubaa8\ub378",level:2},{value:"SQLAlchemy \ubaa8\ub378",id:"sqlalchemy-\ubaa8\ub378",level:3},{value:"\ud83d\udd17 \uacc4\uc815 \uc5f0\ub3d9 (Account Linking)",id:"-\uacc4\uc815-\uc5f0\ub3d9-account-linking",level:2},{value:"\uc774\uba54\uc77c \uae30\ubc18 \uc790\ub3d9 \uc5f0\ub3d9",id:"\uc774\uba54\uc77c-\uae30\ubc18-\uc790\ub3d9-\uc5f0\ub3d9",level:3},{value:"\uc218\ub3d9 \uacc4\uc815 \uc5f0\ub3d9",id:"\uc218\ub3d9-\uacc4\uc815-\uc5f0\ub3d9",level:3},{value:"\ud83c\udfa8 \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4",id:"-\uc0ac\uc6a9\uc790-\uc778\ud130\ud398\uc774\uc2a4",level:2},{value:"\uacc4\uc815 \uc124\uc815 \ud398\uc774\uc9c0",id:"\uacc4\uc815-\uc124\uc815-\ud398\uc774\uc9c0",level:3},{value:"HTML \ud15c\ud50c\ub9bf (Jinja2)",id:"html-\ud15c\ud50c\ub9bf-jinja2",level:3},{value:"\ud83d\udd04 Provider \uc804\ud658",id:"-provider-\uc804\ud658",level:2},{value:"\ub85c\uadf8\uc778 Provider \ubcc0\uacbd",id:"\ub85c\uadf8\uc778-provider-\ubcc0\uacbd",level:3},{value:"\ud83d\udee1\ufe0f \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d",id:"\ufe0f-\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",level:2},{value:"1. \uc774\uba54\uc77c \uac80\uc99d",id:"1-\uc774\uba54\uc77c-\uac80\uc99d",level:3},{value:"2. Provider \uc2e0\ub8b0\ub3c4",id:"2-provider-\uc2e0\ub8b0\ub3c4",level:3},{value:"3. \ud1a0\ud070 \uc554\ud638\ud654",id:"3-\ud1a0\ud070-\uc554\ud638\ud654",level:3},{value:"\ud83d\udcca Provider \ud1b5\uacc4",id:"-provider-\ud1b5\uacc4",level:2},{value:"\uc0ac\uc6a9 \ud604\ud669 \uc870\ud68c",id:"\uc0ac\uc6a9-\ud604\ud669-\uc870\ud68c",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"multi-provider-\uc9c0\uc6d0",children:"Multi-Provider \uc9c0\uc6d0"})}),"\n",(0,t.jsx)(n.p,{children:"\uc5ec\ub7ec OAuth Provider (Google, GitHub, Microsoft \ub4f1)\ub97c \ud558\ub098\uc758 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud1b5\ud569\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 \ub2e4\uc911 Provider \uad6c\uc870 \uc124\uacc4"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Provider\ubcc4 \uc124\uc815 \uad00\ub9ac"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \uacc4\uc815 \uc5f0\ub3d9 (Account Linking)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc815\uaddc\ud654"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Provider \uc804\ud658 \ucc98\ub9ac"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98-\uc124\uacc4",children:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98 \uc124\uacc4"}),"\n",(0,t.jsx)(n.h3,{id:"1-\uae30\ubcf8-\uad6c\uc870",children:"1. \uae30\ubcf8 \uad6c\uc870"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from enum import Enum\n\nclass OAuthProvider(str, Enum):\n    """\uc9c0\uc6d0\ud558\ub294 OAuth Providers"""\n    GOOGLE = "google"\n    GITHUB = "github"\n    MICROSOFT = "microsoft"\n    FACEBOOK = "facebook"\n\n# Provider\ubcc4 \uc124\uc815\nprovider_configs = {\n    OAuthProvider.GOOGLE: {\n        "name": "Google",\n        "authorize_url": "https://accounts.google.com/o/oauth2/v2/auth",\n        "token_url": "https://oauth2.googleapis.com/token",\n        "userinfo_url": "https://www.googleapis.com/oauth2/v2/userinfo",\n        "server_metadata_url": "https://accounts.google.com/.well-known/openid-configuration",\n        "scopes": ["openid", "email", "profile"],\n        "supports_oidc": True\n    },\n    OAuthProvider.GITHUB: {\n        "name": "GitHub",\n        "authorize_url": "https://github.com/login/oauth/authorize",\n        "token_url": "https://github.com/login/oauth/access_token",\n        "userinfo_url": "https://api.github.com/user",\n        "scopes": ["user:email"],\n        "supports_oidc": False\n    },\n    OAuthProvider.MICROSOFT: {\n        "name": "Microsoft",\n        "authorize_url": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",\n        "token_url": "https://login.microsoftonline.com/common/oauth2/v2.0/token",\n        "server_metadata_url": "https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration",\n        "scopes": ["openid", "email", "profile"],\n        "supports_oidc": True\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-fastapi-\uad6c\ud604",children:"\ud83d\udd27 FastAPI \uad6c\ud604"}),"\n",(0,t.jsx)(n.h3,{id:"\uc644\uc804\ud55c-multi-provider-\uad6c\ud604",children:"\uc644\uc804\ud55c Multi-Provider \uad6c\ud604"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from fastapi import FastAPI, Request, HTTPException, Depends\nfrom fastapi.responses import RedirectResponse\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom authlib.integrations.starlette_client import OAuth\nfrom starlette.config import Config\nfrom typing import Optional\nfrom enum import Enum\n\napp = FastAPI(title=\"Multi-Provider OAuth\")\n\n# \uc138\uc158 \ubbf8\ub4e4\uc6e8\uc5b4\napp.add_middleware(\n    SessionMiddleware,\n    secret_key=\"your-secret-key\"\n)\n\n# \ud658\uacbd\ubcc0\uc218 \ub85c\ub4dc\nconfig = Config('.env')\n\n# OAuth \uc778\uc2a4\ud134\uc2a4\noauth = OAuth(config)\n\n# ==================== Provider \ub4f1\ub85d ====================\n\n# Google\noauth.register(\n    name='google',\n    client_id=config('GOOGLE_CLIENT_ID'),\n    client_secret=config('GOOGLE_CLIENT_SECRET'),\n    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n    client_kwargs={'scope': 'openid email profile'}\n)\n\n# GitHub\noauth.register(\n    name='github',\n    client_id=config('GITHUB_CLIENT_ID'),\n    client_secret=config('GITHUB_CLIENT_SECRET'),\n    authorize_url='https://github.com/login/oauth/authorize',\n    access_token_url='https://github.com/login/oauth/access_token',\n    api_base_url='https://api.github.com/',\n    client_kwargs={'scope': 'user:email'}\n)\n\n# Microsoft\noauth.register(\n    name='microsoft',\n    client_id=config('MICROSOFT_CLIENT_ID'),\n    client_secret=config('MICROSOFT_CLIENT_SECRET'),\n    server_metadata_url='https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration',\n    client_kwargs={'scope': 'openid email profile'}\n)\n\n# ==================== Provider \ucd94\uc0c1\ud654 ====================\n\nclass OAuthProvider(str, Enum):\n    GOOGLE = \"google\"\n    GITHUB = \"github\"\n    MICROSOFT = \"microsoft\"\n\nclass ProviderAdapter:\n    \"\"\"Provider\ubcc4 \ub370\uc774\ud130 \uc5b4\ub311\ud130\"\"\"\n\n    @staticmethod\n    async def get_user_info(provider: OAuthProvider, token: dict) -> dict:\n        \"\"\"Provider\ubcc4 \uc0ac\uc6a9\uc790 \uc815\ubcf4 \ucd94\ucd9c\"\"\"\n\n        if provider == OAuthProvider.GOOGLE:\n            return ProviderAdapter._google_user_info(token)\n        elif provider == OAuthProvider.GITHUB:\n            return await ProviderAdapter._github_user_info(token)\n        elif provider == OAuthProvider.MICROSOFT:\n            return ProviderAdapter._microsoft_user_info(token)\n        else:\n            raise ValueError(f\"Unsupported provider: {provider}\")\n\n    @staticmethod\n    def _google_user_info(token: dict) -> dict:\n        \"\"\"Google \uc0ac\uc6a9\uc790 \uc815\ubcf4 (OIDC)\"\"\"\n        userinfo = token.get('userinfo')\n        return {\n            'provider': 'google',\n            'provider_user_id': userinfo['sub'],\n            'email': userinfo['email'],\n            'email_verified': userinfo.get('email_verified', False),\n            'name': userinfo.get('name'),\n            'picture': userinfo.get('picture'),\n            'given_name': userinfo.get('given_name'),\n            'family_name': userinfo.get('family_name')\n        }\n\n    @staticmethod\n    async def _github_user_info(token: dict) -> dict:\n        \"\"\"GitHub \uc0ac\uc6a9\uc790 \uc815\ubcf4 (\ubcc4\ub3c4 API \ud638\ucd9c)\"\"\"\n        import httpx\n\n        access_token = token['access_token']\n\n        # \uae30\ubcf8 \uc0ac\uc6a9\uc790 \uc815\ubcf4\n        async with httpx.AsyncClient() as client:\n            user_resp = await client.get(\n                'https://api.github.com/user',\n                headers={\n                    'Authorization': f'Bearer {access_token}',\n                    'Accept': 'application/vnd.github.v3+json'\n                }\n            )\n            user_data = user_resp.json()\n\n            # \uc774\uba54\uc77c \uc815\ubcf4\n            emails_resp = await client.get(\n                'https://api.github.com/user/emails',\n                headers={\n                    'Authorization': f'Bearer {access_token}',\n                    'Accept': 'application/vnd.github.v3+json'\n                }\n            )\n            emails = emails_resp.json()\n\n        # Primary \uc774\uba54\uc77c \ucc3e\uae30\n        primary_email = next(\n            (e['email'] for e in emails if e['primary']),\n            user_data.get('email')\n        )\n\n        return {\n            'provider': 'github',\n            'provider_user_id': str(user_data['id']),\n            'email': primary_email,\n            'email_verified': next(\n                (e['verified'] for e in emails if e['primary']),\n                False\n            ),\n            'name': user_data.get('name', user_data['login']),\n            'picture': user_data['avatar_url'],\n            'username': user_data['login']\n        }\n\n    @staticmethod\n    def _microsoft_user_info(token: dict) -> dict:\n        \"\"\"Microsoft \uc0ac\uc6a9\uc790 \uc815\ubcf4 (OIDC)\"\"\"\n        userinfo = token.get('userinfo')\n        return {\n            'provider': 'microsoft',\n            'provider_user_id': userinfo['sub'],\n            'email': userinfo.get('email') or userinfo.get('preferred_username'),\n            'email_verified': userinfo.get('email_verified', False),\n            'name': userinfo.get('name'),\n            'picture': None,  # Microsoft\ub294 profile photo URL \uc81c\uacf5 \uc548 \ud568\n            'given_name': userinfo.get('given_name'),\n            'family_name': userinfo.get('family_name')\n        }\n\n# ==================== \ub77c\uc6b0\ud2b8 ====================\n\n@app.get('/login/{provider}')\nasync def login(provider: OAuthProvider, request: Request):\n    \"\"\"Provider \uc120\ud0dd \ub85c\uadf8\uc778\"\"\"\n\n    # Provider \uac1d\uccb4 \uac00\uc838\uc624\uae30\n    provider_client = getattr(oauth, provider.value)\n\n    # Redirect URI \uc0dd\uc131\n    redirect_uri = request.url_for('auth', provider=provider.value)\n\n    # Authorization \uc2dc\uc791\n    return await provider_client.authorize_redirect(request, redirect_uri)\n\n@app.get('/auth/{provider}')\nasync def auth(provider: OAuthProvider, request: Request):\n    \"\"\"OAuth \ucf5c\ubc31 (\ubaa8\ub4e0 Provider \uacf5\ud1b5)\"\"\"\n\n    try:\n        # Provider \uac1d\uccb4\n        provider_client = getattr(oauth, provider.value)\n\n        # Access Token \ubc1b\uae30\n        token = await provider_client.authorize_access_token(request)\n\n        # \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30 (Provider\ubcc4 \uc5b4\ub311\ud130)\n        user_info = await ProviderAdapter.get_user_info(provider, token)\n\n        # DB\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ucc3e\uae30 \ub610\ub294 \uc0dd\uc131\n        user = await find_or_create_user(user_info)\n\n        # \uc138\uc158\uc5d0 \uc800\uc7a5\n        request.session['user_id'] = user.id\n        request.session['provider'] = provider.value\n\n        return RedirectResponse(url='/')\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\nasync def find_or_create_user(user_info: dict):\n    \"\"\"\uc0ac\uc6a9\uc790 \ucc3e\uae30 \ub610\ub294 \uc0dd\uc131\"\"\"\n\n    provider = user_info['provider']\n    provider_user_id = user_info['provider_user_id']\n\n    # Provider \uacc4\uc815\uc73c\ub85c \ucc3e\uae30\n    provider_account = db.query(ProviderAccount).filter_by(\n        provider=provider,\n        provider_user_id=provider_user_id\n    ).first()\n\n    if provider_account:\n        # \uae30\uc874 \uc0ac\uc6a9\uc790\n        return provider_account.user\n\n    # \uc774\uba54\uc77c\ub85c \ucc3e\uae30 (\uacc4\uc815 \uc5f0\ub3d9)\n    email = user_info.get('email')\n    user = None\n\n    if email:\n        user = db.query(User).filter_by(email=email).first()\n\n    if not user:\n        # \uc0c8 \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(\n            email=email,\n            name=user_info.get('name'),\n            picture=user_info.get('picture'),\n            email_verified=user_info.get('email_verified', False)\n        )\n        db.add(user)\n        db.flush()\n\n    # Provider \uacc4\uc815 \uc5f0\uacb0\n    provider_account = ProviderAccount(\n        user_id=user.id,\n        provider=provider,\n        provider_user_id=provider_user_id,\n        provider_data=user_info\n    )\n    db.add(provider_account)\n    db.commit()\n\n    return user\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\ub370\uc774\ud130-\ubaa8\ub378",children:"\ud83d\udcbe \ub370\uc774\ud130 \ubaa8\ub378"}),"\n",(0,t.jsx)(n.h3,{id:"sqlalchemy-\ubaa8\ub378",children:"SQLAlchemy \ubaa8\ub378"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Column, Integer, String, Boolean, DateTime, JSON, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom datetime import datetime\n\nBase = declarative_base()\n\nclass User(Base):\n    \"\"\"\uc0ac\uc6a9\uc790 \ubaa8\ub378\"\"\"\n\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String(255), unique=True, nullable=False, index=True)\n    name = Column(String(255))\n    picture = Column(String(500))\n    email_verified = Column(Boolean, default=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # \uad00\uacc4\n    provider_accounts = relationship('ProviderAccount', back_populates='user')\n\nclass ProviderAccount(Base):\n    \"\"\"Provider \uacc4\uc815 \uc5f0\uacb0\"\"\"\n\n    __tablename__ = 'provider_accounts'\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    provider = Column(String(50), nullable=False)  # google, github, etc.\n    provider_user_id = Column(String(255), nullable=False)  # Provider\uc758 \uc0ac\uc6a9\uc790 ID\n    provider_data = Column(JSON)  # Provider\ubcc4 \ucd94\uac00 \uc815\ubcf4\n    access_token = Column(String(500))  # \uc554\ud638\ud654 \uad8c\uc7a5\n    refresh_token = Column(String(500))  # \uc554\ud638\ud654 \uad8c\uc7a5\n    token_expires_at = Column(DateTime)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # \uad00\uacc4\n    user = relationship('User', back_populates='provider_accounts')\n\n    # Unique constraint\n    __table_args__ = (\n        UniqueConstraint('provider', 'provider_user_id', name='uq_provider_account'),\n    )\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\uacc4\uc815-\uc5f0\ub3d9-account-linking",children:"\ud83d\udd17 \uacc4\uc815 \uc5f0\ub3d9 (Account Linking)"}),"\n",(0,t.jsx)(n.h3,{id:"\uc774\uba54\uc77c-\uae30\ubc18-\uc790\ub3d9-\uc5f0\ub3d9",children:"\uc774\uba54\uc77c \uae30\ubc18 \uc790\ub3d9 \uc5f0\ub3d9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def find_or_create_user_with_linking(user_info: dict):\n    \"\"\"\uc774\uba54\uc77c \uae30\ubc18 \uc790\ub3d9 \uacc4\uc815 \uc5f0\ub3d9\"\"\"\n\n    provider = user_info['provider']\n    provider_user_id = user_info['provider_user_id']\n    email = user_info.get('email')\n\n    # 1. Provider \uacc4\uc815\uc73c\ub85c \ucc3e\uae30\n    provider_account = db.query(ProviderAccount).filter_by(\n        provider=provider,\n        provider_user_id=provider_user_id\n    ).first()\n\n    if provider_account:\n        return provider_account.user\n\n    # 2. \uc774\uba54\uc77c\ub85c \uae30\uc874 \uc0ac\uc6a9\uc790 \ucc3e\uae30\n    user = None\n    if email:\n        user = db.query(User).filter_by(email=email).first()\n\n        if user:\n            # \uc774\uba54\uc77c\uc774 \uac80\uc99d\ub41c \uacbd\uc6b0\uc5d0\ub9cc \uc790\ub3d9 \uc5f0\ub3d9\n            if user_info.get('email_verified'):\n                print(f\"\ud83d\udd17 Auto-linking {provider} account to existing user {user.id}\")\n            else:\n                # \uc774\uba54\uc77c \ubbf8\uac80\uc99d \u2192 \uc0ac\uc6a9\uc790 \ud655\uc778 \ud544\uc694\n                raise HTTPException(\n                    status_code=400,\n                    detail=\"Email not verified. Please verify your email first.\"\n                )\n\n    if not user:\n        # 3. \uc0c8 \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(\n            email=email,\n            name=user_info.get('name'),\n            picture=user_info.get('picture'),\n            email_verified=user_info.get('email_verified', False)\n        )\n        db.add(user)\n        db.flush()\n\n    # 4. Provider \uacc4\uc815 \uc5f0\uacb0\n    provider_account = ProviderAccount(\n        user_id=user.id,\n        provider=provider,\n        provider_user_id=provider_user_id,\n        provider_data=user_info\n    )\n    db.add(provider_account)\n    db.commit()\n\n    return user\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc218\ub3d9-\uacc4\uc815-\uc5f0\ub3d9",children:"\uc218\ub3d9 \uacc4\uc815 \uc5f0\ub3d9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.post(\'/link-account/{provider}\')\nasync def link_account(\n    provider: OAuthProvider,\n    request: Request,\n    current_user: User = Depends(get_current_user)\n):\n    """\uae30\uc874 \uacc4\uc815\uc5d0 Provider \ucd94\uac00"""\n\n    # \uc774\ubbf8 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\n    existing = db.query(ProviderAccount).filter_by(\n        user_id=current_user.id,\n        provider=provider.value\n    ).first()\n\n    if existing:\n        raise HTTPException(\n            status_code=400,\n            detail=f"{provider.value} already linked"\n        )\n\n    # OAuth \ud50c\ub85c\uc6b0 \uc2dc\uc791\n    provider_client = getattr(oauth, provider.value)\n    redirect_uri = request.url_for(\'link_callback\', provider=provider.value)\n\n    # \uc138\uc158\uc5d0 \uc5f0\ub3d9 \ubaa8\ub4dc \ud45c\uc2dc\n    request.session[\'linking_mode\'] = True\n\n    return await provider_client.authorize_redirect(request, redirect_uri)\n\n@app.get(\'/link-callback/{provider}\')\nasync def link_callback(\n    provider: OAuthProvider,\n    request: Request,\n    current_user: User = Depends(get_current_user)\n):\n    """\uacc4\uc815 \uc5f0\ub3d9 \ucf5c\ubc31"""\n\n    # \uc5f0\ub3d9 \ubaa8\ub4dc \ud655\uc778\n    if not request.session.pop(\'linking_mode\', False):\n        raise HTTPException(status_code=400, detail="Invalid request")\n\n    try:\n        # Token \ubc1b\uae30\n        provider_client = getattr(oauth, provider.value)\n        token = await provider_client.authorize_access_token(request)\n\n        # \uc0ac\uc6a9\uc790 \uc815\ubcf4\n        user_info = await ProviderAdapter.get_user_info(provider, token)\n\n        # \uc774\ubbf8 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\n        existing_account = db.query(ProviderAccount).filter_by(\n            provider=provider.value,\n            provider_user_id=user_info[\'provider_user_id\']\n        ).first()\n\n        if existing_account and existing_account.user_id != current_user.id:\n            raise HTTPException(\n                status_code=400,\n                detail="This account is already linked to another user"\n            )\n\n        # Provider \uacc4\uc815 \uc5f0\uacb0\n        provider_account = ProviderAccount(\n            user_id=current_user.id,\n            provider=provider.value,\n            provider_user_id=user_info[\'provider_user_id\'],\n            provider_data=user_info\n        )\n        db.add(provider_account)\n        db.commit()\n\n        return {\n            "message": f"{provider.value} account linked successfully",\n            "user_id": current_user.id\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.delete(\'/unlink-account/{provider}\')\nasync def unlink_account(\n    provider: OAuthProvider,\n    current_user: User = Depends(get_current_user)\n):\n    """Provider \uacc4\uc815 \uc5f0\uacb0 \ud574\uc81c"""\n\n    # \ucd5c\uc18c 1\uac1c \uacc4\uc815 \uc720\uc9c0\n    linked_accounts = db.query(ProviderAccount).filter_by(\n        user_id=current_user.id\n    ).count()\n\n    if linked_accounts <= 1:\n        raise HTTPException(\n            status_code=400,\n            detail="Cannot unlink last account"\n        )\n\n    # \uc5f0\uacb0 \ud574\uc81c\n    db.query(ProviderAccount).filter_by(\n        user_id=current_user.id,\n        provider=provider.value\n    ).delete()\n    db.commit()\n\n    return {"message": f"{provider.value} account unlinked"}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uc0ac\uc6a9\uc790-\uc778\ud130\ud398\uc774\uc2a4",children:"\ud83c\udfa8 \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4"}),"\n",(0,t.jsx)(n.h3,{id:"\uacc4\uc815-\uc124\uc815-\ud398\uc774\uc9c0",children:"\uacc4\uc815 \uc124\uc815 \ud398\uc774\uc9c0"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.get(\'/settings/accounts\')\nasync def account_settings(\n    request: Request,\n    current_user: User = Depends(get_current_user)\n):\n    """\uacc4\uc815 \uc124\uc815 \ud398\uc774\uc9c0"""\n\n    # \uc5f0\uacb0\ub41c Provider \uc870\ud68c\n    linked_providers = db.query(ProviderAccount).filter_by(\n        user_id=current_user.id\n    ).all()\n\n    linked_provider_names = {pa.provider for pa in linked_providers}\n\n    # \uc0ac\uc6a9 \uac00\ub2a5\ud55c Provider\n    available_providers = [\n        {\n            "name": provider.value,\n            "display_name": provider.value.capitalize(),\n            "linked": provider.value in linked_provider_names,\n            "link_url": f"/link-account/{provider.value}",\n            "unlink_url": f"/unlink-account/{provider.value}"\n        }\n        for provider in OAuthProvider\n    ]\n\n    return templates.TemplateResponse(\n        "account_settings.html",\n        {\n            "request": request,\n            "user": current_user,\n            "providers": available_providers\n        }\n    )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"html-\ud15c\ud50c\ub9bf-jinja2",children:"HTML \ud15c\ud50c\ub9bf (Jinja2)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'\x3c!-- templates/account_settings.html --\x3e\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Account Settings</title>\n</head>\n<body>\n    <h1>Connected Accounts</h1>\n\n    <div class="providers">\n        {% for provider in providers %}\n        <div class="provider-card">\n            <h3>{{ provider.display_name }}</h3>\n\n            {% if provider.linked %}\n                <span class="badge badge-success">Connected</span>\n                <form action="{{ provider.unlink_url }}" method="POST">\n                    <button type="submit" class="btn btn-danger">Unlink</button>\n                </form>\n            {% else %}\n                <a href="{{ provider.link_url }}" class="btn btn-primary">\n                    Connect {{ provider.display_name }}\n                </a>\n            {% endif %}\n        </div>\n        {% endfor %}\n    </div>\n</body>\n</html>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-provider-\uc804\ud658",children:"\ud83d\udd04 Provider \uc804\ud658"}),"\n",(0,t.jsx)(n.h3,{id:"\ub85c\uadf8\uc778-provider-\ubcc0\uacbd",children:"\ub85c\uadf8\uc778 Provider \ubcc0\uacbd"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.post(\'/switch-provider/{provider}\')\nasync def switch_provider(\n    provider: OAuthProvider,\n    request: Request,\n    current_user: User = Depends(get_current_user)\n):\n    """\ub85c\uadf8\uc778 Provider \uc804\ud658"""\n\n    # Provider \uacc4\uc815 \ud655\uc778\n    provider_account = db.query(ProviderAccount).filter_by(\n        user_id=current_user.id,\n        provider=provider.value\n    ).first()\n\n    if not provider_account:\n        raise HTTPException(\n            status_code=400,\n            detail=f"{provider.value} account not linked"\n        )\n\n    # \uc138\uc158 \uc5c5\ub370\uc774\ud2b8\n    request.session[\'provider\'] = provider.value\n\n    # Provider Token \uac31\uc2e0 (\ud544\uc694 \uc2dc)\n    if provider_account.token_expires_at and \\\n       provider_account.token_expires_at < datetime.utcnow():\n        # Refresh Token\uc73c\ub85c \uac31\uc2e0\n        # ...\n\n    return {\n        "message": f"Switched to {provider.value}",\n        "provider": provider.value\n    }\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-\ubcf4\uc548-\uace0\ub824\uc0ac\ud56d",children:"\ud83d\udee1\ufe0f \ubcf4\uc548 \uace0\ub824\uc0ac\ud56d"}),"\n",(0,t.jsx)(n.h3,{id:"1-\uc774\uba54\uc77c-\uac80\uc99d",children:"1. \uc774\uba54\uc77c \uac80\uc99d"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def safe_account_linking(user_info: dict):\n    """\uc548\uc804\ud55c \uacc4\uc815 \uc5f0\ub3d9"""\n\n    email = user_info.get(\'email\')\n\n    if email:\n        existing_user = db.query(User).filter_by(email=email).first()\n\n        if existing_user:\n            # \u26a0\ufe0f \uc774\uba54\uc77c\uc774 \uac80\uc99d\ub41c \uacbd\uc6b0\uc5d0\ub9cc \uc790\ub3d9 \uc5f0\ub3d9\n            if not user_info.get(\'email_verified\'):\n                raise HTTPException(\n                    status_code=400,\n                    detail="Email verification required"\n                )\n\n            # \u2705 \uac80\uc99d\ub41c \uc774\uba54\uc77c \u2192 \uc548\uc804\ud558\uac8c \uc5f0\ub3d9\n            # ...\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-provider-\uc2e0\ub8b0\ub3c4",children:"2. Provider \uc2e0\ub8b0\ub3c4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'provider_trust_levels = {\n    OAuthProvider.GOOGLE: "high",     # \uac15\ub825\ud55c \uc774\uba54\uc77c \uac80\uc99d\n    OAuthProvider.MICROSOFT: "high",  # \uac15\ub825\ud55c \uc774\uba54\uc77c \uac80\uc99d\n    OAuthProvider.GITHUB: "medium",   # \uc774\uba54\uc77c \uc120\ud0dd\uc801\n    OAuthProvider.FACEBOOK: "low"     # \uc774\uba54\uc77c \ubcc0\uacbd \uac00\ub2a5\n}\n\ndef verify_email_with_provider(provider: OAuthProvider, email: str):\n    """Provider\ubcc4 \uc774\uba54\uc77c \uac80\uc99d \uc218\uc900 \ud655\uc778"""\n\n    trust_level = provider_trust_levels.get(provider, "low")\n\n    if trust_level == "low":\n        # \ucd94\uac00 \uc774\uba54\uc77c \uac80\uc99d \ud544\uc694\n        send_verification_email(email)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-\ud1a0\ud070-\uc554\ud638\ud654",children:"3. \ud1a0\ud070 \uc554\ud638\ud654"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from cryptography.fernet import Fernet\n\n# \uc554\ud638\ud654 \ud0a4\nENCRYPTION_KEY = Fernet.generate_key()\ncipher = Fernet(ENCRYPTION_KEY)\n\ndef encrypt_token(token: str) -> str:\n    """\ud1a0\ud070 \uc554\ud638\ud654"""\n    return cipher.encrypt(token.encode()).decode()\n\ndef decrypt_token(encrypted_token: str) -> str:\n    """\ud1a0\ud070 \ubcf5\ud638\ud654"""\n    return cipher.decrypt(encrypted_token.encode()).decode()\n\n# Provider \uacc4\uc815 \uc800\uc7a5 \uc2dc\nprovider_account.access_token = encrypt_token(token[\'access_token\'])\nprovider_account.refresh_token = encrypt_token(token.get(\'refresh_token\', \'\'))\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-provider-\ud1b5\uacc4",children:"\ud83d\udcca Provider \ud1b5\uacc4"}),"\n",(0,t.jsx)(n.h3,{id:"\uc0ac\uc6a9-\ud604\ud669-\uc870\ud68c",children:"\uc0ac\uc6a9 \ud604\ud669 \uc870\ud68c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@app.get(\'/admin/provider-stats\')\nasync def provider_stats(admin_user: User = Depends(require_admin)):\n    """Provider \uc0ac\uc6a9 \ud1b5\uacc4"""\n\n    stats = db.query(\n        ProviderAccount.provider,\n        func.count(ProviderAccount.id).label(\'count\')\n    ).group_by(ProviderAccount.provider).all()\n\n    return {\n        provider: count\n        for provider, count in stats\n    }\n\n# \uacb0\uacfc\n# {\n#   "google": 1250,\n#   "github": 850,\n#   "microsoft": 320\n# }\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../intermediate/google-oauth",children:"Google OAuth \ud1b5\ud569"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../intermediate/github-oauth",children:"GitHub OAuth \ud1b5\ud569"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../intermediate/fastapi-basics",children:"FastAPI OAuth \uae30\ucd08"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./security",children:"\ubcf4\uc548 Best Practices"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(n.p,{children:"Multi-Provider \uc9c0\uc6d0\uc744 \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \uc2e4\uc804 \uc2dc\ub098\ub9ac\uc624\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"../scenarios/social-login",children:"\uc18c\uc15c \ub85c\uadf8\uc778 \uc644\uc804 \uad6c\ud604"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": \uc774\uba54\uc77c\uc774 \uac80\uc99d\ub41c \uacbd\uc6b0\uc5d0\ub9cc \uc790\ub3d9 \uacc4\uc815 \uc5f0\ub3d9\uc744 \ud5c8\uc6a9\ud558\uc138\uc694. \ubcf4\uc548\uc774 \ucd5c\uc6b0\uc120\uc785\ub2c8\ub2e4!"]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>s});var i=r(6540);const t={},o=i.createContext(t);function d(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);