"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[2361],{4867:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"oauth/intermediate/fastapi-basics","title":"FastAPI OAuth \uae30\ucd08","description":"FastAPI\uc5d0\uc11c OAuth 2.0 / OIDC\ub97c \uad6c\ud604\ud558\ub294 \uae30\ubcf8 \ud328\ud134\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/oauth/intermediate/fastapi-basics.md","sourceDirName":"oauth/intermediate","slug":"/oauth/intermediate/fastapi-basics","permalink":"/tobias-docs/comp-1/docs/oauth/intermediate/fastapi-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oauth/intermediate/fastapi-basics.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"oauthSidebar","previous":{"title":"\uc6a9\uc5b4 \uc815\ub9ac","permalink":"/tobias-docs/comp-1/docs/oauth/basic/terminology"},"next":{"title":"Google OAuth \ud1b5\ud569","permalink":"/tobias-docs/comp-1/docs/oauth/intermediate/google-oauth"}}');var r=t(4848),i=t(8453);const o={sidebar_position:1},a="FastAPI OAuth \uae30\ucd08",u={},l=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udce6 \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac",id:"-\ud544\uc218-\ub77c\uc774\ube0c\ub7ec\ub9ac",level:2},{value:"\uc124\uce58",id:"\uc124\uce58",level:3},{value:"\ub77c\uc774\ube0c\ub7ec\ub9ac \uc5ed\ud560",id:"\ub77c\uc774\ube0c\ub7ec\ub9ac-\uc5ed\ud560",level:3},{value:"\ud83d\udee0\ufe0f \uae30\ubcf8 \uc124\uc815",id:"\ufe0f-\uae30\ubcf8-\uc124\uc815",level:2},{value:"\ud658\uacbd\ubcc0\uc218 (.env)",id:"\ud658\uacbd\ubcc0\uc218-env",level:3},{value:".gitignore",id:"gitignore",level:3},{value:"\ud83c\udfd7\ufe0f \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870",id:"\ufe0f-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",level:2},{value:"\u2699\ufe0f OAuth \uc124\uc815",id:"\ufe0f-oauth-\uc124\uc815",level:2},{value:"config.py",id:"configpy",level:3},{value:"auth/oauth.py",id:"authoauthpy",level:3},{value:"\ud83c\udfa8 \uba54\uc778 \uc571 \uc124\uc815",id:"-\uba54\uc778-\uc571-\uc124\uc815",level:2},{value:"main.py",id:"mainpy",level:3},{value:"\ud83d\udd10 \uc778\uc99d \ub77c\uc6b0\ud2b8",id:"-\uc778\uc99d-\ub77c\uc6b0\ud2b8",level:2},{value:"auth/routes.py",id:"authroutespy",level:3},{value:"\ud83d\udee1\ufe0f \uc758\uc874\uc131 \uc8fc\uc785\uc73c\ub85c \ub77c\uc6b0\ud2b8 \ubcf4\ud638",id:"\ufe0f-\uc758\uc874\uc131-\uc8fc\uc785\uc73c\ub85c-\ub77c\uc6b0\ud2b8-\ubcf4\ud638",level:2},{value:"auth/dependencies.py",id:"authdependenciespy",level:3},{value:"\ud83d\udd12 \ubcf4\ud638\ub41c API \ub77c\uc6b0\ud2b8",id:"-\ubcf4\ud638\ub41c-api-\ub77c\uc6b0\ud2b8",level:2},{value:"api/routes.py",id:"apiroutespy",level:3},{value:"\ud83c\udfa8 \uace0\uae09 \ud328\ud134",id:"-\uace0\uae09-\ud328\ud134",level:2},{value:"1. \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc815\uaddc\ud654",id:"1-\uc0ac\uc6a9\uc790-\uc815\ubcf4-\uc815\uaddc\ud654",level:3},{value:"2. \ud1a0\ud070 \uac31\uc2e0 \ubbf8\ub4e4\uc6e8\uc5b4",id:"2-\ud1a0\ud070-\uac31\uc2e0-\ubbf8\ub4e4\uc6e8\uc5b4",level:3},{value:"3. DB \uc5f0\ub3d9 (SQLAlchemy)",id:"3-db-\uc5f0\ub3d9-sqlalchemy",level:3},{value:"\ud83e\uddea \ud14c\uc2a4\ud2b8",id:"-\ud14c\uc2a4\ud2b8",level:2},{value:"tests/test_auth.py",id:"teststest_authpy",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"fastapi-oauth-\uae30\ucd08",children:"FastAPI OAuth \uae30\ucd08"})}),"\n",(0,r.jsx)(n.p,{children:"FastAPI\uc5d0\uc11c OAuth 2.0 / OIDC\ub97c \uad6c\ud604\ud558\ub294 \uae30\ubcf8 \ud328\ud134\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 FastAPI\uc5d0\uc11c OAuth \uc124\uc815"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Authlib \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc138\uc158 \uad00\ub9ac"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ub77c\uc6b0\ud2b8 \ubcf4\ud638"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc758\uc874\uc131 \uc8fc\uc785 \ud328\ud134"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ud544\uc218-\ub77c\uc774\ube0c\ub7ec\ub9ac",children:"\ud83d\udce6 \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac"}),"\n",(0,r.jsx)(n.h3,{id:"\uc124\uce58",children:"\uc124\uce58"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# FastAPI \uad00\ub828\npip install fastapi uvicorn python-multipart\n\n# OAuth/OIDC\npip install authlib httpx\n\n# \uc138\uc158 \uad00\ub9ac\npip install itsdangerous\n\n# JWT \ucc98\ub9ac (\uc120\ud0dd)\npip install python-jose[cryptography]\n\n# \ud658\uacbd\ubcc0\uc218 \uad00\ub9ac\npip install python-dotenv\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ub77c\uc774\ube0c\ub7ec\ub9ac-\uc5ed\ud560",children:"\ub77c\uc774\ube0c\ub7ec\ub9ac \uc5ed\ud560"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'libraries = {\n    "fastapi": "\uc6f9 \ud504\ub808\uc784\uc6cc\ud06c",\n    "uvicorn": "ASGI \uc11c\ubc84",\n    "authlib": "OAuth/OIDC \ud074\ub77c\uc774\uc5b8\ud2b8/\uc11c\ubc84",\n    "httpx": "\ube44\ub3d9\uae30 HTTP \ud074\ub77c\uc774\uc5b8\ud2b8",\n    "python-multipart": "Form \ub370\uc774\ud130 \ucc98\ub9ac",\n    "itsdangerous": "\uc548\uc804\ud55c \uc138\uc158 \uc11c\uba85",\n    "python-jose": "JWT \uc778\ucf54\ub529/\ub514\ucf54\ub529",\n    "python-dotenv": ".env \ud30c\uc77c \ub85c\ub529"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-\uae30\ubcf8-\uc124\uc815",children:"\ud83d\udee0\ufe0f \uae30\ubcf8 \uc124\uc815"}),"\n",(0,r.jsx)(n.h3,{id:"\ud658\uacbd\ubcc0\uc218-env",children:"\ud658\uacbd\ubcc0\uc218 (.env)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# .env \ud30c\uc77c\n# \u26a0\ufe0f \uc808\ub300 Git\uc5d0 \ucee4\ubc0b\ud558\uc9c0 \ub9c8\uc138\uc694!\n\n# \uc571 \uc124\uc815\nSECRET_KEY=your-super-secret-key-change-this-in-production\n\n# Google OAuth\nGOOGLE_CLIENT_ID=123456789-abc.apps.googleusercontent.com\nGOOGLE_CLIENT_SECRET=GOCSPX-your-client-secret\n\n# GitHub OAuth\nGITHUB_CLIENT_ID=Iv1.a1b2c3d4e5f6g7h8\nGITHUB_CLIENT_SECRET=your-github-client-secret\n\n# App URLs\nBASE_URL=http://localhost:8000\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gitignore",children:".gitignore"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# .gitignore\n.env\n__pycache__/\n*.pyc\n.venv/\nvenv/\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-\ud504\ub85c\uc81d\ud2b8-\uad6c\uc870",children:"\ud83c\udfd7\ufe0f \ud504\ub85c\uc81d\ud2b8 \uad6c\uc870"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"oauth_app/\n\u251c\u2500\u2500 .env                    # \ud658\uacbd\ubcc0\uc218 (Git \uc81c\uc678)\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 requirements.txt        # \uc758\uc874\uc131\n\u251c\u2500\u2500 main.py                # \uba54\uc778 \uc571\n\u251c\u2500\u2500 config.py              # \uc124\uc815\n\u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 oauth.py           # OAuth \uc124\uc815\n\u2502   \u251c\u2500\u2500 dependencies.py    # FastAPI \uc758\uc874\uc131\n\u2502   \u2514\u2500\u2500 routes.py          # \uc778\uc99d \ub77c\uc6b0\ud2b8\n\u2514\u2500\u2500 api/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 routes.py          # \ubcf4\ud638\ub41c API \ub77c\uc6b0\ud2b8\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-oauth-\uc124\uc815",children:"\u2699\ufe0f OAuth \uc124\uc815"}),"\n",(0,r.jsx)(n.h3,{id:"configpy",children:"config.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from pydantic_settings import BaseSettings\nfrom functools import lru_cache\n\nclass Settings(BaseSettings):\n    """\ud658\uacbd\ubcc0\uc218 \uc124\uc815"""\n\n    # \uc571 \uc124\uc815\n    app_name: str = "OAuth FastAPI App"\n    secret_key: str\n    base_url: str = "http://localhost:8000"\n\n    # Google OAuth\n    google_client_id: str\n    google_client_secret: str\n\n    # GitHub OAuth\n    github_client_id: str | None = None\n    github_client_secret: str | None = None\n\n    class Config:\n        env_file = ".env"\n        case_sensitive = False\n\n@lru_cache()\ndef get_settings() -> Settings:\n    """\uc2f1\uae00\ud1a4 \uc124\uc815 \uc778\uc2a4\ud134\uc2a4"""\n    return Settings()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"authoauthpy",children:"auth/oauth.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from authlib.integrations.starlette_client import OAuth\nfrom starlette.config import Config\n\n# Config \ub85c\ub529\nconfig = Config('.env')\n\n# OAuth \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\noauth = OAuth(config)\n\n# Google OAuth \ub4f1\ub85d\noauth.register(\n    name='google',\n    client_id=config('GOOGLE_CLIENT_ID'),\n    client_secret=config('GOOGLE_CLIENT_SECRET'),\n    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n    client_kwargs={\n        'scope': 'openid email profile'\n    }\n)\n\n# GitHub OAuth \ub4f1\ub85d\noauth.register(\n    name='github',\n    client_id=config('GITHUB_CLIENT_ID', default=None),\n    client_secret=config('GITHUB_CLIENT_SECRET', default=None),\n    authorize_url='https://github.com/login/oauth/authorize',\n    access_token_url='https://github.com/login/oauth/access_token',\n    api_base_url='https://api.github.com/',\n    client_kwargs={'scope': 'user:email'}\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uba54\uc778-\uc571-\uc124\uc815",children:"\ud83c\udfa8 \uba54\uc778 \uc571 \uc124\uc815"}),"\n",(0,r.jsx)(n.h3,{id:"mainpy",children:"main.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom config import get_settings\nfrom auth.routes import router as auth_router\nfrom api.routes import router as api_router\n\n# \uc124\uc815 \ub85c\ub4dc\nsettings = get_settings()\n\n# FastAPI \uc571 \uc0dd\uc131\napp = FastAPI(\n    title=settings.app_name,\n    description="OAuth 2.0 & OIDC with FastAPI",\n    version="1.0.0"\n)\n\n# \uc138\uc158 \ubbf8\ub4e4\uc6e8\uc5b4 \ucd94\uac00 (OAuth state \uc800\uc7a5\uc6a9)\napp.add_middleware(\n    SessionMiddleware,\n    secret_key=settings.secret_key,\n    session_cookie="session",\n    max_age=86400,  # 24\uc2dc\uac04\n    same_site="lax",\n    https_only=False  # \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 True\n)\n\n# \ub77c\uc6b0\ud130 \ub4f1\ub85d\napp.include_router(auth_router, prefix="/auth", tags=["Authentication"])\napp.include_router(api_router, prefix="/api", tags=["API"])\n\n@app.get("/", response_class=HTMLResponse)\nasync def home():\n    """\ud648\ud398\uc774\uc9c0"""\n    return """\n    <html>\n        <head><title>OAuth FastAPI</title></head>\n        <body>\n            <h1>OAuth 2.0 with FastAPI</h1>\n            <ul>\n                <li><a href="/auth/login/google">Google \ub85c\uadf8\uc778</a></li>\n                <li><a href="/auth/login/github">GitHub \ub85c\uadf8\uc778</a></li>\n                <li><a href="/api/me">\ub0b4 \uc815\ubcf4 (\ubcf4\ud638\ub428)</a></li>\n                <li><a href="/docs">API \ubb38\uc11c</a></li>\n            </ul>\n        </body>\n    </html>\n    """\n\n@app.get("/health")\nasync def health_check():\n    """\ud5ec\uc2a4 \uccb4\ud06c"""\n    return {"status": "healthy"}\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc778\uc99d-\ub77c\uc6b0\ud2b8",children:"\ud83d\udd10 \uc778\uc99d \ub77c\uc6b0\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"authroutespy",children:"auth/routes.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from fastapi import APIRouter, Request, HTTPException\nfrom fastapi.responses import RedirectResponse\nfrom auth.oauth import oauth\n\nrouter = APIRouter()\n\n# ==================== Google OAuth ====================\n\n@router.get('/login/google')\nasync def login_google(request: Request):\n    \"\"\"Google \ub85c\uadf8\uc778 \uc2dc\uc791\"\"\"\n    redirect_uri = request.url_for('auth_google')\n    return await oauth.google.authorize_redirect(request, redirect_uri)\n\n@router.get('/google')\nasync def auth_google(request: Request):\n    \"\"\"Google OAuth \ucf5c\ubc31\"\"\"\n    try:\n        # Access Token \ubc1b\uae30\n        token = await oauth.google.authorize_access_token(request)\n\n        # \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30\n        user = token.get('userinfo')\n\n        if not user:\n            raise HTTPException(status_code=400, detail=\"Failed to get user info\")\n\n        # \uc138\uc158\uc5d0 \uc800\uc7a5\n        request.session['user'] = {\n            'provider': 'google',\n            'sub': user['sub'],\n            'email': user['email'],\n            'name': user['name'],\n            'picture': user.get('picture')\n        }\n\n        # \ud1a0\ud070\ub3c4 \uc800\uc7a5 (\uc120\ud0dd)\n        request.session['tokens'] = {\n            'access_token': token['access_token'],\n            'refresh_token': token.get('refresh_token'),\n            'id_token': token.get('id_token')\n        }\n\n        return RedirectResponse(url='/')\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n# ==================== GitHub OAuth ====================\n\n@router.get('/login/github')\nasync def login_github(request: Request):\n    \"\"\"GitHub \ub85c\uadf8\uc778 \uc2dc\uc791\"\"\"\n    redirect_uri = request.url_for('auth_github')\n    return await oauth.github.authorize_redirect(request, redirect_uri)\n\n@router.get('/github')\nasync def auth_github(request: Request):\n    \"\"\"GitHub OAuth \ucf5c\ubc31\"\"\"\n    try:\n        # Access Token \ubc1b\uae30\n        token = await oauth.github.authorize_access_token(request)\n\n        # \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uac00\uc838\uc624\uae30\n        resp = await oauth.github.get('user', token=token)\n        user = resp.json()\n\n        # \uc774\uba54\uc77c \uac00\uc838\uc624\uae30 (\ubcc4\ub3c4 \uc694\uccad)\n        emails_resp = await oauth.github.get('user/emails', token=token)\n        emails = emails_resp.json()\n        primary_email = next(\n            (email['email'] for email in emails if email['primary']),\n            None\n        )\n\n        # \uc138\uc158\uc5d0 \uc800\uc7a5\n        request.session['user'] = {\n            'provider': 'github',\n            'id': user['id'],\n            'login': user['login'],\n            'email': primary_email,\n            'name': user.get('name', user['login']),\n            'avatar': user['avatar_url']\n        }\n\n        request.session['tokens'] = {\n            'access_token': token['access_token']\n        }\n\n        return RedirectResponse(url='/')\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n# ==================== \ub85c\uadf8\uc544\uc6c3 ====================\n\n@router.post('/logout')\nasync def logout(request: Request):\n    \"\"\"\ub85c\uadf8\uc544\uc6c3\"\"\"\n    request.session.clear()\n    return {\"message\": \"Logged out successfully\"}\n\n@router.get('/logout')\nasync def logout_get(request: Request):\n    \"\"\"\ub85c\uadf8\uc544\uc6c3 (GET)\"\"\"\n    request.session.clear()\n    return RedirectResponse(url='/')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-\uc758\uc874\uc131-\uc8fc\uc785\uc73c\ub85c-\ub77c\uc6b0\ud2b8-\ubcf4\ud638",children:"\ud83d\udee1\ufe0f \uc758\uc874\uc131 \uc8fc\uc785\uc73c\ub85c \ub77c\uc6b0\ud2b8 \ubcf4\ud638"}),"\n",(0,r.jsx)(n.h3,{id:"authdependenciespy",children:"auth/dependencies.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import Depends, HTTPException, Request, status\nfrom typing import Annotated\n\ndef get_current_user(request: Request):\n    """\ud604\uc7ac \ub85c\uadf8\uc778 \uc0ac\uc6a9\uc790 \uac00\uc838\uc624\uae30"""\n    user = request.session.get(\'user\')\n\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail="Not authenticated",\n            headers={"WWW-Authenticate": "Bearer"},\n        )\n\n    return user\n\ndef get_current_user_optional(request: Request):\n    """\ud604\uc7ac \ub85c\uadf8\uc778 \uc0ac\uc6a9\uc790 \uac00\uc838\uc624\uae30 (\uc120\ud0dd\uc801)"""\n    return request.session.get(\'user\')\n\ndef get_access_token(request: Request) -> str:\n    """Access Token \uac00\uc838\uc624\uae30"""\n    tokens = request.session.get(\'tokens\')\n\n    if not tokens or \'access_token\' not in tokens:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail="No access token"\n        )\n\n    return tokens[\'access_token\']\n\n# \ud0c0\uc785 \ubcc4\uce6d (\ud3b8\uc758\uc6a9)\nCurrentUser = Annotated[dict, Depends(get_current_user)]\nCurrentUserOptional = Annotated[dict | None, Depends(get_current_user_optional)]\nAccessToken = Annotated[str, Depends(get_access_token)]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\ubcf4\ud638\ub41c-api-\ub77c\uc6b0\ud2b8",children:"\ud83d\udd12 \ubcf4\ud638\ub41c API \ub77c\uc6b0\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"apiroutespy",children:"api/routes.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, HTTPException\nfrom auth.dependencies import CurrentUser, CurrentUserOptional, AccessToken\nimport httpx\n\nrouter = APIRouter()\n\n@router.get(\'/me\')\nasync def get_me(user: CurrentUser):\n    """\ud604\uc7ac \uc0ac\uc6a9\uc790 \uc815\ubcf4"""\n    return {\n        "message": "Authenticated user",\n        "user": user\n    }\n\n@router.get(\'/profile\')\nasync def get_profile(user: CurrentUserOptional):\n    """\ud504\ub85c\ud544 (\uc120\ud0dd\uc801 \uc778\uc99d)"""\n    if user:\n        return {"message": "Logged in", "user": user}\n    else:\n        return {"message": "Not logged in", "user": None}\n\n@router.get(\'/google/photos\')\nasync def get_google_photos(user: CurrentUser, access_token: AccessToken):\n    """Google Photos \uac00\uc838\uc624\uae30 (\uc608\uc2dc)"""\n\n    # Provider \ud655\uc778\n    if user.get(\'provider\') != \'google\':\n        raise HTTPException(status_code=400, detail="Google \uacc4\uc815\ub9cc \uac00\ub2a5")\n\n    # Google Photos API \ud638\ucd9c\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(\n                \'https://photoslibrary.googleapis.com/v1/mediaItems\',\n                headers={\'Authorization\': f\'Bearer {access_token}\'},\n                params={\'pageSize\': 10}\n            )\n\n            if response.status_code != 200:\n                raise HTTPException(\n                    status_code=response.status_code,\n                    detail="Failed to fetch photos"\n                )\n\n            return response.json()\n\n        except httpx.HTTPError as e:\n            raise HTTPException(status_code=500, detail=str(e))\n\n@router.get(\'/github/repos\')\nasync def get_github_repos(user: CurrentUser, access_token: AccessToken):\n    """GitHub \uc800\uc7a5\uc18c \uac00\uc838\uc624\uae30"""\n\n    if user.get(\'provider\') != \'github\':\n        raise HTTPException(status_code=400, detail="GitHub \uacc4\uc815\ub9cc \uac00\ub2a5")\n\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\n            \'https://api.github.com/user/repos\',\n            headers={\n                \'Authorization\': f\'Bearer {access_token}\',\n                \'Accept\': \'application/vnd.github.v3+json\'\n            },\n            params={\'per_page\': 10, \'sort\': \'updated\'}\n        )\n\n        if response.status_code != 200:\n            raise HTTPException(\n                status_code=response.status_code,\n                detail="Failed to fetch repos"\n            )\n\n        return response.json()\n\n# \uad00\ub9ac\uc790 \uc804\uc6a9 \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ndef get_admin_user(user: CurrentUser):\n    """\uad00\ub9ac\uc790 \uad8c\ud55c \ud655\uc778"""\n    # \uc2e4\uc81c\ub85c\ub294 DB\uc5d0\uc11c \uc5ed\ud560 \ud655\uc778\n    if user.get(\'email\') not in [\'admin@example.com\']:\n        raise HTTPException(\n            status_code=403,\n            detail="Forbidden: Admin access required"\n        )\n    return user\n\n@router.get(\'/admin/users\')\nasync def admin_users(admin: dict = Depends(get_admin_user)):\n    """\uad00\ub9ac\uc790 \uc804\uc6a9: \uc0ac\uc6a9\uc790 \ubaa9\ub85d"""\n    return {\n        "message": "Admin access granted",\n        "admin": admin,\n        "users": []  # DB\uc5d0\uc11c \uc870\ud68c\n    }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\uace0\uae09-\ud328\ud134",children:"\ud83c\udfa8 \uace0\uae09 \ud328\ud134"}),"\n",(0,r.jsx)(n.h3,{id:"1-\uc0ac\uc6a9\uc790-\uc815\ubcf4-\uc815\uaddc\ud654",children:"1. \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc815\uaddc\ud654"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# auth/models.py\nfrom pydantic import BaseModel\nfrom typing import Literal\n\nclass User(BaseModel):\n    \"\"\"\uc815\uaddc\ud654\ub41c \uc0ac\uc6a9\uc790 \ubaa8\ub378\"\"\"\n    provider: Literal['google', 'github']\n    id: str  # sub \ub610\ub294 provider ID\n    email: str\n    name: str\n    picture: str | None = None\n\n    @classmethod\n    def from_google(cls, userinfo: dict):\n        \"\"\"Google \uc0ac\uc6a9\uc790 \uc815\ubcf4 \ubcc0\ud658\"\"\"\n        return cls(\n            provider='google',\n            id=userinfo['sub'],\n            email=userinfo['email'],\n            name=userinfo['name'],\n            picture=userinfo.get('picture')\n        )\n\n    @classmethod\n    def from_github(cls, user: dict, email: str):\n        \"\"\"GitHub \uc0ac\uc6a9\uc790 \uc815\ubcf4 \ubcc0\ud658\"\"\"\n        return cls(\n            provider='github',\n            id=str(user['id']),\n            email=email,\n            name=user.get('name', user['login']),\n            picture=user['avatar_url']\n        )\n\n# \uc0ac\uc6a9\nuser_model = User.from_google(userinfo)\nrequest.session['user'] = user_model.model_dump()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-\ud1a0\ud070-\uac31\uc2e0-\ubbf8\ub4e4\uc6e8\uc5b4",children:"2. \ud1a0\ud070 \uac31\uc2e0 \ubbf8\ub4e4\uc6e8\uc5b4"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# auth/middleware.py\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom datetime import datetime, timedelta\nimport httpx\n\nclass TokenRefreshMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        \"\"\"Access Token \uc790\ub3d9 \uac31\uc2e0\"\"\"\n\n        tokens = request.session.get('tokens')\n        if tokens and 'refresh_token' in tokens:\n            # \ub9cc\ub8cc \uc2dc\uac04 \ud655\uc778\n            expires_at = tokens.get('expires_at')\n            if expires_at:\n                expires_dt = datetime.fromisoformat(expires_at)\n\n                # 5\ubd84 \uc774\ub0b4 \ub9cc\ub8cc \uc608\uc815\uc774\uba74 \uac31\uc2e0\n                if datetime.now() + timedelta(minutes=5) >= expires_dt:\n                    await self.refresh_token(request, tokens['refresh_token'])\n\n        response = await call_next(request)\n        return response\n\n    async def refresh_token(self, request, refresh_token: str):\n        \"\"\"Refresh Token\uc73c\ub85c \uac31\uc2e0\"\"\"\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                'https://oauth2.googleapis.com/token',\n                data={\n                    'grant_type': 'refresh_token',\n                    'refresh_token': refresh_token,\n                    'client_id': GOOGLE_CLIENT_ID,\n                    'client_secret': GOOGLE_CLIENT_SECRET\n                }\n            )\n\n            if response.status_code == 200:\n                data = response.json()\n                tokens = request.session['tokens']\n                tokens['access_token'] = data['access_token']\n                tokens['expires_at'] = (\n                    datetime.now() + timedelta(seconds=data['expires_in'])\n                ).isoformat()\n                request.session['tokens'] = tokens\n\n# main.py\uc5d0 \ucd94\uac00\napp.add_middleware(TokenRefreshMiddleware)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-db-\uc5f0\ub3d9-sqlalchemy",children:"3. DB \uc5f0\ub3d9 (SQLAlchemy)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# db/models.py\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom datetime import datetime\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    provider = Column(String(50), nullable=False)\n    provider_id = Column(String(255), nullable=False, unique=True)\n    email = Column(String(255), nullable=False)\n    name = Column(String(255))\n    picture = Column(String(500))\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass OAuthToken(Base):\n    __tablename__ = 'oauth_tokens'\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'))\n    access_token = Column(String(500))\n    refresh_token = Column(String(500))\n    expires_at = Column(DateTime)\n\n# auth/routes.py\uc5d0\uc11c \uc0ac\uc6a9\nfrom db.models import User, OAuthToken\nfrom db.session import get_db\n\n@router.get('/google')\nasync def auth_google(request: Request, db: Session = Depends(get_db)):\n    token = await oauth.google.authorize_access_token(request)\n    userinfo = token.get('userinfo')\n\n    # DB\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ucc3e\uae30 \ub610\ub294 \uc0dd\uc131\n    user = db.query(User).filter_by(\n        provider='google',\n        provider_id=userinfo['sub']\n    ).first()\n\n    if not user:\n        user = User(\n            provider='google',\n            provider_id=userinfo['sub'],\n            email=userinfo['email'],\n            name=userinfo['name'],\n            picture=userinfo.get('picture')\n        )\n        db.add(user)\n        db.commit()\n\n    # \ud1a0\ud070 \uc800\uc7a5\n    oauth_token = OAuthToken(\n        user_id=user.id,\n        access_token=token['access_token'],\n        refresh_token=token.get('refresh_token'),\n        expires_at=datetime.now() + timedelta(seconds=token['expires_in'])\n    )\n    db.add(oauth_token)\n    db.commit()\n\n    # \uc138\uc158\uc5d0 \uc800\uc7a5\n    request.session['user_id'] = user.id\n\n    return RedirectResponse(url='/')\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ud14c\uc2a4\ud2b8",children:"\ud83e\uddea \ud14c\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"teststest_authpy",children:"tests/test_auth.py"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef test_home():\n    """\ud648\ud398\uc774\uc9c0 \ud14c\uc2a4\ud2b8"""\n    response = client.get("/")\n    assert response.status_code == 200\n    assert "OAuth 2.0" in response.text\n\ndef test_protected_route_unauthorized():\n    """\uc778\uc99d \uc5c6\uc774 \ubcf4\ud638\ub41c \ub77c\uc6b0\ud2b8 \uc811\uadfc"""\n    response = client.get("/api/me")\n    assert response.status_code == 401\n\ndef test_login_redirect():\n    """\ub85c\uadf8\uc778 \ub9ac\ub2e4\uc774\ub809\ud2b8 \ud14c\uc2a4\ud2b8"""\n    response = client.get("/auth/login/google", follow_redirects=False)\n    assert response.status_code == 307  # Redirect\n    assert "accounts.google.com" in response.headers[\'location\']\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./google-oauth",children:"Google OAuth \ud1b5\ud569"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./github-oauth",children:"GitHub OAuth \ud1b5\ud569"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./jwt-tokens",children:"JWT \ud1a0\ud070 \ucc98\ub9ac"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../advanced/security",children:"\ubcf4\uc548 Best Practices"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsx)(n.p,{children:"FastAPI OAuth \uae30\ucd08\ub97c \uc774\ud574\ud588\ub2e4\uba74, \uc774\uc81c \uc2e4\uc81c Provider \ud1b5\ud569\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,r.jsx)(n.a,{href:"./google-oauth",children:"Google OAuth \ud1b5\ud569"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": \ud504\ub85c\ub355\uc158 \ud658\uacbd\uc5d0\uc11c\ub294 \ud56d\uc0c1 HTTPS\ub97c \uc0ac\uc6a9\ud558\uace0, \ud658\uacbd\ubcc0\uc218\ub97c \uc548\uc804\ud558\uac8c \uad00\ub9ac\ud558\uc138\uc694!"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);