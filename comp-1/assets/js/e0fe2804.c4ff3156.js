"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[1337],{3937:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>t,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"sqlalchemy/basic/crud","title":"\uae30\ubcf8 CRUD \uc791\uc5c5","description":"SQLAlchemy ORM\uc73c\ub85c PostgreSQL \ub370\uc774\ud130\ub97c \uc0dd\uc131, \uc870\ud68c, \uc218\uc815, \uc0ad\uc81c\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/basic/crud.md","sourceDirName":"sqlalchemy/basic","slug":"/sqlalchemy/basic/crud","permalink":"/docs/sqlalchemy/basic/crud","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/basic/crud.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"sqlalchemySidebar","previous":{"title":"ORM \ubaa8\ub378 \uc815\uc758","permalink":"/docs/sqlalchemy/basic/models"},"next":{"title":"PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785 \ub9e4\ud551","permalink":"/docs/sqlalchemy/basic/data-types"}}');var i=n(4848),l=n(8453);const a={sidebar_position:3},t="\uae30\ubcf8 CRUD \uc791\uc5c5",o={},c=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udd27 \uae30\ubcf8 \uc124\uc815",id:"-\uae30\ubcf8-\uc124\uc815",level:2},{value:"\u2795 Create - \ub370\uc774\ud130 \uc0dd\uc131",id:"-create---\ub370\uc774\ud130-\uc0dd\uc131",level:2},{value:"\ub2e8\uc77c \ub808\ucf54\ub4dc \uc0dd\uc131",id:"\ub2e8\uc77c-\ub808\ucf54\ub4dc-\uc0dd\uc131",level:3},{value:"\uc5ec\ub7ec \ub808\ucf54\ub4dc \ub3d9\uc2dc \uc0dd\uc131",id:"\uc5ec\ub7ec-\ub808\ucf54\ub4dc-\ub3d9\uc2dc-\uc0dd\uc131",level:3},{value:"\uc0dd\uc131 \ud6c4 \uc989\uc2dc \uc870\ud68c",id:"\uc0dd\uc131-\ud6c4-\uc989\uc2dc-\uc870\ud68c",level:3},{value:"Bulk Insert (\ub300\ub7c9 \uc0bd\uc785)",id:"bulk-insert-\ub300\ub7c9-\uc0bd\uc785",level:3},{value:"\ud83d\udd0d Read - \ub370\uc774\ud130 \uc870\ud68c",id:"-read---\ub370\uc774\ud130-\uc870\ud68c",level:2},{value:"\uc804\uccb4 \uc870\ud68c",id:"\uc804\uccb4-\uc870\ud68c",level:3},{value:"Primary Key\ub85c \uc870\ud68c",id:"primary-key\ub85c-\uc870\ud68c",level:3},{value:"\uc870\uac74\ubd80 \uc870\ud68c (WHERE)",id:"\uc870\uac74\ubd80-\uc870\ud68c-where",level:3},{value:"\uc815\ub82c (ORDER BY)",id:"\uc815\ub82c-order-by",level:3},{value:"\ud398\uc774\uc9d5 (LIMIT/OFFSET)",id:"\ud398\uc774\uc9d5-limitoffset",level:3},{value:"\uac1c\uc218 \uc138\uae30 (COUNT)",id:"\uac1c\uc218-\uc138\uae30-count",level:3},{value:"\ud2b9\uc815 \uceec\ub7fc\ub9cc \uc870\ud68c",id:"\ud2b9\uc815-\uceec\ub7fc\ub9cc-\uc870\ud68c",level:3},{value:"\uc870\ud68c \uacb0\uacfc \uc635\uc158",id:"\uc870\ud68c-\uacb0\uacfc-\uc635\uc158",level:3},{value:"\u270f\ufe0f Update - \ub370\uc774\ud130 \uc218\uc815",id:"\ufe0f-update---\ub370\uc774\ud130-\uc218\uc815",level:2},{value:"\uac1d\uccb4 \uc218\uc815 \ud6c4 \ucee4\ubc0b",id:"\uac1d\uccb4-\uc218\uc815-\ud6c4-\ucee4\ubc0b",level:3},{value:"Bulk Update (\ub300\ub7c9 \uc218\uc815)",id:"bulk-update-\ub300\ub7c9-\uc218\uc815",level:3},{value:"\uc870\uac74\ubd80 \uc77c\uad04 \uc218\uc815",id:"\uc870\uac74\ubd80-\uc77c\uad04-\uc218\uc815",level:3},{value:"\u274c Delete - \ub370\uc774\ud130 \uc0ad\uc81c",id:"-delete---\ub370\uc774\ud130-\uc0ad\uc81c",level:2},{value:"\uac1d\uccb4 \uc0ad\uc81c",id:"\uac1d\uccb4-\uc0ad\uc81c",level:3},{value:"Bulk Delete (\ub300\ub7c9 \uc0ad\uc81c)",id:"bulk-delete-\ub300\ub7c9-\uc0ad\uc81c",level:3},{value:"\uc870\uac74\ubd80 \uc0ad\uc81c",id:"\uc870\uac74\ubd80-\uc0ad\uc81c",level:3},{value:"\ud83d\udd04 \uc138\uc158 \uad00\ub9ac",id:"-\uc138\uc158-\uad00\ub9ac",level:2},{value:"Context Manager \uc0ac\uc6a9 (\uad8c\uc7a5)",id:"context-manager-\uc0ac\uc6a9-\uad8c\uc7a5",level:3},{value:"\uba85\uc2dc\uc801 \uc138\uc158 \uad00\ub9ac",id:"\uba85\uc2dc\uc801-\uc138\uc158-\uad00\ub9ac",level:3},{value:"SessionLocal \ud328\ud134 (FastAPI \ub4f1)",id:"sessionlocal-\ud328\ud134-fastapi-\ub4f1",level:3},{value:"\ud83d\udd12 \ud2b8\ub79c\uc7ad\uc158",id:"-\ud2b8\ub79c\uc7ad\uc158",level:2},{value:"\uae30\ubcf8 \ud2b8\ub79c\uc7ad\uc158",id:"\uae30\ubcf8-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"\uba85\uc2dc\uc801 \ud2b8\ub79c\uc7ad\uc158",id:"\uba85\uc2dc\uc801-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"Savepoint (\uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158)",id:"savepoint-\uc911\ucca9-\ud2b8\ub79c\uc7ad\uc158",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 CRUD \ud328\ud134",id:"-\uc2e4\uc804-crud-\ud328\ud134",level:2},{value:"Repository \ud328\ud134",id:"repository-\ud328\ud134",level:3},{value:"CRUD \ud5ec\ud37c \ud568\uc218",id:"crud-\ud5ec\ud37c-\ud568\uc218",level:3},{value:"\ud83c\udfaf \uc2e4\uc804 \uc608\uc81c",id:"-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\uc0ac\uc6a9\uc790 \uad00\ub9ac \uc2dc\uc2a4\ud15c",id:"\uc0ac\uc6a9\uc790-\uad00\ub9ac-\uc2dc\uc2a4\ud15c",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. N+1 \ucffc\ub9ac \ubb38\uc81c \uc8fc\uc758",id:"1-n1-\ucffc\ub9ac-\ubb38\uc81c-\uc8fc\uc758",level:3},{value:"2. flush() vs commit()",id:"2-flush-vs-commit",level:3},{value:"3. \uc790\ub3d9 \uc0c8\ub85c\uace0\uce68",id:"3-\uc790\ub3d9-\uc0c8\ub85c\uace0\uce68",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"\uae30\ubcf8-crud-\uc791\uc5c5",children:"\uae30\ubcf8 CRUD \uc791\uc5c5"})}),"\n",(0,i.jsx)(s.p,{children:"SQLAlchemy ORM\uc73c\ub85c PostgreSQL \ub370\uc774\ud130\ub97c \uc0dd\uc131, \uc870\ud68c, \uc218\uc815, \uc0ad\uc81c\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,i.jsx)(s.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"\u2705 Create - \ub370\uc774\ud130 \uc0dd\uc131"}),"\n",(0,i.jsx)(s.li,{children:"\u2705 Read - \ub370\uc774\ud130 \uc870\ud68c"}),"\n",(0,i.jsx)(s.li,{children:"\u2705 Update - \ub370\uc774\ud130 \uc218\uc815"}),"\n",(0,i.jsx)(s.li,{children:"\u2705 Delete - \ub370\uc774\ud130 \uc0ad\uc81c"}),"\n",(0,i.jsx)(s.li,{children:"\u2705 \uc138\uc158(Session) \uad00\ub9ac"}),"\n",(0,i.jsx)(s.li,{children:"\u2705 \ud2b8\ub79c\uc7ad\uc158 \uc774\ud574"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"-\uae30\ubcf8-\uc124\uc815",children:"\ud83d\udd27 \uae30\ubcf8 \uc124\uc815"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import create_engine, String, select\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, Session\n\n# Base \ud074\ub798\uc2a4\nclass Base(DeclarativeBase):\n    pass\n\n# \ubaa8\ub378 \uc815\uc758\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n    email: Mapped[str] = mapped_column(String(100))\n    age: Mapped[int | None]\n\n    def __repr__(self):\n        return f\"<User(id={self.id}, username='{self.username}')>\"\n\n# Engine \uc0dd\uc131\nengine = create_engine('postgresql://postgres:password@localhost/myapp')\n\n# \ud14c\uc774\ube14 \uc0dd\uc131\nBase.metadata.create_all(engine)\n"})}),"\n",(0,i.jsx)(s.h2,{id:"-create---\ub370\uc774\ud130-\uc0dd\uc131",children:"\u2795 Create - \ub370\uc774\ud130 \uc0dd\uc131"}),"\n",(0,i.jsx)(s.h3,{id:"\ub2e8\uc77c-\ub808\ucf54\ub4dc-\uc0dd\uc131",children:"\ub2e8\uc77c \ub808\ucf54\ub4dc \uc0dd\uc131"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from sqlalchemy.orm import Session\n\n# Session \uc0dd\uc131\nwith Session(engine) as session:\n    # 1. User \uac1d\uccb4 \uc0dd\uc131\n    user = User(\n        username='alice',\n        email='alice@example.com',\n        age=25\n    )\n\n    # 2. Session\uc5d0 \ucd94\uac00\n    session.add(user)\n\n    # 3. \ucee4\ubc0b (\uc2e4\uc81c DB\uc5d0 \uc800\uc7a5)\n    session.commit()\n\n    # 4. ID \ud655\uc778 (\uc790\ub3d9 \uc0dd\uc131\ub428)\n    print(f\"Created user ID: {user.id}\")  # 1\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"INSERT INTO users (username, email, age)\nVALUES ('alice', 'alice@example.com', 25)\nRETURNING id;\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uc5ec\ub7ec-\ub808\ucf54\ub4dc-\ub3d9\uc2dc-\uc0dd\uc131",children:"\uc5ec\ub7ec \ub808\ucf54\ub4dc \ub3d9\uc2dc \uc0dd\uc131"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \uc5ec\ub7ec \uac1d\uccb4 \uc0dd\uc131\n    users = [\n        User(username='bob', email='bob@example.com', age=30),\n        User(username='charlie', email='charlie@example.com', age=35),\n        User(username='diana', email='diana@example.com', age=28),\n    ]\n\n    # \ud55c \ubc88\uc5d0 \ucd94\uac00\n    session.add_all(users)\n    session.commit()\n\n    print(f\"Created {len(users)} users\")\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uc0dd\uc131-\ud6c4-\uc989\uc2dc-\uc870\ud68c",children:"\uc0dd\uc131 \ud6c4 \uc989\uc2dc \uc870\ud68c"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    user = User(username='eve', email='eve@example.com')\n    session.add(user)\n    session.flush()  # DB\uc5d0 \ubc18\uc601 (\ucee4\ubc0b \uc804)\n\n    # ID \uc0ac\uc6a9 \uac00\ub2a5\n    print(f\"User ID before commit: {user.id}\")\n\n    session.commit()\n"})}),"\n",(0,i.jsx)(s.h3,{id:"bulk-insert-\ub300\ub7c9-\uc0bd\uc785",children:"Bulk Insert (\ub300\ub7c9 \uc0bd\uc785)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # bulk_insert_mappings: \ube60\ub974\uc9c0\ub9cc \uac1d\uccb4 \ubc18\ud658 \uc548 \ud568\n    session.bulk_insert_mappings(\n        User,\n        [\n            {'username': 'user1', 'email': 'user1@example.com', 'age': 20},\n            {'username': 'user2', 'email': 'user2@example.com', 'age': 21},\n            {'username': 'user3', 'email': 'user3@example.com', 'age': 22},\n        ]\n    )\n    session.commit()\n"})}),"\n",(0,i.jsx)(s.h2,{id:"-read---\ub370\uc774\ud130-\uc870\ud68c",children:"\ud83d\udd0d Read - \ub370\uc774\ud130 \uc870\ud68c"}),"\n",(0,i.jsx)(s.h3,{id:"\uc804\uccb4-\uc870\ud68c",children:"\uc804\uccb4 \uc870\ud68c"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"SQLAlchemy 2.0 \uc2a4\ud0c0\uc77c (\uad8c\uc7a5):"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # select() \uc0ac\uc6a9\n    stmt = select(User)\n    users = session.execute(stmt).scalars().all()\n\n    for user in users:\n        print(user.username, user.email)\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"\ub808\uac70\uc2dc \uc2a4\ud0c0\uc77c (1.4):"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # query() \uc0ac\uc6a9 (deprecated)\n    users = session.query(User).all()\n\n    for user in users:\n        print(user.username)\n"})}),"\n",(0,i.jsx)(s.h3,{id:"primary-key\ub85c-\uc870\ud68c",children:"Primary Key\ub85c \uc870\ud68c"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'with Session(engine) as session:\n    # get() - Primary Key\ub85c \ub2e8\uc77c \uc870\ud68c\n    user = session.get(User, 1)\n\n    if user:\n        print(f"Found: {user.username}")\n    else:\n        print("User not found")\n'})}),"\n",(0,i.jsx)(s.h3,{id:"\uc870\uac74\ubd80-\uc870\ud68c-where",children:"\uc870\uac74\ubd80 \uc870\ud68c (WHERE)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # \ub2e8\uc77c \uc870\uac74\n    stmt = select(User).where(User.username == 'alice')\n    user = session.execute(stmt).scalar_one_or_none()\n\n    # \uc5ec\ub7ec \uc870\uac74 (AND)\n    stmt = select(User).where(\n        User.age > 25,\n        User.email.like('%@example.com')\n    )\n    users = session.execute(stmt).scalars().all()\n\n    # OR \uc870\uac74\n    from sqlalchemy import or_\n\n    stmt = select(User).where(\n        or_(\n            User.username == 'alice',\n            User.username == 'bob'\n        )\n    )\n    users = session.execute(stmt).scalars().all()\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uc815\ub82c-order-by",children:"\uc815\ub82c (ORDER BY)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # \uc624\ub984\ucc28\uc21c\n    stmt = select(User).order_by(User.age)\n    users = session.execute(stmt).scalars().all()\n\n    # \ub0b4\ub9bc\ucc28\uc21c\n    stmt = select(User).order_by(User.age.desc())\n    users = session.execute(stmt).scalars().all()\n\n    # \uc5ec\ub7ec \uceec\ub7fc \uc815\ub82c\n    stmt = select(User).order_by(User.age.desc(), User.username)\n    users = session.execute(stmt).scalars().all()\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\ud398\uc774\uc9d5-limitoffset",children:"\ud398\uc774\uc9d5 (LIMIT/OFFSET)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \ud398\uc774\uc9c0 1 (\ucc98\uc74c 10\uac1c)\n    stmt = select(User).limit(10).offset(0)\n    users = session.execute(stmt).scalars().all()\n\n    # \ud398\uc774\uc9c0 2 (11-20\ubc88\uc9f8)\n    stmt = select(User).limit(10).offset(10)\n    users = session.execute(stmt).scalars().all()\n\n    # \ud568\uc218\ub85c \uad6c\ud604\n    def get_users_page(page: int, per_page: int = 10):\n        with Session(engine) as session:\n            stmt = select(User)\\\n                .order_by(User.id)\\\n                .limit(per_page)\\\n                .offset((page - 1) * per_page)\n            return session.execute(stmt).scalars().all()\n\n    # \uc0ac\uc6a9\n    page1_users = get_users_page(1)\n    page2_users = get_users_page(2)\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uac1c\uc218-\uc138\uae30-count",children:"\uac1c\uc218 \uc138\uae30 (COUNT)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from sqlalchemy import select, func\n\nwith Session(engine) as session:\n    # \uc804\uccb4 \uac1c\uc218\n    stmt = select(func.count()).select_from(User)\n    count = session.execute(stmt).scalar()\n    print(f"Total users: {count}")\n\n    # \uc870\uac74\ubd80 \uac1c\uc218\n    stmt = select(func.count()).select_from(User).where(User.age > 30)\n    count = session.execute(stmt).scalar()\n    print(f"Users over 30: {count}")\n'})}),"\n",(0,i.jsx)(s.h3,{id:"\ud2b9\uc815-\uceec\ub7fc\ub9cc-\uc870\ud68c",children:"\ud2b9\uc815 \uceec\ub7fc\ub9cc \uc870\ud68c"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # \ud2b9\uc815 \uceec\ub7fc\ub9cc\n    stmt = select(User.username, User.email)\n    results = session.execute(stmt).all()\n\n    for username, email in results:\n        print(f\"{username}: {email}\")\n\n    # \uceec\ub7fc \ud558\ub098\ub9cc\n    stmt = select(User.username).where(User.age > 25)\n    usernames = session.execute(stmt).scalars().all()\n    print(usernames)  # ['alice', 'bob', ...]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uc870\ud68c-\uacb0\uacfc-\uc635\uc158",children:"\uc870\ud68c \uacb0\uacfc \uc635\uc158"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    stmt = select(User).where(User.username == 'alice')\n\n    # scalar_one() - \uc815\ud655\ud788 1\uac1c, \uc5c6\uac70\ub098 \uc5ec\ub7ec \uac1c\uba74 \uc5d0\ub7ec\n    user = session.execute(stmt).scalar_one()\n\n    # scalar_one_or_none() - 0\uac1c \ub610\ub294 1\uac1c, \uc5ec\ub7ec \uac1c\uba74 \uc5d0\ub7ec\n    user = session.execute(stmt).scalar_one_or_none()\n\n    # first() - \uccab \ubc88\uc9f8, \uc5c6\uc73c\uba74 None\n    user = session.execute(stmt).first()\n\n    # all() - \ubaa8\ub450 \ub9ac\uc2a4\ud2b8\ub85c\n    users = session.execute(stmt).scalars().all()\n"})}),"\n",(0,i.jsx)(s.h2,{id:"\ufe0f-update---\ub370\uc774\ud130-\uc218\uc815",children:"\u270f\ufe0f Update - \ub370\uc774\ud130 \uc218\uc815"}),"\n",(0,i.jsx)(s.h3,{id:"\uac1d\uccb4-\uc218\uc815-\ud6c4-\ucee4\ubc0b",children:"\uac1d\uccb4 \uc218\uc815 \ud6c4 \ucee4\ubc0b"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # 1. \uc870\ud68c\n    user = session.get(User, 1)\n\n    # 2. \uc218\uc815\n    user.email = 'newemail@example.com'\n    user.age = 26\n\n    # 3. \ucee4\ubc0b (\uc790\ub3d9\uc73c\ub85c UPDATE \uc2e4\ud589)\n    session.commit()\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"UPDATE users\nSET email = 'newemail@example.com', age = 26\nWHERE id = 1;\n"})}),"\n",(0,i.jsx)(s.h3,{id:"bulk-update-\ub300\ub7c9-\uc218\uc815",children:"Bulk Update (\ub300\ub7c9 \uc218\uc815)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from sqlalchemy import update\n\nwith Session(engine) as session:\n    # update() \ubb38 \uc0ac\uc6a9\n    stmt = update(User).where(User.age < 20).values(age=20)\n    result = session.execute(stmt)\n\n    print(f"Updated {result.rowcount} rows")\n    session.commit()\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"UPDATE users\nSET age = 20\nWHERE age < 20;\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uc870\uac74\ubd80-\uc77c\uad04-\uc218\uc815",children:"\uc870\uac74\ubd80 \uc77c\uad04 \uc218\uc815"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import update\n\nwith Session(engine) as session:\n    # \ubaa8\ub4e0 \uc774\uba54\uc77c\uc744 \uc18c\ubb38\uc790\ub85c\n    stmt = update(User).values(email=func.lower(User.email))\n    session.execute(stmt)\n    session.commit()\n\n    # \ub098\uc774 10% \uc99d\uac00\n    stmt = update(User).where(User.age.isnot(None)).values(age=User.age + 1)\n    session.execute(stmt)\n    session.commit()\n"})}),"\n",(0,i.jsx)(s.h2,{id:"-delete---\ub370\uc774\ud130-\uc0ad\uc81c",children:"\u274c Delete - \ub370\uc774\ud130 \uc0ad\uc81c"}),"\n",(0,i.jsx)(s.h3,{id:"\uac1d\uccb4-\uc0ad\uc81c",children:"\uac1d\uccb4 \uc0ad\uc81c"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    # 1. \uc870\ud68c\n    user = session.get(User, 1)\n\n    # 2. \uc0ad\uc81c\n    session.delete(user)\n\n    # 3. \ucee4\ubc0b\n    session.commit()\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sql",children:"DELETE FROM users WHERE id = 1;\n"})}),"\n",(0,i.jsx)(s.h3,{id:"bulk-delete-\ub300\ub7c9-\uc0ad\uc81c",children:"Bulk Delete (\ub300\ub7c9 \uc0ad\uc81c)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from sqlalchemy import delete\n\nwith Session(engine) as session:\n    # delete() \ubb38 \uc0ac\uc6a9\n    stmt = delete(User).where(User.age < 18)\n    result = session.execute(stmt)\n\n    print(f"Deleted {result.rowcount} rows")\n    session.commit()\n'})}),"\n",(0,i.jsx)(s.h3,{id:"\uc870\uac74\ubd80-\uc0ad\uc81c",children:"\uc870\uac74\ubd80 \uc0ad\uc81c"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from sqlalchemy import delete\n\nwith Session(engine) as session:\n    # \uc774\uba54\uc77c\uc774 \uc5c6\ub294 \uc0ac\uc6a9\uc790 \uc0ad\uc81c\n    stmt = delete(User).where(User.email.is_(None))\n    session.execute(stmt)\n    session.commit()\n\n    # \ud2b9\uc815 \ud328\ud134 \uc0ad\uc81c\n    stmt = delete(User).where(User.username.like('test_%'))\n    session.execute(stmt)\n    session.commit()\n"})}),"\n",(0,i.jsx)(s.h2,{id:"-\uc138\uc158-\uad00\ub9ac",children:"\ud83d\udd04 \uc138\uc158 \uad00\ub9ac"}),"\n",(0,i.jsx)(s.h3,{id:"context-manager-\uc0ac\uc6a9-\uad8c\uc7a5",children:"Context Manager \uc0ac\uc6a9 (\uad8c\uc7a5)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"# \uc790\ub3d9\uc73c\ub85c \uc138\uc158 \ub2eb\ud798\nwith Session(engine) as session:\n    user = User(username='alice', email='alice@example.com')\n    session.add(user)\n    session.commit()\n# \uc5ec\uae30\uc11c \uc790\ub3d9\uc73c\ub85c session.close() \ud638\ucd9c\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uba85\uc2dc\uc801-\uc138\uc158-\uad00\ub9ac",children:"\uba85\uc2dc\uc801 \uc138\uc158 \uad00\ub9ac"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"# \uc218\ub3d9 \uad00\ub9ac\nsession = Session(engine)\ntry:\n    user = User(username='alice', email='alice@example.com')\n    session.add(user)\n    session.commit()\nexcept Exception as e:\n    session.rollback()\n    raise\nfinally:\n    session.close()\n"})}),"\n",(0,i.jsx)(s.h3,{id:"sessionlocal-\ud328\ud134-fastapi-\ub4f1",children:"SessionLocal \ud328\ud134 (FastAPI \ub4f1)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from sqlalchemy.orm import sessionmaker\n\n# Session Factory\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine\n)\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# \uc0ac\uc6a9\nfrom fastapi import Depends\n\n@app.get("/users/")\ndef read_users(db: Session = Depends(get_db)):\n    users = db.execute(select(User)).scalars().all()\n    return users\n'})}),"\n",(0,i.jsx)(s.h2,{id:"-\ud2b8\ub79c\uc7ad\uc158",children:"\ud83d\udd12 \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,i.jsx)(s.h3,{id:"\uae30\ubcf8-\ud2b8\ub79c\uc7ad\uc158",children:"\uae30\ubcf8 \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    try:\n        # \uc5ec\ub7ec \uc791\uc5c5\uc744 \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c\n        user1 = User(username='alice', email='alice@example.com')\n        user2 = User(username='bob', email='bob@example.com')\n\n        session.add(user1)\n        session.add(user2)\n\n        # \ubaa8\ub450 \uc131\uacf5\ud558\uba74 \ucee4\ubc0b\n        session.commit()\n    except Exception as e:\n        # \ud558\ub098\ub77c\ub3c4 \uc2e4\ud328\ud558\uba74 \ub864\ubc31\n        session.rollback()\n        raise\n"})}),"\n",(0,i.jsx)(s.h3,{id:"\uba85\uc2dc\uc801-\ud2b8\ub79c\uc7ad\uc158",children:"\uba85\uc2dc\uc801 \ud2b8\ub79c\uc7ad\uc158"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    with session.begin():\n        # begin() \ub0b4\uc5d0\uc11c\ub294 \uc790\ub3d9 \ucee4\ubc0b/\ub864\ubc31\n        user = User(username='alice', email='alice@example.com')\n        session.add(user)\n        # \ube14\ub85d \uc885\ub8cc \uc2dc \uc790\ub3d9 \ucee4\ubc0b\n"})}),"\n",(0,i.jsx)(s.h3,{id:"savepoint-\uc911\ucca9-\ud2b8\ub79c\uc7ad\uc158",children:"Savepoint (\uc911\ucca9 \ud2b8\ub79c\uc7ad\uc158)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    session.begin()\n\n    try:\n        user1 = User(username='alice', email='alice@example.com')\n        session.add(user1)\n\n        # Savepoint \uc0dd\uc131\n        with session.begin_nested():\n            user2 = User(username='invalid', email='invalid')\n            session.add(user2)\n            # \uc5ec\uae30\uc11c \uc5d0\ub7ec \ubc1c\uc0dd \uc2dc savepoint\ub85c \ub864\ubc31\n\n        session.commit()\n    except Exception:\n        session.rollback()\n"})}),"\n",(0,i.jsx)(s.h2,{id:"-\uc2e4\uc804-crud-\ud328\ud134",children:"\ud83d\udca1 \uc2e4\uc804 CRUD \ud328\ud134"}),"\n",(0,i.jsx)(s.h3,{id:"repository-\ud328\ud134",children:"Repository \ud328\ud134"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from typing import Optional, List\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nclass UserRepository:\n    def __init__(self, session: Session):\n        self.session = session\n\n    def create(self, username: str, email: str, age: Optional[int] = None) -> User:\n        """\uc0ac\uc6a9\uc790 \uc0dd\uc131"""\n        user = User(username=username, email=email, age=age)\n        self.session.add(user)\n        self.session.flush()\n        return user\n\n    def get_by_id(self, user_id: int) -> Optional[User]:\n        """ID\ub85c \uc870\ud68c"""\n        return self.session.get(User, user_id)\n\n    def get_by_username(self, username: str) -> Optional[User]:\n        """\uc0ac\uc6a9\uc790\uba85\uc73c\ub85c \uc870\ud68c"""\n        stmt = select(User).where(User.username == username)\n        return self.session.execute(stmt).scalar_one_or_none()\n\n    def get_all(self, skip: int = 0, limit: int = 100) -> List[User]:\n        """\uc804\uccb4 \uc870\ud68c (\ud398\uc774\uc9d5)"""\n        stmt = select(User).offset(skip).limit(limit)\n        return self.session.execute(stmt).scalars().all()\n\n    def update(self, user: User, **kwargs) -> User:\n        """\uc0ac\uc6a9\uc790 \uc218\uc815"""\n        for key, value in kwargs.items():\n            setattr(user, key, value)\n        self.session.flush()\n        return user\n\n    def delete(self, user: User) -> None:\n        """\uc0ac\uc6a9\uc790 \uc0ad\uc81c"""\n        self.session.delete(user)\n        self.session.flush()\n\n# \uc0ac\uc6a9 \uc608\nwith Session(engine) as session:\n    repo = UserRepository(session)\n\n    # \uc0dd\uc131\n    user = repo.create(username=\'alice\', email=\'alice@example.com\', age=25)\n\n    # \uc870\ud68c\n    found_user = repo.get_by_username(\'alice\')\n\n    # \uc218\uc815\n    repo.update(found_user, age=26, email=\'newemail@example.com\')\n\n    # \uc0ad\uc81c\n    repo.delete(found_user)\n\n    session.commit()\n'})}),"\n",(0,i.jsx)(s.h3,{id:"crud-\ud5ec\ud37c-\ud568\uc218",children:"CRUD \ud5ec\ud37c \ud568\uc218"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from typing import Optional, List, Type, TypeVar\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nT = TypeVar(\'T\')\n\ndef create_item(session: Session, item: T) -> T:\n    """\uc544\uc774\ud15c \uc0dd\uc131"""\n    session.add(item)\n    session.flush()\n    return item\n\ndef get_item(session: Session, model: Type[T], item_id: int) -> Optional[T]:\n    """ID\ub85c \uc870\ud68c"""\n    return session.get(model, item_id)\n\ndef get_items(\n    session: Session,\n    model: Type[T],\n    skip: int = 0,\n    limit: int = 100\n) -> List[T]:\n    """\uc804\uccb4 \uc870\ud68c"""\n    stmt = select(model).offset(skip).limit(limit)\n    return session.execute(stmt).scalars().all()\n\ndef update_item(session: Session, item: T, **kwargs) -> T:\n    """\uc544\uc774\ud15c \uc218\uc815"""\n    for key, value in kwargs.items():\n        setattr(item, key, value)\n    session.flush()\n    return item\n\ndef delete_item(session: Session, item: T) -> None:\n    """\uc544\uc774\ud15c \uc0ad\uc81c"""\n    session.delete(item)\n    session.flush()\n\n# \uc0ac\uc6a9 \uc608\nwith Session(engine) as session:\n    # \uc0dd\uc131\n    user = User(username=\'alice\', email=\'alice@example.com\')\n    user = create_item(session, user)\n\n    # \uc870\ud68c\n    user = get_item(session, User, user.id)\n\n    # \uc218\uc815\n    user = update_item(session, user, age=26)\n\n    # \uc0ad\uc81c\n    delete_item(session, user)\n\n    session.commit()\n'})}),"\n",(0,i.jsx)(s.h2,{id:"-\uc2e4\uc804-\uc608\uc81c",children:"\ud83c\udfaf \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,i.jsx)(s.h3,{id:"\uc0ac\uc6a9\uc790-\uad00\ub9ac-\uc2dc\uc2a4\ud15c",children:"\uc0ac\uc6a9\uc790 \uad00\ub9ac \uc2dc\uc2a4\ud15c"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from typing import Optional, List\nfrom sqlalchemy import select, func\nfrom sqlalchemy.orm import Session\n\nclass UserService:\n    """\uc0ac\uc6a9\uc790 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1"""\n\n    def __init__(self, session: Session):\n        self.session = session\n\n    def register_user(self, username: str, email: str, password: str) -> User:\n        """\uc2e0\uaddc \uc0ac\uc6a9\uc790 \ub4f1\ub85d"""\n        # \uc911\ubcf5 \uccb4\ud06c\n        if self.get_by_username(username):\n            raise ValueError(f"Username \'{username}\' already exists")\n\n        if self.get_by_email(email):\n            raise ValueError(f"Email \'{email}\' already exists")\n\n        # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n        user = User(\n            username=username,\n            email=email.lower(),\n            password_hash=hash_password(password)  # \uc2e4\uc81c\ub85c\ub294 bcrypt \ub4f1 \uc0ac\uc6a9\n        )\n\n        self.session.add(user)\n        self.session.flush()\n        return user\n\n    def get_by_username(self, username: str) -> Optional[User]:\n        """\uc0ac\uc6a9\uc790\uba85\uc73c\ub85c \uc870\ud68c"""\n        stmt = select(User).where(User.username == username)\n        return self.session.execute(stmt).scalar_one_or_none()\n\n    def get_by_email(self, email: str) -> Optional[User]:\n        """\uc774\uba54\uc77c\ub85c \uc870\ud68c"""\n        stmt = select(User).where(User.email == email.lower())\n        return self.session.execute(stmt).scalar_one_or_none()\n\n    def search_users(self, query: str) -> List[User]:\n        """\uc0ac\uc6a9\uc790 \uac80\uc0c9"""\n        pattern = f"%{query}%"\n        stmt = select(User).where(\n            User.username.like(pattern) | User.email.like(pattern)\n        )\n        return self.session.execute(stmt).scalars().all()\n\n    def get_active_users_count(self) -> int:\n        """\ud65c\uc131 \uc0ac\uc6a9\uc790 \uc218"""\n        stmt = select(func.count()).select_from(User).where(User.is_active == True)\n        return self.session.execute(stmt).scalar()\n\n    def deactivate_user(self, user_id: int) -> User:\n        """\uc0ac\uc6a9\uc790 \ube44\ud65c\uc131\ud654"""\n        user = self.session.get(User, user_id)\n        if not user:\n            raise ValueError(f"User {user_id} not found")\n\n        user.is_active = False\n        self.session.flush()\n        return user\n\n# \uc0ac\uc6a9\nwith Session(engine) as session:\n    service = UserService(session)\n\n    try:\n        # \ub4f1\ub85d\n        user = service.register_user(\'alice\', \'alice@example.com\', \'secret123\')\n        print(f"Registered: {user.username}")\n\n        # \uac80\uc0c9\n        results = service.search_users(\'ali\')\n        print(f"Found {len(results)} users")\n\n        # \ud1b5\uacc4\n        count = service.get_active_users_count()\n        print(f"Active users: {count}")\n\n        session.commit()\n    except Exception as e:\n        session.rollback()\n        print(f"Error: {e}")\n'})}),"\n",(0,i.jsx)(s.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,i.jsx)(s.h3,{id:"1-n1-\ucffc\ub9ac-\ubb38\uc81c-\uc8fc\uc758",children:"1. N+1 \ucffc\ub9ac \ubb38\uc81c \uc8fc\uc758"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"# \u274c \ub098\uc05c \uc608: N+1 \ucffc\ub9ac\nusers = session.execute(select(User)).scalars().all()\nfor user in users:\n    print(user.posts)  # \uac01 \uc0ac\uc6a9\uc790\ub9c8\ub2e4 \ucffc\ub9ac \uc2e4\ud589!\n\n# \u2705 \uc88b\uc740 \uc608: Eager Loading (\uc911\uae09\ud3b8\uc5d0\uc11c \uc790\uc138\ud788)\nfrom sqlalchemy.orm import selectinload\n\nstmt = select(User).options(selectinload(User.posts))\nusers = session.execute(stmt).scalars().all()\nfor user in users:\n    print(user.posts)  # \ucd94\uac00 \ucffc\ub9ac \uc5c6\uc74c\n"})}),"\n",(0,i.jsx)(s.h3,{id:"2-flush-vs-commit",children:"2. flush() vs commit()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    user = User(username='alice', email='alice@example.com')\n    session.add(user)\n\n    # flush(): DB\uc5d0 \ubc18\uc601, \ud2b8\ub79c\uc7ad\uc158\uc740 \uc720\uc9c0\n    session.flush()\n    print(user.id)  # ID \uc0ac\uc6a9 \uac00\ub2a5\n\n    # \ub2e4\ub978 \uc791\uc5c5...\n\n    # commit(): \ud2b8\ub79c\uc7ad\uc158 \uc644\ub8cc\n    session.commit()\n"})}),"\n",(0,i.jsx)(s.h3,{id:"3-\uc790\ub3d9-\uc0c8\ub85c\uace0\uce68",children:"3. \uc790\ub3d9 \uc0c8\ub85c\uace0\uce68"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"with Session(engine) as session:\n    user = session.get(User, 1)\n    user.age = 30\n    session.commit()\n\n    # \ucee4\ubc0b \ud6c4 \uc790\ub3d9\uc73c\ub85c DB\uc5d0\uc11c \uc0c8\ub85c\uace0\uce68\ub428\n    print(user.updated_at)  # \ucd5c\uc2e0 \uac12\n"})}),"\n",(0,i.jsx)(s.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"./models",children:"ORM \ubaa8\ub378 \uc815\uc758"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"./data-types",children:"\ub370\uc774\ud130 \ud0c0\uc785 \ub9e4\ud551"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../intermediate/queries",children:"\ucffc\ub9ac \uc791\uc131"})}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,i.jsx)(s.p,{children:"\uae30\ubcf8 CRUD\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc790\uc138\ud788 \uc54c\uc544\ubd05\uc2dc\ub2e4!"}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\udc49 ",(0,i.jsx)(s.a,{href:"./data-types",children:"\ub370\uc774\ud130 \ud0c0\uc785 \ub9e4\ud551"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"\ud83d\udca1 \ud301"}),": \ud56d\uc0c1 ",(0,i.jsx)(s.code,{children:"with Session()"})," \ucee8\ud14d\uc2a4\ud2b8 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc138\uc158\uc774 \uc790\ub3d9\uc73c\ub85c \ub2eb\ud788\ub3c4\ub85d \ud558\uc138\uc694!"]})]})}function m(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>t});var r=n(6540);const i={},l=r.createContext(i);function a(e){const s=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(l.Provider,{value:s},e.children)}}}]);