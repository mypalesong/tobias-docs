"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[7718],{2308:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"sqlalchemy/advanced/performance","title":"\uc131\ub2a5 \ucd5c\uc801\ud654","description":"SQLAlchemy\uc640 PostgreSQL\uc758 \uc131\ub2a5\uc744 \uadf9\ub300\ud654\ud558\ub294 \uc2e4\uc804 \ucd5c\uc801\ud654 \uae30\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/advanced/performance.md","sourceDirName":"sqlalchemy/advanced","slug":"/sqlalchemy/advanced/performance","permalink":"/docs/sqlalchemy/advanced/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/advanced/performance.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"sqlalchemySidebar","previous":{"title":"\uace0\uae09 \ucffc\ub9ac \uae30\ubc95","permalink":"/docs/sqlalchemy/advanced/advanced-queries"},"next":{"title":"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac","permalink":"/docs/sqlalchemy/advanced/transactions"}}');var r=s(4848),l=s(8453);const t={sidebar_position:3},a="\uc131\ub2a5 \ucd5c\uc801\ud654",c={},o=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcca \uc778\ub371\uc2a4 \uc804\ub7b5",id:"-\uc778\ub371\uc2a4-\uc804\ub7b5",level:2},{value:"B-Tree \uc778\ub371\uc2a4 (\uae30\ubcf8)",id:"b-tree-\uc778\ub371\uc2a4-\uae30\ubcf8",level:3},{value:"GIN \uc778\ub371\uc2a4 (Full-Text, JSONB, Array)",id:"gin-\uc778\ub371\uc2a4-full-text-jsonb-array",level:3},{value:"\ubcf5\ud569 \uc778\ub371\uc2a4 \uc21c\uc11c",id:"\ubcf5\ud569-\uc778\ub371\uc2a4-\uc21c\uc11c",level:3},{value:"\ud83d\udd0d EXPLAIN ANALYZE",id:"-explain-analyze",level:2},{value:"\ucffc\ub9ac \uc2e4\ud589 \uacc4\ud68d \ubd84\uc11d",id:"\ucffc\ub9ac-\uc2e4\ud589-\uacc4\ud68d-\ubd84\uc11d",level:3},{value:"EXPLAIN \ucd9c\ub825 \uc77d\uae30",id:"explain-\ucd9c\ub825-\uc77d\uae30",level:3},{value:"\u26a1 \ucffc\ub9ac \ucd5c\uc801\ud654 \ud328\ud134",id:"-\ucffc\ub9ac-\ucd5c\uc801\ud654-\ud328\ud134",level:2},{value:"1. \ud544\uc694\ud55c \uceec\ub7fc\ub9cc \uc870\ud68c",id:"1-\ud544\uc694\ud55c-\uceec\ub7fc\ub9cc-\uc870\ud68c",level:3},{value:"2. exists() vs count()",id:"2-exists-vs-count",level:3},{value:"3. IN vs JOIN",id:"3-in-vs-join",level:3},{value:"4. LIMIT \ud65c\uc6a9",id:"4-limit-\ud65c\uc6a9",level:3},{value:"\ud83d\ude80 Bulk \uc791\uc5c5 \ucd5c\uc801\ud654",id:"-bulk-\uc791\uc5c5-\ucd5c\uc801\ud654",level:2},{value:"Bulk Insert",id:"bulk-insert",level:3},{value:"Bulk Update",id:"bulk-update",level:3},{value:"Upsert (ON CONFLICT)",id:"upsert-on-conflict",level:3},{value:"\ud83d\udd0c \uc5f0\uacb0 \ud480 \ud29c\ub2dd",id:"-\uc5f0\uacb0-\ud480-\ud29c\ub2dd",level:2},{value:"\uc5f0\uacb0 \ud480 \uc124\uc815",id:"\uc5f0\uacb0-\ud480-\uc124\uc815",level:3},{value:"\uc5f0\uacb0 \ud480 \ubaa8\ub2c8\ud130\ub9c1",id:"\uc5f0\uacb0-\ud480-\ubaa8\ub2c8\ud130\ub9c1",level:3},{value:"\uc5f0\uacb0 \ud480 \ud06c\uae30 \uacc4\uc0b0",id:"\uc5f0\uacb0-\ud480-\ud06c\uae30-\uacc4\uc0b0",level:3},{value:"\ud83d\udcbe \uce90\uc2f1 \uc804\ub7b5",id:"-\uce90\uc2f1-\uc804\ub7b5",level:2},{value:"Application-Level \uce90\uc2f1",id:"application-level-\uce90\uc2f1",level:3},{value:"Redis \uce90\uc2f1",id:"redis-\uce90\uc2f1",level:3},{value:"Query Result \uce90\uc2f1",id:"query-result-\uce90\uc2f1",level:3},{value:"\ud83d\udcca \uc131\ub2a5 \uce21\uc815",id:"-\uc131\ub2a5-\uce21\uc815",level:2},{value:"\ucffc\ub9ac \uc2dc\uac04 \uce21\uc815",id:"\ucffc\ub9ac-\uc2dc\uac04-\uce21\uc815",level:3},{value:"\ud504\ub85c\ud30c\uc77c\ub9c1",id:"\ud504\ub85c\ud30c\uc77c\ub9c1",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 \ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8",id:"-\uc2e4\uc804-\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",level:2},{value:"\ucffc\ub9ac \ucd5c\uc801\ud654",id:"\ucffc\ub9ac-\ucd5c\uc801\ud654",level:3},{value:"\uc778\ub371\uc2a4 \uc804\ub7b5",id:"\uc778\ub371\uc2a4-\uc804\ub7b5",level:3},{value:"\uc5f0\uacb0 \uad00\ub9ac",id:"\uc5f0\uacb0-\uad00\ub9ac",level:3},{value:"\uce90\uc2f1",id:"\uce90\uc2f1",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\uc131\ub2a5-\ucd5c\uc801\ud654",children:"\uc131\ub2a5 \ucd5c\uc801\ud654"})}),"\n",(0,r.jsx)(n.p,{children:"SQLAlchemy\uc640 PostgreSQL\uc758 \uc131\ub2a5\uc744 \uadf9\ub300\ud654\ud558\ub294 \uc2e4\uc804 \ucd5c\uc801\ud654 \uae30\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 \uc778\ub371\uc2a4 \uc804\ub7b5 \ubc0f \ud65c\uc6a9"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 EXPLAIN ANALYZE\ub85c \ucffc\ub9ac \ubd84\uc11d"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ucffc\ub9ac \ucd5c\uc801\ud654 \ud328\ud134"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Bulk \uc791\uc5c5 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc5f0\uacb0 \ud480 \ud29c\ub2dd"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uce90\uc2f1 \uc804\ub7b5"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\uc778\ub371\uc2a4-\uc804\ub7b5",children:"\ud83d\udcca \uc778\ub371\uc2a4 \uc804\ub7b5"}),"\n",(0,r.jsx)(n.h3,{id:"b-tree-\uc778\ub371\uc2a4-\uae30\ubcf8",children:"B-Tree \uc778\ub371\uc2a4 (\uae30\ubcf8)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Index, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(String(100))\n    username: Mapped[str] = mapped_column(String(50))\n    created_at: Mapped[datetime]\n\n    __table_args__ = (\n        # \ub2e8\uc77c \uceec\ub7fc \uc778\ub371\uc2a4\n        Index('idx_email', 'email'),\n\n        # \ubcf5\ud569 \uc778\ub371\uc2a4 (\uc21c\uc11c \uc911\uc694!)\n        Index('idx_username_created', 'username', 'created_at'),\n\n        # \ubd80\ubd84 \uc778\ub371\uc2a4\n        Index('idx_active_users', 'email',\n              postgresql_where=text('is_active = true')),\n\n        # UNIQUE \uc778\ub371\uc2a4\n        Index('idx_email_unique', 'email', unique=True),\n    )\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc778\ub371\uc2a4 \uc120\ud0dd \uae30\uc900:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u2705 \uc778\ub371\uc2a4\uac00 \ub3c4\uc6c0\uc774 \ub418\ub294 \uacbd\uc6b0\nstmt = select(User).where(User.email == 'alice@example.com')  # =\nstmt = select(User).where(User.created_at > date(2024, 1, 1))  # >, <\nstmt = select(User).order_by(User.username)  # ORDER BY\n\n# \u274c \uc778\ub371\uc2a4\uac00 \ub3c4\uc6c0\uc774 \uc548 \ub418\ub294 \uacbd\uc6b0\nstmt = select(User).where(User.email.like('%@gmail.com'))  # LIKE %...\nstmt = select(User).where(func.lower(User.email) == 'alice')  # \ud568\uc218 \uc801\uc6a9\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gin-\uc778\ub371\uc2a4-full-text-jsonb-array",children:"GIN \uc778\ub371\uc2a4 (Full-Text, JSONB, Array)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Index, Text\nfrom sqlalchemy.dialects.postgresql import TSVECTOR, JSONB, ARRAY\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    content: Mapped[str] = mapped_column(Text)\n    search_vector: Mapped[str] = mapped_column(TSVECTOR)\n    metadata: Mapped[dict] = mapped_column(JSONB)\n    tags: Mapped[list[str]] = mapped_column(ARRAY(String(50)))\n\n    __table_args__ = (\n        # GIN \uc778\ub371\uc2a4 - Full-Text Search\n        Index('idx_search_vector', 'search_vector', postgresql_using='gin'),\n\n        # GIN \uc778\ub371\uc2a4 - JSONB\n        Index('idx_metadata', 'metadata', postgresql_using='gin'),\n\n        # GIN \uc778\ub371\uc2a4 - Array\n        Index('idx_tags', 'tags', postgresql_using='gin'),\n    )\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Full-Text Search (GIN \uc778\ub371\uc2a4 \ud65c\uc6a9)\nstmt = select(Article).where(Article.search_vector.match('python'))\n\n# JSONB \ucffc\ub9ac (GIN \uc778\ub371\uc2a4 \ud65c\uc6a9)\nstmt = select(Article).where(Article.metadata['category'].astext == 'tech')\n\n# Array \ucffc\ub9ac (GIN \uc778\ub371\uc2a4 \ud65c\uc6a9)\nstmt = select(Article).where(Article.tags.contains(['python']))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ubcf5\ud569-\uc778\ub371\uc2a4-\uc21c\uc11c",children:"\ubcf5\ud569 \uc778\ub371\uc2a4 \uc21c\uc11c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Order(Base):\n    __tablename__ = 'orders'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    customer_id: Mapped[int]\n    status: Mapped[str]\n    created_at: Mapped[datetime]\n\n    __table_args__ = (\n        # \u2705 \uc88b\uc740 \uc608: \uce74\ub514\ub110\ub9ac\ud2f0 \ub192\uc740 \uac83 \uba3c\uc800\n        Index('idx_customer_status_created', 'customer_id', 'status', 'created_at'),\n    )\n\n# \ud65c\uc6a9\ub418\ub294 \ucffc\ub9ac\nstmt = select(Order).where(\n    Order.customer_id == 123,  # \uc778\ub371\uc2a4 \ud65c\uc6a9\n    Order.status == 'pending',  # \uc778\ub371\uc2a4 \ud65c\uc6a9\n    Order.created_at > date(2024, 1, 1)  # \uc778\ub371\uc2a4 \ud65c\uc6a9\n)\n\n# \u26a0\ufe0f \uc55e \uceec\ub7fc \uc5c6\uc774 \ub4a4 \uceec\ub7fc\ub9cc \uc0ac\uc6a9\ud558\uba74 \uc778\ub371\uc2a4 \ud65c\uc6a9 \uc548 \ub428\nstmt = select(Order).where(Order.created_at > date(2024, 1, 1))  # \uc778\ub371\uc2a4 X\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-explain-analyze",children:"\ud83d\udd0d EXPLAIN ANALYZE"}),"\n",(0,r.jsx)(n.h3,{id:"\ucffc\ub9ac-\uc2e4\ud589-\uacc4\ud68d-\ubd84\uc11d",children:"\ucffc\ub9ac \uc2e4\ud589 \uacc4\ud68d \ubd84\uc11d"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine, select, text\n\n# Echo \ud65c\uc131\ud654\nengine = create_engine(\n    \'postgresql://...\',\n    echo=True  # \ubaa8\ub4e0 SQL \ucd9c\ub825\n)\n\nwith Session(engine) as session:\n    stmt = select(User).join(Post).where(Post.created_at > \'2024-01-01\')\n\n    # SQL \ubb38\uc790\uc5f4 \ucd94\ucd9c\n    compiled = stmt.compile(\n        dialect=session.bind.dialect,\n        compile_kwargs={"literal_binds": True}\n    )\n\n    # EXPLAIN ANALYZE \uc2e4\ud589\n    explain_query = f"EXPLAIN (ANALYZE, BUFFERS, VERBOSE) {compiled}"\n    result = session.execute(text(explain_query))\n\n    print("\\n=== EXPLAIN ANALYZE ===")\n    for row in result:\n        print(row[0])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"explain-\ucd9c\ub825-\uc77d\uae30",children:"EXPLAIN \ucd9c\ub825 \uc77d\uae30"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"Seq Scan on users  (cost=0.00..458.00 rows=10000 width=64) (actual time=0.010..5.234 rows=10000 loops=1)\n  Filter: (is_active = true)\n  Rows Removed by Filter: 5000\nPlanning Time: 0.123 ms\nExecution Time: 6.789 ms\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\ud574\uc11d:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Seq Scan"}),": \uc804\uccb4 \ud14c\uc774\ube14 \uc2a4\uce94 (\ub290\ub9bc) \u2192 \uc778\ub371\uc2a4 \ud544\uc694"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cost=0.00..458.00"}),": \uc608\uc0c1 \ube44\uc6a9"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rows=10000"}),": \uc608\uc0c1 \ud589 \uc218"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"actual time=0.010..5.234"}),": \uc2e4\uc81c \uc2dc\uac04"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rows=10000"}),": \uc2e4\uc81c \ud589 \uc218"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uac1c\uc120 \ud6c4:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"Index Scan using idx_is_active on users  (cost=0.29..350.00 rows=10000 width=64) (actual time=0.015..2.123 rows=10000 loops=1)\n  Index Cond: (is_active = true)\nPlanning Time: 0.098 ms\nExecution Time: 3.456 ms\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ucffc\ub9ac-\ucd5c\uc801\ud654-\ud328\ud134",children:"\u26a1 \ucffc\ub9ac \ucd5c\uc801\ud654 \ud328\ud134"}),"\n",(0,r.jsx)(n.h3,{id:"1-\ud544\uc694\ud55c-\uceec\ub7fc\ub9cc-\uc870\ud68c",children:"1. \ud544\uc694\ud55c \uceec\ub7fc\ub9cc \uc870\ud68c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u274c \ub098\uc05c \uc608: \ubaa8\ub4e0 \uceec\ub7fc\nstmt = select(User)\nusers = session.execute(stmt).scalars().all()\n\n# \u2705 \uc88b\uc740 \uc608: \ud544\uc694\ud55c \uceec\ub7fc\ub9cc\nstmt = select(User.id, User.username, User.email)\nusers = session.execute(stmt).all()\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc131\ub2a5 \ucc28\uc774:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \uc804\uccb4 \uceec\ub7fc (1MB)\nSELECT * FROM users  -- 100ms\n\n# \uc77c\ubd80 \uceec\ub7fc (100KB)\nSELECT id, username, email FROM users  -- 10ms\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-exists-vs-count",children:"2. exists() vs count()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u274c \ub290\ub9bc: \uc804\uccb4 \uac1c\uc218 \uc138\uae30\nstmt = select(func.count(User.id)).where(User.email == email)\nexists = session.execute(stmt).scalar() > 0\n\n# \u2705 \ube60\ub984: \uc874\uc7ac \uc5ec\ubd80\ub9cc \ud655\uc778\nfrom sqlalchemy import exists\n\nstmt = select(exists().where(User.email == email))\nexists = session.execute(stmt).scalar()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-in-vs-join",children:"3. IN vs JOIN"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \uc791\uc740 \ub9ac\uc2a4\ud2b8 (<100): IN\nuser_ids = [1, 2, 3, 4, 5]\nstmt = select(Post).where(Post.user_id.in_(user_ids))\n\n# \ud070 \ub9ac\uc2a4\ud2b8 (>100): JOIN\nstmt = select(Post).join(\n    select(literal_column(str(id)).label('id') for id in user_ids).alias('ids'),\n    Post.user_id == column('ids.id')\n)\n\n# \u2705 \uac00\uc7a5 \uc88b\uc74c: \uc784\uc2dc \ud14c\uc774\ube14\nif len(user_ids) > 1000:\n    # \uc784\uc2dc \ud14c\uc774\ube14 \uc0dd\uc131\n    temp_table = Table('temp_ids', metadata, Column('id', Integer), prefixes=['TEMPORARY'])\n    temp_table.create(engine)\n\n    session.execute(temp_table.insert(), [{'id': id} for id in user_ids])\n    stmt = select(Post).join(temp_table, Post.user_id == temp_table.c.id)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-limit-\ud65c\uc6a9",children:"4. LIMIT \ud65c\uc6a9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u274c \ub098\uc05c \uc608: \uc804\uccb4 \uc870\ud68c \ud6c4 Python\uc5d0\uc11c \uc2ac\ub77c\uc774\uc2f1\nusers = session.execute(select(User)).scalars().all()\nfirst_10 = users[:10]  # \uba54\ubaa8\ub9ac \ub0ad\ube44\n\n# \u2705 \uc88b\uc740 \uc608: DB\uc5d0\uc11c LIMIT\nstmt = select(User).limit(10)\nfirst_10 = session.execute(stmt).scalars().all()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-bulk-\uc791\uc5c5-\ucd5c\uc801\ud654",children:"\ud83d\ude80 Bulk \uc791\uc5c5 \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(n.h3,{id:"bulk-insert",children:"Bulk Insert"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.dialects.postgresql import insert\n\n# \u274c \ub290\ub9bc: \uac1c\ubcc4 INSERT (1000\ubc88 \ucffc\ub9ac)\nfor i in range(1000):\n    user = User(username=f'user{i}', email=f'user{i}@example.com')\n    session.add(user)\nsession.commit()\n\n# \u2705 \uc911\uac04: add_all (1\ubc88 \ucffc\ub9ac, \ud558\uc9c0\ub9cc \uac1d\uccb4 \uc0dd\uc131)\nusers = [User(username=f'user{i}', email=f'user{i}@example.com') for i in range(1000)]\nsession.add_all(users)\nsession.commit()\n\n# \u2705 \ube60\ub984: bulk_insert_mappings (1\ubc88 \ucffc\ub9ac, \uac1d\uccb4 \uc0dd\uc131 \uc548 \ud568)\nsession.bulk_insert_mappings(\n    User,\n    [{'username': f'user{i}', 'email': f'user{i}@example.com'} for i in range(1000)]\n)\nsession.commit()\n\n# \u2705 \uac00\uc7a5 \ube60\ub984: PostgreSQL COPY (\ubc8c\ud06c \ub85c\ub4dc)\nimport io\nimport csv\n\ndata = io.StringIO()\nwriter = csv.writer(data)\nfor i in range(1000):\n    writer.writerow([f'user{i}', f'user{i}@example.com'])\n\ndata.seek(0)\nconnection = session.connection()\ncursor = connection.connection.cursor()\ncursor.copy_from(data, 'users', columns=['username', 'email'], sep=',')\nsession.commit()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bulk-update",children:"Bulk Update"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \u274c \ub290\ub9bc: \uac1c\ubcc4 UPDATE\nusers = session.execute(select(User)).scalars().all()\nfor user in users:\n    user.is_active = True\nsession.commit()\n\n# \u2705 \ube60\ub984: bulk_update_mappings\nsession.bulk_update_mappings(\n    User,\n    [{'id': user.id, 'is_active': True} for user in users]\n)\nsession.commit()\n\n# \u2705 \uac00\uc7a5 \ube60\ub984: UPDATE \ubb38\nfrom sqlalchemy import update\n\nstmt = update(User).values(is_active=True)\nsession.execute(stmt)\nsession.commit()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"upsert-on-conflict",children:"Upsert (ON CONFLICT)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.dialects.postgresql import insert\n\n# INSERT ... ON CONFLICT UPDATE\nstmt = insert(User).values(\n    username='alice',\n    email='alice@example.com'\n).on_conflict_do_update(\n    index_elements=['username'],  # UNIQUE \uc81c\uc57d \uceec\ub7fc\n    set_={'email': 'alice@example.com', 'updated_at': func.now()}\n)\n\nsession.execute(stmt)\nsession.commit()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc5f0\uacb0-\ud480-\ud29c\ub2dd",children:"\ud83d\udd0c \uc5f0\uacb0 \ud480 \ud29c\ub2dd"}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\ud480-\uc124\uc815",children:"\uc5f0\uacb0 \ud480 \uc124\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine\nfrom sqlalchemy.pool import QueuePool\n\nengine = create_engine(\n    \'postgresql://...\',\n\n    # \uc5f0\uacb0 \ud480 \uc124\uc815\n    poolclass=QueuePool,\n    pool_size=20,              # \uae30\ubcf8 \uc5f0\uacb0 \uc218\n    max_overflow=10,           # \ucd94\uac00 \uac00\ub2a5\ud55c \uc5f0\uacb0 \uc218\n    pool_timeout=30,           # \uc5f0\uacb0 \ub300\uae30 \uc2dc\uac04 (\ucd08)\n    pool_recycle=3600,         # \uc5f0\uacb0 \uc7ac\uc0ac\uc6a9 \uc8fc\uae30 (1\uc2dc\uac04)\n    pool_pre_ping=True,        # \uc5f0\uacb0 \uc720\ud6a8\uc131 \uc0ac\uc804 \uccb4\ud06c\n\n    # \ucffc\ub9ac \ucd5c\uc801\ud654\n    echo_pool=False,           # \uc5f0\uacb0 \ud480 \ub85c\uadf8\n    execution_options={\n        "isolation_level": "READ COMMITTED"\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\ud480-\ubaa8\ub2c8\ud130\ub9c1",children:"\uc5f0\uacb0 \ud480 \ubaa8\ub2c8\ud130\ub9c1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def monitor_pool(engine):\n    """\uc5f0\uacb0 \ud480 \uc0c1\ud0dc \ud655\uc778"""\n    pool = engine.pool\n\n    print(f"Pool size: {pool.size()}")\n    print(f"Checked out: {pool.checkedout()}")\n    print(f"Overflow: {pool.overflow()}")\n    print(f"Checked in: {pool.checkedin()}")\n\n    # \uc5f0\uacb0 \uc0ac\uc6a9\ub960\n    total = pool.size() + pool.overflow()\n    used = pool.checkedout()\n    usage = (used / total * 100) if total > 0 else 0\n\n    print(f"Usage: {usage:.1f}%")\n\n    if usage > 80:\n        print("\u26a0\ufe0f  \uc5f0\uacb0 \ud480 \uc0ac\uc6a9\ub960\uc774 \ub192\uc2b5\ub2c8\ub2e4!")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\ud480-\ud06c\uae30-\uacc4\uc0b0",children:"\uc5f0\uacb0 \ud480 \ud06c\uae30 \uacc4\uc0b0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\ucd5c\uc801 pool_size = (\ucf54\uc5b4 \uc218 * 2) + \ud6a8\uacfc\uc801\uc778 \ub514\uc2a4\ud06c \uc218\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\uc608\uc2dc:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["4\ucf54\uc5b4 CPU + 1 SSD = ",(0,r.jsx)(n.code,{children:"pool_size=9"})]}),"\n",(0,r.jsxs)(n.li,{children:["8\ucf54\uc5b4 CPU + 2 SSD = ",(0,r.jsx)(n.code,{children:"pool_size=18"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import os\n\ncpu_count = os.cpu_count()\nrecommended_pool_size = (cpu_count * 2) + 1\n\nengine = create_engine(\n    'postgresql://...',\n    pool_size=recommended_pool_size,\n    max_overflow=recommended_pool_size // 2\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uce90\uc2f1-\uc804\ub7b5",children:"\ud83d\udcbe \uce90\uc2f1 \uc804\ub7b5"}),"\n",(0,r.jsx)(n.h3,{id:"application-level-\uce90\uc2f1",children:"Application-Level \uce90\uc2f1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from functools import lru_cache\nfrom typing import Optional\n\n# Python LRU \uce90\uc2dc\n@lru_cache(maxsize=1000)\ndef get_user_by_id(user_id: int) -> Optional[dict]:\n    with Session(engine) as session:\n        user = session.get(User, user_id)\n        if user:\n            return {\n                'id': user.id,\n                'username': user.username,\n                'email': user.email\n            }\n        return None\n\n# \uc0ac\uc6a9\nuser = get_user_by_id(1)  # DB \uc870\ud68c\nuser = get_user_by_id(1)  # \uce90\uc2dc\uc5d0\uc11c \ubc18\ud658\n"})}),"\n",(0,r.jsx)(n.h3,{id:"redis-\uce90\uc2f1",children:"Redis \uce90\uc2f1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import redis\nimport json\nfrom typing import Optional\n\nredis_client = redis.Redis(host=\'localhost\', port=6379, db=0)\n\ndef get_user_cached(user_id: int) -> Optional[User]:\n    """Redis \uce90\uc2dc \ud65c\uc6a9"""\n    cache_key = f"user:{user_id}"\n\n    # \uce90\uc2dc \ud655\uc778\n    cached = redis_client.get(cache_key)\n    if cached:\n        data = json.loads(cached)\n        return User(**data)\n\n    # DB \uc870\ud68c\n    with Session(engine) as session:\n        user = session.get(User, user_id)\n        if user:\n            # \uce90\uc2dc \uc800\uc7a5 (1\uc2dc\uac04)\n            redis_client.setex(\n                cache_key,\n                3600,\n                json.dumps({\n                    \'id\': user.id,\n                    \'username\': user.username,\n                    \'email\': user.email\n                })\n            )\n        return user\n\n# \uce90\uc2dc \ubb34\ud6a8\ud654\ndef invalidate_user_cache(user_id: int):\n    redis_client.delete(f"user:{user_id}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"query-result-\uce90\uc2f1",children:"Query Result \uce90\uc2f1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from dogpile.cache import make_region\n\n# Dogpile \uce90\uc2dc \uc124\uc815\nregion = make_region().configure(\n    'dogpile.cache.redis',\n    arguments={\n        'host': 'localhost',\n        'port': 6379,\n        'db': 0,\n        'distributed_lock': True\n    },\n    expiration_time=3600\n)\n\n@region.cache_on_arguments()\ndef get_popular_posts(limit: int = 10):\n    \"\"\"\uc778\uae30 \ud3ec\uc2a4\ud2b8 \uc870\ud68c (\uce90\uc2f1)\"\"\"\n    with Session(engine) as session:\n        stmt = select(Post)\\\n            .where(Post.views > 1000)\\\n            .order_by(Post.views.desc())\\\n            .limit(limit)\n\n        return session.execute(stmt).scalars().all()\n\n# \uccab \ud638\ucd9c: DB \uc870\ud68c\nposts = get_popular_posts(10)\n\n# \ub450 \ubc88\uc9f8 \ud638\ucd9c: \uce90\uc2dc \ubc18\ud658\nposts = get_popular_posts(10)  # \ube60\ub984!\n\n# \uce90\uc2dc \ubb34\ud6a8\ud654\nget_popular_posts.invalidate(10)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc131\ub2a5-\uce21\uc815",children:"\ud83d\udcca \uc131\ub2a5 \uce21\uc815"}),"\n",(0,r.jsx)(n.h3,{id:"\ucffc\ub9ac-\uc2dc\uac04-\uce21\uc815",children:"\ucffc\ub9ac \uc2dc\uac04 \uce21\uc815"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import time\nfrom sqlalchemy import event\n\n# \ucffc\ub9ac \uc2dc\uac04 \ub85c\uae45\n@event.listens_for(engine, "before_cursor_execute")\ndef before_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    conn.info.setdefault(\'query_start_time\', []).append(time.time())\n\n@event.listens_for(engine, "after_cursor_execute")\ndef after_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    total_time = time.time() - conn.info[\'query_start_time\'].pop()\n\n    if total_time > 0.1:  # 100ms \uc774\uc0c1 \uac78\ub9b0 \ucffc\ub9ac\n        print(f"\u26a0\ufe0f  Slow Query ({total_time:.3f}s): {statement[:100]}...")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\ud504\ub85c\ud30c\uc77c\ub9c1",children:"\ud504\ub85c\ud30c\uc77c\ub9c1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import event\nimport cProfile\nimport pstats\n\ndef profile_query(func):\n    """\ucffc\ub9ac \ud504\ub85c\ud30c\uc77c\ub9c1 \ub370\ucf54\ub808\uc774\ud130"""\n    def wrapper(*args, **kwargs):\n        profiler = cProfile.Profile()\n        profiler.enable()\n\n        result = func(*args, **kwargs)\n\n        profiler.disable()\n        stats = pstats.Stats(profiler)\n        stats.sort_stats(\'cumulative\')\n        stats.print_stats(10)  # \uc0c1\uc704 10\uac1c\n\n        return result\n\n    return wrapper\n\n@profile_query\ndef expensive_query():\n    with Session(engine) as session:\n        stmt = select(User).join(Post).join(Comment)\n        return session.execute(stmt).scalars().all()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc2e4\uc804-\ucd5c\uc801\ud654-\uccb4\ud06c\ub9ac\uc2a4\ud2b8",children:"\ud83d\udca1 \uc2e4\uc804 \ucd5c\uc801\ud654 \uccb4\ud06c\ub9ac\uc2a4\ud2b8"}),"\n",(0,r.jsx)(n.h3,{id:"\ucffc\ub9ac-\ucd5c\uc801\ud654",children:"\ucffc\ub9ac \ucd5c\uc801\ud654"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 \ud544\uc694\ud55c \uceec\ub7fc\ub9cc \uc870\ud68c (",(0,r.jsx)(n.code,{children:"select(User.id, User.name)"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 LIMIT \uc0ac\uc6a9 (",(0,r.jsx)(n.code,{children:"limit(100)"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Eager Loading (",(0,r.jsx)(n.code,{children:"selectinload()"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc778\ub371\uc2a4 \ud65c\uc6a9 (WHERE, ORDER BY \uceec\ub7fc)"}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Bulk \uc791\uc5c5 (",(0,r.jsx)(n.code,{children:"bulk_insert_mappings()"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\uc778\ub371\uc2a4-\uc804\ub7b5",children:"\uc778\ub371\uc2a4 \uc804\ub7b5"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 WHERE \uc808 \uceec\ub7fc\uc5d0 \uc778\ub371\uc2a4"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 ORDER BY \uceec\ub7fc\uc5d0 \uc778\ub371\uc2a4"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 JOIN \uceec\ub7fc\uc5d0 \uc778\ub371\uc2a4"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \ubcf5\ud569 \uc778\ub371\uc2a4 \uc21c\uc11c \ucd5c\uc801\ud654"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 JSONB/Array\uc5d0 GIN \uc778\ub371\uc2a4"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\uc5f0\uacb0-\uad00\ub9ac",children:"\uc5f0\uacb0 \uad00\ub9ac"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 \uc801\uc808\ud55c \uc5f0\uacb0 \ud480 \ud06c\uae30"}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.code,{children:"pool_pre_ping=True"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.code,{children:"pool_recycle"})," \uc124\uc815"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uc138\uc158 \uc7ac\uc0ac\uc6a9 \uae08\uc9c0"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"\uce90\uc2f1",children:"\uce90\uc2f1"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 \uc790\uc8fc \uc870\ud68c\ub418\ub294 \ub370\uc774\ud130 \uce90\uc2f1"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uce90\uc2dc \ubb34\ud6a8\ud654 \uc804\ub7b5"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 \uce90\uc2dc \ub9cc\ub8cc \uc2dc\uac04 \uc124\uc815"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./advanced-queries",children:"\uace0\uae09 \ucffc\ub9ac \uae30\ubc95"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"./transactions",children:"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../intermediate/joins",children:"Join\uacfc \ub85c\ub529 \uc804\ub7b5"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsx)(n.p,{children:"\uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,r.jsx)(n.a,{href:"./transactions",children:"\ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),': "Premature optimization is the root of all evil" - \uba3c\uc800 \uce21\uc815\ud558\uace0, \ubcd1\ubaa9\uc744 \ucc3e\uace0, \uadf8 \ub2e4\uc74c\uc5d0 \ucd5c\uc801\ud654\ud558\uc138\uc694!']})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);