"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[52],{8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>t});var r=a(6540);const l={},s=r.createContext(l);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},8521:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>o,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"sqlalchemy/basic/data-types","title":"PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785 \ub9e4\ud551","description":"SQLAlchemy\uc5d0\uc11c PostgreSQL\uc758 \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/basic/data-types.md","sourceDirName":"sqlalchemy/basic","slug":"/sqlalchemy/basic/data-types","permalink":"/docs/sqlalchemy/basic/data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/basic/data-types.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"sqlalchemySidebar","previous":{"title":"\uae30\ubcf8 CRUD \uc791\uc5c5","permalink":"/docs/sqlalchemy/basic/crud"},"next":{"title":"\uc911\uae09\ud3b8 \uc18c\uac1c","permalink":"/docs/sqlalchemy/intermediate/intro"}}');var l=a(4848),s=a(8453);const i={sidebar_position:4},t="PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785 \ub9e4\ud551",d={},c=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udcdd \ubb38\uc790\uc5f4 \ud0c0\uc785",id:"-\ubb38\uc790\uc5f4-\ud0c0\uc785",level:2},{value:"String vs Text",id:"string-vs-text",level:3},{value:"\ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\ub294 \ubb38\uc790\uc5f4",id:"\ub300\uc18c\ubb38\uc790-\uad6c\ubd84-\uc5c6\ub294-\ubb38\uc790\uc5f4",level:3},{value:"\ud83d\udd22 \uc22b\uc790 \ud0c0\uc785",id:"-\uc22b\uc790-\ud0c0\uc785",level:2},{value:"\uc815\uc218",id:"\uc815\uc218",level:3},{value:"\ubd80\ub3d9\uc18c\uc218\uc810",id:"\ubd80\ub3d9\uc18c\uc218\uc810",level:3},{value:"\ud83d\udcc5 \ub0a0\uc9dc\uc640 \uc2dc\uac04",id:"-\ub0a0\uc9dc\uc640-\uc2dc\uac04",level:2},{value:"Date, Time, DateTime",id:"date-time-datetime",level:3},{value:"\uc790\ub3d9 \ud0c0\uc784\uc2a4\ud0ec\ud504",id:"\uc790\ub3d9-\ud0c0\uc784\uc2a4\ud0ec\ud504",level:3},{value:"\u2705 Boolean",id:"-boolean",level:2},{value:"\ud83c\udd94 UUID (\uace0\uc720 \uc2dd\ubcc4\uc790)",id:"-uuid-\uace0\uc720-\uc2dd\ubcc4\uc790",level:2},{value:"UUID \uc0ac\uc6a9",id:"uuid-\uc0ac\uc6a9",level:3},{value:"\ud83d\udce6 JSONB (JSON \ub370\uc774\ud130)",id:"-jsonb-json-\ub370\uc774\ud130",level:2},{value:"JSON vs JSONB",id:"json-vs-jsonb",level:3},{value:"JSONB \ucffc\ub9ac",id:"jsonb-\ucffc\ub9ac",level:3},{value:"\ud83d\udccb ARRAY (\ubc30\uc5f4)",id:"-array-\ubc30\uc5f4",level:2},{value:"\ubc30\uc5f4 \uc815\uc758",id:"\ubc30\uc5f4-\uc815\uc758",level:3},{value:"ARRAY \ucffc\ub9ac",id:"array-\ucffc\ub9ac",level:3},{value:"\ud83c\udf10 \ub124\ud2b8\uc6cc\ud06c \ud0c0\uc785",id:"-\ub124\ud2b8\uc6cc\ud06c-\ud0c0\uc785",level:2},{value:"INET, MACADDR",id:"inet-macaddr",level:3},{value:"\ud83c\udfa8 ENUM (\uc5f4\uac70\ud615)",id:"-enum-\uc5f4\uac70\ud615",level:2},{value:"PostgreSQL ENUM",id:"postgresql-enum",level:3},{value:"Python Enum \uc0ac\uc6a9",id:"python-enum-\uc0ac\uc6a9",level:3},{value:"\ud83d\udd27 \ucee4\uc2a4\ud140 \ud0c0\uc785",id:"-\ucee4\uc2a4\ud140-\ud0c0\uc785",level:2},{value:"TypeDecorator",id:"typedecorator",level:3},{value:"\uc774\uba54\uc77c \ud0c0\uc785",id:"\uc774\uba54\uc77c-\ud0c0\uc785",level:3},{value:"\ud83d\udcca \uc2e4\uc804 \uc608\uc81c",id:"-\uc2e4\uc804-\uc608\uc81c",level:2},{value:"\uc804\uc790\uc0c1\uac70\ub798 Product \ubaa8\ub378",id:"\uc804\uc790\uc0c1\uac70\ub798-product-\ubaa8\ub378",level:3},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. JSONB vs ARRAY",id:"1-jsonb-vs-array",level:3},{value:"2. Numeric vs Float",id:"2-numeric-vs-float",level:3},{value:"3. DateTime Timezone",id:"3-datetime-timezone",level:3},{value:"4. UUID vs BigInteger",id:"4-uuid-vs-biginteger",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"postgresql-\ub370\uc774\ud130-\ud0c0\uc785-\ub9e4\ud551",children:"PostgreSQL \ub370\uc774\ud130 \ud0c0\uc785 \ub9e4\ud551"})}),"\n",(0,l.jsx)(n.p,{children:"SQLAlchemy\uc5d0\uc11c PostgreSQL\uc758 \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ud65c\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,l.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"\u2705 \uae30\ubcf8 \ub370\uc774\ud130 \ud0c0\uc785 \uc774\ud574"}),"\n",(0,l.jsx)(n.li,{children:"\u2705 PostgreSQL \ud2b9\ud654 \ud0c0\uc785 \ud65c\uc6a9"}),"\n",(0,l.jsx)(n.li,{children:"\u2705 JSONB, ARRAY, UUID \ub4f1 \uace0\uae09 \ud0c0\uc785"}),"\n",(0,l.jsx)(n.li,{children:"\u2705 \ucee4\uc2a4\ud140 \ud0c0\uc785 \uc815\uc758"}),"\n",(0,l.jsx)(n.li,{children:"\u2705 \ud0c0\uc785 \ubcc0\ud658 \ubc0f \uac80\uc99d"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"-\ubb38\uc790\uc5f4-\ud0c0\uc785",children:"\ud83d\udcdd \ubb38\uc790\uc5f4 \ud0c0\uc785"}),"\n",(0,l.jsx)(n.h3,{id:"string-vs-text",children:"String vs Text"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import String, Text\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # String: \uae38\uc774 \uc81c\ud55c (VARCHAR)\n    title: Mapped[str] = mapped_column(String(200))\n    slug: Mapped[str] = mapped_column(String(200))\n\n    # Text: \uae38\uc774 \uc81c\ud55c \uc5c6\uc74c (TEXT)\n    content: Mapped[str] = mapped_column(Text)\n    summary: Mapped[str | None] = mapped_column(Text)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE articles (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(200) NOT NULL,\n    slug VARCHAR(200) NOT NULL,\n    content TEXT NOT NULL,\n    summary TEXT\n);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\ub300\uc18c\ubb38\uc790-\uad6c\ubd84-\uc5c6\ub294-\ubb38\uc790\uc5f4",children:"\ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\ub294 \ubb38\uc790\uc5f4"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.dialects.postgresql import CITEXT\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # CITEXT: \ub300\uc18c\ubb38\uc790 \uad6c\ubd84 \uc5c6\uc74c (PostgreSQL \ud655\uc7a5)\n    email: Mapped[str] = mapped_column(CITEXT, unique=True)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# alice@example.com\uacfc ALICE@EXAMPLE.COM\uc744 \uac19\uc740 \uac83\uc73c\ub85c \uc778\uc2dd\nuser = User(email='Alice@Example.com')\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-\uc22b\uc790-\ud0c0\uc785",children:"\ud83d\udd22 \uc22b\uc790 \ud0c0\uc785"}),"\n",(0,l.jsx)(n.h3,{id:"\uc815\uc218",children:"\uc815\uc218"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Integer, BigInteger, SmallInteger\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    # BigInteger: -9223372036854775808 ~ 9223372036854775807\n    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)\n\n    # Integer: -2147483648 ~ 2147483647\n    stock: Mapped[int] = mapped_column(Integer, default=0)\n\n    # SmallInteger: -32768 ~ 32767\n    rating: Mapped[int] = mapped_column(SmallInteger)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"PostgreSQL \ud0c0\uc785:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"id BIGINT,\nstock INTEGER,\nrating SMALLINT\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\ubd80\ub3d9\uc18c\uc218\uc810",children:"\ubd80\ub3d9\uc18c\uc218\uc810"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Float, Numeric, DECIMAL\nfrom decimal import Decimal\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # Float: \ubd80\uc815\ud655 (\ube60\ub984)\n    weight: Mapped[float] = mapped_column(Float)\n\n    # Numeric/DECIMAL: \uc815\ud655 (\uae08\uc561 \ub4f1)\n    price: Mapped[Decimal] = mapped_column(Numeric(10, 2))  # 12345678.99\n    discount: Mapped[Decimal] = mapped_column(DECIMAL(5, 2))  # 999.99\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from decimal import Decimal\n\nproduct = Product(\n    name='Laptop',\n    price=Decimal('1299.99'),  # \uc815\ud655\ud55c \uae08\uc561\n    weight=2.5  # \uadfc\uc0ac\uac12 OK\n)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-\ub0a0\uc9dc\uc640-\uc2dc\uac04",children:"\ud83d\udcc5 \ub0a0\uc9dc\uc640 \uc2dc\uac04"}),"\n",(0,l.jsx)(n.h3,{id:"date-time-datetime",children:"Date, Time, DateTime"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from datetime import date, time, datetime\nfrom sqlalchemy import Date, Time, DateTime\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Event(Base):\n    __tablename__ = 'events'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # Date: \ub0a0\uc9dc\ub9cc (2024-01-15)\n    event_date: Mapped[date] = mapped_column(Date)\n\n    # Time: \uc2dc\uac04\ub9cc (14:30:00)\n    start_time: Mapped[time] = mapped_column(Time)\n\n    # DateTime: \ub0a0\uc9dc + \uc2dc\uac04\n    created_at: Mapped[datetime] = mapped_column(DateTime)\n\n    # DateTime with timezone (\uad8c\uc7a5)\n    updated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True))\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from datetime import date, time, datetime\n\nevent = Event(\n    event_date=date(2024, 1, 15),\n    start_time=time(14, 30, 0),\n    created_at=datetime.now(),\n    updated_at=datetime.now()\n)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"\uc790\ub3d9-\ud0c0\uc784\uc2a4\ud0ec\ud504",children:"\uc790\ub3d9 \ud0c0\uc784\uc2a4\ud0ec\ud504"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import DateTime, func\nfrom datetime import datetime\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n\n    # \uc0dd\uc131 \uc2dc\uac04 (DB \uae30\ubcf8\uac12)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n\n    # \uc218\uc815 \uc2dc\uac04 (\uc790\ub3d9 \uac31\uc2e0)\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now(),\n        onupdate=func.now()\n    )\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),\nupdated_at TIMESTAMP WITH TIME ZONE DEFAULT now()\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-boolean",children:"\u2705 Boolean"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Boolean\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # Boolean\n    is_active: Mapped[bool] = mapped_column(Boolean, default=True)\n    is_admin: Mapped[bool] = mapped_column(Boolean, default=False)\n    email_verified: Mapped[bool] = mapped_column(Boolean, default=False)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"PostgreSQL \ud0c0\uc785:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"is_active BOOLEAN DEFAULT true\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-uuid-\uace0\uc720-\uc2dd\ubcc4\uc790",children:"\ud83c\udd94 UUID (\uace0\uc720 \uc2dd\ubcc4\uc790)"}),"\n",(0,l.jsx)(n.h3,{id:"uuid-\uc0ac\uc6a9",children:"UUID \uc0ac\uc6a9"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import uuid\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    # UUID Primary Key\n    id: Mapped[uuid.UUID] = mapped_column(\n        UUID(as_uuid=True),\n        primary_key=True,\n        default=uuid.uuid4\n    )\n\n    username: Mapped[str]\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# \uc790\ub3d9 UUID \uc0dd\uc131\nuser = User(username='alice')\nprint(user.id)  # UUID('550e8400-e29b-41d4-a716-446655440000')\n\n# \uc218\ub3d9 UUID \uc9c0\uc815\nimport uuid\nuser = User(id=uuid.uuid4(), username='bob')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"PostgreSQL \ud0c0\uc785:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"id UUID PRIMARY KEY DEFAULT gen_random_uuid()\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-jsonb-json-\ub370\uc774\ud130",children:"\ud83d\udce6 JSONB (JSON \ub370\uc774\ud130)"}),"\n",(0,l.jsx)(n.h3,{id:"json-vs-jsonb",children:"JSON vs JSONB"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import JSON\nfrom sqlalchemy.dialects.postgresql import JSONB\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # JSON: \ud14d\uc2a4\ud2b8\ub85c \uc800\uc7a5 (\ube60\ub978 \uc0bd\uc785)\n    metadata_json: Mapped[dict] = mapped_column(JSON)\n\n    # JSONB: \ubc14\uc774\ub108\ub9ac\ub85c \uc800\uc7a5 (\ube60\ub978 \ucffc\ub9ac, \uc778\ub371\uc2f1 \uac00\ub2a5) - \uad8c\uc7a5\n    settings: Mapped[dict] = mapped_column(JSONB)\n    specs: Mapped[dict] = mapped_column(JSONB)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"product = Product(\n    name='Laptop',\n    settings={\n        'color': 'black',\n        'warranty': '2 years',\n        'features': ['backlit keyboard', 'fingerprint']\n    },\n    specs={\n        'cpu': 'Intel i7',\n        'ram': '16GB',\n        'storage': '512GB SSD'\n    }\n)\n\n# \uc870\ud68c\nwith Session(engine) as session:\n    session.add(product)\n    session.commit()\n\n    # JSONB \ucffc\ub9ac\n    stmt = select(Product).where(\n        Product.settings['color'].astext == 'black'\n    )\n    products = session.execute(stmt).scalars().all()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"jsonb-\ucffc\ub9ac",children:"JSONB \ucffc\ub9ac"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # JSON \ud544\ub4dc \uc811\uadfc\n    stmt = select(Product).where(\n        Product.settings['warranty'].astext == '2 years'\n    )\n\n    # JSON \ubc30\uc5f4 \ud3ec\ud568 \ud655\uc778\n    stmt = select(Product).where(\n        Product.settings['features'].contains(['backlit keyboard'])\n    )\n\n    # JSON \ud0a4 \uc874\uc7ac \ud655\uc778\n    stmt = select(Product).where(\n        Product.settings.has_key('color')\n    )\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-array-\ubc30\uc5f4",children:"\ud83d\udccb ARRAY (\ubc30\uc5f4)"}),"\n",(0,l.jsx)(n.h3,{id:"\ubc30\uc5f4-\uc815\uc758",children:"\ubc30\uc5f4 \uc815\uc758"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import ARRAY, String, Integer\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Article(Base):\n    __tablename__ = 'articles'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n\n    # String \ubc30\uc5f4\n    tags: Mapped[list[str]] = mapped_column(ARRAY(String(50)))\n\n    # Integer \ubc30\uc5f4\n    related_ids: Mapped[list[int]] = mapped_column(ARRAY(Integer))\n\n    # \ub2e4\ucc28\uc6d0 \ubc30\uc5f4\n    matrix: Mapped[list] = mapped_column(ARRAY(Integer, dimensions=2))\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"article = Article(\n    title='SQLAlchemy Guide',\n    tags=['python', 'sqlalchemy', 'postgresql'],\n    related_ids=[1, 2, 3],\n    matrix=[[1, 2], [3, 4]]\n)\n\n# \uc870\ud68c\nwith Session(engine) as session:\n    session.add(article)\n    session.commit()\n\n    print(article.tags)  # ['python', 'sqlalchemy', 'postgresql']\n"})}),"\n",(0,l.jsx)(n.h3,{id:"array-\ucffc\ub9ac",children:"ARRAY \ucffc\ub9ac"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select\n\nwith Session(engine) as session:\n    # \ubc30\uc5f4 \ud3ec\ud568 \ud655\uc778\n    stmt = select(Article).where(\n        Article.tags.contains(['python'])\n    )\n\n    # \ubc30\uc5f4 \uacb9\uce68 \ud655\uc778\n    stmt = select(Article).where(\n        Article.tags.overlap(['python', 'django'])\n    )\n\n    # \ud2b9\uc815 \uc778\ub371\uc2a4 \uc811\uadfc\n    stmt = select(Article).where(\n        Article.tags[1].astext == 'sqlalchemy'\n    )\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-\ub124\ud2b8\uc6cc\ud06c-\ud0c0\uc785",children:"\ud83c\udf10 \ub124\ud2b8\uc6cc\ud06c \ud0c0\uc785"}),"\n",(0,l.jsx)(n.h3,{id:"inet-macaddr",children:"INET, MACADDR"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.dialects.postgresql import INET, MACADDR\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Connection(Base):\n    __tablename__ = 'connections'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # IP \uc8fc\uc18c (IPv4, IPv6)\n    ip_address: Mapped[str] = mapped_column(INET)\n\n    # MAC \uc8fc\uc18c\n    mac_address: Mapped[str] = mapped_column(MACADDR)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"conn = Connection(\n    ip_address='192.168.1.100',\n    mac_address='08:00:2b:01:02:03'\n)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-enum-\uc5f4\uac70\ud615",children:"\ud83c\udfa8 ENUM (\uc5f4\uac70\ud615)"}),"\n",(0,l.jsx)(n.h3,{id:"postgresql-enum",children:"PostgreSQL ENUM"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.dialects.postgresql import ENUM\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Order(Base):\n    __tablename__ = 'orders'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # PostgreSQL ENUM\n    status: Mapped[str] = mapped_column(\n        ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled',\n             name='order_status_enum',\n             create_type=True)\n    )\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE TYPE order_status_enum AS ENUM (\n    'pending', 'processing', 'shipped', 'delivered', 'cancelled'\n);\n\nCREATE TABLE orders (\n    id SERIAL PRIMARY KEY,\n    status order_status_enum NOT NULL\n);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"python-enum-\uc0ac\uc6a9",children:"Python Enum \uc0ac\uc6a9"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from enum import Enum as PyEnum\nfrom sqlalchemy import Enum\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass OrderStatus(PyEnum):\n    PENDING = 'pending'\n    PROCESSING = 'processing'\n    SHIPPED = 'shipped'\n    DELIVERED = 'delivered'\n    CANCELLED = 'cancelled'\n\nclass Order(Base):\n    __tablename__ = 'orders'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # Python Enum\n    status: Mapped[OrderStatus] = mapped_column(\n        Enum(OrderStatus, native_enum=False)  # String\uc73c\ub85c \uc800\uc7a5\n    )\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'order = Order(status=OrderStatus.PENDING)\n\n# \ube44\uad50\nif order.status == OrderStatus.PENDING:\n    print("Order is pending")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"-\ucee4\uc2a4\ud140-\ud0c0\uc785",children:"\ud83d\udd27 \ucee4\uc2a4\ud140 \ud0c0\uc785"}),"\n",(0,l.jsx)(n.h3,{id:"typedecorator",children:"TypeDecorator"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import TypeDecorator, String\nfrom sqlalchemy.orm import Mapped, mapped_column\nimport json\n\nclass JSONEncodedDict(TypeDecorator):\n    """\ub515\uc154\ub108\ub9ac\ub97c JSON \ubb38\uc790\uc5f4\ub85c \uc800\uc7a5"""\n\n    impl = String\n    cache_ok = True\n\n    def process_bind_param(self, value, dialect):\n        """Python -> DB"""\n        if value is not None:\n            return json.dumps(value)\n        return None\n\n    def process_result_value(self, value, dialect):\n        """DB -> Python"""\n        if value is not None:\n            return json.loads(value)\n        return None\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # \ucee4\uc2a4\ud140 \ud0c0\uc785 \uc0ac\uc6a9\n    settings: Mapped[dict] = mapped_column(JSONEncodedDict(500))\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\uc774\uba54\uc77c-\ud0c0\uc785",children:"\uc774\uba54\uc77c \ud0c0\uc785"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import TypeDecorator, String\nfrom sqlalchemy.orm import Mapped, mapped_column\nimport re\n\nclass EmailType(TypeDecorator):\n    """\uc774\uba54\uc77c \ud0c0\uc785 (\uc790\ub3d9 \uc18c\ubb38\uc790 \ubcc0\ud658 \ubc0f \uac80\uc99d)"""\n\n    impl = String\n    cache_ok = True\n\n    def process_bind_param(self, value, dialect):\n        """Python -> DB"""\n        if value is not None:\n            value = value.lower().strip()\n            if not re.match(r\'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\', value):\n                raise ValueError(f"Invalid email: {value}")\n            return value\n        return None\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    email: Mapped[str] = mapped_column(EmailType(100), unique=True)\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"\uc0ac\uc6a9 \uc608:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# \uc790\ub3d9\uc73c\ub85c \uc18c\ubb38\uc790 \ubcc0\ud658\nuser = User(email='Alice@Example.COM')\nprint(user.email)  # alice@example.com\n\n# \uc798\ubabb\ub41c \ud615\uc2dd\uc740 \uc5d0\ub7ec\nuser = User(email='invalid-email')  # ValueError!\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-\uc2e4\uc804-\uc608\uc81c",children:"\ud83d\udcca \uc2e4\uc804 \uc608\uc81c"}),"\n",(0,l.jsx)(n.h3,{id:"\uc804\uc790\uc0c1\uac70\ub798-product-\ubaa8\ub378",children:"\uc804\uc790\uc0c1\uac70\ub798 Product \ubaa8\ub378"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import uuid\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom sqlalchemy import String, Text, Numeric, DateTime, func, CheckConstraint\nfrom sqlalchemy.dialects.postgresql import UUID, JSONB, ARRAY\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Product(Base):\n    __tablename__ = 'products'\n\n    # UUID Primary Key\n    id: Mapped[uuid.UUID] = mapped_column(\n        UUID(as_uuid=True),\n        primary_key=True,\n        default=uuid.uuid4\n    )\n\n    # \uae30\ubcf8 \uc815\ubcf4\n    name: Mapped[str] = mapped_column(String(200))\n    slug: Mapped[str] = mapped_column(String(200), unique=True, index=True)\n    description: Mapped[str] = mapped_column(Text)\n    sku: Mapped[str] = mapped_column(String(50), unique=True)\n\n    # \uac00\uaca9 (\uc815\ud655\ud55c \uae08\uc561)\n    price: Mapped[Decimal] = mapped_column(Numeric(10, 2))\n    cost: Mapped[Decimal] = mapped_column(Numeric(10, 2))\n\n    # \uc7ac\uace0\n    stock: Mapped[int] = mapped_column(default=0)\n\n    # \ubb34\uac8c (\uadfc\uc0ac\uac12 OK)\n    weight: Mapped[float | None] = mapped_column(Float)\n\n    # Boolean\n    is_active: Mapped[bool] = mapped_column(default=True)\n    is_featured: Mapped[bool] = mapped_column(default=False)\n\n    # ARRAY - \ud0dc\uadf8\n    tags: Mapped[list[str]] = mapped_column(ARRAY(String(50)), default=list)\n\n    # JSONB - \uc2a4\ud399\n    specifications: Mapped[dict] = mapped_column(JSONB, default=dict)\n\n    # JSONB - \uc774\ubbf8\uc9c0\n    images: Mapped[dict] = mapped_column(JSONB, default=dict)\n\n    # \ud0c0\uc784\uc2a4\ud0ec\ud504\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now(),\n        onupdate=func.now()\n    )\n\n    __table_args__ = (\n        CheckConstraint('price > 0', name='check_price_positive'),\n        CheckConstraint('cost >= 0', name='check_cost_non_negative'),\n        CheckConstraint('stock >= 0', name='check_stock_non_negative'),\n    )\n\n# \uc0ac\uc6a9 \uc608\nproduct = Product(\n    name='Gaming Laptop',\n    slug='gaming-laptop-2024',\n    description='High-performance gaming laptop',\n    sku='LAP-001',\n    price=Decimal('1299.99'),\n    cost=Decimal('899.99'),\n    stock=50,\n    weight=2.5,\n    tags=['gaming', 'laptop', 'high-performance'],\n    specifications={\n        'cpu': 'Intel i7-13700H',\n        'gpu': 'RTX 4060',\n        'ram': '16GB DDR5',\n        'storage': '1TB NVMe SSD',\n        'display': '15.6\" 144Hz'\n    },\n    images={\n        'thumbnail': 'https://example.com/thumb.jpg',\n        'gallery': [\n            'https://example.com/img1.jpg',\n            'https://example.com/img2.jpg'\n        ]\n    }\n)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,l.jsx)(n.h3,{id:"1-jsonb-vs-array",children:"1. JSONB vs ARRAY"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# \u2705 ARRAY: \ub2e8\uc21c \uac12 \ub9ac\uc2a4\ud2b8\ntags: Mapped[list[str]] = mapped_column(ARRAY(String(50)))\n\n# \u2705 JSONB: \ubcf5\uc7a1\ud55c \uad6c\uc870\nmetadata: Mapped[dict] = mapped_column(JSONB)\n\n# \u274c ARRAY \ub300\uc2e0 JSONB \ub0a8\uc6a9\n# \ub2e8\uc21c \ud0dc\uadf8\ub97c JSONB\ub85c \uc800\uc7a5\ud558\uba74 \ucffc\ub9ac\uac00 \ube44\ud6a8\uc728\uc801\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-numeric-vs-float",children:"2. Numeric vs Float"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# \u2705 \uae08\uc561\uc740 Numeric (\uc815\ud655)\nprice: Mapped[Decimal] = mapped_column(Numeric(10, 2))\n\n# \u2705 \ubb34\uac8c, \uac70\ub9ac \ub4f1\uc740 Float (\uadfc\uc0ac\uac12 OK)\nweight: Mapped[float] = mapped_column(Float)\n\n# \u274c \uae08\uc561\uc744 Float\ub85c \uc800\uc7a5 (\ubd80\uc815\ud655)\n# 1299.99\uac00 1299.9899999\ub85c \uc800\uc7a5\ub420 \uc218 \uc788\uc74c\n"})}),"\n",(0,l.jsx)(n.h3,{id:"3-datetime-timezone",children:"3. DateTime Timezone"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# \u2705 timezone \uc0ac\uc6a9 (\uad8c\uc7a5)\ncreated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True))\n\n# \u274c timezone \uc5c6\uc74c (\uc2dc\uac04\ub300 \ubb38\uc81c \ubc1c\uc0dd \uac00\ub2a5)\ncreated_at: Mapped[datetime] = mapped_column(DateTime)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"4-uuid-vs-biginteger",children:"4. UUID vs BigInteger"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# \u2705 UUID: \ubd84\uc0b0 \uc2dc\uc2a4\ud15c, \ubcf4\uc548\nid: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)\n\n# \u2705 BigInteger: \ub2e8\uc21c, \uc21c\ucc28\uc801 ID\nid: Mapped[int] = mapped_column(BigInteger, primary_key=True)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"./models",children:"ORM \ubaa8\ub378 \uc815\uc758"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"./crud",children:"\uae30\ubcf8 CRUD \uc791\uc5c5"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"../intermediate/relationships",children:"\uad00\uacc4(Relationship) \uc815\uc758"})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,l.jsx)(n.p,{children:"\ub370\uc774\ud130 \ud0c0\uc785\uc744 \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \ubaa8\ub378 \uac04 \uad00\uacc4\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,l.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,l.jsx)(n.a,{href:"../intermediate/relationships",children:"\uad00\uacc4(Relationship) \uc815\uc758"})]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": PostgreSQL\uc758 JSONB, ARRAY, UUID \ub4f1 \uace0\uae09 \ud0c0\uc785\uc744 \uc801\uadf9 \ud65c\uc6a9\ud558\uba74 \uc2a4\ud0a4\ub9c8 \uc124\uacc4\uac00 \ud6e8\uc52c \uc720\uc5f0\ud574\uc9d1\ub2c8\ub2e4!"]})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}}}]);