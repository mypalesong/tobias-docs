"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[6957],{1485:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"sqlalchemy/intermediate/relationships","title":"\uad00\uacc4(Relationship) \uc815\uc758","description":"SQLAlchemy ORM\uc73c\ub85c \ud14c\uc774\ube14 \uac04\uc758 \uad00\uacc4\ub97c Python \uac1d\uccb4\ub85c \ud45c\ud604\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/sqlalchemy/intermediate/relationships.md","sourceDirName":"sqlalchemy/intermediate","slug":"/sqlalchemy/intermediate/relationships","permalink":"/docs/sqlalchemy/intermediate/relationships","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sqlalchemy/intermediate/relationships.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"sqlalchemySidebar","previous":{"title":"\uc911\uae09\ud3b8 \uc18c\uac1c","permalink":"/docs/sqlalchemy/intermediate/intro"},"next":{"title":"\ucffc\ub9ac \uc791\uc131","permalink":"/docs/sqlalchemy/intermediate/queries"}}');var t=s(4848),o=s(8453);const i={sidebar_position:2},r="\uad00\uacc4(Relationship) \uc815\uc758",l={},p=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83d\udd11 Foreign Key vs Relationship",id:"-foreign-key-vs-relationship",level:2},{value:"Foreign Key\ub9cc \uc0ac\uc6a9",id:"foreign-key\ub9cc-\uc0ac\uc6a9",level:3},{value:"Relationship \ucd94\uac00",id:"relationship-\ucd94\uac00",level:3},{value:"1\ufe0f\u20e3 One-to-Many (1) \uad00\uacc4",id:"1\ufe0f\u20e3-one-to-many-1-\uad00\uacc4",level:2},{value:"\uae30\ubcf8 \uc124\uc815",id:"\uae30\ubcf8-\uc124\uc815",level:3},{value:"\uc0ac\uc6a9 \uc608\uc81c",id:"\uc0ac\uc6a9-\uc608\uc81c",level:3},{value:"\uad00\uacc4\ub97c \ud1b5\ud55c \ucd94\uac00/\uc0ad\uc81c",id:"\uad00\uacc4\ub97c-\ud1b5\ud55c-\ucd94\uac00\uc0ad\uc81c",level:3},{value:"2\ufe0f\u20e3 Many-to-One (N:1) \uad00\uacc4",id:"2\ufe0f\u20e3-many-to-one-n1-\uad00\uacc4",level:2},{value:"3\ufe0f\u20e3 One-to-One (1:1) \uad00\uacc4",id:"3\ufe0f\u20e3-one-to-one-11-\uad00\uacc4",level:2},{value:"\uae30\ubcf8 \uc124\uc815",id:"\uae30\ubcf8-\uc124\uc815-1",level:3},{value:"\uc0ac\uc6a9 \uc608\uc81c",id:"\uc0ac\uc6a9-\uc608\uc81c-1",level:3},{value:"4\ufe0f\u20e3 Many-to-Many (N) \uad00\uacc4",id:"4\ufe0f\u20e3-many-to-many-n-\uad00\uacc4",level:2},{value:"Association Table \uc0ac\uc6a9",id:"association-table-\uc0ac\uc6a9",level:3},{value:"\uc0ac\uc6a9 \uc608\uc81c",id:"\uc0ac\uc6a9-\uc608\uc81c-2",level:3},{value:"Association Object Pattern",id:"association-object-pattern",level:3},{value:"\ud83d\udd04 Self-Referential \uad00\uacc4",id:"-self-referential-\uad00\uacc4",level:2},{value:"\ud314\ub85c\uc6b0 \uc2dc\uc2a4\ud15c",id:"\ud314\ub85c\uc6b0-\uc2dc\uc2a4\ud15c",level:3},{value:"\u2699\ufe0f Cascade \uc635\uc158",id:"\ufe0f-cascade-\uc635\uc158",level:2},{value:"\uc8fc\uc694 Cascade \uc635\uc158",id:"\uc8fc\uc694-cascade-\uc635\uc158",level:3},{value:"Cascade \uc608\uc81c",id:"cascade-\uc608\uc81c",level:3},{value:"Cascade \ube44\uad50",id:"cascade-\ube44\uad50",level:3},{value:"\ud83d\udd27 back_populates vs backref",id:"-back_populates-vs-backref",level:2},{value:"back_populates (\uad8c\uc7a5)",id:"back_populates-\uad8c\uc7a5",level:3},{value:"backref (\ub808\uac70\uc2dc)",id:"backref-\ub808\uac70\uc2dc",level:3},{value:"\ud83d\udca1 \uc2e4\uc804 \uc608\uc81c: \ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c",id:"-\uc2e4\uc804-\uc608\uc81c-\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c",level:2},{value:"\ud83d\udca1 \ud504\ub85c \ud301",id:"-\ud504\ub85c-\ud301",level:2},{value:"1. Lazy Loading vs Eager Loading",id:"1-lazy-loading-vs-eager-loading",level:3},{value:"2. Relationship \ubc29\ud5a5 \uc120\ud0dd",id:"2-relationship-\ubc29\ud5a5-\uc120\ud0dd",level:3},{value:"3. Cascade \uc2e0\uc911\ud788 \uc0ac\uc6a9",id:"3-cascade-\uc2e0\uc911\ud788-\uc0ac\uc6a9",level:3},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\uad00\uacc4relationship-\uc815\uc758",children:"\uad00\uacc4(Relationship) \uc815\uc758"})}),"\n",(0,t.jsx)(n.p,{children:"SQLAlchemy ORM\uc73c\ub85c \ud14c\uc774\ube14 \uac04\uc758 \uad00\uacc4\ub97c Python \uac1d\uccb4\ub85c \ud45c\ud604\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Foreign Key\uc640 Relationship \uc774\ud574"}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 One-to-Many (1",":N",") \uad00\uacc4"]}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Many-to-One (N:1) \uad00\uacc4"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 One-to-One (1:1) \uad00\uacc4"}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 Many-to-Many (N",":M",") \uad00\uacc4"]}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Cascade \uc635\uc158 \ud65c\uc6a9"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-foreign-key-vs-relationship",children:"\ud83d\udd11 Foreign Key vs Relationship"}),"\n",(0,t.jsx)(n.h3,{id:"foreign-key\ub9cc-\uc0ac\uc6a9",children:"Foreign Key\ub9cc \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass Post(Base):\n    __tablename__ = 'posts'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    user_id: Mapped[int] = mapped_column(ForeignKey('users.id'))\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0ac\uc6a9:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"post = session.get(Post, 1)\nprint(post.user_id)  # 123 (ID\ub9cc \uc54c \uc218 \uc788\uc74c)\n\n# User \uc815\ubcf4\uac00 \ud544\uc694\ud558\uba74 \ubcc4\ub3c4 \uc870\ud68c\nuser = session.get(User, post.user_id)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"relationship-\ucd94\uac00",children:"Relationship \ucd94\uac00"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import relationship\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n\n    # Relationship\n    posts: Mapped[list["Post"]] = relationship(back_populates="author")\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n\n    # Relationship\n    author: Mapped["User"] = relationship(back_populates="posts")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0ac\uc6a9:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"post = session.get(Post, 1)\nprint(post.author.username)  # \uac1d\uccb4\ub85c \uc9c1\uc811 \uc811\uadfc!\n\nuser = session.get(User, 1)\nfor post in user.posts:  # \ub9ac\uc2a4\ud2b8\ub85c \uc811\uadfc\n    print(post.title)\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"1\ufe0f\u20e3-one-to-many-1-\uad00\uacc4",children:["1\ufe0f\u20e3 One-to-Many (1",":N",") \uad00\uacc4"]}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc124\uc815",children:"\uae30\ubcf8 \uc124\uc815"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"User (1) \u2194 Post (N)"}),": \ud55c \uc0ac\uc6a9\uc790\uac00 \uc5ec\ub7ec \uac8c\uc2dc\uae00\uc744 \uc791\uc131"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import String, Text, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n\n    # One-to-Many: \ud55c \uc720\uc800\uac00 \uc5ec\ub7ec \ud3ec\uc2a4\ud2b8\n    posts: Mapped[list["Post"]] = relationship(\n        back_populates="author",\n        cascade="all, delete-orphan"\n    )\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(Text)\n\n    # Foreign Key\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n\n    # Many-to-One: \uc5ec\ub7ec \ud3ec\uc2a4\ud2b8\uac00 \ud55c \uc720\uc800\uc5d0 \uc18d\ud568\n    author: Mapped["User"] = relationship(back_populates="posts")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc0ac\uc6a9-\uc608\uc81c",children:"\uc0ac\uc6a9 \uc608\uc81c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with Session(engine) as session:\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    user = User(username='alice')\n\n    # \ud3ec\uc2a4\ud2b8 \uc0dd\uc131 \ubc0f \uc5f0\uacb0\n    post1 = Post(title='First Post', content='Hello')\n    post2 = Post(title='Second Post', content='World')\n\n    # \ubc29\ubc95 1: append\n    user.posts.append(post1)\n    user.posts.append(post2)\n\n    # \ubc29\ubc95 2: \ub9ac\uc2a4\ud2b8 \ud560\ub2f9\n    # user.posts = [post1, post2]\n\n    # \ubc29\ubc95 3: author \uc124\uc815\n    # post1.author = user\n    # post2.author = user\n\n    session.add(user)\n    session.commit()\n\n    # \uc870\ud68c\n    user = session.get(User, 1)\n    print(f\"{user.username}\uc758 \ud3ec\uc2a4\ud2b8:\")\n    for post in user.posts:\n        print(f\"  - {post.title}\")\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uad00\uacc4\ub97c-\ud1b5\ud55c-\ucd94\uac00\uc0ad\uc81c",children:"\uad00\uacc4\ub97c \ud1b5\ud55c \ucd94\uac00/\uc0ad\uc81c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with Session(engine) as session:\n    user = session.get(User, 1)\n\n    # \uc0c8 \ud3ec\uc2a4\ud2b8 \ucd94\uac00\n    new_post = Post(title='New Post', content='Content')\n    user.posts.append(new_post)\n    session.commit()\n\n    # \ud3ec\uc2a4\ud2b8 \uc81c\uac70 (cascade \uc124\uc815 \uc2dc DB\uc5d0\uc11c\ub3c4 \uc0ad\uc81c)\n    user.posts.remove(user.posts[0])\n    session.commit()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"2\ufe0f\u20e3-many-to-one-n1-\uad00\uacc4",children:"2\ufe0f\u20e3 Many-to-One (N:1) \uad00\uacc4"}),"\n",(0,t.jsx)(n.p,{children:"Many-to-One\uc740 One-to-Many\uc758 \ubc18\ub300\ud3b8\uc785\ub2c8\ub2e4."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Comment(Base):\n    __tablename__ = \'comments\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    content: Mapped[str] = mapped_column(Text)\n\n    # Foreign Key\n    post_id: Mapped[int] = mapped_column(ForeignKey(\'posts.id\'))\n\n    # Many-to-One: \uc5ec\ub7ec \ub313\uae00\uc774 \ud55c \ud3ec\uc2a4\ud2b8\uc5d0 \uc18d\ud568\n    post: Mapped["Post"] = relationship(back_populates="comments")\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n\n    # One-to-Many: \ud55c \ud3ec\uc2a4\ud2b8\uac00 \uc5ec\ub7ec \ub313\uae00\uc744 \uac00\uc9d0\n    comments: Mapped[list["Comment"]] = relationship(\n        back_populates="post",\n        cascade="all, delete-orphan"\n    )\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0ac\uc6a9:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with Session(engine) as session:\n    post = session.get(Post, 1)\n\n    # \ub313\uae00 \ucd94\uac00\n    comment1 = Comment(content='Great post!')\n    comment2 = Comment(content='Thanks for sharing')\n\n    post.comments.extend([comment1, comment2])\n    session.commit()\n\n    # \ub313\uae00\uc758 \ud3ec\uc2a4\ud2b8 \uc811\uadfc\n    comment = session.get(Comment, 1)\n    print(f\"\ub313\uae00\uc774 \ub2ec\ub9b0 \ud3ec\uc2a4\ud2b8: {comment.post.title}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"3\ufe0f\u20e3-one-to-one-11-\uad00\uacc4",children:"3\ufe0f\u20e3 One-to-One (1:1) \uad00\uacc4"}),"\n",(0,t.jsx)(n.h3,{id:"\uae30\ubcf8-\uc124\uc815-1",children:"\uae30\ubcf8 \uc124\uc815"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"User (1) \u2194 Profile (1)"}),": \ud55c \uc0ac\uc6a9\uc790\uac00 \ud558\ub098\uc758 \ud504\ub85c\ud544\uc744 \uac00\uc9d0"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import String, Text, Date, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n\n    # One-to-One: uselist=False\n    profile: Mapped["Profile"] = relationship(\n        back_populates="user",\n        uselist=False,  # \ub9ac\uc2a4\ud2b8\uac00 \uc544\ub2cc \ub2e8\uc77c \uac1d\uccb4\n        cascade="all, delete-orphan"\n    )\n\nclass Profile(Base):\n    __tablename__ = \'profiles\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    bio: Mapped[str | None] = mapped_column(Text)\n    birth_date: Mapped[date | None] = mapped_column(Date)\n    avatar_url: Mapped[str | None] = mapped_column(String(500))\n\n    # Foreign Key (unique=True\ub85c 1:1 \ubcf4\uc7a5)\n    user_id: Mapped[int] = mapped_column(\n        ForeignKey(\'users.id\'),\n        unique=True\n    )\n\n    # One-to-One\n    user: Mapped["User"] = relationship(back_populates="profile")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\uc0ac\uc6a9-\uc608\uc81c-1",children:"\uc0ac\uc6a9 \uc608\uc81c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from datetime import date\n\nwith Session(engine) as session:\n    # \uc0ac\uc6a9\uc790\uc640 \ud504\ub85c\ud544 \uc0dd\uc131\n    user = User(username='alice')\n    profile = Profile(\n        bio='Python developer',\n        birth_date=date(1990, 5, 15),\n        avatar_url='https://example.com/avatar.jpg'\n    )\n\n    # \uc5f0\uacb0\n    user.profile = profile\n\n    session.add(user)\n    session.commit()\n\n    # \uc870\ud68c\n    user = session.get(User, 1)\n    print(f\"{user.username}\uc758 \ud504\ub85c\ud544:\")\n    print(f\"  Bio: {user.profile.bio}\")\n    print(f\"  \uc0dd\ub144\uc6d4\uc77c: {user.profile.birth_date}\")\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"4\ufe0f\u20e3-many-to-many-n-\uad00\uacc4",children:["4\ufe0f\u20e3 Many-to-Many (N",":M",") \uad00\uacc4"]}),"\n",(0,t.jsx)(n.h3,{id:"association-table-\uc0ac\uc6a9",children:"Association Table \uc0ac\uc6a9"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Post (N) \u2194 Tag (M)"}),": \ud55c \ud3ec\uc2a4\ud2b8\uac00 \uc5ec\ub7ec \ud0dc\uadf8, \ud55c \ud0dc\uadf8\uac00 \uc5ec\ub7ec \ud3ec\uc2a4\ud2b8"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import Table, Column, Integer, ForeignKey, String\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\n# Association Table (\uc911\uac04 \ud14c\uc774\ube14)\npost_tags = Table(\n    'post_tags',\n    Base.metadata,\n    Column('post_id', Integer, ForeignKey('posts.id'), primary_key=True),\n    Column('tag_id', Integer, ForeignKey('tags.id'), primary_key=True)\n)\n\nclass Post(Base):\n    __tablename__ = 'posts'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n\n    # Many-to-Many\n    tags: Mapped[list[\"Tag\"]] = relationship(\n        secondary=post_tags,\n        back_populates=\"posts\"\n    )\n\nclass Tag(Base):\n    __tablename__ = 'tags'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50), unique=True)\n\n    # Many-to-Many\n    posts: Mapped[list[\"Post\"]] = relationship(\n        secondary=post_tags,\n        back_populates=\"tags\"\n    )\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0dd\uc131\ub418\ub294 SQL:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE post_tags (\n    post_id INTEGER REFERENCES posts(id),\n    tag_id INTEGER REFERENCES tags(id),\n    PRIMARY KEY (post_id, tag_id)\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\uc0ac\uc6a9-\uc608\uc81c-2",children:"\uc0ac\uc6a9 \uc608\uc81c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with Session(engine) as session:\n    # \ud0dc\uadf8 \uc0dd\uc131\n    tag_python = Tag(name='python')\n    tag_sql = Tag(name='sqlalchemy')\n    tag_db = Tag(name='database')\n\n    # \ud3ec\uc2a4\ud2b8 \uc0dd\uc131\n    post = Post(title='SQLAlchemy Guide')\n\n    # \ud0dc\uadf8 \ucd94\uac00\n    post.tags.extend([tag_python, tag_sql, tag_db])\n\n    session.add(post)\n    session.commit()\n\n    # \uc870\ud68c\n    post = session.get(Post, 1)\n    print(f\"\ud0dc\uadf8: {[tag.name for tag in post.tags]}\")\n\n    # \ubc18\ub300 \ubc29\ud5a5\n    tag = session.query(Tag).filter_by(name='python').first()\n    print(f\"Python \ud0dc\uadf8\uc758 \ud3ec\uc2a4\ud2b8: {[p.title for p in tag.posts]}\")\n"})}),"\n",(0,t.jsx)(n.h3,{id:"association-object-pattern",children:"Association Object Pattern"}),"\n",(0,t.jsx)(n.p,{children:"\uc911\uac04 \ud14c\uc774\ube14\uc5d0 \ucd94\uac00 \ub370\uc774\ud130\uac00 \ud544\uc694\ud55c \uacbd\uc6b0:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\nfrom sqlalchemy import DateTime, func\n\nclass PostTag(Base):\n    """Association Object (\ucd94\uac00 \ub370\uc774\ud130 \ud3ec\ud568)"""\n    __tablename__ = \'post_tags\'\n\n    post_id: Mapped[int] = mapped_column(\n        ForeignKey(\'posts.id\'),\n        primary_key=True\n    )\n    tag_id: Mapped[int] = mapped_column(\n        ForeignKey(\'tags.id\'),\n        primary_key=True\n    )\n\n    # \ucd94\uac00 \ub370\uc774\ud130\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n    created_by: Mapped[int | None] = mapped_column(ForeignKey(\'users.id\'))\n\n    # Relationships\n    post: Mapped["Post"] = relationship(back_populates="post_tags")\n    tag: Mapped["Tag"] = relationship(back_populates="post_tags")\n    creator: Mapped["User"] = relationship()\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n\n    # Association Object \uc0ac\uc6a9\n    post_tags: Mapped[list["PostTag"]] = relationship(\n        back_populates="post",\n        cascade="all, delete-orphan"\n    )\n\n    # \ud3b8\uc758 \uc18d\uc131 (\uc120\ud0dd\uc0ac\ud56d)\n    @property\n    def tags(self):\n        return [pt.tag for pt in self.post_tags]\n\nclass Tag(Base):\n    __tablename__ = \'tags\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str]\n\n    post_tags: Mapped[list["PostTag"]] = relationship(\n        back_populates="tag"\n    )\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0ac\uc6a9:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with Session(engine) as session:\n    post = session.get(Post, 1)\n    tag = session.query(Tag).filter_by(name='python').first()\n    user = session.get(User, 1)\n\n    # Association Object \uc0dd\uc131\n    post_tag = PostTag(\n        post=post,\n        tag=tag,\n        creator=user\n    )\n\n    session.add(post_tag)\n    session.commit()\n\n    # \uc870\ud68c\n    for pt in post.post_tags:\n        print(f\"Tag: {pt.tag.name}, Added by: {pt.creator.username}, At: {pt.created_at}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-self-referential-\uad00\uacc4",children:"\ud83d\udd04 Self-Referential \uad00\uacc4"}),"\n",(0,t.jsx)(n.h3,{id:"\ud314\ub85c\uc6b0-\uc2dc\uc2a4\ud15c",children:"\ud314\ub85c\uc6b0 \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"User \u2194 User"}),": \uc0ac\uc6a9\uc790\uac00 \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub97c \ud314\ub85c\uc6b0"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Association Table\nfollowers_table = Table(\n    'followers',\n    Base.metadata,\n    Column('follower_id', Integer, ForeignKey('users.id'), primary_key=True),\n    Column('following_id', Integer, ForeignKey('users.id'), primary_key=True)\n)\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50))\n\n    # Self-referential Many-to-Many\n    following: Mapped[list[\"User\"]] = relationship(\n        secondary=followers_table,\n        primaryjoin=id == followers_table.c.follower_id,\n        secondaryjoin=id == followers_table.c.following_id,\n        back_populates=\"followers\"\n    )\n\n    followers: Mapped[list[\"User\"]] = relationship(\n        secondary=followers_table,\n        primaryjoin=id == followers_table.c.following_id,\n        secondaryjoin=id == followers_table.c.follower_id,\n        back_populates=\"following\"\n    )\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\uc0ac\uc6a9:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with Session(engine) as session:\n    alice = User(username='alice')\n    bob = User(username='bob')\n    charlie = User(username='charlie')\n\n    # Alice\uac00 Bob\uacfc Charlie\ub97c \ud314\ub85c\uc6b0\n    alice.following.extend([bob, charlie])\n\n    session.add_all([alice, bob, charlie])\n    session.commit()\n\n    # \uc870\ud68c\n    user = session.query(User).filter_by(username='alice').first()\n    print(f\"{user.username}\uac00 \ud314\ub85c\uc6b0\ud558\ub294 \uc0ac\ub78c:\")\n    for following in user.following:\n        print(f\"  - {following.username}\")\n\n    print(f\"{user.username}\uc758 \ud314\ub85c\uc6cc:\")\n    for follower in user.followers:\n        print(f\"  - {follower.username}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-cascade-\uc635\uc158",children:"\u2699\ufe0f Cascade \uc635\uc158"}),"\n",(0,t.jsx)(n.h3,{id:"\uc8fc\uc694-cascade-\uc635\uc158",children:"\uc8fc\uc694 Cascade \uc635\uc158"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n\n    # Cascade \uc635\uc158\n    posts: Mapped[list["Post"]] = relationship(\n        back_populates="author",\n        cascade="all, delete-orphan"\n    )\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Cascade \uc635\uc158:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"all"}),": save-update, merge, refresh, expunge, delete"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"save-update"}),": \ubd80\ubaa8 \ucd94\uac00 \uc2dc \uc790\uc2dd\ub3c4 \uc790\ub3d9 \ucd94\uac00"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"delete"}),": \ubd80\ubaa8 \uc0ad\uc81c \uc2dc \uc790\uc2dd\ub3c4 \uc0ad\uc81c"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"delete-orphan"}),": \ubd80\ubaa8\uc5d0\uc11c \uc81c\uac70\ub41c \uc790\uc2dd \uc0ad\uc81c"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"merge"}),": \ubcd1\ud569 \uc2dc \uc790\uc2dd\ub3c4 \ubcd1\ud569"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refresh"}),": \uc0c8\ub85c\uace0\uce68 \uc2dc \uc790\uc2dd\ub3c4 \uc0c8\ub85c\uace0\uce68"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cascade-\uc608\uc81c",children:"Cascade \uc608\uc81c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# cascade="all, delete-orphan"\nwith Session(engine) as session:\n    user = session.get(User, 1)\n\n    # \ubd80\ubaa8 \uc0ad\uc81c \u2192 \uc790\uc2dd\ub3c4 \uc0ad\uc81c\n    session.delete(user)\n    session.commit()  # user\uc758 \ubaa8\ub4e0 posts\ub3c4 \uc0ad\uc81c\ub428\n\n# delete-orphan\nwith Session(engine) as session:\n    user = session.get(User, 1)\n\n    # \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc81c\uac70 \u2192 DB\uc5d0\uc11c\ub3c4 \uc0ad\uc81c\n    removed_post = user.posts.pop()  # \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc81c\uac70\n    session.commit()  # DB\uc5d0\uc11c\ub3c4 \uc0ad\uc81c\ub428\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cascade-\ube44\uad50",children:"Cascade \ube44\uad50"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u274c cascade \uc5c6\uc74c\nclass User(Base):\n    posts: Mapped[list["Post"]] = relationship(back_populates="author")\n\n# \uc0ac\uc6a9 \uc2dc:\nuser.posts.append(post)\nsession.add(user)\nsession.add(post)  # \uc218\ub3d9\uc73c\ub85c \ucd94\uac00 \ud544\uc694\n\n# \u2705 cascade="save-update"\nclass User(Base):\n    posts: Mapped[list["Post"]] = relationship(\n        back_populates="author",\n        cascade="save-update"\n    )\n\n# \uc0ac\uc6a9 \uc2dc:\nuser.posts.append(post)\nsession.add(user)  # post\ub3c4 \uc790\ub3d9 \ucd94\uac00\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-back_populates-vs-backref",children:"\ud83d\udd27 back_populates vs backref"}),"\n",(0,t.jsx)(n.h3,{id:"back_populates-\uad8c\uc7a5",children:"back_populates (\uad8c\uc7a5)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class User(Base):\n    __tablename__ = \'users\'\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    posts: Mapped[list["Post"]] = relationship(back_populates="author")\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n\n    author: Mapped["User"] = relationship(back_populates="posts")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"backref-\ub808\uac70\uc2dc",children:"backref (\ub808\uac70\uc2dc)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class User(Base):\n    __tablename__ = 'users'\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    # backref: \ud55c\ucabd\uc5d0\ub9cc \uc815\uc758\n    posts: Mapped[list[\"Post\"]] = relationship(\n        backref=\"author\"  # Post.author\uac00 \uc790\ub3d9 \uc0dd\uc131\ub428\n    )\n\nclass Post(Base):\n    __tablename__ = 'posts'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey('users.id'))\n    # relationship \uc815\uc758 \ubd88\ud544\uc694\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\uad8c\uc7a5\uc0ac\ud56d"}),": ",(0,t.jsx)(n.code,{children:"back_populates"}),"\ub97c \uc0ac\uc6a9\ud558\uba74 \uc591\ubc29\ud5a5 \uad00\uacc4\uac00 \uba85\uc2dc\uc801\uc73c\ub85c \ubcf4\uc5ec \ucf54\ub4dc\uac00 \ub354 \uba85\ud655\ud569\ub2c8\ub2e4."]}),"\n",(0,t.jsx)(n.h2,{id:"-\uc2e4\uc804-\uc608\uc81c-\ube14\ub85c\uadf8-\uc2dc\uc2a4\ud15c",children:"\ud83d\udca1 \uc2e4\uc804 \uc608\uc81c: \ube14\ub85c\uadf8 \uc2dc\uc2a4\ud15c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\nfrom sqlalchemy import String, Text, DateTime, ForeignKey, Table, Column, func\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\n# Many-to-Many: Post \u2194 Tag\npost_tags = Table(\n    \'post_tags\',\n    Base.metadata,\n    Column(\'post_id\', Integer, ForeignKey(\'posts.id\'), primary_key=True),\n    Column(\'tag_id\', Integer, ForeignKey(\'tags.id\'), primary_key=True)\n)\n\nclass User(Base):\n    __tablename__ = \'users\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(String(50), unique=True)\n\n    # One-to-Many: User \u2192 Post\n    posts: Mapped[list["Post"]] = relationship(\n        back_populates="author",\n        cascade="all, delete-orphan"\n    )\n\n    # One-to-Many: User \u2192 Comment\n    comments: Mapped[list["Comment"]] = relationship(\n        back_populates="author",\n        cascade="all, delete-orphan"\n    )\n\nclass Post(Base):\n    __tablename__ = \'posts\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(200))\n    content: Mapped[str] = mapped_column(Text)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n\n    # Many-to-One: Post \u2192 User\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n    author: Mapped["User"] = relationship(back_populates="posts")\n\n    # One-to-Many: Post \u2192 Comment\n    comments: Mapped[list["Comment"]] = relationship(\n        back_populates="post",\n        cascade="all, delete-orphan"\n    )\n\n    # Many-to-Many: Post \u2194 Tag\n    tags: Mapped[list["Tag"]] = relationship(\n        secondary=post_tags,\n        back_populates="posts"\n    )\n\nclass Comment(Base):\n    __tablename__ = \'comments\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    content: Mapped[str] = mapped_column(Text)\n    created_at: Mapped[datetime] = mapped_column(\n        DateTime(timezone=True),\n        server_default=func.now()\n    )\n\n    # Many-to-One: Comment \u2192 Post\n    post_id: Mapped[int] = mapped_column(ForeignKey(\'posts.id\'))\n    post: Mapped["Post"] = relationship(back_populates="comments")\n\n    # Many-to-One: Comment \u2192 User\n    user_id: Mapped[int] = mapped_column(ForeignKey(\'users.id\'))\n    author: Mapped["User"] = relationship(back_populates="comments")\n\nclass Tag(Base):\n    __tablename__ = \'tags\'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50), unique=True)\n\n    # Many-to-Many: Tag \u2194 Post\n    posts: Mapped[list["Post"]] = relationship(\n        secondary=post_tags,\n        back_populates="tags"\n    )\n\n# \uc0ac\uc6a9 \uc608\uc81c\nwith Session(engine) as session:\n    # \uc0ac\uc6a9\uc790 \uc0dd\uc131\n    user = User(username=\'alice\')\n\n    # \ud0dc\uadf8 \uc0dd\uc131\n    tag_python = Tag(name=\'python\')\n    tag_sql = Tag(name=\'sqlalchemy\')\n\n    # \ud3ec\uc2a4\ud2b8 \uc0dd\uc131\n    post = Post(\n        title=\'SQLAlchemy \uc644\ubcbd \uac00\uc774\ub4dc\',\n        content=\'SQLAlchemy\ub97c \ubc30\uc6cc\ubd05\uc2dc\ub2e4!\',\n        author=user,\n        tags=[tag_python, tag_sql]\n    )\n\n    # \ub313\uae00 \uc0dd\uc131\n    comment1 = Comment(content=\'\uc88b\uc740 \uae00\uc774\ub124\uc694!\', author=user, post=post)\n    comment2 = Comment(content=\'\uac10\uc0ac\ud569\ub2c8\ub2e4!\', author=user, post=post)\n\n    session.add(user)\n    session.commit()\n\n    # \uc870\ud68c\n    user = session.query(User).filter_by(username=\'alice\').first()\n    for post in user.posts:\n        print(f"\ud3ec\uc2a4\ud2b8: {post.title}")\n        print(f"\ud0dc\uadf8: {[tag.name for tag in post.tags]}")\n        print(f"\ub313\uae00 \uc218: {len(post.comments)}")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\ud504\ub85c-\ud301",children:"\ud83d\udca1 \ud504\ub85c \ud301"}),"\n",(0,t.jsx)(n.h3,{id:"1-lazy-loading-vs-eager-loading",children:"1. Lazy Loading vs Eager Loading"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u274c Lazy Loading (\uae30\ubcf8\uac12): N+1 \ubb38\uc81c\nusers = session.query(User).all()\nfor user in users:\n    print(user.posts)  # \uac01 \uc0ac\uc6a9\uc790\ub9c8\ub2e4 \ucffc\ub9ac \ubc1c\uc0dd!\n\n# \u2705 Eager Loading: Join \ucd5c\uc801\ud654 (\ub2e4\uc74c \uc7a5\uc5d0\uc11c \uc790\uc138\ud788)\nfrom sqlalchemy.orm import selectinload\n\nstmt = select(User).options(selectinload(User.posts))\nusers = session.execute(stmt).scalars().all()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-relationship-\ubc29\ud5a5-\uc120\ud0dd",children:"2. Relationship \ubc29\ud5a5 \uc120\ud0dd"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u2705 \uc591\ubc29\ud5a5 (\uad8c\uc7a5)\nclass User(Base):\n    posts: Mapped[list["Post"]] = relationship(back_populates="author")\n\nclass Post(Base):\n    author: Mapped["User"] = relationship(back_populates="posts")\n\n# \u26a0\ufe0f \ub2e8\ubc29\ud5a5 (\ud544\uc694\ud55c \uacbd\uc6b0\ub9cc)\nclass Post(Base):\n    author: Mapped["User"] = relationship()  # Post \u2192 User\ub9cc\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-cascade-\uc2e0\uc911\ud788-\uc0ac\uc6a9",children:"3. Cascade \uc2e0\uc911\ud788 \uc0ac\uc6a9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u2705 \uc885\uc18d\uc801\uc778 \ub370\uc774\ud130\ub294 cascade\nclass User(Base):\n    posts: Mapped[list["Post"]] = relationship(\n        cascade="all, delete-orphan"  # User \uc0ad\uc81c \uc2dc Post\ub3c4 \uc0ad\uc81c\n    )\n\n# \u274c \ub3c5\ub9bd\uc801\uc778 \ub370\uc774\ud130\ub294 cascade \uae08\uc9c0\nclass Post(Base):\n    tags: Mapped[list["Tag"]] = relationship()  # Post \uc0ad\uc81c\ud574\ub3c4 Tag\ub294 \uc720\uc9c0\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"../basic/models",children:"ORM \ubaa8\ub378 \uc815\uc758"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./queries",children:"\ucffc\ub9ac \uc791\uc131"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./joins",children:"Join\uacfc \ub85c\ub529 \uc804\ub7b5"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,t.jsx)(n.p,{children:"\uad00\uacc4\ub97c \ub9c8\uc2a4\ud130\ud588\ub2e4\uba74, \uc774\uc81c \ubcf5\uc7a1\ud55c \ucffc\ub9ac\ub97c \uc791\uc131\ud574\ubd05\uc2dc\ub2e4!"}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,t.jsx)(n.a,{href:"./queries",children:"\ucffc\ub9ac \uc791\uc131"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": Relationship\uc740 Foreign Key\ub97c \ub354 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \ub3c4\uad6c\uc785\ub2c8\ub2e4. Foreign Key\ub294 \ud544\uc218, Relationship\uc740 \uc120\ud0dd\uc774\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4!"]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var a=s(6540);const t={},o=a.createContext(t);function i(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);