"use strict";(globalThis.webpackChunkgithub_docs=globalThis.webpackChunkgithub_docs||[]).push([[5827],{6583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>_,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"oauth/scenarios/oauth-server","title":"\uc790\uccb4 OAuth 2.0 \uc11c\ubc84 \uad6c\ucd95","description":"FastAPI\ub85c \uc644\uc804\ud55c OAuth 2.0 Authorization Server\ub97c \ucc98\uc74c\ubd80\ud130 \uad6c\ucd95\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","source":"@site/docs/oauth/scenarios/oauth-server.md","sourceDirName":"oauth/scenarios","slug":"/oauth/scenarios/oauth-server","permalink":"/tobias-docs/comp-1/docs/oauth/scenarios/oauth-server","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oauth/scenarios/oauth-server.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"oauthSidebar","previous":{"title":"\uc18c\uc15c \ub85c\uadf8\uc778 \uc644\uc804 \uad6c\ud604","permalink":"/tobias-docs/comp-1/docs/oauth/scenarios/social-login"},"next":{"title":"SPA \ud1b5\ud569","permalink":"/tobias-docs/comp-1/docs/oauth/scenarios/spa-integration"}}');var r=t(4848),o=t(8453);const s={sidebar_position:2},c="\uc790\uccb4 OAuth 2.0 \uc11c\ubc84 \uad6c\ucd95",a={},d=[{value:"\ud83c\udfaf \ubaa9\ud45c",id:"-\ubaa9\ud45c",level:2},{value:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98",id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",level:2},{value:"\ud83d\udce6 \uc124\uce58",id:"-\uc124\uce58",level:2},{value:"\ud83d\udcbe \ub370\uc774\ud130 \ubaa8\ub378",id:"-\ub370\uc774\ud130-\ubaa8\ub378",level:2},{value:"\ud83d\udd10 Authorization Endpoint",id:"-authorization-endpoint",level:2},{value:"\ud83c\udfab Token Endpoint",id:"-token-endpoint",level:2},{value:"\ud83d\udc64 UserInfo Endpoint",id:"-userinfo-endpoint",level:2},{value:"\ud83d\udd0d Introspection Endpoint",id:"-introspection-endpoint",level:2},{value:"\ud83d\udeab Revocation Endpoint",id:"-revocation-endpoint",level:2},{value:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c",id:"-\uad00\ub828-\ubb38\uc11c",level:2},{value:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4",id:"-\ub2e4\uc74c-\ub2e8\uacc4",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\uc790\uccb4-oauth-20-\uc11c\ubc84-\uad6c\ucd95",children:"\uc790\uccb4 OAuth 2.0 \uc11c\ubc84 \uad6c\ucd95"})}),"\n",(0,r.jsx)(n.p,{children:"FastAPI\ub85c \uc644\uc804\ud55c OAuth 2.0 Authorization Server\ub97c \ucc98\uc74c\ubd80\ud130 \uad6c\ucd95\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.h2,{id:"-\ubaa9\ud45c",children:"\ud83c\udfaf \ubaa9\ud45c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 OAuth 2.0 \uc11c\ubc84 \uc544\ud0a4\ud14d\ucc98 \uc774\ud574"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Authorization Endpoint \uad6c\ud604"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Token Endpoint \uad6c\ud604"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Client \uad00\ub9ac"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Scope \ubc0f \uad8c\ud55c \uad00\ub9ac"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-\uc544\ud0a4\ud14d\ucc98",children:"\ud83c\udfd7\ufe0f \uc544\ud0a4\ud14d\ucc98"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"OAuth 2.0 Server\n\u251c\u2500\u2500 Authorization Endpoint    (/authorize)\n\u251c\u2500\u2500 Token Endpoint           (/token)\n\u251c\u2500\u2500 UserInfo Endpoint        (/userinfo)\n\u251c\u2500\u2500 Introspection Endpoint   (/introspect)\n\u251c\u2500\u2500 Revocation Endpoint      (/revoke)\n\u2514\u2500\u2500 Discovery Endpoint       (/.well-known/oauth-authorization-server)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\uc124\uce58",children:"\ud83d\udce6 \uc124\uce58"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install fastapi uvicorn sqlalchemy alembic\npip install authlib python-jose[cryptography]\npip install passlib[bcrypt] python-multipart\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-\ub370\uc774\ud130-\ubaa8\ub378",children:"\ud83d\udcbe \ub370\uc774\ud130 \ubaa8\ub378"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# models.py\nfrom sqlalchemy import Column, Integer, String, Text, Boolean, DateTime, JSON\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom datetime import datetime\n\nBase = declarative_base()\n\nclass OAuth2Client(Base):\n    """OAuth 2.0 \ud074\ub77c\uc774\uc5b8\ud2b8"""\n\n    __tablename__ = "oauth2_clients"\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(String(48), unique=True, nullable=False, index=True)\n    client_secret = Column(String(120), nullable=True)  # Public client\ub294 null\n    client_name = Column(String(100), nullable=False)\n\n    # Client \uc720\ud615\n    client_type = Column(String(20), nullable=False)  # confidential, public\n\n    # Redirect URIs (JSON \ubc30\uc5f4)\n    redirect_uris = Column(JSON, nullable=False)\n\n    # Allowed grant types\n    grant_types = Column(JSON, nullable=False)  # ["authorization_code", "refresh_token"]\n\n    # Allowed scopes\n    scopes = Column(JSON, nullable=False)  # ["read", "write"]\n\n    # PKCE required\n    require_pkce = Column(Boolean, default=False)\n\n    created_at = Column(DateTime, default=datetime.utcnow)\n\nclass OAuth2AuthorizationCode(Base):\n    """Authorization Code"""\n\n    __tablename__ = "oauth2_authorization_codes"\n\n    id = Column(Integer, primary_key=True)\n    code = Column(String(120), unique=True, nullable=False, index=True)\n    client_id = Column(String(48), nullable=False)\n    user_id = Column(Integer, nullable=False)\n    redirect_uri = Column(String(500), nullable=False)\n    scope = Column(String(500))\n\n    # PKCE\n    code_challenge = Column(String(128))\n    code_challenge_method = Column(String(10))  # S256, plain\n\n    # \ub9cc\ub8cc\n    expires_at = Column(DateTime, nullable=False)\n    used = Column(Boolean, default=False)\n\n    created_at = Column(DateTime, default=datetime.utcnow)\n\nclass OAuth2Token(Base):\n    """Access Token & Refresh Token"""\n\n    __tablename__ = "oauth2_tokens"\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(String(48), nullable=False)\n    user_id = Column(Integer, nullable=False)\n\n    # Tokens\n    access_token = Column(String(500), unique=True, nullable=False, index=True)\n    refresh_token = Column(String(500), unique=True, nullable=True, index=True)\n\n    # Scope\n    scope = Column(String(500))\n\n    # \ub9cc\ub8cc\n    access_token_expires_at = Column(DateTime, nullable=False)\n    refresh_token_expires_at = Column(DateTime, nullable=True)\n\n    # \ud3d0\uae30\n    revoked = Column(Boolean, default=False)\n\n    created_at = Column(DateTime, default=datetime.utcnow)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-authorization-endpoint",children:"\ud83d\udd10 Authorization Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Request, Depends, HTTPException, Form\nfrom fastapi.responses import RedirectResponse, HTMLResponse\nfrom sqlalchemy.orm import Session\nimport secrets\nfrom datetime import datetime, timedelta\nfrom urllib.parse import urlencode\n\napp = FastAPI()\n\n@app.get("/authorize")\nasync def authorize(\n    request: Request,\n    client_id: str,\n    redirect_uri: str,\n    response_type: str,\n    scope: str = "",\n    state: str = "",\n    code_challenge: str = None,\n    code_challenge_method: str = None,\n    db: Session = Depends(get_db),\n    current_user = Depends(get_current_user)\n):\n    """Authorization Endpoint"""\n\n    # 1. Client \uac80\uc99d\n    client = db.query(OAuth2Client).filter_by(client_id=client_id).first()\n    if not client:\n        raise HTTPException(status_code=400, detail="Invalid client")\n\n    # 2. Redirect URI \uac80\uc99d\n    if redirect_uri not in client.redirect_uris:\n        raise HTTPException(status_code=400, detail="Invalid redirect_uri")\n\n    # 3. Response Type \uac80\uc99d\n    if response_type not in client.grant_types:\n        return error_redirect(redirect_uri, "unsupported_response_type", state)\n\n    # 4. Scope \uac80\uc99d\n    requested_scopes = set(scope.split())\n    allowed_scopes = set(client.scopes)\n\n    if not requested_scopes.issubset(allowed_scopes):\n        return error_redirect(redirect_uri, "invalid_scope", state)\n\n    # 5. PKCE \uac80\uc99d (\ud544\uc694 \uc2dc)\n    if client.require_pkce and not code_challenge:\n        return error_redirect(redirect_uri, "invalid_request", state)\n\n    # 6. \uc0ac\uc6a9\uc790 \ub3d9\uc758 \ud655\uc778 (\uc774\ubbf8 \ub3d9\uc758\ud588\ub294\uc9c0 \ud655\uc778)\n    consent = check_user_consent(db, current_user.id, client_id, scope)\n\n    if not consent:\n        # \ub3d9\uc758 \ud654\uba74 \ud45c\uc2dc\n        return show_consent_page(\n            client=client,\n            scope=scope,\n            state=state,\n            redirect_uri=redirect_uri,\n            code_challenge=code_challenge,\n            code_challenge_method=code_challenge_method\n        )\n\n    # 7. Authorization Code \uc0dd\uc131\n    code = generate_authorization_code(\n        db=db,\n        client_id=client_id,\n        user_id=current_user.id,\n        redirect_uri=redirect_uri,\n        scope=scope,\n        code_challenge=code_challenge,\n        code_challenge_method=code_challenge_method\n    )\n\n    # 8. Redirect\n    params = {"code": code}\n    if state:\n        params["state"] = state\n\n    redirect_url = f"{redirect_uri}?{urlencode(params)}"\n    return RedirectResponse(url=redirect_url)\n\ndef generate_authorization_code(\n    db: Session,\n    client_id: str,\n    user_id: int,\n    redirect_uri: str,\n    scope: str,\n    code_challenge: str = None,\n    code_challenge_method: str = None\n) -> str:\n    """Authorization Code \uc0dd\uc131"""\n\n    code = secrets.token_urlsafe(32)\n    expires_at = datetime.utcnow() + timedelta(minutes=10)\n\n    auth_code = OAuth2AuthorizationCode(\n        code=code,\n        client_id=client_id,\n        user_id=user_id,\n        redirect_uri=redirect_uri,\n        scope=scope,\n        code_challenge=code_challenge,\n        code_challenge_method=code_challenge_method,\n        expires_at=expires_at\n    )\n\n    db.add(auth_code)\n    db.commit()\n\n    return code\n\ndef show_consent_page(client, scope, state, redirect_uri, code_challenge, code_challenge_method):\n    """\ub3d9\uc758 \ud654\uba74 HTML"""\n\n    return HTMLResponse(content=f"""\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>\uad8c\ud55c \uc2b9\uc778</title>\n        <style>\n            body {{ font-family: Arial, sans-serif; max-width: 500px; margin: 50px auto; }}\n            .app-info {{ background: #f5f5f5; padding: 20px; border-radius: 8px; }}\n            .scopes {{ margin: 20px 0; }}\n            .scope-item {{ padding: 8px; background: white; margin: 4px 0; border-radius: 4px; }}\n            .buttons {{ margin-top: 20px; }}\n            button {{ padding: 12px 24px; margin: 0 8px; cursor: pointer; }}\n            .approve {{ background: #4CAF50; color: white; border: none; }}\n            .deny {{ background: #f44336; color: white; border: none; }}\n        </style>\n    </head>\n    <body>\n        <div class="app-info">\n            <h2>{client.client_name}</h2>\n            <p>\ub2e4\uc74c \uad8c\ud55c\uc744 \uc694\uccad\ud569\ub2c8\ub2e4:</p>\n\n            <div class="scopes">\n                {\'\'.join(f\'<div class="scope-item">{s}</div>\' for s in scope.split())}\n            </div>\n\n            <form method="post" action="/consent">\n                <input type="hidden" name="client_id" value="{client.client_id}">\n                <input type="hidden" name="redirect_uri" value="{redirect_uri}">\n                <input type="hidden" name="scope" value="{scope}">\n                <input type="hidden" name="state" value="{state}">\n                <input type="hidden" name="code_challenge" value="{code_challenge or \'\'}">\n                <input type="hidden" name="code_challenge_method" value="{code_challenge_method or \'\'}">\n\n                <div class="buttons">\n                    <button type="submit" name="action" value="approve" class="approve">\uc2b9\uc778</button>\n                    <button type="submit" name="action" value="deny" class="deny">\uac70\ubd80</button>\n                </div>\n            </form>\n        </div>\n    </body>\n    </html>\n    """)\n\n@app.post("/consent")\nasync def consent(\n    request: Request,\n    action: str = Form(...),\n    client_id: str = Form(...),\n    redirect_uri: str = Form(...),\n    scope: str = Form(...),\n    state: str = Form(""),\n    code_challenge: str = Form(None),\n    code_challenge_method: str = Form(None),\n    db: Session = Depends(get_db),\n    current_user = Depends(get_current_user)\n):\n    """\ub3d9\uc758 \ucc98\ub9ac"""\n\n    if action == "deny":\n        return error_redirect(redirect_uri, "access_denied", state)\n\n    # \ub3d9\uc758 \uc800\uc7a5\n    save_user_consent(db, current_user.id, client_id, scope)\n\n    # Authorization Code \uc0dd\uc131\n    code = generate_authorization_code(\n        db=db,\n        client_id=client_id,\n        user_id=current_user.id,\n        redirect_uri=redirect_uri,\n        scope=scope,\n        code_challenge=code_challenge,\n        code_challenge_method=code_challenge_method\n    )\n\n    params = {"code": code}\n    if state:\n        params["state"] = state\n\n    redirect_url = f"{redirect_uri}?{urlencode(params)}"\n    return RedirectResponse(url=redirect_url)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-token-endpoint",children:"\ud83c\udfab Token Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from jose import jwt\nimport hashlib\nimport base64\n\n@app.post("/token")\nasync def token(\n    grant_type: str = Form(...),\n    code: str = Form(None),\n    redirect_uri: str = Form(None),\n    client_id: str = Form(...),\n    client_secret: str = Form(None),\n    code_verifier: str = Form(None),\n    refresh_token: str = Form(None),\n    scope: str = Form(None),\n    db: Session = Depends(get_db)\n):\n    """Token Endpoint"""\n\n    # Client \uac80\uc99d\n    client = db.query(OAuth2Client).filter_by(client_id=client_id).first()\n    if not client:\n        raise HTTPException(status_code=400, detail="invalid_client")\n\n    # Client Secret \uac80\uc99d (Confidential Client)\n    if client.client_type == "confidential":\n        if not client_secret or client.client_secret != client_secret:\n            raise HTTPException(status_code=400, detail="invalid_client")\n\n    # Grant Type\ubcc4 \ucc98\ub9ac\n    if grant_type == "authorization_code":\n        return handle_authorization_code_grant(\n            db, client, code, redirect_uri, code_verifier\n        )\n    elif grant_type == "refresh_token":\n        return handle_refresh_token_grant(\n            db, client, refresh_token, scope\n        )\n    elif grant_type == "client_credentials":\n        return handle_client_credentials_grant(\n            db, client, scope\n        )\n    else:\n        raise HTTPException(status_code=400, detail="unsupported_grant_type")\n\ndef handle_authorization_code_grant(\n    db: Session,\n    client: OAuth2Client,\n    code: str,\n    redirect_uri: str,\n    code_verifier: str = None\n):\n    """Authorization Code Grant"""\n\n    # 1. Authorization Code \uc870\ud68c\n    auth_code = db.query(OAuth2AuthorizationCode).filter_by(\n        code=code,\n        client_id=client.client_id\n    ).first()\n\n    if not auth_code:\n        raise HTTPException(status_code=400, detail="invalid_grant")\n\n    # 2. \ub9cc\ub8cc \ud655\uc778\n    if auth_code.expires_at < datetime.utcnow():\n        raise HTTPException(status_code=400, detail="invalid_grant")\n\n    # 3. \uc774\ubbf8 \uc0ac\uc6a9\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\n    if auth_code.used:\n        raise HTTPException(status_code=400, detail="invalid_grant")\n\n    # 4. Redirect URI \ud655\uc778\n    if auth_code.redirect_uri != redirect_uri:\n        raise HTTPException(status_code=400, detail="invalid_grant")\n\n    # 5. PKCE \uac80\uc99d\n    if auth_code.code_challenge:\n        if not code_verifier:\n            raise HTTPException(status_code=400, detail="invalid_request")\n\n        # Code Challenge \uc7ac\uacc4\uc0b0\n        if auth_code.code_challenge_method == "S256":\n            computed_challenge = base64.urlsafe_b64encode(\n                hashlib.sha256(code_verifier.encode()).digest()\n            ).decode().rstrip(\'=\')\n        else:  # plain\n            computed_challenge = code_verifier\n\n        if computed_challenge != auth_code.code_challenge:\n            raise HTTPException(status_code=400, detail="invalid_grant")\n\n    # 6. Code \uc0ac\uc6a9 \ucc98\ub9ac\n    auth_code.used = True\n    db.commit()\n\n    # 7. Tokens \uc0dd\uc131\n    tokens = create_tokens(\n        db=db,\n        client_id=client.client_id,\n        user_id=auth_code.user_id,\n        scope=auth_code.scope\n    )\n\n    return tokens\n\ndef create_tokens(\n    db: Session,\n    client_id: str,\n    user_id: int,\n    scope: str\n) -> dict:\n    """Access Token & Refresh Token \uc0dd\uc131"""\n\n    # Access Token\n    access_token_expires = datetime.utcnow() + timedelta(hours=1)\n    access_token_payload = {\n        "sub": str(user_id),\n        "client_id": client_id,\n        "scope": scope,\n        "exp": access_token_expires,\n        "iat": datetime.utcnow(),\n        "jti": secrets.token_urlsafe(16)\n    }\n    access_token = jwt.encode(\n        access_token_payload,\n        SECRET_KEY,\n        algorithm="HS256"\n    )\n\n    # Refresh Token\n    refresh_token_expires = datetime.utcnow() + timedelta(days=30)\n    refresh_token_payload = {\n        "sub": str(user_id),\n        "client_id": client_id,\n        "scope": scope,\n        "exp": refresh_token_expires,\n        "iat": datetime.utcnow(),\n        "jti": secrets.token_urlsafe(16)\n    }\n    refresh_token = jwt.encode(\n        refresh_token_payload,\n        SECRET_KEY,\n        algorithm="HS256"\n    )\n\n    # DB \uc800\uc7a5\n    token_record = OAuth2Token(\n        client_id=client_id,\n        user_id=user_id,\n        access_token=access_token,\n        refresh_token=refresh_token,\n        scope=scope,\n        access_token_expires_at=access_token_expires,\n        refresh_token_expires_at=refresh_token_expires\n    )\n    db.add(token_record)\n    db.commit()\n\n    return {\n        "access_token": access_token,\n        "token_type": "Bearer",\n        "expires_in": 3600,\n        "refresh_token": refresh_token,\n        "scope": scope\n    }\n\ndef handle_refresh_token_grant(\n    db: Session,\n    client: OAuth2Client,\n    refresh_token: str,\n    scope: str = None\n):\n    """Refresh Token Grant"""\n\n    # Refresh Token \uac80\uc99d\n    token_record = db.query(OAuth2Token).filter_by(\n        refresh_token=refresh_token,\n        client_id=client.client_id,\n        revoked=False\n    ).first()\n\n    if not token_record:\n        raise HTTPException(status_code=400, detail="invalid_grant")\n\n    # \ub9cc\ub8cc \ud655\uc778\n    if token_record.refresh_token_expires_at < datetime.utcnow():\n        raise HTTPException(status_code=400, detail="invalid_grant")\n\n    # Scope \ud655\uc778 (\uc694\uccad scope\ub294 \uc6d0\ub798 scope\uc758 \ubd80\ubd84\uc9d1\ud569\uc774\uc5b4\uc57c \ud568)\n    if scope:\n        requested_scopes = set(scope.split())\n        original_scopes = set(token_record.scope.split())\n        if not requested_scopes.issubset(original_scopes):\n            raise HTTPException(status_code=400, detail="invalid_scope")\n    else:\n        scope = token_record.scope\n\n    # \uc0c8 Access Token \uc0dd\uc131\n    access_token_expires = datetime.utcnow() + timedelta(hours=1)\n    access_token_payload = {\n        "sub": str(token_record.user_id),\n        "client_id": client.client_id,\n        "scope": scope,\n        "exp": access_token_expires,\n        "iat": datetime.utcnow(),\n        "jti": secrets.token_urlsafe(16)\n    }\n    access_token = jwt.encode(\n        access_token_payload,\n        SECRET_KEY,\n        algorithm="HS256"\n    )\n\n    # \uae30\uc874 Access Token \uc5c5\ub370\uc774\ud2b8\n    token_record.access_token = access_token\n    token_record.access_token_expires_at = access_token_expires\n    db.commit()\n\n    return {\n        "access_token": access_token,\n        "token_type": "Bearer",\n        "expires_in": 3600,\n        "scope": scope\n    }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-userinfo-endpoint",children:"\ud83d\udc64 UserInfo Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.get("/userinfo")\nasync def userinfo(\n    authorization: str = Header(...),\n    db: Session = Depends(get_db)\n):\n    """UserInfo Endpoint (OIDC)"""\n\n    # Bearer \ud1a0\ud070 \ucd94\ucd9c\n    if not authorization.startswith("Bearer "):\n        raise HTTPException(status_code=401, detail="invalid_token")\n\n    access_token = authorization[7:]\n\n    # Token \uac80\uc99d\n    token_record = db.query(OAuth2Token).filter_by(\n        access_token=access_token,\n        revoked=False\n    ).first()\n\n    if not token_record:\n        raise HTTPException(status_code=401, detail="invalid_token")\n\n    # \ub9cc\ub8cc \ud655\uc778\n    if token_record.access_token_expires_at < datetime.utcnow():\n        raise HTTPException(status_code=401, detail="invalid_token")\n\n    # \uc0ac\uc6a9\uc790 \uc815\ubcf4 \uc870\ud68c\n    user = db.query(User).filter_by(id=token_record.user_id).first()\n\n    # Scope\uc5d0 \ub530\ub77c \ubc18\ud658 \uc815\ubcf4 \uacb0\uc815\n    scopes = set(token_record.scope.split())\n    user_info = {"sub": str(user.id)}\n\n    if "email" in scopes:\n        user_info["email"] = user.email\n        user_info["email_verified"] = user.email_verified\n\n    if "profile" in scopes:\n        user_info["name"] = user.name\n        user_info["picture"] = user.picture\n\n    return user_info\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-introspection-endpoint",children:"\ud83d\udd0d Introspection Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.post("/introspect")\nasync def introspect(\n    token: str = Form(...),\n    token_type_hint: str = Form(None),\n    client_id: str = Form(...),\n    client_secret: str = Form(...),\n    db: Session = Depends(get_db)\n):\n    """Token Introspection (RFC 7662)"""\n\n    # Client \uac80\uc99d\n    client = db.query(OAuth2Client).filter_by(\n        client_id=client_id,\n        client_secret=client_secret\n    ).first()\n\n    if not client:\n        raise HTTPException(status_code=401, detail="invalid_client")\n\n    # Token \uc870\ud68c\n    token_record = db.query(OAuth2Token).filter_by(\n        access_token=token\n    ).first()\n\n    if not token_record or token_record.revoked:\n        return {"active": False}\n\n    # \ub9cc\ub8cc \ud655\uc778\n    if token_record.access_token_expires_at < datetime.utcnow():\n        return {"active": False}\n\n    # Active token \uc815\ubcf4 \ubc18\ud658\n    return {\n        "active": True,\n        "scope": token_record.scope,\n        "client_id": token_record.client_id,\n        "username": str(token_record.user_id),\n        "exp": int(token_record.access_token_expires_at.timestamp()),\n        "iat": int(token_record.created_at.timestamp())\n    }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-revocation-endpoint",children:"\ud83d\udeab Revocation Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.post("/revoke")\nasync def revoke(\n    token: str = Form(...),\n    token_type_hint: str = Form(None),\n    client_id: str = Form(...),\n    client_secret: str = Form(None),\n    db: Session = Depends(get_db)\n):\n    """Token Revocation (RFC 7009)"""\n\n    # Client \uac80\uc99d\n    client = db.query(OAuth2Client).filter_by(client_id=client_id).first()\n    if not client:\n        raise HTTPException(status_code=401)\n\n    if client.client_type == "confidential":\n        if client.client_secret != client_secret:\n            raise HTTPException(status_code=401)\n\n    # Token \ud3d0\uae30\n    token_record = db.query(OAuth2Token).filter(\n        (OAuth2Token.access_token == token) |\n        (OAuth2Token.refresh_token == token)\n    ).first()\n\n    if token_record:\n        token_record.revoked = True\n        db.commit()\n\n    return {}  # 200 OK (\uc131\uacf5 \uc5ec\ubd80 \uad00\uacc4\uc5c6\uc774)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-\uad00\ub828-\ubb38\uc11c",children:"\ud83d\udd17 \uad00\ub828 \ubb38\uc11c"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../basic/flows",children:"Authorization Flows"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../advanced/security",children:"\ubcf4\uc548 Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../advanced/token-management",children:"\ud1a0\ud070 \uad00\ub9ac"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-\ub2e4\uc74c-\ub2e8\uacc4",children:"\ud83c\udfaf \ub2e4\uc74c \ub2e8\uacc4"}),"\n",(0,r.jsx)(n.p,{children:"OAuth \uc11c\ubc84\ub97c \uad6c\ucd95\ud588\ub2e4\uba74, \uc774\uc81c SPA \ud1b5\ud569\uc744 \ubc30\uc6cc\ubd05\uc2dc\ub2e4!"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,r.jsx)(n.a,{href:"./spa-integration",children:"SPA \ud1b5\ud569"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udca1 \ud301"}),": \uc790\uccb4 OAuth \uc11c\ubc84\ub294 \ubcf5\uc7a1\ud569\ub2c8\ub2e4. \ud504\ub85c\ub355\uc158\uc5d0\uc11c\ub294 Auth0, Keycloak \uac19\uc740 \uac80\uc99d\ub41c \uc194\ub8e8\uc158 \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\uc138\uc694!"]})]})}function _(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);